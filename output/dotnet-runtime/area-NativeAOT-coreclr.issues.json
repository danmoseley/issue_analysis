[
    {
        "url":  "https://github.com/dotnet/runtime/issues/69919",
        "createdAt":  "2020-10-08T12:25:01Z",
        "number":  69919,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJm4Gg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "christianscheuer",
                                            "createdAt":  "2021-07-27T10:50:23Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "lxy0797",
                                            "createdAt":  "2022-02-05T09:48:02Z"
                                        },
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "lxy0797",
                                            "createdAt":  "2022-02-05T09:47:50Z"
                                        },
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "hlizard",
                                            "createdAt":  "2022-10-11T01:12:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DeafMan1983",
                                            "createdAt":  "2023-05-03T07:05:57Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "DeafMan1983",
                                            "createdAt":  "2023-05-03T07:06:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EgorBo",
                                            "createdAt":  "2024-08-26T10:46:24Z"
                                        },
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "Ruslan0990",
                                            "createdAt":  "2024-08-27T08:57:23Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2025-08-02T04:29:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2025-08-02T08:51:53Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2025-08-29T00:09:52Z",
        "body":  "- [ ] Runtime doesn\u0027t wrap non-exception throws into a System.Exception (IL allows `throw new object()`)\n- [ ] Limited support for multi-dim arrays with non-zero lower bounds (can be created in IL or with reflection)\n- [ ] Type equivalence\n- [ ] COM (https://github.com/dotnet/runtimelab/issues/306)\n- [ ] SAFEARRAY and VARIANT marshalling\n- [ ] Runtime assembly loading (`LoadFrom`, `LoadFromAssemblyPath`)\n- [ ] Collectible assemblies\n- [ ] Reflection.Emit\n- [ ] Reflection-invoking static constructors and finalizers\n- [ ] Managed C++ and C++/CLI\n- [ ] Varargs (accessible in C# through undocumented keywords only)\n- [ ] Complex tail calls\n- [ ] RuntimeHelpers.InitializeArray that cannot be intrinsically expanded\n- [ ] JMP instruction\n- [ ] Thorough checking of invalid inputs (might not throw an exception for certain invalid inputs)\n- [ ] Stack walking from reflection call (reflection-invoking `Type.GetType` expecting to see the calling assembly of the reflection call)\n- [ ] String literals don\u0027t have the same identity as strings retrieved through String.Intern\n- [ ] Assembly.GetCallingAssembly\n- [ ] Assembly.GetSatelliteAssembly\n- [ ] Handling of exceptions thrown out of a module initializer\n- [x] Thread.Interrupt (#118293)\n- [x] Named mutexes on Unix (https://github.com/dotnet/runtime/issues/48720)\n- [x] System.Runtime.InteropServices.ObjectiveC\n- [ ] Constructing delegates outside verifiable delegate sequence\n- [ ] Finalizers should not run for objects with unsuccessful class init (.cctor)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi0j_zQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNDAwNDI3MzA=",
                                           "createdAt":  "2020-10-08T14:27:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tomrus88",
                                           "body":  "\u003e * COM and SAFEARRAY marshalling\r\n\r\nDoes it mean WinForms and WPF won\u0027t be supported? Because I think both of those require COM support.",
                                           "updatedAt":  "2020-10-08T14:28:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNDAwNDI3MzI=",
                                           "createdAt":  "2020-10-08T14:32:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "We\u0027ll need to build tools that convert COM interop into something AOT friendlier before the AOT compiler ever sees it - similar to how [CsWinRT](https://github.com/microsoft/CsWinRT) does it for WinRT.\r\n\r\nThere\u0027s been a lot of discussions about this e.g. here https://github.com/dotnet/corert/issues/4219.",
                                           "updatedAt":  "2020-10-08T14:32:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNDAwNDI3MzM=",
                                           "createdAt":  "2020-11-20T12:41:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "darkguy2008",
                                           "body":  "Sorry to bother, but what about `Assembly.Load`, `Assembly.LoadFrom` or `AssemblyName.GetAssemblyName` ? Since NativeAOT/CoreRT doesn\u0027t support Entity Framework, my idea was to put all the EF stuff in a secondary library and then call it with the Assembly functions or Reflection, but it seems it\u0027s not even possible. Such a deal-breaker.\r\n\r\nHowever, investigating I found out that @tonerdo https://github.com/dotnet/corert/issues/5011#issuecomment-408715555 did have some success getting `Assembly.Load` to work with some kind of experimental code/libs. \r\n\r\nIs there any way to see this implemented in the short/mid term anytime soon? What can we do (or needs to be done) for this to work? Considering there was a successful test some time ago?",
                                           "updatedAt":  "2020-11-20T12:42:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNDAwNDI3MzU=",
                                           "createdAt":  "2020-11-20T17:20:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCfFGMQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rgwood",
                                                                               "createdAt":  "2020-11-29T06:56:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "darkguy2008",
                                                                               "createdAt":  "2020-11-21T03:46:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "That would require ability to load managed plugins. We do not have plans to do that as part of this project. There is a lot of discussion on the reasons behind that in https://github.com/dotnet/runtimelab/issues/248.",
                                           "updatedAt":  "2020-11-20T17:20:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D86vy",
                                           "createdAt":  "2021-07-27T09:06:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hez2010",
                                           "body":  "Is `Assembly.GetEntryAssembly().Location` the same? I hit this which returns a null instead of the entry assembly location.",
                                           "updatedAt":  "2021-07-27T09:06:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D86vz",
                                           "createdAt":  "2021-07-27T09:10:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "No managed assembly exists after compilation. Native EXE != assembly. This is the same as when publishing single file in .NET 5.",
                                           "updatedAt":  "2021-07-27T09:10:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EjmRW",
                                           "createdAt":  "2022-06-08T17:14:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCg6yZA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "MichalStrehovsky",
                                                                               "createdAt":  "2022-06-08T21:42:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hez2010",
                                           "body":  "\u003e similar to how CsWinRT does it for WinRT\n\nUnfortunately, CsWinRT is not aot friendly at all. You may want to see the disaster: https://github.com/microsoft/CsWinRT/blob/c181cb45f2b92d663a736e966982c93516403f21/src/WinRT.Runtime/TypeExtensions.cs",
                                           "updatedAt":  "2022-06-08T17:15:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VRyNF",
                                           "createdAt":  "2023-02-15T04:05:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEfTlkQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "MichalStrehovsky",
                                                                               "createdAt":  "2023-02-15T05:11:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2023-02-15T07:03:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "RenderMichael",
                                                                               "createdAt":  "2025-08-02T04:24:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "aepot",
                                                                               "createdAt":  "2025-08-22T19:07:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "AustinWise",
                                           "body":  "The last one can be knocked off the list #77472 =)",
                                           "updatedAt":  "2023-02-15T04:05:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bWQwO",
                                           "createdAt":  "2023-05-03T07:18:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeafMan1983",
                                           "body":  "Please support for `Marshal.GetDelegateFunctionPointer\u003c\u003e()` in NativeAot! I tested own GameLauncher with loading native libraries ( ported from Half-Life + Engine without client and server ) GameLauncher uses PublishSingleFile and PublishTrimmed and Engine ( native library ) uses PublishAot, StripSymbols. I am excited to release game written in C# because I want release games in 64Bit. If GameLauncher should use PublishAot, StripSymbols and native executable. ",
                                           "updatedAt":  "2023-05-03T07:18:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bWWGl",
                                           "createdAt":  "2023-05-03T07:41:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEfTlBw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "En3Tho",
                                                                               "createdAt":  "2023-05-03T09:21:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2023-05-04T06:34:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aepot",
                                                                               "createdAt":  "2025-08-22T19:06:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Please support for Marshal.GetDelegateFunctionPointer\u003c\u003e()\r\n\r\n[Function pointers](https://devblogs.microsoft.com/dotnet/improvements-in-native-code-interop-in-net-5-0/#function-pointers) are more performant and AOT friendly replacement for `Marshal.GetDelegateFunctionPointer`. Can you use them instead? If you need help with how to switch to function pointers, please open a new issue or discussion on it.",
                                           "updatedAt":  "2023-05-03T07:41:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LSP_N",
                                           "createdAt":  "2024-09-08T20:36:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e Sorry to bother, but what about `Assembly.Load`, `Assembly.LoadFrom` or `AssemblyName.GetAssemblyName` ?\r\n\r\nSeems like `GetAssemblyName` works with .NET 8 and 9: `AssemblyName.GetAssemblyName(\"/path/to/foo.dll\")`",
                                           "updatedAt":  "2024-09-08T20:36:55Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Limitations that we\u0027re not planning to address right now",
        "labels":  [
                       "enhancement",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89157",
        "createdAt":  "2021-03-26T10:34:54Z",
        "number":  89157,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-14T06:07:57Z",
        "body":  "It only works for the most straightforward cases. See failing System.Runtime tests blocked on this issue.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoQiTnw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE2NDEyNDc1NDc=",
                                           "createdAt":  "2021-03-27T19:14:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Suchiman",
                                           "body":  "I\u0027ve looked into this and discovered two issues:\r\n\r\n1) For generic methods with unbound generic parameters it panics with `(System.Reflection.MissingRuntimeArtifactException): This object cannot be invoked because no code was generated for it: \u0027InterfaceMapTest.SimpleType.GenericMethod()\u0027` [here](https://github.com/dotnet/runtimelab/blob/59277cf6be955c11a5c20258154a0dcd5c399546/src/coreclr/nativeaot/System.Private.Reflection.Execution/src/Internal/Reflection/Execution/ExecutionEnvironmentImplementation.Runtime.cs#L87), also discovered dotnet/runtime#95245 while looking into this. One workaround that could get us closer but still not all the way would be calling `MakeGenericMethod(typeof(object))` on them if they don\u0027t have incompatible generic constraints before calling `GetMethodInvoker` and then using `GetGenericMethodDefinition` on the result.\r\n\r\n2) The [MethodBase returned from RuntimeAugments.Callbacks.GetMethodBaseFromStartAddressIfAvailable(classRtMethodHandle)](https://github.com/dotnet/runtimelab/blob/59277cf6be955c11a5c20258154a0dcd5c399546/src/coreclr/nativeaot/System.Private.Reflection.Execution/src/Internal/Reflection/Execution/ExecutionEnvironmentImplementation.Runtime.cs#L95) is `Void Method(T)` instead of `Void Method(System.Object)` when `T` is `object`, if `T` is `string` then it correctly returns `Void Method(System.String)` though. I\u0027d suspect it\u0027s some issue around `object ~ System.__Canon` in `GetMethodBaseFromStartAddressIfAvailable`? If `GetMethodBaseFromStartAddressIfAvailable` cannot be fixed one could use `MakeGenericMethod(typeof(object))` for this special case.",
                                           "updatedAt":  "2021-03-27T19:14:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE2NDEyNDc1NTE=",
                                           "createdAt":  "2021-03-28T08:36:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "For 2, I\u0027m surprised it doesn\u0027t just crash - we\u0027re asking for a method invoker of an uninstantiated method, basically (the interface methods returned from GetMethods are uninstantiated). I don\u0027t know if there\u0027s a easy way to solve this. We could do MakeGeneric, but that might end up throwing if the code doesn\u0027t exist.",
                                           "updatedAt":  "2021-03-28T08:36:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE2NDEyNDc1NTM=",
                                           "createdAt":  "2021-03-28T13:14:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Suchiman",
                                           "body":  "\u003e we\u0027re asking for a method invoker of an uninstantiated method\r\n\r\nThat\u0027s what\u0027s happening in 1), in 2) we\u0027re having actually instantiated methods because they\u0027re being retrieved from\r\n```csharp\r\ninterface IGenericInterface\u003cT\u003e\r\n{\r\n    void Method(T arg);\r\n}\r\n\r\nvar ifaceMethod = typeof(IGenericInterface\u003cobject\u003e).GetMethod(\"Method\"); // Void Method(System.Object)\r\nvar invoker = (VirtualMethodInvoker)GetMethodInvoker(ifaceMethod);\r\nIntPtr classRtMethodHandle = invoker.ResolveTarget(instanceType.TypeHandle);\r\nMethodBase methodBase = RuntimeAugments.Callbacks.GetMethodBaseFromStartAddressIfAvailable(classRtMethodHandle); // Void Method(T)\r\n```",
                                           "updatedAt":  "2021-03-28T13:18:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE2NDEyNDc1NTY=",
                                           "createdAt":  "2021-03-29T09:38:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "[MethodBase.GetMethodFromHandle](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.methodbase.getmethodfromhandle?view=net-5.0) has two overloads to combat the issue with generic sharing - maybe there\u0027s something in the implementation of it that we could leverage (I haven\u0027t actually looked though).",
                                           "updatedAt":  "2021-03-29T09:38:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h03NH",
                                           "createdAt":  "2023-06-15T01:27:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "If/when this is fully implemented, we also need to make sure reflection-visibility of the interface method also ensures reflection-visibility of the implementation method. There won\u0027t be anything in the compiler to ensure the target methods are reflection visible. Note that doing this for everything is a size regression so we should make sure compiler only makes targets reflection-visible if GetInterfaceMap is actually called. Nobody actually calls this API.",
                                           "updatedAt":  "2023-06-15T01:28:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hCJOf",
                                           "createdAt":  "2025-03-05T18:04:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TickThunder",
                                           "body":  "this API still has issues. Is there a plan to fix it? Like #113521 ",
                                           "updatedAt":  "2025-03-14T06:07:56Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Type.GetInterfaceMap doesn\u0027t work for all cases",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82384",
        "createdAt":  "2021-09-03T00:55:45Z",
        "number":  82384,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCue6DA==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "jkotas",
                                            "createdAt":  "2021-09-03T01:15:00Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "ChrML",
                                            "createdAt":  "2021-09-12T10:22:45Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-27T21:20:59Z",
        "body":  "While looking at a repro case with Linq.Parallel, I\u0027m seeing we\u0027re spending *significant* amount of time in this method. Basically, whenever I break into the debugger at random intervals, stack looks like below.\r\n\r\nIt feels like `TemplateConstructableTypes` is just us saying \"describing the dependencies of the individual native layout nodes is hard\".\r\n\r\nThere\u0027s some context in https://github.com/dotnet/corert/commit/cc4c035b0577f7c2c5fcaa1768be2cdd16164abc, https://github.com/dotnet/corert/commit/1dc677b4e09e1540f4fdb4a0eeff1529c19691cf, and https://github.com/dotnet/corert/issues/4860.\r\n\r\nI think we can do better.\r\n\r\nOf course fixing this is going to be risky and probably introduce regressions. It\u0027s probably worth it.\r\n\r\n```\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type)\tC#\r\n\u003e\tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NativeLayoutHelper.TemplateConstructableTypes(Internal.TypeSystem.TypeDesc type) Line 244\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NativeLayoutTemplateTypeLayoutVertexNode.GetStaticDependencies(ILCompiler.DependencyAnalysis.NodeFactory context) Line 968\tC#\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Get rid of TemplateConstructableTypes",
        "labels":  [
                       "in-pr",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64629",
        "createdAt":  "2022-02-01T16:55:05Z",
        "number":  64629,
        "author":  "webczat",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-01T01:21:29Z",
        "body":  "Coreclr/CoreRT are not designed to be unloaded without process exit.\r\nIn case of anative aot\u0027ed shared library, it\u0027s possible it will be used in dynamic loading/plugin scenarios, so it might be loaded and then possibly unloaded by the plugin host, causing process to malfunction/crash.\r\nThis has been fixed for windows (commit 7b6c0025482aaf8476a6f4ecd357e89a0516ce47) by pinning the library in memory so that it cannot be unloaded, however there is no such fix for unix.\r\nThis is still marked as a TODO in file https://github.com/dotnet/runtime/blob/main/src/tests/nativeaot/SmokeTests/SharedLibrary/SharedLibrary.cpp#L79",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWyYYuA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49N6_f",
                                           "createdAt":  "2022-02-01T16:55:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-02-01T16:55:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49N7Wl",
                                           "createdAt":  "2022-02-01T16:56:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "webczat",
                                           "body":  "cc @MichalStrehovsky If this is not a dupe I would be happy to fix it.",
                                           "updatedAt":  "2022-02-01T16:56:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49PhPN",
                                           "createdAt":  "2022-02-02T01:10:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I\u0027ve looked a bit more into this with the suggestion from https://github.com/dotnet/corert/pull/7011#discussion_r350326064.\r\n\r\nIf we want to use dlopen with RTLD_NODELETE, we need to get a path to the library first. We would probably want to do all of it around here: https://github.com/dotnet/runtime/blob/b2dc37ba181a7fa4427e717eab819ba3543d0ae4/src/coreclr/nativeaot/Bootstrap/main.cpp#L171-L174",
                                           "updatedAt":  "2022-02-02T01:10:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49QJO6",
                                           "createdAt":  "2022-02-02T07:02:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "webczat",
                                           "body":  "the commit mentioned above does this in a function named PalGetModuleHandleFromPointer. I have looked at the unix equivalent of this function and it uses `dladdr` to fetch the handle, and the same function also gives the library pathname.\r\nAlthough doing it there looks a bit out of place to me, we have a precedent of using dladdr in the codebase for unix context, so I could either use dladdr in the place you mentioned or possibly just dlopen/dlclose when the above mentioned function is called. dlclose is needed so that refcount doesn\u0027t increase needlessly.\r\nThe only thing I don\u0027t know is whether OSx allows what linux does, adding a nodelete flag to an already loaded library, which I tested works on linux.",
                                           "updatedAt":  "2022-02-02T07:02:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49V0Ic",
                                           "createdAt":  "2022-02-03T15:50:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "webczat",
                                           "body":  "I know it\u0027s not directly related to the issue but before trying to fix things in any way, I anted to first have a test case showing the fix was effective.\r\n\r\nI have tried to uncomment the dlclose line in src/tests/nativeaot/SmokeTests/SharedLibrary/SharedLibrary.cpp but it seems like on linux/glibc the library does not get unloaded, even though it does not have nodelete flag. I have no idea why this is happening so I wouldn\u0027t rely on that as it might be specific to linux or glibc, or might even be a coincidence. I have also verified that I can still call the library functions after dlclose.\r\n\r\nI know that in case of a plain program not linked to anything except standard libs and libdl, during loading/dlopening the native aoted shared library, what is also loaded is librt, libpthread and then dlopened libicu. rt and pthread are marked nodelete during loading, but I don\u0027t see any traces of SharedLibrary.so being marked nodelete.\r\n\r\nWhen searching for the possible problem causes one can find https://stackoverflow.com/questions/38869657/dlclose-not-unloading-so-file-which-is-linking-to-boost but IMO this might not be the same problem as, if I am not mistaken, the text of the top answer suggests that the dlopened library should be marked nodelete automatically in this case, yet it seems not happening here.\r\n\r\nI have tried to reproduce things by creating a program dlopening a library which dlopens (and leaves opened) another library. Then the first library is closed and gets unloaded even when I also link it with libpthread and librt, which I confirm are loaded too.\r\n\r\nAny clue what may cause this? I doubt it\u0027s just the corert suddenly not being unloadable.",
                                           "updatedAt":  "2022-02-03T15:50:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49cvJj",
                                           "createdAt":  "2022-02-06T23:49:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I guess it\u0027s good news that it won\u0027t unload, but I don\u0027t have a good idea why either.",
                                           "updatedAt":  "2022-02-06T23:49:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49dvgL",
                                           "createdAt":  "2022-02-07T08:42:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "webczat",
                                           "body":  "I don\u0027t thing it\u0027s good because we don\u0027t know why and that condition might suddenly become false, or be false on musl or on mac or even on a different compiler. But I have confirmed that the library cannot be unloaded via repeatedly dlclosing it.",
                                           "updatedAt":  "2022-02-07T08:42:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bIdsH",
                                           "createdAt":  "2023-04-30T05:52:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeafMan1983",
                                           "body":  "I am sorry @MichalStrehovsky You mean library can\u0027t unload. Is it possible `dlclose` or other method under unix-like functions. Or possible [Unload, Reload....](https://aixxe.net/2016/09/shared-library-injection)",
                                           "updatedAt":  "2023-04-30T05:58:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bIjS4",
                                           "createdAt":  "2023-04-30T08:22:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "webczat",
                                           "body":  "the intention is they are not unloadable at all, also with dlclose.",
                                           "updatedAt":  "2023-04-30T08:22:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bJhi4",
                                           "createdAt":  "2023-05-01T01:21:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC66S8w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "josephmoresena",
                                                                               "createdAt":  "2023-05-01T21:56:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Yup, unloading them at this point is equivalent to pulling the rug from under it. There will still be treads running various things and their code/static data just got unloaded. Nothing good comes out of that. Even if it doesn\u0027t crash, we leaked a bunch of memory and handles.",
                                           "updatedAt":  "2023-05-01T01:21:29Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Native aot\u0027ed shared libraries should not be unloadable on unix",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66620",
        "createdAt":  "2022-03-14T23:25:31Z",
        "number":  66620,
        "author":  "AhmedZero",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-23T11:50:16Z",
        "body":  "\r\n### Description\r\n\r\nwhen I use the following example without NativeAOT, it\u0027s very fast, but with NativeAOT, I found it\u0027s very slow.\r\n   ```C#\r\nusing System.Runtime.InteropServices;\r\nusing System.ComponentModel;\r\nusing System.Reflection;\r\nnamespace MyApp \r\n{\r\n\r\n public static class Utils\r\n    {\r\n        public static string GetDescription(this Enum value)\r\n        {\r\n            FieldInfo field = value.GetType().GetField(value.ToString());\r\n\r\n            DescriptionAttribute attribute\r\n                    = Attribute.GetCustomAttribute(field, typeof(DescriptionAttribute))\r\n                        as DescriptionAttribute;\r\n\r\n            return attribute == null ? value.ToString() : attribute.Description;\r\n        }\r\n    }\r\ninternal unsafe class Program\r\n    {\r\n        public enum Item\r\n        {\r\n            [Description(\"Zero\")]\r\n            Useless,\r\n            [Description(\"Test--1\")]\r\n            Test1,\r\n            [Description(\"Test--2\")]\r\n            Test2,\r\n            [Description(\"Test--3\")]\r\n            Test3,\r\n            [Description(\"Test--4\")]\r\n            Test4,\r\n            [Description(\"Test--5\")]\r\n            Test5,\r\n            [Description(\"Test--6\")]\r\n            Test6,\r\n            [Description(\"Test--7\")]\r\n            Test7,\r\n            [Description(\"Test--8\")]\r\n            Test8,\r\n            [Description(\"Test--9\")]\r\n            Test9,\r\n            [Description(\"Test--10\")]\r\n            Test10,\r\n            [Description(\"Test--11\")]\r\n            Test11,\r\n            [Description(\"Test--12\")]\r\n            Test12,\r\n            [Description(\"Test--13\")]\r\n            Test13,\r\n            [Description(\"Test--14\")]\r\n            Test14,\r\n            [Description(\"Test--15\")]\r\n            Test15,\r\n            [Description(\"Test--16\")]\r\n            Test16,\r\n            [Description(\"Test--17\")]\r\n            Test17,\r\n            [Description(\"Test--18\")]\r\n            Test18,\r\n            [Description(\"Test--19\")]\r\n            Test19,\r\n            [Description(\"Test--20\")]\r\n            Test20,\r\n            [Description(\"Test--21\")]\r\n            Test21,\r\n            [Description(\"Test--22\")]\r\n            Test22,\r\n            [Description(\"Test--23\")]\r\n            Test23,\r\n            [Description(\"Test--24\")]\r\n            Test24,\r\n            [Description(\"Test--25\")]\r\n            Test25,\r\n            [Description(\"Test--26\")]\r\n            Test26,\r\n            [Description(\"Test--27\")]\r\n            Test27,\r\n            [Description(\"Test--28\")]\r\n            Test28,\r\n            [Description(\"Test--29\")]\r\n            Test29,\r\n            [Description(\"Test--30\")]\r\n            Test30,\r\n            [Description(\"Test--31\")]\r\n            Test31,\r\n            [Description(\"Test--32\")]\r\n            Test32,\r\n            [Description(\"Test--33\")]\r\n            Test33,\r\n            [Description(\"Test--34\")]\r\n            Test34,\r\n            [Description(\"Test--35\")]\r\n            Test35,\r\n            [Description(\"Test--36\")]\r\n            Test36\r\n        }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            Stopwatch sw = new Stopwatch();\r\n            sw.Start();\r\n            List\u003cstring\u003e test1 = new List\u003cstring\u003e();\r\n            for (int i = 0; i \u003c 100000; i++)\r\n            {\r\n                test1.Add(Item.Test36.GetDescription());\r\n            }\r\n            sw.Stop();\r\n            Console.WriteLine(\"First Example: \" + sw.ElapsedTicks);\r\n            sw.Restart();\r\n            sw.Start();\r\n            List\u003cstring\u003e test2 = new List\u003cstring\u003e();\r\n            for (int i = 0; i \u003c 100000; i++)\r\n            {\r\n                test2.Add(\"test--36\");\r\n            }\r\n            sw.Stop();\r\n            Console.WriteLine(\"Second Example: \" + sw.ElapsedTicks);\r\n\r\n            Console.ReadKey();\r\n        }\r\n   }\r\n}\r\n```\r\n### Output\r\nWithout NativeAOT\r\n```\r\nFirst Example: 1711806\r\nSecond Example: 10042\r\n```\r\nWith NativeAOT\r\n```\r\nFirst Example: 5760899\r\nSecond Example: 20363\r\n```\r\n### Configuration\r\nWin-x64\r\n.NET 6\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv7xJIQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4_nzhn",
                                           "createdAt":  "2022-03-14T23:25:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-03-14T23:25:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_pnOH",
                                           "createdAt":  "2022-03-15T11:22:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCTkK-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "agocke",
                                                                               "createdAt":  "2022-03-16T18:01:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SupinePandora43",
                                                                               "createdAt":  "2022-03-18T06:02:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "hez2010",
                                           "body":  "There\u0027s some performance degrade but not that huge. For performance test you need to use BenchmarkDotNet to get accurate result, rather than using a StopWatch around a loop iteration whose result can be affected by many other factors. \r\n\r\nI ran it with BenchmarkDotNet and got this result:\r\n\r\n|   Method | Toolchain |       Mean |     Error |    StdDev |\r\n|--------- |---------- |-----------:|----------:|----------:|\r\n| Example1 |  .NET 6.0 | 107.742 ms | 2.0753 ms | 3.1062 ms |\r\n| Example2 |  .NET 6.0 |   1.033 ms | 0.0191 ms | 0.0267 ms |\r\n| Example1 | NativeAOT | 155.764 ms | 3.4181 ms | 5.1160 ms |\r\n| Example2 | NativeAOT |   1.123 ms | 0.0222 ms | 0.0325 ms |\r\n\r\nList itself has no performance difference between JIT and NativeAOT, while reflection in NativeAOT is a bit slower than JIT.",
                                           "updatedAt":  "2022-03-15T11:25:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_p-vO",
                                           "createdAt":  "2022-03-15T13:08:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AhmedZero",
                                           "body":  "I don\u0027t know benchmark.net works with NativeAOT and my program has those conditions and I program it like that.\nwhen the program add a lot of elements to the list, the performance becomes bad.",
                                           "updatedAt":  "2023-04-20T08:01:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_qoEG",
                                           "createdAt":  "2022-03-15T15:42:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e List itself has no performance difference between JIT and NativeAOT, while reflection in NativeAOT is a bit slower than JIT.\r\n\r\nYes, this is what I am seeing as well.",
                                           "updatedAt":  "2022-03-15T15:42:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_-mzy",
                                           "createdAt":  "2022-03-20T23:53:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AhmedZero",
                                           "body":  "NativeAOT\r\n|   Method |       Mean |      Error |    StdDev |\r\n|--------- |-----------:|-----------:|----------:|\r\n| Example1 | 175.341 ms | 11.0707 ms | 0.6068 ms |\r\n| Example2 |   1.002 ms |  0.2061 ms | 0.0113 ms |\r\n\r\nWithout NativeAOT\r\n\r\n\r\n|   Method |        Mean |     Error |    StdDev |\r\n|--------- |------------:|----------:|----------:|\r\n| Example1 | 124.3967 ms | 2.4448 ms | 3.0919 ms |\r\n| Example2 |   0.8375 ms | 0.0163 ms | 0.0167 ms |\r\n\r\n\r\nyou\u0027re correct @hez2010 ",
                                           "updatedAt":  "2022-03-20T23:54:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_vEkh",
                                           "createdAt":  "2025-08-23T11:50:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AhmedZero",
                                           "body":  "BenchmarkDotNet v0.15.2, Windows 11 (10.0.26100.4946/24H2/2024Update/HudsonValley)\n13th Gen Intel Core i7-13700HX 2.10GHz, 1 CPU, 24 logical and 16 physical cores\n.NET SDK 9.0.304\n  [Host]        : .NET 9.0.8 (9.0.825.36511), X64 RyuJIT AVX2\n  .NET 9.0      : .NET 9.0.8 (9.0.825.36511), X64 RyuJIT AVX2\n  NativeAOT 9.0 : .NET 9.0.8, X64 NativeAOT AVX2\n\n\n| Method   | Job           | Runtime       | Mean         | Error       | StdDev      |\n|--------- |-------------- |-------------- |-------------:|------------:|------------:|\n| Example1 | .NET 9.0      | .NET 9.0      |  55,481.4 μs | 1,096.69 μs | 1,386.96 μs |\n| Example2 | .NET 9.0      | .NET 9.0      |     435.5 μs |     7.11 μs |     6.65 μs |\n| Example1 | NativeAOT 9.0 | NativeAOT 9.0 | 221,162.7 μs | 4,321.69 μs | 4,976.86 μs |\n| Example2 | NativeAOT 9.0 | NativeAOT 9.0 |     567.2 μs |     4.82 μs |     4.51 μs |\n",
                                           "updatedAt":  "2025-08-23T11:50:02Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Reflection performance in NativeAOT",
        "labels":  [
                       "tenet-performance",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67531",
        "createdAt":  "2022-04-04T11:06:55Z",
        "number":  67531,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-04-04T12:17:19Z",
        "body":  "Failing System.Reflection tests:\r\n\r\n```\r\n  [FAIL] System.Reflection.Tests.ConstructorInfoTests.Invoke_TwoParameters_CustomBinder_IncorrectTypeArgument\r\n  Assert.True() Failure\r\n  Expected: True\r\n  Actual:   False\r\n     at System.Reflection.Tests.ConstructorInfoTests.Invoke_TwoParameters_CustomBinder_IncorrectTypeArgument() + 0x11b\r\n     at System.Reflection.Tests!\u003cBaseAddress\u003e+0x695708\r\n     at System.InvokeUtils.CallDynamicInvokeMethod(Object, IntPtr, IntPtr, IntPtr, Object, Object[], BinderBundle, Boolean, Boolean) + 0x19c\r\n  [FAIL] System.Reflection.Tests.ConstructorInfoTests.Invoke_TwoDimensionalArray_CustomBinder_IncorrectTypeArguments\r\n  Assert.True() Failure\r\n  Expected: True\r\n  Actual:   False\r\n     at System.Reflection.Tests.ConstructorInfoTests.Invoke_TwoDimensionalArray_CustomBinder_IncorrectTypeArguments() + 0x14c\r\n     at System.Reflection.Tests!\u003cBaseAddress\u003e+0x695708\r\n     at System.InvokeUtils.CallDynamicInvokeMethod(Object, IntPtr, IntPtr, IntPtr, Object, Object[], BinderBundle, Boolean, Boolean) + 0x19c\r\n  [FAIL] System.Reflection.Tests.MethodInfoTests.Invoke_TwoParameters_CustomBinder_IncorrectTypeArguments\r\n  Assert.True() Failure\r\n  Expected: True\r\n  Actual:   False\r\n     at System.Reflection.Tests.MethodInfoTests.Invoke_TwoParameters_CustomBinder_IncorrectTypeArguments() + 0x103\r\n     at System.Reflection.Tests!\u003cBaseAddress\u003e+0x695708\r\n     at System.InvokeUtils.CallDynamicInvokeMethod(Object, IntPtr, IntPtr, IntPtr, Object, Object[], BinderBundle, Boolean, Boolean) + 0x19c\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Binder should update the input array",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68714",
        "createdAt":  "2022-04-29T18:32:54Z",
        "number":  68714,
        "author":  "smhmhmd",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAEPTQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dguisinger",
                                            "createdAt":  "2024-09-04T04:00:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Inurias",
                                            "createdAt":  "2025-03-14T00:39:30Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-13T16:38:10Z",
        "body":  "### Description\n\nexception.StackTrace() does not show line numbers for the NativeAOT binary, it shows for the dotnet dll\r\n\n\n### Reproduction Steps\n\n\t\r\n     // The dotnet dll is built as  \u0027dotnet publish -c release --self-contained -r linux-x64\u0027\r\n     // The NativeAOT binary is built as \u0027dotnet publish -r linux-x64 --self-contained\u0027\r\n\r\n      using System;\r\n\r\n\tnamespace MyApp\r\n\t{\r\n\t\tinternal class Program\r\n\t\t{\r\n\t\t\tstatic double SafeDivision(double x, double y)\r\n\t\t\t{\r\n\t\t\t\tif (y == 0)\r\n\t\t\t\t\tthrow new DivideByZeroException();\r\n\t\t\t\treturn x / y;\r\n\t\t\t}\r\n\r\n\t\t\tstatic void func() {\r\n\t\t\t\t// Input for test purposes. Change the values to see\r\n\t\t\t\t// exception handling behavior.\r\n\t\t\t\tdouble a = 98, b = 0;\r\n\t\t\t\tdouble result;\r\n\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = SafeDivision(a, b);\r\n\t\t\t\t\tConsole.WriteLine(\"{0} divided by {1} = {2}\", a, b, result);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (Exception ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tConsole.WriteLine(ex.GetType().FullName);\r\n\t\t\t\t\tConsole.WriteLine(ex.Message);\r\n\t\t\t\t\tConsole.WriteLine(ex.StackTrace);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpublic static void Main()\r\n\t\t\t{\r\n\t\t\t\tfunc();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\n\n### Expected behavior\n\nLine numbers show in this expected exception:   \r\n\r\n      $ ./exception \r\n       System.DivideByZeroException\r\n       Attempted to divide by zero.\r\n          at MyApp.Program.SafeDivision(Double x, Double y) in /home/ubuntu/exception/Program.cs:line 10\r\n          at MyApp.Program.func() in /home/ubuntu/exception/Program.cs:line 22\n\n### Actual behavior\n\nLine numbers do not show with the NativeAOT binary:\r\n\r\n       $ ./exception \r\n         System.DivideByZeroException\r\n         Attempted to divide by zero.\r\n           at MyApp.Program.SafeDivision(Double, Double) + 0x67\r\n           at MyApp.Program.func() + 0x65\r\n\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoUhmqA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5CYEMi",
                                           "createdAt":  "2022-04-29T18:32:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-04-29T18:32:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CYRIN",
                                           "createdAt":  "2022-04-29T19:36:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Earlier unfinished work: https://github.com/dotnet/corert/pull/7658",
                                           "updatedAt":  "2022-04-29T19:36:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vL1m-",
                                           "createdAt":  "2023-12-21T02:05:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emrys90",
                                           "body":  "Is this still an issue in .NET 8? Any workarounds for it?",
                                           "updatedAt":  "2023-12-21T02:05:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vXYSe",
                                           "createdAt":  "2023-12-24T00:33:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygoe",
                                           "body":  "@emrys90 Yes, still shows the same behaviour in .NET 8. Haven\u0027t looked for workarounds yet. I\u0027m just happy that I managed to write meaningful AOT code finally.",
                                           "updatedAt":  "2023-12-24T00:33:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vXxRX",
                                           "createdAt":  "2023-12-24T12:10:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emrys90",
                                           "body":  "I hope someone finds a workaround for this. It\u0027s extremely difficult to track down automated bug reports when you don\u0027t have accurate stack trace info.",
                                           "updatedAt":  "2023-12-24T12:10:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vXyIf",
                                           "createdAt":  "2023-12-24T12:29:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygoe",
                                           "body":  "Yes. I now try to write shorter methods so that the method names already give more information. And I\u0027m not sure whether I want to publish the existing .pdb files as they\u0027re many times larger than the application itself. (.exe is 3 MB, largest of the .pdb is 27 MB)\r\n\r\nI tried to make sense of the offsets that are shown in the stack trace, but the numbers are bigger than the last instruction\u0027s IL offset, so I assume these are offsets in the native code. ILSpy won\u0027t help me with this. And as the compiler may order things around, a higher offset doesn\u0027t necessarily mean a code line further down.",
                                           "updatedAt":  "2023-12-24T12:29:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6K2bmI",
                                           "createdAt":  "2024-09-04T16:35:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dguisinger",
                                           "body":  "This still exists in late 2024, are there any plans to fix this?",
                                           "updatedAt":  "2024-09-04T16:35:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hSGao",
                                           "createdAt":  "2025-03-07T08:51:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThaDaVos",
                                           "body":  "Still happening in 2025 - makes debugging a bit difficult, especially if you have multiple calls to the same function and can\u0027t figure out, which of them generates the exception - guess I\u0027ll have to check each one...",
                                           "updatedAt":  "2025-03-07T08:51:48Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "NativeAOT: exception.StackTrace() does not show line numbers",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/69745",
        "createdAt":  "2022-05-24T19:14:37Z",
        "number":  69745,
        "author":  "LakshanF",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-14T20:02:39Z",
        "body":  "Throws an exception for the following code when using Expressions to decrement a Nullable\u003cDecimal\u003e. \r\n\r\nNote that this actually applies to Decimal itself (its just that the first test case I came across in `System.Linq.Expressions` library tests was using Nullable)\r\n\r\n`System.InvalidOperationException : The unary operator PreDecrementAssign is not defined for the type \u0027System.Nullable`1[System.Decimal]\u0027\r\n`\r\n```C#\r\nusing System;\r\nusing System.Linq.Expressions;\r\nusing System.Diagnostics;\r\n\r\npublic class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        ReturnsCorrectValues(typeof(Decimal?), -1m, -2m, true);\r\n        Console.WriteLine(\"pass\");\r\n    }\r\n    public static void ReturnsCorrectValues(Type type, object value, object result, bool useInterpreter)\r\n    {\r\n        ParameterExpression variable = Expression.Variable(type);\r\n        BlockExpression block = Expression.Block(\r\n            new[] { variable },\r\n            Expression.Assign(variable, Expression.Constant(value, type)),\r\n            Expression.PreDecrementAssign(variable)\r\n            );\r\n        Debug.Assert(Expression.Lambda\u003cFunc\u003cbool\u003e\u003e(Expression.Equal(Expression.Constant(result, type), block)).Compile(useInterpreter)());\r\n    }\r\n}\r\n\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOX5muAg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5DuyNf",
                                           "createdAt":  "2022-05-24T19:14:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThrows an exception for the following code when using Expressions to decrement a Nullable\u003cDecimal\u003e,\r\n\r\n`System.InvalidOperationException : The unary operator PreDecrementAssign is not defined for the type \u0027System.Nullable`1[System.Decimal]\u0027\r\n`\r\n```C#\r\nusing System;\r\nusing System.Linq.Expressions;\r\nusing System.Diagnostics;\r\n\r\npublic class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        ReturnsCorrectValues(typeof(Decimal?), -1m, -2m, true);\r\n        Console.WriteLine(\"pass\");\r\n    }\r\n    public static void ReturnsCorrectValues(Type type, object value, object result, bool useInterpreter)\r\n    {\r\n        ParameterExpression variable = Expression.Variable(type);\r\n        BlockExpression block = Expression.Block(\r\n            new[] { variable },\r\n            Expression.Assign(variable, Expression.Constant(value, type)),\r\n            Expression.PreDecrementAssign(variable)\r\n            );\r\n        Debug.Assert(Expression.Lambda\u003cFunc\u003cbool\u003e\u003e(Expression.Equal(Expression.Constant(result, type), block)).Compile(useInterpreter)());\r\n    }\r\n}\r\n\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq.Expressions`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-24T19:14:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Du0C8",
                                           "createdAt":  "2022-05-24T19:23:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCedE2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LakshanF",
                                                                               "createdAt":  "2022-05-24T20:20:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I think we need to port Sven\u0027s https://github.com/dotnet/linker/pull/2125.\r\n\r\nCc @dotnet/ilc-contrib ",
                                           "updatedAt":  "2022-05-24T19:23:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fma4C",
                                           "createdAt":  "2023-06-23T08:16:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "We wouldn\u0027t need this if #79016 get implemented instead.",
                                           "updatedAt":  "2023-06-23T08:16:17Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[NativeAOT] Nullable\u003cDecimal\u003e does not preserve operators",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71591",
        "createdAt":  "2022-07-03T06:39:36Z",
        "number":  71591,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-11T09:17:06Z",
        "body":  "https://github.com/dotnet/runtime/pull/71524#discussion_r911919055\r\n\r\nDepending on our future thoughts about universal shared code and JIT/interpreter support, we might want to consider bringing back the pre-USG version of the type loader that was a lot simpler and easier to work with. Might be cheaper to restore that and tweak it than to simplify the existing System.Private.TypeLoader logic that kind of organically outgrew its original purpose.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Review backout logic in the type loader",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72246",
        "createdAt":  "2022-07-15T05:09:38Z",
        "number":  72246,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-11T12:03:10Z",
        "body":  "```\r\n[FAIL] System.Threading.Threads.Tests.ThreadTests.PriorityTest\r\nAssert.Equal() Failure\r\nExpected: AboveNormal\r\nActual:   Normal\r\n   at System.Threading.Threads.Tests.ThreadTests.PriorityTest() + 0x144\r\n   at System.Threading.Thread!\u003cBaseAddress\u003e+0xe847d1\r\n   at System.InvokeUtils.CallDynamicInvokeMethod(Object, IntPtr, IntPtr, IntPtr, Object, Object[], BinderBundle, Boolean, Boolean) + 0x163\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYTJ_TQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HDN7P",
                                           "createdAt":  "2022-07-21T23:28:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "On Linux, only privileged processes (with CAP_SYS_NICE capability) can change priority. And setting priority also requires using SCHED_RR or SCHED_FIFO schedulers for a given process. With the default scheduler, processes can only set a relative priority called \"nice\".",
                                           "updatedAt":  "2022-07-21T23:28:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HDcBo",
                                           "createdAt":  "2022-07-22T01:19:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "The test expects this to work even on Linux - maybe we just fake it somewhere in the CoreCLR PAL and it\u0027s not the thread priority that the OS considers?\r\n\r\nhttps://github.com/dotnet/runtime/blob/a54a823ece1094dd05b7380614bd43566834a8f9/src/libraries/System.Threading.Thread/tests/ThreadTests.cs#L671-L688",
                                           "updatedAt":  "2022-07-22T01:19:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hMn9N",
                                           "createdAt":  "2023-07-11T12:03:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Digging into this more, CoreCLR seems to always returns what it believes should be the thread priority:\r\n\r\nhttps://github.com/dotnet/runtime/blob/4e48d2d85ed15140b95323e615a5433726b583b2/src/coreclr/pal/src/include/pal/thread.hpp#L565-L571\r\n\r\nNativeAOT on the other side queries the OS for what\u0027s the truth (the motivation is explained there - in case someone else changed it):\r\n\r\nhttps://github.com/dotnet/runtime/blob/4e48d2d85ed15140b95323e615a5433726b583b2/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Threading/Thread.NativeAot.cs#L205-L220\r\n\r\nI\u0027m going to put this issue into Future milestone. Looks like we document this as \"Operating systems are not required to honor the priority of a thread.\" so we could potentially fix this by always returning our idea of priority like CoreCLR does, but also I\u0027m not ready to kick into that can of worms because the CoreCLR side has many layers and I\u0027m sure I missed something. The NativeAOT version is too straightforward and that\u0027s always scary.",
                                           "updatedAt":  "2023-07-11T12:03:04Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ThreadTests.PriorityTest fails on Linux",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72589",
        "createdAt":  "2022-07-21T08:29:38Z",
        "number":  72589,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-12T20:55:43Z",
        "body":  "We currently invalidate the callsite. We should instead generate a call to a throw helper.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Implement static virtual reabstraction/diamond case",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72911",
        "createdAt":  "2022-07-27T06:21:51Z",
        "number":  72911,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-29T04:13:52Z",
        "body":  "We have a couple libs tests (such as `GetObjectForNativeVariant_ThrowsNotSupportedException`) that expect variant marshalling to throw when COM is disabled. We have partial support for variant marshalling. Either delete it fully from NativeAOT or adapt the tests such that they only fail if COM is actually needed (but this wouldn\u0027t match the CoreCLR behavior).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR3Usog==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HdKz_",
                                           "createdAt":  "2022-07-29T02:57:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The variant marshalling was done by @kant2002 in https://github.com/dotnet/runtimelab/pull/1182 to make more of WinForms work.\r\n\r\nAs we work through making WinForms work trimming and built-in COM disabled, we will see what\u0027s the best uniform course of the action here - for both CoreCLR w/ trimming and NativeAOT.",
                                           "updatedAt":  "2022-07-29T02:57:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HdSxP",
                                           "createdAt":  "2022-07-29T04:13:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Yup, it\u0027s likely the resolution for this will fall out from the WinForms work since we\u0027ll want WinForms to work with COM disabled on CoreCLR. I just needed some issue to block the tests on that is in the Future milestone and we don\u0027t plan to do anything for in a while.",
                                           "updatedAt":  "2022-07-29T04:13:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HdSyi",
                                           "createdAt":  "2022-07-29T04:13:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kant2002",
                                           "body":  "Based on my experience, I would like to ask for proper Variant implementation. Right now all of them private and it seems half done (in a sense obviously), both in NativeAOT and in WinForms. There a lot of edge cases from original interop, and maintaining them is painful. I like NativeAOT implementation better, even if WinForms Variant was slightly easier to understand. \r\n",
                                           "updatedAt":  "2022-07-29T04:13:52Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Decide what to do with variant marshalling",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73356",
        "createdAt":  "2022-08-04T05:23:36Z",
        "number":  73356,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-14T08:25:26Z",
        "body":  "The library test fails.\r\n\r\n```\r\n[FAIL] System.Reflection.Context.Tests.CustomReflectionContextTests.MapType_MemberAttributes_Success\r\nAssert.IsType() Failure\r\nExpected: System.Reflection.Context.Tests.TestAttribute\r\nActual:   System.Runtime.Serialization.OnSerializedAttribute\r\n   at System.Reflection.Context.Tests.CustomReflectionContextTests.MapType_MemberAttributes_Success() + 0x8b\r\n   at System.Reflection.Context.Tests!\u003cBaseAddress\u003e+0x3f9edc\r\n   at System.Reflection.DynamicInvokeInfo.Invoke(Object, IntPtr, Object[], BinderBundle, Boolean) + 0xf1\r\n[FAIL] System.Reflection.Context.Tests.CustomReflectionContextTests.MapType_ParameterAttributes_Success\r\nAssert.IsType() Failure\r\nExpected: System.Reflection.Context.Tests.TestAttribute\r\nActual:   System.Reflection.Context.Tests.TestParameterAttribute\r\n   at System.Reflection.Context.Tests.CustomReflectionContextTests.MapType_ParameterAttributes_Success() + 0xf2\r\n   at System.Reflection.Context.Tests!\u003cBaseAddress\u003e+0x3f9edc\r\n   at System.Reflection.DynamicInvokeInfo.Invoke(Object, IntPtr, Object[], BinderBundle, Boolean) + 0xf1\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR9-3Jw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5H37cn",
                                           "createdAt":  "2022-08-04T22:49:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqEPZg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichalStrehovsky",
                                                                               "createdAt":  "2022-08-05T05:15:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This is caused by subtle behavior differences in CoreCLR vs. NativeAOT reflection. \r\n\r\nIt should be fixed by deleting https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Reflection/Attribute.NativeAot.cs, replacing it with https://github.com/dotnet/runtime/blob/main/src/coreclr/System.Private.CoreLib/src/System/Attribute.CoreCLR.cs, and tying up loose ends.",
                                           "updatedAt":  "2022-08-04T22:49:03Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[NativeAot] System.Reflection.Context.Tests.CustomReflectionContextTests.MapType_MemberAttributes_Success",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73429",
        "createdAt":  "2022-08-05T04:00:39Z",
        "number":  73429,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqAQGw==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "SupinePandora43",
                                            "createdAt":  "2022-08-06T12:16:09Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-12T20:17:04Z",
        "body":  "\r\n`RhpPInvokeExceptionGuard` is supposed to be used by PInvokes. Somehow that was lost and should be reintroduced.\r\n\r\nAlso consider use in suspension hijack probes and other assembly helpers.\r\nPerhaps either all should use a personality routine or none.\r\n\r\nRe: https://github.com/dotnet/runtime/pull/73216#discussion_r938363589",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSAfDNg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5IBMIj",
                                           "createdAt":  "2022-08-08T15:23:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Personality routine should be used only in helpers where there is a possibility that an exception could get propagated through the helper. So I don\u0027t think that all asm helpers should have it.",
                                           "updatedAt":  "2022-08-08T15:23:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IB0cC",
                                           "createdAt":  "2022-08-08T18:00:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "@janvorli In a case of Hijack helpers, which do not call any user code, do we need personality routines? \r\nIf they do not have any, will it result in failfast in a case of a bug? (like null deref due to a race or smth like that).",
                                           "updatedAt":  "2022-08-08T18:00:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IB1TZ",
                                           "createdAt":  "2022-08-08T18:03:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Aslo, there is one caveat - we check and may throw ThreadAbort when resuming from suspension. That can happen in a hijack helper.\r\nWill that make it required to have a personality routine?",
                                           "updatedAt":  "2022-08-08T18:03:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IB8M2",
                                           "createdAt":  "2022-08-08T18:32:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "When there is no personality routine, the exception handling doesn\u0027t \"see\" the helper, so the exception flows from the callee to the caller of the helper. If we want to cause fail-fast or do some special handling if an exception crosses the frame of the helper, then we need a personality routine to achieve that.",
                                           "updatedAt":  "2022-08-08T18:32:58Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[NativeAOT] reintroduce the use of personality routines in PInvoke stubs",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73438",
        "createdAt":  "2022-08-05T07:25:12Z",
        "number":  73438,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-21T18:31:33Z",
        "body":  "I think these tests are just untrimmable, but I can\u0027t make sense of this.\r\n\r\nI think it\u0027s about the serializer-like pattern in EventSource but someone who actually understands what\u0027s going on might want to go over this.\r\n\r\n```\r\nC:\\git\\runtime\\artifacts\\bin\\Microsoft.Extensions.Logging.EventSource.Tests\\Release\\net7.0\\publish\u003eMicrosoft.Extensions.Logging.EventSource.Tests.exe -notrait category=failing\r\nRunning assembly:Microsoft.Extensions.Logging.EventSource.Tests, Version=7.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[FAIL] Microsoft.Extensions.Logging.Test.EventSourceLoggerTest.Logs_OnlyMessage_IfKeywordSet\r\nAssert.Collection() Failure\r\nCollection: [\"{\\\"__EVENT_NAME\\\":\\\"Message\\\",\\\"Level\\\":1,\\\"Factor\"..., \"{\\\"__EVENT_NAME\\\":\\\"Message\\\",\\\"Level\\\":2,\\\"Factor\"..., \"{\\\"__EVENT_NAME\\\":\\\"ActivityStart\\\",\\\"ID\\\":1,\\\"Fac\"..., \"{\\\"__EVENT_NAME\\\":\\\"Message\\\",\\\"Level\\\":4,\\\"Factor\"..., \"{\\\"__EVENT_NAME\\\":\\\"Message\\\",\\\"Level\\\":5,\\\"Factor\"..., ...]\r\nError during comparison of item at index 4\r\nInner exception: Event data \u0027{\"__EVENT_NAME\":\"Message\",\"Level\":5,\"FactoryID\":3,\"LoggerName\":\"Logger2\",\"EventId\":5,\"EventName\":\"\",\"Exception\":null,\"Arguments\":[{\"Key\":\"stringParam\",\"Value\":\"bar\"},{\"Key\":\"int1Param\",\"Value\":\"23\"},{\"Key\":\"int2Param\",\"Value\":\"45\"},{\"Key\":\"{OriginalFormat}\",\"Value\":\"Logger2 Event5 Critical {stringParam} {int1Param} {int2Param}\"}]}\u0027 does not contain expected fragment \"Exception\":{\"TypeName\":\"System.Exception\",\"Message\":\"oops\",\"HResult\":-2146233088,\"VerboseMessage\":\"System.Exception: oops\\r\\n ---\u003e System.Exception: inner oops\r\n        Expected: True\r\n        Actual:   False\r\n   at Microsoft.Extensions.Logging.Test.EventSourceLoggerTest.VerifySingleEvent(String, String, String, Nullable`1, String, Nullable`1, String[]) + 0xc1b\r\n   at Microsoft.Extensions.Logging.Test.EventSourceLoggerTest.\u003c\u003ec.\u003c.cctor\u003eb__35_14(String) + 0xc6\r\n   at Microsoft.Extensions.Logging.Test.EventSourceLoggerTest.Logs_OnlyMessage_IfKeywordSet() + 0x169\r\n   at Microsoft.Extensions.Logging.EventSource.Tests!\u003cBaseAddress\u003e+0xb3376c\r\n   at System.Reflection.DynamicInvokeInfo.Invoke(Object, IntPtr, Object[], BinderBundle, Boolean) + 0xf1\r\n[FAIL] Microsoft.Extensions.Logging.Test.EventSourceLoggerTest.Logs_AsExpected_WithDefaults\r\nAssert.Collection() Failure\r\nCollection: [\"{\\\"__EVENT_NAME\\\":\\\"FormattedMessage\\\",\\\"Level\\\":1\"..., \"{\\\"__EVENT_NAME\\\":\\\"Message\\\",\\\"Level\\\":1,\\\"Factor\"..., \"{\\\"__EVENT_NAME\\\":\\\"MessageJson\\\",\\\"Level\\\":1,\\\"Fa\"..., \"{\\\"__EVENT_NAME\\\":\\\"FormattedMessage\\\",\\\"Level\\\":2\"..., \"{\\\"__EVENT_NAME\\\":\\\"Message\\\",\\\"Level\\\":2,\\\"Factor\"..., ...]\r\nError during comparison of item at index 11\r\nInner exception: Event data \u0027{\"__EVENT_NAME\":\"Message\",\"Level\":5,\"FactoryID\":16,\"LoggerName\":\"Logger2\",\"EventId\":5,\"EventName\":\"\",\"Exception\":null,\"Arguments\":[{\"Key\":\"stringParam\",\"Value\":\"bar\"},{\"Key\":\"int1Param\",\"Value\":\"23\"},{\"Key\":\"int2Param\",\"Value\":\"45\"},{\"Key\":\"{OriginalFormat}\",\"Value\":\"Logger2 Event5 Critical {stringParam} {int1Param} {int2Param}\"}]}\u0027 does not contain expected fragment \"Exception\":{\"TypeName\":\"System.Exception\",\"Message\":\"oops\",\"HResult\":-2146233088,\"VerboseMessage\":\"System.Exception: oops\\r\\n ---\u003e System.Exception: inner oops\r\n        Expected: True\r\n        Actual:   False\r\n   at Microsoft.Extensions.Logging.Test.EventSourceLoggerTest.VerifySingleEvent(String, String, String, Nullable`1, String, Nullable`1, String[]) + 0xc1b\r\n   at Microsoft.Extensions.Logging.Test.EventSourceLoggerTest.\u003c\u003ec.\u003c.cctor\u003eb__35_14(String) + 0xc6\r\n   at Microsoft.Extensions.Logging.Test.EventSourceLoggerTest.Logs_AsExpected_WithDefaults() + 0x266\r\n   at Microsoft.Extensions.Logging.EventSource.Tests!\u003cBaseAddress\u003e+0xb3376c\r\n   at System.Reflection.DynamicInvokeInfo.Invoke(Object, IntPtr, Object[], BinderBundle, Boolean) + 0xf1\r\n[FAIL] Microsoft.Extensions.Logging.Test.EventSourceLoggerTest.Logs_AsExpected_WithDefaults_EnabledEarly\r\nAssert.Collection() Failure\r\nCollection: [\"{\\\"__EVENT_NAME\\\":\\\"FormattedMessage\\\",\\\"Level\\\":1\"..., \"{\\\"__EVENT_NAME\\\":\\\"Message\\\",\\\"Level\\\":1,\\\"Factor\"..., \"{\\\"__EVENT_NAME\\\":\\\"MessageJson\\\",\\\"Level\\\":1,\\\"Fa\"..., \"{\\\"__EVENT_NAME\\\":\\\"FormattedMessage\\\",\\\"Level\\\":2\"..., \"{\\\"__EVENT_NAME\\\":\\\"Message\\\",\\\"Level\\\":2,\\\"Factor\"..., ...]\r\nError during comparison of item at index 11\r\nInner exception: Event data \u0027{\"__EVENT_NAME\":\"Message\",\"Level\":5,\"FactoryID\":17,\"LoggerName\":\"Logger2\",\"EventId\":5,\"EventName\":\"\",\"Exception\":null,\"Arguments\":[{\"Key\":\"stringParam\",\"Value\":\"bar\"},{\"Key\":\"int1Param\",\"Value\":\"23\"},{\"Key\":\"int2Param\",\"Value\":\"45\"},{\"Key\":\"{OriginalFormat}\",\"Value\":\"Logger2 Event5 Critical {stringParam} {int1Param} {int2Param}\"}]}\u0027 does not contain expected fragment \"Exception\":{\"TypeName\":\"System.Exception\",\"Message\":\"oops\",\"HResult\":-2146233088,\"VerboseMessage\":\"System.Exception: oops\\r\\n ---\u003e System.Exception: inner oops\r\n        Expected: True\r\n        Actual:   False\r\n   at Microsoft.Extensions.Logging.Test.EventSourceLoggerTest.VerifySingleEvent(String, String, String, Nullable`1, String, Nullable`1, String[]) + 0xc1b\r\n   at Microsoft.Extensions.Logging.Test.EventSourceLoggerTest.\u003c\u003ec.\u003c.cctor\u003eb__35_14(String) + 0xc6\r\n   at Microsoft.Extensions.Logging.Test.EventSourceLoggerTest.Logs_AsExpected_WithDefaults_EnabledEarly() + 0x263\r\n   at Microsoft.Extensions.Logging.EventSource.Tests!\u003cBaseAddress\u003e+0xb3376c\r\n   at System.Reflection.DynamicInvokeInfo.Invoke(Object, IntPtr, Object[], BinderBundle, Boolean) + 0xf1\r\nFinished Microsoft.Extensions.Logging.EventSource.Tests, Version=7.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[NativeAot] Microsoft.Extensions.Logging.EventSource.Tests failure",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/74697",
        "createdAt":  "2022-08-27T05:44:53Z",
        "number":  74697,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqUCow==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichalStrehovsky",
                                            "createdAt":  "2022-08-27T06:12:48Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-28T17:38:13Z",
        "body":  "Warnings for AOT unsafe interop are incomplete best effort currently: https://github.com/dotnet/runtime/pull/74630#discussion_r955966809\r\n\r\n- [ ] Generate warnings for unsafe interop in marshalled structs\r\n- [ ] Generate warnings for AOT unsafe marshallers like AsAny and LayoutClass \r\n- [ ] Use actual marshaller kind to produce the warning instead of the approximation at https://github.com/dotnet/runtime/blob/2201016c1e13bdb9abf49e2e38cadf4ee0568df2/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/Dataflow/ReflectionMethodBodyScanner.cs#L566-L643\r\n- [ ] Steer people towards P/Invoke source generator by the warning text",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSUppWw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5JQwY-",
                                           "createdAt":  "2022-08-27T05:44:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-08-27T05:44:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQxMk",
                                           "createdAt":  "2022-08-27T06:12:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Steer people towards P/Invoke source generator by the warning text\r\n\r\nIf we tell people to use the source generator for AsAny/LayoutClass/System.Delegate marshalling, the source generator will then tell them it\u0027s unsupported. It will shift the blame, but the end result for the user is the same if we don\u0027t send them on a hike first.",
                                           "updatedAt":  "2022-08-27T06:12:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQx1n",
                                           "createdAt":  "2022-08-27T06:35:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Yes, it is the case with retrofitting existing AOT unsafe code.\r\n\r\nSteering people towards source generated interop is more interesting for new code. Source generated interop has natural AOT safety guiderails and prevents the AOT unsafe code to be written in the first place.",
                                           "updatedAt":  "2022-08-27T06:35:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQyAc",
                                           "createdAt":  "2022-08-27T06:42:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hez2010",
                                           "body":  "\u003e towards P/Invoke source generator\n\nDo source generated P/Invokes support direct P/Invoke and static linking?\n\nIf not then I think it\u0027s not a replacement of current P/Invokes. ",
                                           "updatedAt":  "2022-08-27T06:42:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQyRZ",
                                           "createdAt":  "2022-08-27T06:51:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCrPtjA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hez2010",
                                                                               "createdAt":  "2022-08-27T07:24:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkoritzinsky",
                                                                               "createdAt":  "2022-08-27T07:48:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Do source generated P/Invokes support direct P/Invoke and static linking?\r\n\r\nYes. This aspect is not different between source generated and built-in marshalling.\r\n\r\nAll P/Invokes (except a few outliers) in this repo have been switched to be source generated, and native aot publishing uses direct P/Invokes and static linking extensively.",
                                           "updatedAt":  "2022-08-27T06:51:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JSmlb",
                                           "createdAt":  "2022-08-29T01:03:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Use actual marshaller kind to produce the warning instead of the approximation at\r\n\r\nThis logic is shared with IL Linker and IL Linker doesn\u0027t have access to this unfortunately.",
                                           "updatedAt":  "2022-08-29T01:03:24Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Complete warnings for AOT unsafe interop",
        "labels":  [
                       "Epic",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75112",
        "createdAt":  "2022-09-06T06:51:48Z",
        "number":  75112,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-06T15:27:00Z",
        "body":  "\r\nGC could be caused by a low-priority thread. \r\nIt would help if the thread that performs the suspension and release of the runtime changes its priority temporarily to Normal.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSc8Gew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5JxkLX",
                                           "createdAt":  "2022-09-06T06:51:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-09-06T06:51:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Jy-oG",
                                           "createdAt":  "2022-09-06T12:44:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Is this NativeAOT-specific problem or is this a problem in regular CoreCLR too?",
                                           "updatedAt":  "2022-09-06T12:44:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JzwZ7",
                                           "createdAt":  "2022-09-06T15:24:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "CoreClr does this. I think it is good to have in NativeAOT, but not necessarily in 7.0\r\n\r\nhttps://github.com/dotnet/runtime/blob/4da3eae7a54a4a6abeb59df4953b6de4c65b53ea/src/coreclr/vm/threadsuspend.cpp#L3295\r\n\r\nTweaking thread priorities is a rare scenario as it often causes unwanted consequences.  \r\nEven more rare is when a low-priority thread is the one who triggers GC (statistically it is the one who allocates the most). It is still good to have a precaution against other threads starving the one who tries to do suspend them.\r\n\r\nIn Workstation GC it is also the thread that does the actual GC.",
                                           "updatedAt":  "2022-09-06T15:27:00Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[NativeAOT] Ensure that suspending thread priority is not below normal.",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75480",
        "createdAt":  "2022-09-12T20:39:23Z",
        "number":  75480,
        "author":  "LakshanF",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODLmhEg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2025-07-31T16:36:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2025-08-18T14:31:20Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-18T06:44:17Z",
        "body":  "The below set of runtime assemblies need to be annotated for AOT (the # of warnings might not be accurate and need to be validated). Related issues - #69739, #61231, #67741\r\n\r\n\r\nAssembly | Aot Warnings\r\n-- | --\r\nSystem.Linq.Expressions.dll | 124\r\nSystem.Private.Xml.dll | 78\r\nSystem.Xml.XmlSerializer.dll | 39\r\nSystem.Xml.XmlDocument.dll | 39\r\nSystem.Xml.XPath.dll | 39\r\nSystem.Xml.XPath.XDocument.dll | 39\r\nSystem.Private.Xml.Linq.dll | 39\r\nSystem.Xml.ReaderWriter.dll | 39\r\nSystem.Xml.XDocument.dll | 39\r\nMicrosoft.CSharp.dll | 20\r\nSystem.ComponentModel.Composition | ?\r\nSystem.Composition.Hosting | ?\r\nSystem.Composition.Runtime | ?\r\nSystem.Composition.TypedParts | ?\r\nSystem.Configuration.ConfigurationManager | ?\r\nSystem.Data.Odbc | ?\r\nSystem.Data.OleDb | ?\r\nSystem.DirectoryServices | ?\r\nSystem.DirectoryServices.AccountManagement | ?\r\nSystem.DirectoryServices.Protocols | ?\r\nSystem.Drawing.Common | ?\r\nSystem.Reflection.Context | ?\r\nSystem.Reflection.MetadataLoadContext | ?\r\nSystem.Resources.Extensions | ?\r\nSystem.Runtime.InteropServices.JavaScript | ?\r\nSystem.Runtime.Serialization.Schema | ?\r\nSystem.ServiceModel.Syndication | ?\r\nSystem.Windows.Extensions | ?\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYugkDA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5KLGY0",
                                           "createdAt":  "2022-09-12T20:39:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe below set of runtime assemblies need to be annotated for AOT (the # of warnings might not be accurate and need to be validated). Related issues - #69739, #61231, #67741\r\n\r\n\r\nAssembly | Aot Warnings\r\n-- | --\r\nSystem.Linq.Expressions.dll | 124\r\nSystem.Private.Xml.dll | 78\r\nSystem.Xml.XmlSerializer.dll | 39\r\nSystem.Xml.XmlDocument.dll | 39\r\nSystem.Xml.XPath.dll | 39\r\nSystem.Xml.XPath.XDocument.dll | 39\r\nSystem.Private.Xml.Linq.dll | 39\r\nSystem.Xml.ReaderWriter.dll | 39\r\nSystem.Xml.XDocument.dll | 39\r\nMicrosoft.CSharp.dll | 20\r\nSystem.Net.Http.dll | 1\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-12T20:39:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KL4O3",
                                           "createdAt":  "2022-09-12T22:36:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "our systems expect exactly 1 area label -- I\u0027m assuming you\u0027re doing it @LakshanF so leaving area-nativeaot-coreclr.",
                                           "updatedAt":  "2022-09-12T22:36:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SIt_r",
                                           "createdAt":  "2023-01-10T23:12:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "`System.Linq.Expressions` warnings appear when publishing an empty ASP.NET Core app.",
                                           "updatedAt":  "2023-01-10T23:12:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SIu9w",
                                           "createdAt":  "2023-01-10T23:17:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "What\u0027s the warning? Should `System.Linq.Expressions` be trimmed out from ASP.NET Core apps in .NET 8 instead?",
                                           "updatedAt":  "2023-01-10T23:17:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SIxsp",
                                           "createdAt":  "2023-01-10T23:31:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "\u003e What\u0027s the warning?\r\n\r\n```\r\n/_/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/Interpreter/ArrayOperations.cs(23): AOT analysis warning IL3050: System.Linq.Expressions.Interpreter.NewArrayInitInstruction.Run(InterpretedFrame): Using member \u0027System.Array.CreateInstance(Type,Int32)\u0027 which has \u0027RequiresDynamicCodeAttribute\u0027 can break functionality when AOT compiling. The code for an array of the specified type might not be available. [C:\\DotNetTest\\AspNetTest\\AspNetTest.csproj]\r\n/_/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/Interpreter/ArrayOperations.cs(52): AOT analysis warning IL3050: System.Linq.Expressions.Interpreter.NewArrayInstruction.Run(InterpretedFrame): Using member \u0027System.Array.CreateInstance(Type,Int32)\u0027 which has \u0027RequiresDynamicCodeAttribute\u0027 can break functionality when AOT compiling. The code for an array of the specified type might not be available. [C:\\DotNetTest\\AspNetTest\\AspNetTest.csproj]\r\n/_/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/Interpreter/ArrayOperations.cs(87): AOT analysis warning IL3050: System.Linq.Expressions.Interpreter.NewArrayBoundsInstruction.Run(InterpretedFrame): Using member \u0027System.Array.CreateInstance(Type,Int32[])\u0027 which has \u0027RequiresDynamicCodeAttribute\u0027 can break functionality when AOT compiling. The code for an array of the specified type might not be available. [C:\\DotNetTest\\AspNetTest\\AspNetTest.csproj]\r\n/_/src/libraries/System.Linq.Expressions/src/System/Dynamic/Utils/TypeUtils.cs(28): AOT analysis warning IL3050: System.Dynamic.Utils.TypeUtils.GetNullableType(Type): Using member \u0027System.Type.MakeGenericType(Type[])\u0027 which has \u0027RequiresDynamicCodeAttribute\u0027 can break functionality when AOT compiling. The native code for this instantiation might not be available at runtime. [C:\\DotNetTest\\AspNetTest\\AspNetTest.csproj]\r\n/_/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/MethodCallExpression.cs(1379): AOT analysis warning IL3050: System.Linq.Expressions.Expression.ApplyTypeArgs(MethodInfo,Type[]): Using member \u0027System.Reflection.MethodInfo.MakeGenericMethod(Type[])\u0027 which has \u0027RequiresDynamicCodeAttribute\u0027 can break functionality when AOT compiling. The native code for this instantiation might not be available at runtime. [C:\\DotNetTest\\AspNetTest\\AspNetTest.csproj]\r\n/_/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs(2239): AOT analysis warning IL3050: System.Linq.Expressions.Expression.GetResultTypeOfShift(Type,Type): Using member \u0027System.Type.MakeGenericType(Type[])\u0027 which has \u0027RequiresDynamicCodeAttribute\u0027 can break functionality when AOT compiling. The native code for this instantiation might not be available at runtime. [C:\\DotNetTest\\AspNetTest\\AspNetTest.csproj]\r\n```\r\n\r\n\u003e Should System.Linq.Expressions be trimmed out from ASP.NET Core apps in .NET 8 instead?\r\n\r\nI think that is a goal. There are some places where `System.Linq.Expressions` is coupled to important code. I\u0027ll investigate more whether there are ways to completely remove any code that touches on it.",
                                           "updatedAt":  "2023-01-10T23:31:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5STgEi",
                                           "createdAt":  "2023-01-12T18:34:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e Should System.Linq.Expressions be trimmed out from ASP.NET Core apps in .NET 8 instead?\n\nYes, my intention is that Linq.Expressions won\u0027t be used in basic ASP.NET Core app in .NET 8. From my previous investigations, it adds ~1MB to the app size.\n\nWith https://github.com/dotnet/aspnetcore/pull/46020#issuecomment-1380045771 we have eliminated it from the core logic. And saved 1.3 MB.",
                                           "updatedAt":  "2023-01-12T18:34:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i5ll8",
                                           "createdAt":  "2023-07-31T22:16:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LakshanF",
                                           "body":  "This should be done now.",
                                           "updatedAt":  "2023-07-31T22:16:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i6CQM",
                                           "createdAt":  "2023-08-01T00:20:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "This is not done. We still disable the AOT analyzer in the following projects:\r\n\r\nhttps://github.com/dotnet/runtime/blob/efde0061d4fadce140d9c9bd78bfc2aa7df7d9eb/src/libraries/System.Linq.Expressions/src/System.Linq.Expressions.csproj#L6\r\n\r\nhttps://github.com/dotnet/runtime/blob/efde0061d4fadce140d9c9bd78bfc2aa7df7d9eb/src/libraries/System.Private.Xml/src/System.Private.Xml.csproj#L6\r\n\r\nhttps://github.com/dotnet/runtime/blob/efde0061d4fadce140d9c9bd78bfc2aa7df7d9eb/src/libraries/Microsoft.CSharp/src/Microsoft.CSharp.csproj#L13\r\n\r\nhttps://github.com/dotnet/runtime/blob/efde0061d4fadce140d9c9bd78bfc2aa7df7d9eb/src/libraries/System.DirectoryServices.AccountManagement/src/System.DirectoryServices.AccountManagement.csproj#L9\r\n\r\nhttps://github.com/dotnet/runtime/blob/efde0061d4fadce140d9c9bd78bfc2aa7df7d9eb/src/libraries/System.DirectoryServices/src/System.DirectoryServices.csproj#L7\r\n\r\nhttps://github.com/dotnet/runtime/blob/efde0061d4fadce140d9c9bd78bfc2aa7df7d9eb/src/libraries/System.ServiceModel.Syndication/src/System.ServiceModel.Syndication.csproj#L6\r\n\r\nhttps://github.com/dotnet/runtime/blob/efde0061d4fadce140d9c9bd78bfc2aa7df7d9eb/src/libraries/System.Resources.Extensions/src/System.Resources.Extensions.csproj#L6\r\n\r\nhttps://github.com/dotnet/runtime/blob/efde0061d4fadce140d9c9bd78bfc2aa7df7d9eb/src/libraries/System.DirectoryServices.Protocols/src/System.DirectoryServices.Protocols.csproj#L13\r\n\r\nhttps://github.com/dotnet/runtime/blob/efde0061d4fadce140d9c9bd78bfc2aa7df7d9eb/src/libraries/System.Configuration.ConfigurationManager/src/System.Configuration.ConfigurationManager.csproj#L8\r\n\r\nWe need to annotate those libraries for NativeAOT and enable the analyzer.\r\nhttps://github.com/dotnet/runtime/blob/efde0061d4fadce140d9c9bd78bfc2aa7df7d9eb/src/libraries/System.Reflection.Context/src/System.Reflection.Context.csproj#L4\r\n\r\nhttps://github.com/dotnet/runtime/blob/efde0061d4fadce140d9c9bd78bfc2aa7df7d9eb/src/libraries/System.Data.OleDb/src/System.Data.OleDb.csproj#L9\r\n\r\nhttps://github.com/dotnet/runtime/blob/efde0061d4fadce140d9c9bd78bfc2aa7df7d9eb/src/libraries/System.Reflection.MetadataLoadContext/src/System.Reflection.MetadataLoadContext.csproj#L6",
                                           "updatedAt":  "2023-08-01T00:20:17Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Annotate remaining runtime libraries for NativeAOT",
        "labels":  [
                       "Epic",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75964",
        "createdAt":  "2022-09-21T12:13:15Z",
        "number":  75964,
        "author":  "kant2002",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODPvOvA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2022-09-21T12:18:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sieempi",
                                            "createdAt":  "2022-09-21T14:29:05Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "kevingosse",
                                            "createdAt":  "2022-09-21T14:40:13Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "xoofx",
                                            "createdAt":  "2022-12-05T09:31:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wooowchik",
                                            "createdAt":  "2022-12-08T09:50:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jevansaks",
                                            "createdAt":  "2025-09-10T22:40:50Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2022-09-22T00:05:12Z",
        "body":  "From gitter\r\n@hez2010 \r\n\u003e Is it possible to share a single GC among multiple nativeaot executables?\r\nFor example, can two binaries a.exe and b.exe which are compiled by nativeaot use a shared gc, so that the gc code won\u0027t be duplicated in each exe binary?\r\n\r\n@MichalStrehovsky \r\n\u003e It\u0027s not currently possible with shipped bits. But It is how things were set up in for .NET Native: there was an extra dll (mrt100_app.dll) that had the GC. in theory you should be able to still build that configuration from source - build https://github.com/dotnet/runtime/tree/main/src/coreclr/nativeaot/Runtime.Base/src into a shared library - this shared library will include the GC+the base services provided by the runtime. set InPlaceRuntime in CoreLib to false (https://github.com/dotnet/runtime/tree/main/src/coreclr/nativeaot/System.Private.CoreLib/src). then build an app as usual but don\u0027t pass Runtime.lib to linker and instead pass import library for the DLL you created in step 1 (we no longer need Runtime.lib because the DLL will provide those services, and we no longer need InPlaceRuntime parts of CoreLib because the DLL with provide those services too)\r\n\r\nAnd now me \"This sounds like fun project for hacktoberfest . Is this something which would be valuable for mainline?\"\r\n\r\nSo would like to hear feedback, is this is desirable change from MS perspective?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSsPg8w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Kv7Hi",
                                           "createdAt":  "2022-09-21T18:29:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We took number of shortcuts over the years that are breaking this configuration. You would need to fix these shortcuts. For example, You would need to teach some places in the compiler to go through extra indirections in this config.\r\n\r\nThe GC code is relatively small to the rest of CoreLib, so the sharing benefits you get from this is not that great. .NET Native for UWP also compiled large part of the BCL into SharedLibrary.dll (look for SharedLibrary.dll in https://nuget.info/packages/Microsoft.Net.Native.SharedLibrary-x64/). It is where vast majority of the sharing benefits were, but the setup to make that work is very non-trivial.",
                                           "updatedAt":  "2022-09-21T18:29:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kw-Dz",
                                           "createdAt":  "2022-09-22T00:05:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "One place that could potentially benefit from restoring building Runtime.Base as a separate library (instead of being folded into CoreLib) is type loader, if we were to move it to depend on Runtime.Base instead of CoreLib. I\u0027m not sure how feasible that would be, but it would avoid an entire class of bugs like #70538 - I don\u0027t know how many stress bugs like that we have. Having a working Runtime.Base configuration would be a prerequisite to that. I see the biggest potential value in that.",
                                           "updatedAt":  "2022-09-22T00:05:12Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Sharing GC.dll for NativeAOT executables",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76371",
        "createdAt":  "2022-09-29T10:59:43Z",
        "number":  76371,
        "author":  "filipnavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCyWfUg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "am11",
                                            "createdAt":  "2022-09-29T16:36:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neon-sunset",
                                            "createdAt":  "2023-09-03T02:29:02Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-06-04T15:14:00Z",
        "body":  "Apple platforms use compact unwinding information to efficiently encode information on how to do stack unwinding. Unlike the DWARF CFI information that is currently used by NativeAOT on macOS and Linux the compact unwinding information is smaller. It also does not encode enough information to do asynchronous unwinding in prolog/epilog of the functions. The benefit of using the compact unwinding codes would be smaller size of the resulting binaries.\r\n\r\nUpon investigation I found that ILCompiler already emits the DWARF CFI only for prologs and not for epilogs. UnixNativeCodeManager handles the epilogs by doing code inspection. Similar approach can be employed to unwind the prologs. As an [experiment](https://github.com/filipnavara/CodeSign/tree/unwind) I took an osx-x64 object file produced by the NativeAOT compilation process and for every function I compared the results of trivial prolog x64 code walk with the offsets in the actual DWARF CFI code. For vast majority of the cases the prolog only uses two different instructions (`push REG` and `sub RSP, \u003cvalue\u003e`) before establishing the `RBP` frame that can already be processed with the compact unwinding information. Only one method uses more complex pattern to allocate a frame that\u0027s larger than page size and where stack probing is needed. It would be simple to recognize that pattern too.\r\n\r\nTo be able to use the combination of custom prolog unwinding and the compact unwinding for method body we would need to know the size of the prolog. Unfortunately that information is currently not stored anywhere. The `GcInfo` structure can optionally store it in some cases but for majority of uses it\u0027s not present at the moment. We would likely need to store it as extra byte in the LSDA structure.\r\n\r\nIt\u0027s not obvious whether using the compact unwinding would be a clear win. It adds code complexity that is specific to a single platform. I don\u0027t have any numbers at the moment to show how much space could be saved by the compact encoding in comparison to the current DWARF CFI encoding.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOr0H--w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5LOl8i",
                                           "createdAt":  "2022-09-29T10:59:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-09-29T10:59:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LOmsx",
                                           "createdAt":  "2022-09-29T11:02:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "For reference, here\u0027s how the custom prolog unwinding code would look like in C.\r\n\r\nFirst, we would need to detect that we are in prolog:\r\n```c++\r\n#if defined(TARGET_AMD64) \u0026\u0026 defined(TARGET_OSX)\r\n    // Compact unwinding on macOS cannot properly handle unwinding the function prolog\r\n    // so we have to handle it explicitly\r\n    if ((PTR_UInt8)pRegisterSet-\u003eIP \u003c (PTR_UInt8)pNativeMethodInfo-\u003epMethodStartAddress + decoder.GetPrologSize())\r\n    {\r\n        return UnwindProlog(pMethodInfo, pRegisterSet, ppvRetAddrLocation);\r\n    }\r\n#endif\r\n```\r\n\r\n...and we would need couple of definitions/macros (shared with existing `UnixNativeCodeManager::TrailingEpilogueInstructionsCount` code):\r\n\r\n```c++\r\n#ifdef TARGET_AMD64\r\n\r\n#define SIZE64_PREFIX 0x48\r\n#define ADD_IMM8_OP 0x83\r\n#define ADD_IMM32_OP 0x81\r\n#define JMP_IMM8_OP 0xeb\r\n#define JMP_IMM32_OP 0xe9\r\n#define JMP_IND_OP 0xff\r\n#define LEA_OP 0x8d\r\n#define REPNE_PREFIX 0xf2\r\n#define REP_PREFIX 0xf3\r\n#define POP_OP 0x58\r\n#define PUSH_OP 0x50\r\n#define RET_OP 0xc3\r\n#define RET_OP_2 0xc2\r\n#define INT3_OP 0xcc\r\n\r\n#define IS_REX_PREFIX(x) (((x) \u0026 0xf0) == 0x40)\r\n\r\n#endif\r\n```\r\n\r\n...and finally the unwinding method:\r\n\r\n```c++\r\nbool UnixNativeCodeManager::UnwindProlog(MethodInfo *    pMethodInfo,\r\n                                         REGDISPLAY *    pRegisterSet,\r\n                                         PTR_PTR_VOID *  ppvRetAddrLocation)\r\n{\r\n#if defined(TARGET_AMD64)\r\n    UnixNativeMethodInfo* pNativeMethodInfo = (UnixNativeMethodInfo*)pMethodInfo;\r\n    uint8_t* pNextByte = (uint8_t*)pNativeMethodInfo-\u003epMethodStartAddress;\r\n    uint32_t stackOffset = 0;\r\n\r\n    while (pNextByte \u003c (uint8_t*)pRegisterSet-\u003eIP)\r\n    {\r\n        if ((pNextByte[0] \u0026 0xf8) == PUSH_OP)\r\n        {\r\n            stackOffset += 8;\r\n            pNextByte += 1;\r\n        }\r\n        else if (IS_REX_PREFIX(pNextByte[0]) \u0026\u0026 ((pNextByte[1] \u0026 0xf8) == PUSH_OP))\r\n        {\r\n            stackOffset += 8;\r\n            pNextByte += 2;\r\n        }\r\n        else if ((pNextByte[0] \u0026 0xf8) == SIZE64_PREFIX \u0026\u0026\r\n                 pNextByte[1] == ADD_IMM8_OP \u0026\u0026\r\n                 pNextByte[2] == 0xec)\r\n        {\r\n            // sub rsp, imm8\r\n            stackOffset += pNextByte[3];\r\n            pNextByte += 4;\r\n        }\r\n        else if ((pNextByte[0] \u0026 0xf8) == SIZE64_PREFIX \u0026\u0026\r\n                 pNextByte[1] == ADD_IMM32_OP \u0026\u0026\r\n                 pNextByte[2] == 0xec)\r\n        {\r\n            // sub rsp, imm32\r\n            stackOffset +=\r\n                (uint32_t)pNextByte[3] |\r\n                ((uint32_t)pNextByte[4] \u003c\u003c 8) |\r\n                ((uint32_t)pNextByte[5] \u003c\u003c 16) |\r\n                ((uint32_t)pNextByte[6] \u003c\u003c 24);\r\n            pNextByte += 7;\r\n        }\r\n        else\r\n        {\r\n            // Bail out for anything that we cannot handle. This could be a breakpoint\r\n            // (int 3) inserted by a debugger, or some more complicated prolog pattern\r\n            // like the stack probing:\r\n            //\r\n            //     lea r11, [rsp-XXX]\r\n            //     call __chkstk\r\n            //     mov rsp, r11\r\n            //\r\n            // Additionally, these sequences may establish the prolog frame but we don\u0027t\r\n            // need to handle them since they are always the last instruction of the\r\n            // prolog and thus regular unwinding should work:\r\n            //\r\n            //     lea rbp, [rsp+IMM8]\r\n            //     lea rbp, [rsp+IMM32]\r\n            return false;\r\n        }\r\n    }\r\n\r\n    *ppvRetAddrLocation = (PTR_PTR_VOID)(pRegisterSet-\u003eGetSP() + stackOffset);\r\n    return true;\r\n#else\r\n    PORTABILITY_ASSERT(\"UnwindProlog\");\r\n#endif\r\n}\r\n```",
                                           "updatedAt":  "2022-09-29T11:02:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KfP5w",
                                           "createdAt":  "2024-09-01T18:12:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I looked into prototyping this on ARM64 Apple platforms: https://github.com/filipnavara/runtime/pull/new/arm64-compact-unwind\r\n\r\nThe branch is on top of the frameless prototype from issue https://github.com/dotnet/runtime/issues/35274#issuecomment-2317616731, only the [last commit](https://github.com/dotnet/runtime/commit/3f208ce5de3197519f01fdc922b7e9d1b6738acc) contains the JIT and ObjWriter changes relevant to this PR. While the two changes are somewhat orthogonal I also implemented more generic algorithm for computing the compact unwinding code and the frameless methods provided additional test cases.\r\n\r\nThe rough overview of the changes:\r\n- Generate frame type 4/5 with FP/LR saved on the top. The support for this already exists in the JIT, so we just need to call `SetSaveFpLrWithAllCalleeSavedRegisters` in the appropriate place and in the right conditions.\r\n- Try to store the callee saved registers in pairs even if the other register from the pair is unused. While it may sound wasteful this doesn\u0027t really increase code size, and likely doesn\u0027t impact speed on most processors either. In rare combination of odd count of both floating point and integer register spills it may consume 16 bytes more on stack.\r\n- Save the X19-X28, D8-D15 callee saved registers on the stack in opposite order. \r\n\r\nChallenges:\r\n- For large frames, this layout may lead to code size increase. In some cases it may be quite significant. If we could identify these cases early enough (in relation to when `SetSaveFpLrWithAllCalleeSavedRegisters` needs to be called) then we can eliminate this overhead by falling back to the current frame layouts. Presumably this won\u0027t affect too many methods, but I have observed it to be disproportionally affecting code generated from XAML which uses ton of local variables.\r\n- Many funclet prologs save FP/LR pair on the stack but don\u0027t use/set the frame pointer. This is not expressible with the compact unwinding codes.\r\n\r\nSo, how well does it perform?\r\n\r\nTo give you an idea of how big is the difference I recompiled an empty .NET MAUI app with the above changes. _The baseline was compiled with frameless methods, which saves around 27Kb of code size compared to `main` .NET 10 as of this writing._ With the change in https://github.com/dotnet/runtime/commit/3f208ce5de3197519f01fdc922b7e9d1b6738acc the size of the code section increased by 183,696 bytes (+3.4%), the size of the unwinding information decreased by 884,932 bytes (-90%).\r\n\r\nThe code size increase was extremely disproportional. For example, method `_maui_empty_app___XamlGeneratedCode_____Type055F947991421E4D__InitializeComponent` increased by 53.5Kb. It has extremely large frame and the assigned variable addresses ended up with pretty much the worst case offsets that are not representable with `immediate offset` in the ARM64 instructions. I believe this can be mitigated to some point but the conservative solution is to predict large frame (which end up being represented as \"frame type 5\") and fallback to the current frame layout. I\u0027m not quite sure how to nicely implement this in the JIT but some quick and dirty hacks showed that it can reduce the code size increase significantly.\r\n\r\n",
                                           "updatedAt":  "2024-09-01T18:12:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KfVZF",
                                           "createdAt":  "2024-09-01T19:30:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "One more thought - the code size increase would likely be possible to mitigate with enabling support for double-aligned frames, ie. access locals through SP if possible. That would be a larger change though.\r\n\r\n~~_UPD: Maybe it would not be such a huge change after all, seem like it could be done in `lvaFixVirtualFrameOffsets`._~~",
                                           "updatedAt":  "2024-09-02T07:31:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KxltV",
                                           "createdAt":  "2024-09-04T08:37:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Thanks for looking into this!\r\n\r\nCc @VSadov since he knows about unwinding",
                                           "updatedAt":  "2024-09-04T08:37:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KxydW",
                                           "createdAt":  "2024-09-04T09:01:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I have slightly more refined version of the prototype: https://github.com/filipnavara/runtime/tree/arm64-compact-unwind-1.\r\n\r\nI managed to mitigate most of the code size increase (aside from the +4 bytes for prolog with temporaries/locals and other code size changes related to alignment). Turns out ARM32 already has the optimization for turning FP-based offsets into SP-based offsets in `lvaFrameAddress` so it\u0027s possible to mimic the logic there without going through all the trouble of enabling full double-aligned frame support.\r\n\r\nThe conservative condition is enabling the Apple-style prologs for all methods with `isFramePointerRequired() == false`. It essentially excludes all methods with exception handling or `localloc`.\r\n\r\nWith these tweaks the stats for `dotnet new maui` app are as follows:\r\n- 26171 methods get represented by compact unwinding\r\n- 5406 methods get represented by DWARF unwinding (incl. funclets that are counted as separate methods, about 10% of this number)\r\n- 742Kb (77%) of the DWARF unwinding section gets eliminated.\r\n- 48Kb code size increase (becomes about half with disabled loop alignment).\r\n\r\nWe could further tweak the heuristic to opt-in smaller methods with exception handling into the Apple prologs. This can likely save another 10% in size of the DWARF unwinding data but it\u0027s a more nuanced heuristic to get right.",
                                           "updatedAt":  "2024-09-04T09:01:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6L4Z2r",
                                           "createdAt":  "2024-09-12T17:05:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Latest branch: https://github.com/dotnet/runtime/compare/main...filipnavara:arm64-compact-unwind-3?expand=1\r\n\r\nIt passed the CI.",
                                           "updatedAt":  "2024-09-12T17:05:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dyLqO",
                                           "createdAt":  "2025-02-10T07:47:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "@filipnavara is there a next step for this or was this done in #111451?",
                                           "updatedAt":  "2025-02-10T07:47:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dyM-X",
                                           "createdAt":  "2025-02-10T07:50:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "We still didn\u0027t do the `osx-x64` part, but it\u0027s not really on my radar at the moment.",
                                           "updatedAt":  "2025-02-10T07:50:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dyPWa",
                                           "createdAt":  "2025-02-10T07:55:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFyd-A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-10T08:00:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e We still didn\u0027t do the `osx-x64` part, but it\u0027s not really on my radar at the moment.\n\nThis is not needed for correctness, this is an optimization, right? If that\u0027s the case, osx-x64 likely won\u0027t be on anyone\u0027s radar for new feature work, ever. We might as well close.",
                                           "updatedAt":  "2025-02-10T07:55:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dyW-E",
                                           "createdAt":  "2025-02-10T08:12:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFysbQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "MichalStrehovsky",
                                                                               "createdAt":  "2025-02-10T08:27:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e This is not needed for correctness, this is an optimization, right?\n\nYes, and no...\n\nIt\u0027s primarily an optimization. However, as a consequence of the unwinding table file format there\u0027s also an upper limit on the size of the DWARF data - 2^24 bytes. One of the original motivations for the work was that I hit the limit which leads to silent corruption. At least it lead to a silent corruption with the old linker, that may no longer be the case with Xcode 16+.\n\nI\u0027m fine with closing the issue as completed though.",
                                           "updatedAt":  "2025-02-10T08:12:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vK1hJ",
                                           "createdAt":  "2025-06-04T07:02:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I had a somewhat related and somewhat orthogonal realization today...\n\nWith compact unwinding we cannot unwind prologs/epilogs. In order to handle the case we have `UnixNativeCodeManager::IsInProlog` and `UnixNativeCodeManager::TrailingEpilogueInstructionsCount` that does code parsing to detected whether we are in the prolog/epilog.\n\nCould you think of anything that would break if we changed the code range of the emitted compact unwinding info not to cover the prolog/epilog? We wouldn\u0027t be able to lookup the GC info or any additional data for IPs in the prolog/epilog range but is there really any dependency on that?\n\n(I\u0027m assuming that JIT generates a single joined epilog; if that assumption is wrong the idea could still apply to prolog only.)\n\n/cc @VSadov @jkotas for thoughts.",
                                           "updatedAt":  "2025-06-04T07:02:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vQGWw",
                                           "createdAt":  "2025-06-04T14:20:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVUgHg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-06-04T14:55:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e (I\u0027m assuming that JIT generates a single joined epilog; if that assumption is wrong the idea could still apply to prolog only.)\n\nThere could be multiple epilogs and it is not even a rare/slow case.\nThat is why it is hard to come up with a good gcinfo encoding for the epilogs, since you do not want it to require fat gcinfo format. \n\nThere is only one prolog. \n\nThere were some ideas that async methods could have resume stubs compiled into a method as an alternative prolog, but that is at a stage “could that be helpful at all?”\n",
                                           "updatedAt":  "2025-06-04T14:25:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vQMTJ",
                                           "createdAt":  "2025-06-04T14:27:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Could you think of anything that would break if we changed the code range of the emitted compact unwinding info not to cover the prolog/epilog? \n\nHow would single stepping through such code look like under the debugger?",
                                           "updatedAt":  "2025-06-04T14:27:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vQbJ7",
                                           "createdAt":  "2025-06-04T14:42:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e How would single stepping through such code look like under the debugger?\n\nI would need to check. The debugger already has to make some assumptions about the frame while in prolog. It doesn\u0027t have the information how to unwind it today so it can only do one of the three things:\n1) decompile the code / use heuristics\n    - heuristic could be that canonical prolog instructions are assumed for a given compact unwinding code and the prolog size is inferred from that; if that was the case we can likely do the same for code generated by ILC\n    - another heuristic could be just assuming that on ARM64 the FP/LR and stack offset are established by the first instruction\n2) assume that LR is the return address (which would likely be the same assumption taken when there\u0027s no unwind info)\n3) assume that the frame is already established and display garbage while stepping through the prolog\n\nIt\u0027s certainly something that would have to need to be investigated.\n\n(Note that we also do \"compression\" of DWARF info on linux-arm64 so prolog is not reliably unwindable there either. In that case we do encode the prolog size though so the debugger will just make the LR assumption in the prolog and then at the end of prolog switch to correct info for unwinding all registers.)\n\nI was more concerned about missing some scenario where the runtime needs a lookup from IP in prolog to the GC info.\n\n",
                                           "updatedAt":  "2025-06-04T15:13:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vQf77",
                                           "createdAt":  "2025-06-04T14:48:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e That is why it is hard to come up with a good gcinfo encoding for the epilogs, since you do not want it to require fat gcinfo format.\n\nYeah, that\u0027s why I was wondering if we can do something clever by embedding at least some of the info in a different place that\u0027s easy to read and that would let us skip the machine code decoding.\n\n(Just throwing the idea around; if it\u0027s obviously not feasible for some reason I am happy to discard it and move on. If there\u0027s a chance that it might work then I can prototype something in future.)",
                                           "updatedAt":  "2025-06-04T14:48:07Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "[NativeAOT] Evaluate use/benefits of compact unwinding on osx-x64 and osx-arm64",
        "labels":  [
                       "os-mac-os-x",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77089",
        "createdAt":  "2022-10-15T22:27:09Z",
        "number":  77089,
        "author":  "filipnavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-09T16:00:51Z",
        "body":  "Neither DWARF nor CodeView debugging information seems to represent `REGNUM_AMBIENT_SP` variable location correctly. For CodeView there\u0027s a [TODO in the code](https://github.com/dotnet/llvm-project/blob/6a3111cb36d2e7fe7da4ff7a3978ed6e0ba8d869/llvm/tools/objwriter/objwriter.cpp#L809). For DWARF it just generates garbage register references (takes a code branch that assumes it\u0027s a floating point register):\r\n\r\n```\r\n0x00108d61:     DW_TAG_formal_parameter\r\n                  DW_AT_name [DW_FORM_strp]\t(\"fHasThreadStatics\")\r\n                  DW_AT_decl_file [DW_FORM_data1]\t(\"/Users/filipnavara/Projects/runtime/src/libraries/Common/src/Interop/Unix/Interop.IOErrors.cs\")\r\n                  DW_AT_decl_line [DW_FORM_data1]\t(1)\r\n                  DW_AT_type [DW_FORM_ref4]\t(0x000000c8 \"bool\")\r\n                  DW_AT_location [DW_FORM_sec_offset]\t(0x000bcd2c: \r\n                     [0x00000000001c5ee0, 0x00000000001c5f24): DW_OP_bregx B31+168\r\n                     [0x00000000001c5f24, 0x00000000001c6164): DW_OP_breg29 W29+176)\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTEnRSw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5MSdFL",
                                           "createdAt":  "2022-10-16T06:51:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I believe the proper way to express it in DWARF is to use `DW_OP_call_frame_cfa` (possibly with some architecture specific offset).",
                                           "updatedAt":  "2022-10-16T06:51:03Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[NativeAOT] REGNUM_AMBIENT_SP not properly handled in debugging information",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77491",
        "createdAt":  "2022-10-26T14:42:23Z",
        "number":  77491,
        "author":  "filipnavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-14T07:26:39Z",
        "body":  "There are multiple bugs in ObjWriter emission of COMDAT sections:\r\n- [x] For COFF there\u0027s always one `.debug$S` section which is incorrect. For methods emitted in COMDAT sections there should a new associated COMDAT `.debug$S` section for each (eg. `EmitCVDebugFunctionInfo` should have similar section handling code to `EmitWinFrameInfo`).\r\n- [x] For COFF the `xdata` section with `UNWIND_INFO` structures is not emitted as associated COMDAT. This mostly works due to unique symbol prefixes but it\u0027s not ideal.\r\n- [ ] For ELF incorrect relocation types are produced between sections (`RELPTR32` is not expressed as PLT relocation). This results in error in ObjWriter if one tries to use ILCompiler with `--multifile` switch.\r\n- [ ] For MachO the support is completely missing. It can likely be implemented with the `S_COALESCE` feature which serves the same purpose.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdwNzUA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5NCBnc",
                                           "createdAt":  "2022-10-26T17:29:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@filipnavara Thank you for finding and reporting these issues. Do you plan to submit fixes for these issues?",
                                           "updatedAt":  "2022-10-26T17:29:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NCGVl",
                                           "createdAt":  "2022-10-26T17:48:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "This particular set of issues is very low priority for me. I don\u0027t think the `--multifile` scenario is properly tested at the moment and I doubt it works outside of very narrow set of conditions. I do plan to submit a batch of ObjWriter fixes which may help a bit as a side effect.\r\n\r\nDepending on feedback to #77178 I may reprioritise. Most of the bugs were found when comparing my C# ObjWriter to the output of the LLVM ObjWriter, or when trying to use LLVM ObjWriter with non-default options.",
                                           "updatedAt":  "2022-10-26T19:15:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NDhVq",
                                           "createdAt":  "2022-10-26T23:23:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e I don\u0027t think the `--multifile` scenario is properly tested at the moment\r\n\r\nWe run it in the CI with a smoke test so that it doesn\u0027t completely bitrot but it hasn\u0027t been a big priority:\r\n\r\nhttps://github.com/dotnet/runtime/tree/main/src/tests/nativeaot/SmokeTests/MultiModule\r\n\r\nIIRC it never worked outside Windows. These ObjWriter issues were likely the reason.\r\n\r\nMultifile needs a bit more work to productize and it\u0027s unclear we need it right now (it speeds up compilation, but suppresses a lot of whole program optimizations, which makes it only suitable for debug builds and we have a JIT-based solution for debug builds/inner loop in .NET).",
                                           "updatedAt":  "2022-10-26T23:23:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NFASG",
                                           "createdAt":  "2022-10-27T08:14:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e We run it in the CI with a smoke test so that it doesn\u0027t completely bitrot\r\n\r\nThe tests run in Release mode. I am not even sure whether they are compiled with debug symbols. If the `-g` switch was not used, then at least the debug symbol and relocation issues would be untested.",
                                           "updatedAt":  "2022-10-27T08:14:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NbtRz",
                                           "createdAt":  "2022-11-01T20:37:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "The description of the Mach-O mechanism in the original post was inaccurate. Apparently the magic sauce are weak def symbols, which used to have the requirement for `S_COALESCED` section. LLVM stopped emitting the special `S_COALESCED` sections though since newer linker doesn\u0027t need them. Weak def symbols can be present anywhere.\r\n\r\n```\r\n/*\r\n * The N_WEAK_DEF bit of the n_desc field indicates to the static and dynamic\r\n * linkers that the symbol definition is weak, allowing a non-weak symbol to\r\n * also be used which causes the weak definition to be discared.  Currently this\r\n * is only supported for symbols in coalesed sections.\r\n */\r\n#define N_WEAK_DEF\t0x0080 /* coalesed symbol is a weak definition */\r\n```",
                                           "updatedAt":  "2022-11-01T20:37:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53AgjF",
                                           "createdAt":  "2024-03-14T06:37:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "@filipnavara off the top of your head, do you know if we ported these bugs over to the managed object writer?",
                                           "updatedAt":  "2024-03-14T06:37:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53A2tP",
                                           "createdAt":  "2024-03-14T07:16:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "The COFF bugs were fixed. Mach-O support is still missing. ELF would need to be revisited and rechecked.",
                                           "updatedAt":  "2024-03-14T07:16:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53A3NQ",
                                           "createdAt":  "2024-03-14T07:17:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Thanks! Will keep this open then.",
                                           "updatedAt":  "2024-03-14T07:17:55Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[NativeAOT] Broken COMDAT support in ObjWriter",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77583",
        "createdAt":  "2022-10-28T02:19:18Z",
        "number":  77583,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCsNQ8Q==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "BruceForstall",
                                            "createdAt":  "2023-01-11T19:19:12Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-06-27T21:25:46Z",
        "body":  "Port #74963 to NativeAot.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTqe58Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5NVXSs",
                                           "createdAt":  "2022-10-31T17:42:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCu3OnQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "MichalStrehovsky",
                                                                               "createdAt":  "2022-11-02T00:32:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "cshung",
                                           "body":  "Hi @MichalStrehovsky, I had a [prototype](https://github.com/cshung/runtimelab/commit/f153d83b1a32ada9735b72c319a707ddd58cd769) for this.\r\n\r\nThe prototype is able to turn on the `CORJIT_FLAG_PROCSPLIT` flag and interacts with the JIT under this mode.\r\n\r\nRight now, it will perform the procedure split, generate the code, and place it in the binary. \r\n\r\nEnd-to-end execution fails because we aren\u0027t generating the proper unwind data yet. \r\n\r\nI am stuck trying to figure out how that works, in particular, if I wanted to generate a chained unwind info, I need the RVA to the associated runtime function record, but I can\u0027t find how the runtime function records are generated in NativeAOT.",
                                           "updatedAt":  "2022-10-31T17:42:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ncyum",
                                           "createdAt":  "2022-11-02T00:32:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Hi @MichalStrehovsky, I had a [prototype](https://github.com/cshung/runtimelab/commit/f153d83b1a32ada9735b72c319a707ddd58cd769) for this.\r\n\r\nNice!\r\n\r\n\u003e End-to-end execution fails because we aren\u0027t generating the proper unwind data yet.\r\n\r\nYep, this is the main unknown for me too. I don\u0027t know much (or anything, to be precise) about unwinding since I never had to work with that codebase.\r\n\r\nCc @VSadov",
                                           "updatedAt":  "2022-11-02T00:32:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Op7nx",
                                           "createdAt":  "2022-11-18T06:48:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Once hot/cold splitting is available, we should re-measure #78370.",
                                           "updatedAt":  "2022-11-18T06:48:21Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Implement hot/cold code splitting",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78724",
        "createdAt":  "2022-11-22T20:01:54Z",
        "number":  78724,
        "author":  "tomcashman",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-02T00:34:49Z",
        "body":  "This relates to https://github.com/dotnet/runtime/issues/74355\r\n\r\nWe\u0027ve updated the console ports to .NET 7.0 and the above issue is still occurring with concurrent GC enabled. After further investigation, this is because we cannot implement the equivalent of PalHijack as POSIX signals are not supported on nearly all game console platforms.\r\n\r\nI know this is a feature request but it would be great if there was a way to mimic PalHijack behaviour without relying on pthread_kill so that we can have high performance GC in video games.\r\n\r\n(Note: All this work is being done as part of the [FNA community](https://github.com/FNA-XNA/FNA))",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTvA8sg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5O7Vme",
                                           "createdAt":  "2022-11-22T20:01:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-11-22T20:01:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O7gzv",
                                           "createdAt":  "2022-11-22T20:49:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis relates to https://github.com/dotnet/runtime/issues/74355\r\n\r\nWe\u0027ve updated the console ports to .NET 7.0 and the above issue is still occurring with concurrent GC enabled. After further investigation, this is because we cannot implement the equivalent of PalHijack as POSIX signals are not supported on nearly all game console platforms.\r\n\r\nI know this is a feature request but it would be great if there was a way to mimic PalHijack behaviour without relying on pthread_kill so that we can have high performance GC in video games.\r\n\r\n(Note: All this work is being done as part of the [FNA community](https://github.com/FNA-XNA/FNA))\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etomcashman\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-22T20:49:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O7iEo",
                                           "createdAt":  "2022-11-22T20:55:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwCsgA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2022-11-22T20:56:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "reflectronic",
                                           "body":  "The support for hijacking/redirection is not strictly necessary. Actually, it was unimplemented on non-Windows for many years in NativeAOT, before the enablement was done a couple of months ago in https://github.com/dotnet/runtime/pull/71187. Evidently, most programs hit \"implicit\" GC poll locations regularly enough (like in P/Invokes and allocations) that the lack of these mechanisms did not cause a problem. \r\n\r\nI haven\u0027t tested this, so forgive me if it doesn\u0027t work, but you should be able to undefine [`FEATURE_SUSPEND_REDIRECTION`](https://github.com/dotnet/runtime/blob/74c9e4a3d1fc9e60b38972f8ee136bf5747a12b2/src/coreclr/nativeaot/Runtime/CMakeLists.txt#L225) and that will disable the whole feature. Again, you will be reliant on these GC polls that happen at various special locations in the runtime, so an infinite busy loop on another thread will eventually hang your app.\r\n\r\nAn alternative to this is to revive the explicit GC poll insertion mode of the JIT. Its purpose is to insert explicit GC polls for platforms that do not support hijacking/redirection, but it was deleted (https://github.com/dotnet/runtime/pull/42664) a bit ago since it has been unused for a while. There are probably some bugs and bitrot that would need to be fixed, and it comes at a performance cost, but will naturally come with better reliability guarantees.",
                                           "updatedAt":  "2022-11-22T22:14:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O7xdS",
                                           "createdAt":  "2022-11-22T22:02:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tomcashman",
                                           "body":  "We haven\u0027t been using [FEATURE_SUSPEND_REDIRECTION](https://github.com/dotnet/runtime/blob/74c9e4a3d1fc9e60b38972f8ee136bf5747a12b2/src/coreclr/nativeaot/Runtime/CMakeLists.txt#L227) or FEATURE_READONLY_GS_COOKIE but we\u0027re still hitting the assert in WaitLonger(int i) due to IsCurrentThreadInCooperativeMode returning false. Are these required?\r\n\r\nThe only other thing I noticed in the issue was that the issue does not occur when the DEBUG flag is set. Possibly because of a different implementation of enter_spin_lock in gc.cpp depending on that flag.",
                                           "updatedAt":  "2022-11-22T22:02:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O7yDx",
                                           "createdAt":  "2022-11-22T22:05:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @VSadov ",
                                           "updatedAt":  "2022-11-22T22:05:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O7zfI",
                                           "createdAt":  "2022-11-22T22:10:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tomcashman",
                                           "body":  "For context, this is our Unix implementation for PalRegisterHijackCallback and PalHijack. We must return true from PalRegisterHijackCallback because it seems the runtime requires this otherwise it fails to initialise.\r\n\r\n```\r\nREDHAWK_PALEXPORT UInt32_BOOL REDHAWK_PALAPI PalRegisterHijackCallback(_In_ PalHijackCallback callback)\r\n{\r\n    return UInt32_TRUE;\r\n}\r\n\r\nREDHAWK_PALEXPORT void REDHAWK_PALAPI PalHijack(HANDLE hThread, _In_opt_ void* pThreadToHijack)\r\n{\r\n}\r\n```",
                                           "updatedAt":  "2022-11-22T22:10:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O8Dyy",
                                           "createdAt":  "2022-11-22T23:33:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "We have discussed this a bit a few months ago, but were not sure if there is a real scenario for this.\r\n\r\nJIT can insert suspension polls and can do it intelligently (i.e. only once per loop, if a loop is otherwise not-hijackable, etc.). This codepath works, but currently it is rarely taken. It is used only when \r\n- containing method is not fully-interruptible\r\n- encompassing loop is not hijackable (i.e. does not make method calls, does not allocate, etc).\r\n\r\nit is, in theory possible to do this more aggressively - assume that ordinary calls are not hijacking opportunities (but allocations and Pinvokes are) and no method is fully interruptible. Then many more loops will contain a poll.\r\n\r\nI think it is doable to introduce \"signallless\" compilation mode without sacrificing suspension latency guarantees, but with some impact to throughput and code size.",
                                           "updatedAt":  "2022-11-23T01:58:47Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[NativeAOT] Signalless Hijack",
        "labels":  [
                       "help wanted",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80602",
        "createdAt":  "2023-01-13T06:44:11Z",
        "number":  80602,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-12T08:49:34Z",
        "body":  "See the commented out tests in #80601.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUlZA5A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5SVkDk",
                                           "createdAt":  "2023-01-13T06:44:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSee the commented out tests in #80601.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-13T06:44:16Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Dynamic static generic virtual method leftover work",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80748",
        "createdAt":  "2023-01-17T18:06:47Z",
        "number":  80748,
        "author":  "jtschuster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-11T08:02:55Z",
        "body":  "In NativeAOT builds, we exclude native framework assemblies by relying on the name to end in \"*.Native.dll\" \"msquic.dll\". \r\n\r\nhttps://github.com/dotnet/runtime/blob/2e77a42d4563246f2362a498ca5906fdbd9274db/src/coreclr/nativeaot/BuildIntegration/Microsoft.NETCore.Native.targets#L159\r\n\r\nIt might be more reliable to use the [ComputeManagedAssemblies Task](https://github.com/dotnet/runtime/blob/main/src/tools/illink/src/ILLink.Tasks/ComputeManagedAssemblies.cs) from ILLink instead.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUqFomA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5SmgaI",
                                           "createdAt":  "2023-01-17T18:06:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn NativeAOT builds, we exclude native framework assemblies by relying on the name to end in \"*.Native.dll\" \"msquic.dll\". \r\n\r\nhttps://github.com/dotnet/runtime/blob/2e77a42d4563246f2362a498ca5906fdbd9274db/src/coreclr/nativeaot/BuildIntegration/Microsoft.NETCore.Native.targets#L159\r\n\r\nIt might be more reliable to use the [ComputeManagedAssemblies Task](https://github.com/dotnet/runtime/blob/main/src/tools/illink/src/ILLink.Tasks/ComputeManagedAssemblies.cs) from ILLink instead.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejtschuster\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-17T18:06:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SoWiY",
                                           "createdAt":  "2023-01-18T01:01:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "We have a task with such check here:\r\n\r\nhttps://github.com/dotnet/runtime/blob/e2d192ac4ecc8595bb6934aa1217baf77344328c/src/coreclr/tools/aot/ILCompiler.Build.Tasks/ComputeManagedAssembliesToCompileToNative.cs#L156-L174\r\n\r\nWe just don\u0027t do the check on the framework assemblies because those are special.\r\n\r\nThe framework assemblies might go away if @sbomer gets #80003 through.\r\n\r\nThe logic is currently more complicated than it needs to be because it was all inherited from CoreRT that was an addon to the SDK - it came with its own customized version of the framework and the SDK wasn\u0027t aware of it. A lot of what the targets/tasks are doing can be simplified.",
                                           "updatedAt":  "2023-01-18T01:01:43Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[NativeAot] Use ComputeManagedAssemblies Task from ILLink to find managed framework assemblies",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80905",
        "createdAt":  "2023-01-20T11:07:35Z",
        "number":  80905,
        "author":  "ivanpovazan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBmCGw==",
                          "nodes":  [
                                        {
                                            "content":  "ROCKET",
                                            "user":  "MichalStrehovsky",
                                            "createdAt":  "2023-01-20T11:44:51Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "GerardSmit",
                                            "createdAt":  "2023-01-20T12:03:42Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "startewho",
                                            "createdAt":  "2023-01-20T12:15:44Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "startewho",
                                            "createdAt":  "2023-01-20T12:15:47Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "kotlarmilos",
                                            "createdAt":  "2023-01-20T12:19:06Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "filipnavara",
                                            "createdAt":  "2023-01-20T12:45:52Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "filipnavara",
                                            "createdAt":  "2023-01-20T12:45:57Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "ShreyasJejurkar",
                                            "createdAt":  "2023-01-20T13:01:29Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "ShreyasJejurkar",
                                            "createdAt":  "2023-01-20T13:01:31Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "ShreyasJejurkar",
                                            "createdAt":  "2023-01-20T13:01:36Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "hez2010",
                                            "createdAt":  "2023-01-20T14:26:31Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "steveisok",
                                            "createdAt":  "2023-01-20T15:36:04Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "lambdageek",
                                            "createdAt":  "2023-01-20T15:59:46Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "lambdageek",
                                            "createdAt":  "2023-01-20T15:59:52Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "KuraiAndras",
                                            "createdAt":  "2023-01-20T20:22:30Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "nscimerical",
                                            "createdAt":  "2023-01-21T03:50:43Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "charlesroddie",
                                            "createdAt":  "2023-01-21T10:46:31Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "charlesroddie",
                                            "createdAt":  "2023-01-21T10:50:42Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "kant2002",
                                            "createdAt":  "2023-01-24T04:38:27Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "expcat",
                                            "createdAt":  "2023-01-25T18:42:04Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "maxkatz6",
                                            "createdAt":  "2023-02-14T16:16:17Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "maxkatz6",
                                            "createdAt":  "2023-02-14T16:16:20Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "lemonmojo",
                                            "createdAt":  "2023-02-28T21:12:32Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "maxkatz6",
                                            "createdAt":  "2023-03-02T05:25:42Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "qingyiwebt",
                                            "createdAt":  "2023-05-06T11:37:15Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "gdar91",
                                            "createdAt":  "2023-07-07T10:53:51Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "kyurkchyan",
                                            "createdAt":  "2023-11-15T18:23:28Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "danmoseley",
                                            "createdAt":  "2024-01-24T19:22:15Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "thefex",
                                            "createdAt":  "2025-04-23T13:49:17Z"
                                        }
                                    ],
                          "totalCount":  29
                      },
        "updatedAt":  "2025-07-16T08:34:51Z",
        "body":  "## Overview \n\nSupporting NativeAOT on iOS platforms as an experimental feature in .NET8 would enable our customers to try the NativeAOT toolchain and runtime with their iOS applications, in order to benefit from advantages mostly concentrated around application size savings and start-up performance. \nIn .NET8 the default toolchain and runtime when targeting iOS platforms will remain to be Mono, while NativeAOT would become available as an option.\n\nThis issues tracks progress on the identified work required for enabling NativeAOT on iOS platforms. The work is organised and tracked with GitHub issues divided by upcoming .NET8 preview releases in which they should become available. Some of the listed items can be considered as user stories and will require further break-down of work, while the others are plain tasks.\n\nNOTE: The breakdown of GitHub issues does not impose hard deadlines. If some of the functionality does not get upstreamed for a particular preview version, this issue will be updated accordingly.\n\n## Tasks\n\n### .NET8 Preview 5\n\n- [x] #65755\n- [x] #82090\n- [x] #80908\n- [x] #80910 \n- [x] #80977\n- [x] #81097\n- [x] #77472\n- [x] #80912 \n- [x] https://github.com/xamarin/xamarin-macios/pull/18268\n\n### .NET8 Preview 6\n\n- [x] #80911\n- [x] https://github.com/dotnet/sdk/issues/30068\n- [x] https://github.com/xamarin/xamarin-macios/pull/17374\n- [x] #81024\n- [x] https://github.com/xamarin/xamarin-macios/issues/17774\n- [x] https://github.com/dotnet/runtime/pull/85317\n- [x] #87216\n- [x] https://github.com/dotnet/runtime/issues/86651\n- [x] #87605\n- [x] https://github.com/dotnet/runtime/pull/87813\n- [x] [NativeAOT supports targeting all iOS-like platforms: `ios`, `iossimulator`, `maccatalyst`, `tvos` and `tvossimulator`](https://github.com/dotnet/runtime/pull/88242)\n- [x] [App size-regression and startup tracking for NativeAOT HelloiOS sample](https://github.com/dotnet/runtime/pull/85317)\n\n### .NET8 Preview 7\n\n- [x] https://github.com/xamarin/xamarin-macios/issues/18552\n- [x] https://github.com/dotnet/runtime/issues/87764\n- [x] https://github.com/xamarin/xamarin-macios/issues/18472\n- [x] https://github.com/xamarin/xamarin-macios/pull/18545\n- [x] https://github.com/dotnet/runtime/pull/88539\n\n### .NET8 GA\n\n- [x] https://github.com/dotnet/runtime/issues/87924\n- [x] https://github.com/xamarin/xamarin-macios/issues/17339\n- [x] #80907\n- [x] #85294\n- [x] #86649\n- [x] https://github.com/dotnet/runtime/issues/88844\n- [x] https://github.com/xamarin/xamarin-macios/issues/18584\n- [x] [App size-regression and startup tracking for NativeAOT MAUI iOS](https://github.com/dotnet/performance/pull/3145)\n- [x] https://github.com/xamarin/xamarin-macios/issues/18629\n- [x] https://github.com/xamarin/xamarin-macios/issues/18585\n\n### .NET9\n\n- [x] https://github.com/dotnet/runtime/issues/88737\n- [x] https://github.com/xamarin/xamarin-macios/issues/10470 \n- [x] https://github.com/dotnet/sdk/issues/33414\n- [x] #87610\n- [x] https://github.com/xamarin/xamarin-macios/issues/18605\n- [x] https://github.com/dotnet/maui/issues/18658\n- [x] https://github.com/dotnet/runtime/issues/94655\n- [x] https://github.com/dotnet/runtime/issues/96742\n- [x] https://github.com/dotnet/runtime/issues/106799\n\n### .NET10\n- [x] https://github.com/dotnet/runtime/issues/81530\n\n### .NET11\n- [ ] Improve methodology for start-up profiling and measuring SOD for iOS platforms \n- [ ] https://github.com/dotnet/performance/issues/3162\n- [ ] https://github.com/dotnet/runtime/issues/87060\n- [ ] #81075\n- [ ] #87187\n- [ ] https://github.com/xamarin/xamarin-macios/issues/18484\n\n### Other relevant issues:\n\n- #77957\n- #82156\n\n---\n/cc: @marek-safar @SamMonoRT @steveisok @lambdageek @rolfbjarne @kotlarmilos @akoeplinger  ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOisv80w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5TV1UT",
                                           "createdAt":  "2023-01-20T11:07:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Overview \r\n\r\nSupporting NativeAOT on iOS platforms as an experimental feature in .NET8 would enable our customers to try the NativeAOT toolchain and runtime with their iOS applications, in order to benefit from advantages mostly concentrated around application size savings and start-up performance. \r\nIn .NET8 the default toolchain and runtime when targeting iOS platforms will remain to be Mono, while NativeAOT would become available as an option.\r\n\r\nThis issues tracks progress on the identified work required for enabling NativeAOT on iOS platforms. The work will be organised and tracked with GitHub issues which are prioritised by their importance below. Some of the listed items can be considered as user stories and will require further break-down of work, while the others are plain tasks.\r\n\r\n## Tasks\r\n\r\n### Priority 0\r\n\r\n- [ ] Investigate limitations and document findings of enabling NativeAOT for MAUI iOS application \r\n- [ ] Enable building NativeAOT for iOS platforms \r\n- [ ] Support targeting iOS platforms with ILCompiler \r\n- [ ] Enable dotnet SDK to support targeting iOS with NativeAOT\r\n- [ ] Enable AppleAppBuilder to bundle applications compiled with NativeAOT \r\n- [ ] HelloiOS sample for NativeAOT\r\n- [ ] Introduce symbol stripping build task for HelloiOS sample \r\n- [ ] Include measuring HelloiOS application size without debug symbols\r\n- [ ] Static registrar with NativeAOT design – discussion \r\n- [ ] Static registrar with NativeAOT implementation\r\n- [ ] Enable start-up hooks to wrap managed entry points: https://github.com/dotnet/runtime/issues/77957\r\n- [ ] Objective-C marshalling and GC support: https://github.com/dotnet/runtime/issues/77472\r\n- [ ] Enable building/running dotnet/runtime libraries tests on a simulator and device with NativeAOT\r\n- [ ] Support NativeAOT as a third runtime variant with Xamarin (managed-to-native bridge and build system)\r\n\r\n### Priority 1\r\n\r\n- [ ] UnmanagedCallersOnly functions should be exposed from referenced libraries with NativeAOT\r\n- [ ] Marshalled delegates vs function pointers support with NativeAOT\r\n- [ ] Trimming and extensions compatibility design – discussion \r\n- [ ] Trimming and extensions compatibility implementation\r\n- [ ] Enable dotnet/runtime functional tests for iOS platforms to run with NativeAOT \r\n- [ ] Enable Xamarin iOS testing to run with NativeAOT \r\n\r\n### Priority 2\r\n\r\n- [ ] Investigate debugging support with NativeAOT \r\n- [ ] Improve methodology for start-up profiling and measuring SOD for iOS platforms \r\n- [ ] Completely move from marshalled delegates to function pointers throughout the Microsoft.iOS library \r\n- [ ] App size-regression tracking for NativeAOT iOS\r\n- [ ] App startup time tracking for NativeAOT iOS\r\n- [ ] App build time tracking for NativeAOT iOS\r\n\r\n---\r\n/cc: @marek-safar @SamMonoRT @steveisok @lambdageek @rolfbjarne @kotlarmilos @akoeplinger  \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eivanpovazan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`Epic`, `os-ios`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-20T11:07:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TWM1E",
                                           "createdAt":  "2023-01-20T12:43:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "/cc @agocke @jkotas @AaronRobinsonMSFT ",
                                           "updatedAt":  "2023-01-20T12:43:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TXPwg",
                                           "createdAt":  "2023-01-20T16:04:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC0pbLQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lambdageek",
                                                                               "createdAt":  "2023-01-20T16:20:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SamMonoRT",
                                                                               "createdAt":  "2023-01-20T16:55:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2023-01-23T15:27:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "We should also have a note/item around diagnostics and document what the user experience will be on iOS. I believe it would be rather different and having a comprehensive list would help users make informed decisions about using NativeAOT and what to expect post deployment.\r\n\r\n/cc @tommcdon ",
                                           "updatedAt":  "2023-01-20T16:05:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TXSWF",
                                           "createdAt":  "2023-01-20T16:12:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4fnsQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2023-01-20T16:19:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-03-24T12:49:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Adding @thaystg @lateralusX.   It is my understanding that Mono uses an in-proc debugger model due to mobile diagnostics restrictions.  ",
                                           "updatedAt":  "2023-01-20T16:12:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TXaOj",
                                           "createdAt":  "2023-01-20T16:41:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC0pbMw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2023-01-23T15:27:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e We should also have a note/item around diagnostics and document what the user experience will be on iOS. I believe it would be rather different and having a comprehensive list would help users make informed decisions about using NativeAOT and what to expect post deployment.\r\n\r\nFWIW debugging with lldb on-device is possible, so in that sense it\u0027s comparable to the current model of debugging NativeAOT on Linux/macOS.",
                                           "updatedAt":  "2023-01-20T16:41:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Teoq7",
                                           "createdAt":  "2023-01-23T15:28:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "@AaronRobinsonMSFT thank you for the suggestion. I have added it to the list.",
                                           "updatedAt":  "2023-01-23T15:28:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cpLL_",
                                           "createdAt":  "2023-05-19T09:29:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "curia-damiano",
                                           "body":  "Does this feature mean that it will be possible to export a .NET class library as a native iOS library?",
                                           "updatedAt":  "2023-05-19T09:29:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cyXBO",
                                           "createdAt":  "2023-05-22T07:44:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8I8tQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "curia-damiano",
                                                                               "createdAt":  "2023-05-22T09:21:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "\u003e Does this feature mean that it will be possible to export a .NET class library as a native iOS library?\r\n\r\nSee https://github.com/dotnet/runtime/issues/79377 for details on library build in .net8 for iOS/Android. Not sure if the experimental feature implemented here will have support for NativeLib=static|shared, since the main focus is building an iOS application, but the work done in https://github.com/dotnet/runtime/issues/79377 is specifically targeting building a static|shared native library out of a set of .net class libraries and it is integrated into regular .net CLI, so you can do a publish -p:NativeLib=shared using iOS or Android rid\u0027s supporting the same features as doing NativeAOT library build.",
                                           "updatedAt":  "2023-05-22T07:45:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5czD0G",
                                           "createdAt":  "2023-05-22T09:37:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "\u003e Does this feature mean that it will be possible to export a .NET class library as a native iOS library?\r\n\r\nThank you for the question @curia-damiano. In theory that would work as well, however, our current focus with NativeAOT is supporting full iOS applications. \r\n\r\nWould you mind sharing what would be the use case that you have in mind for native iOS libraries?",
                                           "updatedAt":  "2023-05-22T09:37:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5czFdW",
                                           "createdAt":  "2023-05-22T09:42:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8JFwA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "curia-damiano",
                                                                               "createdAt":  "2023-05-22T09:46:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2023-05-22T09:48:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Would you mind sharing what would be the use case that you have in mind for native iOS libraries?\r\n\r\nhttps://github.com/dotnet/runtime/issues/79377#issuecomment-1556873513",
                                           "updatedAt":  "2023-05-22T09:42:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5czG7H",
                                           "createdAt":  "2023-05-22T09:46:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8JFsA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2023-05-22T09:48:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "curia-damiano",
                                           "body":  "Sorry @ivanpovazan, I missed your request for comments. Thank you @filipnavara for the link!",
                                           "updatedAt":  "2023-05-22T09:46:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JVOen",
                                           "createdAt":  "2024-08-22T08:07:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvQ-nQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2024-08-22T08:38:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2024-08-22T08:55:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Moving to 10 since all the remaining 9 tasks are documentation and are tracked by separate issues.",
                                           "updatedAt":  "2024-08-22T08:07:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Kv6ad",
                                           "createdAt":  "2024-09-04T02:55:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlexeiNaabal",
                                           "body":  "\u003e \u003e Does this feature mean that it will be possible to export a .NET class library as a native iOS library?\r\n\u003e \r\n\u003e Thank you for the question @curia-damiano. In theory that would work as well, however, our current focus with NativeAOT is supporting full iOS applications.\r\n\u003e \r\n\u003e Would you mind sharing what would be the use case that you have in mind for native iOS libraries?\r\n\r\nCould you please provide more information @ivanpovazan? We are now testing publish managed class to native library, only find out we have to enable self-contained. Maybe the after-procedural (like library builder) is ready, but the publish itself is not? when we set `\u003cNativeLib\u003eShared\u003c/NativeLib\u003e`, the compiler force us to enable self-contained.\r\n\r\nBackground: We already setup an embed mono runtime, thus self-contained is not suitable for our need :) Recently we are experimenting if we can extract certain managed class as native library for the native host to invoke, to see if it can improve performance.",
                                           "updatedAt":  "2024-09-04T02:56:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Kw0Os",
                                           "createdAt":  "2024-09-04T06:50:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODw8VzA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "AlexeiNaabal",
                                                                               "createdAt":  "2024-09-04T11:49:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e We are now testing publish managed class to native library, only find out we have to enable self-contained. \r\n\u003e when we set `\u003cNativeLib\u003eShared\u003c/NativeLib\u003e`, the compiler force us to enable self-contained.\r\n\r\nThis touches on our rooting/trimming WASM use-case https://github.com/dotnet/runtime/issues/101434",
                                           "updatedAt":  "2024-09-04T06:50:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Kw2lv",
                                           "createdAt":  "2024-09-04T06:56:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "curia-damiano",
                                           "body":  "As I see that this issue is not closed yet, I would like to ask this:\r\n\r\n- the Swift SDK for Application Insights has been deprected less than a couple of years ago\r\n- with perfect timing, we retire App Center\r\n- the idea would be to use the .NET SDK for Application Insights in a native iOS library developed in Swift, compiling the SDK to a native library (eventually adding some entry point methods).\r\n\r\nDo you think that this is possible with .NET 8? And if not, will it be possible in .NET 9?",
                                           "updatedAt":  "2024-09-04T06:56:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KxMZ2",
                                           "createdAt":  "2024-09-04T07:46:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODw6agw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "curia-damiano",
                                                                               "createdAt":  "2024-09-04T07:48:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lemonmojo",
                                           "body":  "@curia-damiano Sounds like the perfect use case for [Beyond.NET](https://github.com/royalapplications/beyondnet). That being said, I would obviously very much appreciate if that was built in to .NET.",
                                           "updatedAt":  "2024-09-04T07:46:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KxN4a",
                                           "createdAt":  "2024-09-04T07:49:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "curia-damiano",
                                           "body":  "I was not aware of it, thank you very much @lemonmojo for telling me!",
                                           "updatedAt":  "2024-09-04T07:49:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ky_zT",
                                           "createdAt":  "2024-09-04T11:13:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODw8XLw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "AlexeiNaabal",
                                                                               "createdAt":  "2024-09-04T11:51:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "@AlexeiNaabal \r\n\r\n\u003e Could you please provide more information @ivanpovazan? We are now testing publish managed class to native library, only find out we have to enable self-contained. Maybe the after-procedural (like library builder) is ready, but the publish itself is not? when we set \u003cNativeLib\u003eShared\u003c/NativeLib\u003e, the compiler force us to enable self-contained.\r\n\r\nThis is by design. Building a managed library into a shared native one embeds the runtime with it. \r\n\r\n\u003e Background: We already setup an embed mono runtime, thus self-contained is not suitable for our need :) Recently we are experimenting if we can extract certain managed class as native library for the native host to invoke, to see if it can improve performance.\r\n\r\nIf I understand your setup correctly, you would have mono and NativeAOT runtime running in the same process, which is not a setup that is supported. \r\n\r\n---\r\n@curia-damiano \r\n\r\n\u003e - the idea would be to use the .NET SDK for Application Insights in a native iOS library developed in Swift, compiling the SDK to a native library (eventually adding some entry point methods).\r\n\r\n\u003e Do you think that this is possible with .NET 8? And if not, will it be possible in .NET 9?\r\n\r\n/cc: @kotlarmilos ^\r\n",
                                           "updatedAt":  "2024-09-04T11:13:08Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "Enable support for NativeAOT targeting iOS via opt-in feature",
        "labels":  [
                       "Epic",
                       "tracking",
                       "os-ios",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80985",
        "createdAt":  "2023-01-21T23:58:19Z",
        "number":  80985,
        "author":  "AustinWise",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-23T08:25:03Z",
        "body":  "Specifically pass the `lastMethod` parameter to the [`UnhandledExceptionPropagationHandler` delegate](https://learn.microsoft.com/dotnet/api/system.runtime.interopservices.objectivec.objectivecmarshal.unhandledexceptionpropagationhandler).\r\n\r\nAt the time this issue was created, the Xamarin side [does not use](https://github.com/xamarin/xamarin-macios/blob/6e1ba31bae568ec54f53259e9e884f0550cfdae3/src/ObjCRuntime/Runtime.CoreCLR.cs#L144) this parameter, so it was not implemented in #80334 . See that PR\u0027s comments for some ideas on how to implement it.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOU2iKAA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5TaIoA",
                                           "createdAt":  "2023-01-21T23:58:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSpecifically pass the `lastMethod` parameter to the [\u0027UnhandledExceptionPropagationHandler` delegate](https://learn.microsoft.com/dotnet/api/system.runtime.interopservices.objectivec.objectivecmarshal.unhandledexceptionpropagationhandler).\r\n\r\nAt the time this issue was created, the Xamarin side [does not use](https://github.com/xamarin/xamarin-macios/blob/6e1ba31bae568ec54f53259e9e884f0550cfdae3/src/ObjCRuntime/Runtime.CoreCLR.cs#L144) this parameter, so it was not implemented in #80334 . See that PR\u0027s comments for some ideas on how to implement it.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAustinWise\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-21T23:58:26Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[NativeAot] Objective-C Marshal: find method handle when propagating exceptions",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81075",
        "createdAt":  "2023-01-24T10:21:21Z",
        "number":  81075,
        "author":  "ivanpovazan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-16T08:33:47Z",
        "body":  "## Description \r\n\r\nTo enable verification and ensure early bug detection and improve the quality of the feature of support iOS platforms with NativeAOT, it is required to enable building and running libraries tests on iOS simulators and devices with NativeAOT.\r\n\r\nThis is not a requirement for enabling this in CI/CD (yet), but for running the tests locally and verifying correctness of the feature.\r\n\r\n## Tasks\r\n - [ ] #91871\r\n - [x] #91872\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOU4wUzA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5TjBPd",
                                           "createdAt":  "2023-01-24T10:21:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nnull\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eivanpovazan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-24T10:21:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TjBTM",
                                           "createdAt":  "2023-01-24T10:21:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nnull\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eivanpovazan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`os-ios`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-24T10:21:41Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Enable building/running libraries tests on iOS simulator and device with NativeAOT",
        "labels":  [
                       "feature-request",
                       "os-ios",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81382",
        "createdAt":  "2023-01-30T22:03:19Z",
        "number":  81382,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-09T16:00:33Z",
        "body":  "In [Microsoft.Crank](https://github.com/dotnet/crank) and the [ASP.NET Benchmarks](https://github.com/aspnet/Benchmarks), we specify a specific .NET runtime version to use using the following code:\r\n\r\nhttps://github.com/dotnet/crank/blob/5e7a8b90f56129d8c23dfa4693bd41deeddc9fc3/src/Microsoft.Crank.Agent/Startup.cs#L3551-L3584\r\n\r\n```C#\r\n                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))\r\n                    {\r\n                        project.Root.Add(\r\n                            new XElement(\"ItemGroup\",\r\n                                new XElement(\"FrameworkReference\",\r\n                                    new XAttribute(\"Update\", \"Microsoft.AspNetCore.App\"),\r\n                                    new XAttribute(\"RuntimeFrameworkVersion\", \"$(MicrosoftAspNetCoreAppPackageVersion)\")\r\n                                    ),\r\n                                new XElement(\"FrameworkReference\",\r\n                                    new XAttribute(\"Update\", \"Microsoft.NETCore.App\"),\r\n                                    new XAttribute(\"RuntimeFrameworkVersion\", \"$(MicrosoftNETCoreAppPackageVersion)\")\r\n                                )\r\n                            )\r\n                        );\r\n                    }\r\n                    else\r\n                    {\r\n                        project.Root.Add(\r\n                            new XElement(\"ItemGroup\",\r\n                                new XElement(\"FrameworkReference\",\r\n                                    new XAttribute(\"Update\", \"Microsoft.AspNetCore.App\"),\r\n                                    new XAttribute(\"RuntimeFrameworkVersion\", \"$(MicrosoftAspNetCoreAppPackageVersion)\")\r\n                                    ),\r\n                                new XElement(\"FrameworkReference\",\r\n                                    new XAttribute(\"Update\", \"Microsoft.NETCore.App\"),\r\n                                    new XAttribute(\"RuntimeFrameworkVersion\", \"$(MicrosoftNETCoreAppPackageVersion)\")\r\n                                    ),\r\n                                new XElement(\"FrameworkReference\",\r\n                                    new XAttribute(\"Update\", \"Microsoft.WindowsDesktop.App\"),\r\n                                    new XAttribute(\"RuntimeFrameworkVersion\", \"$(MicrosoftWindowsDesktopAppPackageVersion)\")\r\n                                    )\r\n                            )\r\n                        );\r\n                    }\r\n```\r\n\r\nFor \"normal\" CoreCLR apps, this is all that is needed to specify which version of the runtime to use.\r\n\r\nHowever, this doesn\u0027t work with `-p:PublishAot=true`. If I add:\r\n\r\n```xml\r\n  \u003cItemGroup\u003e\r\n    \u003cFrameworkReference Update=\"Microsoft.NETCore.App\"\r\n                        RuntimeFrameworkVersion=\"8.0.0-alpha.1.23080.1\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n```\r\n\r\nTo my .csproj, and then inspect the `ilc.rsp` file that says which version of the runtime is being used, I see:\r\n\r\n```\r\n-r:C:\\Users\\eerhardt\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\8.0.0-alpha.1.23074.4\\sdk\\System.Private.CoreLib.dll\r\n```\r\n\r\nThe PublishAot tooling should respect updating the FrameworkReference, just like other .NET apps do.\r\n\r\nBecause of this, we don\u0027t pick up the latest runtime changes in the ASP.NET AOT benchmarks until the runtime has flown all the way to dotnet/installer. We want to support the same workflow as the rest of the benchmarks, and pick up the latest runtime version as the official build is built.\r\n\r\ncc @agocke @MichalStrehovsky @vitek-karas @sebastienros ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVBmkhw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5UAggh",
                                           "createdAt":  "2023-01-30T22:03:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-01-30T22:03:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UAglK",
                                           "createdAt":  "2023-01-30T22:03:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn [Microsoft.Crank](https://github.com/dotnet/crank) and the [ASP.NET Benchmarks](https://github.com/aspnet/Benchmarks), we specify a specific .NET runtime version to use using the following code:\r\n\r\nhttps://github.com/dotnet/crank/blob/5e7a8b90f56129d8c23dfa4693bd41deeddc9fc3/src/Microsoft.Crank.Agent/Startup.cs#L3551-L3584\r\n\r\n```C#\r\n                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))\r\n                    {\r\n                        project.Root.Add(\r\n                            new XElement(\"ItemGroup\",\r\n                                new XElement(\"FrameworkReference\",\r\n                                    new XAttribute(\"Update\", \"Microsoft.AspNetCore.App\"),\r\n                                    new XAttribute(\"RuntimeFrameworkVersion\", \"$(MicrosoftAspNetCoreAppPackageVersion)\")\r\n                                    ),\r\n                                new XElement(\"FrameworkReference\",\r\n                                    new XAttribute(\"Update\", \"Microsoft.NETCore.App\"),\r\n                                    new XAttribute(\"RuntimeFrameworkVersion\", \"$(MicrosoftNETCoreAppPackageVersion)\")\r\n                                )\r\n                            )\r\n                        );\r\n                    }\r\n                    else\r\n                    {\r\n                        project.Root.Add(\r\n                            new XElement(\"ItemGroup\",\r\n                                new XElement(\"FrameworkReference\",\r\n                                    new XAttribute(\"Update\", \"Microsoft.AspNetCore.App\"),\r\n                                    new XAttribute(\"RuntimeFrameworkVersion\", \"$(MicrosoftAspNetCoreAppPackageVersion)\")\r\n                                    ),\r\n                                new XElement(\"FrameworkReference\",\r\n                                    new XAttribute(\"Update\", \"Microsoft.NETCore.App\"),\r\n                                    new XAttribute(\"RuntimeFrameworkVersion\", \"$(MicrosoftNETCoreAppPackageVersion)\")\r\n                                    ),\r\n                                new XElement(\"FrameworkReference\",\r\n                                    new XAttribute(\"Update\", \"Microsoft.WindowsDesktop.App\"),\r\n                                    new XAttribute(\"RuntimeFrameworkVersion\", \"$(MicrosoftWindowsDesktopAppPackageVersion)\")\r\n                                    )\r\n                            )\r\n                        );\r\n                    }\r\n```\r\n\r\nFor \"normal\" CoreCLR apps, this is all that is needed to specify which version of the runtime to use.\r\n\r\nHowever, this doesn\u0027t work with `-p:PublishAot=true`. If I add:\r\n\r\n```xml\r\n  \u003cItemGroup\u003e\r\n    \u003cFrameworkReference Update=\"Microsoft.NETCore.App\"\r\n                        RuntimeFrameworkVersion=\"8.0.0-alpha.1.23080.1\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n```\r\n\r\nTo my .csproj, and then inspect the `ilc.rsp` file that says which version of the runtime is being used, I see:\r\n\r\n```\r\n-r:C:\\Users\\eerhardt\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\8.0.0-alpha.1.23074.4\\sdk\\System.Private.CoreLib.dll\r\n```\r\n\r\nThe PublishAot tooling should respect updating the FrameworkReference, just like other .NET apps do.\r\n\r\nBecause of this, we don\u0027t pick up the latest runtime changes in the ASP.NET AOT benchmarks until the runtime has flown all the way to dotnet/installer. We want to support the same workflow as the rest of the benchmarks, and pick up the latest runtime version as the official build is built.\r\n\r\ncc @agocke @MichalStrehovsky @vitek-karas @sebastienros \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-30T22:03:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UAiI3",
                                           "createdAt":  "2023-01-30T22:08:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@sbomer and @LakshanF as this looks like the package version problem. We will probably have to pick the appropriate version of the ILC package based on the framework version (for `Microsoft.NETCore.App`). I would hope that SDK will get us the right higher-level framework bits based on the specified versions for them.",
                                           "updatedAt":  "2023-01-30T22:08:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UBGak",
                                           "createdAt":  "2023-01-31T00:36:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Setting `RuntimeFrameworkVersion` as an MSBuild property should work - it will apply to ILCompiler (and also R2R), and is the documented way to specify the runtime version: https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#runtimeframeworkversion.\r\n\r\nI looked a bit at how the metadata on `FrameworkReference` works. A single `FrameworkReference` can be associated with multiple `KnownRuntimePack`, based on the `RuntimePackLabels`. (More details at https://github.com/dotnet/sdk/pull/11824). Then the runtime pack version is selected according to this logic:\r\nhttps://github.com/dotnet/sdk/blob/77cb43cab0a8d7ce648c9ce3d9f191b2411a00ac/src/Tasks/Microsoft.NET.Build.Tasks/ProcessFrameworkReferences.cs#L708-L715\r\n\r\nHowever, ILCompiler (and R2R/ILLink) aren\u0027t implemented as runtime packs. So to make this get the same version semantics from `FrameworkReference`, we would need to add some kind of explicit or implicit association between the `FrameworkReference` and the `KnownILCompilerPack`, or move the ILCompiler acquisition to something closer to `KnownRuntimePack`.",
                                           "updatedAt":  "2023-01-31T00:36:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UBHA_",
                                           "createdAt":  "2023-01-31T00:40:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@sebastienros - is there a reason Crank doesn\u0027t use the `RuntimeFrameworkVersion` MSBuild property?\r\n\r\n(Note that Crank also needs to specify the ASP.NET version that is used, which is different than `RuntimeFrameworkVersion`.)",
                                           "updatedAt":  "2023-01-31T00:40:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UBHkW",
                                           "createdAt":  "2023-01-31T00:43:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "I don\u0027t recall but I don\u0027t see why it couldn\u0027t use `RuntimeFrameworkVersion` then for the runtime.",
                                           "updatedAt":  "2023-01-31T00:43:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UGJ4V",
                                           "createdAt":  "2023-01-31T18:51:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "I tried to set the `\u003cRuntimeFrameworkVersion\u003e` property to `8.0.0-alpha.1.23076.9` which is a runtime that had a bug in nativeaot (logging, DI related). This bug is now fixed in the latest SDK so I wanted to see if it could use another version of the runtime for the compilation tools.\r\n\r\nThe issue I am seeing is that it then tries to find a package for `Microsoft.NET.ILLink.Tasks` with this specific version, but the versioning of this package doesn\u0027t seem to match the runtime framework one.\r\n\r\n```\r\nC:\\Users\\sebros\\AppData\\Local\\Temp\\benchmarks-agent\\benchmarks-server-54508\\xifq2zkg.qg3\\benchmarks\\src\\Goldilocks\\Goldilocks.csproj : warning NU1603: Goldilocks depends on Microsoft.NET.ILLink.Tasks (\u003e= 8.0.0-alpha.1.23076.9) but Microsoft.NET.ILLink.Tasks 8.0.0-alpha.1.23076.9 was not found. An approximate best match of Microsoft.NET.ILLink.Tasks 8.0.100-1.22608.1 was resolved.\r\n```\r\n\r\nAvailable versions for Microsoft.NET.ILLink.Tasks: https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8/nuget/v3/flat2/Microsoft.NET.ILLink.Tasks/index.json\r\n\r\nAvailable runtime framework versions, including the one specified in the property:\r\nhttps://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8/nuget/v3/flat2/Microsoft.NetCore.App.Runtime.win-x64/index.json \r\n",
                                           "updatedAt":  "2023-01-31T18:51:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UGaSH",
                                           "createdAt":  "2023-01-31T19:45:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Ah, that is a known issue with the ILLink.Tasks package and will be fixed soon for 8.0 (7.0 will continue to have a similar issue). Until then, @eerhardt\u0027s workaround is a fine way to do it.",
                                           "updatedAt":  "2023-01-31T19:45:42Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "NativeAOT publish should respect updating FrameworkReference RuntimeFrameworkVersion",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81385",
        "createdAt":  "2023-01-30T22:24:37Z",
        "number":  81385,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-30T22:24:41Z",
        "body":  "Arcade tooling currently generates a dummy type to encode name of the resource string resource.\r\n\r\nWe should use the ResourceManager ctor that accepts a simple string instead. The string should go in a const so that we can easily grab it at native compile time for #80896.\r\n\r\n```csharp\r\nnamespace FxResources.System.Private.DisabledReflection\r\n{\r\n    internal static class SR { }\r\n}\r\nnamespace System\r\n{\r\n    internal static partial class SR\r\n    {\r\n        private static global::System.Resources.ResourceManager s_resourceManager;\r\n        internal static global::System.Resources.ResourceManager ResourceManager =\u003e s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(FxResources.System.Private.DisabledReflection.SR)));\r\n    }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVAJ-Vg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5UAn5W",
                                           "createdAt":  "2023-01-30T22:24:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nArcade tooling currently generates a dummy type to encode name of the resource string resource.\r\n\r\nWe should use the ResourceManager ctor that accepts a simple string instead. The string should go in a const so that we can easily grab it at native compile time for #80896.\r\n\r\n```csharp\r\nnamespace FxResources.System.Private.DisabledReflection\r\n{\r\n    internal static class SR { }\r\n}\r\nnamespace System\r\n{\r\n    internal static partial class SR\r\n    {\r\n        private static global::System.Resources.ResourceManager s_resourceManager;\r\n        internal static global::System.Resources.ResourceManager ResourceManager =\u003e s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(FxResources.System.Private.DisabledReflection.SR)));\r\n    }\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-30T22:24:41Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Do not use dummy types in SR class",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81673",
        "createdAt":  "2023-02-06T03:52:50Z",
        "number":  81673,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-28T17:38:46Z",
        "body":  "```\r\nBEGIN EXECUTION\r\n\r\nC:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\LayoutClass\\LayoutClassTest\u003eset DOTNETCLI=C:\\git\\runtime\\dotnet.cmd \r\ncall C:\\git\\runtime\\src\\tests\\Common\\scripts\\nativeaottest.cmd C:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\LayoutClass\\LayoutClassTest\\ LayoutClassTest.dll \r\nRunning SequentialClass...\r\nRunning SequentialClassNull...\r\nRunning DerivedClassWithEmptyBase...\r\nTest Failure: Xunit.Sdk.TrueException: Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at Xunit.Assert.True(Nullable`1, String) + 0x4b\r\n   at PInvokeTests.StructureTests.DerivedClassWithEmptyBase() + 0x49\r\n   at PInvokeTests.StructureTests.Main() + 0x2c\r\nFAIL: p-\u003ea=0, expected 42\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVIwl0Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5UjCXR",
                                           "createdAt":  "2023-02-06T03:52:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```\r\nBEGIN EXECUTION\r\n\r\nC:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\LayoutClass\\LayoutClassTest\u003eset DOTNETCLI=C:\\git\\runtime\\dotnet.cmd \r\ncall C:\\git\\runtime\\src\\tests\\Common\\scripts\\nativeaottest.cmd C:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\LayoutClass\\LayoutClassTest\\ LayoutClassTest.dll \r\nRunning SequentialClass...\r\nRunning SequentialClassNull...\r\nRunning DerivedClassWithEmptyBase...\r\nTest Failure: Xunit.Sdk.TrueException: Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at Xunit.Assert.True(Nullable`1, String) + 0x4b\r\n   at PInvokeTests.StructureTests.DerivedClassWithEmptyBase() + 0x49\r\n   at PInvokeTests.StructureTests.Main() + 0x2c\r\nFAIL: p-\u003ea=0, expected 42\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`disabled-test`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-06T03:52:58Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "interop\\LayoutClass\\LayoutClassTest failing",
        "labels":  [
                       "disabled-test",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81674",
        "createdAt":  "2023-02-06T04:00:48Z",
        "number":  81674,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-28T17:38:41Z",
        "body":  "```\r\nBEGIN EXECUTION\r\n\r\nC:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\PInvoke\\Array\\MarshalArrayAsParam\\AsLPArray\\AsLPArrayTest\u003eset DOTNETCLI=C:\\git\\runtime\\dotnet.cmd \r\ncall C:\\git\\runtime\\src\\tests\\Common\\scripts\\nativeaottest.cmd C:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\PInvoke\\Array\\MarshalArrayAsParam\\AsLPArray\\AsLPArrayTest\\ AsLPArrayTest.dll \r\nByVal marshaling CLR array as c-style-array no attributes\r\nByVal marshaling  CLR array as c-style-array with InAttribute applied\r\nBy value marshaling CLR array as c-style-array with InAttribute and OutAttribute applied\r\n\r\nTEST FAIL: Xunit.Sdk.TrueException: Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at Xunit.Assert.True(Nullable`1, String) + 0x4b\r\n   at ArrayMarshal.TestMarshalByVal_InOut() + 0xa0\r\n   at ArrayMarshal.Main() + 0x2c\r\n============ [CStyle_Array_Int] ============\r\n============ [CStyle_Array_Uint] ============\r\n============ [CStyle_Array_Short] ============\r\n============ [CStyle_Array_Word] ============\r\n============ [CStyle_Array_Long64] ============\r\n============ [CStyle_Array_ULong64] ============\r\n============ [CStyle_Array_Double] ============\r\n============ [CStyle_Array_Float] ============\r\n============ [CStyle_Array_Byte] ============\r\n============ [CStyle_Array_Char] ============\r\n============ [CStyle_Array_LPCSTR] ============\r\n============ [CStyle_Array_LPSTR] ============\r\n============ [CStyle_Array_LPCSTR] ============\r\n============ [CStyle_Array_Struct] ============\r\n============ [CStyle_Array_Bool] ============\r\n============ [CStyle_Array_Int] ============\r\n============ [CStyle_Array_Uint] ============\r\n============ [CStyle_Array_Short] ============\r\n============ [CStyle_Array_Word] ============\r\n============ [CStyle_Array_Long64] ============\r\n============ [CStyle_Array_ULong64] ============\r\n============ [CStyle_Array_Double] ============\r\n============ [CStyle_Array_Float] ============\r\n============ [CStyle_Array_Byte] ============\r\n============ [CStyle_Array_Char] ============\r\n============ [CStyle_Array_LPCSTR] ============\r\n============ [CStyle_Array_LPSTR] ============\r\n============ [CStyle_Array_LPCSTR] ============\r\n============ [CStyle_Array_Struct] ============\r\n============ [CStyle_Array_Bool] ============\r\n============ [CStyle_Array_Int_InOut] ============\r\n============ [CStyle_Array_Int] ============\r\n============ [CStyle_Array_Int_InOut_Null] ============\r\n============ [CStyle_Array_Int_InOut_ZeroLength] ============\r\n[CStyle_Array_Int_InOut_ZeroLength] Error: parameter actual is NULL\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOke5WRw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5UjDOH",
                                           "createdAt":  "2023-02-06T04:01:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```\r\nBEGIN EXECUTION\r\n\r\nC:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\PInvoke\\Array\\MarshalArrayAsParam\\AsLPArray\\AsLPArrayTest\u003eset DOTNETCLI=C:\\git\\runtime\\dotnet.cmd \r\ncall C:\\git\\runtime\\src\\tests\\Common\\scripts\\nativeaottest.cmd C:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\PInvoke\\Array\\MarshalArrayAsParam\\AsLPArray\\AsLPArrayTest\\ AsLPArrayTest.dll \r\nByVal marshaling CLR array as c-style-array no attributes\r\nByVal marshaling  CLR array as c-style-array with InAttribute applied\r\nBy value marshaling CLR array as c-style-array with InAttribute and OutAttribute applied\r\n\r\nTEST FAIL: Xunit.Sdk.TrueException: Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at Xunit.Assert.True(Nullable`1, String) + 0x4b\r\n   at ArrayMarshal.TestMarshalByVal_InOut() + 0xa0\r\n   at ArrayMarshal.Main() + 0x2c\r\n============ [CStyle_Array_Int] ============\r\n============ [CStyle_Array_Uint] ============\r\n============ [CStyle_Array_Short] ============\r\n============ [CStyle_Array_Word] ============\r\n============ [CStyle_Array_Long64] ============\r\n============ [CStyle_Array_ULong64] ============\r\n============ [CStyle_Array_Double] ============\r\n============ [CStyle_Array_Float] ============\r\n============ [CStyle_Array_Byte] ============\r\n============ [CStyle_Array_Char] ============\r\n============ [CStyle_Array_LPCSTR] ============\r\n============ [CStyle_Array_LPSTR] ============\r\n============ [CStyle_Array_LPCSTR] ============\r\n============ [CStyle_Array_Struct] ============\r\n============ [CStyle_Array_Bool] ============\r\n============ [CStyle_Array_Int] ============\r\n============ [CStyle_Array_Uint] ============\r\n============ [CStyle_Array_Short] ============\r\n============ [CStyle_Array_Word] ============\r\n============ [CStyle_Array_Long64] ============\r\n============ [CStyle_Array_ULong64] ============\r\n============ [CStyle_Array_Double] ============\r\n============ [CStyle_Array_Float] ============\r\n============ [CStyle_Array_Byte] ============\r\n============ [CStyle_Array_Char] ============\r\n============ [CStyle_Array_LPCSTR] ============\r\n============ [CStyle_Array_LPSTR] ============\r\n============ [CStyle_Array_LPCSTR] ============\r\n============ [CStyle_Array_Struct] ============\r\n============ [CStyle_Array_Bool] ============\r\n============ [CStyle_Array_Int_InOut] ============\r\n============ [CStyle_Array_Int] ============\r\n============ [CStyle_Array_Int_InOut_Null] ============\r\n============ [CStyle_Array_Int_InOut_ZeroLength] ============\r\n[CStyle_Array_Int_InOut_ZeroLength] Error: parameter actual is NULL\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`disabled-test`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-06T04:01:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6R7lZH",
                                           "createdAt":  "2024-10-30T20:32:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "https://github.com/dotnet/runtime/pull/109360 fixes the failure mode above (`Error: parameter actual is NULL`), but the test still fails, now with:\n```\nByVal marshaling CLR array as c-style-array no attributes\nByVal marshaling  CLR array as c-style-array with InAttribute applied\nBy value marshaling CLR array as c-style-array with InAttribute and OutAttribute applied\nBy value marshaling CLR array as c-style-array with OutAttribute applied\nExpected: 100\nActual: -1073740940\n```\n\nThis line causes the failure:\nhttps://github.com/dotnet/runtime/blob/a72cfb0ee2669abab031c5095a670678fd0b7861/src/tests/Interop/PInvoke/Array/MarshalArrayAsParam/AsLPArray/AsLPArrayTest.cs#L547\n\nIf I comment that out, there\u0027s one more later failure at https://github.com/dotnet/runtime/blob/a72cfb0ee2669abab031c5095a670678fd0b7861/src/tests/Interop/PInvoke/Array/MarshalArrayAsParam/AsLPArray/AsLPArrayTest.cs#L552\n\n```\nArray marshaling error, Index: 0 , Expected:99, Actual:\n\nTEST FAIL: Xunit.Sdk.TrueException: Assert.True() Failure\nExpected: True\nActual:   False\n   at Xunit.Assert.True(Nullable`1, String) + 0x30\n   at MarshalArrayAsParam.LPArray.ArrayMarshal.TestMarshalByVal_Out() + 0x44a\n   at MarshalArrayAsParam.LPArray.ArrayMarshal.TestEntryPoint() + 0x32\nXunit.Sdk.EqualException: Assert.Equal() Failure: Values differ\nExpected: 100\nActual:   101\n```\n\n",
                                           "updatedAt":  "2024-10-30T20:32:20Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "PInvoke/Array/MarshalArrayAsParam/AsLPArray/AsLPArrayTest failing",
        "labels":  [
                       "disabled-test",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81676",
        "createdAt":  "2023-02-06T04:29:04Z",
        "number":  81676,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-28T17:38:25Z",
        "body":  "```\r\nBEGIN EXECUTION\r\n\r\nC:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\DisabledRuntimeMarshalling\\DisabledRuntimeMarshalling_Disabled_NativeAssemblyDisabled\u003eset DOTNETCLI=C:\\git\\runtime\\dotnet.cmd \r\ncall C:\\git\\runtime\\src\\tests\\Common\\scripts\\nativeaottest.cmd C:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\DisabledRuntimeMarshalling\\DisabledRuntimeMarshalling_Disabled_NativeAssemblyDisabled\\ DisabledRuntimeMarshalling_Disabled_NativeAssemblyDisabled.dll \r\nXunit.Sdk.FalseException: Expected either a MarshalDirectiveException, InvalidProgramException, or ExecutionEngineException, but received a \u0027System.BadImageFormatException\u0027 exception: \u0027System.BadImageFormatException: Format of the executable (.exe) or library (.dll) is invalid.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowBadImageFormatException(ExceptionStringID) + 0x11\r\n   at DisabledRuntimeMarshalling.PInvokeAssemblyMarshallingDisabled.PInvokes.\u003c\u003ec.\u003cVarargs_NotSupported\u003eb__6_0() + 0xe\r\n   at DisabledRuntimeMarshalling.PInvokeAssemblyMarshallingDisabled.PInvokes.\u003cVarargs_NotSupported\u003eg__AssertThrowsCorrectException|6_1(Action) + 0x27\u0027\r\nExpected: False\r\nActual:   True\r\n   at Xunit.Assert.False(Nullable`1, String) + 0x4b\r\n   at Xunit.Assert.False(Boolean, String) + 0x18\r\n   at DisabledRuntimeMarshalling.PInvokeAssemblyMarshallingDisabled.PInvokes.\u003cVarargs_NotSupported\u003eg__AssertThrowsCorrectException|6_1(Action) + 0x1f9\r\n   at Program.\u003cMain\u003e$(String[] args) + 0x3e\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\n```\r\n\r\n```\r\nBEGIN EXECUTION\r\n\r\nC:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\DisabledRuntimeMarshalling\\DisabledRuntimeMarshalling_Disabled_NativeAssemblyEnabled\u003eset DOTNETCLI=C:\\git\\runtime\\dotnet.cmd \r\ncall C:\\git\\runtime\\src\\tests\\Common\\scripts\\nativeaottest.cmd C:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\DisabledRuntimeMarshalling\\DisabledRuntimeMarshalling_Disabled_NativeAssemblyEnabled\\ DisabledRuntimeMarshalling_Disabled_NativeAssemblyEnabled.dll \r\nXunit.Sdk.ThrowsException: Assert.Throws() Failure\r\nExpected: typeof(System.InvalidProgramException)\r\nActual:   (No exception was thrown)\r\n   at Xunit.Assert.Throws(Type, Exception) + 0x85\r\n   at Xunit.Assert.Throws[T](Action) + 0x30\r\n   at DisabledRuntimeMarshalling.PInvokeAssemblyMarshallingDisabled.UnmanagedCallersOnly.UnmanagedCallersOnly_Defined_InDisabledAssembly_WithNonBlittableParameters_Fails() + 0x48\r\n   at Program.\u003cMain\u003e$(String[] args) + 0x5c\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\nFAILED\r\n```\r\n\r\n```\r\nBEGIN EXECUTION\r\n\r\nC:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\DisabledRuntimeMarshalling\\DisabledRuntimeMarshalling_NativeAssemblyDisabled\u003eset DOTNETCLI=C:\\git\\runtime\\dotnet.cmd \r\ncall C:\\git\\runtime\\src\\tests\\Common\\scripts\\nativeaottest.cmd C:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\DisabledRuntimeMarshalling\\DisabledRuntimeMarshalling_NativeAssemblyDisabled\\ DisabledRuntimeMarshalling_NativeAssemblyDisabled.dll \r\nXunit.Sdk.FalseException: Expected either a MarshalDirectiveException, InvalidProgramException, or ExecutionEngineException, but received a \u0027System.BadImageFormatException\u0027 exception: \u0027System.BadImageFormatException: Format of the executable (.exe) or library (.dll) is invalid.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowBadImageFormatException(ExceptionStringID) + 0x11\r\n   at DisabledRuntimeMarshalling.PInvokeAssemblyMarshallingDisabled.PInvokes.\u003c\u003ec.\u003cVarargs_NotSupported\u003eb__6_0() + 0xe\r\n   at DisabledRuntimeMarshalling.PInvokeAssemblyMarshallingDisabled.PInvokes.\u003cVarargs_NotSupported\u003eg__AssertThrowsCorrectException|6_1(Action) + 0x27\u0027\r\nExpected: False\r\nActual:   True\r\n   at Xunit.Assert.False(Nullable`1, String) + 0x4b\r\n   at Xunit.Assert.False(Boolean, String) + 0x18\r\n   at DisabledRuntimeMarshalling.PInvokeAssemblyMarshallingDisabled.PInvokes.\u003cVarargs_NotSupported\u003eg__AssertThrowsCorrectException|6_1(Action) + 0x1f9\r\n   at Program.\u003cMain\u003e$(String[] args) + 0x3e\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVIyZpQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5UjJml",
                                           "createdAt":  "2023-02-06T04:29:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```\r\nBEGIN EXECUTION\r\n\r\nC:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\DisabledRuntimeMarshalling\\DisabledRuntimeMarshalling_Disabled_NativeAssemblyDisabled\u003eset DOTNETCLI=C:\\git\\runtime\\dotnet.cmd \r\ncall C:\\git\\runtime\\src\\tests\\Common\\scripts\\nativeaottest.cmd C:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\DisabledRuntimeMarshalling\\DisabledRuntimeMarshalling_Disabled_NativeAssemblyDisabled\\ DisabledRuntimeMarshalling_Disabled_NativeAssemblyDisabled.dll \r\nXunit.Sdk.FalseException: Expected either a MarshalDirectiveException, InvalidProgramException, or ExecutionEngineException, but received a \u0027System.BadImageFormatException\u0027 exception: \u0027System.BadImageFormatException: Format of the executable (.exe) or library (.dll) is invalid.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowBadImageFormatException(ExceptionStringID) + 0x11\r\n   at DisabledRuntimeMarshalling.PInvokeAssemblyMarshallingDisabled.PInvokes.\u003c\u003ec.\u003cVarargs_NotSupported\u003eb__6_0() + 0xe\r\n   at DisabledRuntimeMarshalling.PInvokeAssemblyMarshallingDisabled.PInvokes.\u003cVarargs_NotSupported\u003eg__AssertThrowsCorrectException|6_1(Action) + 0x27\u0027\r\nExpected: False\r\nActual:   True\r\n   at Xunit.Assert.False(Nullable`1, String) + 0x4b\r\n   at Xunit.Assert.False(Boolean, String) + 0x18\r\n   at DisabledRuntimeMarshalling.PInvokeAssemblyMarshallingDisabled.PInvokes.\u003cVarargs_NotSupported\u003eg__AssertThrowsCorrectException|6_1(Action) + 0x1f9\r\n   at Program.\u003cMain\u003e$(String[] args) + 0x3e\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\n```\r\n\r\n```\r\nBEGIN EXECUTION\r\n\r\nC:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\DisabledRuntimeMarshalling\\DisabledRuntimeMarshalling_Disabled_NativeAssemblyEnabled\u003eset DOTNETCLI=C:\\git\\runtime\\dotnet.cmd \r\ncall C:\\git\\runtime\\src\\tests\\Common\\scripts\\nativeaottest.cmd C:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\DisabledRuntimeMarshalling\\DisabledRuntimeMarshalling_Disabled_NativeAssemblyEnabled\\ DisabledRuntimeMarshalling_Disabled_NativeAssemblyEnabled.dll \r\nXunit.Sdk.ThrowsException: Assert.Throws() Failure\r\nExpected: typeof(System.InvalidProgramException)\r\nActual:   (No exception was thrown)\r\n   at Xunit.Assert.Throws(Type, Exception) + 0x85\r\n   at Xunit.Assert.Throws[T](Action) + 0x30\r\n   at DisabledRuntimeMarshalling.PInvokeAssemblyMarshallingDisabled.UnmanagedCallersOnly.UnmanagedCallersOnly_Defined_InDisabledAssembly_WithNonBlittableParameters_Fails() + 0x48\r\n   at Program.\u003cMain\u003e$(String[] args) + 0x5c\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\nFAILED\r\n```\r\n\r\n```\r\nBEGIN EXECUTION\r\n\r\nC:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\DisabledRuntimeMarshalling\\DisabledRuntimeMarshalling_NativeAssemblyDisabled\u003eset DOTNETCLI=C:\\git\\runtime\\dotnet.cmd \r\ncall C:\\git\\runtime\\src\\tests\\Common\\scripts\\nativeaottest.cmd C:\\git\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Release\\interop\\DisabledRuntimeMarshalling\\DisabledRuntimeMarshalling_NativeAssemblyDisabled\\ DisabledRuntimeMarshalling_NativeAssemblyDisabled.dll \r\nXunit.Sdk.FalseException: Expected either a MarshalDirectiveException, InvalidProgramException, or ExecutionEngineException, but received a \u0027System.BadImageFormatException\u0027 exception: \u0027System.BadImageFormatException: Format of the executable (.exe) or library (.dll) is invalid.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowBadImageFormatException(ExceptionStringID) + 0x11\r\n   at DisabledRuntimeMarshalling.PInvokeAssemblyMarshallingDisabled.PInvokes.\u003c\u003ec.\u003cVarargs_NotSupported\u003eb__6_0() + 0xe\r\n   at DisabledRuntimeMarshalling.PInvokeAssemblyMarshallingDisabled.PInvokes.\u003cVarargs_NotSupported\u003eg__AssertThrowsCorrectException|6_1(Action) + 0x27\u0027\r\nExpected: False\r\nActual:   True\r\n   at Xunit.Assert.False(Nullable`1, String) + 0x4b\r\n   at Xunit.Assert.False(Boolean, String) + 0x18\r\n   at DisabledRuntimeMarshalling.PInvokeAssemblyMarshallingDisabled.PInvokes.\u003cVarargs_NotSupported\u003eg__AssertThrowsCorrectException|6_1(Action) + 0x1f9\r\n   at Program.\u003cMain\u003e$(String[] args) + 0x3e\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-06T04:29:10Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "DisabledRuntimeMarshalling failing",
        "labels":  [
                       "disabled-test",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82334",
        "createdAt":  "2023-02-18T03:25:24Z",
        "number":  82334,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-02T16:12:40Z",
        "body":  "### Repro\r\n```csharp\r\nRecursion(1);\r\n\r\nvoid Recursion(int x)\r\n{\r\n    Recursion(x+1);\r\n    Recursion(x+1);\r\n}\r\n```\r\n\r\n### Actual result\r\n\r\n`Segmentation fault`\r\n\r\n### Expected result\r\n\r\n`Process is terminating due to StackOverflowException`\r\n\r\n(Reported by partner team.)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObgIDaA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Vj5Yq",
                                           "createdAt":  "2023-02-18T03:25:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Repro\r\n```csharp\r\nRecursion(1);\r\n\r\nvoid Recursion(int x)\r\n{\r\n    Recursion(x+1);\r\n    Recursion(x+1);\r\n}\r\n```\r\n\r\n### Actual result\r\n\r\n`Segmentation fault`\r\n\r\n### Expected result\r\n\r\n`Process is terminating due to StackOverflowException`\r\n\r\n(Reported by partner team.)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejkotas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-18T03:25:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tPO0_",
                                           "createdAt":  "2023-11-29T21:14:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The change was reverted by #95415",
                                           "updatedAt":  "2023-11-29T21:14:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5t5uYF",
                                           "createdAt":  "2023-12-06T23:24:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "It looks like all the crashes occurred when the SIGSEGV was hit while the GC was trying to suspend all threads. I\u0027m not sure why that was causing crashes with the alternate stack but isn\u0027t causing crashes when it uses the regular stack.",
                                           "updatedAt":  "2023-12-06T23:24:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uAgNo",
                                           "createdAt":  "2023-12-07T16:10:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "My (wild) guess is that it might be due to libunwind not being able to walk over the SIGSEGV frame when the handler is running on a different stack from the code where the sigsegv occured. In coreclr, we actually don\u0027t rely on libunwind over that boundary, we explicitly skip it using a context that we store in the sigsegv handler. See\r\nhttps://github.com/dotnet/runtime/blob/62dcb1218c72664f681d721a309b933663fd7b3b/src/coreclr/pal/src/exception/seh-unwind.cpp#L669-L679",
                                           "updatedAt":  "2023-12-07T16:10:29Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[NativeAOT] Stackoverflow reporting on Linux",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82337",
        "createdAt":  "2023-02-18T03:44:51Z",
        "number":  82337,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-28T17:38:54Z",
        "body":  "### Repro\r\n```csharp\r\nvar l = new List\u003cobject\u003e();\r\nfor (; ; ) l.Add(new object());\r\n```\r\n\r\nRun the native aot compiled binary with with `export DOTNET_GCHeapHardLimit=2000000` set\r\n\r\n### Actual result\r\n\r\n`Aborted`\r\n\r\n### Expected result\r\n\r\n`Process is terminating due to OutOfMemoryException`\r\n\r\n(Reported by partner team.)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVY-hqw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Vj6Gr",
                                           "createdAt":  "2023-02-18T03:45:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Repro\r\n```csharp\r\nvar l = new List\u003cobject\u003e();\r\nfor (; ; ) l.Add(new object());\r\n```\r\n\r\nRun the native aot compiled binary with with `export DOTNET_GCHeapHardLimit=2000000` set\r\n\r\n### Actual result\r\n\r\n`Aborted`\r\n\r\n### Expected result\r\n\r\n`Process is terminating due to OutOfMemoryException`\r\n\r\n(Reported by partner team.)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejkotas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-18T03:45:00Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[NativeAOT] Out of memory reporting on Linux",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82447",
        "createdAt":  "2023-02-21T20:00:41Z",
        "number":  82447,
        "author":  "tlakollo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-30T21:03:08Z",
        "body":  "With https://github.com/dotnet/runtime/pull/82216 we started to share the test cases between ILLink and NativeAOT this allows us to delete duplicated code and keep tests consistent, given that a change in one of the tests will affect both codebases. Not all the ILLink tests apply to NativeAOT and that\u0027s why NativeAOT only enables a subset of them in its [TestDatabase file](https://github.com/dotnet/runtime/blob/main/src/coreclr/tools/aot/Mono.Linker.Tests/TestCases/TestDatabase.cs), the test database file enables testing in a folder fashion, a folder is assigned to a feature being tested. But even in these features NativeAOT has not triaged/enabled all of the tests, and some of the tests inside a feature might not apply to NativeAOT.\r\nFor these reasons we are disabling the test that have not been triaged inside a feature until they are triaged for:\r\n- Annotating the expectations of the test. Sometimes the test behavior is just different for NativeAOT and is expected.\r\n- A particular bug is fixed\r\n- A new feature is implemented\r\n- We determine that the feature doesn\u0027t apply to NativeAOT \r\n\r\nIncomplete list of features which are still missing/tests:\r\n- [x] `Requires*` on attributes `RequiresOnAttributeCtor.cs`, `RequiresOnAttribute.cs` parts of `RequiresOnClass.cs`\r\n- [x] `Requires*` on a virtual method (directly or indirectly) causes warnings in NativeAOT, but in trimmer we rely on hierarchy checks and only warn on the base method (not on the override when marked via DAM).\r\n- [x] `ReflectionAccessFromCompilerGeneratedCode.cs` is completely disabled for NativeAOT\r\n- [x] `RequiresOnStaticConstructors.cs` is completely disabled for NativeAOT\r\n- [x] `RequiresOnVirtualsAndInterfaces.cs` is completely disabled for NativeAOT\r\n- [x] https://github.com/dotnet/runtime/issues/85161\r\n- [ ] `Activator.CreateInstance` doesn\u0027t parse the string argument and instead always produces `IL2032`\r\n- [ ] Suppressing warnings by adding `UnconditionalSuppressMessage` via XML is not supported in NativeAOT\r\n- [ ] `LocalDataFlow` tests - these test various aspects of local data flow which are slightly off between the two compilers. Also NativeAOT in debug mode (running just the JIT) will produce very different results because it would be effectively testing JIT\u0027s behavior. Probably not a goal to fix this.\r\n- [ ] `IReflectDataFlow` this test validates a lot of `Kept` stuff, but NativeAOT seems to handle it very differently from ILLink. Probably needs some more investigation.\r\n- [ ] https://github.com/dotnet/runtime/issues/88647",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYxw5-A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5VxsqI",
                                           "createdAt":  "2023-02-21T21:04:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWith https://github.com/dotnet/runtime/pull/82216 we started to share the test cases between ILLink and NativeAOT this allows us to delete duplicated code and keep tests consistent, given that a change in one of the tests will affect both codebases. Not all the ILLink tests apply to NativeAOT and that\u0027s why NativeAOT only enables a subset of them in its [TestDatabase file](https://github.com/dotnet/runtime/blob/main/src/coreclr/tools/aot/Mono.Linker.Tests/TestCases/TestDatabase.cs), the test database file enables testing in a folder fashion, a folder is assigned to a feature being tested. But even in these features NativeAOT has not triaged/enabled all of the tests, and some of the tests inside a feature might not apply to NativeAOT.\r\nFor these reasons we are disabling the whole test while it gets triaged for:\r\n- Annotating the expectations of the test. Sometimes the test behavior is just different for NativeAOT and is expected.\r\n- A particular bug is fixed\r\n- A new feature is implemented\r\n- We determine that the feature doesn\u0027t apply to NativeAOT \r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etlakollo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-21T21:04:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jCtm_",
                                           "createdAt":  "2023-08-02T07:28:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "@vitek-karas is there something we need for 8.0 or can we move this to 9.0?",
                                           "updatedAt":  "2023-08-02T07:28:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jHDn4",
                                           "createdAt":  "2023-08-02T18:56:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "No - moved it to 9.0.",
                                           "updatedAt":  "2023-08-02T18:56:02Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Some of NativeAOT tests are disabled after sharing test cases with ILLink",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82603",
        "createdAt":  "2023-02-24T14:11:43Z",
        "number":  82603,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-07T08:53:18Z",
        "body":  "Currently we run data flow for reasons which are not directly related to data flow or don\u0027t need full data flow processing. Data flow processing is relatively slow as it does lot of work. Running too much of it would slow down the compiler. Measured on a ASP.NET API AOT template app, currently the compiler runs data flow on ~2100 methods.\r\n\r\nNote that running data flow on a method which doesn\u0027t need it is not functionally wrong, it should not change the behavior of the compiler. Reducing the number of methods which go through data flow is a pure performance optimization for the compiler.\r\n\r\n### Generic argument annotations causing data flow\r\n\r\nThe prime example is that we run data flow for any method which contains an access to a member on a generic type with annotated generic parameters. These are relatively common as there are quite a few types which use the new/struct/unmanaged constraints (which are all treated as annotations). Technically we don\u0027t need to run data flow only because of this, since the result of analysis will not depend on stack modeling and of the other data flow functionality.\r\n\r\nThe only reason we run data flow for such cases is that the annotation may cause reflection marking of additional methods, which may have annotations or RUC, which leads to warnings. To generate the warning with the exact location information we need to know the exact IL instruction which introduces the dependency. We run data flow basically just to determine the exact IL instruction.\r\n\r\nOne possible solution would be to implement a new simpler \"method IL scanner\", which doesn\u0027t perform data flow modeling and simply goes over all instructions. It could then mark/produce warnings as normal data flow does for most of the simple cases. Note that such solution could be used to reduce data flow need even further (from just the generic argument needs), for example if the method only calls another RUC method, we don\u0027t need full data flow, simple IL scan would be enough. This solution would require new IL scanning implementation (relatively simple though), but it would be otherwise functionally equivalent to running full data flow (exact IL instruction determined).\r\n\r\nAnother possibility is to give up on precise warning origin to some degree. Warning origin is currently used for two purposes:\r\n* Determine warning suppression scopes and potentially suppress the warning based on them.\r\n* Determine the warning location in the source (IL or real source code) to report it to the user.\r\n\r\nWe don\u0027t need precise IL instruction to correctly process warning suppressions, since warnings suppressions in the compiler are always method scope and above (we don\u0027t have the ability to suppress warnings for a range of instruction within a method).\r\nAlso if we don\u0027t have PDB information with source information for the given assembly, we don\u0027t use the precise IL instruction information either and simply report the warning on the method itself. The only case where precise IL instruction is used if we have PDB available, in which case we convert the instruction to a source code location (line/column). We could give up on this for some of the possible warnings and simply report the warning on the method. In that case there would be no need to perform data flow, since we have all the information available without it.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVg2w4A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5WDbDg",
                                           "createdAt":  "2023-02-24T14:11:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrently we run data flow for reasons which are not directly related to data flow or don\u0027t need full data flow processing. Data flow processing is relatively slow as it does lot of work. Running too much of it would slow down the compiler. Measured on a ASP.NET API AOT template app, currently the compiler runs data flow on ~2100 methods.\r\n\r\nNote that running data flow on a method which doesn\u0027t need it is not functionally wrong, it should not change the behavior of the compiler. Reducing the number of methods which go through data flow is a pure performance optimization for the compiler.\r\n\r\n### Generic argument annotations causing data flow\r\n\r\nThe prime example is that we run data flow for any method which contains an access to a member on a generic type with annotated generic parameters. These are relatively common as there are quite a few types which use the new/struct/unmanaged constraints (which are all treated as annotations). Technically we don\u0027t need to run data flow only because of this, since the result of analysis will not depend on stack modeling and of the other data flow functionality.\r\n\r\nThe only reason we run data flow for such cases is that the annotation may cause reflection marking of additional methods, which may have annotations or RUC, which leads to warnings. To generate the warning with the exact location information we need to know the exact IL instruction which introduces the dependency. We run data flow basically just to determine the exact IL instruction.\r\n\r\nOne possible solution would be to implement a new simpler \"method IL scanner\", which doesn\u0027t perform data flow modeling and simply goes over all instructions. It could then mark/produce warnings as normal data flow does for most of the simple cases. Note that such solution could be used to reduce data flow need even further (from just the generic argument needs), for example if the method only calls another RUC method, we don\u0027t need full data flow, simple IL scan would be enough. This solution would require new IL scanning implementation (relatively simple though), but it would be otherwise functionally equivalent to running full data flow (exact IL instruction determined).\r\n\r\nAnother possibility is to give up on precise warning origin to some degree. Warning origin is currently used for two purposes:\r\n* Determine warning suppression scopes and potentially suppress the warning based on them.\r\n* Determine the warning location in the source (IL or real source code) to report it to the user.\r\n\r\nWe don\u0027t need precise IL instruction to correctly process warning suppressions, since warnings suppressions in the compiler are always method scope and above (we don\u0027t have the ability to suppress warnings for a range of instruction within a method).\r\nAlso if we don\u0027t have PDB information with source information for the given assembly, we don\u0027t use the precise IL instruction information either and simply report the warning on the method itself. The only case where precise IL instruction is used if we have PDB available, in which case we convert the instruction to a source code location (line/column). We could give up on this for some of the possible warnings and simply report the warning on the method. In that case there would be no need to perform data flow, since we have all the information available without it.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-24T14:11:56Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Reduce number of methods which go through data flow analysis in ILC",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83021",
        "createdAt":  "2023-03-06T07:22:05Z",
        "number":  83021,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-30T03:25:14Z",
        "body":  "Definitely Future milestone - just wanted to write down a couple notes as I spent a couple hours looking at this today.\r\n\r\nOptimized compilation in NativeAOT consists of two phases - scanning (builds whole program view) and compilation (generates code).\r\n\r\nScanning is currently implemented in C# - we have an IL importer that essentially simulates some things that RyuJIT will need when compiling the method (e.g. method call will require us to provide method body of the callee, etc.).\r\n\r\nWe discussed a couple times doing this analysis with RyuJIT and there even was a prototype that didn\u0027t quite do what we need in NativeAOT (it collected whole program view for RyuJIT\u0027s purposes, but not ours, so it\u0027s not very useful for NativeAOT - what we need is the list of relocs from a method body).\r\n\r\nI put together a hack to let us run RyuJIT as a scanner: https://github.com/MichalStrehovsky/runtime/commit/34f7a962b6f81bd2e031e1342a6f83ae9f204466\r\n\r\nThis hack does nothing to prevent codegen, so we do all the unnecessary things like register allocation and code generation in RyuJIT and then we throw it all away. The compile throughput impact is about 15%.\r\n\r\nIt is a regression in size, both for BasicMinimalApi (10%) and HelloWorld (5%). I expect it also to regress working set as a side effect.\r\n\r\nObservations:\r\n* We don\u0027t have a good way to model optimizations we currently do in scanner through JitInterface (e.g. `someType.GetType() == typeof(X)` currently avoids requesting a MethodTable with a populated vtable in the C# scanner, but RyuJIT can\u0027t communicate a limited `MethodTable` is sufficient - we get a full one).\r\n* https://github.com/dotnet/runtimelab/issues/1128 shows up as a problem again because we want to be able to give out MethodTable symbols without a vtable\r\n* RyuJIT may optimize away some things during importing around virtual method lookups, or generic dictionary lookup, but then during compilation it\u0027s going to ask questions about those that we cannot answer (this structurally falls out from JitInterface design where `getCallinfo` provides some information that RyuJIT may optimize into something that doesn\u0027t need the thing JitInterface provided).\r\n\r\nNot sure if all of the size regression can be attributed to above - the above causes enough noise that it wasn\u0027t worth spending more time on it.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmOKaMw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5WwnEe",
                                           "createdAt":  "2023-03-06T07:22:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nDefinitely Future milestone - just wanted to write down a couple notes as I spent a couple hours looking at this today.\r\n\r\nOptimized compilation in NativeAOT consists of two phases - scanning (builds whole program view) and compilation (generates code).\r\n\r\nScanning is currently implemented in C# - we have an IL importer that essentially simulates some things that RyuJIT will need when compiling the method (e.g. method call will require us to provide method body of the callee, etc.).\r\n\r\nWe discussed a couple times doing this analysis with RyuJIT and there even was a prototype that didn\u0027t quite do what we need in NativeAOT (it collected whole program view for RyuJIT\u0027s purposes, but not ours, so it\u0027s not very useful for NativeAOT - what we need is the list of relocs from a method body).\r\n\r\nI put together a hack to let us run RyuJIT as a scanner: https://github.com/MichalStrehovsky/runtime/commit/34f7a962b6f81bd2e031e1342a6f83ae9f204466\r\n\r\nThis hack does nothing to prevent codegen, so we do all the unnecessary things like register allocation and code generation in RyuJIT and then we throw it all away. The compile throughput impact is about 15%.\r\n\r\nIt is a regression in size, both for BasicMinimalApi (10%) and HelloWorld (5%). I expect it also to regress working set as a side effect.\r\n\r\nObservations:\r\n* We don\u0027t have a good way to model optimizations we currently do in scanner through JitInterface (e.g. `someType.GetType() == typeof(X)` currently avoids requesting a MethodTable with a populated vtable in the C# scanner, but RyuJIT can\u0027t communicate a limited `MethodTable` is sufficient - we get a full one).\r\n* https://github.com/dotnet/runtimelab/issues/1128 shows up as a problem again because we want to be able to give out MethodTable symbols without a vtable\r\n* RyuJIT may optimize away some things during importing around virtual method lookups, or generic dictionary lookup, but then during compilation it\u0027s going to ask questions about those that we cannot answer (this structurally falls out from JitInterface design where `getCallinfo` provides some information that RyuJIT may optimize into something that doesn\u0027t need the thing JitInterface provided).\r\n\r\nNot sure if all of the size regression can be attributed to above - the above causes enough noise that it wasn\u0027t worth spending more time on it.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-06T07:22:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5n-0_I",
                                           "createdAt":  "2023-10-03T08:55:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "It might be beneficial to be able to scan methods basic block after basic block to fix issues like #92850.",
                                           "updatedAt":  "2023-10-03T08:55:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Y4poz",
                                           "createdAt":  "2024-12-30T03:25:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VAllens",
                                           "body":  "I was recently reviewing the documentation on how to use a PGO when publishing a NativeAOT.\nSo, found here.\nAny progress now?",
                                           "updatedAt":  "2024-12-30T03:25:12Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Use RyuJIT as IL scanner in NativeAOT",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83043",
        "createdAt":  "2023-03-06T19:40:11Z",
        "number":  83043,
        "author":  "EgorBo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-08T14:04:15Z",
        "body":  "```csharp\r\nstruct MyStruct\r\n{\r\n    public string Name;\r\n}\r\n\r\nclass Program\r\n{\r\n    static readonly MyStruct MyStr = new() { Name = \"Hey!\" };\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    static MyStruct Test() =\u003e MyStr;\r\n}\r\n```\r\nCodegen for `Test()`:\r\n```asm\r\n; Method Program:Test():Program+MyStruct\r\n       4883EC28             sub      rsp, 40\r\n       E800000000           call     CORINFO_HELP_READYTORUN_GCSTATIC_BASE\r\n       488B4010             mov      rax, gword ptr [rax+10H]\r\n       4883C428             add      rsp, 40\r\n       C3                   ret      \r\n; Total bytes of code: 18\r\n```\r\nIt seems that `_compilation.HasLazyStaticConstructor(field.OwningType)` returns true for `Program` so `MyStr` field is not pre-computed despite being a simple struct + frozen string literal.\r\n\r\ncc @MichalStrehovsky ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOphefjQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5W1bRk",
                                           "createdAt":  "2023-03-06T19:40:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch, @kunalspathak\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```csharp\r\ninternal class Program\r\n{\r\n    struct MyStruct\r\n    {\r\n        public string Name;\r\n    }\r\n\r\n    static readonly MyStruct MyStr = new() { Name = \"Hey!\" };\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    static MyStruct Test() =\u003e MyStr;\r\n}\r\n```\r\nCodegen for `Test()`:\r\n```asm\r\n; Method Program:Test():Program+MyStruct\r\nG_M41189_IG01:              ;; offset=0000H\r\n       4883EC28             sub      rsp, 40\r\nG_M41189_IG02:              ;; offset=0004H\r\n       E800000000           call     CORINFO_HELP_READYTORUN_GCSTATIC_BASE\r\n       488B4010             mov      rax, gword ptr [rax+10H]\r\nG_M41189_IG03:              ;; offset=000DH\r\n       4883C428             add      rsp, 40\r\n       C3                   ret      \r\n; Total bytes of code: 18\r\n```\r\nIt seems that `_compilation.HasLazyStaticConstructor(field.OwningType)` returns true for `Program`\r\n\r\ncc @MichalStrehovsky \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eEgorBo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CodeGen-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-06T19:40:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5W1bW_",
                                           "createdAt":  "2023-03-06T19:40:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```csharp\r\ninternal class Program\r\n{\r\n    struct MyStruct\r\n    {\r\n        public string Name;\r\n    }\r\n\r\n    static readonly MyStruct MyStr = new() { Name = \"Hey!\" };\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    static MyStruct Test() =\u003e MyStr;\r\n}\r\n```\r\nCodegen for `Test()`:\r\n```asm\r\n; Method Program:Test():Program+MyStruct\r\nG_M41189_IG01:              ;; offset=0000H\r\n       4883EC28             sub      rsp, 40\r\nG_M41189_IG02:              ;; offset=0004H\r\n       E800000000           call     CORINFO_HELP_READYTORUN_GCSTATIC_BASE\r\n       488B4010             mov      rax, gword ptr [rax+10H]\r\nG_M41189_IG03:              ;; offset=000DH\r\n       4883C428             add      rsp, 40\r\n       C3                   ret      \r\n; Total bytes of code: 18\r\n```\r\nIt seems that `_compilation.HasLazyStaticConstructor(field.OwningType)` returns true for `Program`\r\n\r\ncc @MichalStrehovsky \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eEgorBo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-06T19:40:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5W20NP",
                                           "createdAt":  "2023-03-06T23:29:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Value types are represented as byte arrays within the interpreter. It\u0027s hard to add object references to it.\r\n\r\nThe features the interpreter supports follow the pareto principle.",
                                           "updatedAt":  "2023-03-06T23:29:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5W7Ro3",
                                           "createdAt":  "2023-03-07T15:35:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Similar issue for initialization of reference types: https://github.com/dotnet/runtime/issues/82993",
                                           "updatedAt":  "2023-03-07T15:35:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mFg2y",
                                           "createdAt":  "2025-04-08T13:34:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "It was a surprise to find that NativeAOT\u0027s [disassembly](https://github.com/user-attachments/files/19649895/disasm.txt) is considerably worse than CoreCLR\u0027s [codegen](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIAYACY8gOgCUBXAOwwEt8YLAJI8YUCAAcAymIBuvMDFwBuGvSatOPfoIDCEfBN4AbMTKjzFKmmoDMTUg100A3jQYeGAbQCyMDAAWEAAmQobGABR+gSFhEsYA8hJ8EFy4LAByECLGvFx5AOYAlAC67p7E9sxIDMAQEMYMPuQRReUebtSe3UwA7AxafAIiAGbQ+NgpXMK4CVIACsaTY1D4EXOLy+MsAGKwMABCUgAiRapdngC+Nhcevv5BoeFRD7HhSVPpWTl5haXtTCq5BqdQaTVIrQBnR6FX6STEk0KzBmexghxOrXO3Wu1ABXgAqlwJlxsAUYMFdNhjKYoLMuMYAJ4RACiPCgDPmEDyGAYAF4GCSBBARhF8bgYAAVCAAaTREmZCAk0AwuCK/1ugI0NW5DDFkplcoVSqgKshGuhMIYvBGDCiLTVAMtDEC4gA7gKYO6RLIqbxgvCoIjUgrFMleKlMY7PDBjOKrTaohCHRqnS6IO6uJ6GN7ff6JAipiGYGGI2cbk7iP06FirjcaJcgA=), which handles frozen string fields much more efficiently. It\u0027s one thing for codegen to be imperfect, but this level of inefficiency is quite surprising.",
                                           "updatedAt":  "2025-04-08T13:34:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mFjfP",
                                           "createdAt":  "2025-04-08T13:38:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "@am11 yep, this issue is exactly what prevents NativeAOT to generate optimimal codegen for `RuntimeInformation.IsOSPlatform` API. I guess it\u0027s not super important because it\u0027s a sort of a legacy API (although, still tons of usages).",
                                           "updatedAt":  "2025-04-08T13:38:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mFo2F",
                                           "createdAt":  "2025-04-08T13:45:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "@EgorBo, is it just this API, or is it part of emerging value-type pattern relying on frozen strings in static contexts?",
                                           "updatedAt":  "2025-04-08T13:46:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mF5nc",
                                           "createdAt":  "2025-04-08T14:03:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e [@EgorBo](https://github.com/EgorBo), is it just this API, or is it part of emerging value-type pattern relying on frozen strings in static contexts?\n\nit was not this api specific, I just don\u0027t know any other API that could benefit (but currently does not) from this",
                                           "updatedAt":  "2025-04-08T14:03:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mF5-N",
                                           "createdAt":  "2025-04-08T14:04:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e or is it part of emerging value-type pattern relying on frozen strings in static contexts?\n\nIt is an example of code where tiered JITing has an advantage. Code that takes advantages of unique tiered JITing capabilities does not always work in the most optimal way with AOT, and vice versa.\n\nIn theory, this example can be fixed in the AOT interpreter. Most readonly statics instances that people expect to be optimized by tiered JIT are not like that.",
                                           "updatedAt":  "2025-04-08T14:04:14Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "NativeAOT: Type is not pre-initialized",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83611",
        "createdAt":  "2023-03-17T19:27:09Z",
        "number":  83611,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7XmjA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkoritzinsky",
                                            "createdAt":  "2023-03-17T19:56:09Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Sergio0694",
                                            "createdAt":  "2023-03-17T21:03:05Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "DaZombieKiller",
                                            "createdAt":  "2023-03-18T05:31:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DaZombieKiller",
                                            "createdAt":  "2023-03-18T05:31:33Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "neon-sunset",
                                            "createdAt":  "2023-03-19T10:40:06Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "sweemer",
                                            "createdAt":  "2024-09-27T09:14:25Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2024-10-17T01:58:30Z",
        "body":  "Native AOT compiler package includes precompiled libraries (.lib/.a files) with unmanaged runtime code. This works well in most cases. However, we have seen situations where the precompiled libraries are not usable:\r\n\r\n- LTCG optimization for unmanaged runtime code. LTCG optimizations require exact match between C++ compiler and native linker versions, that prevents us from enabling this optimization for native AOT runtime. It would be hard to guarantee that native linker used to build the application exactly matches the C++ compiler used to compile the runtime .lib files.\r\n- Custom configurations of the unmanaged runtime. For example, compiling the runtime with higher level of security mitigations or with custom versions of system libraries.\r\n- Mismatch in C runtime flavor on Windows (https://github.com/dotnet/runtime/issues/85517)\r\n\r\nWe have introduced options to compile [OpenSSL shims](https://github.com/dotnet/runtime/search?q=StaticOpenSslLinking) and [ICU shims](https://github.com/dotnet/runtime/search?q=StaticICULinking) at application build time. This issue is about extending this approach to all native AOT unmanaged runtime code.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkCTWOQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5X4CdW",
                                           "createdAt":  "2023-03-17T19:27:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nNative AOT compiler package includes precompiled libraries (.lib/.a files) with unmanaged runtime code. This works well in most cases. However, we have \r\n\r\n- LTCG optimization for unmanaged runtime code. LTCG optimizations require exact match between C++ compiler and native linker versions, that prevents us from enabling this optimization for native AOT runtime. It would be hard to guarantee that native linker used to build the application exactly matches the C++ compiler used to compile the runtime .lib files.\r\n- Custom configurations of the unmanaged runtime. For example, compiling the runtime with higher level of security mitigations or with custom versions of system libraries.\r\n  \r\nWe have introduced options to compile [OpenSSL shims](https://github.com/dotnet/runtime/search?q=StaticOpenSslLinking) and [ICU shims](https://github.com/dotnet/runtime/search?q=StaticICULinking) at application build time. This issue is about extending this approach to all native AOT unmanaged runtime code.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejkotas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-17T19:27:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51WhAR",
                                           "createdAt":  "2024-02-28T12:02:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "One issue with this I guess is that it\u0027d introduce a dependency on Clang on Linux systems, since GCC is not officially supported.",
                                           "updatedAt":  "2024-02-28T12:02:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51X_W4",
                                           "createdAt":  "2024-02-28T15:25:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Yes, it would have almost the same pre-reqs as dotnet/runtime repo build: https://github.com/dotnet/runtime/blob/main/docs/workflow/requirements/linux-requirements.md#toolchain-setup (with a few exceptions - curl, git, lldb and ninja should not be necessary).",
                                           "updatedAt":  "2024-02-28T15:25:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-xa0y",
                                           "createdAt":  "2024-05-23T11:33:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "From https://github.com/dotnet/runtime/issues/102586#issuecomment-2125912770 (@jkoritzinsky)\r\n\r\nFor this scenario, we should produce simple and straightforward CMake files that have the minimal information required to define the CMake targets necessary to build the libraries. Right now we have a decent amount of logic that\u0027s shared with the rest of the runtime repo (functions, shared definitions), and I don\u0027t think we want to ship our eng/native directory.",
                                           "updatedAt":  "2024-05-23T11:33:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-xa-J",
                                           "createdAt":  "2024-05-23T11:33:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "From https://github.com/dotnet/runtime/issues/102586#issuecomment-2126458346 (@MichalStrehovsky)\r\n\r\nI\u0027ve looked at this in the past, and yeah, the shared CMake files don\u0027t make it easy to disconnect from our engineering system. But if we don\u0027t use the same files that we use to build the product, it\u0027s super easy to forget switches/ifdefs and end up with a different runtime, that could be different in very subtle ways. It also doesn\u0027t help that CoreLib relies on files we generate as part of native build and who knows if they could be different.",
                                           "updatedAt":  "2024-05-23T11:33:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QJNY5",
                                           "createdAt":  "2024-10-17T01:58:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sweemer",
                                           "body":  "\u003e From [#102586 (comment)](https://github.com/dotnet/runtime/issues/102586#issuecomment-2125912770) ([@jkoritzinsky](https://github.com/jkoritzinsky))\n\u003e \n\u003e For this scenario, we should produce simple and straightforward CMake files that have the minimal information required to define the CMake targets necessary to build the libraries. Right now we have a decent amount of logic that\u0027s shared with the rest of the runtime repo (functions, shared definitions), and I don\u0027t think we want to ship our eng/native directory.\n\nIn addition to defining the CMake targets necessary to build the libraries, it would be great to go the other way as well and somehow generate MSBuild .props or .targets from the user\u0027s CMake configuration. This would ensure that the same linker options are used for both linking the native library and then statically linking it with Native AOT.\n\nThat is, all of the linker flags my native library uses (whether defined by `CMAKE_CXX_FLAGS` or by `target_link_options`) should ideally be added as `LinkerArg` properties to a .targets or .props file that my Native AOT project automatically consumes.\n\nThis technique was suggested to me in https://github.com/dotnet/runtime/issues/108009#issuecomment-2404239105 and it works well - the only problem is that there is nothing to enforce consistency between the linker flags in my `CMakeLists.txt` file and `.targets` file. It would be great if the .NET SDK could provide this functionality.",
                                           "updatedAt":  "2024-10-17T01:58:29Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[NativeAOT] Optionally compile unmanaged runtime at application build time",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84402",
        "createdAt":  "2023-04-06T08:11:05Z",
        "number":  84402,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T01:39:03Z",
        "body":  "We\u0027re hitting a RyuJIT assert at compile time because a NativeStructType instance size doesn\u0027t match the managed size.\r\n\r\nWe either shouldn\u0027t have NativeStructType instances in the system for anything with runtime marshalling disabled, or they need to take into account whether marshalling is disabled. Or we shouldn\u0027t have delegate marshallers in the first place (this is while doing a reverse p/invoke marshaller). It\u0027s all very confusing so I\u0027m just filing a bug so I can disable building the test(s) against it.\r\n\r\nInterop\\DisabledRuntimeMarshalling\\DisabledRuntimeMarshalling_Disabled_NativeAssemblyDisabled",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWVO_SQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ZU79J",
                                           "createdAt":  "2023-04-06T08:11:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe\u0027re hitting a RyuJIT assert at compile time because a NativeStructType instance size doesn\u0027t match the managed size.\r\n\r\nWe either shouldn\u0027t have NativeStructType instances in the system for anything with runtime marshalling disabled, or they need to take into account whether marshalling is disabled. Or we shouldn\u0027t have delegate marshallers in the first place (this is while doing a reverse p/invoke marshaller). It\u0027s all very confusing so I\u0027m just filing a bug so I can disable building the test(s) against it.\r\n\r\nInterop\\DisabledRuntimeMarshalling\\DisabledRuntimeMarshalling_Disabled_NativeAssemblyDisabled\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-06T08:11:12Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "DisabledRuntimeMarshalling_Disabled_NativeAssemblyDisabled failing with NativeAOT",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85184",
        "createdAt":  "2023-04-21T21:24:18Z",
        "number":  85184,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-19T03:37:29Z",
        "body":  "## Repro\r\n```\r\nConsole.WriteLine(new G\u003cstring\u003e().M());\r\n\r\nclass G\u003cT\u003e\r\n{\r\n    public object M()\r\n    {\r\n        return new G\u003cList\u003cT\u003e\u003e();\r\n    }\r\n}\r\n```\r\n\r\n## Actual result:\r\n\r\n `AOT analysis warning IL3054: [repro]G\u003cSystem.Collections.Generic.List\u003cSystem.Collections.Generic.List\u003cSyste\r\nm.Collections.Generic.List\u003cSystem.Collections.Generic.List\u003cstring\u003e\u003e\u003e\u003e\u003e: Generic expansion to \u0027G\u003cList\u003cList\u003cLis\r\nt\u003cList\u003cList\u003cString\u003e\u003e\u003e\u003e\u003e\u003e\u0027 was aborted due to generic recursion.`\r\n\r\n## Expected result: \r\n\r\nNo warning\r\n\r\nContext: https://github.com/dotnet/runtime/pull/85176#discussion_r1174061465",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYdVAVw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5agCi4",
                                           "createdAt":  "2023-04-21T21:24:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-collections\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRepro:\r\n```\r\nConsole.WriteLine(new G\u003cstring\u003e().M());\r\n\r\nclass G\u003cT\u003e\r\n{\r\n    public object M()\r\n    {\r\n        return new G\u003cList\u003cT\u003e\u003e();\r\n    }\r\n}\r\n```\r\n\r\nActual result: `AOT analysis warning IL3054: [repro]G\u003cSystem.Collections.Generic.List\u003cSystem.Collections.Generic.List\u003cSyste\r\nm.Collections.Generic.List\u003cSystem.Collections.Generic.List\u003cstring\u003e\u003e\u003e\u003e\u003e: Generic expansion to \u0027G\u003cList\u003cList\u003cLis\r\nt\u003cList\u003cList\u003cString\u003e\u003e\u003e\u003e\u003e\u003e\u0027 was aborted due to generic recursion.`\r\n\r\nExpected result: No warning\r\n\r\nContext: https://github.com/dotnet/runtime/pull/85176#discussion_r1174061465\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejkotas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Collections`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-21T21:24:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5agCn-",
                                           "createdAt":  "2023-04-21T21:24:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Repro\r\n```\r\nConsole.WriteLine(new G\u003cstring\u003e().M());\r\n\r\nclass G\u003cT\u003e\r\n{\r\n    public object M()\r\n    {\r\n        return new G\u003cList\u003cT\u003e\u003e();\r\n    }\r\n}\r\n```\r\n\r\n## Actual result:\r\n\r\n `AOT analysis warning IL3054: [repro]G\u003cSystem.Collections.Generic.List\u003cSystem.Collections.Generic.List\u003cSyste\r\nm.Collections.Generic.List\u003cSystem.Collections.Generic.List\u003cstring\u003e\u003e\u003e\u003e\u003e: Generic expansion to \u0027G\u003cList\u003cList\u003cLis\r\nt\u003cList\u003cList\u003cString\u003e\u003e\u003e\u003e\u003e\u003e\u0027 was aborted due to generic recursion.`\r\n\r\n## Expected result: \r\n\r\nNo warning\r\n\r\nContext: https://github.com/dotnet/runtime/pull/85176#discussion_r1174061465\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejkotas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Collections`, `untriaged`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-21T21:24:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5agG-n",
                                           "createdAt":  "2023-04-21T21:52:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6YMfA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2023-04-21T22:08:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Is there anything that can be done for this? Both Gstring and GListString are backed by GCanon. So they need the same generic dictionary layout.\r\n\r\nWe could in theory make a concrete dictionary with a hole in it (the slot still has to be there because we only have one version of code) but we no longer track specializations for this to be feasible. E.g. reflection and generic virtuals are analyzed purely on canon forms. There are also additional problems with inlining (RyuJIT inlines canon bodies, not instantiated bodies).\r\n\r\nThis will likely be one of those issues that is forever in the backlog.",
                                           "updatedAt":  "2023-04-22T01:28:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5agJnE",
                                           "createdAt":  "2023-04-21T22:08:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Or we can leave these recursive slots uninitialized and initialize them lazily at runtime.",
                                           "updatedAt":  "2023-04-21T22:08:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5agUpa",
                                           "createdAt":  "2023-04-21T23:34:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Ah, so it\u0027s not about more precise analysis, just different cutoff for the generic recursion. Got confused by the title. Yep, this should not be too hard.",
                                           "updatedAt":  "2023-04-21T23:34:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5agX5x",
                                           "createdAt":  "2023-04-22T00:08:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Updated the title. More precise analysis was the first thing that came to my mind as a solution of the problem, but it is not the only possible solution.",
                                           "updatedAt":  "2023-04-22T00:08:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ag9En",
                                           "createdAt":  "2023-04-22T10:14:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "My impression is that a fix for this would supersede #85176. Which would be nice since we\u0027d get to keep the APIs that the workaround removes. I\u0027m going to merge #85176 so that the issue is addressed for Preview 4 but we should try reverting once a compiler fix becomes available.",
                                           "updatedAt":  "2023-04-22T10:14:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ag_rt",
                                           "createdAt":  "2023-04-22T10:50:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6ZSjQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2023-04-22T17:38:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "A potential NativeAOT fix won\u0027t help the customer who originally reported the issue on .NET Native (different product).\r\n\r\nThe potential fix for NativeAOT is still a deoptimization and we\u0027re going to report a warning. It just won\u0027t have the size impact, only runtime throughput impact.\r\n\r\nGeneric recursion is AOT cryptonite.",
                                           "updatedAt":  "2023-04-22T10:50:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cF7uv",
                                           "createdAt":  "2023-05-12T03:31:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I played with the lazy generics a little bit in this commit: https://github.com/MichalStrehovsky/runtime/commit/c95536accb9f1dd4040e69d2d278f22485759433\r\n\r\nThe commit is making everything lazy (not just generic recursion). Such mode is also interesting because it lets us thoroughly test things.\r\n\r\nThe problem it\u0027s running into is that it introduces `ForceDictionaryLookups` in all sorts of random places (basically, we cannot be lazy in any generics that are reachable from the type loader itself). I got tired of putting the attribute on stuff and I\u0027ve still not even reached the Main of hello world.\r\n\r\nI think to really fix this, we need to do the Runtime.Base/CoreLib separation and move type loader to work off Runtime.Base so that we have control over what gets called.\r\n\r\nThe interesting bit is that I did succeed in compiling BasicMinimalApi and this produces a 5% saving at the cost of a startup hit and a throughput hit (hard to measure startup hit if it can\u0027t even reach Main though).",
                                           "updatedAt":  "2023-05-12T03:32:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hipf6",
                                           "createdAt":  "2023-07-14T21:41:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benjamin-hodgson",
                                           "body":  "I ran into this in a library of mine: https://github.com/benjamin-hodgson/Pidgin/issues/147. This does seem like it\u0027d be a fairly widespread problem, especially in functional libraries (think of eg a signature like `Enumerable.Chunks` which returns an enumerable-of-enumerables).\r\n\r\nJust for my own edification, please could you explain the nature of the issue? I don\u0027t quite understand why this variety of polymorphic recursion is problematic. As far as I understand it the code for both `G\u003cstring\u003e.M()` and `G\u003cList\u003cstring\u003e\u003e.M()` should be shared, since both `string` and `List\u003cstring\u003e` are reference types. Why does the code generator want to compile the returned `G\u003cList\u003cstring\u003e\u003e`\u0027s `M` and not use the one it generated for `G\u003cstring\u003e`?\r\n\r\nWhat\u0027s more, changing the example to use a value type (ie, change `G` to a `struct`, or change `string` to `char`) fixes the warning. Weird.\r\n\r\nIf this is likely to be a permanent problem, please could you at least add it to the documentation? [The docs for IL3054](https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/warnings/il3054) specifically call out **recursive** methods featuring **structs**, neither of which applies here.",
                                           "updatedAt":  "2023-07-15T02:45:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h1UBX",
                                           "createdAt":  "2023-07-19T03:37:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e If this is likely to be a permanent problem, please could you at least add it to the documentation? [The docs for IL3054](https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/warnings/il3054) specifically call out recursive methods featuring structs, neither of which applies here.\r\n\r\nI\u0027m extending the docs in https://github.com/dotnet/docs/pull/36303.\r\n\r\nThe problem is that:\r\n\r\n```csharp\r\nusing System.Collections.Generic;\r\n\r\nRecursive\u003cobject\u003e();\r\n\r\nstatic void Recursive\u003cT\u003e() =\u003e Recursive\u003cList\u003cT\u003e\u003e();\r\n```\r\n\r\nneeds to be compiled into something that can be called like this from Main:\r\n\r\n```\r\n// Load a secret parameter that tells the shared code (\"Recursive\u003c__Canon\u003e\") what the current T is.\r\n// The constant we\u0027re loading is an address within the executable - it\u0027s a data structure that was generated ahead of time\r\n00007FF6575932D0 48 8D 0D A9 4E 05 00 lea         rcx,[__GenericDict_repro_Program____Main___g__Recursive_0_0\u003cObject\u003e (07FF6575E8180h)]  \r\n00007FF6575932D7 E8 84 B5 02 00       call        repro_Program____Main___g__Recursive_0_0\u003cSystem___Canon\u003e (07FF6575BE860h)  \r\n```\r\n\r\nThen within the method body of Recursive we do this:\r\n\r\n```\r\n00007FF6575BE860 48 83 EC 28          sub         rsp,28h  \r\n00007FF6575BE864 48 89 4C 24 20       mov         qword ptr [rsp+20h],rcx  \r\n\r\n// Dereference the first pointer within the \"secret parameter\" to obtain a descriptor that provides identity for Recursive\u003cList\u003cT\u003e\u003e\r\n00007FF6575BE869 48 8B 09             mov         rcx,qword ptr [rcx]  \r\n00007FF6575BE86C E8 EF FF FF FF       call        repro_Program____Main___g__Recursive_0_0\u003cSystem___Canon\u003e (07FF6575BE860h)  \r\n\r\n00007FF6575BE871 90                   nop  \r\n00007FF6575BE872 48 83 C4 28          add         rsp,28h  \r\n00007FF6575BE876 C3                   ret  \r\n```\r\n\r\nNotice that because the first data structure existed statically in the executable, the second needs to exist there too. From that it follows that we also need the third, fourth, etc.\r\n\r\nThis issue tracks generating a less efficient code when this situation is hit so that instead of aborting with `IL3054` we could generate less efficient code that makes this possible (we\u0027d need to replace the direct dereference done in Recursive for hashtable lookup that can build the new data structure at runtime on demand, basically).\r\n\r\nHowever if/when we fix this, we\u0027d just replace IL3054 with a different warning code because the user is getting worse code than what a JIT would generate. There would still be a warning and the pattern would still be AOT unfriendly.\r\n\r\nI agree it\u0027s a widespread problem in functional libraries. Most functional libraries only work well if a JIT is available - AOT is not the right deployment option for them. They already cause problems for PublishReadyToRun (e.g. #66079), even though PublishReadyToRun has a lot more leeway than PublishAot.",
                                           "updatedAt":  "2023-07-19T03:37:29Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Generic recursion and generic dictionaries",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85806",
        "createdAt":  "2023-05-05T02:23:24Z",
        "number":  85806,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1lPuQ==",
                          "nodes":  [
                                        {
                                            "content":  "HOORAY",
                                            "user":  "ShreyasJejurkar",
                                            "createdAt":  "2023-05-05T16:43:01Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "eerhardt",
                                            "createdAt":  "2023-05-05T17:06:05Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "filipnavara",
                                            "createdAt":  "2023-05-06T07:59:11Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Wenveo",
                                            "createdAt":  "2023-07-04T17:36:49Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Sergio0694",
                                            "createdAt":  "2024-02-01T14:20:10Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2024-02-12T20:56:30Z",
        "body":  "MSTAT has been useful to troubleshoot size. Several repos now parse MSTAT to track size:\r\n\r\n* .NET Performance repo\r\n* ASP.NET crank benchmarks repo\r\n* Npgsql\r\n\r\nMight be more I don\u0027t know about. It is likely more will follow.\r\n\r\nMstat is currently exposed as an undocumented switch. Should we formalize this more?\r\n\r\nThe \"productization\" questions are:\r\n\r\n- [ ] Document the format and way to parse it in a versionable manner\r\n- [ ] Have an \"official\" parser NuGet. Maybe on a similar plan as ILCompiler.Reflection.ReadyToRun which is a ReadyToRun parser exposed on a \"best effort\" basis (doesn\u0027t go through API review process and we may make breaking changes, but we try to avoid them)\r\n- [ ] Expose as an unprefixed/supported switch (this may include changing IlcGenerateMstatFile from a boolean true/false to something that forces one to specify file name - looking for the file currently involves a heuristic search in `\\obj`)\r\n\r\nWe can choose to not address all (or any) of these.\r\n\r\nCc @dotnet/ilc-contrib @eerhardt for thoughts/opinions",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOW6VqXA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5bh6ap",
                                           "createdAt":  "2023-05-05T02:23:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nMSTAT has been useful to troubleshoot size. Several repos now parse MSTAT to track size:\r\n\r\n* .NET Performance repo\r\n* ASP.NET crank benchmarks repo\r\n* Npgsql\r\n\r\nMight be more I don\u0027t know about. It is likely more will follow.\r\n\r\nMstat is currently exposed as an undocumented switch. Should we formalize this more?\r\n\r\nThe \"productization\" questions are:\r\n\r\n- [ ] Document the format and way to parse it in a versionable manner\r\n- [ ] Have an \"official\" parser NuGet. Maybe on a similar plan as ILCompiler.Reflection.ReadyToRun which is a ReadyToRun parser exposed on a \"best effort\" basis (doesn\u0027t go through API review process and we may make breaking changes, but we try to avoid them)\r\n- [ ] Expose as an unprefixed/supported switch (this may include changing IlcGenerateMstatFile from a boolean true/false to something that forces one to specify file name - looking for the file currently involves a heuristic search in `\\obj`)\r\n\r\nWe can choose to not address all (or any) of these.\r\n\r\nCc @dotnet/ilc-contrib @eerhardt for thoughts/opinions\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-05T02:23:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bi4dd",
                                           "createdAt":  "2023-05-05T07:51:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7MHSQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ShreyasJejurkar",
                                                                               "createdAt":  "2023-05-05T16:43:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "To me the priority order is:\r\n- Have a parser which others can use relatively easily - I don\u0027t know about official, but if we have a way to publish a package without all of the \"support\" promises, that sounds like a good option.\r\n- Expose a switch, might as well be supported\r\n- Document the format - to me this is the least important, since I think most potential users of this don\u0027t care about the actual format, just a way to consume the data - thus the parser feels more important.\r\n\r\nOverall I think it\u0027s a good idea to have this, but I think we should be very intentional about us potentially breaking the format going forward. I don\u0027t think the value of this outweighs the complexity of maintaining strict backward compatibility around it.",
                                           "updatedAt":  "2023-05-05T07:51:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5blels",
                                           "createdAt":  "2023-05-05T17:15:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "I agree with @vitek-karas that having a dedicated parser library makes the most sense. I don\u0027t think it needs to go through API review or have the same restrictions as the normal `src\\libraries` libraries. Maybe we don\u0027t even publish it to nuget.org to start - but instead just the daily feeds like https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8/nuget/v3/index.json. And direct people to that feed if they want to consume it.\r\n\r\n\u003e Expose as an unprefixed/supported switch\r\n\r\nIs our heuristic/rule that anything prefixed with `Ilc` is an \"unsupported\" switch? I don\u0027t think that is obvious to typical .NET developers. The general rule in MSBuild is to prefix unsupported switches with `_`. For example in https://learn.microsoft.com/en-us/archive/msdn-magazine/2009/february/msbuild-best-practices-for-creating-reliable-builds-part-1\r\n\r\n\u003e\u003e When you create items and properties, the convention is to start the name for \"internal\" values with an underscore. Items and properties whose names do not start with an underscore indicate to users that they are free to override them.",
                                           "updatedAt":  "2023-05-05T17:15:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bpWpc",
                                           "createdAt":  "2023-05-07T23:31:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I think the ILCompiler.Reflection.ReadyToRun model I mentioned in the top post would be the best to follow: it is a NuGet package that is in the same repo as the ReadyToRun format generator (so it\u0027s easy to keep it in sync), and we don\u0027t follow a rigid API review process around it because it\u0027s provided as-is.\r\n\r\n\u003e Is our heuristic/rule that anything prefixed with `Ilc` is an \"unsupported\" switch? I don\u0027t think that is obvious to typical .NET developers. The general rule in MSBuild is to prefix unsupported switches with `_`.\r\n\r\nUnderscore didn\u0027t feel appropriate because we want people to be able to override them (that\u0027s why they\u0027re there - the underscored ones are typically set in props/targets and then read later - our `Ilc` ones are typically not set anywhere). But they\u0027re not documented on learn.microsoft.com or in MSBuild schema and we\u0027re not going to do a breaking change notice if we ever break them. Most of them were inherited from the runtimelab/CoreRT repo where any sort of distinction didn\u0027t make sense.",
                                           "updatedAt":  "2023-05-07T23:31:02Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Productize MSTAT files",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86083",
        "createdAt":  "2023-05-11T05:27:01Z",
        "number":  86083,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC75ewg==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "sweemer",
                                            "createdAt":  "2024-10-17T01:34:48Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-02-28T11:55:14Z",
        "body":  "We currently compile unmanaged portions of the runtime without LTO or PGO because the runtime is placed in an .a file that gets linked using an unknown linker that exists on the user machine. LTO requires a linker that knows how to interpret the bitcode in non-ELF object files.\r\n\r\nWe can however apply LTO on .a files. See David\u0027s prototype at https://gist.github.com/davidwrighton/385035ffd24b88c39c2e7d5cf0274907.\r\n\r\nHow to use from David:\r\n\r\n\u003e First, compile FileA.o and FileB.o which were compiled via command lines like:\r\n\u003e clang -O3 -flto -c FileB.c\r\n\u003e clang -O3 -flto -c FileA.c\r\n\u003e \r\n\u003e Those commands produce FileA.o, and FileB.o which are NOT ELF object files, but instead are the Bitcode file format.\r\n\u003e \r\n\u003e Then run a command line like…\r\n\u003e LtoOptimize  --plugin /usr/lib/llvm-14/lib/libLTO.so -o FileA.o -o FileB.o -O Optimized.o --symbol=CanOnlyAlwaysReturn2WithLTO\r\n\u003e \r\n\u003e and produce an ELF file Optimized.o that has a function CanOnlyAlwaysReturn2WithLTO which was optimized in a manner which requires LTO to produce optimal output.\r\n\u003e \r\n\u003e I also added the ability to dump the set of symbol names in FileA and FileB, as well as the ability to compile ALL symbols from both FileA and FileB.\r\n\r\n\r\nSo the theory is that we could:\r\n\r\n1. Build the unmanaged portion of the runtime with LTO enabled.\r\n2. Run a tool similar to the one from the gist to perform LTO on the library and produce an optimized .o file\r\n3. Pack the .o back into an .a (now .a like any other, with no bitcode)\r\n4. Profit\r\n\r\nWe\u0027d need to measure if this is indeed profitable and worth the engineering costs. Success not guaranteed. Might be better to first just enable LTO locally and use a linker that can handle it E2E (i.e. turn on LTO and compile with ILC as usual, expecting the linker step to do the LTO) and get some measurements. GC perf would be the most interesting to measure, so do something that stresses the GC and measure with/without LTO.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdVnikQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5b_cuA",
                                           "createdAt":  "2023-05-11T05:27:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe currently compile unmanaged portions of the runtime without LTO or PGO because the runtime is placed in an .a file that gets linked using an unknown linker that exists on the user machine. LTO requires a linker that knows how to interpret the bitcode in non-ELF object files.\r\n\r\nWe can however apply LTO on .a files. See David\u0027s prototype at https://gist.github.com/davidwrighton/385035ffd24b88c39c2e7d5cf0274907.\r\n\r\nHow to use from David:\r\n\r\n\u003e First, compile FileA.o and FileB.o which were compiled via command lines like:\r\n\u003e clang -O3 -flto -c FileB.c\r\n\u003e clang -O3 -flto -c FileA.c\r\n\u003e \r\n\u003e Those commands produce FileA.o, and FileB.o which are NOT ELF object files, but instead are the Bitcode file format.\r\n\u003e \r\n\u003e Then run a command line like…\r\n\u003e LtoOptimize  --plugin /usr/lib/llvm-14/lib/libLTO.so -o FileA.o -o FileB.o -O Optimized.o --symbol=CanOnlyAlwaysReturn2WithLTO\r\n\u003e \r\n\u003e and produce an ELF file Optimized.o that has a function CanOnlyAlwaysReturn2WithLTO which was optimized in a manner which requires LTO to produce optimal output.\r\n\u003e \r\n\u003e I also added the ability to dump the set of symbol names in FileA and FileB, as well as the ability to compile ALL symbols from both FileA and FileB.\r\n\r\n\r\nSo the theory is that we could:\r\n\r\n1. Build the unmanaged portion of the runtime with LTO enabled.\r\n2. Run a tool similar to the one from the gist to perform LTO on the library and produce an optimized .o file\r\n3. Pack the .o back into an .a (now .a like any other, with no bitcode)\r\n4. Profit\r\n\r\nWe\u0027d need to measure if this is indeed profitable and worth the engineering costs. Success not guaranteed. Might be better to first just enable LTO locally and use a linker that can handle it E2E (i.e. turn on LTO and compile with ILC as usual, expecting the linker step to do the LTO) and get some measurements. GC perf would be the most interesting to measure, so do something that stresses the GC and measure with/without LTO.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`help wanted`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-11T05:27:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51WeKR",
                                           "createdAt":  "2024-02-28T11:55:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODYlpYg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "MichalPetryka",
                                                                               "createdAt":  "2024-02-28T12:02:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I did a local experiment where I simply passed `-flto` to the runtime build and also to the linker invocation at publish time.\r\n\r\nFor TodosApi the improvement would be about 1% in RPS and a small improvement to latency as well.\r\n\r\nIn theory, this could also be addressed with #83611.\r\n\r\n  | Before 1 | Before 2 | Before 3 | Before 4 | After 1 | After 2 | After 3 | After 4\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\nRequests/sec | 210,819 | 213,503 | 210,256 | 209,506 | 218,472 | 211,535 | 212,683 | 211,815\r\nMean latency (ms) | 1.36 | 1.34 | 1.36 | 1.38 | 1.31 | 1.36 | 1.34 | 1.36\r\nMax latency (ms) | 21.05 | 28.89 | 25.83 | 30.28 | 24.52 | 27.99 | 25.17 | 24.58\r\nMax Time in GC (%) | 19 | 18 | 19 | 17 | 18 | 19 | 18 | 19\r\nMax Working Set (MB) | 95 | 98 | 101 | 100 | 102 | 101 | 93 | 97\r\n\r\n\r\n",
                                           "updatedAt":  "2024-02-28T11:55:13Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[NativeAOT] Link-time-optimize unmanaged portions of the runtime on Linux",
        "labels":  [
                       "help wanted",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87060",
        "createdAt":  "2023-06-02T14:30:08Z",
        "number":  87060,
        "author":  "ivanpovazan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-22T00:22:42Z",
        "body":  "### Description\r\n\r\nCurrently when targeting iOS-like platforms with NativeAOT, the build process will also download the host\u0027s runtime package (`osx`), even though it is unused. \r\nApart from that, workloads that want to integrate with NativeAOT need to take into account the opt-in property: `PublishAotUsingRuntimePack` introduced here: https://github.com/dotnet/sdk/pull/32100\r\n\r\nTo improve the cross-compilation and integration experience further, all host/target platforms should be supported in the same fashion producing two nuget packages:\r\n- [host] `Microsoft.DotNet.ILCompiler` - carrying only the tools and build integration targets\r\n- [target] `Microsoft.NETCore.App.Runtime.NativeAOT.\u003cos\u003e-\u003carch\u003e` - carrying target runtime and framework libraries\r\nThe need for `PublishAotUsingRuntimePack` would become redundant.\r\n\r\nThis should be an extension to: https://github.com/dotnet/runtime/pull/85047 where NativeAOT runtime packs are initially supported only for iOS/tvOS/Catalyst target platforms.\r\n\r\n### Note\r\n\r\nThis should also simplify and improve the way packages are built.\r\nFor example, in order to build all the required packages to build an `ios` application with NativeAOT:\r\n1. The following subsets are required to build `Microsoft.DotNet.ILCompiler` package for the host - `osx`\r\n```bash\r\n./build.sh clr+clr.aot+libs+packs\r\n```\r\n2. The following subsets are required `Microsoft.NETCore.App.Runtime.NativeAOT.ios-arm64` package for the target - `ios`: \r\n```bash\r\n./build.sh clr.nativeaotlibs+clr.nativeaotruntime+libs+packs /p:BuildNativeAOTRuntimePack=true\r\n```\r\nwhich involves long build times and building unnecessary components.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuMdqfQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5dztJt",
                                           "createdAt":  "2023-06-02T14:30:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nCurrently when targeting iOS-like platforms with NativeAOT, the build process will also download the host\u0027s runtime package (`osx`), even though it is unused. \r\nApart from that, workloads that want to integrate with NativeAOT need to take into account the opt-in property: `PublishAotUsingRuntimePack` introduced here: https://github.com/dotnet/sdk/pull/32100\r\n\r\nTo improve the cross-compilation and integration experience further, all host/target platforms should be supported in the same fashion producing two nuget packages:\r\n- [host] `Microsoft.DotNet.ILCompiler` - carrying only the tools and build integration targets\r\n- [target] `Microsoft.NETCore.App.Runtime.NativeAOT.\u003cos\u003e-\u003carch\u003e` - carrying target runtime and framework libraries\r\nThe need for `PublishAotUsingRuntimePack` would become redundant.\r\n\r\nThis should be an extension to: https://github.com/dotnet/runtime/pull/85047 where NativeAOT runtime packs are initially supported only for iOS/tvOS/Catalyst target platforms.\r\n\r\n### Note\r\n\r\nThis should also simplify and improve the way packages are built.\r\nFor example, in order to build all the required packages to build an `ios` application with NativeAOT:\r\n1. The following subsets are required to build `Microsoft.DotNet.ILCompiler` package for the host - `osx`\r\n```bash\r\n./build.sh clr+clr.aot+libs+packs\r\n```\r\n2. The following subsets are required `Microsoft.NETCore.App.Runtime.NativeAOT.ios-arm64` package for the target - `ios`: \r\n```bash\r\n./build.sh clr.nativeaotlibs+clr.nativeaotruntime+libs+packs /p:BuildNativeAOTRuntimePack=true\r\n```\r\nwhich involves long build times and building unnecessary components.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eivanpovazan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`os-ios`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-02T14:30:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hL-A-",
                                           "createdAt":  "2023-07-11T09:57:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "@akoeplinger do you think we can close #67080 in favor of this issue? It looks like they\u0027re both about the same thing, but this one has a more clear implementation approach.",
                                           "updatedAt":  "2023-07-11T09:57:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wG6uJ",
                                           "createdAt":  "2024-01-08T11:56:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "The last thing that\u0027s left is unconditionally enabling `PublishAotUsingRuntimePack` in for net9.0 TFMs in the SDK. We can remove the SDK/frameworks from the ILCompiler packages then.",
                                           "updatedAt":  "2024-01-08T11:56:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wG9BA",
                                           "createdAt":  "2024-01-08T12:03:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODRl5rw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2024-01-08T12:16:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e The last thing that\u0027s left is unconditionally enabling `PublishAotUsingRuntimePack` in for net9.0 TFMs in the SDK. We can remove the SDK/frameworks from the ILCompiler packages then.\r\n\r\nOne thing I would like to understand is how does it affect debugging. In the existing scheme, the PDBs (both for managed code and for the native parts on Windows) are part of the shipping package. In the new scheme, I see that they\u0027re extracted to a separate .Symbols package. Can ILC/link.exe see those?",
                                           "updatedAt":  "2024-01-08T12:03:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wHC97",
                                           "createdAt":  "2024-01-08T12:19:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "\u003e The last thing that\u0027s left is unconditionally enabling PublishAotUsingRuntimePack in for net9.0 TFMs in the SDK. We can remove the SDK/frameworks from the ILCompiler packages then.\r\n \r\nJust for the clarification, did you mean that we would remove the said property?",
                                           "updatedAt":  "2024-01-08T12:19:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wHN1K",
                                           "createdAt":  "2024-01-08T12:45:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODRoTTQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2024-01-08T16:46:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e did you mean that we would remove the said property?\r\n\r\nI am not sure how the SDK versioning works, so we may need to keep it to allow building net8.0-XXX TFM with net9 SDK.",
                                           "updatedAt":  "2024-01-08T12:45:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wJIoy",
                                           "createdAt":  "2024-01-08T16:41:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "I might be wrong, but I think we are using the currently installed SDK\u0027s version of `Microsoft.NET.Build.Tasks.dll` even when targeting older framework versions. So I think removing the references `PublishAotUsingRuntimePack` introduced in https://github.com/dotnet/sdk/pull/32100 would be good enough. /cc: @akoeplinger  ",
                                           "updatedAt":  "2024-01-08T16:41:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wOnH0",
                                           "createdAt":  "2024-01-09T11:13:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODRv5Yg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2024-01-09T11:42:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2024-01-09T12:29:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "\u003e One thing I would like to understand is how does it affect debugging. In the existing scheme, the PDBs (both for managed code and for the native parts on Windows) are part of the shipping package. In the new scheme, I see that they\u0027re extracted to a separate .Symbols package. Can ILC/link.exe see those?\r\n\r\n@MichalStrehovsky it should work the same way as when publishing a self-contained CoreCLR app. The symbols are ingested into the Microsoft Symbol Server during the official build / release. When debugging Visual Studio downloads them from there or you can use the `dotnet-symbol` tool to manually download them. Or do you need the symbols during ILC time?\r\n\r\n\u003e So I think removing the references PublishAotUsingRuntimePack introduced in https://github.com/dotnet/sdk/pull/32100 would be good enough\r\n\r\nKind of, we\u0027d need to keep the property to opt in a .NET 8 app when building from a 9 SDK. I think it is easier if we just default it to true for TF \u003e= 9",
                                           "updatedAt":  "2024-01-09T11:13:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wOrxl",
                                           "createdAt":  "2024-01-09T11:27:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Or do you need the symbols during ILC time?\r\n\r\nYes, that. ILC picks up managed debug info and produces native debug info out of that. This gets passed to the platform linker that produces the final debug info. On Windows, we also need the pdb for obj/lib files (they are separate from object files on Windows).",
                                           "updatedAt":  "2024-01-09T11:27:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wO5PW",
                                           "createdAt":  "2024-01-09T12:06:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "Ok, looks like there\u0027s an option called `IncludeSymbolsInPackage` which Microsoft.DotNet.ILCompiler.pkgproj already sets so we just need to set that on the runtime pack project.",
                                           "updatedAt":  "2024-01-09T12:06:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wPFpK",
                                           "createdAt":  "2024-01-09T12:42:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "Turned out that `IncludeSymbolsInPackage` only works for .pkgproj, but the runtime packs use .sfxproj so I found another solution: https://github.com/dotnet/runtime/pull/96675",
                                           "updatedAt":  "2024-01-09T12:42:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EVrd4",
                                           "createdAt":  "2024-07-10T11:30:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpIt6g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2024-07-10T11:43:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Can\u0027t really do much about this due to reasons discussed in https://github.com/dotnet/sdk/pull/37872#issuecomment-2051295758.\r\n\r\nWe can\u0027t make progress on this until running the Publish target without also setting `_IsPublishing` to true doesn\u0027t become an error. I\u0027m moving this to .NET 10. VS should soon start setting _IsPublishing when doing a publish from the UI so maybe it becomes more feasible then.",
                                           "updatedAt":  "2024-07-10T11:30:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61plcO",
                                           "createdAt":  "2025-07-08T06:44:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Frulfump",
                                           "body":  "Oh this was moved to the Future milestone without a comment providing rationale?",
                                           "updatedAt":  "2025-07-08T06:44:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64x2p9",
                                           "createdAt":  "2025-07-22T00:22:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbcoRw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Frulfump",
                                                                               "createdAt":  "2025-07-22T11:43:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hez2010",
                                           "body":  "\u003e Oh this was moved to the Future milestone without a comment providing rationale?\n\nThe .NET 10 development cycle is nearing completion, so any features unlikely to make it into this release will be deferred to future versions.",
                                           "updatedAt":  "2025-07-22T00:22:42Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "[NativeAOT] Extend the runtime pack approach to all supported platforms",
        "labels":  [
                       "os-ios",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87187",
        "createdAt":  "2023-06-06T19:10:01Z",
        "number":  87187,
        "author":  "ivanpovazan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-09T17:56:27Z",
        "body":  "## Description\r\n\r\nIn order to support targeting Apple platforms NativeAOT build targets need to be integrated with external build systems and bundlers like: \r\n- Xamarin.Sdk\r\n-  [AppleAppBuilder](https://github.com/dotnet/runtime/tree/10222f94e5d89b19959117dd9e5b8576ef63f878/src/tasks/AppleAppBuilder)\r\n\r\nTo achieve this, several project properties need to be set in the correct way and we are currently collecting all that is necessary to achieve the integration.\r\n\r\n- For example: in case of targeting an iOS application with NativeAOT (`PublishAot=true`) and integrating it with an external build pipeline, these are the properties that need to be set:\r\n\r\n    ```xml\r\n    \u003cPropertyGroup\u003e\r\n        \u003c!-- This works around an issue in NativeAOT: https://github.com/dotnet/runtime/issues/86186 --\u003e\r\n        \u003cIlcKeepManagedDebuggerSupport\u003etrue\u003c/IlcKeepManagedDebuggerSupport\u003e\r\n        \u003c!-- We must find the BCL libraries using the runtime pack instead of using the built-in NativeAOT BCL: https://github.com/dotnet/runtime/issues/87060 --\u003e\r\n        \u003cPublishAotUsingRuntimePack\u003etrue\u003c/PublishAotUsingRuntimePack\u003e\r\n        \u003c!-- Build as a static lib --\u003e\r\n        \u003cNativeLib\u003estatic\u003c/NativeLib\u003e \r\n        \u003c!-- Split init for the custom native host --\u003e\r\n        \u003cCustomNativeMain\u003etrue\u003c/CustomNativeMain\u003e\r\n        \u003c!-- Escape NativeAOT bundling targets --\u003e\r\n        \u003cNativeCompilationDuringPublish\u003efalse\u003c/NativeCompilationDuringPublish\u003e\r\n        \u003cIlcCompileDependsOn\u003eCompile;ComputeIlcCompileInputs;SetupOSSpecificProps;PrepareForILLink\u003c/IlcCompileDependsOn\u003e\r\n    \u003c/PropertyGroup\u003e\r\n    \u003cItemGroup\u003e\r\n        \u003cDirectPInvoke Include=\"__Internal\" /\u003e\r\n    \u003c/ItemGroup\u003e\r\n    ```\r\nNOTE: Please note that the list above is not complete, it merely lists the current workarounds to enable building an iOS application.\r\n\r\nTo improve the integration process and maintainability it would be beneficial to simplify the integration process when targeting Apple platforms with a single \"opt-in\" MSBuild property.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY9rFaQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5eIlW4",
                                           "createdAt":  "2023-06-06T19:10:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Description\r\n\r\nIn order to support targeting Apple platforms NativeAOT build targets need to be integrated with external build systems and bundlers like: \r\n- Xamarin.Sdk\r\n-  [AppleAppBuilder](https://github.com/dotnet/runtime/tree/10222f94e5d89b19959117dd9e5b8576ef63f878/src/tasks/AppleAppBuilder)\r\n\r\nTo achieve this, several project properties need to be set in the correct way.\r\n\r\n- For example: in case of targeting an iOS application with NativeAOT (`PublishAot=true`) and integrating it with an external build pipeline, these are the properties that need to be set:\r\n\r\n    ```xml\r\n    \u003c!-- This works around an issue in NativeAOT: https://github.com/dotnet/runtime/issues/86186 --\u003e\r\n    \u003cIlcKeepManagedDebuggerSupport\u003etrue\u003c/IlcKeepManagedDebuggerSupport\u003e\r\n    \u003c!-- We must find the BCL libraries using the runtime pack instead of using the built-in NativeAOT BCL: https://github.com/dotnet/runtime/issues/87060 --\u003e\r\n    \u003cPublishAotUsingRuntimePack\u003etrue\u003c/PublishAotUsingRuntimePack\u003e\r\n    \u003c!-- Build as a static lib --\u003e\r\n    \u003cNativeLib\u003estatic\u003c/NativeLib\u003e \r\n    \u003c!-- Split init for the custom native host --\u003e\r\n    \u003cCustomNativeMain\u003etrue\u003c/CustomNativeMain\u003e\r\n    \u003c!-- Escape NativeAOT bundling targets --\u003e\r\n    \u003cNativeCompilationDuringPublish\u003efalse\u003c/NativeCompilationDuringPublish\u003e\r\n    \u003cIlcCompileDependsOn\u003eCompile;ComputeIlcCompileInputs;SetupOSSpecificProps;PrepareForILLink\u003c/IlcCompileDependsOn\u003e\r\n    ```\r\n\r\nTo improve the integration process and maintainability it would be beneficial to simplify the integration process when targeting Apple platforms with a single \"opt-in\" MSBuild property.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eivanpovazan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`os-ios`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-06T19:10:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eL2He",
                                           "createdAt":  "2023-06-07T08:09:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I\u0027m not sure I understand the `IlcCompileDependsOn` and `NativeCompilationDuringPublish` parts. Is the intention that we would not run the Publish target when building for iOS?",
                                           "updatedAt":  "2023-06-07T08:09:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eL_pY",
                                           "createdAt":  "2023-06-07T08:35:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "\u003e I\u0027m not sure I understand the `IlcCompileDependsOn` and `NativeCompilationDuringPublish` parts. Is the intention that we would not run the Publish target when building for iOS?\r\n\r\nThese are just currently used workarounds to avoid build issues like:\r\n- In NativeAOT publish targets: `ComputeLinkedFilesToPublish` depends on `LinkNative`, while in iOS setup we would *want* to do our own native linking, so currently we would just turn it off\r\n- The following causes build errors: https://github.com/dotnet/runtime/blob/20ca966b59c96ddbc8ce6b2c6f415d9c93f2c49a/src/coreclr/nativeaot/BuildIntegration/Microsoft.NETCore.Native.Publish.targets#L52\r\n    - in the iOS build set up, the `OutputType` is `Exe` and we are compiling with `\u003cNativeLib\u003estatic\u003c/NativeLib\u003e` (this should probably include an additional condition like: `and \u0027$(CustomNativeMain)\u0027 != \u0027true\u0027` )\r\n- `CopyNativeBinary` fails as the binary ends up in the `.app` bundle\r\n- etc..\r\n\r\nTo summarize, I think I was not precise enough in the description of the issue (I will update it), as we are still collecting all that we would need for easier integration and the goal is to hopefully have this all accessible under a single switch. ",
                                           "updatedAt":  "2023-06-07T08:35:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eN2xD",
                                           "createdAt":  "2023-06-07T12:17:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e it would be beneficial to simplify the integration process when targeting Apple platforms with a single \"opt-in\" MSBuild property.\r\n\r\nI do not think that the settings are the only one right way to target Apple platforms. They are specific to Xamarin app-model. Other app models (e.g. Avalonia) may want to do the integration differently.\r\n\r\nWe try to avoid hardcoding app-model specific settings in the core runtime .target files. For example, we have the same relationship with ASP.NET app models: ASP.NET SDKs have number of custom overrides of the defaults. I think we should follow the same pattern for all appmodels/SDKs, including Xamarin.\r\n\r\nIt is fine to expose individual features in cleaner way to make the integration easier.",
                                           "updatedAt":  "2023-06-07T12:17:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eN9eR",
                                           "createdAt":  "2023-06-07T12:29:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC9eP6w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2023-06-07T12:42:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2023-06-08T14:43:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "\u003e It is fine to expose individual features in cleaner way to make the integration easier.\r\n\r\nIn particular having to set `IlcCompileDependsOn` seems like could be implemented in a better way.",
                                           "updatedAt":  "2023-06-07T12:29:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eTN5S",
                                           "createdAt":  "2023-06-08T08:03:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC-cPkw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2023-06-08T14:43:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rolfbjarne",
                                                                               "createdAt":  "2023-06-12T09:14:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2023-06-20T16:27:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "- `IlcKeepManagedDebuggerSupport` is fixed by https://github.com/dotnet/runtime/pull/87207.\r\n- `PublishAotUsingRuntimePack` will hopefully go away if we move everything to NativeAOT runtime packs ( https://github.com/dotnet/runtime/issues/87060)\r\n\r\nI feel the only fragile part is `IlcCompileDependsOn`, and the main reason why we need to fiddle with it is to allow running both ILLink and ILCompiler. While there are some discussions about avoiding that in the long-term I feel it would be useful to actually fix the scenario to be allowed. That would primarily mean allowing `RunILLink=true` opt-in [here](https://github.com/dotnet/runtime/blob/7c00b17be1b2ffb6ed49ad68cf36e9a056323152/src/coreclr/nativeaot/BuildIntegration/Microsoft.NETCore.Native.targets#L30), and implementing the logic to pass ILLink output to ILCompiler on dotnet/runtime or dotnet/sdk side. ",
                                           "updatedAt":  "2023-06-08T08:03:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fT17-",
                                           "createdAt":  "2023-06-20T15:37:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kotlarmilos",
                                           "body":  "\u003e In particular having to set `IlcCompileDependsOn` seems like could be implemented in a better way.\r\n\r\nWhile working on the runtime tests, I\u0027m exploring several ideas to address this issue:\r\n - One option is to parameterize the dependencies in Microsoft.NETCore.Native.Publish.targets and exclude the LinkNative target. However, this approach is similar to what has already been done.\r\n - Another option is to create an entry target that invokes both common and platform-specific targets.\r\n - We could also consider creating an abstract project with core targets, where each platform would then have its own project/targets that inherits the common targets and overall workflow.\r\n\r\n\u003e For example, we have the same relationship with ASP.NET app models: ASP.NET SDKs have number of custom overrides of the defaults. I think we should follow the same pattern for all appmodels/SDKs, including Xamarin.\r\n\r\nIt would be good to check out an example of the ASP.NET app models, so we can consider the existing approach.",
                                           "updatedAt":  "2023-06-20T15:40:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fXkkw",
                                           "createdAt":  "2023-06-21T03:21:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e In particular having to set IlcCompileDependsOn seems like could be implemented in a better way.\r\n\r\nWhat targets in Microsoft.NETCore.Native.Publish.targets are problematic? We could condition them on some property that the Xamarin props would set so that they don\u0027t interfere with how Xamarin wants to set up the flow of inputs/outputs.\r\n\r\nThe same with LinkNative - I\u0027d suggest looking into why it\u0027s even executed when we\u0027re not doing a publish. Eventually, we\u0027d want to split LinkNative into two targets - one that constructs the command line arguments we want to pass to the linker (so that the Xamarin targets can pick it up) and another one that actually runs linker (Xamarin would not participate in that).",
                                           "updatedAt":  "2023-06-21T03:21:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fbSKh",
                                           "createdAt":  "2023-06-21T14:52:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "\u003e \u003e In particular having to set IlcCompileDependsOn seems like could be implemented in a better way.\r\n\u003e \r\n\u003e What targets in Microsoft.NETCore.Native.Publish.targets are problematic? We could condition them on some property that the Xamarin props would set so that they don\u0027t interfere with how Xamarin wants to set up the flow of inputs/outputs.\r\n\u003e \r\n\u003e The same with LinkNative - I\u0027d suggest looking into why it\u0027s even executed when we\u0027re not doing a publish. Eventually, we\u0027d want to split LinkNative into two targets - one that constructs the command line arguments we want to pass to the linker (so that the Xamarin targets can pick it up) and another one that actually runs linker (Xamarin would not participate in that).\r\n\r\n\u003e I\u0027d suggest looking into why it\u0027s even executed when we\u0027re not doing a publish. \r\n\r\nNote that we\u0027re doing \"dotnet publish\".\r\n\r\nThe immediate result I get (with the changes in https://github.com/xamarin/xamarin-macios/pull/17374) if I set NativeCompilationDuringPublish=true is this:\r\n\r\n\u003e error MSB4006: There is a circular dependency in the target dependency graph involving target \"_ComputeLinkerArguments\". Since \"IlcCompile\" has \"DependsOn\" dependence on \"_ComputeLinkerArguments\", the circular is \"_ComputeLinkerArguments\u003c-IlcCompile\u003c-LinkNative\u003c-ComputeLinkedFilesToPublish\u003c-ComputeResolvedFilesToPublishList\u003c-_ComputeFrameworkAssemblies\u003c-_ComputeLinkerArguments\".\r\n\r\nLooks like that\u0027s because of:\r\n\r\nhttps://github.com/dotnet/runtime/blob/5b900dd43bb1568768d11712d842974da0f368e4/src/coreclr/nativeaot/BuildIntegration/Microsoft.NETCore.Native.Publish.targets#L20-L22\r\n\r\nwhere `Microsoft.NETCore.Native.Publish.targets` injects the ComputeLinkedFilesToPublish into the build chain, and indirectly LinkNative.\r\n\r\nSo here\u0027s problem 1: we don\u0027t want to execute NativeAOT\u0027s LinkNative target, because we\u0027re using the static library ILC creates, and not the final linked output.\r\n\r\nMaybe it would make sense to create a property the SDK could set to indicate that we only need the static library, and not the final linked result?\r\n",
                                           "updatedAt":  "2023-06-21T14:52:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fbqaa",
                                           "createdAt":  "2023-06-21T15:46:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Maybe it would make sense to create a property the SDK could set to indicate that we only need the static library, and not the final linked result?\r\n\r\nIt is what `\u003cNativeLib\u003eStatic\u003c/NativeLib\u003e` does today. It may need some tweaks so that it works well for Xamarin config.",
                                           "updatedAt":  "2023-06-21T15:46:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j2sVp",
                                           "createdAt":  "2023-08-11T19:40:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDbN7A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2023-08-11T19:42:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kotlarmilos",
                                           "body":  "There is more we can do to simplify the integration, so keeping this issue open.",
                                           "updatedAt":  "2023-08-11T19:40:22Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[NativeAOT] Simplify build integration with external bundlers for Apple platforms",
        "labels":  [
                       "os-ios",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87642",
        "createdAt":  "2023-06-15T20:05:04Z",
        "number":  87642,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-21T23:20:51Z",
        "body":  "The flag indicates that the compiled module is a singlefile executable and can drive some optimizations.\r\n\r\nSingle file executable is a common enough scenario that c++ compiler has a switch for it. ILC could benefit from such switch as well.\r\n\r\nRe: https://github.com/dotnet/runtime/pull/87148#discussion_r1226018085",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXz3S5Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5e_VDO",
                                           "createdAt":  "2023-06-15T20:05:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\nThe flag indicates that the compiled module is a singlefile executable and can drive some optimizations.\r\n\r\nSingle file executable is a common enough scenario that c++ compiler has a switch for it. ILC could benefit from such switch as well.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVSadov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-15T20:05:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fHOtL",
                                           "createdAt":  "2023-06-17T12:24:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NCLnclNCL",
                                           "body":  "\u003e The flag indicates that the compiled module is a singlefile executable and can drive some optimizations.\r\n\u003e \r\n\u003e Single file executable is a common enough scenario that c++ compiler has a switch for it. ILC could benefit from such switch as well.\r\n\u003e \r\n\u003e Re: [#87148 (comment)](https://github.com/dotnet/runtime/pull/87148#discussion_r1226018085)\r\n\r\nit will do reduce file size ??",
                                           "updatedAt":  "2023-06-17T12:24:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fPdLl",
                                           "createdAt":  "2023-06-19T23:59:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e it will do reduce file size ??\r\n\r\nYes. linker can replace more complex code for the dynamic case with more efficient instructions if it is known at link time that we are linking an executable. However, the size redundancy will still be there.\r\n\r\nThe size difference would vary between platforms. On some platforms like linux-x64 the size difference is relatively small, but on others it would be more noticeable: See for example https://github.com/dotnet/runtime/pull/87148#discussion_r1234559333",
                                           "updatedAt":  "2023-06-20T00:00:04Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[NativeAOT] Implement a compiler \"optimize for application\" switch analogous to /GA for MSVC",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88059",
        "createdAt":  "2023-06-26T18:36:03Z",
        "number":  88059,
        "author":  "LakshanF",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-02T22:02:41Z",
        "body":  "The events `GenAwareBegin` and `GenAwareEnd` help with [analyzing GC generation issues](https://cshung.github.io/posts/generation-aware-analysis/).\r\n\r\nCoreCLR has an [implementation](https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/gcenv.ee.cpp#L1626) and NativeAOT is [empty\r\n](https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/Runtime/gcrhenv.cpp#LL1310C23-L1310C47).\r\nBelow are some notes from @cshung related to the implementation,\r\n\r\nFrom an implementation perspective, here is what happens under the hood:\r\n\r\n1. During process startup, a few configuration variables are read. If the configuration implies we need to collect a trace, we will start an event pipe section, but pause it so that no events are written to that section.\r\n2. During GC, after the mark phase complete, we have some data that we wouldn’t have otherwise. For example, we know exactly how many bytes worth of objects are currently alive in the current generation. (In the GC speaks, we call these promoted bytes, because they are the bytes that get promoted to the next generation).\r\n3. Using that data, comparing with the configuration, we can detect if we are currently hitting the interesting scenario (e.g. the ephemeral leaking scenario in the blog), and so we trigger the data collection process in a blocking manner so that the heap won’t change.\r\n4. The data collection process could be either walking the heap and report the objects as traces through event pipe, or taking a heap dump, or both.\r\n5. In case we want the trace in step 4, we will first emit the GenAwareBegin event, then walk the heap, then emit the GenAwareEnd event, these events together delineate where the heap walk begins and ends.\r\n6. With those events, PerfView can detect the trace contains a GenAware heap collection, and it will be able to produce an analysis as the blog post shows.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOX9hbrA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5f2Fus",
                                           "createdAt":  "2023-06-26T18:36:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe events `GenAwareBegin` and `GenAwareEnd` help with [analyzing GC generation issues](https://cshung.github.io/posts/generation-aware-analysis/).\r\n\r\nCoreCLR has an [implementation](https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/gcenv.ee.cpp#L1626) and NativeAOT is [empty\r\n](https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/Runtime/gcrhenv.cpp#LL1310C23-L1310C47).\r\nBelow are some notes from @cshung related to the implementation,\r\n\r\nFrom an implementation perspective, here is what happens under the hood:\r\n\r\n1. During process startup, a few configuration variables are read. If the configuration implies we need to collect a trace, we will start an event pipe section, but pause it so that no events are written to that section.\r\n2. During GC, after the mark phase complete, we have some data that we wouldn’t have otherwise. For example, we know exactly how many bytes worth of objects are currently alive in the current generation. (In the GC speaks, we call these promoted bytes, because they are the bytes that get promoted to the next generation).\r\n3. Using that data, comparing with the configuration, we can detect if we are currently hitting the interesting scenario (e.g. the ephemeral leaking scenario in the blog), and so we trigger the data collection process in a blocking manner so that the heap won’t change.\r\n4. The data collection process could be either walking the heap and report the objects as traces through event pipe, or taking a heap dump, or both.\r\n5. In case we want the trace in step 4, we will first emit the GenAwareBegin event, then walk the heap, then emit the GenAwareEnd event, these events together delineate where the heap walk begins and ends.\r\n6. With those events, PerfView can detect the trace contains a GenAware heap collection, and it will be able to produce an analysis as the blog post shows.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-26T18:36:11Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Implement generational aware analysis GC events",
        "labels":  [
                       "EventPipe",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88076",
        "createdAt":  "2023-06-27T00:28:13Z",
        "number":  88076,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-27T17:12:15Z",
        "body":  "Discussed in https://github.com/dotnet/runtimelab/pull/1719#issuecomment-966917218. Related to #87642.\r\n\r\nWe currently need to stash parameters in `RhpNewFast` and friends (and `RhpPInvoke` and friends) because we don\u0027t know if `INLINE_GETTHREAD` is going to make a call on Unix-like systems. These methods get called a lot so it\u0027s possible making them faster would amount to more than just noise.\r\n\r\nCc @VSadov ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOX_V11w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5f4Cme",
                                           "createdAt":  "2023-06-27T00:28:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nDiscussed in https://github.com/dotnet/runtimelab/pull/1719#issuecomment-966917218. Related to #87642.\r\n\r\nWe currently need to stash parameters in `RhpNewFast` and friends (and `RhpPInvoke` and friends) because we don\u0027t know if `INLINE_GETTHREAD` is going to make a call on Unix-like systems. These methods get called a lot so it\u0027s possible making them faster would amount to more than just noise.\r\n\r\nCc @VSadov \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-27T00:28:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5f4OZA",
                                           "createdAt":  "2023-06-27T01:37:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC_I0nw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "neon-sunset",
                                                                               "createdAt":  "2023-06-27T01:48:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Once we can know that we build an exe, using IE mode in these helpers would be an interesting possibility. \r\n\r\nIn long term we could even teach JIT to inline RhpNewFast sometimes. It is really just a TLS access, range check and a pointer increment.",
                                           "updatedAt":  "2023-06-27T01:46:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5f4Sxy",
                                           "createdAt":  "2023-06-27T02:02:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Once we can know that we build an exe, using IE mode in these helpers would be an interesting possibility.\r\n\r\nWe know we\u0027re building an EXE in the MSBuild targets already - this work is basically about:\r\n\r\n* Placing these helpers into a separate static library (something that is not libRuntime.WorkstationGC.a),\r\n* building two variants of this static library (optimized and unoptimized), and\r\n* passing the extra library to the linker from MSBuild targets, selecting the right one based on OutputType=Exe",
                                           "updatedAt":  "2023-06-27T02:02:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5f4gyw",
                                           "createdAt":  "2023-06-27T02:46:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Can we use the same static library with both kinds of methods (they are relatively small) and  pass one or another kind to the JIT?",
                                           "updatedAt":  "2023-06-27T02:46:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5f4hsT",
                                           "createdAt":  "2023-06-27T02:49:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Can we use the same static library with both kinds of methods (they are relatively small) and pass one or another kind to the JIT?\r\n\r\nWe also reference these from corelib using the symbolic name. It\u0027s not impossible, just more complicated to do that way.",
                                           "updatedAt":  "2023-06-27T02:49:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5f9C3F",
                                           "createdAt":  "2023-06-27T16:15:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e In long term we could even teach JIT to inline RhpNewFast sometimes. It is really just a TLS access, range check and a pointer increment.\r\n\r\nWould be nice to have that for CoreCLR too 🙂 But presumably the whole body of the allocator should be in an no-gc block",
                                           "updatedAt":  "2023-06-27T16:15:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5f9XXX",
                                           "createdAt":  "2023-06-27T17:12:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC_OB2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2023-06-27T17:13:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e But presumably the whole body of the allocator should be in an no-gc block\r\n\r\nThe part from fetching the allocation buffer pointers and up to setting the method table must be GC-atomic (not have safe points). Because if GC happens it will assume that the consumed portion of the buffer is walkable. Also the buffer may no longer exist after GC finishes.  \r\nThere are no calls in this sequence though, so it will naturally be no-GC in partially interruptible code, which is the majority.\r\n\r\nIt would be ok to not inline in fully-interruptible methods, if that makes it simpler. Also ok to not inline when some heuristics might decide this is unprofitable.",
                                           "updatedAt":  "2023-06-27T17:12:15Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Use Initial Executable optimization within native runtime",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88087",
        "createdAt":  "2023-06-27T11:40:30Z",
        "number":  88087,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:19:44Z",
        "body":  "With NativeAOT it\u0027s more likely that there will be multiple runtimes in one process. For the most part this should work, but the IPC created by EventPipe is a process wide resource. We should define and implement the desired behavior.\r\n\r\nMy opinion:\r\n- It should be possible to host multiple NativeAOT runtimes in a single process, with degraded diagnostics experience.\r\n- One such solution would be that the component disables EventPipe during build, in which case it should just work\r\n- I think it would be good that it still works even if EventPipe is enabled during build, it would simply \"disable\" itself if the IPC is already created by something else in the process. Effectively implementing a first one wins strategy.\r\n\r\n@LakshanF ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOloFyLA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5f7G1L",
                                           "createdAt":  "2023-06-27T11:40:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWith NativeAOT it\u0027s more likely that there will be multiple runtimes in one process. For the most part this should work, but the IPC created by EventPipe is a process wide resource. We should define and implement the desired behavior.\r\n\r\nMy opinion:\r\n- It should be possible to host multiple NativeAOT runtimes in a single process, with degraded diagnostics experience.\r\n- One such solution would be that the component disables EventPipe during build, in which case it should just work\r\n- I think it would be good that it still works even if EventPipe is enabled during build, it would simply \"disable\" itself if the IPC is already created by something else in the process. Effectively implementing a first one wins strategy.\r\n\r\n@LakshanF \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-27T11:40:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_VHDR",
                                           "createdAt":  "2024-05-28T22:59:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LakshanF",
                                           "body":  "We have a first win strategy in place right now after #91715. Our guidance for `EventSource/EventPipe` with native AOT shared libraries is as follows\r\n- Only use the `EventSourceSupport` enabled when troubleshooting a specific issue related to shared libraries.\r\n- Any native AOT console with `EventSourceSupport` enabled will always win even if the process has other native AOT shared libraries with `EventSourceSupport` enabled.\r\n- If there are multiple native AOT shared libraries present in a single process, then the first shared library that gets loaded will `win` to emit traces. Traces from other libraries will not be seen.\r\n- [Windows] When collecting tracing in a shared library, collection should stop earlier in the application (only collect for a specific time period or use the ctrl-C option with a tool like dotnet-trace when the interesting traces are collected). Specifically, in windows, the image unload event for a shared library (or at process exit), will not make a call to shut down the `EventPipe` in an orderly manner, causing a corrupted trace file.\r\n\r\nGiven these challenges, it\u0027s probably best to keep the current warnings we have for shared library around `EventSource` support.",
                                           "updatedAt":  "2024-05-29T15:16:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_WXpS",
                                           "createdAt":  "2024-05-29T05:53:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Before closing this out, we should make sure there is a test ensuring the first win strategy works and we don\u0027t get e.g. a bad crash (now, or in the future).",
                                           "updatedAt":  "2024-05-29T05:53:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WgAGa",
                                           "createdAt":  "2024-12-07T06:40:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "Hey, I\u0027m trying to use a NativeAOT library with EventSource and discovered this issue, as I\u0027m encountering some related problems:\n\n1. While prototyping a .NET 8 NativeAOT library on macOS with `EventSourceSupport` enabled, I\u0027m not able to make it work. It doesn\u0027t create for example a file in `$TMPDIR/dotnet-diagnostic-{pic}-...etc.`. Is there something special to do?\n2. Regarding:\n   \u003e Any native AOT console with EventSourceSupport enabled will always win even if the process has other native AOT shared libraries with EventSourceSupport enabled.\n   \n   What is exactly the problem here? If, when loading my library, I temporarily redirect the TMPDIR to a different folder (so that the socket file is created in a different location), shouldn\u0027t this allow to have multiple unix socket domain opened?",
                                           "updatedAt":  "2024-12-07T06:40:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WgXIs",
                                           "createdAt":  "2024-12-07T10:36:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e While prototyping a .NET 8 NativeAOT library on macOS with EventSourceSupport enabled, I\u0027m not able to make it work. It doesn\u0027t create for example a file in $TMPDIR/dotnet-diagnostic-{pic}-...etc.. Is there something special to do?\n\nActually, I double checked. And it is working. What I hit was the restriction on path length limit for the socket (seems to be 108) as I was appending a subfolder to TMPDIR.\n\n\u003e What is exactly the problem here? If, when loading my library, I temporarily redirect the TMPDIR to a different folder (so that the socket file is created in a different location), shouldn\u0027t this allow to have multiple unix socket domain opened?\n\nSo after checking, changing TMPDIR makes it possible for me to connect to both ports. So my proposal in #110473 should help to mitigate such issue.",
                                           "updatedAt":  "2024-12-07T10:38:38Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Define and implement behavior of NativeAOT EventPipe IPC if there\u0027s already another runtime in the process",
        "labels":  [
                       "EventPipe",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88292",
        "createdAt":  "2023-07-02T06:45:31Z",
        "number":  88292,
        "author":  "filipnavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T17:53:43Z",
        "body":  "On macOS the unwind information is stored as the compact unwinding encoding and the DWARF EH encoding. The compact unwinding serves as a lookup table to the DWARF section (if the whole unwinding cannot be expressed using compact code, which NativeAOT doesn\u0027t currently produce). The \"hint offset\" into the DWARF table is 24-bit on both ARM64 and x64. Turns out, if the offset is longer, then it gets silently truncated and results in incorrect pointers into the DWARF section. This in turn results in unwinding not working properly and app freeze due to live lock between stuck `FindMethodInfo` and GC suspensions.\r\n\r\nExample stack trace:\r\n```\r\n  * frame #0: 0x0000000100120694 eM Client`libunwind::CFI_Parser\u003clibunwind::LocalAddressSpace\u003e::parseCIE(libunwind::LocalAddressSpace\u0026, unsigned long, libunwind::CFI_Parser\u003clibunwind::LocalAddressSpace\u003e::CIE_Info*) at AddressSpace.hpp:0 [opt]\r\n    frame #1: 0x0000000100120684 eM Client`libunwind::CFI_Parser\u003clibunwind::LocalAddressSpace\u003e::parseCIE(addressSpace=0x000000010e9c57f8, cie=4460851648, cieInfo=0x0000000175a21ad8) at DwarfParser.hpp:371:5 [opt]\r\n    frame #2: 0x000000010012294c eM Client`libunwind::CFI_Parser\u003clibunwind::LocalAddressSpace\u003e::findFDE(addressSpace=0x000000010e9c57f8, pc=4349025824, ehSectionStart=4460851648, sectionLength=\u003cunavailable\u003e, fdeHint=\u003cunavailable\u003e, fdeInfo=0x0000000175a21b10, cieInfo=0x0000000175a21ad8) at DwarfParser.hpp:265:13 [opt]\r\n    frame #3: 0x000000010011ea18 eM Client`libunwind::UnwindCursor\u003clibunwind::LocalAddressSpace, libunwind::Registers_arm64\u003e::getInfoFromDwarfSection(this=0x0000000175a221c0, pc=4349025824, sects=0x00006000017b85d0, fdeSectionOffsetHint=851328) at UnwindCursor.hpp:1693:16 [opt]\r\n    frame #4: 0x000000010011e508 eM Client`UnwindHelpers::GetUnwindProcInfo(pc=4349025824, uwInfoSections=0x00006000017b85d0, procInfo=0x0000000175a22578) at UnwindHelpers.cpp:867:22 [opt]\r\n    frame #5: 0x0000000100126670 eM Client`UnixNativeCodeManager::FindMethodInfo(this=\u003cunavailable\u003e, ControlPC=\u003cunavailable\u003e, pMethodInfoOut=0x0000000175a225e0) at UnixNativeCodeManager.cpp:89:10 [opt]\r\n    frame #6: 0x0000000100127020 eM Client`UnixNativeCodeManager::GetAssociatedData(this=\u003cunavailable\u003e, ControlPC=\u003cunavailable\u003e) at UnixNativeCodeManager.cpp:916:10 [opt]\r\n    frame #7: 0x00000001000cedf8 eM Client`RuntimeInstance::GetTargetOfUnboxingAndInstantiatingStub(this=\u003cunavailable\u003e, ControlPC=\u003cunavailable\u003e) at RuntimeInstance.cpp:119:52 [opt]\r\n    frame #8: 0x0000000101f807b0 eM Client`S_P_Reflection_Execution_Internal_Reflection_Execution_ExecutionEnvironmentImplementation__ComputeLdftnReverseLookup_InvokeMap + 560\r\n    frame #9: 0x0000000101f80134 eM Client`S_P_Reflection_Execution_Internal_Reflection_Execution_ExecutionEnvironmentImplementation__GetLdFtnReverseLookups_Helper + 532\r\n    frame #10: 0x0000000101f802e4 eM Client`S_P_Reflection_Execution_Internal_Reflection_Execution_ExecutionEnvironmentImplementation__TryGetMethodForOriginalLdFtnResult + 164\r\n    frame #11: 0x0000000101f7cbb4 eM Client`S_P_Reflection_Execution_Internal_Reflection_Extensions_NonPortable_DelegateMethodInfoRetriever__GetDelegateMethodInfo + 388\r\n    frame #12: 0x0000000104d5e828 eM Client`MailClient_Accounts_MailClient_Utils_EventHandlerUtils__MakeWeak\u003cSystem___Canon\u003e + 56\r\n    frame #13: 0x0000000100db89d4 eM Client`MailClient_Accounts_MailClient_Storage_Application_Folder__RegisterPropertyChangedWeakHandler + 148\r\n    frame #14: 0x0000000100dacf44 eM Client`MailClient_Accounts_MailClient_Storage_Application_Folder___ctor + 676\r\n    frame #15: 0x0000000100df201c eM Client`MailClient_Accounts_MailClient_Accounts_AccountFolderCache__GetFolder_0 + 172\r\n    frame #16: 0x0000000100df1efc eM Client`MailClient_Accounts_MailClient_Accounts_AccountFolderCache__GetFolder + 684\r\n    frame #17: 0x0000000100e0165c eM Client`MailClient_Accounts_MailClient_Accounts_BindingAccountBase__InitializeStorage + 252\r\n    frame #18: 0x0000000100e15160 eM Client`MailClient_Accounts_MailClient_Accounts_Mail_MailAccount__InitializeStorage + 64\r\n    frame #19: 0x0000000100e014d8 eM Client`MailClient_Accounts_MailClient_Accounts_BindingAccountBase___ctor + 472\r\n    frame #20: 0x0000000100df6e54 eM Client`MailClient_Accounts_MailClient_Accounts_AccountManager__get_FallbackMailAccount + 324\r\n    frame #21: 0x0000000100df7c74 eM Client`MailClient_Accounts_MailClient_Accounts_AccountManager___ctor + 948\r\n    frame #22: 0x00000001002e33c0 eM Client`eM_Client_MailClient_Program__InitOnBackground + 4256\r\n    frame #23: 0x00000001002ec90c eM Client`eM_Client_MailClient_Program___c___RunInitOnBackground_b__200_0 + 44\r\n    frame #24: 0x0000000101285964 eM Client`S_P_CoreLib_System_Threading_ExecutionContext__RunFromThreadPoolDispatchLoop + 68\r\n    frame #25: 0x0000000101293cf4 eM Client`S_P_CoreLib_System_Threading_Tasks_Task__ExecuteWithThreadLocal + 228\r\n    frame #26: 0x000000010128c0f0 eM Client`S_P_CoreLib_System_Threading_ThreadPoolWorkQueue__DispatchItemWithAutoreleasePool + 96\r\n    frame #27: 0x000000010128bdf0 eM Client`S_P_CoreLib_System_Threading_ThreadPoolWorkQueue__Dispatch + 752\r\n    frame #28: 0x000000010135f594 eM Client`S_P_CoreLib_System_Threading_PortableThreadPool_WorkerThread__WorkerThreadStart + 244\r\n    frame #29: 0x00000001012825f8 eM Client`S_P_CoreLib_System_Threading_Thread__StartThread + 376\r\n    frame #30: 0x0000000101282b10 eM Client`S_P_CoreLib_System_Threading_Thread__ThreadEntryPoint + 32\r\n    frame #31: 0x000000018c367034 libsystem_pthread.dylib`_pthread_start + 136\r\n```\r\n\r\nThe `fdeSectionOffsetHint=851328` is `0xCFD80`. The DWARF dump is a bit too big too upload but 0xCFD80 points into a middle of a record. There is, however, a start of record at 0x10CFD80 and it matches the PC 0x10338DE20 from the stack trace:\r\n```\r\n010cfd80 0000002c 010cfd84 FDE cie=00000000 pc=10338de20...10338de4c\r\n  Format:       DWARF32\r\n  LSDA Address: 000000010c0b4df8\r\n  DW_CFA_advance_loc: 4\r\n  DW_CFA_def_cfa_offset: +16\r\n  DW_CFA_offset: W29 -16\r\n  DW_CFA_offset: W30 -8\r\n  DW_CFA_advance_loc: 4\r\n  DW_CFA_def_cfa_register: W29\r\n  DW_CFA_nop:\r\n  DW_CFA_nop:\r\n  DW_CFA_nop:\r\n  DW_CFA_nop:\r\n  DW_CFA_nop:\r\n\r\n  0x10338de20: CFA=WSP\r\n  0x10338de24: CFA=WSP+16: W29=[CFA-16], W30=[CFA-8]\r\n  0x10338de28: CFA=W29+16: W29=[CFA-16], W30=[CFA-8]\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYTQ3UQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5gWHce",
                                           "createdAt":  "2023-07-02T06:45:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nOn macOS the unwind information is stored as the compact unwinding encoding and the DWARF EH encoding. The compact unwinding serves as a lookup table to the DWARF section (if the whole unwinding cannot be expressed using compact code, which NativeAOT doesn\u0027t currently produce). The \"hint offset\" into the DWARF table is 24-bit on both ARM64 and x64. Turns out, if the offset is longer, then it gets silently truncated and results in incorrect pointers into the DWARF section. This in turn results in unwinding not working properly and app freeze due to live lock between stuck `FindMethodInfo` and GC suspensions.\r\n\r\nExample stack trace:\r\n```\r\n  * frame #0: 0x0000000100120694 eM Client`libunwind::CFI_Parser\u003clibunwind::LocalAddressSpace\u003e::parseCIE(libunwind::LocalAddressSpace\u0026, unsigned long, libunwind::CFI_Parser\u003clibunwind::LocalAddressSpace\u003e::CIE_Info*) at AddressSpace.hpp:0 [opt]\r\n    frame #1: 0x0000000100120684 eM Client`libunwind::CFI_Parser\u003clibunwind::LocalAddressSpace\u003e::parseCIE(addressSpace=0x000000010e9c57f8, cie=4460851648, cieInfo=0x0000000175a21ad8) at DwarfParser.hpp:371:5 [opt]\r\n    frame #2: 0x000000010012294c eM Client`libunwind::CFI_Parser\u003clibunwind::LocalAddressSpace\u003e::findFDE(addressSpace=0x000000010e9c57f8, pc=4349025824, ehSectionStart=4460851648, sectionLength=\u003cunavailable\u003e, fdeHint=\u003cunavailable\u003e, fdeInfo=0x0000000175a21b10, cieInfo=0x0000000175a21ad8) at DwarfParser.hpp:265:13 [opt]\r\n    frame #3: 0x000000010011ea18 eM Client`libunwind::UnwindCursor\u003clibunwind::LocalAddressSpace, libunwind::Registers_arm64\u003e::getInfoFromDwarfSection(this=0x0000000175a221c0, pc=4349025824, sects=0x00006000017b85d0, fdeSectionOffsetHint=851328) at UnwindCursor.hpp:1693:16 [opt]\r\n    frame #4: 0x000000010011e508 eM Client`UnwindHelpers::GetUnwindProcInfo(pc=4349025824, uwInfoSections=0x00006000017b85d0, procInfo=0x0000000175a22578) at UnwindHelpers.cpp:867:22 [opt]\r\n    frame #5: 0x0000000100126670 eM Client`UnixNativeCodeManager::FindMethodInfo(this=\u003cunavailable\u003e, ControlPC=\u003cunavailable\u003e, pMethodInfoOut=0x0000000175a225e0) at UnixNativeCodeManager.cpp:89:10 [opt]\r\n    frame #6: 0x0000000100127020 eM Client`UnixNativeCodeManager::GetAssociatedData(this=\u003cunavailable\u003e, ControlPC=\u003cunavailable\u003e) at UnixNativeCodeManager.cpp:916:10 [opt]\r\n    frame #7: 0x00000001000cedf8 eM Client`RuntimeInstance::GetTargetOfUnboxingAndInstantiatingStub(this=\u003cunavailable\u003e, ControlPC=\u003cunavailable\u003e) at RuntimeInstance.cpp:119:52 [opt]\r\n    frame #8: 0x0000000101f807b0 eM Client`S_P_Reflection_Execution_Internal_Reflection_Execution_ExecutionEnvironmentImplementation__ComputeLdftnReverseLookup_InvokeMap + 560\r\n    frame #9: 0x0000000101f80134 eM Client`S_P_Reflection_Execution_Internal_Reflection_Execution_ExecutionEnvironmentImplementation__GetLdFtnReverseLookups_Helper + 532\r\n    frame #10: 0x0000000101f802e4 eM Client`S_P_Reflection_Execution_Internal_Reflection_Execution_ExecutionEnvironmentImplementation__TryGetMethodForOriginalLdFtnResult + 164\r\n    frame #11: 0x0000000101f7cbb4 eM Client`S_P_Reflection_Execution_Internal_Reflection_Extensions_NonPortable_DelegateMethodInfoRetriever__GetDelegateMethodInfo + 388\r\n    frame #12: 0x0000000104d5e828 eM Client`MailClient_Accounts_MailClient_Utils_EventHandlerUtils__MakeWeak\u003cSystem___Canon\u003e + 56\r\n    frame #13: 0x0000000100db89d4 eM Client`MailClient_Accounts_MailClient_Storage_Application_Folder__RegisterPropertyChangedWeakHandler + 148\r\n    frame #14: 0x0000000100dacf44 eM Client`MailClient_Accounts_MailClient_Storage_Application_Folder___ctor + 676\r\n    frame #15: 0x0000000100df201c eM Client`MailClient_Accounts_MailClient_Accounts_AccountFolderCache__GetFolder_0 + 172\r\n    frame #16: 0x0000000100df1efc eM Client`MailClient_Accounts_MailClient_Accounts_AccountFolderCache__GetFolder + 684\r\n    frame #17: 0x0000000100e0165c eM Client`MailClient_Accounts_MailClient_Accounts_BindingAccountBase__InitializeStorage + 252\r\n    frame #18: 0x0000000100e15160 eM Client`MailClient_Accounts_MailClient_Accounts_Mail_MailAccount__InitializeStorage + 64\r\n    frame #19: 0x0000000100e014d8 eM Client`MailClient_Accounts_MailClient_Accounts_BindingAccountBase___ctor + 472\r\n    frame #20: 0x0000000100df6e54 eM Client`MailClient_Accounts_MailClient_Accounts_AccountManager__get_FallbackMailAccount + 324\r\n    frame #21: 0x0000000100df7c74 eM Client`MailClient_Accounts_MailClient_Accounts_AccountManager___ctor + 948\r\n    frame #22: 0x00000001002e33c0 eM Client`eM_Client_MailClient_Program__InitOnBackground + 4256\r\n    frame #23: 0x00000001002ec90c eM Client`eM_Client_MailClient_Program___c___RunInitOnBackground_b__200_0 + 44\r\n    frame #24: 0x0000000101285964 eM Client`S_P_CoreLib_System_Threading_ExecutionContext__RunFromThreadPoolDispatchLoop + 68\r\n    frame #25: 0x0000000101293cf4 eM Client`S_P_CoreLib_System_Threading_Tasks_Task__ExecuteWithThreadLocal + 228\r\n    frame #26: 0x000000010128c0f0 eM Client`S_P_CoreLib_System_Threading_ThreadPoolWorkQueue__DispatchItemWithAutoreleasePool + 96\r\n    frame #27: 0x000000010128bdf0 eM Client`S_P_CoreLib_System_Threading_ThreadPoolWorkQueue__Dispatch + 752\r\n    frame #28: 0x000000010135f594 eM Client`S_P_CoreLib_System_Threading_PortableThreadPool_WorkerThread__WorkerThreadStart + 244\r\n    frame #29: 0x00000001012825f8 eM Client`S_P_CoreLib_System_Threading_Thread__StartThread + 376\r\n    frame #30: 0x0000000101282b10 eM Client`S_P_CoreLib_System_Threading_Thread__ThreadEntryPoint + 32\r\n    frame #31: 0x000000018c367034 libsystem_pthread.dylib`_pthread_start + 136\r\n```\r\n\r\nThe `fdeSectionOffsetHint=851328` is `0xCFD80`. The DWARF dump is a bit too big too upload but 0xCFD80 points into a middle of a record. There is, however, a start of record at 0x10CFD80 and it matches the PC 0x10338DE20 from the stack trace:\r\n```\r\n010cfd80 0000002c 010cfd84 FDE cie=00000000 pc=10338de20...10338de4c\r\n  Format:       DWARF32\r\n  LSDA Address: 000000010c0b4df8\r\n  DW_CFA_advance_loc: 4\r\n  DW_CFA_def_cfa_offset: +16\r\n  DW_CFA_offset: W29 -16\r\n  DW_CFA_offset: W30 -8\r\n  DW_CFA_advance_loc: 4\r\n  DW_CFA_def_cfa_register: W29\r\n  DW_CFA_nop:\r\n  DW_CFA_nop:\r\n  DW_CFA_nop:\r\n  DW_CFA_nop:\r\n  DW_CFA_nop:\r\n\r\n  0x10338de20: CFA=WSP\r\n  0x10338de24: CFA=WSP+16: W29=[CFA-16], W30=[CFA-8]\r\n  0x10338de28: CFA=W29+16: W29=[CFA-16], W30=[CFA-8]\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efilipnavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`os-mac-os-x`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-02T06:45:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gWJ6O",
                                           "createdAt":  "2023-07-02T07:26:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I guess we have three options how to deal with it:\r\n- Short-term: Bail out with error if the DWARF section is too big (\u003e 0xffffff bytes). This is tricky because the problem is the size of the section in the linked image, not the ILCompiler output .o file.\r\n- Check again if we can generate compact unwind codes instead of DWARF for the common cases: https://github.com/dotnet/runtime/issues/76371\r\n- Build a different index (eg. Linux .eh_hdr format) if the data are too big, and consume it.",
                                           "updatedAt":  "2023-07-02T07:26:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gXIfu",
                                           "createdAt":  "2023-07-02T14:10:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Another option is to compensate for this issue in the libunwind implementation. We can loop over all candidates that match the hint.",
                                           "updatedAt":  "2023-07-02T14:10:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gXI3M",
                                           "createdAt":  "2023-07-02T14:14:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Another option is to compensate for this issue in the libunwind implementation. We can loop over all candidates that match the hint.\r\n\r\nI don\u0027t think that\u0027s possible. The offset points into middle of a stream so it\u0027s essentially decoding garbage. Sometimes the garbage can make sense, sometimes not, but it\u0027s not easy to tell whether it\u0027s a false hit.",
                                           "updatedAt":  "2023-07-02T14:14:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gXJdV",
                                           "createdAt":  "2023-07-02T14:25:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Can we build our own hint table from the broken hint table? Something like:\r\n\r\nIf the dwarf stream is more than 16MB:\r\n1. Create copy of the hint table, with 32 offsets\r\n2. Scan the hint table and fill in the top 8-bit offsets. We should be able to tell that where the offsets wrap around\r\n3. Use this private hint table for lookups\r\n\r\nThis would fix our unwinder, but it would not fix other unwinders. For example, I would expect C++ EH to be still broken.",
                                           "updatedAt":  "2023-07-02T14:25:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gXKbB",
                                           "createdAt":  "2023-07-02T14:39:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "We can probably build our own hint table from scratch during compilation. It needs to cover only \"managed code\" section and hence doesn\u0027t need much of a linker input, as long as the DWARF section is preserved in one piece (I think it is).\r\n\r\nReconstructing the hints at runtime from the linker output may be possible but at that point you get a penalty similar to not using the hints at all and just creating the cache by sequentially reading the DWARF section. That\u0027s incredibly slow even on small executables though.\r\n\r\n\u003e This would fix our unwinder, but it would not fix other unwinders. For example, I would expect C++ EH to be still broken.\r\n\r\nThat\u0027s a fair point. I didn\u0027t consider other unwinders. If we want other unwinders to work then we basically have to either 1) generate compact unwinding codes where possible (needs codegen changes), 2) implement \"compression\" for DWARF by identifying common prolog sequences and sharing their code (possible in the DWARF format but difficult to implement), 3) fix it the linker output to not use the hints when they overflow (the slow lookup is too slow for NativeAOT purposes thought). I didn\u0027t check what the new Apple linker (ld-prime) produces in this case.",
                                           "updatedAt":  "2023-07-02T14:39:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gXLp1",
                                           "createdAt":  "2023-07-02T14:55:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Reconstructing the hints at runtime from the linker output may be possible but at that point you get a penalty similar to not using the hints\r\n\r\nThe hint table is not big and the reconstructed hint table can be cached. I think the penalty would be fairly small.",
                                           "updatedAt":  "2023-07-02T14:55:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gXNQE",
                                           "createdAt":  "2023-07-02T15:06:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e The hint table is not big and the reconstructed hint table can be cached.\r\n\r\nIn the executable from OP the size of `__unwind_info` (compact unwinding table) is 0x89beb8 bytes. The size of `__eh_frame` is 0x1bc0e28. So, 9Mb for the hint table may not seem like much but it\u0027s definitely going to be noticeable. If it was done lazily then you risk running it during thread hijacking on GC suspend. That would almost certainly take long enough to cause live locks when the threads get hammered with the \"suspend all thread hijack\" logic.",
                                           "updatedAt":  "2023-07-02T15:06:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gXRUo",
                                           "createdAt":  "2023-07-02T16:03:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "On second thought I don\u0027t think it\u0027s even reliably possible to reconstruct the DWARF offsets solely from `__unwind_info` since it\u0027s sorted, and hence it\u0027s not guaranteed that the DWARF offsets are in order. I suspect that in this case they would be, but it feels fragile.",
                                           "updatedAt":  "2023-07-02T16:03:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gfS6I",
                                           "createdAt":  "2023-07-03T16:17:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "There’s potentially an easy win in terms of the ARM64 DWARF size with folding the extremely common sequences into a DWARF CIE and referencing that. That’s a variation of the “DWARF compression” strategy mentioned earlier, just restricted to specific known sequences.\r\n\r\nFor example, the prolog for frame with no callee saved registers (except LR and FP) is this:\r\n```\r\n  DW_CFA_advance_loc: 4\r\n  DW_CFA_def_cfa_offset: +16\r\n  DW_CFA_offset: W29 -16\r\n  DW_CFA_offset: W30 -8\r\n  DW_CFA_advance_loc: 4\r\n  DW_CFA_def_cfa_register: W29\r\n  DW_CFA_nop:\r\n  DW_CFA_nop:\r\n  DW_CFA_nop:\r\n  DW_CFA_nop:\r\n  DW_CFA_nop:\r\n```\r\n\r\nThe code looks like this:\r\n```\r\nstp x29, x30, [sp, #-10]!\r\nmov x29, sp\r\n…\r\nldr x29, x30, [sp], #0x10\r\nret\r\n```\r\n\r\nThis repeats 20000+ times in the OP executable. Besides being foldable in the DWARF codes it’s also likely expressible as compact unwind code with no codegen changes. We would still need to implement special prolog treatment for asynchronous unwinding with the compact unwind codes though, so the DWARF way could be easier (and benefit other platforms too).",
                                           "updatedAt":  "2023-07-03T16:17:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hNDdR",
                                           "createdAt":  "2023-07-11T13:15:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODAXBvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2023-07-11T13:19:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I tried to replace the empty frame DWARF sequence with compact unwinding and it saves 32% of the DWARF section size for this particular executable. Similar savings are present for empty iOS app from template (`dotnet new ios`). It\u0027s not enough to push the DWARF size below the problematic size but it\u0027s significant enough that it may be an option worth exploring.",
                                           "updatedAt":  "2023-07-11T13:17:15Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "NativeAOT: Silent unwind info corruption",
        "labels":  [
                       "os-mac-os-x",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88598",
        "createdAt":  "2023-07-10T11:18:55Z",
        "number":  88598,
        "author":  "RalfKornmannEnvision",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-YWMA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Marlax0",
                                            "createdAt":  "2023-10-22T21:01:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tylermasci16",
                                            "createdAt":  "2023-11-27T17:26:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sanny-io",
                                            "createdAt":  "2024-10-04T22:26:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Kuinox",
                                            "createdAt":  "2025-01-22T23:11:17Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2023-07-11T07:03:20Z",
        "body":  "To use the DirectX12 Agility SDK the executable needs to export two constants \r\n\r\nhttps://devblogs.microsoft.com/directx/gettingstarted-dx12agility/#parametersa\r\n\r\nCurrently it is only possible to export methods by using the UnmanagedCallersOnly attribute\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.unmanagedcallersonlyattribute?view=net-7.0\r\n\r\nIt\u0027s possible to export constants from a native AOT executable by linking it with a static lib that contains these. But you need to make sure that anything else in this lib is actually used so that the linker does not drop it.\r\n\r\nIt would be nice if there would be a way to have these constants directly in a C# code file instead. \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYSvUPQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5hGiov",
                                           "createdAt":  "2023-07-10T14:36:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\r\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.",
                                           "updatedAt":  "2023-07-10T14:37:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hGjIr",
                                           "createdAt":  "2023-07-10T14:37:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nTo use the DirectX12 Agility SDK the executable needs to export two constants \r\n\r\nhttps://devblogs.microsoft.com/directx/gettingstarted-dx12agility/#parametersa\r\n\r\nCurrently it is only possible to export methods by using the UnmanagedCallersOnly attribute\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.unmanagedcallersonlyattribute?view=net-7.0\r\n\r\nIt\u0027s possible to export constants from a native AOT executable by linking it with a static lib that contains these. But you need to make sure that anything else in this lib is actually used so that the linker does not drop it.\r\n\r\nIt would be nice if there would be a way to have these constants directly in a C# code file instead. \r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eRalfKornmannEnvision\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-10T14:37:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hHn0m",
                                           "createdAt":  "2023-07-10T17:16:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODAS5-w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2023-07-10T20:44:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "Related to #60422.",
                                           "updatedAt":  "2023-07-10T17:16:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hKmhC",
                                           "createdAt":  "2023-07-11T05:37:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I\u0027ve had a need for something similar in the past. Ended up generating a synthetic RVA-static field within the compiler since that was an option.\r\n\r\nOne possible implementation approach would be to have an attribute one can put on a non-GC static field to have the compiler treat it as an RVA static (so that it doesn\u0027t participate in static layout) and give it a symbolic name.\r\n\r\nThis feels kind of similar to what [FixedAddressValueType](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.fixedaddressvaluetypeattribute?view=net-7.0) attribute does. Maybe we could use that and add a `EntryPoint` property.",
                                           "updatedAt":  "2023-07-11T05:37:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hKp-a",
                                           "createdAt":  "2023-07-11T05:51:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "If we were to implement this, we should make sure that the same scheme can work on JIT-based runtime, so that our debugging story (debug on CoreCLR, deploy with AOT) holds.",
                                           "updatedAt":  "2023-07-11T05:51:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hKrRG",
                                           "createdAt":  "2023-07-11T05:57:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "This feels similar to setting `EntryPoint` on `UnmanagedCallersOnly` - it\u0027s a no-op when JIT is involved, unless one builds a custom host that interprets this, a la DNNE. Not sure if CoreCLR hosting APIs would allow emulating this for fields in their current form.",
                                           "updatedAt":  "2023-07-11T05:57:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hK9Q9",
                                           "createdAt":  "2023-07-11T07:02:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEMI7dg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichalStrehovsky",
                                                                               "createdAt":  "2023-07-12T08:45:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-03-30T16:08:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Right, it is similar. The challenge is that it is not possible to lazy resolve and forward the fields access like it is possible for methods. It means that the unmanaged export would need to point directly at the field storage, and the type loader would need to call the host to get address of the storage assigned to the field and use that instead of allocating the storage.",
                                           "updatedAt":  "2023-07-11T07:03:20Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "NativeAOT: exportable static fields support",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88647",
        "createdAt":  "2023-07-11T04:49:13Z",
        "number":  88647,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-11T04:49:19Z",
        "body":  "See the PR and comment: https://github.com/dotnet/runtime/pull/88230#pullrequestreview-1521620247\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYSmFQA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5hKYVA",
                                           "createdAt":  "2023-07-11T04:49:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSee the PR and comment: https://github.com/dotnet/runtime/pull/88230#pullrequestreview-1521620247\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-11T04:49:19Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Enable ILLinker tests for externally-specified substitions",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88690",
        "createdAt":  "2023-07-11T18:42:40Z",
        "number":  88690,
        "author":  "davidwrighton",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-06T11:04:02Z",
        "body":  "### Description\n\nNew test added in https://github.com/dotnet/runtime/pull/88639 fails on Native AOT\n\n### Reproduction Steps\n\nRun the src/tests/Loader/classloader/StaticVirtualMethods/InterfaceVariance/ComplexHierarchyPositive.csproj test with NativeAOT.\n\n### Expected behavior\n\nTest passes\n\n### Actual behavior\n\nTest fails\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvFTXOA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5hPB4P",
                                           "createdAt":  "2023-07-11T18:42:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nNew test added in https://github.com/dotnet/runtime/pull/88639 fails on Native AOT\n\n### Reproduction Steps\n\nRun the src/tests/Loader/classloader/StaticVirtualMethods/InterfaceVariance/ComplexHierarchyPositive.csproj test with NativeAOT.\n\n### Expected behavior\n\nTest passes\n\n### Actual behavior\n\nTest fails\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavidwrighton\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-11T18:42:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68VNc4",
                                           "createdAt":  "2025-08-06T11:03:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "The test is testing both static virtual and instance virtuals. Instance virtuals fail the same way. It\u0027s not shocking since we use the same algorithm. The test is also disabled on Mono. We likely had the bug since .NET Native times (the instance method flavor of it). This can move to the Future milestone.",
                                           "updatedAt":  "2025-08-06T11:03:57Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Variant static interface dispatch behaves incorrectly on Native AOT",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89131",
        "createdAt":  "2023-07-18T21:14:53Z",
        "number":  89131,
        "author":  "jkoritzinsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-18T21:15:00Z",
        "body":  "For some reason I haven\u0027t figured out, the `GenerateUnmanagedEntryPoints` test has an issue where the ASAN interceptors don\u0027t seem to catch all cases, and as a result some allocations are missed (and then ASAN kills the process when an unknown pointer is `free`d).\r\n\r\nI\u0027ve disabled the test for now.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYc-yJw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5hz7In",
                                           "createdAt":  "2023-07-18T21:15:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFor some reason I haven\u0027t figured out, the `GenerateUnmanagedEntryPoints` test has an issue where the ASAN interceptors don\u0027t seem to catch all cases, and as a result some allocations are missed (and then ASAN kills the process when an unknown pointer is `free`d).\r\n\r\nI\u0027ve disabled the test for now.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejkoritzinsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`disabled-test`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-18T21:15:00Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "nativeaot/GenerateUnmanagedEntryPoints test fails under ASAN",
        "labels":  [
                       "disabled-test",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89219",
        "createdAt":  "2023-07-19T22:06:19Z",
        "number":  89219,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-10T17:19:46Z",
        "body":  "Most variables that matter when debugging are either locals or statics. It looks like locals are able to bind in VS. That is subject to the local not being optimized away, etc..., but that is expected. Otherwise locals \"just work\" - you can dig into fields, see the type of the local (although in a mangled form), or you can just hover over a local and see its value. \r\n\r\nThe same does not work with statics.\r\nHere is an example - `lck` and `s_lock` are variables of the same type, just one is a local and another is static.\r\n\r\n![image](https://github.com/dotnet/runtime/assets/8218165/8c1e0fc5-bd09-4116-a929-3c9668feb790)\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYfQH2Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5h63Cc",
                                           "createdAt":  "2023-07-19T22:06:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\nMost variables that matter when debugging are either locals or statics. It looks like locals are able to bind in VS. That is subject to the local not being optimized away, etc, but that is expected. Otherwise locals \"just work\" - you can dig into fields, see the type of the local (although in a mangled form), you can juat hover over a local and see its value. \r\n\r\nThe same does not work with statics.\r\nHere is an example - `lck` and `s_lock` are variables of the same type, just one is a local and another is static.\r\n\r\n![image](https://github.com/dotnet/runtime/assets/8218165/8c1e0fc5-bd09-4116-a929-3c9668feb790)\r\n\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVSadov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-19T22:06:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h65ZP",
                                           "createdAt":  "2023-07-19T22:13:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Actually I\u0027ve just figured how to get to statics - all you need is to know the mangled name of the containing type, then you can simply put that in the watch window and dig out statics.  \r\n\r\n![image](https://github.com/dotnet/runtime/assets/8218165/e8531bcd-3011-4fcc-9a50-f3296daef499)\r\n\r\nThat is sufficient for me (modulo discoverability).\r\n\r\nAlthough if it would happen automatically somehow, like with locals - when you can hover over a variable or right-click and do \"Add Watch\" it would be even better.  \r\nI see how it might be somewhat problematic though, because of `__GCSTATICS`/`__NONGCSTATICS` indirection",
                                           "updatedAt":  "2023-07-19T22:29:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h7S4n",
                                           "createdAt":  "2023-07-20T00:27:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "We\u0027re limited by what the Visual C++ debugger engine can do and these don\u0027t show up nicely for C++ either.\r\n\r\nMore here: https://github.com/dotnet/runtimelab/pull/1313\r\n\r\nWe should probably use this issue to track documenting this. We need a document on debugging tricks.",
                                           "updatedAt":  "2023-07-20T00:27:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h7TLm",
                                           "createdAt":  "2023-07-20T00:29:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Oh looking at https://github.com/dotnet/runtimelab/pull/1313 it seems like threadstatics used to also work. We probably broke them in 8.0, would be nice to investigate/fix that.",
                                           "updatedAt":  "2023-07-20T00:30:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h9AfZ",
                                           "createdAt":  "2023-07-20T06:58:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I extracted the TLS regression into #89227 so that this can just be a doc bug.",
                                           "updatedAt":  "2023-07-20T06:58:16Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[NativeAOT] Is it possible to make static fields to bind in VS debugger?",
        "labels":  [
                       "documentation",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89650",
        "createdAt":  "2023-07-28T20:10:00Z",
        "number":  89650,
        "author":  "LakshanF",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-18T06:44:35Z",
        "body":  "Currently, we use `GetPalThreadIdForLogging()` to get the `thread_id`, which doesn\u0027t look the [proper ](https://github.com/dotnet/runtime/pull/89516#discussion_r1275508925)way to get the `thread_id`.\r\n\r\n`GetPalThreadIdForLogging()` Implementation Details for completeness: EEThreadId classes seems to be doing the right thing to set its first field (pthread_self and GetCurrentThreadId), but doesn\u0027t expose a getter (reason for not using for \u0027normal\u0027 use?) `GetPalThreadIdForLogging `is using this field directly to get the value. See also details of the [current_thread_get_id](https://github.com/dotnet/runtime/issues/86828) implementation concerns.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYripEA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5iuKkQ",
                                           "createdAt":  "2023-07-28T20:10:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrently, we use `GetPalThreadIdForLogging()` to get the `thread_id`, which doesn\u0027t look the [proper ](https://github.com/dotnet/runtime/pull/89516#discussion_r1275508925)way to get the `thread_id`.\r\n\r\n`GetPalThreadIdForLogging()` Implementation Details for completeness: EEThreadId classes seems to be doing the right thing to set its first field (pthread_self and GetCurrentThreadId), but doesn\u0027t expose a getter (reason for not using for \u0027normal\u0027 use?) `GetPalThreadIdForLogging `is using this field directly to get the value. See also details of the [current_thread_get_id](https://github.com/dotnet/runtime/issues/86828) implementation concerns.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-28T20:10:10Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Consider a better implementation for ep_rt_aot_thread_get_id ",
        "labels":  [
                       "EventPipe",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89878",
        "createdAt":  "2023-08-02T20:28:51Z",
        "number":  89878,
        "author":  "LakshanF",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-20T07:16:09Z",
        "body":  "`NativeAOT EventPipe` seems to drop significant number of events when sending events over multiple threads. Leveraging the [EventPipeStress](https://github.com/dotnet/diagnostics/tree/main/src/tests/EventPipeStress) program shows results for different configuration values as shown in the table below.\r\n- The efficiency column (2nd column) shows the ratio of events received and dropped (shown in the 3rd and 4th columns in millions of events)\r\n- `NativeAOT` transmits more events than `CoreCLR` (roughly 3 times) and require a larger buffer size in the default mode to hit similar efficiency as `CoreCLR`\r\n- Transmitting events in multiple threads shows significant event drops (50%) when the duration of the events gets longer (60 seconds)\r\n- Stress program needs to be built as a `NativeAOT` application and EventSourceSupport needs to be set to true.\r\n\r\n\u003chtml\u003e\r\n\u003cbody\u003e\r\n\u003c!--StartFragment--\u003e\u003cdiv ccp_infra_version=\u00273\u0027 ccp_infra_timestamp=\u00271691007124041\u0027 ccp_infra_user_hash=\u0027529774597\u0027 ccp_infra_copy_id=\u002763c01832-f7b0-4f21-a27f-2a0400b4a6c5\u0027 data-ccp-timestamp=\u00271691007124041\u0027\u003e\u003chtml\u003e\u003chead\u003e\u003cmeta name=ProgId content=Excel.Sheet\u003e\u003cmeta name=Generator content=\"Microsoft Excel 15\"\u003e\u003c/head\u003e\u003cbody link=\"#0563C1\" vlink=\"#954F72\"\u003e\r\n\r\nRuntime | Efficiency | EventsReceived (M) | EventsDropped (M) | BufferSize | Threads | EventRate (M) | EventCount (M) | BurstPattern | EventSize | Duration (s)\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- \r\nNativeAOT | 52 | 176 | 163 | 32768 | 2 | -1 | -1 | None | 100 | 60\r\nNativeAOT | 50 | 5 | 5 | 4096 | 10 | -1 | 10 | None | 100 | 2\r\nNativeAOT | 37 | 198 | 338 | 4096 | 10 | 1 | -1 | None | 100 | 60\r\nNativeAOT | 51 | 51 | 48 | 4096 | 10 | 10 | 10 | None | 100 | 12\r\nNativeAOT | 68 | 143 | 66 | 256 | 1 | -1 | -1 | None | 100 | 60\r\nCoreCLR | 99 | 58 | 0.7 | 256 | 1 | -1 | -1 | None | 100 | 60 \r\nNativeAOT | 95 | 182 | 9 | 4096 | 1 | -1 | -1 | None | 100 | 60 \r\nCoreCLR | 100 | 58 | 0 | 4096 | 1 | -1 | -1 | None | 100 | 60 \r\nNativeAOT | 91 | 191 | 18 | 32768 | 1 | -1 | -1 | None | 100 | 60 \r\nCoreCLR | 100 | 103 | 0 | 32768 | 2 | -1 | -1 | None | 100 | 60 \r\nNativeAOT | 100 | 10 | 0 | 4096 | 10 | -1 | 1 | None | 100 | 2 \r\nNativeAOT | 100 | 1 | 0 | 4096 | 10 | 10 | 0.1 | None | 100 | 0.2 \r\nNativeAOT | 100 | 10 | 0 | 4096 | 10 | 10 | 1 | None | 100 | 2 \r\nNativeAOT | 100 | 10 | 0 | 4096 | 10 | 10 | 1 | BOLUS | 100 | 2   \r\nNativeAOT | 100 | 10 | 0 | 4096 | 10 | 10 | 1 | DRIP | 100 | 2 \r\nNativeAOT | 100 | 10 | 0 | 4096 | 10 | 10 | 1 | HEAVY_DRIP | 100 | 2 \r\n\r\n\u003c/body\u003e\u003c/html\u003e\u003c/div\u003e\u003c!--EndFragment--\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY6oS6w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jHjyc",
                                           "createdAt":  "2023-08-02T20:28:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n`NativeAOT EventPipe` seems to drop significant number of events when sending events over multiple threads. Leveraging the [EventPipeStress](https://github.com/dotnet/diagnostics/tree/main/src/tests/EventPipeStress) program shows results for different configuration values as shown in the table below.\r\n- The efficiency column (2nd column) shows the ratio of events received and dropped (shown in the 3rd and 4th columns in millions of events)\r\n- `NativeAOT` transmits more events than `CoreCLR` (roughly 3 times) and require a larger buffer size in the default mode to hit similar efficiency as `CoreCLR`\r\n- Transmitting events in multiple threads shows significant event drops (50%) when the duration of the events gets longer (60 seconds)\r\n- Stress program needs to be built as a `NativeAOT` application and EventSourceSupport needs to be set to true.\r\n\r\n\u003chtml\u003e\r\n\u003cbody\u003e\r\n\u003c!--StartFragment--\u003e\u003cdiv ccp_infra_version=\u00273\u0027 ccp_infra_timestamp=\u00271691007124041\u0027 ccp_infra_user_hash=\u0027529774597\u0027 ccp_infra_copy_id=\u002763c01832-f7b0-4f21-a27f-2a0400b4a6c5\u0027 data-ccp-timestamp=\u00271691007124041\u0027\u003e\u003chtml\u003e\u003chead\u003e\u003cmeta name=ProgId content=Excel.Sheet\u003e\u003cmeta name=Generator content=\"Microsoft Excel 15\"\u003e\u003c/head\u003e\u003cbody link=\"#0563C1\" vlink=\"#954F72\"\u003e\r\n\r\nRuntime | Efficiency | EventsReceived (M) | EventsDropped (M) | BufferSize | Threads | EventRate (M) | EventCount (M) | BurstPattern | EventSize | Duration (s)\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- \r\nNativeAOT | 52 | 176 | 163 | 32768 | 2 | -1 | -1 | None | 100 | 60\r\nNativeAOT | 50 | 5 | 5 | 4096 | 10 | -1 | 10 | None | 100 | 2\r\nNativeAOT | 37 | 198 | 338 | 4096 | 10 | 1 | -1 | None | 100 | 60\r\nNativeAOT | 51 | 51 | 48 | 4096 | 10 | 10 | 10 | None | 100 | 12\r\nNativeAOT | 68 | 143 | 66 | 256 | 1 | -1 | -1 | None | 100 | 60\r\nCoreCLR | 99 | 58 | 0.7 | 256 | 1 | -1 | -1 | None | 100 | 60 \r\nNativeAOT | 95 | 182 | 9 | 4096 | 1 | -1 | -1 | None | 100 | 60 \r\nCoreCLR | 100 | 58 | 0 | 4096 | 1 | -1 | -1 | None | 100 | 60 \r\nNativeAOT | 91 | 191 | 18 | 32768 | 1 | -1 | -1 | None | 100 | 60 \r\nCoreCLR | 100 | 103 | 0 | 32768 | 2 | -1 | -1 | None | 100 | 60 \r\nNativeAOT | 100 | 10 | 0 | 4096 | 10 | -1 | 1 | None | 100 | 2 \r\nNativeAOT | 100 | 1 | 0 | 4096 | 10 | 10 | 0.1 | None | 100 | 0.2 \r\nNativeAOT | 100 | 10 | 0 | 4096 | 10 | 10 | 1 | None | 100 | 2 \r\nNativeAOT | 100 | 10 | 0 | 4096 | 10 | 10 | 1 | BOLUS | 100 | 2   \r\nNativeAOT | 100 | 10 | 0 | 4096 | 10 | 10 | 1 | DRIP | 100 | 2 \r\nNativeAOT | 100 | 10 | 0 | 4096 | 10 | 10 | 1 | HEAVY_DRIP | 100 | 2 \r\n\r\n\u003c/body\u003e\u003c/html\u003e\u003c/div\u003e\u003c!--EndFragment--\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-02T20:28:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jqhLr",
                                           "createdAt":  "2023-08-09T20:19:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LakshanF",
                                           "body":  "Given this is hitting with large number of events, and the apparent transmission spike seen with `NativeAOT`, I think this can be punted to .NET9",
                                           "updatedAt":  "2023-08-09T20:19:46Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "NativeAOT EventPipe drops events in multi-threaded scenarios.",
        "labels":  [
                       "EventPipe",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90209",
        "createdAt":  "2023-08-09T03:35:53Z",
        "number":  90209,
        "author":  "agocke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-01T20:32:23Z",
        "body":  "As noted in https://github.com/dotnet/runtime/pull/89488, the only remaining Native AOT errors are EH around SAMETRY:\r\n\r\n```\r\nerror: DIEs have overlapping address ranges:\r\n0x000367a4: DW_TAG_try_block [37]   (0x000366e5)\r\n              DW_AT_low_pc [DW_FORM_addr]       (0x00000000000132f6 \"__managedcode\")\r\n              DW_AT_high_pc [DW_FORM_data8]     (0x000000000000016a)\r\n\r\n0x00036782: DW_TAG_try_block [37]   (0x000366e5)\r\n              DW_AT_low_pc [DW_FORM_addr]       (0x00000000000133ed \"__managedcode\")\r\n              DW_AT_high_pc [DW_FORM_data8]     (0x0000000000000069)\r\n\r\nerror: DIEs have overlapping address ranges:\r\n...\r\n```\r\n\r\nThe other errors are from clang-compiled files, so there\u0027s nothing for us to do there.\r\n\r\nAlso note: EH info is not produced on Mac, so the errors don\u0027t appear there.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOf8RnnA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jk2GL",
                                           "createdAt":  "2023-08-09T03:35:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAs noted in https://github.com/dotnet/runtime/pull/89488, the only remaining Native AOT errors are EH around SAMETRY:\r\n\r\n```\r\nerror: DIEs have overlapping address ranges:\r\n0x000367a4: DW_TAG_try_block [37]   (0x000366e5)\r\n              DW_AT_low_pc [DW_FORM_addr]       (0x00000000000132f6 \"__managedcode\")\r\n              DW_AT_high_pc [DW_FORM_data8]     (0x000000000000016a)\r\n\r\n0x00036782: DW_TAG_try_block [37]   (0x000366e5)\r\n              DW_AT_low_pc [DW_FORM_addr]       (0x00000000000133ed \"__managedcode\")\r\n              DW_AT_high_pc [DW_FORM_data8]     (0x0000000000000069)\r\n\r\nerror: DIEs have overlapping address ranges:\r\n...\r\n```\r\n\r\nThe other errors are from clang-compiled files, so there\u0027s nothing for us to do there.\r\n\r\nAlso note: EH info is not produced on Mac, so the errors don\u0027t appear there.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eagocke\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-09T03:35:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zBXMV",
                                           "createdAt":  "2024-02-06T14:02:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e error: DIEs have overlapping address ranges\r\n\r\nRelated: https://github.com/dotnet/runtime/issues/83233#issuecomment-1551156322. @filipnavara, maybe  the `CORINFO_EH_CLAUSE_SAMETRY` scope vs. variables in `.debug_loc` (LocationList https://github.com/dotnet/runtime/blob/12db2459c029b4b8ee0335c4d6297d8cb5968f1e/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/ObjectWriter/Dwarf/DwarfInfoWriter.cs#L158) can now be handled in managed objwriter bit more conveniently?\r\n\r\nhttps://github.com/dotnet/runtime/blob/12db2459c029b4b8ee0335c4d6297d8cb5968f1e/src/coreclr/tools/aot/ILCompiler.RyuJit/JitInterface/CorInfoImpl.RyuJit.cs#L880-L905",
                                           "updatedAt":  "2024-02-06T14:02:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zBbft",
                                           "createdAt":  "2024-02-06T14:09:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODVsA3A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2024-02-06T14:10:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "The clauses need to be nested based on the address ranges. It should not be hard to implement.",
                                           "updatedAt":  "2024-02-06T14:09:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_w8uV",
                                           "createdAt":  "2024-06-01T18:17:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "The code pattern which entails these errors is nested `try` in `try` and/or the `catch` blocks:\r\n\r\n```c#\r\nusing System;\r\n\r\ntry {\r\n\t// error: DIEs have overlapping address ranges:\r\n\t// 0x000442d5: DW_TAG_try_block [32]   (0x0004426f)\r\n\t//              DW_AT_low_pc [DW_FORM_addr]\t(0x0000000000063b2c \"__managedcode\")\r\n\t//              DW_AT_high_pc [DW_FORM_data8]\t(0x0000000000000048)\r\n    try { Console.WriteLine(1); }\r\n    catch { throw; }\r\n\r\n    Console.WriteLine(1.1);\r\n}\r\ncatch {\r\n\t// error: DIEs have overlapping address ranges:\r\n    // 0x00040e71: DW_TAG_catch_block [33]   (0x00040df8)\r\n    //          DW_AT_low_pc [DW_FORM_addr]\t(0x0000000000059884 \"__managedcode\")\r\n    //          DW_AT_high_pc [DW_FORM_data8]\t(0x0000000000000018)\r\n    try { Console.WriteLine(2); }\r\n    catch { throw; }\r\n}\r\n```",
                                           "updatedAt":  "2024-06-01T18:17:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_xCjI",
                                           "createdAt":  "2024-06-01T19:40:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Yeah, that\u0027s the pattern. The tricky part is to figure out what is the correct representation in DWARF. I was convinced that it\u0027s fine to just mirror the nesting inside the DWARF structure (as parent-child relationship). Then I couldn\u0027t find it in the spec, and I tried to replicate something similar emitted by C++ compiler... and I really couldn\u0027t come up with an answer what is the correct way to represent it.",
                                           "updatedAt":  "2024-06-01T19:40:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_xGec",
                                           "createdAt":  "2024-06-01T20:32:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "I understood from @jakobbotsch\u0027 comment https://github.com/dotnet/runtime/issues/83233#issuecomment-1551172949 that RyuJIT should not be creating separate debug info for these nested try scopes. I assume the debuggers would still hit the breakpoint on nested try and inside the nested try as well without them? I tried to filter out the nested ranges in `PublishCode()` of `CorInfoImpl.cs`, but was failing (`error: DIEs have overlapping address ranges:` continue to persist). 😅\r\n\r\n\u003e I tried to replicate something similar emitted by C++ compiler.\r\n\r\nSame, found out that with `clang++ -gdwarf-4 -g3 -O0 -o example example.cpp` and this example.cpp:\r\n\r\n```c++\r\n#include \u003ciostream\u003e\r\n\r\nint main() {\r\n    int x = 0;\r\n    std::cout \u003c\u003c \"Enter a value: \";\r\n    std::cin \u003e\u003e x;\r\n    try {\r\n        if (x \u003e 0) {\r\n            throw x;\r\n        }\r\n    } catch (int e) {\r\n        std::cout \u003c\u003c \"Caught exception: \" \u003c\u003c e \u003c\u003c std::endl;\r\n    }\r\n    return 0;\r\n}\r\n```\r\n, clang did produced some info, but that wasn\u0027t particularly useful. 🥲 ",
                                           "updatedAt":  "2024-06-01T20:32:22Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Fix remaining Native AOT Linux DWARF errors",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90460",
        "createdAt":  "2023-08-12T11:38:35Z",
        "number":  90460,
        "author":  "ivanpovazan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-21T16:03:48Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=371640\r\n\r\nAffected pipelines:\r\n- runtime-extra-platforms\r\n\r\nBuild error legs:\r\n- `tvos-arm64 Release AllSubsets_NativeAOT_RuntimeTests`\r\n\r\nTests failing: \r\n- `nativeaot/SmokeTests/StackTraceMetadata/StackTraceMetadata/StackTraceMetadata.sh`\r\n\r\nCrash log:\r\n\r\n```\r\nTest failed. Trying to see if dump file was created in /cores since 8/11/2023 8:00:09 PM\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/tmp/helix/working/BB1E0A01/p\r\n      \u003e /private/tmp/helix/working/BB1E0A01/w/C1E70A94/e/nativeaot/SmokeTests/StackTraceMetadata/StackTraceMetadata/StackTraceMetadata.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at nativeaot_SmokeTests_StackTraceMetadata._StackTraceMetadata_StackTraceMetadata_._StackTraceMetadata_StackTraceMetadata_sh()\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n           at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```\r\n\r\nPull request: https://github.com/dotnet/runtime/pull/90430\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZSytZg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5j47JH",
                                           "createdAt":  "2023-08-12T11:38:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @steveisok, @akoeplinger, @kotlarmilos\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=371640\r\n\r\nAffected pipelines:\r\n- runtime-extra-platforms\r\n\r\nBuild error legs:\r\n- `tvos-arm64 Release AllSubsets_NativeAOT_RuntimeTests`\r\n\r\nTests failing: \r\n- `nativeaot/SmokeTests/StackTraceMetadata/StackTraceMetadata/StackTraceMetadata.sh`\r\n\r\nCrash log:\r\n\r\n```\r\nTest failed. Trying to see if dump file was created in /cores since 8/11/2023 8:00:09 PM\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/tmp/helix/working/BB1E0A01/p\r\n      \u003e /private/tmp/helix/working/BB1E0A01/w/C1E70A94/e/nativeaot/SmokeTests/StackTraceMetadata/StackTraceMetadata/StackTraceMetadata.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at nativeaot_SmokeTests_StackTraceMetadata._StackTraceMetadata_StackTraceMetadata_._StackTraceMetadata_StackTraceMetadata_sh()\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n           at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```\r\n\r\nPull request: https://github.com/dotnet/runtime/pull/90430\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssues.md#how-to-fill-out-a-known-issue-error-section).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"nativeaot/SmokeTests/StackTraceMetadata/StackTraceMetadata/StackTraceMetadata.sh [FAIL]\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eivanpovazan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`blocking-clean-ci`, `os-ios`, `area-NativeAOT-coreclr`, `Known Build Error`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-12T11:38:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lLK1m",
                                           "createdAt":  "2023-08-29T13:16:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "The regression was introduced in the following range: https://github.com/dotnet/runtime/compare/2d9acc6f789b7ed098c251151c609eb68f21f68c..bb9ba7abb3bed64ecebcd6c9d3c00be0d6c3b88d\r\nWill continue bisecting to find the root cause.",
                                           "updatedAt":  "2023-08-29T13:16:05Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[NativeAOT] Tests failing `nativeaot/SmokeTests/StackTraceMetadata/StackTraceMetadata/StackTraceMetadata.sh` on tvos-arm64",
        "labels":  [
                       "disabled-test",
                       "os-ios",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90677",
        "createdAt":  "2023-08-16T16:45:29Z",
        "number":  90677,
        "author":  "cshung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-16T17:09:57Z",
        "body":  "This will allow us to diagnose issues in NativeAOT that require a large volume of stress log (e.g. heap corruptions)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZDEpzQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kMSnN",
                                           "createdAt":  "2023-08-16T16:45:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis will allow us to diagnose issues in NativeAOT that require a large volume of stress log (e.g. heap corruptions)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-16T16:45:36Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Implement memory-mapped stress log for NativeAOT",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90958",
        "createdAt":  "2023-08-22T21:44:50Z",
        "number":  90958,
        "author":  "filipnavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-14T08:26:20Z",
        "body":  "The IL Compiler evaluates ILLink substitutions lazily. The problem is that the code is hit on method compilation early on from multiple threads. Since the value takes a while to compute it happens to compute the substitutions about the same number of times as the number of processor cores on the machine (32 in my case).\r\n\r\nStack trace (`LockFreeReaderHashtable` lazily evaluates on each thread):\r\n\r\n```\r\n\u003e\tILCompiler.Compiler.dll!ILCompiler.FeatureSwitchManager.AssemblyFeatureInfo.AssemblyFeatureInfo(Internal.TypeSystem.Ecma.EcmaModule module, ILCompiler.Logger logger, System.Collections.Generic.IReadOnlyDictionary\u003cstring, bool\u003e featureSwitchValues, ILCompiler.BodyAndFieldSubstitutions globalSubstitutions) Line 941\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.FeatureSwitchManager.FeatureSwitchHashtable.CreateValueFromKey(Internal.TypeSystem.Ecma.EcmaModule key) Line 910\tC#\r\n \tILCompiler.TypeSystem.dll!Internal.TypeSystem.LockFreeReaderHashtable\u003cInternal.TypeSystem.Ecma.EcmaModule, ILCompiler.FeatureSwitchManager.AssemblyFeatureInfo\u003e.CreateValueAndEnsureValueIsInTable(Internal.TypeSystem.Ecma.EcmaModule key) Line 562\tC#\r\n \tILCompiler.TypeSystem.dll!Internal.TypeSystem.LockFreeReaderHashtable\u003cInternal.TypeSystem.Ecma.EcmaModule, ILCompiler.FeatureSwitchManager.AssemblyFeatureInfo\u003e.GetOrCreateValue(Internal.TypeSystem.Ecma.EcmaModule key) Line 581\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.FeatureSwitchManager.GetSubstitution(Internal.TypeSystem.MethodDesc method) Line 38\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.FeatureSwitchManager.GetMethodIL(Internal.TypeSystem.MethodDesc method) Line 70\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.Compilation.CombinedILProvider.GetMethodIL(Internal.TypeSystem.MethodDesc method) Line 580\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.Compilation.ILCache.CreateValueFromKey(Internal.TypeSystem.MethodDesc key) Line 557\tC#\r\n \tILCompiler.TypeSystem.dll!Internal.TypeSystem.LockFreeReaderHashtable\u003cInternal.TypeSystem.MethodDesc, ILCompiler.Compilation.ILCache.MethodILData\u003e.CreateValueAndEnsureValueIsInTable(Internal.TypeSystem.MethodDesc key) Line 562\tC#\r\n \tILCompiler.TypeSystem.dll!Internal.TypeSystem.LockFreeReaderHashtable\u003cInternal.TypeSystem.MethodDesc, ILCompiler.Compilation.ILCache.MethodILData\u003e.GetOrCreateValue(Internal.TypeSystem.MethodDesc key) Line 581\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.Compilation.GetMethodIL(Internal.TypeSystem.MethodDesc method) Line 87\tC#\r\n \tILCompiler.Compiler.dll!Internal.IL.ILImporter.ILImporter(ILCompiler.ILScanner compilation, Internal.TypeSystem.MethodDesc method, Internal.IL.MethodIL methodIL) Line 70\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.ILScanner.CompileSingleMethod(ILCompiler.DependencyAnalysis.ScannedMethodNode methodCodeNodeNeedingCode) Line 122\tC#\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZKusow==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kq6yj",
                                           "createdAt":  "2023-08-22T21:44:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe IL Compiler evaluates ILLink substitutions lazily. The problem is that the code is hit on method compilation early on from multiple threads. Since the value takes a while to compute it happens to compute the substitutions about the same number of times as the number of processor cores on the machine (32 in my case).\r\n\r\nStack trace (`LockFreeReaderHashtable` lazily evaluates on each thread):\r\n\r\n```\r\n\u003e\tILCompiler.Compiler.dll!ILCompiler.FeatureSwitchManager.AssemblyFeatureInfo.AssemblyFeatureInfo(Internal.TypeSystem.Ecma.EcmaModule module, ILCompiler.Logger logger, System.Collections.Generic.IReadOnlyDictionary\u003cstring, bool\u003e featureSwitchValues, ILCompiler.BodyAndFieldSubstitutions globalSubstitutions) Line 941\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.FeatureSwitchManager.FeatureSwitchHashtable.CreateValueFromKey(Internal.TypeSystem.Ecma.EcmaModule key) Line 910\tC#\r\n \tILCompiler.TypeSystem.dll!Internal.TypeSystem.LockFreeReaderHashtable\u003cInternal.TypeSystem.Ecma.EcmaModule, ILCompiler.FeatureSwitchManager.AssemblyFeatureInfo\u003e.CreateValueAndEnsureValueIsInTable(Internal.TypeSystem.Ecma.EcmaModule key) Line 562\tC#\r\n \tILCompiler.TypeSystem.dll!Internal.TypeSystem.LockFreeReaderHashtable\u003cInternal.TypeSystem.Ecma.EcmaModule, ILCompiler.FeatureSwitchManager.AssemblyFeatureInfo\u003e.GetOrCreateValue(Internal.TypeSystem.Ecma.EcmaModule key) Line 581\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.FeatureSwitchManager.GetSubstitution(Internal.TypeSystem.MethodDesc method) Line 38\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.FeatureSwitchManager.GetMethodIL(Internal.TypeSystem.MethodDesc method) Line 70\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.Compilation.CombinedILProvider.GetMethodIL(Internal.TypeSystem.MethodDesc method) Line 580\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.Compilation.ILCache.CreateValueFromKey(Internal.TypeSystem.MethodDesc key) Line 557\tC#\r\n \tILCompiler.TypeSystem.dll!Internal.TypeSystem.LockFreeReaderHashtable\u003cInternal.TypeSystem.MethodDesc, ILCompiler.Compilation.ILCache.MethodILData\u003e.CreateValueAndEnsureValueIsInTable(Internal.TypeSystem.MethodDesc key) Line 562\tC#\r\n \tILCompiler.TypeSystem.dll!Internal.TypeSystem.LockFreeReaderHashtable\u003cInternal.TypeSystem.MethodDesc, ILCompiler.Compilation.ILCache.MethodILData\u003e.GetOrCreateValue(Internal.TypeSystem.MethodDesc key) Line 581\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.Compilation.GetMethodIL(Internal.TypeSystem.MethodDesc method) Line 87\tC#\r\n \tILCompiler.Compiler.dll!Internal.IL.ILImporter.ILImporter(ILCompiler.ILScanner compilation, Internal.TypeSystem.MethodDesc method, Internal.IL.MethodIL methodIL) Line 70\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.ILScanner.CompileSingleMethod(ILCompiler.DependencyAnalysis.ScannedMethodNode methodCodeNodeNeedingCode) Line 122\tC#\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efilipnavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tenet-performance`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-22T21:44:59Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "NativeAOT: ILLink substitutions are evaluated multiple times",
        "labels":  [
                       "tenet-performance",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91013",
        "createdAt":  "2023-08-23T20:22:36Z",
        "number":  91013,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-23T20:22:51Z",
        "body":  "See https://github.com/dotnet/runtime/pull/90935#issuecomment-1690112995 for context.\r\n\r\nThe test should be added to dotnet/sdk repo. dotnet/runtime infrastructure is not setup for tests like that.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZMRMfg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kxEx-",
                                           "createdAt":  "2023-08-23T20:22:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-infrastructure-libraries\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSee https://github.com/dotnet/runtime/pull/90935#issuecomment-1690112995 for context.\r\n\r\nThe test should be added to dotnet/sdk repo. dotnet/runtime infrastructure is not setup for tests like that.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejkotas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Infrastructure-libraries`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-23T20:22:42Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add test for --make-repro-path ILC option",
        "labels":  [
                       "help wanted",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91069",
        "createdAt":  "2023-08-24T16:12:43Z",
        "number":  91069,
        "author":  "agocke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6mOrw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hwoodiwiss",
                                            "createdAt":  "2023-08-26T17:23:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vaind",
                                            "createdAt":  "2023-10-26T10:32:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bruno-garcia",
                                            "createdAt":  "2023-10-27T01:55:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StefanGreve",
                                            "createdAt":  "2024-08-29T10:29:41Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2024-11-19T02:22:25Z",
        "body":  "The libraries tests are currently running under Native AOT with a variety of workarounds and special cases. For this to be sustainable, we need a stable, compatible testing suite for Native AOT testing.\r\n\r\nRunner hard requirements:\r\n- [ ] XUnit-compatible, meaning that few changes are required to enable our existing testing suite, and that we can continue to use the existing XUnit runner in the current non-AOT test base to ensure no testing regressions.\r\n- [ ] AOT-compatible, meaning it produces no trim or AOT warnings\r\n- [ ] If a test is \"skipped\", the code generation for the test suite needs to \"skip\" the calling path. This enables disabling tests which are not trim compatible.\r\n\r\n\r\nNice to have:\r\n- [ ] If we could eventually unify on one runner for both AOT and non-AOT scenarios, this would be ideal. However, full IDE and tooling support would be necessary.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZPgJCQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5k2hnM",
                                           "createdAt":  "2023-08-24T16:19:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe libraries tests are currently running under Native AOT with a variety of workarounds and special cases. For this to be sustainable, we need a stable, compatible testing suite for Native AOT testing.\r\n\r\nRunner hard requirements:\r\n- [ ] XUnit-compatible, meaning that few changes are required to enable our existing testing suite, and that we can continue to use the existing XUnit runner in the current non-AOT test base to ensure no testing regressions.\r\n- [ ] AOT-compatible, meaning it produces no trim or AOT warnings\r\n\r\n\r\nNice to have:\r\n- [ ] If we could eventually unify on one runner for both AOT and non-AOT scenarios, this would be ideal. However, full IDE and tooling support would be necessary.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eagocke\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-24T16:19:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5k6_Tp",
                                           "createdAt":  "2023-08-25T11:04:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Perhaps a 9.0.0 milestone? It\u0027s a bit too late for 8 ;-)",
                                           "updatedAt":  "2023-08-25T11:04:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5k-AkJ",
                                           "createdAt":  "2023-08-25T21:58:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMQ8JA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2023-08-25T21:59:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bruno-garcia",
                                                                               "createdAt":  "2023-10-27T01:55:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "jamescrosswell",
                                                                               "createdAt":  "2023-11-09T21:17:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "agocke",
                                           "body":  "Just infra, so there\u0027s still time. If it ends up changing shipping code, then yeah, probably too late.",
                                           "updatedAt":  "2023-08-25T21:58:10Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Add AOT-compatible XUnit runner",
        "labels":  [
                       "test-enhancement",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91762",
        "createdAt":  "2023-09-07T21:49:35Z",
        "number":  91762,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-29T15:18:20Z",
        "body":  "When `EventSourceSupport` MSBuild property is set to true, the build currently errors out. It is possible to bypass this by setting `_SuppressNativeLibEventSourceError` property to true but there are known issues. It is not recommended to ship native libraries like this unless one can make sure no other native library (or a CoreCLR instance) with EventSourceSupport gets loaded into the process. Users might consider shipping two versions of their native library DLL and only use the one with EventSourceSupport enabled when troubleshooting a specific issue.\r\n\r\nThis is a tracking uber issue that groups the known existing problems:\r\n\r\n- [ ] https://github.com/dotnet/runtime/issues/88087\r\n- [ ] (Windows only) https://github.com/dotnet/runtime/issues/89346\r\n\r\nOur guidance for `EventSource/EventPipe` with native AOT shared libraries is as follows,\r\n- Only use the `EventSourceSupport` enabled when troubleshooting a specific issue related to shared libraries.\r\n- Any native AOT console with `EventSourceSupport` enabled will always win even if the process has other native AOT shared libraries with `EventSourceSupport` enabled.\r\n- If there are multiple native AOT shared libraries present in a single process, then the first shared library that gets loaded will `win` to emit traces. Traces from other libraries will not be seen.\r\n- [Windows] When collecting tracing in a shared library, collection should stop earlier in the application (only collect for a specific time period or use the ctrl-C option with a tool like dotnet-trace when the interesting traces are collected). Specifically, in windows, the image unload event for a shared library (or at process exit), will not make a call to shut down the `EventPipe` in an orderly manner, causing a corrupted trace file.\r\n\r\nGiven these challenges, it\u0027s probably best to keep the current warnings we have for shared library around `EventSource` support.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZfjmTw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5l-OZP",
                                           "createdAt":  "2023-09-07T21:49:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen `EventSourceSupport` MSBuild property is set to true, the build currently errors out. It is possible to bypass this by setting `_SuppressNativeLibEventSourceError` property to true but there are known issues. It is not recommended to ship native libraries like this unless one can make sure no other native library (or a CoreCLR instance) with EventSourceSupport gets loaded into the process. Users might consider shipping two versions of their native library DLL and only use the one with EventSourceSupport enabled when troubleshooting a specific issue.\r\n\r\nThis is a tracking uber issue that groups the known existing problems:\r\n\r\n- [ ] https://github.com/dotnet/runtime/issues/88087\r\n- [ ] (Windows only) https://github.com/dotnet/runtime/issues/89346\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-07T21:49:39Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Support EventSource/event pipe in shared libraries",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93447",
        "createdAt":  "2023-10-13T07:29:25Z",
        "number":  93447,
        "author":  "ivanpovazan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCzQfvA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kotlarmilos",
                                            "createdAt":  "2023-10-13T08:43:50Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-23T07:42:25Z",
        "body":  "### Description\r\n\r\n1. Currently we run libraries and functional tests on CI only for `ios-arm64` and `tvos-arm64` platforms.\r\nIn order to improve test coverage we should enable testing on:\r\n    - `maccatalyst`\r\n    - `iossimulators`\r\n    - `tvossimulators`\r\n    \r\n2. Additionally, running libraries and functional tests locally is currently not supported (on CI we build on Helix).\r\nBuilding the test project with:\r\n    ```\r\n    ./dotnet.sh build /t:Test -c Debug /p:TargetOS=ios /p:TargetArchitecture=arm64 src/tests/FunctionalTests/iOS/Device/AOT/iOS.Device.Aot.Test.csproj /p:UseNativeAOTRuntime=true /p:RunAOTCompilation=false /p:RuntimeFlavor=CoreCLR\r\n    ```\r\n    Fails with:\r\n    ```\r\n    /Users/ivan/repos/runtime-naot/src/mono/msbuild/apple/build/AppleBuild.targets(279,11): error MSB4057: The target \"SetupProperties\" does not exist in the project. [/Users/ivan/repos/runtime-naot/src/tests/FunctionalTests/iOS/Device/AOT/iOS.Device.Aot.Test.csproj]\r\n    ```\r\n\r\n### Tasks\r\n\r\n- [ ] Enable running libraries and functional tests on CI for maccatalyst, iossimulators and tvossimulators with NativeAOT\r\n- [ ] Enable building/running libraries and functional tests locally for all iOS-like platforms with NativeAOT\r\n\r\nNOTE: Linking relevant changes needed to run a functional test locally: https://github.com/dotnet/runtime/pull/93658/files#diff-0360540626912334f1c240468f218cbeb3966bbbc7d809fdbac435b1b5e3a95eR34-R53",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOc-PsYg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5o91fR",
                                           "createdAt":  "2023-10-13T07:29:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @steveisok, @akoeplinger, @kotlarmilos\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe currently do not run libraries and functional tests on CI with NativeAOT targeting maccatalyst, iossimulators and tvossimulators.\r\nIn order to improve test coverage we should enable testing on these platforms as well.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eivanpovazan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003ekotlarmilos\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`os-ios`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-13T07:29:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z49V9",
                                           "createdAt":  "2024-02-14T17:46:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kotlarmilos",
                                           "body":  "Depends on https://github.com/dotnet/runtime/issues/91871.",
                                           "updatedAt":  "2024-02-14T17:46:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z4-xi",
                                           "createdAt":  "2024-02-14T17:50:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kotlarmilos",
                                           "body":  "Related to https://github.com/dotnet/runtime/issues/81075.",
                                           "updatedAt":  "2024-02-14T17:50:11Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[NativeAOT] Enable running libraries and functional tests locally and on CI",
        "labels":  [
                       "os-ios",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94052",
        "createdAt":  "2023-10-26T15:42:30Z",
        "number":  94052,
        "author":  "LouChiSoft",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODB1C1Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ForNeVeR",
                                            "createdAt":  "2023-11-05T16:52:36Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Ruihan-Yin",
                                            "createdAt":  "2023-11-07T23:20:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HighPerfDotNet",
                                            "createdAt":  "2023-11-28T01:05:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BoyBaykiller",
                                            "createdAt":  "2024-09-22T18:09:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sweemer",
                                            "createdAt":  "2024-10-06T22:50:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HotCakeX",
                                            "createdAt":  "2025-03-04T18:24:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TickThunder",
                                            "createdAt":  "2025-04-29T03:58:15Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2024-12-30T03:26:59Z",
        "body":  "Hi, hopefully this is the right place to ask, apologies if it isn\u0027t. I was reading up on the Dynamic PGO feature added with .NET 7 and I was wondering if you could use the same process to imrpove AOT code. Obviously you couldn\u0027t do it at runtime because there is no IL to optimise. But I was thinking could you compile your program in JIT mode, run it on the machine you want to PGO for e.g. Windows x64. And then take the optimsations created by Dynamic PGO and feed that into the AOT compiler as a sort of \"Here\u0027s something we made earlier\" approach and combine that with the AOT specific PGO techniques.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmOKc3Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5qPORN",
                                           "createdAt":  "2023-10-27T06:35:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHi, hopefully this is the right place to ask, apologies if it isn\u0027t. I was reading up on the Dynamic PGO feature added with .NET 7 and I was wondering if you could use the same process to imrpove AOT code. Obviously you couldn\u0027t do it at runtime because there is no IL to optimise. But I was thinking could you compile your program in JIT mode, run it on the machine you want to PGO for e.g. Windows x64. And then take the optimsations created by Dynamic PGO and feed that into the AOT compiler as a sort of \"Here\u0027s something we made earlier\" approach and combine that with the AOT specific PGO techniques.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLouChiSoft\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-27T06:35:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tAsb4",
                                           "createdAt":  "2023-11-28T01:06:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HighPerfDotNet",
                                           "body":  "+1\r\n\r\nThis seems to be a FAR better way than what is currently available: Static PGO collection that relies on dotnet-pgo post-processing - this does not currently appear to collect and provide same quality level info that JIT sees with Dynamic PGO.",
                                           "updatedAt":  "2023-11-28T01:06:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ul_Ow",
                                           "createdAt":  "2024-11-22T06:48:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sweemer",
                                           "body":  "If it is hard to leverage the existing Dynamic PGO functionality for Native AOT apps, then would it instead be easier to expose specific optimizations through build properties? Of course this can no longer be called \"dynamic\", and there is no guarantee that setting these build properties will result in better performance, but at least it gives users the option to experiment and tune their applications in a way that is not currently possible.",
                                           "updatedAt":  "2024-11-22T06:48:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UpcEj",
                                           "createdAt":  "2024-11-22T14:28:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HighPerfDotNet",
                                           "body":  "It\u0027s most likely a lot of work, but fixing that bug in Static PGO is probably a lot easier, would have been great to have it fixed whilst waiting for even better \"unified\" solution ... ",
                                           "updatedAt":  "2024-11-22T14:28:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UpmOI",
                                           "createdAt":  "2024-11-22T14:49:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD8Gezw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HighPerfDotNet",
                                                                               "createdAt":  "2024-11-22T15:02:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "voroninp",
                                           "body":  "But won\u0027t it be solved by persisting JIT output between executions? (I know, .NET team decided not to do it)\n\nI run my container for the first time - JIT+PGO produces binaries. (sort of Ready 2 Run mode)\nI restart my container - .NET reuses binaries for fats start).\n\n\n",
                                           "updatedAt":  "2024-11-22T21:02:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UptOF",
                                           "createdAt":  "2024-11-22T15:02:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQCoGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "voroninp",
                                                                               "createdAt":  "2024-11-22T15:55:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sweemer",
                                                                               "createdAt":  "2024-11-22T23:49:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TickThunder",
                                                                               "createdAt":  "2025-04-29T02:34:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "HighPerfDotNet",
                                           "body":  "That would be ideal in my view, but the amount of work is surely waaaaaaaaaaaay more than fixing that Static PGO bug? Native AOT is undermined by not having PGO - the more efforts go into dynamic PGO the bigger the gap, which is very sad because Native AOT has got some amazing advantages, yet it\u0027s been held back by that bug... ",
                                           "updatedAt":  "2024-11-22T15:02:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Y4pzd",
                                           "createdAt":  "2024-12-30T03:26:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VAllens",
                                           "body":  "Static PGO are a bit easier to implement than dynamic PGO.",
                                           "updatedAt":  "2024-12-30T03:26:57Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Could Dynamic PGO be used to augment AOT compilation?",
        "labels":  [
                       "tenet-performance",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94399",
        "createdAt":  "2023-11-06T09:29:16Z",
        "number":  94399,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-26T07:16:24Z",
        "body":  "The fix from #93540 needs to be extended to `DevitualizationManager::ResolveVirtualMethod`.\r\n\r\nThis has additional problems because we apparently want to be able to devirtualize on canonical versions of code. I wonder if we have a similar bug in ResolveConstraintMethodApprox.\r\n\r\nLook for this issue number to find a test that needs to work around. This affects both Native AOT and crossgen2.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOavRwAA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5q9HAA",
                                           "createdAt":  "2023-11-06T09:29:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe fix from #93540 needs to be extended to `DevitualizationManager::ResolveVirtualMethod`.\r\n\r\nThis has additional problems because we apparently want to be able to devirtualize on canonical versions of code. I wonder if we have a similar bug in ResolveConstraintMethodApprox.\r\n\r\nLook for this issue number to find a test that needs to work around. This affects both Native AOT and crossgen2.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-06T09:29:21Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Incorrect devirtualization in corner cases",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95039",
        "createdAt":  "2023-11-20T22:52:40Z",
        "number":  95039,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-17T18:53:28Z",
        "body":  "Lately we have seen a few stress bugs that reproduce only when EventSource is enabled and events are consumed (i.e #94241, #94873)\r\n\r\nThe set of tests that enable EventSource is relatively small though, so even if there is a bug, the repro rate could be one occurrence per few days or longer.\r\n\r\nIf that is possible and is not too expensive in terms of increasing the time that tests take, I\u0027d recommend enabling EventSource on a few more tests. The following tests were known in the past to be relatively \"intense\" - enough to uncover various stress issues. Perhaps we can do just these?\r\n\r\n```\r\nSystem.Collections\\tests\\System.Collections.Tests.csproj\r\nSystem.Collections.Immutable\\tests\\System.Collections.Immutable.Tests.csproj\r\nSystem.Collections.Concurrent\\tests\\System.Collections.Concurrent.Tests.csproj\r\nSystem.Runtime\\tests\\System.Runtime.Tests.csproj\r\nSystem.Memory\\tests\\System.Memory.Tests.csproj\r\nSystem.Reflection.Metadata\\tests\\System.Reflection.Metadata.Tests.csproj\r\n```\r\n\r\nAny suggestions on what should be added/removed in this set are welcome.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObIDO1A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5sef8o",
                                           "createdAt":  "2023-11-20T22:52:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-collections\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nLately we have seen a few stress bugs that reproduce only when EventSource is enabled and events are consumed (i.e #94241, #94873)\r\n\r\nThe set of tests that enable EventSource is relatively small though, so even if there is a bug, the repro rate could be one occurrence per few days or longer.\r\n\r\nIf that is possible and is not too expensive in terms of increasing the time that tests take, I\u0027d recommend enabling EventSource on a few more tests. The following tests were known in the past to be relatively \"intense\" - enough to uncover various stress issues. Perhaps we can do just these?\r\n\r\n```\r\nSystem.Collections\\tests\\System.Collections.Tests.csproj\r\nSystem.Collections.Immutable\\tests\\System.Collections.Immutable.Tests.csproj\r\nSystem.Collections.Concurrent\\tests\\System.Collections.Concurrent.Tests.csproj\r\nSystem.Runtime\\tests\\System.Runtime.Tests.csproj\r\nSystem.Memory\\tests\\System.Memory.Tests.csproj\r\nSystem.Reflection.Metadata\\tests\\System.Reflection.Metadata.Tests.csproj\r\n```\r\n\r\nAny suggestions on what should be added/removed in this set are welcome.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVSadov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Collections`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-20T22:52:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5segCT",
                                           "createdAt":  "2023-11-20T22:53:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nLately we have seen a few stress bugs that reproduce only when EventSource is enabled and events are consumed (i.e #94241, #94873)\r\n\r\nThe set of tests that enable EventSource is relatively small though, so even if there is a bug, the repro rate could be one occurrence per few days or longer.\r\n\r\nIf that is possible and is not too expensive in terms of increasing the time that tests take, I\u0027d recommend enabling EventSource on a few more tests. The following tests were known in the past to be relatively \"intense\" - enough to uncover various stress issues. Perhaps we can do just these?\r\n\r\n```\r\nSystem.Collections\\tests\\System.Collections.Tests.csproj\r\nSystem.Collections.Immutable\\tests\\System.Collections.Immutable.Tests.csproj\r\nSystem.Collections.Concurrent\\tests\\System.Collections.Concurrent.Tests.csproj\r\nSystem.Runtime\\tests\\System.Runtime.Tests.csproj\r\nSystem.Memory\\tests\\System.Memory.Tests.csproj\r\nSystem.Reflection.Metadata\\tests\\System.Reflection.Metadata.Tests.csproj\r\n```\r\n\r\nAny suggestions on what should be added/removed in this set are welcome.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVSadov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-20T22:53:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5segH7",
                                           "createdAt":  "2023-11-20T22:53:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "CC: @LakshanF ",
                                           "updatedAt":  "2023-11-20T22:53:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sgM7U",
                                           "createdAt":  "2023-11-21T07:36:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Should we instead have a dedicated pipeline leg that runs everything with EventSource enabled? It might also need to enable some listeners because this would all likely be no-op without listeners (we just compile more code that then never runs).\r\n\r\nThe tests where we currently enable EventSource all have listeners. The tests where we didn\u0027t enable EventSource didn\u0027t have any listeners as part of the test.",
                                           "updatedAt":  "2023-11-21T07:36:38Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[NativeAOT] Enable EventSource on more tests",
        "labels":  [
                       "EventPipe",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95174",
        "createdAt":  "2023-11-23T12:52:11Z",
        "number":  95174,
        "author":  "Balkoth",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0XVhA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "KeterSCP",
                                            "createdAt":  "2023-11-28T12:56:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "Fabi",
                                            "createdAt":  "2023-12-01T15:22:49Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-01-31T03:12:47Z",
        "body":  "### Description\n\nPublishing a project with aot tries to call `findvcvarsall.bat` in `C:\\Users\\_USER_\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\8.0.0\\build` which in turn is blocked in a corporate environment by AppLocker rules.\n\n### Reproduction Steps\n\n- Create new console project with `dotnet new console --aot`\r\n- Publish the project with `dotnet publish /p:RuntimeIdentifier=win-x64 /p:SelfContained=true`\n\n### Expected behavior\n\nProject is successfully published.\n\n### Actual behavior\n\nThe build is cancelled, because at least one batch file is run from a location where, under default corporate AppLocker rules, script and exe execution is not allowed.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET SDK:\r\n Version:           8.0.100\r\n Commit:            57efcf1350\r\n Workload version:  8.0.100-manifests.8d38d0cc\r\n\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.100\\\n\n### Other information\n\nNew workflows should be created in a way that developers can take advantage, without having administrative rights on their machines and without bothering it helpdesk and sysadmin people.\r\n\r\nIn a world where it security is a top priority it is a bad habit to expect developers in corporate environments to have excess rights on their machines just to develop software.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOclcC7g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5sw2Ky",
                                           "createdAt":  "2023-11-23T17:12:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "\u003e In a world where it security is a top priority it is a bad habit to expect developers in corporate environments to have excess rights on their machines just to develop software.\r\n\r\nArguably it also a bad habit to block the location that is expected to contain user specific files on that machine, doing so is what forces the user to need permissions to find somewhere else to put files so they can do their job. I suggest you contact your security department and talk to them about their inappropriate configuration.",
                                           "updatedAt":  "2023-11-23T17:12:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sw39L",
                                           "createdAt":  "2023-11-23T17:19:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEMzSeA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Fabi",
                                                                               "createdAt":  "2023-12-01T15:23:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AZphanus",
                                                                               "createdAt":  "2023-12-27T15:47:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "kumja1",
                                                                               "createdAt":  "2025-04-03T16:39:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Balkoth",
                                           "body":  "It\u0027s people like you who make corporate environments insecure. You might not care about security, but we here do. No one here is allowed to execute scripts or executables from untrusted locations.\r\n\r\nAllowing users to run that stuff from a userdir, where users can put anything downloaded from the web is a nightmare. Thats why AppLocker and comparable solutions exist.",
                                           "updatedAt":  "2023-11-23T19:42:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxFC7",
                                           "createdAt":  "2023-11-23T18:27:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNfNAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2023-11-23T20:17:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sewer56",
                                                                               "createdAt":  "2023-11-23T23:59:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e No one here is allowed to execute scripts or executables from untrusted locations.\n\nWhat\u0027s the definition of \"executable\" for managed application? Is it the launcher dotnet.exe, or the dll? What if a process load an unmanaged dll, or a managed assembly?\n\nIf you are able to run roslyn analyzer installed via NuGet package, you are already violating this rule.\n\n---\n\nThe AOT compiler is shipped via an additional package. It\u0027s not shipped with the SDK which should be set to trusted.\n\nShipping development-time tools with package management system isn\u0027t unusual.",
                                           "updatedAt":  "2023-11-23T18:27:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxGxx",
                                           "createdAt":  "2023-11-23T18:38:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Balkoth",
                                           "body":  "I am not allowed to give any more insight to our security concept here as this information could be used by a potential attacker.\r\n\r\nIn my experience its entirely unusual that nuget packages run batch scripts, or otherwise i would have already stumbled over it. ",
                                           "updatedAt":  "2023-11-23T18:38:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxIpH",
                                           "createdAt":  "2023-11-23T18:49:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sylveon",
                                           "body":  "What alternative do you suggest? Trying to find a VS install from a NuGet package is gonna need to execute some code one way or another.",
                                           "updatedAt":  "2023-11-23T18:49:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxKfT",
                                           "createdAt":  "2023-11-23T19:00:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Balkoth",
                                           "body":  "If a Visual Studio installation is required, then why not just include this with it in ProgramFiles? Seems like a core feature to me.",
                                           "updatedAt":  "2023-11-23T19:00:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxK0j",
                                           "createdAt":  "2023-11-23T19:02:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sylveon",
                                           "body":  "Visual Studio could be installed elsewhere than in Program Files, hence the need for a `findvcvarsall.bat` ;)",
                                           "updatedAt":  "2023-11-23T19:02:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxLcS",
                                           "createdAt":  "2023-11-23T19:07:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Balkoth",
                                           "body":  "If this is included in the vsinstalldir where you are already allowed to execute, then there will be no problem. Does not matter if its programfiles or another directory. If it\u0027s essential to find a vs install, then include such a script in the sdk.\r\n\r\nNot providing such a seemingly essential method, sparks things like this script an a bad location. And if another package needs to find a vs install they roll their own scirpt. Now you have two scripts, each with their own bugs.",
                                           "updatedAt":  "2023-11-23T19:11:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxPOC",
                                           "createdAt":  "2023-11-23T19:31:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nPublishing a project with aot tries to call `findvcvarsall.bat` in `C:\\Users\\_USER_\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\8.0.0\\build` which in turn is blocked in a corporate environment by AppLocker rules.\n\n### Reproduction Steps\n\n- Create new console project with `dotnet new console --aot`\r\n- Publish the project with `dotnet publish /p:RuntimeIdentifier=win-x64 /p:SelfContained=true`\n\n### Expected behavior\n\nProject is successfully published.\n\n### Actual behavior\n\nThe build is cancelled, because at least one batch file is run from a location where, under default corporate AppLocker rules, script and exe execution is not allowed.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET SDK:\r\n Version:           8.0.100\r\n Commit:            57efcf1350\r\n Workload version:  8.0.100-manifests.8d38d0cc\r\n\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.100\\\n\n### Other information\n\nNew workflows should be created in a way that developers can take advantage, without having administrative rights on their machines and without bothering it helpdesk and sysadmin people.\r\n\r\nIn a world where it security is a top priority it is a bad habit to expect developers in corporate environments to have excess rights on their machines just to develop software.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eBalkoth\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-23T19:31:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxYUb",
                                           "createdAt":  "2023-11-23T20:36:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "You can set `IlcUseEnvironmentalTools` property in your .csproj file to true (this will disable invocation of `findvcvarsall.bat`) and setup the VS native tools build environment using alternative method that is compatible with your setup.\r\n\r\nAs others pointed out, it is very common for nuget packages to include code that executes during the build. I agree that .bat files in nuget packages may be unusual, but it is very common for nuget packages to include Powershell scripts that have same capabilities as .bat scripts and carry the same security risk.\r\n\r\n\u003e If it\u0027s essential to find a vs install, then include such a script in the sdk.\r\n\r\nIt does not make sense to include the findvcvarsall.bat script in the sdk. findvcvarsall script is an implementation detail of the native AOT compiler package, so it should come with the package.",
                                           "updatedAt":  "2023-11-23T20:38:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxaBI",
                                           "createdAt":  "2023-11-23T20:48:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Balkoth",
                                           "body":  "Going through hacks to trick the setup into this is not an option for me. If this cant work out of the box, then i can not use this feature.\r\n\r\nIf you are saying this is so common, then how comes that this is the first time this impacts me? Where are those very common nuget packages that do this? Or are you the special unicorn that does this?\r\n\r\nI\u0027m really questioning myself: As this is a Microsoft product, are you at Microsoft allowed to run random executables and scripts from untrusted locations? Is this in line with Microsoft company policies?",
                                           "updatedAt":  "2023-11-23T20:55:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxj6n",
                                           "createdAt":  "2023-11-23T21:40:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Here is a random example of nuget package that contains Powershell scripts: https://nuget.info/packages/xunit.analyzers/1.6.0 . Look in the tools directory.\r\n\r\n\u003e are you at Microsoft allowed to run random executables and scripts from untrusted locations?\r\n\r\nWe are not allowed to download random untrusted executables. `Microsoft.DotNet.ILCompiler` package is signed by Microsoft certificate. \r\n\r\nFrom https://nuget.info/packages/Microsoft.DotNet.ILCompiler/8.0.0 :\r\n![image](https://github.com/dotnet/runtime/assets/6668460/c3c346ad-96f5-49b5-ae21-4fc6a8aea7c4)\r\n\r\nThus the package content, including `findvcvarsall.bat` script, is trusted.",
                                           "updatedAt":  "2023-11-23T21:40:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxlV2",
                                           "createdAt":  "2023-11-23T21:42:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNfMSw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BitesizedLion",
                                                                               "createdAt":  "2023-11-23T21:57:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sewer56",
                                                                               "createdAt":  "2023-11-23T23:52:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "\u003e Going through hacks to trick the setup into this is not an option for me. If this cant work out of the box, then i can not use this feature.\r\n\r\nIf it was a \"hack\", then I doubt it would be so easy to work around - it would probably require you to modify some .targets files or similar, or something much more atrocious, if support for this flag wasn\u0027t built in.\r\n\r\nIs NativeAOT enabled out of the box? No. You have to set a flag for it in the csproj or when you publish; therefore you can\u0027t use it anyway since it \"doesn\u0027t work out of the box\" and requires \"hacks\" like settings a flag.\r\n\r\nThe above 2 statements are intended to point out the fallacy of your statement.\r\n\r\n\u003e If you are saying this is so common, then how comes that this is the first time this impacts me? Where are those very common nuget packages that do this? Or are you the special unicorn that does this?\r\n\r\nDid you know that nuget packages can actually download exes, dlls, and whatever else they want, and run them at compile time? They can even execute arbitrary C# code, which gets compiled and executed by msbuild. Hope that\u0027s in line with your company policy. One batch file is not an issue compared to all of this. Downloading an untrusted nuget package is the security issue, once you\u0027ve downloaded it, you\u0027ve already failed security.\r\n\r\nMost nuget packages, which aren\u0027t just a simple C# project compiled into a nuget package, have at least target files (which can already basically do anything). For example, I went onto nuget.org, and the [second top package](https://www.nuget.org/packages/Microsoft.Extensions.DependencyInjection) has targets files, which, again, can run arbitrary code, so if you haven\u0027t checked every file in every nuget package before installing it, then you have no idea what code is being run.\r\n\r\nIf you want a non-microsoft one, then top ~4th non-Microsoft one (depending how you count), [AWSSDK.Core](https://www.nuget.org/packages/AWSSDK.Core), has a powershell script in it.",
                                           "updatedAt":  "2023-11-23T21:46:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxorv",
                                           "createdAt":  "2023-11-23T21:50:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Balkoth",
                                           "body":  "\u003e Here is a random example of nuget package that contains Powershell scripts: https://nuget.info/packages/xunit.analyzers/1.6.0 . Look in the tools directory.\r\n\u003e \r\n\u003e \u003e are you at Microsoft allowed to run random executables and scripts from untrusted locations?\r\n\u003e \r\n\u003e We are not allowed to download random untrusted executables. `Microsoft.DotNet.ILCompiler` package is signed by Microsoft certificate.\r\n\u003e \r\n\u003e From https://nuget.info/packages/Microsoft.DotNet.ILCompiler/8.0.0 : ![image](https://user-images.githubusercontent.com/6668460/285313162-c3c346ad-96f5-49b5-ae21-4fc6a8aea7c4.png)\r\n\u003e \r\n\u003e Thus the package content, including `findvcvarsall.bat` script, is trusted.\r\n\r\nHow is this enforced once the nuget package is downloaded and in the .nuget folder? Or is this just a soft rule?",
                                           "updatedAt":  "2023-11-23T21:50:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxqBz",
                                           "createdAt":  "2023-11-23T22:01:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNfM1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BitesizedLion",
                                                                               "createdAt":  "2023-11-23T22:02:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sewer56",
                                                                               "createdAt":  "2023-11-23T23:58:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "\u003e @hamarb123 And when everybody jumps off the bridge, you jump too, because why not?\r\n\r\nYou\u0027re the one jumping off the bridge by not checking the packages are safe... If you\u0027re not validating the trustworthiness of every part of each nuget package, or deciding that you trust some providers, you have no idea what you\u0027re running on your computer.\r\n\r\nIf you had validated the nuget packages you installed, then you\u0027d already have known there was a script before you installed it (which was done by enabling NAOT), if not, then you\u0027re the one deciding not to validate if they\u0027re safe thoroughly. The fact that you\u0027re surprised that lots of nuget packages utilise this feature means that either: you just happened to have not used any of them, which is not very likely, or you haven\u0027t been validating their safety, which would make your whole argument of \"batch file unsafe if in user folder\" \"I no want batch file in that folder\" meaningless for the reasons I\u0027ve already described.\r\n\r\n\u003e Its not an argument that someone else does something.\r\n\r\nI don\u0027t quite know what you\u0027re referring to here, but if you\u0027re referring to me giving examples of things that specific nuget packages which do potentially run arbitrary code without you having a closer look, including 1 which uses a script file, then, I\u0027ll remind you that you said:\r\n\r\n\u003e Where are those very common nuget packages that do this?",
                                           "updatedAt":  "2023-11-23T22:02:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxrrI",
                                           "createdAt":  "2023-11-23T22:16:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Balkoth",
                                           "body":  "I said this, because this is my experience. The org runs AppLocker, and script execution is not allowed in that folder. I never had a problem in the past with this.\r\n\r\nJust because you know everything inside out what Visual Studio does when loading nuget packages, does not mean that everyone else does.\r\n\r\nI came here and posted the original bug report, because i thought this is a legitimate issue. I still think that this is problematic. ",
                                           "updatedAt":  "2023-11-23T22:16:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxtsF",
                                           "createdAt":  "2023-11-23T22:33:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "\u003e Just because you know everything inside out what Visual Studio does when loading nuget packages, does not mean that everyone else does.\r\n\r\nSorry for informing you that the attack surface is wider than you thought it was. Next time I\u0027ll be sure to allow you to think you\u0027re secure when you\u0027re potentially running arbitrary code from anyone that can post a nuget package.\r\n\r\nDid you also know that if you download an excel spreadsheet with macros, and then open it, it can run arbitrary code? Probably. Because you actually looked into that attack vector. It\u0027s not my fault if you don\u0027t spend the time to learn how to use things safely and determine their attack surface.\r\n\r\nDon\u0027t try to blame me or anyone else for your ignorance of potential security issues, especially when we\u0027re literally trying to explain it to you so you can be secure.\r\n\r\nThe reason I brought up any nuget package being able to run any code is because your organisation think\u0027s it\u0027s protected from something by blocking batch scripts, but it\u0027s clearly not protected from arbitrary code execution in nuget packages, otherwise you\u0027d already be aware of this and the issue wouldn\u0027t have arisen to begin with; because the only protection to it is to either block all code execution by nuget packages somehow (which would break a lot of nuget packages, and I\u0027m not even sure how you\u0027d achieve this frankly), or to verify their trustworthiness manually (which you clearly hadn\u0027t done, since you were unaware of the ability to run any code).",
                                           "updatedAt":  "2023-11-23T22:33:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxuIq",
                                           "createdAt":  "2023-11-23T22:38:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Balkoth",
                                           "body":  "Thanks for creating an unwelcome environment and derailing the report. Have a nice day.",
                                           "updatedAt":  "2023-11-23T22:38:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxv_m",
                                           "createdAt":  "2023-11-23T22:57:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNj2SQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "halgari",
                                                                               "createdAt":  "2023-11-24T14:38:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "martincostello",
                                                                               "createdAt":  "2023-11-24T21:05:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "BitesizedLion",
                                           "body":  "\u003e Thanks for creating an unwelcome environment and derailing the report. Have a nice day.\r\n\r\nYou\u0027ve had a really rude tone from the start towards everybody. I suggest you stop, it\u0027s unnecessary.",
                                           "updatedAt":  "2023-11-23T22:59:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5syKaL",
                                           "createdAt":  "2023-11-24T02:56:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNj2aw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hamarb123",
                                                                               "createdAt":  "2023-11-24T02:57:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Balkoth",
                                                                               "createdAt":  "2023-11-24T06:00:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "martincostello",
                                                                               "createdAt":  "2023-11-24T21:06:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "I agree that an extracted bat file is problematic. Executables, dlls and even powershell scripts can be signed with digital cert, but bat file can\u0027t.\r\n\r\nThe 8.0.100 SDK has been shipped in this form and we are finding workaround that works for you. In the future versions the design may be changed based on feedback. Please also be mindful that restrictions sometimes can provide a false sense of security.",
                                           "updatedAt":  "2023-11-24T02:56:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tCCS9",
                                           "createdAt":  "2023-11-28T07:25:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Switching this to PowerShell is unlikely (and we don\u0027t know if somebody else\u0027s IT department wouldn\u0027t block .ps1 instead). What we could do is move this logic into the MSBuild `.targets` files - it\u0027s just a lot more work to do it that way.\r\n\r\nMSBuild .targets are also completely unsigned and can contain arbitrary C# snippets, but usually run under the radar of IT department policies because there\u0027s no group policy they could configure to break MSBuild/NuGet in general.\r\n\r\nI\u0027m marking this Future and Up for grabs.",
                                           "updatedAt":  "2023-11-28T07:25:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yVwLu",
                                           "createdAt":  "2024-01-31T03:12:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODUxZyA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hamarb123",
                                                                               "createdAt":  "2024-01-31T06:07:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "josephmoresena",
                                           "body":  "Powershell is not allowed at the company where I work, so any script that calls PS is automatically blocked.\r\nfindvcvarsall.bat has a PS call to send telemetry. So... I commented these lines and now I (and the whole team) can compile applications in NativeAOT.\r\n\r\nI don\u0027t know if that can be useful to you right now @Balkoth",
                                           "updatedAt":  "2024-01-31T03:12:46Z"
                                       }
                                   ],
                         "totalCount":  22
                     },
        "title":  "PublishAot brings in Microsoft.DotNet.ILCompiler and causes AppLocker issue",
        "labels":  [
                       "help wanted",
                       "tenet-acquisition",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96081",
        "createdAt":  "2023-12-16T03:21:25Z",
        "number":  96081,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-14T08:25:58Z",
        "body":  "The native runtime has a complicated past. Base implementations had different plans about layering. Some things got stitched together from working pieces when productized. Although things work, it could be incrementally a nuisance to move forward.\r\n\r\n- Ideally #include would be about functionality a file wants to use directly. Indirect dependencies should be included implicitly.\r\n- Ideally there should be no sensitivity to the order of includes.\r\n\r\nThere are always exceptions from these rules, but there must be reasons.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObsl8dw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5uyXx3",
                                           "createdAt":  "2023-12-16T03:21:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe native runtime had a complicated past. Some things are stitched together from working pieces and though things work, it could be incrementally difficult to move forward.\r\n\r\n- Ideally #include would be about functionality a file wants to use directly. Indirect dependencies should be included implicitly.\r\n- Ideally there should be no sensitivity to the order of includes.\r\n\r\nThere are always exceptions from these rules, but there must be reasons.\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVSadov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-16T03:21:32Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[NativeAOT] rationalize #includes in the native runtime",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97057",
        "createdAt":  "2024-01-16T23:21:58Z",
        "number":  97057,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-28T17:39:52Z",
        "body":  "### Description\n\nWhen referencing 2 totally different packages independently, I\u0027m able to publish an app without any warnings. But when I combine them and use them together, I\u0027m getting trim warnings that I can\u0027t fix as a end-user developer.\n\n### Reproduction Steps\n\n`dotnet publish` the following app:\r\n\r\ncsproj:\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cInvariantGlobalization\u003etrue\u003c/InvariantGlobalization\u003e\r\n    \u003cPublishAot\u003etrue\u003c/PublishAot\u003e\r\n    \u003cTrimmerSingleWarn\u003efalse\u003c/TrimmerSingleWarn\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Npgsql.DependencyInjection\" Version=\"8.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Http.Resilience\" Version=\"8.2.0-preview.24066.3\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \r\n\u003c/Project\u003e\r\n```\r\n\r\n(Note that `\u003cPackageReference Include=\"Microsoft.Extensions.Http.Resilience\" Version=\"8.2.0-preview.24066.3\" /\u003e` needs a nuget.config entry for `\u003cadd key=\"dotnet8\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8/nuget/v3/index.json\" /\u003e`)\r\n\r\nProgram.cs:\r\n```csharp\r\nvar builder = WebApplication.CreateSlimBuilder(args);\r\n\r\nbuilder.Services.AddNpgsqlDataSource(builder.Configuration.GetConnectionString(\"npgsql\") ?? throw new Exception(\"configure npgsql\"));\r\n\r\nbuilder.Services.ConfigureHttpClientDefaults(http =\u003e\r\n{\r\n    http.AddStandardResilienceHandler();\r\n});\r\n\r\nvar app = builder.Build();\r\napp.MapGet(\"/\", () =\u003e \"hello, world\");\r\napp.Run();\r\n```\r\n\r\n\n\n### Expected behavior\n\nNo publish warnings.\n\n### Actual behavior\n\n```\r\nILC : Trim analysis warning IL2113: Npgsql.NpgsqlConnectionStringBuilder: \u0027DynamicallyAccessedMembersAttribute\u0027 on \u0027Npgsql.NpgsqlConnectionStringBuilder\u0027 or one of its base types references \u0027System.ComponentModel.ICustomTypeDescriptor.GetConverter()\u0027 which requires unreferenced code. Generic TypeConverters may require the generic types to be annotated. For example, NullableConverter requires the underlying type to be DynamicallyAccessedMembers All. [C:\\DotNetTest\\ApiTest\\ApiTest.csproj]\r\nILC : Trim analysis warning IL2113: Npgsql.NpgsqlConnectionStringBuilder: \u0027DynamicallyAccessedMembersAttribute\u0027 on \u0027Npgsql.NpgsqlConnectionStringBuilder\u0027 or one of its base types references \u0027System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent()\u0027 which requires unreferenced code. The built-in EventDescriptor implementation uses Reflection which requires unreferenced code. [C:\\DotNetTest\\ApiTest\\ApiTest.csproj]\r\nILC : Trim analysis warning IL2113: Npgsql.NpgsqlConnectionStringBuilder: \u0027DynamicallyAccessedMembersAttribute\u0027 on \u0027Npgsql.NpgsqlConnectionStringBuilder\u0027 or one of its base types references \u0027System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty()\u0027 which requires unreferenced code. PropertyDescriptor\u0027s PropertyType cannot be statically discovered. [C:\\DotNetTest\\ApiTest\\ApiTest.csproj]\r\nILC : Trim analysis warning IL2113: Npgsql.NpgsqlConnectionStringBuilder: \u0027DynamicallyAccessedMembersAttribute\u0027 on \u0027Npgsql.NpgsqlConnectionStringBuilder\u0027 or one of its base types references \u0027System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type)\u0027 which requires unreferenced code. Editors registered in TypeDescriptor.AddEditorTable may be trimmed. [C:\\DotNetTest\\ApiTest\\ApiTest.csproj]\r\nILC : Trim analysis warning IL2113: Npgsql.NpgsqlConnectionStringBuilder: \u0027DynamicallyAccessedMembersAttribute\u0027 on \u0027Npgsql.NpgsqlConnectionStringBuilder\u0027 or one of its base types references \u0027System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[])\u0027 which requires unreferenced code. The public parameterless constructor or the \u0027Default\u0027 static field may be trimmed from the Attribute\u0027s Type. [C:\\DotNetTest\\ApiTest\\ApiTest.csproj]\r\nILC : Trim analysis warning IL2113: Npgsql.NpgsqlConnectionStringBuilder: \u0027DynamicallyAccessedMembersAttribute\u0027 on \u0027Npgsql.NpgsqlConnectionStringBuilder\u0027 or one of its base types references \u0027System.ComponentModel.ICustomTypeDescriptor.GetProperties()\u0027 which requires unreferenced code. PropertyDescriptor\u0027s PropertyType cannot be statically discovered. [C:\\DotNetTest\\ApiTest\\ApiTest.csproj]\r\nILC : Trim analysis warning IL2113: Npgsql.NpgsqlConnectionStringBuilder: \u0027DynamicallyAccessedMembersAttribute\u0027 on \u0027Npgsql.NpgsqlConnectionStringBuilder\u0027 or one of its base types references \u0027System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[])\u0027 which requires unreferenced code. PropertyDescriptor\u0027s PropertyType cannot be statically discovered. The public parameterless constructor or the \u0027Default\u0027 static field may be trimmed from the Attribute\u0027s Type. [C:\\DotNetTest\\ApiTest\\ApiTest.csproj]\r\nILC : Trim analysis warning IL2112: Npgsql.NpgsqlConnectionStringBuilder.GetProperties(Hashtable): \u0027DynamicallyAccessedMembersAttribute\u0027 on \u0027Npgsql.NpgsqlConnectionStringBuilder\u0027 or one of its base types references \u0027Npgsql.NpgsqlConnectionStringBuilder.GetProperties(Hashtable)\u0027 which requires unreferenced code. PropertyDescriptor\u0027s PropertyType cannot be statically discovered. [C:\\DotNetTest\\ApiTest\\ApiTest.csproj]\r\n```\r\n\r\nNote that if you comment out _either_ line 2 or 3 in the `Program.cs`, there are no warnings. But when you have both, then the warnings show up.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\nThe reason this shows up is because `AddStandardResilienceHandler()` brings in a bunch of System.ComponentModel interfaces like \r\n`ICustomTypeDescriptor`.\r\n\r\nI see the same warnings are being suppressed on the base DbConnectionStringBuilder:\r\n\r\nhttps://github.com/dotnet/runtime/blob/613a13fb4af81f8ed0b0d27dff58fa0c6129e5ba/src/libraries/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs#L15-L20\r\n\r\nSee also:\r\n\r\n* https://github.com/dotnet/linker/pull/2148\r\n* https://github.com/dotnet/linker/pull/2162\r\n\r\nShould NpgsqlConnectionStringBuilder be suppressing these warnings as well?\r\n\r\ncc @vitek-karas @sbomer @roji",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOc-vVGg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5w9TQ3",
                                           "createdAt":  "2024-01-17T06:45:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen referencing 2 totally different packages independently, I\u0027m able to publish an app without any warnings. But when I combine them and use them together, I\u0027m getting trim warnings that I can\u0027t fix as a end-user developer.\n\n### Reproduction Steps\n\n`dotnet publish` the following app:\r\n\r\ncsproj:\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cInvariantGlobalization\u003etrue\u003c/InvariantGlobalization\u003e\r\n    \u003cPublishAot\u003etrue\u003c/PublishAot\u003e\r\n    \u003cTrimmerSingleWarn\u003efalse\u003c/TrimmerSingleWarn\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Npgsql.DependencyInjection\" Version=\"8.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Http.Resilience\" Version=\"8.2.0-preview.24066.3\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \r\n\u003c/Project\u003e\r\n```\r\n\r\n(Note that `\u003cPackageReference Include=\"Microsoft.Extensions.Http.Resilience\" Version=\"8.2.0-preview.24066.3\" /\u003e` needs a nuget.config entry for `\u003cadd key=\"dotnet8\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8/nuget/v3/index.json\" /\u003e`)\r\n\r\nProgram.cs:\r\n```csharp\r\nvar builder = WebApplication.CreateSlimBuilder(args);\r\n\r\nbuilder.Services.AddNpgsqlDataSource(builder.Configuration.GetConnectionString(\"npgsql\") ?? throw new Exception(\"configure npgsql\"));\r\n\r\nbuilder.Services.ConfigureHttpClientDefaults(http =\u003e\r\n{\r\n    http.AddStandardResilienceHandler();\r\n});\r\n\r\nvar app = builder.Build();\r\napp.MapGet(\"/\", () =\u003e \"hello, world\");\r\napp.Run();\r\n```\r\n\r\n\n\n### Expected behavior\n\nNo publish warnings.\n\n### Actual behavior\n\n```\r\nILC : Trim analysis warning IL2113: Npgsql.NpgsqlConnectionStringBuilder: \u0027DynamicallyAccessedMembersAttribute\u0027 on \u0027Npgsql.NpgsqlConnectionStringBuilder\u0027 or one of its base types references \u0027System.ComponentModel.ICustomTypeDescriptor.GetConverter()\u0027 which requires unreferenced code. Generic TypeConverters may require the generic types to be annotated. For example, NullableConverter requires the underlying type to be DynamicallyAccessedMembers All. [C:\\DotNetTest\\ApiTest\\ApiTest.csproj]\r\nILC : Trim analysis warning IL2113: Npgsql.NpgsqlConnectionStringBuilder: \u0027DynamicallyAccessedMembersAttribute\u0027 on \u0027Npgsql.NpgsqlConnectionStringBuilder\u0027 or one of its base types references \u0027System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent()\u0027 which requires unreferenced code. The built-in EventDescriptor implementation uses Reflection which requires unreferenced code. [C:\\DotNetTest\\ApiTest\\ApiTest.csproj]\r\nILC : Trim analysis warning IL2113: Npgsql.NpgsqlConnectionStringBuilder: \u0027DynamicallyAccessedMembersAttribute\u0027 on \u0027Npgsql.NpgsqlConnectionStringBuilder\u0027 or one of its base types references \u0027System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty()\u0027 which requires unreferenced code. PropertyDescriptor\u0027s PropertyType cannot be statically discovered. [C:\\DotNetTest\\ApiTest\\ApiTest.csproj]\r\nILC : Trim analysis warning IL2113: Npgsql.NpgsqlConnectionStringBuilder: \u0027DynamicallyAccessedMembersAttribute\u0027 on \u0027Npgsql.NpgsqlConnectionStringBuilder\u0027 or one of its base types references \u0027System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type)\u0027 which requires unreferenced code. Editors registered in TypeDescriptor.AddEditorTable may be trimmed. [C:\\DotNetTest\\ApiTest\\ApiTest.csproj]\r\nILC : Trim analysis warning IL2113: Npgsql.NpgsqlConnectionStringBuilder: \u0027DynamicallyAccessedMembersAttribute\u0027 on \u0027Npgsql.NpgsqlConnectionStringBuilder\u0027 or one of its base types references \u0027System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[])\u0027 which requires unreferenced code. The public parameterless constructor or the \u0027Default\u0027 static field may be trimmed from the Attribute\u0027s Type. [C:\\DotNetTest\\ApiTest\\ApiTest.csproj]\r\nILC : Trim analysis warning IL2113: Npgsql.NpgsqlConnectionStringBuilder: \u0027DynamicallyAccessedMembersAttribute\u0027 on \u0027Npgsql.NpgsqlConnectionStringBuilder\u0027 or one of its base types references \u0027System.ComponentModel.ICustomTypeDescriptor.GetProperties()\u0027 which requires unreferenced code. PropertyDescriptor\u0027s PropertyType cannot be statically discovered. [C:\\DotNetTest\\ApiTest\\ApiTest.csproj]\r\nILC : Trim analysis warning IL2113: Npgsql.NpgsqlConnectionStringBuilder: \u0027DynamicallyAccessedMembersAttribute\u0027 on \u0027Npgsql.NpgsqlConnectionStringBuilder\u0027 or one of its base types references \u0027System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[])\u0027 which requires unreferenced code. PropertyDescriptor\u0027s PropertyType cannot be statically discovered. The public parameterless constructor or the \u0027Default\u0027 static field may be trimmed from the Attribute\u0027s Type. [C:\\DotNetTest\\ApiTest\\ApiTest.csproj]\r\nILC : Trim analysis warning IL2112: Npgsql.NpgsqlConnectionStringBuilder.GetProperties(Hashtable): \u0027DynamicallyAccessedMembersAttribute\u0027 on \u0027Npgsql.NpgsqlConnectionStringBuilder\u0027 or one of its base types references \u0027Npgsql.NpgsqlConnectionStringBuilder.GetProperties(Hashtable)\u0027 which requires unreferenced code. PropertyDescriptor\u0027s PropertyType cannot be statically discovered. [C:\\DotNetTest\\ApiTest\\ApiTest.csproj]\r\n```\r\n\r\nNote that if you comment out _either_ line 2 or 3 in the `Program.cs`, there are no warnings. But when you have both, then the warnings show up.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\nThe reason this shows up is because `AddStandardResilienceHandler()` brings in a bunch of System.ComponentModel interfaces like \r\n`ICustomTypeDescriptor`.\r\n\r\nI see the same warnings are being suppressed on the base DbConnectionStringBuilder:\r\n\r\nhttps://github.com/dotnet/runtime/blob/613a13fb4af81f8ed0b0d27dff58fa0c6129e5ba/src/libraries/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs#L15-L20\r\n\r\nSee also:\r\n\r\n* https://github.com/dotnet/linker/pull/2148\r\n* https://github.com/dotnet/linker/pull/2162\r\n\r\nShould NpgsqlConnectionStringBuilder be suppressing these warnings as well?\r\n\r\ncc @vitek-karas @sbomer @roji\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-17T06:45:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5w9TR8",
                                           "createdAt":  "2024-01-17T06:45:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Looks like the IL2113 warnings only show up for PublishAot. The IL2112 shows up for both PublishAot and PublishTrimmed.\r\n\r\nThis is also potentially related to #88512 that was filed due to the same `.All` being applied on `DbConnectionStringBuilder`. We probably don\u0027t need `.All`. We probably just need something like `.AllProperties` and `.AllEvents`. The problems that `.All` is causing and then we need to suppress and the suppressions are hard, etc. is very likely caused by not having a mechanism for more targeted preservation that would avoid the problematic cases.",
                                           "updatedAt":  "2024-01-17T06:45:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5w-F1F",
                                           "createdAt":  "2024-01-17T08:32:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODS8CNg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LakshanF",
                                                                               "createdAt":  "2024-01-17T12:52:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@LakshanF as this is related to `TypeDescriptor` and potential improvements in that area.\r\n\r\nThis will teach us to think more than twice before putting any annotation on a virtual/interface method :-)",
                                           "updatedAt":  "2024-01-17T08:32:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xGp91",
                                           "createdAt":  "2024-01-18T00:50:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e Should NpgsqlConnectionStringBuilder be suppressing these warnings as well?\r\n\r\nSince these warnings are being suppressed on the base DbConnectionStringBuilder, is it safe to assume that we can suppress them on NpgsqlConnectionStringBuilder as well? NpgsqlConnectionStringBuilder isn\u0027t doing anything special here - it is just trying to implement the ICustomTypeDescriptor overrides (which have RequiresUnreferencedCode on them - so any real callers of those methods will get warnings).\r\n\r\n\u003e We probably don\u0027t need .All. \r\n\r\nThe root of need for `.All` (as far as I can tell) comes from a couple places:\r\n\r\nhttps://github.com/dotnet/runtime/blob/5598dac557c35d264c527e22239f1b33e0489376/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/ReflectTypeDescriptionProvider.ReflectedTypeData.cs#L44-L45\r\n\r\nhttps://github.com/dotnet/runtime/blob/5598dac557c35d264c527e22239f1b33e0489376/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/ReflectTypeDescriptionProvider.ReflectedTypeData.cs#L98-L107\r\n\r\nIn order to get all the attributes for a Type, we need to walk all the interfaces the Type implements and get events, properties, etc. on it.\r\n\r\nI tried lessening the `.All` annotations (see this [branch](https://github.com/eerhardt/runtime/tree/TypeDescriptorTrimAnnotations)), but I ran into these places that recurse up the hierarchy:\r\n\r\nhttps://github.com/dotnet/runtime/blob/5598dac557c35d264c527e22239f1b33e0489376/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/ReflectEventDescriptor.cs#L323-L327\r\n\r\nhttps://github.com/dotnet/runtime/blob/5598dac557c35d264c527e22239f1b33e0489376/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/ReflectTypeDescriptionProvider.ReflectedTypeData.cs#L425-L430\r\n\r\nAFAIK, the trim analysis has special handling of `.All`, won\u0027t trim things from the base types, and won\u0027t warn about hierarchy walking like this. But now that we aren\u0027t using `.All`, these places could be broken.\r\n\r\nAlso note that I ended up needing to preserve:\r\n\r\n* PublicProperties \r\n* Interfaces \r\n* PublicEvents \r\n* NonPublicEvents \r\n* PublicMethods (needed because of [this code](https://github.com/dotnet/runtime/blob/5598dac557c35d264c527e22239f1b33e0489376/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/ReflectEventDescriptor.cs#L359-L360))\r\n\r\nWhich would probably cause us to have this same problem anyway - it would still need to preserve the ICustomTypeDescriptor interface and all its methods.",
                                           "updatedAt":  "2024-01-18T00:50:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xH_xu",
                                           "createdAt":  "2024-01-18T07:08:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e AFAIK, the trim analysis has special handling of .All, won\u0027t trim things from the base types, and won\u0027t warn about hierarchy walking like this. But now that we aren\u0027t using .All, these places could be broken.\r\n\r\n#88512 is about introducing annotations that would allow walking base hierarchies and looking for members without having to preserve things to the extent that .All does. (we could preserve e.g. all methods, including those on base types, without having to go all in with .All)\r\n\r\nThe problem that .All is causing here is that it will walk into the list of implemented interfaces and apply .All to all of the methods on those interfaces as well (that\u0027s what the warnings are about). If we could say `AllEventsInHierarchy | AllPropertiesInHierarchy`, it would avoid the problem with marking the methods on the interface as reflection-exposed because it would only go to bases.\r\n\r\nThe fact we need to mark PublicMethods is annoying and the linked code is atrocious, but maybe it would still be okay because it\u0027s just the public methods and there don\u0027t appear to be any public methods on `DbConnectionStringBuilder` that would be RUC (explicitly implemented interface methods are not public).\r\n\r\nBeing more targeted causes fewer ripple effects.\r\n\r\nNot saying we don\u0027t have a bug with the suppression not working right, but we wouldn\u0027t run into it if we didn\u0027t use `.All`.",
                                           "updatedAt":  "2024-01-18T07:08:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z69Ua",
                                           "createdAt":  "2024-02-14T22:29:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "FYI - I opened https://github.com/npgsql/npgsql/pull/5578 to add the same suppressions to `NpgsqlConnectionStringBuilder` as we have on `DbConnectionStringBuilder`. But it would be good to see if there is something we can do in dotnet/runtime to fix this general problem.",
                                           "updatedAt":  "2024-02-14T22:29:00Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Unactionable Trim warnings when referencing both Npgsql and Microsoft.Extensions.Http.Resilience",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97408",
        "createdAt":  "2024-01-23T18:46:14Z",
        "number":  97408,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-28T17:39:22Z",
        "body":  "- [ ] `MakeGenericType` over reference types is supported in native AOT, so the following should not warn:\r\n\r\n```csharp\r\nvoid Foo(Type t) {\r\n    if (!t.IsValueType)\r\n        typeof(G\u003c\u003e).MakeGenericType(t); // currently warns with IL3050\r\n}\r\n```\r\n\r\n- [x] Probably the `class` constraint should be supported as well:\r\n```csharp\r\nvoid Foo\u003cT\u003e() where T : class {\r\n    typeof(G\u003c\u003e).MakeGenericType(typeof(T));\r\n}\r\n```\r\n\r\n- [ ] We may also want to introduce an annotation to propagate the fact that a type is a reference type across methods, for example:\r\n```csharp\r\nvoid Foo(Type t) {\r\n    if (!t.IsValueType)\r\n        Bar(t);\r\n}\r\n\r\nvoid Bar([ReferenceType] Type t) {\r\n    typeof(G\u003c\u003e).MakeGenericType(t);\r\n}\r\n```\r\n\r\n(The latter idea is something that has come up in discussion with @vitek-karas and @MichalStrehovsky, not sure if there\u0027s another tracking issue for it already.)\r\n\r\nContext: https://github.com/dotnet/maui/pull/20058/files/7f4d26ca0aee7dc9d995e9776573125b35ad44b6#r1463169163",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcdBNEA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5xpgol",
                                           "createdAt":  "2024-01-23T18:46:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n`MakeGenericType` over reference types is supported in native AOT, so the following should not warn:\r\n\r\n```csharp\r\nvoid Foo(Type t) {\r\n    if (!t.IsValueType)\r\n        typeof(G\u003c\u003e).MakeGenericType(t); // currently warns with IL3050\r\n}\r\n```\r\n\r\nProbably the `class` constraint should be supported as well:\r\n```csharp\r\nvoid Foo\u003cT\u003e() where T : class {\r\n    typeof(G\u003c\u003e).MakeGenericType(typeof(T));\r\n}\r\n```\r\n\r\nWe may also want to introduce an annotation to propagate the fact that a type is a reference type across methods, for example:\r\n```csharp\r\nvoid Foo(Type t) {\r\n    if (!t.IsValueType)\r\n        Bar(t);\r\n}\r\n\r\nvoid Bar([ReferenceType] Type t) {\r\n    typeof(G\u003c\u003e).MakeGenericType(t);\r\n}\r\n```\r\n\r\n(The latter idea is something that has come up in discussion with @vitek-karas and @MichalStrehovsky, not sure if there\u0027s another tracking issue for it already.)\r\n\r\nContext: https://github.com/dotnet/maui/pull/20058/files/7f4d26ca0aee7dc9d995e9776573125b35ad44b6#r1463169163\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esbomer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-23T18:46:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xqVkA",
                                           "createdAt":  "2024-01-23T21:10:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "Does NativeAOT always generate a shared generic impl for this or would it need to scan for `MakeGenericType` and generate it then?",
                                           "updatedAt":  "2024-01-23T21:10:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xxe7W",
                                           "createdAt":  "2024-01-24T19:39:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Based on some experimentation, it looks like it doesn\u0027t always generate the shared impl. I\u0027m not sure exactly what is enough to generate the shared impl. Just calling `G\u003cSomeOtherReferenceType\u003e.Method()` won\u0027t do it - but accessing some of the generic type\u0027s methods via reflection will. For example `MakeGenericType` fails here:\r\n\r\n```csharp\r\ntypeof(G\u003c\u003e).MakeGenericType(typeof(C));\r\n// typeof(G\u003c\u003e).GetMethod(\"Foo\");\r\n\r\nclass G\u003cT\u003e {\r\n    public static void Foo() {\r\n        Console.WriteLine(typeof(T));\r\n    }\r\n}\r\n\r\nclass C {}\r\n```\r\n\r\nbut succeeds if you uncomment the `GetMethod(\"Foo\")`.\r\n\r\n@MichalStrehovsky could probably give a better answer.",
                                           "updatedAt":  "2024-01-24T19:39:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x0E0Q",
                                           "createdAt":  "2024-01-25T07:11:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Based on some experimentation, it looks like it doesn\u0027t always generate the shared impl. I\u0027m not sure exactly what is enough to generate the shared impl. Just calling `G\u003cSomeOtherReferenceType\u003e.Method()` won\u0027t do it - but accessing some of the generic type\u0027s methods via reflection will. For example `MakeGenericType` fails here:\r\n\u003e \r\n\u003e ```cs\r\n\u003e typeof(G\u003c\u003e).MakeGenericType(typeof(C));\r\n\u003e // typeof(G\u003c\u003e).GetMethod(\"Foo\");\r\n\u003e \r\n\u003e class G\u003cT\u003e {\r\n\u003e     public static void Foo() {\r\n\u003e         Console.WriteLine(typeof(T));\r\n\u003e     }\r\n\u003e }\r\n\u003e \r\n\u003e class C {}\r\n\u003e ```\r\n\u003e \r\n\u003e but succeeds if you uncomment the `GetMethod(\"Foo\")`.\r\n\u003e \r\n\u003e @MichalStrehovsky could probably give a better answer.\r\n\r\nLooks like we don\u0027t treat `MakeGenericType` specially in dataflow analysis - the only special handling is to trigger the AOT warning here:\r\n\r\nhttps://github.com/dotnet/runtime/blob/135fec006e727a31763271984cd712f1659ccbd3/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/Dataflow/ReflectionMethodBodyScanner.cs#L376-L382\r\n\r\nIt works if a method/constructor/field is subsequently accessed because dataflow will report \"`G\u003c\u003e.Foo` is reflection accessed\" and then the compiler will try to make `G\u003c\u003e.Foo` work on at least _something_.\r\n\r\nIt shouldn\u0027t be hard to make this work for an unused type.",
                                           "updatedAt":  "2024-01-25T07:11:43Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "AOT/analyzer should not warn for MakeGenericType of reference type",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98575",
        "createdAt":  "2024-02-16T20:55:01Z",
        "number":  98575,
        "author":  "agocke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-17T01:56:22Z",
        "body":  "The overall scenario was implementing a COM interface in managed code and providing it to native code. Testing this scenario revealed issues with the debugger view of the Native AOT code. Note that this is an end-to-end native debugging scenario, since only the C++ native VS debugger is involved with Native AOT.\r\n\r\nProblems:\r\n\r\n- [ ] Generated frames show up in callstack\r\n  - These should be frame filterable – we just need to know what ones we should filter out. I’m not sure if/how [DebuggerHidden] plumbs through but that might be the nicest way to get it all filtered?\r\n- [ ] Stepping into generated frames:\r\n  - 0xFEEFEE and 0xF00F00 line numberings are probably good enough here?\r\n  - As long as the lines are annotated as expected we’ll just step right through to the user code (basically the same as C++/CX).\r\n  - There are already the managed attributes which get used in a similar way for .NETNative – DebuggerGuidedStepping* I think is the top level?\r\n  - And then one of the lines is annotated with whether it leads to “user”** code.\r\n  - *This could also potentially work in place of DebuggerHidden?\r\n  - ** There are historically some weird assumptions built into this about which exact asm call we step into here, but that would need some investigation/validation.\r\n- [ ] Evaluating String variables:\r\n   - I think you could make a natvis that would work for this.\r\n   - Display as if it had a string value after the int size.\r\n- [ ] Evaluating other variables:\r\n  - C++/WinRT uses a lot of func eval through a C++EE extension to handle runtime type information.\r\n  - As discussed this might not really be necessary since ‘object’ is likely pretty uncommon?\r\n- [ ] Property getters:\r\n  - We don\u0027t show property getters since this is “Just” native code.\r\n  - This might be one of the biggest ‘regressions’ since we won’t by default show a lot of values that a user would expect to see.\r\n  - Without actual usage I’m not sure how bad this will be – if the properties are all backed by fields then it might be good enough.\r\n  - Otherwise this would probably need to fall into the EE extension category?\r\n  - We could func eval them and update the EE to show them as parts of the object (but this is probably work on both CppEE, the EE extension, as well as symbols to know which things are actually getters?).\r\n- [ ] DebuggerDisplay:\r\n  - By default we won’t call ToString or run the DebuggerDisplay AFAIK since the C++EE won’t know anything about that kind of behavior.\r\n  - How feasible is it to generate a natvis based on DebuggerDisplay?\r\n\r\n ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdDQcwA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc50MFO8",
                                           "createdAt":  "2024-02-16T20:56:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe overall scenario was implementing a COM interface in managed code and providing it to native code. Testing this scenario revealed issues with the debugger view of the Native AOT code. Note that this is an end-to-end native debugging scenario, since only the C++ native VS debugger is involved with Native AOT.\r\n\r\nProblems:\r\n\r\n- [ ] Generated frames show up in callstack\r\n  - These should be frame filterable – we just need to know what ones we should filter out. I’m not sure if/how [DebuggerHidden] plumbs through but that might be the nicest way to get it all filtered?\r\n- [ ] Stepping into generated frames:\r\n  - 0xFEEFEE and 0xF00F00 line numberings are probably good enough here?\r\n  - As long as the lines are annotated as expected we’ll just step right through to the user code (basically the same as C++/CX).\r\n  - There are already the managed attributes which get used in a similar way for .NETNative – DebuggerGuidedStepping* I think is the top level?\r\n  - And then one of the lines is annotated with whether it leads to “user”** code.\r\n  - *This could also potentially work in place of DebuggerHidden?\r\n  - ** There are historically some weird assumptions built into this about which exact asm call we step into here, but that would need some investigation/validation.\r\n- [ ] Evaluating String variables:\r\n   - I think you could make a natvis that would work for this.\r\n   - Display as if it had a string value after the int size.\r\n- [ ] Evaluating other variables:\r\n  - C++/WinRT uses a lot of func eval through a C++EE extension to handle runtime type information.\r\n  - As discussed this might not really be necessary since ‘object’ is likely pretty uncommon?\r\n- [ ] Property getters:\r\n  - We don\u0027t show property getters since this is “Just” native code.\r\n  - This might be one of the biggest ‘regressions’ since we won’t by default show a lot of values that a user would expect to see.\r\n  - Without actual usage I’m not sure how bad this will be – if the properties are all backed by fields then it might be good enough.\r\n  - Otherwise this would probably need to fall into the EE extension category?\r\n  - We could func eval them and update the EE to show them as parts of the object (but this is probably work on both CppEE, the EE extension, as well as symbols to know which things are actually getters?).\r\n- [ ] DebuggerDisplay:\r\n  - By default we won’t call ToString or run the DebuggerDisplay AFAIK since the C++EE won’t know anything about that kind of behavior.\r\n  - How feasible is it to generate a natvis based on DebuggerDisplay?\r\n\r\n \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eagocke\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-16T20:56:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50NBzA",
                                           "createdAt":  "2024-02-17T01:24:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODdCDFg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2024-04-04T16:46:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e We could func eval them and update the EE to show them as parts of the object (but this is probably work on both CppEE, the EE extension, as well as symbols to know which things are actually getters?).\r\n\r\nAlso, funceval for native AOT compiled code needs to interact with the GC (the GC can happen while the funceval is running). Plain C++ funceval is unreliable for native AOT compiled code.",
                                           "updatedAt":  "2024-02-17T01:24:38Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Debugging issues stepping from C++ into Native AOT C#",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98659",
        "createdAt":  "2024-02-19T14:26:32Z",
        "number":  98659,
        "author":  "dadavadd",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-20T08:06:29Z",
        "body":  "![image](https://github.com/dotnet/runtime/assets/111659964/3a1d2504-e5b5-466f-91c6-40bc518794b7)\r\nThere are no errors with Cdecl, but when you select fastcall, the following error appears.\r\n\r\nMy Method:\r\n![image](https://github.com/dotnet/runtime/assets/111659964/9794723b-2726-4cd6-89a3-fe2d92c08a42)\r\n\r\n\r\nHow can I fix this error so that I can compile to fastcall?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdHFfOA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc50Yc71",
                                           "createdAt":  "2024-02-19T14:29:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dadavadd",
                                           "body":  "NET 8.0\r\n",
                                           "updatedAt":  "2024-02-19T14:29:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50YqL2",
                                           "createdAt":  "2024-02-19T14:55:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n![image](https://github.com/dotnet/runtime/assets/111659964/3a1d2504-e5b5-466f-91c6-40bc518794b7)\r\nThere are no errors with Cdecl, but when you select fastcall, the following error appears.\r\n\r\nMy Method:\r\n![image](https://github.com/dotnet/runtime/assets/111659964/9794723b-2726-4cd6-89a3-fe2d92c08a42)\r\n\r\n\r\nHow can I fix this error so that I can compile to fastcall?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edadavadd\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-19T14:55:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50a9iV",
                                           "createdAt":  "2024-02-19T22:20:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "NativeAOT doesn’t support x86 platform which is the only platform where `fastcall` calling convention is applicable.\n\n(Obviously the compiler should not fail either and should ignore the calling convention.)",
                                           "updatedAt":  "2024-02-19T22:29:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50cIDY",
                                           "createdAt":  "2024-02-20T05:51:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "This is failing because RyuJIT asks `canGetCookieForPInvokeCalliSig` over JitInterface and it\u0027s not implemented for native AOT.\r\n\r\nhttps://github.com/dotnet/runtime/blob/bee4602cd5974c9abb2d83cc58d5342b75b4cdbe/src/coreclr/jit/importercalls.cpp#L670-L716\r\n\r\nDropping the fastcall (and leaving it at the default unmanaged calling convention) fixes this.\r\n\r\nShould RyuJIT be asking this and making decisions about a `fastcall` when we target x86-64? Is `fastcall` doing anything at all outside x86? I guess we could implement it, but is this meaningful?\r\n\r\nCc @dotnet/jit-contrib ",
                                           "updatedAt":  "2024-02-20T05:51:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50cT39",
                                           "createdAt":  "2024-02-20T06:44:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODXq-ag==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "MichalStrehovsky",
                                                                               "createdAt":  "2024-02-20T06:55:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "dadavadd",
                                                                               "createdAt":  "2024-02-21T15:06:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Native AOT does not have calli cookies.\r\n\r\nUnmanaged `calli` should be either converted to regular call of IL stub by `convertPInvokeCalliToCall` or inlined by the JIT without needing a cookie.\r\n\r\nThe inlined unmanaged `calli` should take this path: https://github.com/dotnet/runtime/blob/bee4602cd5974c9abb2d83cc58d5342b75b4cdbe/src/coreclr/jit/importercalls.cpp#L5625-L5629 . The problem is that we have taken an early out a few lines earlier and that makes us wonder into the calli cookie land.\r\n\r\nRegular CoreCLR deals with the problem by duplicating the error condition for supported calling conventions here: https://github.com/dotnet/runtime/blob/bee4602cd5974c9abb2d83cc58d5342b75b4cdbe/src/coreclr/vm/dllimport.cpp#L4264-L4270 . The simplest fix would be to follow to suit, duplicate this error condition in the aot compiler (sigh), and generate a throwing stub in `convertPInvokeCalliToCall` for unsupported calling conventions.",
                                           "updatedAt":  "2024-02-20T06:44:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50cV84",
                                           "createdAt":  "2024-02-20T06:53:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODXcJSQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "MichalStrehovsky",
                                                                               "createdAt":  "2024-02-20T06:55:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Is fastcall doing anything at all outside x86? \r\n\r\nfastcall was never implemented on x86, and we throw for it on non-x86 too just because. ",
                                           "updatedAt":  "2024-02-20T06:53:17Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Compilation failing for calli with fastcall calling convention",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98688",
        "createdAt":  "2024-02-20T09:22:20Z",
        "number":  98688,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-03T18:57:38Z",
        "body":  "Latest dotnet/installer builds already have arm32 support so I gave it a try.\r\n\r\n```\r\n    /usr/bin/ld.bfd : error : bin/Release/net9.0/linux-arm/native/aottest uses VFP register arguments, obj/Release/net9.0/linux-arm/native/aottest.o does not [/home/michals/aottest/aottest.csproj]\r\n    collect2 : error : ld returned 1 exit status [/home/michals/aottest/aottest.csproj]\r\n    /home/michals/.nuget/packages/microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/build/Microsoft.NETCore.Native.targets(369,5): error MSB3073: The command \"\"gcc\" \"obj/Release/net9.0/linux-arm/native/aottest.o\" -o \"bin/Release/net9.0/linux-arm/native/aottest\" -Wl,--version-script=obj/Release/net9.0/linux-arm/native/aottest.exports -Wl,--export-dynamic -gz=zlib -fuse-ld=bfd /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/sdk/libbootstrapper.o /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/sdk/libRuntime.WorkstationGC.a /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/sdk/libeventpipe-disabled.a /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/sdk/libstandalonegc-disabled.a /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/sdk/libstdc++compat.a /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/framework/libSystem.Native.a /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/framework/libSystem.IO.Compression.Native.a /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/framework/libSystem.Net.Security.Native.a /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/framework/libSystem.Security.Cryptography.Native.OpenSsl.a -g -Wl,-rpath,\u0027$ORIGIN\u0027 -Wl,--build-id=sha1 -Wl,--as-needed -pthread -ldl -lz -lrt -lm -pie -Wl,-pie -Wl,-z,relro -Wl,-z,now -Wl,--eh-frame-hdr -Wl,--discard-all -Wl,--gc-sections\" exited with code 1. [/home/michals/aottest/aottest.csproj]\r\n```\r\n\r\nLooks like what it\u0027s complaining about might be related to:\r\n\r\nhttps://github.com/dotnet/runtime/blob/bee4602cd5974c9abb2d83cc58d5342b75b4cdbe/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/ObjectWriter/ElfObjectWriter.cs#L449-L469\r\n\r\nDo we miss setting `Tag_ABI_VFP_args`? A hello world compiled with gcc produces an object file with this aeabi:\r\n\r\n```\r\nAttribute Section: aeabi\r\nFile Attributes\r\n  Tag_CPU_name: \"6\"\r\n  Tag_CPU_arch: v6\r\n  Tag_ARM_ISA_use: Yes\r\n  Tag_THUMB_ISA_use: Thumb-1\r\n  Tag_FP_arch: VFPv2\r\n  Tag_ABI_PCS_wchar_t: 4\r\n  Tag_ABI_FP_denormal: Needed\r\n  Tag_ABI_FP_exceptions: Needed\r\n  Tag_ABI_FP_number_model: IEEE 754\r\n  Tag_ABI_align_needed: 8-byte\r\n  Tag_ABI_align_preserved: 8-byte, except leaf SP\r\n  Tag_ABI_enum_size: int\r\n  Tag_ABI_VFP_args: VFP registers\r\n  Tag_ABI_optimization_goals: Aggressive Debug\r\n  Tag_CPU_unaligned_access: v6\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdQy-lw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc50dIKb",
                                           "createdAt":  "2024-02-20T09:22:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nLatest dotnet/installer builds already have arm32 support so I gave it a try.\r\n\r\n```\r\n    /usr/bin/ld.bfd : error : bin/Release/net9.0/linux-arm/native/aottest uses VFP register arguments, obj/Release/net9.0/linux-arm/native/aottest.o does not [/home/michals/aottest/aottest.csproj]\r\n    collect2 : error : ld returned 1 exit status [/home/michals/aottest/aottest.csproj]\r\n    /home/michals/.nuget/packages/microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/build/Microsoft.NETCore.Native.targets(369,5): error MSB3073: The command \"\"gcc\" \"obj/Release/net9.0/linux-arm/native/aottest.o\" -o \"bin/Release/net9.0/linux-arm/native/aottest\" -Wl,--version-script=obj/Release/net9.0/linux-arm/native/aottest.exports -Wl,--export-dynamic -gz=zlib -fuse-ld=bfd /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/sdk/libbootstrapper.o /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/sdk/libRuntime.WorkstationGC.a /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/sdk/libeventpipe-disabled.a /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/sdk/libstandalonegc-disabled.a /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/sdk/libstdc++compat.a /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/framework/libSystem.Native.a /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/framework/libSystem.IO.Compression.Native.a /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/framework/libSystem.Net.Security.Native.a /home/michals/.nuget/packages/runtime.linux-arm.microsoft.dotnet.ilcompiler/9.0.0-preview.2.24115.1/framework/libSystem.Security.Cryptography.Native.OpenSsl.a -g -Wl,-rpath,\u0027$ORIGIN\u0027 -Wl,--build-id=sha1 -Wl,--as-needed -pthread -ldl -lz -lrt -lm -pie -Wl,-pie -Wl,-z,relro -Wl,-z,now -Wl,--eh-frame-hdr -Wl,--discard-all -Wl,--gc-sections\" exited with code 1. [/home/michals/aottest/aottest.csproj]\r\n```\r\n\r\nLooks like what it\u0027s complaining about might be related to:\r\n\r\nhttps://github.com/dotnet/runtime/blob/bee4602cd5974c9abb2d83cc58d5342b75b4cdbe/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/ObjectWriter/ElfObjectWriter.cs#L449-L469\r\n\r\nDo we miss setting `Tag_ABI_VFP_args`? A hello world compiled with gcc produces an object file with this aeabi:\r\n\r\n```\r\nAttribute Section: aeabi\r\nFile Attributes\r\n  Tag_CPU_name: \"6\"\r\n  Tag_CPU_arch: v6\r\n  Tag_ARM_ISA_use: Yes\r\n  Tag_THUMB_ISA_use: Thumb-1\r\n  Tag_FP_arch: VFPv2\r\n  Tag_ABI_PCS_wchar_t: 4\r\n  Tag_ABI_FP_denormal: Needed\r\n  Tag_ABI_FP_exceptions: Needed\r\n  Tag_ABI_FP_number_model: IEEE 754\r\n  Tag_ABI_align_needed: 8-byte\r\n  Tag_ABI_align_preserved: 8-byte, except leaf SP\r\n  Tag_ABI_enum_size: int\r\n  Tag_ABI_VFP_args: VFP registers\r\n  Tag_ABI_optimization_goals: Aggressive Debug\r\n  Tag_CPU_unaligned_access: v6\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-arm32`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-20T09:22:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50dIa7",
                                           "createdAt":  "2024-02-20T09:22:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "FWIW I also tried with `-p:LinkerFlavor=lld` and got `ld.lld : error : undefined symbol: __start___modules`. Then I tried `-p:LinkerFlavor=gold` but that gave me `bus error`.\r\n\r\nCc @filipnavara ",
                                           "updatedAt":  "2024-02-20T09:22:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50dKSv",
                                           "createdAt":  "2024-02-20T09:26:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "What Raspberry Pi version was it? We can certainly add the `Tag_ABI_VFP_args` property but since we target `armv7` (RPi 3+) I am not sure whether it makes sense.",
                                           "updatedAt":  "2024-02-20T09:26:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50g4-Q",
                                           "createdAt":  "2024-02-20T18:02:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e What Raspberry Pi version was it? We can certainly add the `Tag_ABI_VFP_args` property but since we target `armv7` (RPi 3+) I am not sure whether it makes sense.\r\n\r\nRaspberry pi 4 with a 32bit Raspbian bookworm.",
                                           "updatedAt":  "2024-02-20T18:02:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50hWbr",
                                           "createdAt":  "2024-02-20T19:18:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Raspberry pi 4 with a 32bit Raspbian bookworm.\r\n\r\nInteresting, that matches one of my environments and I didn’t hit the issue there. Hopefully the EABI header change resolves it.",
                                           "updatedAt":  "2024-02-20T19:18:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50xv7_",
                                           "createdAt":  "2024-02-22T10:58:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "We can link fine on the default bookworm config now with BFD.\r\n\r\nLLD still complains about the thing it complained before.\r\n\r\nGold now hangs instead of crashing. Progress, I guess?",
                                           "updatedAt":  "2024-02-22T10:58:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50_mGc",
                                           "createdAt":  "2024-02-25T06:18:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Maybe we should explicitly set a few smoke tests projects to exercise certain linkers: bfd,lld,gold,mold, just enough to ensure basic coverage. Currently we are almost, always testing with lld in the CI: https://github.com/dotnet/runtime/blob/79dd9bae9bb881eb716b608577c4cedc6c9cba72/src/tests/Directory.Build.targets#L633 because the script which ultimately resolves _LDFLAGS favors lld; which, in realworld, is not very meaningful (majority of users end up with bfd linker while we are testing lld 24/7-365). Ideally, prereq images for CI (one per architecture) could have various linker flavors installed for testing.",
                                           "updatedAt":  "2024-02-25T06:18:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51B5vF",
                                           "createdAt":  "2024-02-26T06:54:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Maybe we should explicitly set a few smoke tests projects to exercise certain linkers: bfd,lld,gold,mold, just enough to ensure basic coverage. Currently we are almost, always testing with lld in the CI:\r\n\r\nWe had discussion about the testing aspect when the official builds were being switched to use a rootfs that doesn\u0027t even have bfd. I can\u0027t find the discussion on Github so maybe it happened internally, but the conclusion is basically in https://github.com/dotnet/runtime/pull/85478#issuecomment-1531778436. It\u0027s not just about the flavor of the linker, but also the version. We\u0027d be using the latest because that\u0027s necessary for our shipping criteria, but end users would be using whatever stale thing landed in their years old LTS distribution. To _really_ test this, we\u0027d want to pick some popular distros and versions and use whatever ships with them. But we\u0027re not equipped for that in dotnet/runtime repo and it hasn\u0027t been an issue we\u0027d be getting user reports on.\r\n\r\nWhat we do get user reports on is Apple platform linkers but that\u0027s a completely separate pit of pain an suffering.",
                                           "updatedAt":  "2024-02-26T06:54:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51DL6X",
                                           "createdAt":  "2024-02-26T10:18:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e not just about the flavor of the linker, but also the version\r\n\r\nYup, I remember adding lld v13 detection in BuildIntergration and linker script which goes with it. :)\r\n\r\n\u003e But we\u0027re not equipped for that in dotnet/runtime repo and it hasn\u0027t been an issue we\u0027d be getting user reports on.\r\n\r\nManual testing keep those issues from popping up. My point was CI is not helping in this regard. We can use one of the [existing Ubuntu 22.04 image](https://github.com/dotnet/dotnet-buildtools-prereqs-docker/tree/main/src/ubuntu/22.04) (we have plenty of them), which have lld and bfd already installed, we can install gold and mold as well to complete test apparatus. (we install GBs of optional stuff on those images, so few KBs of additional linker is not gonna hurt the size).",
                                           "updatedAt":  "2024-02-26T10:19:41Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "ARM32 native AOT fails to link on Raspberry Pi",
        "labels":  [
                       "arch-arm32",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99910",
        "createdAt":  "2024-03-18T16:11:54Z",
        "number":  99910,
        "author":  "filipnavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-18T23:09:55Z",
        "body":  "For example, `runfo get-helix-payload -j 765efa6c-eb36-4098-a2b6-81c33985c105 -w Methodical_d2 -o helix3` downloads a workitem with 184 .dll files (~3 Mb). NativeAOT mostly needs only the .exe files and not the intermediate managed .dll files. We could save time and storage by not including the managed .dll files.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOd3gAjw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc53eACP",
                                           "createdAt":  "2024-03-18T16:14:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-18T16:14:55Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Runtime tests for NativeAOT send unnecessary files in Helix payloads",
        "labels":  [
                       "test-enhancement",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100226",
        "createdAt":  "2024-03-25T08:38:36Z",
        "number":  100226,
        "author":  "matouskozak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-23T07:48:34Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=615665\r\nBuild error leg or test failing: nativeaot.SmokeTests.TrimmingBehaviors\r\n\r\nFailing on Mono Apple Mobile:\r\n- ios-arm64\r\n- iossimulator-x64\r\n- tvos-arm64\r\n- tvossimulator-x64\r\n\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssues.md#how-to-fill-out-a-known-issue-error-section).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"nativeaot/SmokeTests/TrimmingBehaviors/TrimmingBehaviors/TrimmingBehaviors.sh [FAIL]\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\nStack trace:\r\n```\r\n           at nativeaot_SmokeTests_TrimmingBehaviors._TrimmingBehaviors_TrimmingBehaviors_._TrimmingBehaviors_TrimmingBehaviors_sh()\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n           at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=615665\r\n**Error message validated:** `[nativeaot/SmokeTests/TrimmingBehaviors/TrimmingBehaviors/TrimmingBehaviors.sh \\\\[FAIL\\\\]`]\r\n**Result validation:** :x: Known issue did not match with the provided build.\r\n**Validation performed at:** 3/25/2024 8:39:19 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[629918](https://dev.azure.com/dnceng-public/public/_build/results?buildId=629918)|dotnet/runtime|[nativeaot.SmokeTests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=629918\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15472542\u0026resultId=100021)|dotnet/runtime#100587|\r\n|[629360](https://dev.azure.com/dnceng-public/public/_build/results?buildId=629360)|dotnet/runtime|[nativeaot.SmokeTests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=629360\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15454404\u0026resultId=100020)|dotnet/runtime#98258|\r\n|[624950](https://dev.azure.com/dnceng-public/public/_build/results?buildId=624950)|dotnet/runtime|[nativeaot.SmokeTests.TrimmingBehaviors.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=624950\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15315552\u0026resultId=100012)||\r\n|[624000](https://dev.azure.com/dnceng-public/public/_build/results?buildId=624000)|dotnet/runtime|[nativeaot.SmokeTests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=624000\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15286360\u0026resultId=100020)|dotnet/runtime#99183|\r\n|[623704](https://dev.azure.com/dnceng-public/public/_build/results?buildId=623704)|dotnet/runtime|[nativeaot.SmokeTests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=623704\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15276972\u0026resultId=100027)|dotnet/runtime#99278|\r\n|[623038](https://dev.azure.com/dnceng-public/public/_build/results?buildId=623038)|dotnet/runtime|[nativeaot.SmokeTests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=623038\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15260040\u0026resultId=100027)|dotnet/runtime#99183|\r\n|[610598](https://dev.azure.com/dnceng-public/public/_build/results?buildId=610598)|dotnet/runtime|[nativeaot.SmokeTests.TrimmingBehaviors.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=610598\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=14904636\u0026resultId=100012)||\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|3|7|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeZvX5A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc54QJZW",
                                           "createdAt":  "2024-03-25T08:54:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-tvos\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-25T08:54:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55m9fk",
                                           "createdAt":  "2024-04-05T16:52:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODdLjkQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kotlarmilos",
                                                                               "createdAt":  "2024-04-05T17:19:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "Test is disabled, removing blocking-ci tag.",
                                           "updatedAt":  "2024-04-05T16:52:31Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[NAOT][Apple] NativeAOT TrimmingBehaviors smoke tests failing on apple mobile",
        "labels":  [
                       "disabled-test",
                       "os-ios",
                       "os-tvos",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100901",
        "createdAt":  "2024-04-11T03:45:37Z",
        "number":  100901,
        "author":  "CasualPokePlayer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-26T07:23:20Z",
        "body":  "### Description\r\n\r\nFor NativeAOT Unix targets, `CppCompilerAndLinker` is a property which may be set in order to use a custom compiler/linker.\r\n\r\nFor Android NativeAOT development, [I have found it potentially useful to pass a full path to the compiler, based on an `ANDROID_NDK_ROOT` environment variable.](https://github.com/CasualPokePlayer/GSR/blob/a7d7aed70e6705392c590a41602b6bdeac4eaa61/GSR/GSR.csproj#L9-L17) This allows me to avoid permanently setting my `PATH` to NDK\u0027s clang location (as it would interfere with a separate clang installation), and allow me to automate the process of setting the correct cross compiling setup from within the .csproj.\r\n\r\nHowever, passing a full path to `CppCompilerAndLinker` will result in an error. This is due to the checks verifying `CppCompilerAndLinker` is in `PATH`, as the underlying `where /Q` not liking a full path and proceeding to error.\r\n\r\nI haven\u0027t tested what happens on other platforms (which use `command -v` instead), they might work or might not work.\r\n\r\n### Reproduction Steps\r\n\r\n1. Create a sample NativeAOT project.\r\n2. Publish under a Unix RID with `CppCompilerAndLinker` set to an absolute path to e.g. clang.\r\n3. Error\r\n\r\nThe general setup NativeAOT on Android would cover the general use case on Windows here: https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/docs/android-bionic.md\r\n\r\n### Expected behavior\r\n\r\nThe compiler should be accepted and used without error.\r\n\r\n### Actual behavior\r\n\r\nError\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nRunning a shell script relative to the .csproj which just executes the full path to the compiler would work. This is notably done in the example NativeAOT Android project with JNI: https://github.com/josephmoresena/NativeAOT-AndroidHelloJniLib\r\n\r\n### Configuration\r\n\r\n- .NET 8\r\n- Windows 10\r\n- x64\r\n- As stated, I have not tested other operating systems which use a different way to check if the compiler is present.\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOejvx2A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc56H2nJ",
                                           "createdAt":  "2024-04-11T03:45:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-11T03:45:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56JyBx",
                                           "createdAt":  "2024-04-11T10:25:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Clang is not the only tool we need to invoke. We also need objcopy/strip. Assuming them on path makes things easier quite a bit easier.",
                                           "updatedAt":  "2024-04-11T10:25:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56KKpg",
                                           "createdAt":  "2024-04-11T11:29:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CasualPokePlayer",
                                           "body":  "That\u0027s fine, there are other properties (`ObjCopyName`) that could be set by the user for those (which also have PATH checks, which would fail too)\r\n\r\n(edit: sorry for issue close, accidental finger slip)",
                                           "updatedAt":  "2024-04-11T20:06:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56O_HY",
                                           "createdAt":  "2024-04-12T00:13:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CasualPokePlayer",
                                           "body":  "\u003e I haven\u0027t tested what happens on other platforms (which use command -v instead), they might work or might not work.\r\n\r\nTesting this and it appears to work just fine (testing on Ubuntu 22.04 on WSL2). So this just appears to be a (host) Windows specific issue (which I suppose bionic is the main use case since that implicitly has to be cross compiled).",
                                           "updatedAt":  "2024-04-12T00:13:24Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[NativeAOT] Passing Full Path to CppCompilerAndLinker Errors",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101932",
        "createdAt":  "2024-05-06T17:53:56Z",
        "number":  101932,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3w_cA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "filipnavara",
                                            "createdAt":  "2024-05-08T14:31:34Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-05-14T16:06:08Z",
        "body":  "Some platforms have problems with unwinding epilogs/prologs. We solve that issue by examining instructions and looking for patterns indicating prolog/epilog. \r\n\r\nAny platform that has such problems and can\u0027t figure un-unwindable ranges from the debug/unwind info will have to implement something like this. The complexity and fragility of such heuristics will vary. Some ABIs are more strict about epilog shapes than others.\r\nIt also puts implicit restrictions on what codegen can do, which can lead to bugs like: https://github.com/dotnet/runtime/issues/101896\r\n\r\nJust encoding prologs/epilogs seems more reliable and will reduce the burden for platform adoption or for future changes in JIT.\r\n\r\nEncoding the epilogs may not be straightforward though:\r\n\r\n- not all platforms need that\r\n- CoreCLR does not need that\r\n- there could be several epilogs in a method, so the record will have variable size, and possibly stored at variable position too (if there are other variable-size things, like in GC info)\r\n- multiple prologs is not something completely unthinkable either, although not used right now.\r\n- searching through info on a side could be more expensive that looking at instructions currently executed.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfPeVVg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5895VW",
                                           "createdAt":  "2024-05-06T17:54:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-06T17:54:17Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[NativeAOT] Consider encoding epilogs/prologs in GC or Debug info. ",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102131",
        "createdAt":  "2024-05-12T09:06:43Z",
        "number":  102131,
        "author":  "filipnavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC32IqA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-05-13T03:09:00Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-20T11:44:45Z",
        "body":  "I tried to compile quite a big project with ILC and it always fails like ~20 minutes later with this error:\r\n\r\n```\r\nAssembly = Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\r\nParameters\r\nCommandLineArguments = \"D:\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\9.0.0-preview.5.24256.1\\tools\\\\ilc\" @\"obj\\Release\\net9.0-windows10.0.19041.0\\win-x86\\native\\MailClient.ilc.rsp\"\r\nErrors\r\nSystem.AggregateException: One or more errors occurred. (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArrayWhereSelectIterator`2\u003cMicrosoft.Graph.Models.ActivityType,System.__Canon\u003e.Select\u003cNullable`1\u003cAuthenticationMethodKeyStrength\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cAuthenticationMethodKeyStrength\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.DayOfWeek,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cchar,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.WindowsMalwareThreatState\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cCloudPcDeviceImageStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cCloudPcDeviceImageStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArrayWhereSelectIterator`2\u003cMicrosoft.Graph.Models.TokenIssuerType,System.__Canon\u003e.Select\u003cNullable`1\u003cWebsiteType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cWebsiteType\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Collections.Generic.KeyValuePair`2\u003cMailClient.Storage.SortKey,System.__Canon\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.PlannerPreviewType\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationAssignmentStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationAssignmentStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cXstReader.TCROWIDANSI,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cMicrosoft.Graph.Models.WindowsHelloForBusinessPinUsage,System.__Canon\u003e.Select\u003cNullable`1\u003cSourceType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cSourceType\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArrayWhereSelectIterator`2\u003cAutoMapper.Internal.ConstructorParameters,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.ValueTuple`2\u003cint32,int32\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IteratorSelectIterator`2\u003cXilium.CefGlue.CefRange,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cMailClient.Settings.SendLaterOption,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cXstReader.NID,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IteratorSelectIterator`2\u003cMicrosoft.Graph.Models.ThreatAssessmentRequestSource,System.__Canon\u003e.Select\u003cNullable`1\u003cOutlierMemberType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cOutlierMemberType\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cMailClient.Protocols.TurkCell.Calendar.Objects.RecurrencneDay,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArrayWhereSelectIterator`2\u003cSystem.Collections.Generic.KeyValuePair`2\u003cuint32,MailClient.Storage.Mail.MailFlags\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListWhereSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.OnlineMeetingProviderType\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cAlertDetermination\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cAlertDetermination\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IteratorSelectIterator`2\u003cSystem.ValueTuple`2\u003cint32,int32\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMailClient.Reminders.Common+MailNotificationNotifyWhenNotRepliedOptions,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IteratorSelectIterator`2\u003cMailClient.Protocols.OnlineMeeting.MicrosoftTeams.Objects.DayOfWeek,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArrayWhereSelectIterator`2\u003cMicrosoft.Graph.Models.Security.IncidentStatus,System.__Canon\u003e.Select\u003cNullable`1\u003cSafeSearchFilterType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cSafeSearchFilterType\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cAutoMapper.QueryableExtensions.Impl.ProjectionBuilder+FirstPassLetPropertyMaps+SubQueryPath,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMicrosoft.Graph.Models.UserFlowType,System.__Canon\u003e.Select\u003cValueTuple`2\u003cint32,__Canon\u003e\u003e(Func`2\u003c__Canon,ValueTuple`2\u003cint32,__Canon\u003e\u003e)\u0027)\r\n ---\u003e ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArrayWhereSelectIterator`2\u003cMicrosoft.Graph.Models.ActivityType,System.__Canon\u003e.Select\u003cNullable`1\u003cAuthenticationMethodKeyStrength\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cAuthenticationMethodKeyStrength\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x2db\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.TaskReplicator.Run[TState](TaskReplicator.ReplicatableUserAction`1, ParallelOptions, Boolean) + 0x288\r\n   at System.Threading.Tasks.Parallel.ForWorker[TLocal,TInt](TInt, TInt, ParallelOptions, Action`1, Action`2, Func`4, Func`1, Action`1) + 0x1f4\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.ThrowSingleCancellationExceptionOrOtherException(ICollection, CancellationToken, Exception) + 0x30\r\n   at System.Threading.Tasks.Parallel.ForWorker[TLocal,TInt](TInt, TInt, ParallelOptions, Action`1, Action`2, Func`4, Func`1, Action`1) + 0x43f\r\n   at ILCompiler.ILScanner.CompileMultiThreaded(List`1) + 0x1d6\r\n   at ILCompiler.ILScanner.ComputeDependencyNodeDependencies(List`1 obj) + 0x168\r\n   at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes() + 0xb3\r\n   at ILCompiler.ILScanner.ILCompiler.IILScanner.Scan() + 0x1b\r\n   at ILCompiler.Program.\u003cRun\u003eg__RunScanner|4_0(Program.\u003c\u003ec__DisplayClass4_0\u0026) + 0x1e5\r\n   at ILCompiler.Program.Run() + 0x287f\r\n   at ILCompiler.ILCompilerRootCommand.\u003c\u003ec__DisplayClass240_0.\u003c.ctor\u003eb__0(ParseResult result) + 0x33c\r\n ---\u003e (Inner Exception #1) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.DayOfWeek,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x2db\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #2) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cchar,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x2db\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #3) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.WindowsMalwareThreatState\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cCloudPcDeviceImageStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cCloudPcDeviceImageStatus\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x2db\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #4) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArrayWhereSelectIterator`2\u003cMicrosoft.Graph.Models.TokenIssuerType,System.__Canon\u003e.Select\u003cNullable`1\u003cWebsiteType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cWebsiteType\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x2db\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #5) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Collections.Generic.KeyValuePair`2\u003cMailClient.Storage.SortKey,System.__Canon\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #6) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.PlannerPreviewType\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationAssignmentStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationAssignmentStatus\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #7) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cXstReader.TCROWIDANSI,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #8) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cMicrosoft.Graph.Models.WindowsHelloForBusinessPinUsage,System.__Canon\u003e.Select\u003cNullable`1\u003cSourceType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cSourceType\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #9) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArrayWhereSelectIterator`2\u003cAutoMapper.Internal.ConstructorParameters,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #10) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.ValueTuple`2\u003cint32,int32\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #11) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IteratorSelectIterator`2\u003cXilium.CefGlue.CefRange,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #12) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cMailClient.Settings.SendLaterOption,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #13) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cXstReader.NID,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #14) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IteratorSelectIterator`2\u003cMicrosoft.Graph.Models.ThreatAssessmentRequestSource,System.__Canon\u003e.Select\u003cNullable`1\u003cOutlierMemberType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cOutlierMemberType\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #15) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cMailClient.Protocols.TurkCell.Calendar.Objects.RecurrencneDay,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #16) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArrayWhereSelectIterator`2\u003cSystem.Collections.Generic.KeyValuePair`2\u003cuint32,MailClient.Storage.Mail.MailFlags\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #17) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListWhereSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.OnlineMeetingProviderType\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cAlertDetermination\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cAlertDetermination\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #18) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IteratorSelectIterator`2\u003cSystem.ValueTuple`2\u003cint32,int32\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #19) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMailClient.Reminders.Common+MailNotificationNotifyWhenNotRepliedOptions,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #20) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IteratorSelectIterator`2\u003cMailClient.Protocols.OnlineMeeting.MicrosoftTeams.Objects.DayOfWeek,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #21) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArrayWhereSelectIterator`2\u003cMicrosoft.Graph.Models.Security.IncidentStatus,System.__Canon\u003e.Select\u003cNullable`1\u003cSafeSearchFilterType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cSafeSearchFilterType\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #22) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cAutoMapper.QueryableExtensions.Impl.ProjectionBuilder+FirstPassLetPropertyMaps+SubQueryPath,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n ---\u003e (Inner Exception #23) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMicrosoft.Graph.Models.UserFlowType,System.__Canon\u003e.Select\u003cValueTuple`2\u003cint32,__Canon\u003e\u003e(Func`2\u003c__Canon,ValueTuple`2\u003cint32,__Canon\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n```\r\n\r\nNotably, I tried the same experiment on the same project couple of months ago. Obviously both the project and ILC evolved, but it seems to have arbitrarily trip a threshold in few places where the hash table expansion goes too big.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi8w8gQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc59ibGp",
                                           "createdAt":  "2024-05-12T09:07:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-12T09:07:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59imra",
                                           "createdAt":  "2024-05-12T12:03:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I am not sure if I can make an abridged repro, so here\u0027s the full ILC repro for a start: https://1drv.ms/u/s!AgaMhbe7wFq8m8pg-U17VEoTsQ6rGg?e=iAcv7t",
                                           "updatedAt":  "2024-05-12T12:03:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59ioBI",
                                           "createdAt":  "2024-05-12T12:21:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e  fails like ~20 minutes later with this error:\r\n\r\nIf it\u0027s compiling for 20 minutes, it\u0027s 99% sure you hit a \"wide\" generic recursion and you\u0027ll either hit this failure mode, or OOM (we do detect a \"deep\" recursion, but \"wide\" is a problem).\r\n\r\nTry the switch from https://github.com/dotnet/runtime/issues/97235#issuecomment-1991176284 to see the warnings that should point you where the recursion is.",
                                           "updatedAt":  "2024-05-12T12:21:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59ipg_",
                                           "createdAt":  "2024-05-12T12:44:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e If it\u0027s compiling for 20 minutes\r\n\r\nThe project is huge. I use it for NativeAOT testing because it tends to hit all sorts of limits. 20 minutes is actually not a bad time given my past attempts :-)\r\n\r\n\u003e Try the switch from https://github.com/dotnet/runtime/issues/97235#issuecomment-1991176284 to see the warnings that should point you where the recursion is.\r\n\r\nSure, will give it a try. \r\n\r\n",
                                           "updatedAt":  "2024-05-12T12:44:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59iris",
                                           "createdAt":  "2024-05-12T13:15:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I don\u0027t think `--maxgenericcycle:1` made any difference:\r\n```\r\nError: One or more errors occurred. (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cMicrosoft.Graph.Models.AccountTargetContentType,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.EducationGender,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cMicrosoft.Graph.Models.MultiFactorAuthConfiguration,System.__Canon\u003e.Select\u003cNullable`1\u003cOutlierMemberType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cOutlierMemberType\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMicrosoft.Graph.Models.InitiatorType,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cMicrosoft.Graph.Models.IdentityGovernance.ValueTypeObject,System.__Canon\u003e.Select\u003cNullable`1\u003cWebBrowserCookieSettings\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cWebBrowserCookieSettings\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ResponseType\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cCloudPcDeviceImageStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cCloudPcDeviceImageStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IteratorSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ManagedAppDataStorageLocation\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.ExternalConnectors.PropertyType,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.Security.EventPropagationStatus,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.UserExperienceAnalyticsInsightSeverity,System.__Canon\u003e.Select\u003cNullable`1\u003cTimeOffReasonIconType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cTimeOffReasonIconType\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMicrosoft.Graph.Models.AppListType,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cMicrosoft.Graph.Models.IdentityGovernance.ValueTypeObject,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cMicrosoft.Graph.Models.Win32LobAppRestartBehavior,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ConditionalAccessClientApp\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMicrosoft.Graph.Models.PrintColorMode,System.__Canon\u003e.Select\u003cNullable`1\u003cSourceType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cSourceType\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArrayWhereSelectIterator`2\u003cMicrosoft.Graph.Models.AccessPackageRequestState,System.__Canon\u003e.Select\u003cValueTuple`2\u003cint32,__Canon\u003e\u003e(Func`2\u003c__Canon,ValueTuple`2\u003cint32,__Canon\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArrayWhereSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.FollowupFlagStatus\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMicrosoft.Graph.Models.DelegatedAdminRelationshipStatus,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.RoutingType,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cMicrosoft.Graph.Models.MultiFactorAuthConfiguration,System.__Canon\u003e.Select\u003cNullable`1\u003cSafeSearchFilterType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cSafeSearchFilterType\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.B2bIdentityProvidersType\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.WeakAlgorithms,System.__Canon\u003e.Select\u003cNullable`1\u003cAlertSeverity\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cAlertSeverity\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMicrosoft.Graph.Models.InstallIntent,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cMicrosoft.Graph.Models.Security.ContentFormat,System.__Canon\u003e.Select\u003cNullable`1\u003cBroadcastMeetingAudience\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cBroadcastMeetingAudience\u003e\u003e)\u0027)\r\nSystem.AggregateException: One or more errors occurred. (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cMicrosoft.Graph.Models.AccountTargetContentType,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.EducationGender,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cMicrosoft.Graph.Models.MultiFactorAuthConfiguration,System.__Canon\u003e.Select\u003cNullable`1\u003cOutlierMemberType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cOutlierMemberType\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMicrosoft.Graph.Models.InitiatorType,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cMicrosoft.Graph.Models.IdentityGovernance.ValueTypeObject,System.__Canon\u003e.Select\u003cNullable`1\u003cWebBrowserCookieSettings\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cWebBrowserCookieSettings\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ResponseType\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cCloudPcDeviceImageStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cCloudPcDeviceImageStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IteratorSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ManagedAppDataStorageLocation\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.ExternalConnectors.PropertyType,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.Security.EventPropagationStatus,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.UserExperienceAnalyticsInsightSeverity,System.__Canon\u003e.Select\u003cNullable`1\u003cTimeOffReasonIconType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cTimeOffReasonIconType\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMicrosoft.Graph.Models.AppListType,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cMicrosoft.Graph.Models.IdentityGovernance.ValueTypeObject,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cMicrosoft.Graph.Models.Win32LobAppRestartBehavior,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ConditionalAccessClientApp\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMicrosoft.Graph.Models.PrintColorMode,System.__Canon\u003e.Select\u003cNullable`1\u003cSourceType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cSourceType\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArrayWhereSelectIterator`2\u003cMicrosoft.Graph.Models.AccessPackageRequestState,System.__Canon\u003e.Select\u003cValueTuple`2\u003cint32,__Canon\u003e\u003e(Func`2\u003c__Canon,ValueTuple`2\u003cint32,__Canon\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArrayWhereSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.FollowupFlagStatus\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMicrosoft.Graph.Models.DelegatedAdminRelationshipStatus,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.RoutingType,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cMicrosoft.Graph.Models.MultiFactorAuthConfiguration,System.__Canon\u003e.Select\u003cNullable`1\u003cSafeSearchFilterType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cSafeSearchFilterType\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.B2bIdentityProvidersType\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.WeakAlgorithms,System.__Canon\u003e.Select\u003cNullable`1\u003cAlertSeverity\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cAlertSeverity\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMicrosoft.Graph.Models.InstallIntent,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027) (Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cMicrosoft.Graph.Models.Security.ContentFormat,System.__Canon\u003e.Select\u003cNullable`1\u003cBroadcastMeetingAudience\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cBroadcastMeetingAudience\u003e\u003e)\u0027)\r\n ---\u003e ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cMicrosoft.Graph.Models.AccountTargetContentType,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x2db\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.TaskReplicator.Run[TState](TaskReplicator.ReplicatableUserAction`1, ParallelOptions, Boolean) + 0x288\r\n   at System.Threading.Tasks.Parallel.ForWorker[TLocal,TInt](TInt, TInt, ParallelOptions, Action`1, Action`2, Func`4, Func`1, Action`1) + 0x1f4\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.ThrowSingleCancellationExceptionOrOtherException(ICollection, CancellationToken, Exception) + 0x30\r\n   at System.Threading.Tasks.Parallel.ForWorker[TLocal,TInt](TInt, TInt, ParallelOptions, Action`1, Action`2, Func`4, Func`1, Action`1) + 0x43f\r\n   at ILCompiler.ILScanner.CompileMultiThreaded(List`1) + 0x1d6\r\n   at ILCompiler.ILScanner.ComputeDependencyNodeDependencies(List`1 obj) + 0x168\r\n   at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes() + 0xb3\r\n   at ILCompiler.ILScanner.ILCompiler.IILScanner.Scan() + 0x1b\r\n   at ILCompiler.Program.\u003cRun\u003eg__RunScanner|4_0(Program.\u003c\u003ec__DisplayClass4_0\u0026) + 0x1e5\r\n   at ILCompiler.Program.Run() + 0x287f\r\n   at ILCompiler.ILCompilerRootCommand.\u003c\u003ec__DisplayClass240_0.\u003c.ctor\u003eb__0(ParseResult result) + 0x33c\r\n ---\u003e (Inner Exception #1) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.EducationGender,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x2db\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #2) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cMicrosoft.Graph.Models.MultiFactorAuthConfiguration,System.__Canon\u003e.Select\u003cNullable`1\u003cOutlierMemberType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cOutlierMemberType\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x2db\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #3) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMicrosoft.Graph.Models.InitiatorType,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x2db\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #4) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cMicrosoft.Graph.Models.IdentityGovernance.ValueTypeObject,System.__Canon\u003e.Select\u003cNullable`1\u003cWebBrowserCookieSettings\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cWebBrowserCookieSettings\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #5) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ResponseType\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cCloudPcDeviceImageStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cCloudPcDeviceImageStatus\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #6) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IteratorSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ManagedAppDataStorageLocation\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #7) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.ExternalConnectors.PropertyType,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #8) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.Security.EventPropagationStatus,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #9) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.UserExperienceAnalyticsInsightSeverity,System.__Canon\u003e.Select\u003cNullable`1\u003cTimeOffReasonIconType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cTimeOffReasonIconType\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #10) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMicrosoft.Graph.Models.AppListType,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #11) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cMicrosoft.Graph.Models.IdentityGovernance.ValueTypeObject,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #12) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cMicrosoft.Graph.Models.Win32LobAppRestartBehavior,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #13) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ConditionalAccessClientApp\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #14) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMicrosoft.Graph.Models.PrintColorMode,System.__Canon\u003e.Select\u003cNullable`1\u003cSourceType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cSourceType\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #15) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArrayWhereSelectIterator`2\u003cMicrosoft.Graph.Models.AccessPackageRequestState,System.__Canon\u003e.Select\u003cValueTuple`2\u003cint32,__Canon\u003e\u003e(Func`2\u003c__Canon,ValueTuple`2\u003cint32,__Canon\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #16) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArrayWhereSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.FollowupFlagStatus\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cPromptLoginBehavior\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cPromptLoginBehavior\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #17) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMicrosoft.Graph.Models.DelegatedAdminRelationshipStatus,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #18) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.RoutingType,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #19) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cMicrosoft.Graph.Models.MultiFactorAuthConfiguration,System.__Canon\u003e.Select\u003cNullable`1\u003cSafeSearchFilterType\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cSafeSearchFilterType\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #20) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.B2bIdentityProvidersType\u003e,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #21) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cMicrosoft.Graph.Models.WeakAlgorithms,System.__Canon\u003e.Select\u003cNullable`1\u003cAlertSeverity\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cAlertSeverity\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #22) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+IListSkipTakeSelectIterator`2\u003cMicrosoft.Graph.Models.InstallIntent,System.__Canon\u003e.Select\u003cNullable`1\u003cEducationModuleStatus\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cEducationModuleStatus\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.InstantiatedType.\u003cGetVirtualMethods\u003ed__23.MoveNext() + 0x196\r\n   at ILCompiler.DependencyAnalysis.EETypeNode.AnalyzeVirtualMethods(TypeDesc) + 0x26f\r\n   at ILCompiler.DependencyAnalysis.EETypeNode..ctor(NodeFactory, TypeDesc) + 0x14e\r\n   at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc) + 0x8f\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x18\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x311\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n\r\n ---\u003e (Inner Exception #23) ILCompiler.CodeGenerationFailedException: Code generation failed for method \u0027[System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cMicrosoft.Graph.Models.Security.ContentFormat,System.__Canon\u003e.Select\u003cNullable`1\u003cBroadcastMeetingAudience\u003e\u003e(Func`2\u003c__Canon,Nullable`1\u003cBroadcastMeetingAudience\u003e\u003e)\u0027\r\n ---\u003e System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowOverflowException() + 0x24\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[]) + 0x1d5\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, Boolean\u0026) + 0x57\r\n   at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey) + 0x2d\r\n   at Internal.TypeSystem.MethodDesc.InstantiateSignature(Instantiation, Instantiation) + 0x259\r\n   at Internal.IL.InstantiatedMethodIL.GetObject(Int32, NotFoundBehavior) + 0x68\r\n   at Internal.IL.ILImporter.ImportCall(ILOpcode, Int32) + 0x74\r\n   at Internal.IL.ILImporter.ImportBasicBlock(ILImporter.BasicBlock) + 0x541\r\n   at Internal.IL.ILImporter.ImportBasicBlocks() + 0x55\r\n   at Internal.IL.ILImporter.Import() + 0x8fa\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x5c\r\n   --- End of inner exception stack trace ---\r\n   at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode) + 0x226\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x2c5\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`2.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int64 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion) + 0x511\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute() + 0x15a\u003c---\r\n```",
                                           "updatedAt":  "2024-05-12T13:15:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59law4",
                                           "createdAt":  "2024-05-13T08:29:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Yep, looks like there\u0027s no generic recursion, just a ton of stuff.\r\n\r\nIf you re-run the failing ilc execution by adding `--verbose --parallelism:1` you\u0027ll see how the compiler is slowly drowning compiling hundreds of thousands of LINQ for Microsoft.Graph.\r\n\r\n```\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.DeviceRegistrationState\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.DeviceManagementExchangeAccessState\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.DeviceManagementExchangeAccessState\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.DeviceManagementExchangeAccessState\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.DeviceManagementExchangeAccessState\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.DeviceManagementExchangeAccessStateReason\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.DeviceManagementExchangeAccessStateReason\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.DeviceManagementExchangeAccessStateReason\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.DeviceManagementExchangeAccessStateReason\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ManagedDeviceOwnerType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ManagedDeviceOwnerType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ManagedDeviceOwnerType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ManagedDeviceOwnerType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ManagementAgentType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ManagementAgentType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ManagementAgentType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ManagementAgentType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ManagedDevicePartnerReportedHealthState\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ManagedDevicePartnerReportedHealthState\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ManagedDevicePartnerReportedHealthState\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ManagedDevicePartnerReportedHealthState\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.Importance\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.Importance\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.Importance\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.Importance\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.InferenceClassificationType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.InferenceClassificationType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.InferenceClassificationType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.InferenceClassificationType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.MeetingChatMode\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.MeetingChatMode\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.MeetingChatMode\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.MeetingChatMode\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.OnlineMeetingPresenters\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.OnlineMeetingPresenters\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.OnlineMeetingPresenters\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.OnlineMeetingPresenters\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.MeetingChatHistoryDefaultMode\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.MeetingChatHistoryDefaultMode\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.MeetingChatHistoryDefaultMode\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.MeetingChatHistoryDefaultMode\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ChannelMembershipType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ChannelMembershipType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ChannelMembershipType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ChannelMembershipType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.TeamSpecialization\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.TeamSpecialization\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.TeamSpecialization\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.TeamSpecialization\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.TeamVisibilityType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.TeamVisibilityType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.TeamVisibilityType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.TeamVisibilityType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ChatMessageImportance\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ChatMessageImportance\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ChatMessageImportance\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ChatMessageImportance\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ChatMessageType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ChatMessageType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ChatMessageType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ChatMessageType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ChatType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ChatType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ChatType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.ChatType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.MdmAuthority\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.MdmAuthority\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.MdmAuthority\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.MdmAuthority\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.PartnerTenantType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.PartnerTenantType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.PartnerTenantType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.PartnerTenantType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ArraySelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.BodyType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+ListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.BodyType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IListSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.BodyType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\nILC: Scanning [System.Linq]System.Linq.Enumerable+IEnumerableSelectIterator`2\u003cSystem.Nullable`1\u003cMicrosoft.Graph.Models.BodyType\u003e,System.__Canon\u003e.Select\u003c__Canon\u003e(Func`2\u003c__Canon,__Canon\u003e)...\r\n```\r\n\r\nThere\u0027s no clear sign this is a recursion, just tons of types and variations.\r\n\r\nI don\u0027t know if there\u0027s anything to do.\r\n\r\nEven if this succeeded, we\u0027re likely to run into PE file format limits.\r\n\r\nCc @eerhardt if he heard about Microsoft.Graph and why is it 35 MB __in IL__. Basically this is already bigger than all of BCL combined and apparently doesn\u0027t trim very well, and add generic specialization and it becomes incompilable.",
                                           "updatedAt":  "2024-05-13T08:29:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59no4v",
                                           "createdAt":  "2024-05-13T13:12:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Thanks for checking it. The annoying thing is that we use very small subset of the `Microsoft.Graph` assembly and I expected to get most of it trimmed.",
                                           "updatedAt":  "2024-05-13T13:12:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59n52e",
                                           "createdAt":  "2024-05-13T13:41:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODhulNg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2024-05-13T17:55:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "MichalStrehovsky",
                                                                               "createdAt":  "2024-05-14T09:06:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e why is it 35 MB in IL\r\n\r\nLooks like the reported issue got closed due to inactivity https://github.com/microsoftgraph/msgraph-sdk-dotnet/issues/1702.",
                                           "updatedAt":  "2024-05-13T13:41:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59wmJ-",
                                           "createdAt":  "2024-05-14T10:52:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "The quoted issue in particular states:\r\n\u003e We\u0027ve worked with the dotnet team to enable proper AOT support. If you haven\u0027t explored that aspect, and you don\u0027t want to switch to a self-served client, you should try AOT, which among other things tree-shakes the assemblies. In a containerized scenario the dotnet team went from ~350+MB down to ~30MB (trimming + changing base image).\r\n\r\nThat\u0027s certainly not working as advertised. Neither is the approach of generating your own SDK subset using Microsoft Kiota because it generates the exact same Model bloat full of classes that are never even referenced.",
                                           "updatedAt":  "2024-05-14T10:52:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59xcRH",
                                           "createdAt":  "2024-05-14T12:37:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "@filipnavara, is it reproduced with isolated repro; like a dummy project with calls to bunch of Graph endpoints? I tried a sample app: https://github.com/microsoftgraph/msgraph-sample-github-connector-dotnet/tree/main (changed net8 -\u003e net9 and published with PublishAot on osx-arm64 with daily build), it seemed to have published in a few seconds.",
                                           "updatedAt":  "2024-05-14T12:37:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-C5be",
                                           "createdAt":  "2024-05-16T09:29:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODiBRYw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2024-05-16T09:32:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I suppose I can try to reduce the repro. The whole app was always on the verge of hitting some limits, so it\u0027s very well possible that this was just the last thing that pushed it over, but the number of classes from the Graph assembly is certainly too high to ignore...",
                                           "updatedAt":  "2024-05-16T09:29:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-C8an",
                                           "createdAt":  "2024-05-16T09:35:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Also, I suppose the LINQ optimizations in .NET 9 may also play a role. There\u0027s a LOT of LINQ specializations and apparently each added interface basically multiplies those, resulting in each specialized iterator taking 4 slots in this hash table which certainly doesn\u0027t help things.",
                                           "updatedAt":  "2024-05-16T09:35:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-C_X9",
                                           "createdAt":  "2024-05-16T09:42:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Yup, and this https://github.com/dotnet/runtime/pull/101969 😉\r\nAlso found this awesome lib https://github.com/cathei/LinqGen (from the list https://github.com/amis92/csharp-source-generators/blob/main/README.md) which may help Graph.dll. We can sprinkle around .Gen() in their code and check if it makes a difference (hopefully it does).",
                                           "updatedAt":  "2024-05-16T09:42:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-DGbt",
                                           "createdAt":  "2024-05-16T09:54:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODiBoig==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2024-05-16T10:12:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Also, I suppose the LINQ optimizations in .NET 9 may also play a role. There\u0027s a LOT of LINQ specializations and apparently each added interface basically multiplies those, resulting in each specialized iterator taking 4 slots in this hash table which certainly doesn\u0027t help things.\r\n\r\nI already tried replacing LINQ with the one from 8.0 and also with the one used on WASM (that has less generic code). It didn\u0027t seem to help.",
                                           "updatedAt":  "2024-05-16T09:54:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-DTc6",
                                           "createdAt":  "2024-05-16T10:13:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I am aware of LinqGen but it’s not trivial to just add it to project of this size :)",
                                           "updatedAt":  "2024-05-16T10:13:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-DZ-_",
                                           "createdAt":  "2024-05-16T10:24:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODiCPpg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2024-05-16T11:32:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "For what\u0027s it worth. I enabled the verbose logging, redirected it to file and let it run until the overflow happens.\r\n\r\n```\r\nnavara@FilipNavaraR7K:/mnt/d/temp/repro$ cat log.txt | wc -l\r\n8501369\r\nnavara@FilipNavaraR7K:/mnt/d/temp/repro$ cat log.txt | grep -a \"Microsoft\\.Graph\" | wc -l\r\n7569743\r\nnavara@FilipNavaraR7K:/mnt/d/temp/repro$ cat log.txt | grep -a \"\\[System\\.Linq\\]\" | wc -l\r\n7701163\r\n```\r\n\r\n",
                                           "updatedAt":  "2024-05-16T10:24:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-EnTl",
                                           "createdAt":  "2024-05-16T12:37:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Seems like the minimal repro is\r\n\r\n```csharp\r\nusing Microsoft.Graph;\r\n\r\nvar httpClient = new HttpClient();\r\nvar graphClient = new GraphServiceClient(httpClient);\r\nvar me = await graphClient.Me.GetAsync();\r\n```\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet9.0\u003c/TargetFramework\u003e\r\n    \u003cRootNamespace\u003emsgraph_repro\u003c/RootNamespace\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cPublishAot\u003etrue\u003c/PublishAot\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Graph\" Version=\"5.48.0\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\nFWIW this is supposed to do a simple HTTP request:\r\n\u003cimg width=\"1364\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/1764393/d38dad04-800f-45cb-b42c-498fbd924c5c\"\u003e\r\n",
                                           "updatedAt":  "2024-05-16T12:41:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-FXHD",
                                           "createdAt":  "2024-05-16T14:00:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Nice repro! `IlcCompile (3452,2s)` on M1 still ongoing. 😅\r\n\r\nThe [other GitHub sample](https://github.com/dotnet/runtime/issues/102131#issuecomment-2110112839) wasn\u0027t using .me.GetAsync(), but instead `.External.Connections.GetAsync();`. With that, it compiles in ~10 secs.",
                                           "updatedAt":  "2024-05-16T14:00:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-FeNk",
                                           "createdAt":  "2024-05-16T14:12:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e The [other GitHub sample](https://github.com/dotnet/runtime/issues/102131#issuecomment-2110112839) wasn\u0027t using .me.GetAsync(), but instead `.External.Connections.GetAsync();`. With that, it compiles in ~10 secs.\r\n\r\nThere are some endpoints that trigger it and others that don\u0027t. We hit it with more than one, but this was the first one I found to reproduce it. The compilation on my machine (Ryzen 7950 on Windows) fails after 30 minutes.",
                                           "updatedAt":  "2024-05-16T14:12:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-K-jC",
                                           "createdAt":  "2024-05-17T06:12:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEP8Q2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-05-17T06:22:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2024-05-17T06:34:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2024-05-17T07:13:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2024-05-17T07:47:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MrMikeJJ",
                                                                               "createdAt":  "2024-05-26T15:40:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "keegan-caruso",
                                                                               "createdAt":  "2024-05-31T01:08:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-04-28T14:39:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Okay, this took a while to untangle because all the tools we have are crashing on this. I\u0027m going to channel some frustration into this response. I see the problem, it\u0027s unclear how hard it will be to fix. It needs to be fixed in Kiota.\r\n\r\nFirst some intro. LINQ is implemented on top of a ton of generic virtual methods. Generic virtual methods tend to have combinatorial explosions. Think:\r\n\r\n```csharp\r\ninterface I\r\n{\r\n    void Do\u003cT\u003e();\r\n}\r\n\r\nclass A : I\r\n{\r\n    public void Do\u003cT\u003e();\r\n}\r\n\r\nclass B : I\r\n{\r\n    public void Do\u003cT\u003e();\r\n}\r\n```\r\n\r\nThen somewhere we do `I o = new A(); o.Do\u003cint\u003e();`. Somewhere else we do `I o = new B(); o.Do\u003cfloat\u003e();`. When compiling this ahead of time, A and B end up each getting a `Do\u003cint\u003e` and `Do\u003cfloat\u003e` method. Now imagine A and B were also generic themselves. You get the gist.\r\n\r\nLooking at how this works with LINQ:\r\n\r\n```csharp\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Reflection;\r\n\r\nGetEnumValue\u003cMyEnum\u003e();\r\nGetEnumValue\u003cYourEnum\u003e();\r\n\r\nstatic T? GetEnumValue\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicFields)] T\u003e() where T : struct, Enum\r\n{\r\n    var rawValue = \"foo,bar\";\r\n    if (string.IsNullOrEmpty(rawValue)) return null;\r\n\r\n    var type = typeof(T);\r\n    if (type.GetCustomAttributes\u003cFlagsAttribute\u003e().Any())\r\n    {\r\n        return (T)(object)rawValue!\r\n            .Split(\u0027,\u0027)\r\n            .Select(x =\u003e Enum.TryParse\u003cT\u003e(x, true, out var result) ? result : (T?)null)\r\n            .Where(x =\u003e !x.Equals(null))\r\n            .Select(x =\u003e (int)(object)x!)\r\n            .Sum();\r\n    }\r\n    else\r\n        return Enum.TryParse\u003cT\u003e(rawValue, true, out var result) ? result : null;\r\n}\r\n\r\nenum MyEnum { }\r\nenum YourEnum { }\r\n```\r\n\r\nNotice that I\u0027m doing a bunch of select/where with MyEnum and YourEnum, separately. But compile this with AOT and look at what was generated with [sizoscope](https://github.com/MichalStrehovsky/sizoscope):\r\n\r\n![image](https://github.com/dotnet/runtime/assets/13110571/d07e758b-6665-47fb-b2ca-ace3252548ea)\r\n\r\nNotice IteratorSelectIterator over YourEnum getting a Select method body for MyEnum. Notice IteratorSelectIterator types instantiated over __both__ YourEnum and MyEnum, in all possible combinations.\r\n\r\nYou might think, Michal, what a crazy example of LINQ use, nobody writes code like that. Nobody writes `type.GetCustomAttributes\u003cFlagsAttribute\u003e().Any()`. It has bad startup and memory use characteristics, irrespective of AOT. Well, [welcome to the Kiota codebase](https://github.com/microsoft/kiota-serialization-json-dotnet/blob/edb5655075844add07888f5ca05ca3142ab4d829/src/JsonParseNode.cs#L214-L236).\r\n\r\nLINQ is everywhere, including all the generated code, even in places that look trivially avoidable.\r\n\r\nThe good news is that Copilot is pretty good at \"can you rewrite this code without LINQ\" and produces more readable and efficient code than the original.",
                                           "updatedAt":  "2024-05-17T06:12:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-LY-Q",
                                           "createdAt":  "2024-05-17T07:21:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "(This also explains why Microsoft.Graph is 35 MB of IL. It\u0027s all the lambdas.)",
                                           "updatedAt":  "2024-05-17T07:21:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-Lm-Q",
                                           "createdAt":  "2024-05-17T07:59:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I guess we should file an issue with Kiota, right? I can do that.\r\n\r\nStepping aside from the specific scenario, do you have any ideas on how to limit the generic expansion or report better errors? Not asking for a miracle, but I assume people may inadvertently run into this and diagnosing it is quite painful with the crashing tools. I was unable to produce DGML/MSTAT for any non-trivial code that would make it easier to find the root cause and create a repro.",
                                           "updatedAt":  "2024-05-17T07:59:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-LtxD",
                                           "createdAt":  "2024-05-17T08:16:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODiKfzw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2024-05-17T08:17:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "There is no single reason. It\u0027s a death by a thousand papercuts. I honestly don\u0027t know what approach could be used here. It\u0027s a philosophical problem akin to sorites paradox.\r\n\r\nThe approach I ended up using was this tool: https://github.com/dotnet/runtime/tree/4246ba19bd196c5f374d94e5c1fc7b21d53bd9fc/src/coreclr/tools/aot/DependencyGraphViewer. Click the \"Use ETW\" button, it will listen to dependency graph event in any active ILC compilation. Then I ran ILC with `--verbose --parallelism:1` until things started to look repetitive and then I stopped the compilation (DependencyGraphViewer will become very sluggish and eat gigabytes of memory very quickly if you don\u0027t stop it soon enough). Then I drilled down into the repetitive things in the viewer tool and root caused one of them to the Enum deserialization. I doubt that\u0027s the only problem.",
                                           "updatedAt":  "2024-05-17T08:16:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-Luwr",
                                           "createdAt":  "2024-05-17T08:18:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I guess what we could do is to add a command line switch that will abort compilation after a user-specified number of methods and spits out whatever logs were requested and a broken object file. That might help.",
                                           "updatedAt":  "2024-05-17T08:18:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-Lu3j",
                                           "createdAt":  "2024-05-17T08:18:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Thanks for the analysis and documenting the `DependencyGraphViewer` approach. At least now we have a searchable issue with a hint of how to proceed in diagnosing it :-)",
                                           "updatedAt":  "2024-05-17T08:18:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-LvTd",
                                           "createdAt":  "2024-05-17T08:19:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e I guess what we could do is to add a command line switch that will abort compilation after a user-specified number of methods and spits out whatever logs were requested and a broken object file. That might help.\r\n\r\nI guess I would be happy if the DGML file was written even on unsuccessful compilation (assuming compilation with `IlcGenerateDgmlFile=true`). That would likely be somewhat useful.",
                                           "updatedAt":  "2024-05-17T08:20:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-MGc-",
                                           "createdAt":  "2024-05-17T09:11:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Btw, fixing up the Enum reading/writing in `Microsoft.Kiota.Serialization.Form` and `Microsoft.Kiota.Serialization.Json` is enough to stop the LINQ generic expansion and makes the compilation (of the repro) pass.",
                                           "updatedAt":  "2024-05-17T09:11:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-QYsU",
                                           "createdAt":  "2024-05-17T19:09:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "\u003e I guess what we could do is to add a command line switch that will abort compilation after a user-specified number of methods and spits out whatever logs were requested and a broken object file. That might help.\n\nIt\u0027s not unreasonable to do this by default. The C# compiler has a specific error message for this \"This expression is too large or complex to compile.\" Basically used for when the program starts running up against physical limits.",
                                           "updatedAt":  "2024-05-17T19:09:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-fDz6",
                                           "createdAt":  "2024-05-21T08:33:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODin--A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2024-05-21T10:15:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-05-21T17:13:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "The underlying issue in the Microsoft Graph SDK / Kiota is fixed and I can confirm that the build runs to the end now.\r\n\r\nShould we close this issue? Should we keep it around to track improvements to the diagnostic options?",
                                           "updatedAt":  "2024-05-21T08:33:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-f5gu",
                                           "createdAt":  "2024-05-21T10:22:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "I think it may be better to define a hard limit (in byte or number of generic types we can handle), then issue an descriptive message if it exceeds the limit (and/or catch `OverflowException` and issue that message). Perhaps with a link to general guidance for optimizing applications for AOT. That kind of link may also be shown to stdout while ilc is working and taking a while (e.g. 10+ minutes).",
                                           "updatedAt":  "2024-05-21T10:22:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-hhyy",
                                           "createdAt":  "2024-05-21T14:04:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODin_UQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2024-05-21T14:28:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-05-21T17:14:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Just a side-note, there are still places in the Microsoft.Graph SDK that emit expensive LINQ even with the serialization fix:\r\n\r\n\u003cimg width=\"716\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/1764393/07ea397f-4644-4c81-b8a5-eb6a26feef30\"\u003e\r\n\r\nThe app still has ~90Mb (30%) of the LINQ generic expansions where at least some of them are from parts of the Graph SDK that we don\u0027t use. On the upside I have MSTAT and DGML log files now.\r\n\r\nUPD: Hopefully I found the [culprit](https://github.com/microsoft/kiota-serialization-form-dotnet/blob/087222f628a7557b298c87c01a89064999e74041/src/FormSerializationWriter.cs#L203-L212).\r\n",
                                           "updatedAt":  "2024-05-21T14:11:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EfOVN",
                                           "createdAt":  "2024-07-11T12:15:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kasperk81",
                                           "body":  "https://github.com/microsoft/kiota/releases/tag/v1.16.0 removed linq from kiota generated code and kiota.* dependencies\r\n@filipnavara, could you measure the impact? I know @baywet was interested.",
                                           "updatedAt":  "2024-07-11T12:15:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EfS2b",
                                           "createdAt":  "2024-07-11T12:23:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpT-BA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "kasperk81",
                                                                               "createdAt":  "2024-07-11T12:26:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "baywet",
                                                                               "createdAt":  "2024-07-11T13:09:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "All the recent Kiota fixes made it viable to use in the NativeAOT scenarios and it no longer crashes the AOT compiler. I shared some numbers earlier on individual PRs/issues. Notably, the initial fixes went from Kiota choking the AOT compiler to successful build. Later fixes cut down 60 MB of the resulting app size (Microsoft Graph SDK and few other dependencies). We are now down to ~26 MB for all LINQ instances in the whole app according to Sizoscope and so Kiota is no longer the biggest contributor.",
                                           "updatedAt":  "2024-07-11T12:23:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ef2VX",
                                           "createdAt":  "2024-07-11T13:27:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kasperk81",
                                           "body":  "should cut down more after https://github.com/microsoftgraph/msgraph-sdk-dotnet/pull/2573",
                                           "updatedAt":  "2024-07-11T13:27:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EhK8y",
                                           "createdAt":  "2024-07-11T15:45:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e should cut down more after [microsoftgraph/msgraph-sdk-dotnet#2573](https://github.com/microsoftgraph/msgraph-sdk-dotnet/pull/2573)\r\n\r\nThat requires rebuilding all the SDKs / models that we depend on. I can do most of that myself but I\u0027d prefer to wait at least for the Graph SDK packages from upstream.",
                                           "updatedAt":  "2024-07-11T15:45:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Lyz4R",
                                           "createdAt":  "2024-09-12T06:10:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODx87CQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2024-09-12T06:55:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kasperk81",
                                           "body":  "@filipnavara [latest release](https://github.com/microsoftgraph/msgraph-sdk-dotnet/releases/tag/5.58.0) should have all the no-linq changes if you wana give it a try",
                                           "updatedAt":  "2024-09-12T06:10:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LzDyB",
                                           "createdAt":  "2024-09-12T06:55:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e @filipnavara [latest release](https://github.com/microsoftgraph/msgraph-sdk-dotnet/releases/tag/5.58.0) should have all the no-linq changes if you wana give it a try\r\n\r\nThanks for the heads up!",
                                           "updatedAt":  "2024-09-12T06:55:37Z"
                                       }
                                   ],
                         "totalCount":  37
                     },
        "title":  "LockFreeReaderHashtable growing algorithm results in an arithmetic overflow",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102544",
        "createdAt":  "2024-05-22T07:33:08Z",
        "number":  102544,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-03T16:21:49Z",
        "body":  "The test is doing things that expect ObjectDisposedException but this one is in some unguarded spot.\r\n\r\n```\r\nUnhandled exception. System.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: \u0027Microsoft.Win32.SafeHandles.SafeWaitHandle\u0027.\r\n   at System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean\u0026) + 0x5e\r\n   at Interop.Kernel32.SetEvent(SafeWaitHandle) + 0x34\r\n   at System.Threading.RegisteredWaitHandle.FinishUnregisteringAsync(Object) + 0x3c\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch() + 0x2af\r\n   at System.Threading.WindowsThreadPool.DispatchCallback(IntPtr, IntPtr, IntPtr) + 0x97\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfprKaw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5-mspr",
                                           "createdAt":  "2024-05-22T07:33:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-22T07:33:25Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[NativeAOT] baseservices\\threading\\regressions\\beta2\\437017\\437017 test failing",
        "labels":  [
                       "disabled-test",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102741",
        "createdAt":  "2024-05-28T07:21:24Z",
        "number":  102741,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-28T07:21:43Z",
        "body":  "Affects IL-level scenarios such as multiple methods in a single type overriding the same virtual method.\r\n\r\nLoader\\classloader\\regressions\\dd52\\dd52",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfzogRw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5_OiBH",
                                           "createdAt":  "2024-05-28T07:21:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-28T07:21:41Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Corner case virtual method resolution bugs",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102869",
        "createdAt":  "2024-05-30T08:34:39Z",
        "number":  102869,
        "author":  "JCash",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-26T21:57:01Z",
        "body":  "### Description\n\nWhen I generate static libraries using NativeAOT for macOS, it doesn\u0027t produce a standard name. (With standard, I mean gcc/clang)\r\nFor `feature.csproj`, it will output `feature.a`.\r\nThe expected name is `libfeature.a`\r\n\r\nWith more projects using NativeAOT, I think fixing this will be very beneficial, since the non-standard naming scheme will require workarounds in most common toolchains.\r\n\r\nRelevant code:\r\nhttps://github.com/dotnet/runtime/blob/36a85b00695007652d8a2d5e1c5e9d99b7247505/src/coreclr/nativeaot/BuildIntegration/Microsoft.NETCore.Native.targets#L82C65-L82C80\r\n\r\nCompare with LibraryBuilder.cs, which does seem to support it:\r\nhttps://github.com/dotnet/runtime/blob/36a85b00695007652d8a2d5e1c5e9d99b7247505/src/tasks/LibraryBuilder/LibraryBuilder.cs#L413\n\n### Reproduction Steps\n\nI use a NativeAOT project `feature.csproj`:\r\n```\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cPublishAot\u003etrue\u003c/PublishAot\u003e\r\n    \u003cAllowUnsafeBlocks\u003eTrue\u003c/AllowUnsafeBlocks\u003e\r\n    \u003cStackTraceSupport\u003etrue\u003c/StackTraceSupport\u003e\r\n    \u003cAppendTargetFrameworkToOutputPath\u003efalse\u003c/AppendTargetFrameworkToOutputPath\u003e\r\n    \u003cAppendRuntimeIdentifierToOutputPath\u003efalse\u003c/AppendRuntimeIdentifierToOutputPath\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\nI build the project with\r\n```\r\ndotnet publish -r osx-arm64 -p:PublishAot=true -p:NativeLib=Static feature.csproj\r\n```\n\n### Expected behavior\n\nFor *nix platforms, I expect the static libraries to have a prefix `lib` in order for them to work as usual with gcc/clang.\n\n### Actual behavior\n\nThe static libraries for *nix platforms are missing the prefix.\r\nA `feature.csproj` will output a `feature.a` file.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nPassing libraries to the compiler using an absolute path. Requires more heavy lifting to support in different build toolchains.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmMYrjQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5_fwR0",
                                           "createdAt":  "2024-05-30T08:34:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-30T08:34:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_gdz-",
                                           "createdAt":  "2024-05-30T10:07:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODj3AyQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-05-30T10:11:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-05-30T10:56:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "am11",
                                           "body":  "You can set this property in your project: `\u003cTargetName\u003elibfeature\u003c/TargetName\u003e` for both Static and Shared libs. (also works for executables)\r\n\r\nWe generally follow the native toolchain convention, which in this case will produce a.out (for libs and executables alike), unless -o is provided. We just default to project name.",
                                           "updatedAt":  "2024-05-30T10:07:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_iINU",
                                           "createdAt":  "2024-05-30T14:14:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JCash",
                                           "body":  "Hi @am11 !\r\n\r\nThanks for the suggestion!\r\nDo you know, is it possible to have `\u003cTargetName\u003elibfeature\u003c/TargetName\u003e` for *nix platforms and `\u003cTargetName\u003efeature\u003c/TargetName\u003e` for windows, in the same .csproj file?\r\n",
                                           "updatedAt":  "2024-05-30T14:14:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_iQdn",
                                           "createdAt":  "2024-05-30T14:25:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODj5J2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "JCash",
                                                                               "createdAt":  "2024-05-30T15:10:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "Something like:\r\n\r\n```csproj\r\n\u003cTargetName\u003e$(MSBuildProjectName)\u003c/TargetName\u003e\r\n\u003cTargetName Condition=\"\u0027$(OS)\u0027 != \u0027Windows_NT\u0027\"\u003elib$(TargetName)\u003c/TargetName\u003e\r\n````",
                                           "updatedAt":  "2024-05-30T14:25:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_i9DN",
                                           "createdAt":  "2024-05-30T15:10:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODj8MHQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2024-05-30T21:11:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JCash",
                                           "body":  "Thanks!\r\nThat works for my use case.",
                                           "updatedAt":  "2024-05-30T15:10:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YxZRO",
                                           "createdAt":  "2024-12-26T20:37:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antoinebj",
                                           "body":  "\u003e You can set this property in your project: `\u003cTargetName\u003elibfeature\u003c/TargetName\u003e` for both Static and Shared libs. (also works for executables)\n\nSomehow that breaks `InternalsVisibleTo` just like changing `AssemblyName` would.\nIt would be nice to have a way to publish the library with the `lib` prefix without resorting to additional scripting or affecting other mechanisms.",
                                           "updatedAt":  "2024-12-26T20:37:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YxiuN",
                                           "createdAt":  "2024-12-26T21:57:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "To keep the assembly `myname.dll` intact, while producing `libmyname.so` AOT binary, one way is to create a separate project file and still have a seamless dev experience.\n\n`myproject_publish.csproj`\n```csproj\n\u003cProject\u003e\n\n  \u003cPropertyGroup\u003e\n    \u003cPublishAot\u003etrue\u003c/PublishAot\u003e\n    \u003cTargetName\u003elibmyproject\u003c/TargetName\u003e\n    \u003cIsPublishable\u003etrue\u003c/IsPublishable\u003e\n  \u003c/PropertyGroup\u003e\n\n  \u003cImport Project=\"myproject.csproj\" /\u003e\n\n\u003c/Project\u003e\n```\nand `myproject.csproj` should disable publishing (to avoid double publishing):\n```csproj\n\u003cIsPublishable Condition=\"\u0027$(IsPublishable)\u0027 == \u0027\u0027\"\u003efalse\u003c/IsPublishable\u003e\n```\nAdd `myproject_publish.csproj` to solution file then `dotnet publish your.sln` or publish solution from VS etc.. This would only publish `myproject_publish`. Also you can directly publish it using `dotnet publish myproject_publish.csproj`.",
                                           "updatedAt":  "2024-12-26T21:57:00Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "NativeAOT generates native object without correct prefix",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103073",
        "createdAt":  "2024-06-05T13:08:09Z",
        "number":  103073,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-24T04:34:08Z",
        "body":  "Seen in the following test run for the Microsoft.Extensions.Logging.Generators.Roslyn4.8.Tests test. This is a new test added last week.\r\n\r\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=698028\u0026view=logs\u0026jobId=81f19b99-bbe6-5a12-eb99-6b7b5bb4d46c\u0026j=81f19b99-bbe6-5a12-eb99-6b7b5bb4d46c\u0026t=f9edd3c6-1507-5379-7d58-42697b2d6930\r\n\r\nPR #103069\r\n\r\nI\u0027m going to fully disable the test because we don\u0027t want to run source generator tests with native AOT (they include entire Roslyn, are not trim safe and in general a pain) and all the other ones are already disabled. But this is probably a representative \"massive executable\" issue.\r\n\r\n```\r\n  ld: b(l) ARM64 branch out of range (134218280 max is +/-128MB): from _SystemNative_Write (0x10015AE9C) to _write.stub@0x00000000 (0x10815B0F0) in \u0027_SystemNative_Write\u0027 from /Users/runner/work/1/s/artifacts/bin/testhost/net9.0-osx-Release-arm64/shared/Microsoft.NETCore.App/9.0.0/libSystem.Native.a(pal_io.c.o)\r\n  clang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOo7mlKw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6AI_51",
                                           "createdAt":  "2024-06-05T13:08:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-05T13:08:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AJpct",
                                           "createdAt":  "2024-06-05T13:49:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Is that in a debug build? I wanted to write about it but I didn’t find a realistic scenario where it would be hit.",
                                           "updatedAt":  "2024-06-05T13:49:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ANHpf",
                                           "createdAt":  "2024-06-05T20:37:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODktA0A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2024-06-05T20:58:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Is that in a debug build? I wanted to write about it but I didn’t find a realistic scenario where it would be hit.\r\n\r\nThe logs say it\u0027s release",
                                           "updatedAt":  "2024-06-05T20:37:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6juaUr",
                                           "createdAt":  "2025-03-24T04:29:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ds5678",
                                           "body":  "\u003e Is that in a debug build? I wanted to write about it but I didn’t find a realistic scenario where it would be hit.\n\nWhile I\u0027m not sure if I\u0027ve encountered the exact error mentioned in this issue, I do compile a large executable with NativeAOT for x64 and ARM64. Occasionally, I have to find ways to be more size-conscious in my codebase. ARM64 compilation fails if the final output would be significantly larger than 128MB.\n\nhttps://github.com/AssetRipper/AssetRipper\n\nMost recently, the error I encountered was:\n\n```\nerror LNK2013: BRANCH26 fixup overflow.  Target \u0027RhpNewArray\u0027 is out of range\nerror LNK2013: BRANCH26 fixup overflow.  Target \u0027{thunk}RhpNewArray\u0027 is out of range \n```\n\nI would be happy to help with this if I can. The size limitation has been frustrating for me, and it\u0027d be a relief to no longer worry about that.",
                                           "updatedAt":  "2025-03-24T04:34:07Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "ARM64 branch out of range",
        "labels":  [
                       "arch-arm64",
                       "os-mac-os-x",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103156",
        "createdAt":  "2024-06-07T09:22:12Z",
        "number":  103156,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-07T09:22:32Z",
        "body":  "Search for this issue number to find disabled test (`ToString_Invoke_ReturnsExpected`).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgGpCfg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6AakJ-",
                                           "createdAt":  "2024-06-07T09:22:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-07T09:22:30Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "StackFrame.ToString has different formatting on native AOT",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103218",
        "createdAt":  "2024-06-10T04:31:11Z",
        "number":  103218,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-10T04:39:11Z",
        "body":  "See disabled tests.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgJQJoQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6AlAmh",
                                           "createdAt":  "2024-06-10T04:31:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-10T04:31:34Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "StackTrace APIs don\u0027t work for unreasonably large/negative skipFrames values",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103219",
        "createdAt":  "2024-06-10T07:50:34Z",
        "number":  103219,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-10T14:16:09Z",
        "body":  "It\u0027s not possible to obtain MethodInfo for a delegate pointing to a non-generic default interface method on a shared generic type. This is because the delegate points to a special instantiating thunk that reflection is unable to decode.\r\n\r\nThere\u0027s a disabled test with this issue number.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgJon0Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6AmifR",
                                           "createdAt":  "2024-06-10T07:50:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-10T07:50:57Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Unable to retrieve MethodInfo for delegates to certain default interface methods",
        "labels":  [
                       "disabled-test",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103285",
        "createdAt":  "2024-06-11T15:13:26Z",
        "number":  103285,
        "author":  "filipnavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5TU7g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-06-12T19:44:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yushroom",
                                            "createdAt":  "2024-07-11T15:47:57Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-07-01T21:53:45Z",
        "body":  "The method:\r\nhttps://github.com/dotnet/runtime/blob/07d363739f74477b854be3614ee063d6e94bbf90/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/Compilation.cs#L78-L85\r\n\r\nProfile when compiling large app:\r\n```\r\n  100%   GetMethodIL  •  28,751 ms  •  ILCompiler.Compilation.GetMethodIL(MethodDesc)\r\n    99.9%   CreateValueAndEnsureValueIsInTable  •  28,745 ms  •  Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey)\r\n      56.9%   AddOrGetExistingInner  •  16,355 ms  •  Internal.TypeSystem.LockFreeReaderHashtable`2.AddOrGetExistingInner(TValue, out Boolean)\r\n      ► 54.9%   Expand  •  15,773 ms  •  Internal.TypeSystem.LockFreeReaderHashtable`2.Expand(TValue[])\r\n      ► 1.74%   TryAddOrGetExisting  •  500 ms  •  Internal.TypeSystem.LockFreeReaderHashtable`2.TryAddOrGetExisting(TValue, out Boolean)\r\n        0.11%   [Unknown]  •  31 ms\r\n        \u003c0.01%   ntoskrnl.exe  •  1.5 ms\r\n    ► 38.7%   CreateValueFromKey  •  11,126 ms  •  ILCompiler.Compilation+ILCache.CreateValueFromKey(MethodDesc)\r\n      4.30%   [Unknown]  •  1,237 ms\r\n      \u003c0.01%   coreclr.dll  •  0.2 ms\r\n    0.02%   [Unknown]  •  5.8 ms\r\n```\r\n\r\nApparently, we end up more time resizing the cache than actually using it efficiently. The initial size of the `LockFreeReaderHashtable` is 16 elements and it\u0027s currently not configurable. We throw it away here every time it reaches more than 1000 elements. This has additional negative effect of creating memory pressure.\r\n\r\nI tried removing the cache entirely which resulted in 18s spent in `ILCompiler.Compilation.GetMethodIL` generating the values. Obviously, that\u0027s not representative for every workload but it shows how poorly the cache performs.\r\n\r\nI also tried to replace it with `ConcurrentDictionary` (which performed extremely poorly because of its implementation of `Count` property), `ConcurrentDictionary` + counter (which performed well), and dumb usage of locked `Dictionary` (simplest to reason about).\r\n\r\nHere\u0027s a profile for the `Dictionary` version:\r\n```\r\n  100%   GetMethodIL  •  14,393 ms  •  ILCompiler.Compilation.GetMethodIL(MethodDesc)\r\n  ► 68.3%   GetMethodIL  •  9,835 ms  •  ILCompiler.Compilation+CombinedILProvider.GetMethodIL(MethodDesc)\r\n  ► 22.2%   coreclr.dll  •  3,192 ms\r\n    5.02%   [Unknown]  •  723 ms\r\n  ► 2.08%   FindValue  •  299 ms  •  System.Collections.Generic.Dictionary`2.FindValue(TKey)\r\n  ► 0.80%   GetMethodIL  •  116 ms  •  ILCompiler.Compilation.GetMethodIL(MethodDesc)\r\n  ► 0.62%   TryInsert  •  89 ms  •  System.Collections.Generic.Dictionary`2.TryInsert(TKey, TValue, InsertionBehavior)\r\n    0.09%   ClearWithReferences  •  13 ms  •  System.SpanHelpers.ClearWithReferences(ref IntPtr, UIntPtr)\r\n    0.02%   Clear  •  3.2 ms  •  System.Array.Clear(Array)\r\n    0.01%   ntoskrnl.exe  •  1.8 ms\r\n```\r\n\r\nThe diff:\r\n```diff\r\n--- a/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/Compilation.cs\r\n+++ b/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/Compilation.cs\r\n@@ -70,18 +70,32 @@ public abstract class Compilation : ICompilation\r\n                 ilProvider = new CombinedILProvider(ilProvider, PInvokeILProvider);\r\n             }\r\n\r\n-            _methodILCache = new ILCache(ilProvider);\r\n+            _ilProvider = ilProvider;\r\n+            _methodILCache = new Dictionary\u003cMethodDesc, MethodIL\u003e();\r\n         }\r\n\r\n-        private ILCache _methodILCache;\r\n+        private ILProvider _ilProvider;\r\n+        private Dictionary\u003cMethodDesc, MethodIL\u003e _methodILCache;\r\n\r\n         public virtual MethodIL GetMethodIL(MethodDesc method)\r\n         {\r\n-            // Flush the cache when it grows too big\r\n-            if (_methodILCache.Count \u003e 1000)\r\n-                _methodILCache = new ILCache(_methodILCache.ILProvider);\r\n+            lock (_methodILCache)\r\n+            {\r\n+                if (_methodILCache.TryGetValue(method, out var methodIL))\r\n+                    return methodIL;\r\n+\r\n+                // Flush the cache when it grows too big\r\n+                if (_methodILCache.Count \u003e 1000)\r\n+                    _methodILCache.Clear();\r\n+            }\r\n\r\n-            return _methodILCache.GetOrCreateValue(method).MethodIL;\r\n+            var newMethodIL = _ilProvider.GetMethodIL(method);\r\n+            lock (_methodILCache)\r\n+            {\r\n+                _methodILCache[method] = newMethodIL;\r\n+            }\r\n+\r\n+            return newMethodIL;\r\n         }\r\n\r\n         protected abstract void ComputeDependencyNodeDependencies(List\u003cDependencyNodeCore\u003cNodeFactory\u003e\u003e obj);\r\n@@ -528,43 +542,6 @@ CompilationResults ICompilation.Compile(string outputFile, ObjectDumper dumper)\r\n             return new CompilationResults(_dependencyGraph, _nodeFactory);\r\n         }\r\n\r\n-        private sealed class ILCache : LockFreeReaderHashtable\u003cMethodDesc, ILCache.MethodILData\u003e\r\n-        {\r\n-            public ILProvider ILProvider { get; }\r\n-\r\n-            public ILCache(ILProvider provider)\r\n-            {\r\n-                ILProvider = provider;\r\n-            }\r\n-\r\n-            protected override int GetKeyHashCode(MethodDesc key)\r\n-            {\r\n-                return key.GetHashCode();\r\n-            }\r\n-            protected override int GetValueHashCode(MethodILData value)\r\n-            {\r\n-                return value.Method.GetHashCode();\r\n-            }\r\n-            protected override bool CompareKeyToValue(MethodDesc key, MethodILData value)\r\n-            {\r\n-                return ReferenceEquals(key, value.Method);\r\n-            }\r\n-            protected override bool CompareValueToValue(MethodILData value1, MethodILData value2)\r\n-            {\r\n-                return ReferenceEquals(value1.Method, value2.Method);\r\n-            }\r\n-            protected override MethodILData CreateValueFromKey(MethodDesc key)\r\n-            {\r\n-                return new MethodILData() { Method = key, MethodIL = ILProvider.GetMethodIL(key) };\r\n-            }\r\n-\r\n-            internal sealed class MethodILData\r\n-            {\r\n-                public MethodDesc Method;\r\n-                public MethodIL MethodIL;\r\n-            }\r\n-        }\r\n-\r\n         private sealed class CombinedILProvider : ILProvider\r\n         {\r\n             private readonly ILProvider _primaryILProvider;\r\n\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgM6iLQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6AzqIt",
                                           "createdAt":  "2024-06-11T15:16:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-11T15:16:47Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ILC: Bottleneck in Compilation.GetMethodIL",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104083",
        "createdAt":  "2024-06-27T08:41:03Z",
        "number":  104083,
        "author":  "matouskozak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-02T17:47:09Z",
        "body":  "# Description\r\nMAUI iOS sample app startup measurements are reporting incrementally slower times when run with NAOT backend while NAOT HelloWorld measurements are stable. Also the same measurements with Mono backend don\u0027t report any increases in startup times.\r\n\r\n![image](https://github.com/dotnet/runtime/assets/55735845/7e47559e-b8c4-4f48-8c65-120588da6040)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlb47XQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Cx6Qf",
                                           "createdAt":  "2024-06-27T08:41:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-27T08:41:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cx6YW",
                                           "createdAt":  "2024-06-27T08:41:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-27T08:41:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cx61i",
                                           "createdAt":  "2024-06-27T08:42:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "/cc: @simonrozsival ",
                                           "updatedAt":  "2024-06-27T08:42:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VJGWs",
                                           "createdAt":  "2024-11-26T23:37:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "How do we go about investigating this?",
                                           "updatedAt":  "2024-11-26T23:37:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VNF_x",
                                           "createdAt":  "2024-11-27T08:32:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e How do we go about investigating this?\n\nIs it easy enough to re-measure these? Say, try .NET 9 RTM vs .NET 9 Preview 3 vs .NET 9 Preview 1 on the same phone with the same OS version? We haven\u0027t really done any work affecting the startup path on the runtime side and if this is not accompanied with steady size regression (we do have some things where worse size could correlate to worse startup), I don\u0027t see any explanation for a steady decline. Was there any work done on the MAUI side that could explain this?",
                                           "updatedAt":  "2024-11-27T08:32:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VNdlR",
                                           "createdAt":  "2024-11-27T09:16:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e \u003e How do we go about investigating this?\n\u003e \n\u003e Is it easy enough to re-measure these? Say, try .NET 9 RTM vs .NET 9 Preview 3 vs .NET 9 Preview 1 on the same phone with the same OS version? We haven\u0027t really done any work affecting the startup path on the runtime side and if this is not accompanied with steady size regression (we do have some things where worse size could correlate to worse startup), I don\u0027t see any explanation for a steady decline. Was there any work done on the MAUI side that could explain this?\n\nWe should be able to re-measure this locally to verify. \n\nTo put more information to the issue, we currently see that both NativeAOT and Mono MAUI backends are slowly regressing as per ![Image](https://github.com/user-attachments/assets/2409ca86-0a38-4a25-9842-d317fa25d406)\n\nPowerBI only offers us 3 months of data, we might be able to get more information from Kusto.\n\n\n\n\n\n\n\n",
                                           "updatedAt":  "2024-11-27T09:16:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VNxe6",
                                           "createdAt":  "2024-11-27T09:50:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e To put more information to the issue, we currently see that both NativeAOT and Mono MAUI backends are slowly regressing as per\n\nIs this measuring .NET 9 like the chart legend says, or does it measure main?",
                                           "updatedAt":  "2024-11-27T09:50:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VOGzb",
                                           "createdAt":  "2024-11-27T10:28:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e \u003e To put more information to the issue, we currently see that both NativeAOT and Mono MAUI backends are slowly regressing as per\n\u003e \n\u003e Is this measuring .NET 9 like the chart legend says, or does it measure main?\n\nIt should be the main (I think it didn\u0027t get updated after GA), I\u0027ll check with the perf team to confirm.",
                                           "updatedAt":  "2024-11-27T10:28:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VQDaW",
                                           "createdAt":  "2024-11-27T14:25:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "\u003e We should be able to re-measure this locally to verify.\n\nAgreed, we can rerun the dotnet perf maui scenarios locally with different versions of the runtime as Michal suggested.\nIf we confirm the regression, we can further analyze where the slowdown comes from by using Xcode Instruments to profile the app startup and compare the profiles.\n\nLet me know if I can help with this.",
                                           "updatedAt":  "2024-11-27T14:25:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Vvjtd",
                                           "createdAt":  "2024-12-02T17:47:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-KKVA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2024-12-09T09:32:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "agocke",
                                           "body":  "I think we should try to isolate MAUI and Native AOT/the core framework. If I understand this benchmark correctly, it\u0027s pulling bits from the latest MAUI, along with the latest runtime bits. So any regression here could be anywhere up or down the stack. It\u0027s going to be very hard to isolate the cause of any particular regression with that setup. I think we should at least have another MAUI benchmark that freezes the version of .NET. That should give us a sense of where to investigate.",
                                           "updatedAt":  "2024-12-02T17:47:01Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "[NAOT][Maui] iOS Maui sample app startup getting slower",
        "labels":  [
                       "arch-arm64",
                       "tenet-performance",
                       "os-ios",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104702",
        "createdAt":  "2024-07-10T23:39:53Z",
        "number":  104702,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-11T08:23:44Z",
        "body":  "ILC produces warnings for RequiresUnreferencedCode/DynamicallyAccessedMembers mismatch on virtual methods. In some scenarios, the warnings are generated while processing a callsite in generic code. This can result in redundant warnings, for example:\r\n\r\n```csharp\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\nCall\u003cS\u003e();\r\n\r\n[RequiresUnreferencedCode(\"M\")]\r\nstatic void Call\u003cT\u003e() where T: I {\r\n    T.M();\r\n    T.M();\r\n    T.M();\r\n}\r\n\r\ninterface I {\r\n    [RequiresUnreferencedCode(\"M\")]\r\n    static abstract void M();\r\n}\r\n\r\ninterface DIM : I {\r\n    static void I.M() {} // Multiple IL2046 warnings, one for each T.M() callsite above.\r\n}\r\n\r\nstruct S : DIM {}\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhGyo9A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6EbKeJ",
                                           "createdAt":  "2024-07-10T23:40:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-10T23:40:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EbKj0",
                                           "createdAt":  "2024-07-10T23:40:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-10T23:40:53Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ILC: redundant warnings for annotation mismatch on static DIM",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106219",
        "createdAt":  "2024-08-10T02:43:14Z",
        "number":  106219,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-10T02:45:31Z",
        "body":  "This issue tracks adding memory barrier to native AOT R2R asm helpers on LoongArch64 and RiscV\r\n\r\nSee #106004 for arm and arm64 of the change.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh9YEpA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6H1gMB",
                                           "createdAt":  "2024-08-10T02:43:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-10T02:43:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6H1gSk",
                                           "createdAt":  "2024-08-10T02:45:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtwuzw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shushanhf",
                                                                               "createdAt":  "2024-08-12T00:37:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LuckyXu-HF",
                                                                               "createdAt":  "2024-08-13T01:58:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @dotnet/samsung @shushanhf @LuckyXu-HF",
                                           "updatedAt":  "2024-08-10T02:45:21Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[LoongArch64/RiscV] Add memory barriers to native AOT asm helpers",
        "labels":  [
                       "area-NativeAOT-coreclr",
                       "arch-loongarch64",
                       "arch-riscv"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106223",
        "createdAt":  "2024-08-10T08:56:40Z",
        "number":  106223,
        "author":  "am11",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODKn5eA==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "filipnavara",
                                            "createdAt":  "2024-08-10T09:15:13Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-08-10T17:12:12Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "clamp03",
                                            "createdAt":  "2024-08-12T03:14:52Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "sunlijun-610",
                                            "createdAt":  "2024-08-12T07:01:00Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "MichalStrehovsky",
                                            "createdAt":  "2024-08-12T10:33:15Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "viewizard",
                                            "createdAt":  "2024-08-30T10:54:13Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "sirntar",
                                            "createdAt":  "2024-08-30T12:03:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tomeksowi",
                                            "createdAt":  "2024-12-05T14:06:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "clamp03",
                                            "createdAt":  "2025-02-10T12:40:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2025-08-11T03:09:55Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2025-04-03T10:03:27Z",
        "body":  "This is to track the progress of nativeaot port on riscv64 architecture.\r\n\r\nWIP initial translation (based on @sunlijun-610\u0027s [LA64 port](https://github.com/dotnet/runtime/pulls?q=sort%3Aupdated-desc+is%3Apr+label%3Aarch-loongarch64+label%3Aarea-NativeAOT-coreclr+is%3Aclosed)):\r\nhttps://github.com/dotnet/runtime/compare/main...am11:runtime:feature/nativeaot/riscv64-port",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnlRupQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6H7Nfa",
                                           "createdAt":  "2024-08-10T08:58:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwaPQQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "clamp03",
                                                                               "createdAt":  "2024-08-30T10:52:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "cc @dotnet/samsung, @filipnavara\r\n\r\nIf someone wants take over, let me know. I can also give ssh access to riscv computer (bianbu OS, Debian derivative) if needed for testing. 👍",
                                           "updatedAt":  "2024-08-10T08:58:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IFznK",
                                           "createdAt":  "2024-08-12T06:50:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Some assertions are failing at build-time in AsmOffset* and llvm-libunwind due to the sizes of various structs. llvm-libunwind is getting 96 bytes size difference in `UnwindCursor\u003cA, R\u003e` vs. `unw_cursor_t` which is a mystery. See the TODO added in `src/native/external/llvm-libunwind/src/UnwindCursor.hpp`, that template function is there temporarily to print the sizes on stderr during the build.\r\n\r\nAlso, I\u0027ve used the register names we have in coreclr/pal. Some of them might not be needed, but I\u0027m not sure since llvm-libunwind uses different names X1,X2,X3.. while coreclr/pal is using T1,T2,T3.. so I used the latter and handled the mapping in `src/coreclr/nativeaot/Runtime/unix/UnwindHelpers.cpp`.",
                                           "updatedAt":  "2024-08-12T06:50:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ji_vZ",
                                           "createdAt":  "2024-08-23T19:02:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvhJsw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2024-08-23T19:15:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "Applied changes from https://github.com/dotnet/runtime/pull/106225.\n\nFWIW, this is my workflow:\n```sh\n# on macOS arm64\n$ cd runtime\n$ docker run -e ROOTFS_DIR=/crossrootfs/riscv64 -v$(pwd):/runtime -w /runtime --rm \\\n    --platform linux/arm64 -it ubuntu\n\n$ eng/common/native/install-dependencies.sh \n$ apt install -y debootstrap\n$ eng/common/cross/build-rootfs.sh riscv64 noble --skipunmount --rootfsdir /crossrootfs/riscv64\n$ src/coreclr/build-runtime.sh -cross -riscv64\n\n# once nativeaot runtime ^ starts building in silo, we can try a full build\n# rm -rf artifacts\n# ./build.sh clr+libs+packs -cross --arch riscv64\n```\n\ncurrently it is not getting too far 😅\n\n```\n...\n[ 45%] Building CXX object nativeaot/Runtime/Full/CMakeFiles/Runtime.WorkstationGC.dir/__/__/__/gc/unix/events.cpp.o\n[ 45%] Building CXX object classlibnative/bcltype/CMakeFiles/bcltype.dir/system.cpp.o\nIn file included from /runtime/src/coreclr/nativeaot/Runtime/AsmOffsetsVerify.cpp:43:\nIn file included from /runtime/src/coreclr/nativeaot/Runtime/AsmOffsets.h:79:\n/runtime/src/coreclr/nativeaot/Runtime/riscv64/AsmOffsetsCpu.h:10:1: error: static assertion failed due to requirement \u0027(sizeof(ExInfo) == 2120) || (sizeof(ExInfo) \u003e 2120)\u0027: Bad asm size for \u0027ExInfo\u0027, the actual size is smaller than 0x848.\n   10 | PLAT_ASM_SIZEOF(848, ExInfo)\n      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/runtime/src/coreclr/nativeaot/Runtime/AsmOffsetsVerify.cpp:36:19: note: expanded from macro \u0027PLAT_ASM_SIZEOF\u0027\n   36 |     static_assert((sizeof(cls) == 0x##size) || (sizeof(cls) \u003e 0x##size), \"Bad asm size for \u0027\" #cls \"\u0027, the actual size is smaller than 0x\" #size \".\"); \\\n      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /runtime/src/coreclr/nativeaot/Runtime/AsmOffsetsVerify.cpp:43:\nIn file included from /runtime/src/coreclr/nativeaot/Runtime/AsmOffsets.h:79:\n/runtime/src/coreclr/nativeaot/Runtime/riscv64/AsmOffsetsCpu.h:15:1: error: static assertion failed due to requirement \u0027(__builtin_offsetof(ExInfo, m_passNumber) == 28) || (__builtin_offsetof(ExInfo, m_passNumber) \u003e 28)\u0027: Bad asm offset for \u0027ExInfo.m_passNumber\u0027, the actual offset is smaller than 0x1C.\n   15 | PLAT_ASM_OFFSET(1C, ExInfo, m_passNumber)\n      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/runtime/src/coreclr/nativeaot/Runtime/AsmOffsetsVerify.cpp:32:19: note: expanded from macro \u0027PLAT_ASM_OFFSET\u0027\n   32 |     static_assert((offsetof(cls, member) == 0x##offset) || (offsetof(cls, member) \u003e 0x##offset), \"Bad asm offset for \u0027\" #cls \".\" #member \"\u0027, the actual offset is smaller than 0x\" #offset \".\"); \\\n      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n...\n```",
                                           "updatedAt":  "2024-12-13T10:20:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JjFMh",
                                           "createdAt":  "2024-08-23T19:17:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwl2Mw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2024-08-23T19:23:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "archanox",
                                                                               "createdAt":  "2024-09-01T08:42:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I tried to compile your branch and I ended up pretty much at the same spot. Currently away from computer, but this should be easy to fix…",
                                           "updatedAt":  "2024-08-23T19:17:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6N8I8o",
                                           "createdAt":  "2024-09-29T13:12:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "@filipnavara, have you had a chance to check out the assertion failures? No rush—just wondering if there are any blockers or details we need to sort out. Thanks! 👍",
                                           "updatedAt":  "2024-09-29T13:12:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6N8KNW",
                                           "createdAt":  "2024-09-29T13:27:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Unfortunately no, still tackling some things for .NET 9 release and few other hack projects that I want to get done for the .NET 10 timeframe. I hope to eventually look into it but it’s currently not a priority, sorry.",
                                           "updatedAt":  "2024-09-29T13:27:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6N8LMA",
                                           "createdAt":  "2024-09-29T13:40:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Ok, no worries, I\u0027ll also take a look when I get a chance. Was hoping to get some feedback from @viewizard et al. on register naming since it\u0027s not immediately clear to which convention is preferred at present day (and given llvm-libunwind has its own which is obviously different than HP-libunwind, coreclr VM and PAL). 😅",
                                           "updatedAt":  "2024-09-29T13:40:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6N-aPB",
                                           "createdAt":  "2024-09-30T03:46:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0CqXQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2024-09-30T06:11:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2024-09-30T06:19:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "sunlijun-610",
                                           "body":  "Here are some of my ideas, and I\u0027m not sure if they\u0027re helpful.\r\nI have also encountered the same problem when adding the LoongArch architecture, and I think the assertion failures should come from the incorrect offsets and sizes in `src/coreclr/nativeaot/Runtime/riscv64/AsmOffsetsCpu.h`. The offsets and sizes should be defined according to the actual definition of the structures.\r\nBefore rewriting `src/coreclr/nativeaot/Runtime/riscv64/AsmOffsetsCpu.h`, I think we should first determine the register names defined in the structures, for example, in `src/coreclr/nativeaot/Runtime/regdisplay.h`. Now the register names in `regdisplay.h` and `AsmOffsetsCpu.h` are still conflicting. And then determine the order of variables in the structures. After determining the definition of the structures, we can easily rewrite `AsmOffsetsCpu.h` all at once.",
                                           "updatedAt":  "2024-09-30T03:46:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6N_inK",
                                           "createdAt":  "2024-09-30T06:45:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Thanks @sunlijun-610, https://github.com/am11/runtime/tree/feature/nativeaot/riscv64-port has the changes. Currently,  the size of `UnwindCursor\u003cA, R\u003e` is 864 and `unw_context_t` is 768, so the `does_fit` assertion fails in llvm-libunwind UnwindCursor.hpp https://github.com/am11/runtime/blob/feature/nativeaot/riscv64-port/src/native/external/llvm-libunwind/src/UnwindCursor.hpp#L1349-L1357 (the existing assertions only tell us one operand\u0027s value not both sides that\u0027s why I added this template one to see the computed sizes at built time). If you have ideas how to satisfy AsmOffsetsCpu and UnwindCursor assertions simultaneously, feel free to push commits to the branch when you have time. I\u0027ve sent you the colab invite. :)",
                                           "updatedAt":  "2024-09-30T07:03:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OAPx2",
                                           "createdAt":  "2024-09-30T08:21:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0Dv3g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2024-09-30T08:44:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sunlijun-610",
                                           "body":  "Thanks! About the does_fit assertion failure in llvm-libunwind UnwindCursor.hpp, I think it\u0027s no need to add `+32` in `#   define _LIBUNWIND_CURSOR_SIZE (_LIBUNWIND_CONTEXT_SIZE + 12) + 32`, because `_LIBUNWIND_CONTEXT_SIZE` has been added. Then the size of `unw_cursor_t` is 864, same size as `UnwindCursor\u003cA, R\u003e`.\r\nhttps://github.com/am11/runtime/blob/4cbeceef967c727605869d687a612d43315a13a1/src/native/external/llvm-libunwind/include/__libunwind_config.h#L158\r\n",
                                           "updatedAt":  "2024-09-30T08:21:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Z9Oq-",
                                           "createdAt":  "2025-01-10T15:29:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOECf_2Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "gbalykov",
                                                                               "createdAt":  "2025-01-10T15:31:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "clamp03",
                                                                               "createdAt":  "2025-01-15T04:52:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "am11",
                                           "body":  "Bulk of change is merged and SDK is enabling it https://github.com/dotnet/sdk/pull/45852.\n\nLast year, .NET 9 preview 1 was released on Feb. 13, so in a month or so, runtime\u0027s global.json will pick up the RID. ATM it throws unsupported platform error with PublishAot=true.",
                                           "updatedAt":  "2025-01-10T15:29:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Z9PY3",
                                           "createdAt":  "2025-01-10T15:31:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "https://github.com/dotnet/runtime/pull/111273 is a baby step to get the bits working. After that update, next issue is:\n\n```sh\nroot@0900f1880a04:/app1# /runtime/artifacts/bin/coreclr/linux.arm64.Debug/ilc-published/ilc @app1.ilc.rsp \nILC: /runtime/src/coreclr/jit/emitriscv64.cpp:1630\nILC: Assertion failed \u0027isValidSimm32(addr - (ssize_t)dst)\u0027 in \u0027System.ObsoleteAttribute:.ctor(System.String,ubyte):this\u0027 during \u0027Emit code\u0027 (IL size 21; hash 0x817d7d95; FullOpts)\n\nILC: /runtime/src/coreclr/jit/emitriscv64.cpp:1630\nILC: Assertion failed \u0027isValidSimm32(addr - (ssize_t)dst)\u0027 in \u0027Internal.CompilerGenerated.\u003cModule\u003e:DynamicInvoke(ulong,byref,byref,ulong):byref\u0027 during \u0027Emit code\u0027 (IL size 50; hash 0xc1e09f14; FullOpts)\n\nILC: /runtime/src/coreclr/jit/emitriscv64.cpp:1630\nILC: Assertion failed \u0027isValidSimm32(addr - (ssize_t)dst)\u0027 in \u0027System.Runtime.CompilerServices.NullableAttribute:.ctor(ubyte):this\u0027 during \u0027Emit code\u0027 (IL size 23; hash 0x1237d66e; FullOpts)\n\nAborted\n```\n\nwhile we are waiting for the upcoming SDK 10 preview 1 to be picked up in runtime global.json (a month away), I found a way to test things locally.\n\n1. cross build runtime using this branch on linux-arm64: https://github.com/dotnet/runtime/pull/105004 (i\u0027m running build on osx-arm64 in container that\u0027s why linux-arm64)\n    ```sh\n    $ /runtime/eng/common/cross/build-rootfs.sh noble riscv64 --rootfsdir /crossrootfs/riscv64\n\n    $ export ROOTFS_DIR=/crossrootfs/riscv64\n\n    # stage 1\n    $ /runtime/build.sh -arch riscv64 -cross -s clr+libs+host -c Debug -rc Checked --keepnativesymbols true -p:StageOneBuild=true\n    # stage 2\n    $ /runtime/build.sh -arch riscv64 -cross -s tools+clr.tools+packs -c Debug -rc Checked --keepnativesymbols true -p:StageTwoBuild=true\n\n    # regular build for host\n    $ /runtime/build.sh  clr+libs -c Debug --keepnativesymbols true\n   ```\n2. PublishAot a helloworld app `app1` on linux-arm64 machine (which has SDK integration). `dotnet10 new console --aot -n app1` and `dotnet10 publish`\n3. copy the response file `app1.ilc.rsp` from `obj/` directory and manually tweak it to point to riscv64 cross build paths: https://gist.github.com/am11/fc0bbf930f95f1bee2f100f145474e0a\n4. copy `libclrjit_unix_riscv64_arm64.so` from `/runtime/artifacts/bin/coreclr/linux.riscv64.Checked/arm64/libclrjit_unix_riscv64_arm64.so` to `/runtime/artifacts/bin/coreclr/linux.arm64.Debug/ilc-published/`\n5. run `/runtime/artifacts/bin/coreclr/linux.arm64.Debug/ilc-published/ilc @app1.ilc.rsp`\n\n\u003cdetails\u003e\n  \u003csummary\u003eUnder lldb\u003c/summary\u003e\n\n```gdb\n(lldb) r\nProcess 40540 launched: \u0027/runtime/artifacts/bin/coreclr/linux.arm64.Debug/ilc-published/ilc\u0027 (aarch64)\nILC: /runtime/src/coreclr/jit/emitriscv64.cpp:1630\nILC: Assertion failed \u0027isValidSimm32(addr - (ssize_t)dst)\u0027 in \u0027System.ObsoleteAttribute:.ctor(System.String,ubyte):this\u0027 during \u0027Emit code\u0027 (IL size 21; hash 0x817d7d95; FullOpts)\n\nILC: /runtime/src/coreclr/jit/emitriscv64.cpp:1630\nILC: Assertion failed \u0027isValidSimm32(addr - (ssize_t)dst)\u0027 in \u0027Internal.CompilerGenerated.\u003cModule\u003e:DynamicInvoke(ulong,byref,byref,ulong):byref\u0027 during \u0027Emit code\u0027 (IL size 50; hash 0xc1e09f14; FullOpts)\n\nILC: /runtime/src/coreclr/jit/emitriscv64.cpp:1630\nILC: Assertion failed \u0027isValidSimm32(addr - (ssize_t)dst)\u0027 in \u0027System.Runtime.CompilerServices.NullableAttribute:.ctor(ubyte):this\u0027 during \u0027Emit code\u0027 (IL size 23; hash 0x1237d66e; FullOpts)\n\nILC: /runtime/src/coreclr/jit/emitriscv64.cpp:1630\nProcess 40540 stopped\n* thread #1, name = \u0027ilc\u0027, stop reason = signal SIGTRAP\n    frame #0: 0x0000ffffe46480a8 libclrjit_unix_riscv64_arm64.so`DBG_DebugBreak at debugbreak.S:7\n   4   \t#include \"unixasmmacros.inc\"\n   5   \t\n   6   \tLEAF_ENTRY DBG_DebugBreak, _TEXT\n-\u003e 7   \t    EMIT_BREAKPOINT\n   8   \t    ret\n   9   \tLEAF_END_MARKED DBG_DebugBreak, _TEXT\n   10  \t\n  thread #23, name = \u0027.NET TP Worker\u0027, stop reason = signal SIGTRAP\n    frame #0: 0x0000ffffe46480a8 libclrjit_unix_riscv64_arm64.so`DBG_DebugBreak at debugbreak.S:7\n   4   \t#include \"unixasmmacros.inc\"\n   5   \t\n   6   \tLEAF_ENTRY DBG_DebugBreak, _TEXT\n-\u003e 7   \t    EMIT_BREAKPOINT\n   8   \t    ret\n   9   \tLEAF_END_MARKED DBG_DebugBreak, _TEXT\n   10  \t\n  thread #25, name = \u0027.NET TP Worker\u0027, stop reason = signal SIGTRAP\n    frame #0: 0x0000ffffe46480a8 libclrjit_unix_riscv64_arm64.so`DBG_DebugBreak at debugbreak.S:7\n   4   \t#include \"unixasmmacros.inc\"\n   5   \t\n   6   \tLEAF_ENTRY DBG_DebugBreak, _TEXT\n-\u003e 7   \t    EMIT_BREAKPOINT\n   8   \t    ret\n   9   \tLEAF_END_MARKED DBG_DebugBreak, _TEXT\n   10  \t\nwarning: This version of LLDB has no plugin for the language \"assembler\". Inspection of frame variables will be limited.\n(lldb) bt\n* thread #1, name = \u0027ilc\u0027, stop reason = signal SIGTRAP\n  * frame #0: 0x0000ffffe46480a8 libclrjit_unix_riscv64_arm64.so`DBG_DebugBreak at debugbreak.S:7\n    frame #1: 0x0000ffffe45ecc8c libclrjit_unix_riscv64_arm64.so`::DebugBreak() at debug.cpp:406:9 [opt]\n    frame #2: 0x0000ffffe4391a20 libclrjit_unix_riscv64_arm64.so`assertAbort(why=\"isValidSimm32(addr - (ssize_t)dst)\", file=\"/runtime/src/coreclr/jit/emitriscv64.cpp\", line=1630) at error.cpp:288:9 [opt]\n    frame #3: 0x0000ffffe45c4608 libclrjit_unix_riscv64_arm64.so`emitter::emitOutputCall(this=0x0000aaaaaaf4ee08, ig=\u003cunavailable\u003e, dst=\"\\x97\\U00000003\", id=0x0000aaaaaaf6beec, code=\u003cunavailable\u003e) at emitriscv64.cpp:1630:9 [opt]\n    frame #4: 0x0000ffffe45c87c4 libclrjit_unix_riscv64_arm64.so`emitter::emitOutputInstr(insGroup*, emitter::instrDesc*, unsigned char**) [inlined] emitter::emitOutputInstr_OptsC(this=0x0000aaaaaaf4ee08, dst=\"\\x97\\U00000003\", id=0x0000aaaaaaf6beec, ig=0x0000aaaaaaf6bce0, size=\u003cunavailable\u003e) at emitriscv64.cpp:3235:12 [opt]\n    frame #5: 0x0000ffffe45c8760 libclrjit_unix_riscv64_arm64.so`emitter::emitOutputInstr(this=0x0000aaaaaaf4ee08, ig=0x0000aaaaaaf6bce0, id=0x0000aaaaaaf6beec, dp=0x0000ffffffffad68) at emitriscv64.cpp:3293:20 [opt]\n    frame #6: 0x0000ffffe438aa14 libclrjit_unix_riscv64_arm64.so`emitter::emitIssue1Instr(this=0x0000aaaaaaf4ee08, ig=0x0000aaaaaaf6bce0, id=0x0000aaaaaaf6beec, dp=0x0000ffffffffad68) at emit.cpp:4346:10 [opt]\n    frame #7: 0x0000ffffe438beb0 libclrjit_unix_riscv64_arm64.so`emitter::emitEndCodeGen(this=0x0000aaaaaaf4ee08, comp=0x0000aaaaaaf4db28, contTrkPtrLcls=\u003cunavailable\u003e, fullyInt=\u003cunavailable\u003e, fullPtrMap=\u003cunavailable\u003e, xcptnsCount=3898893764, prologSize=0x0000aaaaaaf4edb4, epilogSize=\u003cunavailable\u003e, codeAddr=0x0000ffffffffbb88, codeAddrRW=0x0000aaaaaaf4ed78, coldCodeAddr=0x0000aaaaaaf4ed90, coldCodeAddrRW=0x0000aaaaaaf4ed98, consAddr=0x0000aaaaaaf4eda0, consAddrRW=0x0000aaaaaaf4eda8, instrCount=0x0000ffffffffae24) at emit.cpp:7314:43 [opt]\n    frame #8: 0x0000ffffe43543e0 libclrjit_unix_riscv64_arm64.so`CodeGen::genEmitMachineCode(this=0x0000aaaaaaf4e9b8) at codegencommon.cpp:2113:23 [opt]\n    frame #9: 0x0000ffffe435fcf0 libclrjit_unix_riscv64_arm64.so`CodeGenPhase::DoPhase(this=\u003cunavailable\u003e) at codegen.h:1727:9 [opt]\n    frame #10: 0x0000ffffe4547c4c libclrjit_unix_riscv64_arm64.so`Phase::Run(this=0x0000ffffffffaed0) at phase.cpp:61:26 [opt]\n    frame #11: 0x0000ffffe4353e88 libclrjit_unix_riscv64_arm64.so`CodeGen::genGenerateCode(void**, unsigned int*) [inlined] DoPhase(_codeGen=0x0000aaaaaaf4e9b8, _phase=PHASE_EMIT_CODE, _action=\u003cunavailable\u003e) at codegen.h:1741:11 [opt]\n    frame #12: 0x0000ffffe4353e5c libclrjit_unix_riscv64_arm64.so`CodeGen::genGenerateCode(this=0x0000aaaaaaf4e9b8, codePtr=0x0000ffffffffbb88, nativeSizeOfCode=\u003cunavailable\u003e) at codegencommon.cpp:1774:5 [opt]\n    frame #13: 0x0000ffffe43704a0 libclrjit_unix_riscv64_arm64.so`Compiler::compCompile(this=0x0000aaaaaaf4db28, methodCodePtr=\u003cunavailable\u003e, methodCodeSize=\u003cunavailable\u003e, compileFlags=0x0000ffffffffbbb0) at compiler.cpp:5266:14 [opt]\n    frame #14: 0x0000ffffe4373eec libclrjit_unix_riscv64_arm64.so`Compiler::compCompileHelper(this=0x0000aaaaaaf4db28, classPtr=\u003cunavailable\u003e, compHnd=\u003cunavailable\u003e, methodInfo=\u003cunavailable\u003e, methodCodePtr=0x0000ffffffffbb88, methodCodeSize=0x0000ffffffffbf88, compileFlags=0x0000ffffffffbbb0) at compiler.cpp:7247:5 [opt]\n    frame #15: 0x0000ffffe437230c libclrjit_unix_riscv64_arm64.so`Compiler::compCompile(CORINFO_MODULE_STRUCT_*, void**, unsigned int*, JitFlags*) [inlined] Compiler::compCompile(CORINFO_MODULE_STRUCT_*, void**, unsigned int*, JitFlags*)::$_0::operator()(this=\u003cunavailable\u003e, __JITpParam=\u003cunavailable\u003e) const at compiler.cpp:6435:28 [opt]\n    frame #16: 0x0000ffffe43722f4 libclrjit_unix_riscv64_arm64.so`Compiler::compCompile(this=0x0000aaaaaaf4db28, classPtr=0x4000000000420128, methodCodePtr=0x0000ffffffffbb88, methodCodeSize=0x0000ffffffffbf88, compileFlags=0x0000ffffffffbbb0) at compiler.cpp:6454:5 [opt]\n    frame #17: 0x0000ffffe4374e74 libclrjit_unix_riscv64_arm64.so`jitNativeCode(CORINFO_METHOD_STRUCT_*, CORINFO_MODULE_STRUCT_*, ICorJitInfo*, CORINFO_METHOD_INFO*, void**, unsigned int*, JitFlags*, void*) [inlined] jitNativeCode(this=\u003cunavailable\u003e, __JITpParam=\u003cunavailable\u003e)::$_0::operator()(jitNativeCode(CORINFO_METHOD_STRUCT_*, CORINFO_MODULE_STRUCT_*, ICorJitInfo*, CORINFO_METHOD_INFO*, void**, unsigned int*, JitFlags*, void*)::__JITParam*) const::\u0027lambda\u0027(jitNativeCode(CORINFO_METHOD_STRUCT_*, CORINFO_MODULE_STRUCT_*, ICorJitInfo*, CORINFO_METHOD_INFO*, void**, unsigned int*, JitFlags*, void*)::$_0::operator()(jitNativeCode(CORINFO_METHOD_STRUCT_*, CORINFO_MODULE_STRUCT_*, ICorJitInfo*, CORINFO_METHOD_INFO*, void**, unsigned int*, JitFlags*, void*)::__JITParam*) const::__JITParam*)::operator()(jitNativeCode(CORINFO_METHOD_STRUCT_*, CORINFO_MODULE_STRUCT_*, ICorJitInfo*, CORINFO_METHOD_INFO*, void**, unsigned int*, JitFlags*, void*)::$_0::operator()(jitNativeCode(CORINFO_METHOD_STRUCT_*, CORINFO_MODULE_STRUCT_*, ICorJitInfo*, CORINFO_METHOD_INFO*, void**, unsigned int*, JitFlags*, void*)::__JITParam*) const::__JITParam*) const at compiler.cpp:7898:32 [opt]\n    frame #18: 0x0000ffffe4374d20 libclrjit_unix_riscv64_arm64.so`jitNativeCode(CORINFO_METHOD_STRUCT_*, CORINFO_MODULE_STRUCT_*, ICorJitInfo*, CORINFO_METHOD_INFO*, void**, unsigned int*, JitFlags*, void*) [inlined] jitNativeCode(CORINFO_METHOD_STRUCT_*, CORINFO_MODULE_STRUCT_*, ICorJitInfo*, CORINFO_METHOD_INFO*, void**, unsigned int*, JitFlags*, void*)::$_0::operator()(this=\u003cunavailable\u003e, __JITpParam=\u003cunavailable\u003e) const at compiler.cpp:7922:9 [opt]\n    frame #19: 0x0000ffffe4374d10 libclrjit_unix_riscv64_arm64.so`jitNativeCode(methodHnd=0x4000000000420120, classPtr=0x4000000000420128, compHnd=0x0000ffffffffbc90, methodInfo=0x0000ffffffffbfa8, methodCodePtr=0x0000ffffffffbb88, methodCodeSize=0x0000ffffffffbf88, compileFlags=0x0000ffffffffbbb0, inlineInfoPtr=0x0000000000000000) at compiler.cpp:7924:5 [opt]\n    frame #20: 0x0000ffffe437feec libclrjit_unix_riscv64_arm64.so`CILJit::compileMethod(this=\u003cunavailable\u003e, compHnd=0x0000ffffffffbc90, methodInfo=0x0000ffffffffbfa8, flags=\u003cunavailable\u003e, entryAddress=0x0000ffffffffbf90, nativeSizeOfCode=0x0000ffffffffbf88) at ee_il_dll.cpp:291:14 [opt]\n    frame #21: 0x0000ffffeefcf0c4 libjitinterface_arm64.so`JitCompileMethod(ppException=0x0000ffffffffbf98, pJit=0x0000ffffe4688958, thisHandle=0x0000ffffffffbfa0, callbacks=0x0000aaaaaaf4b810, methodInfo=0x0000ffffffffbfa8, flags=4294967295, entryAddress=0x0000ffffffffbf90, nativeSizeOfCode=0x0000ffffffffbf88) at jitwrapper.cpp:36:22\n    frame #22: 0x0000fffff2215644\n    frame #23: 0x0000fffff221230c\n    frame #24: 0x0000fffff2211e64\n    frame #25: 0x0000fffff22118b0\n    frame #26: 0x0000fffff220ef9c\n    frame #27: 0x0000fffff1ae29a0\n    frame #28: 0x0000fffff1b85da8\n    frame #29: 0x0000ffffef32d2e0\n    frame #30: 0x0000ffffef34f31c\n    frame #31: 0x0000ffffef35ce6c\n    frame #32: 0x0000ffffef35bb80\n    frame #33: 0x0000ffffef34d0f4\n    frame #34: 0x0000fffff1b89070\n    frame #35: 0x0000fffff1ae1a88\n    frame #36: 0x0000fffff1b8b8a4\n    frame #37: 0x0000fffff1b897e8\n    frame #38: 0x0000fffff220ee84\n    frame #39: 0x0000fffff220eb8c\n    frame #40: 0x0000fffff1ae0b58\n    frame #41: 0x0000fffff01d57ac\n    frame #42: 0x0000fffff220cf40\n    frame #43: 0x0000fffff220ce3c\n    frame #44: 0x0000fffff0180c0c\n    frame #45: 0x0000fffff017b060\n    frame #46: 0x0000fffff017a940\n    frame #47: 0x0000fffff017a768\n    frame #48: 0x0000fffff0161eb8\n    frame #49: 0x0000fffff749c9e8 libcoreclr.so`___lldb_unnamed_symbol9959 + 132\n    frame #50: 0x0000fffff730bd60 libcoreclr.so`___lldb_unnamed_symbol4754 + 768\n    frame #51: 0x0000fffff7202d14 libcoreclr.so`___lldb_unnamed_symbol861 + 756\n    frame #52: 0x0000fffff720306c libcoreclr.so`___lldb_unnamed_symbol863 + 272\n    frame #53: 0x0000fffff722a00c libcoreclr.so`___lldb_unnamed_symbol1538 + 652\n    frame #54: 0x0000fffff71efcd8 libcoreclr.so`coreclr_execute_assembly + 168\n    frame #55: 0x0000fffff793ad70 libhostpolicy.so`___lldb_unnamed_symbol532 + 856\n    frame #56: 0x0000fffff793bd44 libhostpolicy.so`corehost_main + 340\n    frame #57: 0x0000fffff79af578 libhostfxr.so`___lldb_unnamed_symbol379 + 1188\n    frame #58: 0x0000fffff79ae898 libhostfxr.so`___lldb_unnamed_symbol377 + 760\n    frame #59: 0x0000fffff79a9114 libhostfxr.so`hostfxr_main_startupinfo + 208\n    frame #60: 0x0000aaaaaaab73b0 ilc`___lldb_unnamed_symbol227 + 960\n    frame #61: 0x0000aaaaaaab76e0 ilc`___lldb_unnamed_symbol229 + 184\n    frame #62: 0x0000fffff7a284c4 libc.so.6`___lldb_unnamed_symbol3097 + 116\n    frame #63: 0x0000fffff7a28598 libc.so.6`__libc_start_main + 152\n```\n\u003c/details\u003e",
                                           "updatedAt":  "2025-01-10T15:37:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aIKaD",
                                           "createdAt":  "2025-01-12T16:49:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "https://github.com/dotnet/runtime/pull/111317 fixes ilc object file writing. The next step is to figure out the linker failure:\n\n```sh\nroot@0900f1880a04:/app1$ \"clang\" \"obj/Release/net10.0/linux-riscv64/native/app1.o\" \\\n-o \"bin/Release/net10.0/linux-riscv64/native/app1\" \\\n-Wl,--version-script=obj/Release/net10.0/linux-x64/native/app1.exports \\\n/runtime/artifacts/bin/coreclr/linux.riscv64.Checked/ilc-published/libSystem.Native.a \\\n/runtime/artifacts/bin/coreclr/linux.riscv64.Checked/ilc-published/libSystem.Globalization.Native.a \\\n/runtime/artifacts/bin/coreclr/linux.riscv64.Checked/ilc-published/libSystem.IO.Compression.Native.a \\\n/runtime/artifacts/bin/coreclr/linux.riscv64.Checked/ilc-published/libSystem.Net.Security.Native.a \\\n/runtime/artifacts/bin/coreclr/linux.riscv64.Checked/ilc-published/libSystem.Security.Cryptography.Native.OpenSsl.a \\\n/runtime/artifacts/bin/coreclr/linux.riscv64.Checked/aotsdk/libbootstrapper.o \\\n/runtime/artifacts/bin/coreclr/linux.riscv64.Checked/aotsdk/libRuntime.WorkstationGC.a \\\n/runtime/artifacts/bin/coreclr/linux.riscv64.Checked/aotsdk/libeventpipe-disabled.a \\\n/runtime/artifacts/bin/coreclr/linux.riscv64.Checked/aotsdk/libstandalonegc-disabled.a \\\n/runtime/artifacts/bin/coreclr/linux.riscv64.Checked/aotsdk/libaotminipal.a \\\n/runtime/artifacts/bin/coreclr/linux.riscv64.Checked/aotsdk/libstdc++compat.a \\\n/runtime/artifacts/bin/coreclr/linux.riscv64.Checked/ilc-published/libz.a \\\n/runtime/artifacts/bin/coreclr/linux.riscv64.Checked/ilc-published/libbrotlienc.a \\\n/runtime/artifacts/bin/coreclr/linux.riscv64.Checked/ilc-published/libbrotlidec.a \\\n/runtime/artifacts/bin/coreclr/linux.riscv64.Checked/ilc-published/libbrotlicommon.a \\\n--sysroot=\"/crossrootfs/riscv64\" --target=riscv64-linux-gnu -g \\\n-Wl,--export-dynamic -gz=zlib -fuse-ld=lld -Wl,-rpath,\u0027$ORIGIN\u0027 -Wl,--build-id=sha1 -Wl,--as-needed -pthread \\\n-ldl -lrt -lm -pie -Wl,-pie -Wl,-z,relro -Wl,-z,now -Wl,--eh-frame-hdr -Wl,--discard-all -Wl,--gc-sections\n\n\nld.lld: error: unknown relocation (3) against symbol System_Console_System_ConsoleKeyInfo____GetFieldHelper\nld.lld: error: unknown relocation (3) against symbol _lsda0System_Console_System_ConsoleKeyInfo____GetFieldHelper\nld.lld: error: unknown relocation (3) against symbol S_P_CoreLib_System_AttributeUsageAttribute____GetFieldHelper\nld.lld: error: unknown relocation (3) against symbol _lsda0System_Console_System_ConsoleKeyInfo____GetFieldHelper\nld.lld: error: unknown relocation (3) against symbol S_P_CoreLib_System_CLSCompliantAttribute____GetFieldHelper\n...\n```\n\nI changed 0x3 in ntimage.h and ilc to 0x2, but this relocation 3 error is not going away. Not sure yet where it\u0027s coming from. 😅",
                                           "updatedAt":  "2025-01-12T16:49:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aIQ6t",
                                           "createdAt":  "2025-01-12T18:18:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOECGN3Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-01-12T18:54:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e I changed 0x3 in ntimage.h and ilc to 0x2, but this relocation 3 error is not going away. Not sure yet where it\u0027s coming from. 😅\n\nThat would be `R_RISCV_RELATIVE` emitted in ElfObjectWriter (assuming that the architecture is correctly set to `TargetArchitecture.RiscV64`; maybe worth checking?).",
                                           "updatedAt":  "2025-01-12T18:19:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bywfo",
                                           "createdAt":  "2025-01-25T04:31:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "With https://github.com/dotnet/runtime/pull/111735, it gets us a little far on our helloworld journey. Next issue is:\n\n```gdb\n# also put a breakpoint in RhpInterfaceDispatchSlow since the PC gets corrupted and it disconnects the chain\n\nThread 1 \"app1\" received signal SIGSEGV, Segmentation fault.\nS_P_CoreLib_System_Runtime_CachedInterfaceDispatch__RhResolveDispatchWorker (pObject=..., cell=0x2aaac73790 \u003cS_P_CoreLib_System_Runtime_CachedInterfaceDispatch__RhpCidResolve\u003e, cellInfo=...)\n    at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/CachedInterfaceDispatch.cs:128\n128\t            MethodTable* pInstanceType = pObject.GetMethodTable();\n(gdb) bt\n#0  S_P_CoreLib_System_Runtime_CachedInterfaceDispatch__RhResolveDispatchWorker (pObject=..., cell=0x2aaac73790 \u003cS_P_CoreLib_System_Runtime_CachedInterfaceDispatch__RhpCidResolve\u003e, cellInfo=...)\n    at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/CachedInterfaceDispatch.cs:128\n#1  0x0000002aaac73810 in S_P_CoreLib_System_Runtime_CachedInterfaceDispatch__RhpCidResolve_Worker (pObject=..., pCell=183253809040) at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/CachedInterfaceDispatch.cs:28\n#2  0x0000002aaac737b0 in S_P_CoreLib_System_Runtime_CachedInterfaceDispatch__RhpCidResolve (callerTransitionBlockParam=-6138604891393753078, pCell=183253809040)\n    at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/CachedInterfaceDispatch.cs:21\n#3  0x0000002aaac12782 in RhpUniversalTransition_DebugStepTailCall () at /runtime/src/coreclr/nativeaot/Runtime/riscv64/UniversalTransition.S:179\n```\n\nThere is probably still some register mapping need work in StubDispatch.S UniversalTransition.S. I fixed some by comparing the relationship between callee (JIT\u0027d or C++) and caller in arm64 and those of riscv64, now the call to transition method goes through but fails most likely some arg mapping is off.",
                                           "updatedAt":  "2025-01-25T04:31:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bywf5",
                                           "createdAt":  "2025-01-25T04:31:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Regarding the workflow https://github.com/dotnet/runtime/issues/106223#issuecomment-2582967863, I have switched to all debug configs. For rebuilds, we can make it faster. e.g. if we make a change in `src/coreclr/nativeaot/Runtime`, then we normally just need to rebuild StageOne for clr:\n\n```sh\n# repeat step\n$ /runtime/build.sh -arch riscv64 -cross -s clr.nativeaotruntime -c Debug -p:StageOneBuild=true --keepnativesymbols true\n$ cp /runtime/artifacts/bin/coreclr/linux.riscv64.Debug/arm64/libclrjit_unix_riscv64_arm64.so /runtime/artifacts/bin/coreclr/linux.arm64.Debug/ilc-published\n```\nIf it\u0027s src/coreclr/tools, the StageTwo. Every now and then, I do a clean rebuild just in case.",
                                           "updatedAt":  "2025-01-25T04:31:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dtGaX",
                                           "createdAt":  "2025-02-08T17:02:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "With current main, we are reaching the user code. From Console.WriteLine(\"Hello World!\"), with LANG=\"C.UTF-8\", the call reaches:\n\n```gdb\nThread 1 \"app1\" received signal SIGSEGV, Segmentation fault.\n0x0000002aaac9a368 in S_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item (this=..., key=..., value=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Collections/Hashtable.cs:1277\n1277\t                    lock (_table.SyncRoot)\n(gdb) list\n1272\t            public override object? this[object key]\n1273\t            {\n1274\t                get =\u003e _table[key];\n1275\t                set\n1276\t                {\n1277\t                    lock (_table.SyncRoot)\n1278\t                    {\n1279\t                        _table[key] = value;\n1280\t                    }\n1281\t                }\n(gdb) bt\n#0  0x0000002aaac9a368 in S_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item (this=..., key=..., value=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Collections/Hashtable.cs:1277\n#1  0x0000002aaac5dfcc in S_P_CoreLib_System_Text_EncodingTable__GetCodePageFromName (name=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Text/EncodingTable.cs:44\n#2  0x0000002aaac5b1a8 in S_P_CoreLib_System_Text_Encoding__GetEncoding_1 (name=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Text/Encoding.cs:282\n#3  0x0000002aaac1bf9c in System_Console_System_Text_EncodingHelper__GetEncodingFromCharset () at /runtime/src/libraries/Common/src/System/Text/EncodingHelper.Unix.cs:15\n#4  0x0000002aaac17dbc in System_Console_System_ConsolePal__GetConsoleEncoding () at /runtime/src/libraries/System.Console/src/System/ConsolePal.Unix.cs:697\n#5  0x0000002aaac17134 in System_Console_System_Console__get_OutputEncoding () at /runtime/src/libraries/System.Console/src/System/Console.cs:118\n#6  0x0000002aaac172d8 in System_Console_System_Console__CreateOutputWriter (outputStream=...) at /runtime/src/libraries/System.Console/src/System/Console.cs:238\n#7  0x0000002aaac174c0 in System_Console_System_Console___get_Out_g__EnsureInitialized_26_0 () at /runtime/src/libraries/System.Console/src/System/Console.cs:208\n#8  0x0000002aaac17238 in System_Console_System_Console__get_Out () at /runtime/src/libraries/System.Console/src/System/Console.cs:200\n#9  0x0000002aaac17414 in System_Console_System_Console__WriteLine_12 (value=...) at /runtime/src/libraries/System.Console/src/System/Console.cs:813\n#10 0x0000002aaaca7b84 in app1_Program___Main__ (args=...) at /app1/Program.cs:2\n#11 0x0000002aaaccd458 in app1__Module___StartupCodeMain () at /runtime/src/coreclr/nativeaot/Common/src/System/Collections/Generic/LowLevelDictionary.cs:287\n#12 0x0000002aaab6fea2 in main (argc=1, argv=0x3ffffff1b8) at /runtime/src/coreclr/nativeaot/Bootstrap/main.cpp:225\n```\n\nThe disassembly at this point is:\n\n```gdb\n(gdb) disas\nDump of assembler code for function S_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item:\n   0x0000002aaac9a310 \u003c+0\u003e:\taddi\tsp,sp,-64\n   0x0000002aaac9a314 \u003c+4\u003e:\tsd\ts0,16(sp)\n   0x0000002aaac9a318 \u003c+8\u003e:\tsd\tra,24(sp)\n   0x0000002aaac9a31c \u003c+12\u003e:\tsd\ts1,32(sp)\n   0x0000002aaac9a320 \u003c+16\u003e:\tsd\ts2,40(sp)\n   0x0000002aaac9a324 \u003c+20\u003e:\tsd\ts3,48(sp)\n   0x0000002aaac9a328 \u003c+24\u003e:\tsd\ts4,56(sp)\n   0x0000002aaac9a32c \u003c+28\u003e:\taddi\ts0,sp,16\n   0x0000002aaac9a330 \u003c+32\u003e:\tmv\ts1,a0\n   0x0000002aaac9a334 \u003c+36\u003e:\tmv\ts2,a1\n   0x0000002aaac9a338 \u003c+40\u003e:\tmv\ts3,a2\n   0x0000002aaac9a33c \u003c+44\u003e:\tld\ts4,64(s1)\n   0x0000002aaac9a340 \u003c+48\u003e:\tld\ta0,0(s4)\n   0x0000002aaac9a344 \u003c+52\u003e:\tlui\tra,0x40000\n   0x0000002aaac9a348 \u003c+56\u003e:\tslli\tra,ra,0xb\n   0x0000002aaac9a34c \u003c+60\u003e:\taddi\tra,ra,2 # 0x40000002\n   0x0000002aaac9a350 \u003c+64\u003e:\tslli\tra,ra,0xb\n   0x0000002aaac9a354 \u003c+68\u003e:\taddi\tra,ra,179\n   0x0000002aaac9a358 \u003c+72\u003e:\tslli\tra,ra,0xa\n   0x0000002aaac9a35c \u003c+76\u003e:\taddi\tra,ra,160\n   0x0000002aaac9a360 \u003c+80\u003e:\tbeq\ta0,ra,0x2aaac9a3a8 \u003cS_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item+152\u003e\n   0x0000002aaac9a364 \u003c+84\u003e:\tld\ta0,64(s4)\n=\u003e 0x0000002aaac9a368 \u003c+88\u003e:\tld\ta1,0(a0)\n   0x0000002aaac9a36c \u003c+92\u003e:\tlui\tra,0x40000\n   0x0000002aaac9a370 \u003c+96\u003e:\tslli\tra,ra,0xb\n   0x0000002aaac9a374 \u003c+100\u003e:\taddi\tra,ra,2 # 0x40000002\n   0x0000002aaac9a378 \u003c+104\u003e:\tslli\tra,ra,0xb\n   0x0000002aaac9a37c \u003c+108\u003e:\taddi\tra,ra,179\n   0x0000002aaac9a380 \u003c+112\u003e:\tslli\tra,ra,0xa\n   0x0000002aaac9a384 \u003c+116\u003e:\taddi\tra,ra,160\n   0x0000002aaac9a388 \u003c+120\u003e:\tbeq\ta1,ra,0x2aaac9a3a0 \u003cS_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item+144\u003e\n   0x0000002aaac9a38c \u003c+124\u003e:\tauipc\ta1,0x0\n   0x0000002aaac9a390 \u003c+128\u003e:\taddi\ta1,a1,292 # 0x2aaac9a4b0 \u003cS_P_CoreLib_System_Collections_Hashtable_SyncHashtable__get_SyncRoot\u003e\n   0x0000002aaac9a394 \u003c+132\u003e:\tjalr\ta1\n   0x0000002aaac9a398 \u003c+136\u003e:\tmv\ts4,a0\n   0x0000002aaac9a39c \u003c+140\u003e:\tj\t0x2aaac9a3a4 \u003cS_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item+148\u003e\n   0x0000002aaac9a3a0 \u003c+144\u003e:\tmv\ts4,a0\n   0x0000002aaac9a3a4 \u003c+148\u003e:\tj\t0x2aaac9a3a8 \u003cS_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item+152\u003e\n   0x0000002aaac9a3a8 \u003c+152\u003e:\tsd\ts4,-16(s0)\n   0x0000002aaac9a3ac \u003c+156\u003e:\tsw\tzero,-4(s0)\n   0x0000002aaac9a3b0 \u003c+160\u003e:\tmv\ta0,s4\n   0x0000002aaac9a3b4 \u003c+164\u003e:\tauipc\ta1,0xfffb4\n   0x0000002aaac9a3b8 \u003c+168\u003e:\taddi\ta1,a1,-1460 # 0x2aaac4de00 \u003cS_P_CoreLib_System_Threading_Monitor__Enter\u003e\n   0x0000002aaac9a3bc \u003c+172\u003e:\tjalr\ta1\n   0x0000002aaac9a3c0 \u003c+176\u003e:\tli\ta0,1\n   0x0000002aaac9a3c4 \u003c+180\u003e:\tsw\ta0,-4(s0)\n   0x0000002aaac9a3c8 \u003c+184\u003e:\tld\ta0,64(s1)\n   0x0000002aaac9a3cc \u003c+188\u003e:\tld\ta1,0(a0)\n   0x0000002aaac9a3d0 \u003c+192\u003e:\tlui\tra,0x40000\n   0x0000002aaac9a3d4 \u003c+196\u003e:\tslli\tra,ra,0xb\n   0x0000002aaac9a3d8 \u003c+200\u003e:\taddi\tra,ra,2 # 0x40000002\n   0x0000002aaac9a3dc \u003c+204\u003e:\tslli\tra,ra,0xb\n   0x0000002aaac9a3e0 \u003c+208\u003e:\taddi\tra,ra,179\n   0x0000002aaac9a3e4 \u003c+212\u003e:\tslli\tra,ra,0xa\n   0x0000002aaac9a3e8 \u003c+216\u003e:\taddi\tra,ra,160\n   0x0000002aaac9a3ec \u003c+220\u003e:\tbeq\ta1,ra,0x2aaac9a408 \u003cS_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item+248\u003e\n   0x0000002aaac9a3f0 \u003c+224\u003e:\tmv\ta1,s2\n   0x0000002aaac9a3f4 \u003c+228\u003e:\tmv\ta2,s3\n   0x0000002aaac9a3f8 \u003c+232\u003e:\tld\ta3,0(a0)\n   0x0000002aaac9a3fc \u003c+236\u003e:\tld\ta3,56(a3)\n   0x0000002aaac9a400 \u003c+240\u003e:\tjalr\ta3\n   0x0000002aaac9a404 \u003c+244\u003e:\tj\t0x2aaac9a420 \u003cS_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item+272\u003e\n```\n\nI noticed that this is not the first call to `S_P_CoreLib_System_Threading_Monitor__Enter`, and the sigsegv is not directly related to `lock`.\n\nGoing deeper, on frame 1, we have:\n\n```gdb\n(gdb) f 1\n#1  0x0000002aaac5dfcc in S_P_CoreLib_System_Text_EncodingTable__GetCodePageFromName (name=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Text/EncodingTable.cs:44\n44\t            s_nameToCodePage[name] = codePage;\n(gdb) list\n39\t                return (int)codePageObj;\n40\t            }\n41\t\n42\t            int codePage = InternalGetCodePageFromName(name);\n43\t\n44\t            s_nameToCodePage[name] = codePage;\n45\t\n46\t            return codePage;\n47\t        }\n48\n```\n\nSo I have two theories in descending order of their likeliness:\n\n* it\u0027s a codegen issue that INS_slli, INS_beq etc. are using `ra`\n    * one of these, perhaps:\n    ```sh\n\t% git grep INS_beq \u0027:/src/coreclr/jit/*riscv*\u0027\n\tsrc/coreclr/jit/codegenriscv64.cpp:        emit-\u003eemitIns_J_cond_la(INS_beq, endLabel, targetReg, REG_R0);\n\tsrc/coreclr/jit/codegenriscv64.cpp:        emit-\u003eemitIns_R_R_I(INS_beq, EA_PTRSIZE, tempReg, REG_R0, 2 \u003c\u003c 2);\n\tsrc/coreclr/jit/codegenriscv64.cpp:                genJumpToThrowHlpBlk_la(SCK_DIV_BY_ZERO, INS_beq, divisorReg);\n\tsrc/coreclr/jit/codegenriscv64.cpp:                genJumpToThrowHlpBlk_la(SCK_ARITH_EXCPN, INS_beq, tempReg, nullptr, dividendReg);\n\tsrc/coreclr/jit/codegenriscv64.cpp:    GetEmitter()-\u003eemitIns_J_cond_la(INS_beq, skipLabel, data-\u003eGetRegNum(), REG_R0);\n\tsrc/coreclr/jit/codegenriscv64.cpp:                ins = INS_beq;\n\tsrc/coreclr/jit/codegenriscv64.cpp:                ins  = INS_beq;\n\tsrc/coreclr/jit/codegenriscv64.cpp:    GetEmitter()-\u003eemitIns_J_cond_la(INS_beq, gsCheckBlk, regGSConst, regGSValue);\n\tsrc/coreclr/jit/codegenriscv64.cpp:    assert(INS_beq \u003c= ins \u0026\u0026 ins \u003c= INS_bgeu);\n\tsrc/coreclr/jit/codegenriscv64.cpp:        // ins = (instruction)(ins^((ins != INS_beq)+(ins != INS_bne)));\n\tsrc/coreclr/jit/codegenriscv64.cpp:            ins = ins == INS_beq ? INS_bne : INS_beq;\n\tsrc/coreclr/jit/emitriscv64.cpp:    else if (INS_beq \u003c= ins \u0026\u0026 INS_bgeu \u003e= ins)\n\tsrc/coreclr/jit/emitriscv64.cpp:        case INS_beqz:\n\tsrc/coreclr/jit/emitriscv64.cpp:        case INS_beq:\n\tsrc/coreclr/jit/emitriscv64.cpp:    const regNumber reg2 = jmp-\u003eidInsIs(INS_beqz, INS_bnez) ? REG_R0 : jmp-\u003eidReg2();\n\tsrc/coreclr/jit/emitriscv64.cpp:    regNumber reg2 = jmp-\u003eidInsIs(INS_beqz, INS_bnez) ? REG_R0 : jmp-\u003eidReg2();\n\tsrc/coreclr/jit/emitriscv64.cpp:        case INS_beqz:\n\tsrc/coreclr/jit/emitriscv64.cpp:        case INS_beq:\n    ```\n* it\u0027s a AsmOffset issue that the offsets are not correct.\n\nThe reason why it\u0027s less likely to be asmoffset is because by this time, runtime has accessed whole bunch of AsmOffesets related to array and other stuff.\n\nAt this point, arm64 has:\n\n```gdb\n(gdb) disas\nDump of assembler code for function S_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item:\n   0x0000aaaaaac960e0 \u003c+0\u003e:\tstp\tx29, x30, [sp, #-64]!\n   0x0000aaaaaac960e4 \u003c+4\u003e:\tstp\tx19, x20, [sp, #32]\n   0x0000aaaaaac960e8 \u003c+8\u003e:\tstp\tx21, x22, [sp, #48]\n   0x0000aaaaaac960ec \u003c+12\u003e:\tmov\tx29, sp\n   0x0000aaaaaac960f0 \u003c+16\u003e:\tmov\tx19, x0\n   0x0000aaaaaac960f4 \u003c+20\u003e:\tmov\tx20, x1\n   0x0000aaaaaac960f8 \u003c+24\u003e:\tmov\tx21, x2\n   0x0000aaaaaac960fc \u003c+28\u003e:\tldr\tx22, [x19, #64]\n   0x0000aaaaaac96100 \u003c+32\u003e:\tldr\tx0, [x22]\n   0x0000aaaaaac96104 \u003c+36\u003e:\tnop\n   0x0000aaaaaac96108 \u003c+40\u003e:\tadr\tx1, 0xaaaaaad32588\n   0x0000aaaaaac9610c \u003c+44\u003e:\tcmp\tx0, x1\n=\u003e 0x0000aaaaaac96110 \u003c+48\u003e:\tb.eq\t0xaaaaaac96140 \u003cS_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item+96\u003e  // b.none\n   0x0000aaaaaac96114 \u003c+52\u003e:\tldr\tx0, [x22, #64]\n   0x0000aaaaaac96118 \u003c+56\u003e:\tldr\tx1, [x0]\n   0x0000aaaaaac9611c \u003c+60\u003e:\tnop\n   0x0000aaaaaac96120 \u003c+64\u003e:\tadr\tx2, 0xaaaaaad32588\n   0x0000aaaaaac96124 \u003c+68\u003e:\tcmp\tx1, x2\n   0x0000aaaaaac96128 \u003c+72\u003e:\tb.eq\t0xaaaaaac96138 \u003cS_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item+88\u003e  // b.none\n   0x0000aaaaaac9612c \u003c+76\u003e:\tbl\t0xaaaaaac961e0 \u003cS_P_CoreLib_System_Collections_Hashtable_SyncHashtable__get_SyncRoot\u003e\n   0x0000aaaaaac96130 \u003c+80\u003e:\tmov\tx22, x0\n   0x0000aaaaaac96134 \u003c+84\u003e:\tb\t0xaaaaaac9613c \u003cS_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item+92\u003e\n   0x0000aaaaaac96138 \u003c+88\u003e:\tmov\tx22, x0\n   0x0000aaaaaac9613c \u003c+92\u003e:\tb\t0xaaaaaac96140 \u003cS_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item+96\u003e\n   0x0000aaaaaac96140 \u003c+96\u003e:\tstr\tx22, [x29, #16]\n   0x0000aaaaaac96144 \u003c+100\u003e:\tstr\twzr, [x29, #28]\n   0x0000aaaaaac96148 \u003c+104\u003e:\tmov\tx0, x22\n   0x0000aaaaaac9614c \u003c+108\u003e:\tbl\t0xaaaaaac60180 \u003cS_P_CoreLib_System_Threading_Monitor__Enter\u003e\n   0x0000aaaaaac96150 \u003c+112\u003e:\tmov\tw0, #0x1                   \t// #1\n   0x0000aaaaaac96154 \u003c+116\u003e:\tstr\tw0, [x29, #28]\n   0x0000aaaaaac96158 \u003c+120\u003e:\tldr\tx0, [x19, #64]\n   0x0000aaaaaac9615c \u003c+124\u003e:\tldr\tx1, [x0]\n   0x0000aaaaaac96160 \u003c+128\u003e:\tnop\n   0x0000aaaaaac96164 \u003c+132\u003e:\tadr\tx2, 0xaaaaaad32588\n   0x0000aaaaaac96168 \u003c+136\u003e:\tcmp\tx1, x2\n   0x0000aaaaaac9616c \u003c+140\u003e:\tb.eq\t0xaaaaaac96188 \u003cS_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item+168\u003e  // b.none\n   0x0000aaaaaac96170 \u003c+144\u003e:\tmov\tx1, x20\n   0x0000aaaaaac96174 \u003c+148\u003e:\tmov\tx2, x21\n   0x0000aaaaaac96178 \u003c+152\u003e:\tldr\tx3, [x0]\n   0x0000aaaaaac9617c \u003c+156\u003e:\tldr\tx3, [x3, #56]\n   0x0000aaaaaac96180 \u003c+160\u003e:\tblr\tx3\n   0x0000aaaaaac96184 \u003c+164\u003e:\tb\t0xaaaaaac96198 \u003cS_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item+184\u003e\n   0x0000aaaaaac96188 \u003c+168\u003e:\tmov\tx1, x20\n   0x0000aaaaaac9618c \u003c+172\u003e:\tmov\tx2, x21\n   0x0000aaaaaac96190 \u003c+176\u003e:\tmov\tw3, wzr\n   0x0000aaaaaac96194 \u003c+180\u003e:\tbl\t0xaaaaaac78000 \u003cS_P_CoreLib_System_Collections_Hashtable__Insert\u003e\n   0x0000aaaaaac96198 \u003c+184\u003e:\tnop\n   0x0000aaaaaac9619c \u003c+188\u003e:\tmov\tx0, x22\n   0x0000aaaaaac961a0 \u003c+192\u003e:\tbl\t0xaaaaaac60380 \u003cS_P_CoreLib_System_Threading_Monitor__Exit\u003e\n   0x0000aaaaaac961a4 \u003c+196\u003e:\tldp\tx21, x22, [sp, #48]\n   0x0000aaaaaac961a8 \u003c+200\u003e:\tldp\tx19, x20, [sp, #32]\n   0x0000aaaaaac961ac \u003c+204\u003e:\tldp\tx29, x30, [sp], #64\n   0x0000aaaaaac961b0 \u003c+208\u003e:\tret\n   0x0000aaaaaac961b4 \u003c+212\u003e:\tstp\tx29, x30, [sp, #-48]!\n   0x0000aaaaaac961b8 \u003c+216\u003e:\tstp\tx19, x20, [sp, #16]\n   0x0000aaaaaac961bc \u003c+220\u003e:\tstp\tx21, x22, [sp, #32]\n   0x0000aaaaaac961c0 \u003c+224\u003e:\tldr\tw0, [x29, #28]\n   0x0000aaaaaac961c4 \u003c+228\u003e:\tcbz\tw0, 0xaaaaaac961d0 \u003cS_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item+240\u003e\n   0x0000aaaaaac961c8 \u003c+232\u003e:\tldr\tx0, [x29, #16]\n   0x0000aaaaaac961cc \u003c+236\u003e:\tbl\t0xaaaaaac60380 \u003cS_P_CoreLib_System_Threading_Monitor__Exit\u003e\n   0x0000aaaaaac961d0 \u003c+240\u003e:\tldp\tx21, x22, [sp, #32]\n   0x0000aaaaaac961d4 \u003c+244\u003e:\tldp\tx19, x20, [sp, #16]\n--Type \u003cRET\u003e for more, q to quit, c to continue without paging--c\n   0x0000aaaaaac961d8 \u003c+248\u003e:\tldp\tx29, x30, [sp], #48\n   0x0000aaaaaac961dc \u003c+252\u003e:\tret\nEnd of assembler dump.\n``` \n\nand it\u0027d jump to `0x0000aaaaaac96140`, riscv64 isn\u0027t jumping, i.e. `beq` is false.",
                                           "updatedAt":  "2025-02-08T17:02:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dtLEv",
                                           "createdAt":  "2025-02-08T17:30:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFuCUw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-08T18:05:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Maybe worth checking the JitDump of `S_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item` (pass it as `--codegenopt` to ILC; there\u0027s a tutorial somewhere in the repo).",
                                           "updatedAt":  "2025-02-08T17:30:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dtQv3",
                                           "createdAt":  "2025-02-08T18:14:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFuEMQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-08T18:25:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "Here we go: https://0x0.st/8Pxg.txt\n\nNote that the syntax for JitDump is somewhat unintuitive:\n❌ `--codegenopt:JitDump=S_P_CoreLib_System_Collections_Hashtable_SyncHashtable__set_Item`\n❌ `--codegenopt:JitDump=System.Collections.Hashtable.SyncHashtable.set_Item`\n✅ `--codegenopt:JitDump=System.Collections.Hashtable+SyncHashtable:set_Item`\n\nHad to dump everything with `JitDump=*` to figure it out. 😅",
                                           "updatedAt":  "2025-02-08T18:14:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dtR5u",
                                           "createdAt":  "2025-02-08T18:26:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFuFCw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-08T18:39:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Note that the syntax for JitDump is somewhat unintuitive:\n\nI get it wrong every single time 😅 I will have a look later in the weekend. Thanks!",
                                           "updatedAt":  "2025-02-08T18:26:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6duM0h",
                                           "createdAt":  "2025-02-09T08:59:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "The usage of register `ra` seems to be fine, at least it\u0027s saved in the prolog and restored in the epilog, so that alone doesn\u0027t look wrong. However, the value loaded does look odd. It\u0027s the 0x400000000042ba80 class handle that appear earlier in the JIT dump. I would expect that to be emitted as relocatable address, not a verbatim integer (unlike JIT code which knows the exact address). I suppose we can cross-reference that with the ARM64 code to verify the theory (`objdump -Sr` should print disassembly and relocations).",
                                           "updatedAt":  "2025-02-09T08:59:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6duOl_",
                                           "createdAt":  "2025-02-09T09:18:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "FWIW, I\u0027d expect the relocation to be emitted in this code path:\nhttps://github.com/dotnet/runtime/blob/34ec4f5f0bf2b67764db8a6413ba9975c41bc35a/src/coreclr/jit/codegenriscv64.cpp#L1046-L1047\n\n~~However, apparently the code path is not reached and I believe the implementation is wrong too since it emits `jal` instead of address load (`auipc` + `addi`?). /cc @tomeksowi~~\n\nUPD: Nevermind, the `emitIns_R_AI` method does not actually generate `jal`.",
                                           "updatedAt":  "2025-02-09T09:52:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6duO54",
                                           "createdAt":  "2025-02-09T09:22:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFvMBA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-09T09:23:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "Arm64 dump https://0x0.st/8P0X.txt it seems to be using relocs (`0x400000000042af88`):\n\n```asm\n***************************************************************************\nInstructions as they come out of the scheduler\n\n\nG_M22421_IG01:        ; offs=0x000000, size=0x001C, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, byref, nogc \u003c-- Prolog IG\nIN002f: 000000      stp     fp, lr, [sp, #-0x40]!\nIN0030: 000004      stp     x19, x20, [sp, #0x20]\nIN0031: 000008      stp     x21, x22, [sp, #0x30]\nIN0032: 00000C      mov     fp, sp\nIN0033: 000010      mov     x19, x0\n                             ; gcrRegs +[x19]\nIN0034: 000014      mov     x20, x1\n                             ; gcrRegs +[x20]\nIN0035: 000018      mov     x21, x2\n                             ; gcrRegs +[x21]\n\t\t\t\t\t\t;; size=28 bbWeight=1 PerfScore 5.00\nG_M22421_IG02:        ; offs=0x00001C, size=0x0018, bbWeight=1, gcrefRegs=380000 {x19 x20 x21}, byrefRegs=0000 {}, BB01 [0000], byref, isz\nIN0001: 00001C      ldr     x22, [x19, #0x40]\n                             ; gcrRegs +[x22]\nIN0002: 000020      ldr     x0, [x22]\nrecordRelocation: 0xffbfc407a0a4 (rw: 0xffbfc407a0a4) =\u003e 0x400000000042af88, type 4 (id-\u003eidIsTlsGD() ? IMAGE_REL_AARCH64_TLSDESC_ADR_PAGE21 : IMAGE_REL_ARM64_PAGEBASE_REL21), delta 0\nIN0003: 000024      adrp    x1, [HIGH RELOC #0x400000000042af88]\nrecordRelocation: 0xffbfc407a0a8 (rw: 0xffbfc407a0a8) =\u003e 0x400000000042af88, type 6 (IMAGE_REL_ARM64_PAGEOFFSET_12A), delta 0\nIN0004: 000028      add     x1, x1, [LOW RELOC #0x400000000042af88]\nIN0005: 00002C      cmp     x0, x1\nIN0006: 000030      beq     G_M22421_IG07\n```\n\ncomparing that part of riscv64 does seem fishy:\n\n```asm\n***************************************************************************\nInstructions as they come out of the scheduler\n\n\nG_M22421_IG01:        ; offs=0x000000, size=0x002C, bbWeight=1, gcrefRegs=0000 {}, byrefRegs=0000 {}, byref, nogc \u003c-- Prolog IG\nIN0041: 000000      addi           sp, sp, -64\nIN0042: 000004      sd             fp, 16(sp)\nIN0043: 000008      sd             ra, 24(sp)\nIN0044: 00000C      sd             s1, 32(sp)\nIN0045: 000010      sd             s2, 40(sp)\nIN0046: 000014      sd             s3, 48(sp)\nIN0047: 000018      sd             s4, 56(sp)\nIN0048: 00001C      addi           fp, sp, 16\nIN0049: 000020      mv             s1, a0\n                             ; gcrRegs +[s1]\nIN004a: 000024      mv             s2, a1\n                             ; gcrRegs +[s2]\nIN004b: 000028      mv             s3, a2\n                             ; gcrRegs +[s3]\n\t\t\t\t\t\t;; size=44 bbWeight=1 PerfScore 0.00\nG_M22421_IG02:        ; offs=0x00002C, size=0x0028, bbWeight=1, gcrefRegs=C0200 {s1 s2 s3}, byrefRegs=0000 {}, BB01 [0000], byref\nIN0001: 00002C      ld             s4, 64(s1)\n                             ; gcrRegs +[s4]\nIN0002: 000030      ld             a0, 0(s4)\nIN0003: 000034      lui            ra, 262144\nIN0004: 000038      slli           ra, ra, 11\nIN0005: 00003C      addi           ra, ra, 2\nIN0006: 000040      slli           ra, ra, 11\nIN0007: 000044      addi           ra, ra, 174\nIN0008: 000048      slli           ra, ra, 10\nIN0009: 00004C      addi           ra, ra, 640\nIN000a: 000050      beq            a0, ra, G_M22421_IG07\n\t\t\t\t\t\t;; size=40 bbWeight=1 PerfScore 0.00\nG_M22421_IG03:        ; offs=0x000054, size=0x0028, bbWeight=0.25, gcrefRegs=1C0200 {s1 s2 s3 s4}, byrefRegs=0000 {}, BB03 [0010], byref\nIN000b: 000054      ld             a0, 64(s4)\n                             ; gcrRegs +[a0]\n```",
                                           "updatedAt":  "2025-02-09T09:22:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6duPQM",
                                           "createdAt":  "2025-02-09T09:26:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFvMiQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-09T09:27:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "That pretty much confirms my theory that `CNS_INT(h)` (relocatable handle constant) is not emitted correctly in RyuJIT. These code paths are largely unused in JIT scenarios so it\u0027s not entirely surprising. I may have a look at the codegen later but it\u0027s not really my area of expertise.",
                                           "updatedAt":  "2025-02-09T09:26:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dvWP1",
                                           "createdAt":  "2025-02-09T17:46:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Unfortunately, this doesn\u0027t reproduce when compiling with `--singlemethodtypename`/`--singlemethodname` on a cross-JIT. I suspect that it doesn\u0027t get the info for devirtualization and thus doesn\u0027t generate the checks. I\u0027ll need to find a way to reproduce it to get the same output as you have, and then find a way to enable breakpoints at the right moment...",
                                           "updatedAt":  "2025-02-09T17:46:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dvwJE",
                                           "createdAt":  "2025-02-09T19:12:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tomeksowi",
                                           "body":  "\u003e ```asm\n\u003e IN0003: 000034      lui            ra, 262144\n\u003e IN0004: 000038      slli           ra, ra, 11\n\u003e IN0005: 00003C      addi           ra, ra, 2\n\u003e IN0006: 000040      slli           ra, ra, 11\n\u003e IN0007: 000044      addi           ra, ra, 174\n\u003e IN0008: 000048      slli           ra, ra, 10\n\u003e IN0009: 00004C      addi           ra, ra, 640\n\u003e IN000a: 000050      beq            a0, ra, G_M22421_IG07\n\u003e ```\nThat sequence most likely comes from emitter::emitLoadImmediate().\n\nDoes the offending codegen come from here by any chance?\nhttps://github.com/dotnet/runtime/blob/34ec4f5f0bf2b67764db8a6413ba9975c41bc35a/src/coreclr/jit/codegenriscv64.cpp#L3584\n\nIf so, maybe CodeGen::instGen_Set_Reg_To_Imm() can handle it better.",
                                           "updatedAt":  "2025-02-09T19:12:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dvx_7",
                                           "createdAt":  "2025-02-09T19:21:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFwQag==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-09T19:39:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "@filipnavara, I\u0027m also using cross-JIT `libclrjit_unix_riscv64_arm64.so`.\n\n```sh\n# on osx-arm64\n$ cd runtime\n$ rm -rf artifacts .dotnet\n$ docker run --rm -v$(pwd):/runtime -e ROOTFS_DIR=/crossrootfs/riscv64 --platform linux/arm64 -it ubuntu\n# inside container\n\n# deps\n$ /runtime/eng/common/native/install-dependencies.sh\n$ apt install -y debootstrap\n$ /runtime/eng/common/cross/build-rootfs.sh riscv64 noble\n\n# staged build for riscv64\n/runtime/build.sh -arch riscv64 -cross -s clr+libs+host -c Debug -p:StageOneBuild=true --keepnativesymbols true\n/runtime/build.sh -arch riscv64 -cross -s tools+clr.tools -c Debug --keepnativesymbols true  -p:StageTwoBuild=true\n\n# build for host\n/runtime/build.sh -s clr+libs --keepnativesymbols true\n\n# copy altjit\ncp /runtime/artifacts/bin/coreclr/linux.riscv64.Debug/arm64/libclrjit_unix_riscv64_arm64.so /runtime/artifacts/bin/coreclr/linux.arm64.Debug/ilc-published\n```\n\nnow an app:\n\n```sh\n# publish a standard app for linux-arm64 first\n$ /runtime/dotnet.sh new console -o /app1\n$ cd /app1\n$ /runtime/dotnet.sh publish -c Debug -p:PublishAot=true\n\n# download the rsp and linker scripts for riscv64 and arm64 (all debug bits)\n$ curl -sSL -o /runtime/app1.ilc.rsp https://gist.githubusercontent.com/am11/fc0bbf930f95f1bee2f100f145474e0a/raw/0be26fce2e39adc3a238bee41e38b6deb9271107/app1.ilc.rsp\n$ curl -sSL -o /runtime/app1.ilc.arm64.rsp https://gist.githubusercontent.com/am11/fc0bbf930f95f1bee2f100f145474e0a/raw/ab0384a5042dade0ebacc53134185cdf10e566ee/app1.ilc.arm64.rsp\n\n$ curl -sSL -o /runtime/link.Debug.sh https://gist.githubusercontent.com/am11/fc0bbf930f95f1bee2f100f145474e0a/raw/4f778c69aa64103a8823967b9594d0336c67b75d/link.Debug.sh\n$ curl -sSL -o /runtime/link.Debug.arm64.sh https://gist.githubusercontent.com/am11/fc0bbf930f95f1bee2f100f145474e0a/raw/4f778c69aa64103a8823967b9594d0336c67b75d/link.Debug.arm64.sh\n\n# publish riscv64\n$ /runtime/artifacts/bin/coreclr/linux.arm64.Debug/ilc-published/ilc @/runtime/app1.ilc.Debug.rsp\n# publish arm64\n$ /runtime/artifacts/bin/coreclr/linux.arm64.Debug/ilc-published/ilc @/runtime/app1.ilc.Debug.rsp\n\n# link riscv64\n$ sh /runtime/link.Debug.sh lld # or bfd\n# link arm64\n$ sh /runtime/link.Debug.sh lld # or bfd\n\n# copy riscv64 binary to runtime dir (so host machine can see it)\n$ cp bin/Debug/net10.0/linux-riscv64/native/app1 /runtime/\n```\n\nQuick rebuilds riscv64\n\n```sh\n# if you\u0027ve changed something in src/coreclr/jit,gc,nativeaot, only do the stage1 build for nativeaotruntime (very quick)\n$ /runtime/build.sh -arch riscv64 -cross -s clr.nativeaotruntime -c Debug -p:StageOneBuild=true --keepnativesymbols true\n$ cp /runtime/artifacts/bin/coreclr/linux.riscv64.Debug/arm64/libclrjit_unix_riscv64_arm64.so /runtime/artifacts/bin/coreclr/linux.arm64.Debug/ilc-published\n\n# if you changed something in src/coreclr/tools, only do the stage2 build (quick\u0027ish)\n$ /runtime/build.sh -arch riscv64 -cross -s tools+clr.tools -c Debug --keepnativesymbols true  -p:StageTwoBuild=true\n$ cp /runtime/artifacts/bin/coreclr/linux.riscv64.Debug/arm64/libclrjit_unix_riscv64_arm64.so /runtime/artifacts/bin/coreclr/linux.arm64.Debug/ilc-published\n\n# now run publish, link and copy steps from previous code block\n$ /runtime/artifacts/bin/coreclr/linux.arm64.Debug/ilc-published/ilc @/runtime/app1.ilc.Debug.rsp\n$ sh /runtime/link.Debug.sh lld # or bfd\n$ cp bin/Debug/net10.0/linux-riscv64/native/app1 /runtime/\n```\n\nHow to run? I have two ways, one ssh into laptop/device, other one is qemu:\n\n```sh\n# osx-arm64 host / new terminal tab\n$ cd runtime\n$ docker run --rm --platform linux/riscv64 -v$(pwd):/runtime -it ubuntu\n$ apt update \u0026\u0026 apt install -y libatomic1\n$ /runtime/app1\n```\n\ndebugging requires device (qemu doesn\u0027t support ptrace). I can give you the ssh access to my laptop if you want, just email me the public key and I\u0027ll set it up.",
                                           "updatedAt":  "2025-02-09T19:25:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dvzlU",
                                           "createdAt":  "2025-02-09T19:40:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e debugging requires device (qemu doesn\u0027t support ptrace).\n\nActually it\u0027s possible to use the built-in qemu-user gdb interface. I haven\u0027t done it in many months but I used it a lot during the linux-arm32 bringup.",
                                           "updatedAt":  "2025-02-09T19:40:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dvz9P",
                                           "createdAt":  "2025-02-09T19:45:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFwSRw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tomeksowi",
                                                                               "createdAt":  "2025-02-09T19:51:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-09T19:56:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Does the offending codegen come from here by any chance?\n\nThat was my suspicion as well. I wanted to confirm it with a debugger but that turned out to be a bit trickier than I expected. Presumably it would help to replace it with the sequence that loongson codegen uses:\n```diff\ndiff --git a/src/coreclr/jit/codegenriscv64.cpp b/src/coreclr/jit/codegenriscv64.cpp\nindex dd008c8286f..82bb4b639f6 100644\n--- a/src/coreclr/jit/codegenriscv64.cpp\n+++ b/src/coreclr/jit/codegenriscv64.cpp\n@@ -3581,7 +3581,24 @@ void CodeGen::genCodeForJumpCompare(GenTreeOpCC* tree)\n                     unreached();\n             }\n \n-            emit-\u003eemitLoadImmediate(EA_PTRSIZE, REG_RA, imm);\n+            GenTreeIntCon* con = op2-\u003eAsIntCon();\n+\n+            emitAttr attr = emitActualTypeSize(op2Type);\n+            // TODO-CQ: Currently we cannot do this for all handles because of\n+            // https://github.com/dotnet/runtime/issues/60712\n+            if (con-\u003eImmedValNeedsReloc(compiler))\n+            {\n+                attr = EA_SET_FLG(attr, EA_CNS_RELOC_FLG);\n+            }\n+\n+            if (op2Type == TYP_BYREF)\n+            {\n+                attr = EA_SET_FLG(attr, EA_BYREF_FLG);\n+            }\n+\n+            instGen_Set_Reg_To_Imm(attr, REG_RA, imm,\n+                                   INS_FLAGS_DONT_CARE DEBUGARG(con-\u003egtTargetHandle) DEBUGARG(con-\u003egtFlags));\n+            regSet.verifyRegUsed(REG_RA);\n             regs = (int)REG_RA \u003c\u003c 5;\n         }\n         else\n```",
                                           "updatedAt":  "2025-02-09T19:45:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dv10d",
                                           "createdAt":  "2025-02-09T20:07:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFwUpA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-09T20:15:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "tomeksowi",
                                                                               "createdAt":  "2025-02-09T20:17:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "am11",
                                           "body":  "Thanks! That fixed it and we get \"Hello World!\" printed. 🎉\n\nNow the finalizer thread gives us sigsegv\n\n```sh\n$ ./app1 \nHello, World!\nSegmentation fault\n```\n\ngdb\n\n```gdb\n(gdb) r\nStarting program: /tmp/app1 \n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/riscv64-linux-gnu/libthread_db.so.1\".\n[New Thread 0x3fef75a060 (LWP 151990)]\n[New Thread 0x3feed1c060 (LWP 151991)]\nHello, World!\n\nThread 1 \"app1\" received signal SIGSEGV, Segmentation fault.\nRhpAssignRefRiscV64 () at /runtime/src/coreclr/nativeaot/Runtime/riscv64/WriteBarriers.S:255\n255\t        sd    t4, 0(t3)\n(gdb) bt\n#0  RhpAssignRefRiscV64 () at /runtime/src/coreclr/nativeaot/Runtime/riscv64/WriteBarriers.S:255\n#1  0x0000002aaac938cc in S_P_CoreLib_Internal_Runtime_FrozenObjectHeapManager___cctor () at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/Internal/Runtime/FrozenObjectHeapManager.cs:17\n#2  0x0000002aaac5915c in S_P_CoreLib_System_Threading_Thread__WaitForForegroundThreads () at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Threading/Thread.NativeAot.cs:503\n#3  0x0000002aaac982f0 in S_P_CoreLib_Internal_Runtime_CompilerHelpers_StartupCodeHelpers__Shutdown () at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/Internal/Runtime/CompilerHelpers/StartupCode/StartupCodeHelpers.Extensions.cs:66\n#4  0x0000002aaacd8504 in app1__Module___StartupCodeMain () at /runtime/src/coreclr/nativeaot/Common/src/System/Collections/Generic/LowLevelDictionary.cs:287\n#5  0x0000002aaab7764e in main (argc=1, argv=0x3ffffff1b8) at /runtime/src/coreclr/nativeaot/Bootstrap/main.cpp:22\n\n(gdb) f 1\n#1  0x0000002aaac938cc in S_P_CoreLib_Internal_Runtime_FrozenObjectHeapManager___cctor () at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/Internal/Runtime/FrozenObjectHeapManager.cs:17\n17\t        public static readonly FrozenObjectHeapManager Instance = new FrozenObjectHeapManager();\n\n# at frame 1, disassembly looks like\n(gdb) disas\nDump of assembler code for function S_P_CoreLib_Internal_Runtime_FrozenObjectHeapManager___cctor:\n   0x0000002aaac93860 \u003c+0\u003e:\taddi\tsp,sp,-32\n   0x0000002aaac93864 \u003c+4\u003e:\tsd\ts0,8(sp)\n   0x0000002aaac93868 \u003c+8\u003e:\tsd\tra,16(sp)\n   0x0000002aaac9386c \u003c+12\u003e:\tsd\ts1,24(sp)\n   0x0000002aaac93870 \u003c+16\u003e:\taddi\ts0,sp,8\n   0x0000002aaac93874 \u003c+20\u003e:\tauipc\ta0,0xad\n   0x0000002aaac93878 \u003c+24\u003e:\taddi\ta0,a0,-1852 # 0x2aaad40138\n   0x0000002aaac9387c \u003c+28\u003e:\tauipc\ta1,0xfff85\n   0x0000002aaac93880 \u003c+32\u003e:\taddi\ta1,a1,574 # 0x2aaac18aba \u003cRhpNewFast\u003e\n   0x0000002aaac93884 \u003c+36\u003e:\tjalr\ta1\n   0x0000002aaac93888 \u003c+40\u003e:\tmv\ts1,a0\n   0x0000002aaac9388c \u003c+44\u003e:\tmv\ta0,s1\n   0x0000002aaac93890 \u003c+48\u003e:\tauipc\ta1,0x0\n   0x0000002aaac93894 \u003c+52\u003e:\taddi\ta1,a1,-160 # 0x2aaac937f0 \u003cS_P_CoreLib_Internal_Runtime_FrozenObjectHeapManager___ctor\u003e\n   0x0000002aaac93898 \u003c+56\u003e:\tjalr\ta1\n   0x0000002aaac9389c \u003c+60\u003e:\tauipc\ta0,0xa5\n   0x0000002aaac938a0 \u003c+64\u003e:\taddi\ta0,a0,-1340 # 0x2aaad38360\n   0x0000002aaac938a4 \u003c+68\u003e:\tfence\trw,rw\n   0x0000002aaac938a8 \u003c+72\u003e:\tld\ta0,-8(a0)\n   0x0000002aaac938ac \u003c+76\u003e:\tbnez\ta0,0x2aaac938e0 \u003cS_P_CoreLib_Internal_Runtime_FrozenObjectHeapManager___cctor+128\u003e\n   0x0000002aaac938b0 \u003c+80\u003e:\tauipc\tt3,0x6e\n   0x0000002aaac938b4 \u003c+84\u003e:\taddi\tt3,t3,-328 # 0x2aaad01768\n   0x0000002aaac938b8 \u003c+88\u003e:\tld\tt3,0(t3)\n   0x0000002aaac938bc \u003c+92\u003e:\taddi\tt3,t3,8\n   0x0000002aaac938c0 \u003c+96\u003e:\tmv\tt4,s1\n   0x0000002aaac938c4 \u003c+100\u003e:\tauipc\tt2,0xfff86\n   0x0000002aaac938c8 \u003c+104\u003e:\tjalr\t1534(t2) # 0x2aaac19ec2 \u003cRhpAssignRefRiscV64\u003e\n=\u003e 0x0000002aaac938cc \u003c+108\u003e:\tld\ts1,24(sp)\n   0x0000002aaac938d0 \u003c+112\u003e:\tld\tra,16(sp)\n   0x0000002aaac938d4 \u003c+116\u003e:\tld\ts0,8(sp)\n   0x0000002aaac938d8 \u003c+120\u003e:\taddi\tsp,sp,32\n   0x0000002aaac938dc \u003c+124\u003e:\tret\n   0x0000002aaac938e0 \u003c+128\u003e:\tauipc\ta0,0xffed1\n   0x0000002aaac938e4 \u003c+132\u003e:\taddi\ta0,a0,1632 # 0x2aaab64f40 \u003c__GetGCStaticBase_S_P_CoreLib_Internal_Runtime_FrozenObjectHeapManager\u003e\n   0x0000002aaac938e8 \u003c+136\u003e:\tjalr\ta0\n   0x0000002aaac938ec \u003c+140\u003e:\tj\t0x2aaac938b0 \u003cS_P_CoreLib_Internal_Runtime_FrozenObjectHeapManager___cctor+80\n```\n\nNote that anything before `0x0000002aaac938c4` was never executed in this method, e.g. `b *0x0000002aaac938c0` wont get hit from start till crash. So it seems like the finalizer thread getting this address somewhere and resuming it from the middle? Strange stuff.",
                                           "updatedAt":  "2025-02-09T20:10:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dv3bi",
                                           "createdAt":  "2025-02-09T20:22:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFwVTQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-09T20:23:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "The stack at `WaitForForegroundThreads` looks weird. I assume there\u0027s some TLS access inlined there, so I would probably start looking from that point.",
                                           "updatedAt":  "2025-02-09T20:22:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dv3cy",
                                           "createdAt":  "2025-02-09T20:23:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Could it be related to CAS128 https://github.com/dotnet/runtime/blob/34ec4f5f0bf2b67764db8a6413ba9975c41bc35a/src/coreclr/nativeaot/Runtime/unix/PalRedhawkInline.h#L106, not sure when that comes into play. 👀",
                                           "updatedAt":  "2025-02-09T20:23:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dv3rO",
                                           "createdAt":  "2025-02-09T20:26:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFwV-w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-09T20:26:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Could it be related to CAS128\n\nUnlikely... that plays a role in virtual method dispatch and it would likely manifest in a different way. (I had a brief look into using some 3-CAS algorithm to replace the CAS128 but I didn\u0027t get too far with that experiment.)",
                                           "updatedAt":  "2025-02-09T20:26:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dv4AO",
                                           "createdAt":  "2025-02-09T20:30:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "I have a gdb routine `ibyi` (instruction by instruction walk), which looks like:\n\n```gdb\n$ cat ~/.gdbinit \n# Enable history saving\nset history save on\n\n# Append to history file instead of overwriting\n#set history append on\n\n# Set the size of the history (number of commands to remember)\nset history size 1000\n\ndefine ibyi\n    while 1\n        si\n        disas $pc, $pc+0x10\n        list\n        bt\n        info registers\n    end\nend\n```\n\nFrom `S_P_CoreLib_System_Threading_Thread__WaitForForegroundThreads` to sigsegv, here is the dump:\n```sh\n$ gdb /tmp/app1 -ex \"set pagination off\" -ex \"set confirm off\" -ex \"set breakpoint pending on\" -ex \"b S_P_CoreLib_System_Threading_Thread__WaitForForegroundThreads\" -ex \"run\" -ex \"ibyi\" -ex \"quit\" 2\u003e\u00261 | curl -F \u0027file=@-\u0027  https://0x0.st\nhttps://0x0.st/8PhI.txt\n```",
                                           "updatedAt":  "2025-02-09T20:32:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dv5aM",
                                           "createdAt":  "2025-02-09T20:40:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Time to check `GetThreadStaticBase` in `ReadyToRun[Generic]HelperNode` it seems.",
                                           "updatedAt":  "2025-02-09T20:40:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dv8Pj",
                                           "createdAt":  "2025-02-09T20:49:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "ReadyToRunHelperNode diff: arm64-riscv64 https://www.diffchecker.com/fOmRMGAM\nReadyToRunGenericHelperNode diff: arm64-riscv64 https://www.diffchecker.com/TfcdDAF1\n",
                                           "updatedAt":  "2025-02-09T20:49:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dv9tI",
                                           "createdAt":  "2025-02-09T21:00:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFwZtg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-09T21:00:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Thanks, I think it\u0027s the non-generic one. I\u0027ll have to disassemble `__GetThreadStaticBase_S_P_CoreLib_System_Threading_Thread` and check the relocations. (I\u0027m afraid it will have to wait till tomorrow though.)",
                                           "updatedAt":  "2025-02-09T21:00:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dv-Px",
                                           "createdAt":  "2025-02-09T21:02:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Thank you. I will check exception handling in the meanwhile (EH asm helpers were bulk imported without any testing; pretty sure it needs work).",
                                           "updatedAt":  "2025-02-09T21:02:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dv-ob",
                                           "createdAt":  "2025-02-09T21:03:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "~~If I had to make a wild guess then this [code/relocation](https://github.com/dotnet/runtime/blob/34ec4f5f0bf2b67764db8a6413ba9975c41bc35a/src/coreclr/tools/Common/Compiler/DependencyAnalysis/Target_RiscV64/RiscV64Emitter.cs#L100-L111) looks fishy to me. Then again, take that with a big grain of salt.~~",
                                           "updatedAt":  "2025-02-09T21:42:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dwBsH",
                                           "createdAt":  "2025-02-09T21:40:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFxJIQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-10T02:25:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Can you try changing this line:\nhttps://github.com/dotnet/runtime/blob/34ec4f5f0bf2b67764db8a6413ba9975c41bc35a/src/coreclr/tools/Common/Compiler/DependencyAnalysis/Target_RiscV64/RiscV64Emitter.cs#L129\nto `... : 12u;`?\n\nThe assembly you posted earlier contains this:\n```\n=\u003e 0x0000002aaab65238 \u003c__GetThreadStaticBase_S_P_CoreLib_System_Threading_Thread+32\u003e:\tbnez\ta3,0x2aaab65240 \u003c__GetThreadStaticBase_S_P_CoreLib_System_Threading_Thread+40\u003e\n   0x0000002aaab6523c \u003c__GetThreadStaticBase_S_P_CoreLib_System_Threading_Thread+36\u003e:\tauipc\tt4,0x12e\n   0x0000002aaab65240 \u003c__GetThreadStaticBase_S_P_CoreLib_System_Threading_Thread+40\u003e:\tjr\t1716(t4) # 0x2aaac938f0 \u003cS_P_CoreLib_Internal_Runtime_ThreadStatics__GetThreadStaticBaseForType\u003e\n   0x0000002aaab65244 \u003c__GetThreadStaticBase_S_P_CoreLib_System_Threading_Thread+44\u003e:\tauipc\tt4,0x11c\n```\n\nwhich is generated by the code coming from\nhttps://github.com/dotnet/runtime/blob/34ec4f5f0bf2b67764db8a6413ba9975c41bc35a/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/DependencyAnalysis/Target_RiscV64/RiscV64ReadyToRunHelperNode.cs#L65\n\nAccording to the disassembly, the target of the `bnez` instruction seems to be 4 bytes off.",
                                           "updatedAt":  "2025-02-09T21:40:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dww6z",
                                           "createdAt":  "2025-02-10T02:52:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "With that, we get `bnez\ta3,0xbb244 \u003c__GetThreadStaticBase_S_P_CoreLib_System_Threading_Thread+44\u003e` and it fixes the issue with finalizer thread. Hello World exits cleanly. ✅\nhttps://github.com/dotnet/runtime/pull/112331\n\nI\u0027m looking into exception handling next.",
                                           "updatedAt":  "2025-02-10T02:52:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dxxUY",
                                           "createdAt":  "2025-02-10T06:35:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Added `throw new InvalidOperationException(\"testing exceptions\");` after hello world, the exception handling seems to be running into either issue with asm offset or something on libunwind side:\n\n```gdb\n(gdb) b ExceptionHandling.S:347\n(gdb) r\n(gdb) p *(ExInfo *)$a1\n$3 = {m_pPrevExInfo = 0x0, m_pExContext = 0x3fffffeed0, m_exception = 0x0, m_kind = (unknown: 0x1), m_passNumber = 1 \u0027\\001\u0027, m_idxCurClause = 4294967295, m_frameIter = {m_pThread = 0x3fffffebc8, m_pInstance = 0x3fffffebe0, \n    m_FramePointer = 0x2aaac93974 \u003cS_P_CoreLib_Internal_Runtime_ThreadStatics__GetThreadStaticBaseForType+36\u003e, m_ControlPC = 0xaad4005c8, m_RegDisplay = {pR0 = 0x1, pRA = 0xaad4005c8, SP = 274877901816, pGP = 0x3fffffec10, pTP = 0x800000040, \n      pT0 = 0x3fffffec70, pT1 = 0x3fffffec30, pT2 = 0x2aaab6801e \u003cSystemNative_GetNonCryptographicallySecureRandomBytes+28\u003e, pFP = 0x8aac195d4, pS1 = 0x3ff7db77a0, pA0 = 0x3fffffec50, pA1 = 0x2aaab8a3ea \u003cRhGetThreadStaticStorage()+24\u003e, \n      pA2 = 0x1ad400828, pA3 = 0x3ff7db77a0, pA4 = 0x3fffffec58, pA5 = 0x3ff7db77a0, pA6 = 0x3fffffec80, pA7 = 0x2aaab8a3ea \u003cRhGetThreadStaticStorage()+24\u003e, \n      pS2 = 0x2aaac93974 \u003cS_P_CoreLib_Internal_Runtime_ThreadStatics__GetThreadStaticBaseForType+36\u003e, pS3 = 0x3ff7db77a0, pS4 = 0x3fffffeca0, pS5 = 0x2aaab8a3ea \u003cRhGetThreadStaticStorage()+24\u003e, pS6 = 0x3fffffecb0, pS7 = 0x3ff7db77a0, \n      pS8 = 0x3fffffecc0, pS9 = 0x2aaab8a3ea \u003cRhGetThreadStaticStorage()+24\u003e, pS10 = 0x3fffffecd0, pS11 = 0x3ff7db77a0, pT3 = 0x3fffffecc8, pT4 = 0x3ff7db77a0, pT5 = 0x3fffffecf0, pT6 = 0x2aaab8a3ea \u003cRhGetThreadStaticStorage()+24\u003e, \n      IP = 183253940596, F = {274741295008, 274877902072, 183253940764, 274877902088, 274877902112, 183253940596, 45856327112, 1, 45856327112, 274877902136, 183253685732, 180388626496, 274877902200, 183254017624, 45856327704, 0, 274741295008, \n        274877902224, 183252853738, 7201622056, 274741295008, 274877902232, 183253940764, 183253825472, 274877902272, 183253940596, 45856327112, 1, 45856327112, 274877902296, 183253685732, 64}}, m_pCodeManager = 0x3fffffee18, m_methodInfo = {\n      dummyPtrs = {183254017624, 45856327704, 0, 45856327112, 274877902352}, dummyInts = {-1388313144, 10, -4496, 1, -4496, 63, -1429726688, 42}}, m_effectiveSafePointAddress = 0x2aaad38378, \n    m_pConservativeStackRangeLowerBound = 0x2aaac777c0 \u003cS_P_CoreLib_System_IO_TextWriter___cctor\u003e, m_pConservativeStackRangeUpperBound = 0x10, m_dwFlags = 2865240608, m_pNextExInfo = 0xaad402b08, m_pendingFuncletFramePointer = 0xaad400818, \n    m_funcletPtrs = {pS1 = 0x10, pS2 = 0xaad400818, pS3 = 0x0, pS4 = 0x3fffffee80, pS5 = 0x2aaac237c0 \u003cSystem_Console_System_Text_ConsoleEncoding__GetMaxByteCount+32\u003e, pS6 = 0x3fffffeea0, pS7 = 0x3ff7db77a0, pS8 = 0x3fffffeec0, \n      pS9 = 0x2aaab8a3ea \u003cRhGetThreadStaticStorage()+24\u003e, pS10 = 0x3fffffeef8, pS11 = 0x3ff7db77a0, pFP = 0x3fffffeec8}, m_OriginalControlPC = 0x2aaac93a1c \u003cS_P_CoreLib_Internal_Runtime_ThreadStatics__GetUninlinedThreadStaticBaseForType+124\u003e, \n    m_pPreviousTransitionFrame = 0xaad402b6a}, m_notifyDebuggerSP = 0x3fffffeef0}\n(gdb) p *(PAL_LIMITED_CONTEXT *)(((ExInfo *)$a1)-\u003em_pExContext)\n$4 = {FP = 274877902744, RA = 183254068504, A0 = 0, A1 = 0, S1 = 45856363904, S2 = 274877903288, S3 = 45856326920, S4 = 183254378512, S5 = 183252776618, S6 = 274877903304, S7 = 274743680272, S8 = 274743681032, S9 = 183254378512, \n  S10 = 183252558516, S11 = 274877902736, SP = 183254068504, IP = 0, F = {0, 0, 0, 0, 0, 0, 0, 274877902792, 274877902792, 183254222216, 1, 1}}\n```\nlooks legit so far?\n```gdb\n(gdb) c\nContinuing.\n\nThread 1 \"app1\" received signal SIGSEGV, Segmentation fault.\n0x0000002aaac1134c in Registers_REGDISPLAY::setRegister (this=0x3fffffdc90, regNum=9, value=45856364064, location=274877901224) at /runtime/src/coreclr/nativeaot/Runtime/unix/UnwindHelpers.cpp:1293\n1293\t        *pS1 = value;\n\n(gdb) list\n1288\t\n1289\t    case UNW_RISCV_X8:\n1290\t        *pFP = value;\n1291\t        break;\n1292\t    case UNW_RISCV_X9:\n1293\t        *pS1 = value;\n1294\t        break;\n1295\t    case UNW_RISCV_X18:\n1296\t        *pS2 = value;\n1297\t        break;\n\n(gdb) p *(Registers_REGDISPLAY*)this\n$6 = {\u003cREGDISPLAY\u003e = {pR0 = 0x0, pRA = 0x3fffffe968, SP = 274877901312, pGP = 0x0, pTP = 0x0, pT0 = 0x0, pT1 = 0x0, pT2 = 0x0, pFP = 0x3fffffe960, pS1 = 0x0, pA0 = 0x0, pA1 = 0x0, pA2 = 0x0, pA3 = 0x0, pA4 = 0x0, pA5 = 0x0, pA6 = 0x0, \n    pA7 = 0x0, pS2 = 0x0, pS3 = 0x0, pS4 = 0x0, pS5 = 0x0, pS6 = 0x0, pS7 = 0x0, pS8 = 0x0, pS9 = 0x0, pS10 = 0x0, pS11 = 0x0, pT3 = 0x0, pT4 = 0x0, pT5 = 0x0, pT6 = 0x0, IP = 183253853584, F = {0 \u003crepeats 32 times\u003e}}, \u003cNo data fields\u003e}\n```\n\nhere, aside from pRa, pFp and SP, everything is null.\n\nbacktrace:\n```gdb\n(gdb) bt\n#0  0x0000002aaac1134c in Registers_REGDISPLAY::setRegister (this=0x3fffffdc90, regNum=9, value=45856364064, location=274877901224) at /runtime/src/coreclr/nativeaot/Runtime/unix/UnwindHelpers.cpp:1293\n#1  0x0000002aaac11996 in libunwind::DwarfInstructions\u003clibunwind::LocalAddressSpace, Registers_REGDISPLAY\u003e::stepWithDwarf (addressSpace=..., pc=183253853584, fdeStart=183252605136, registers=..., isSignalFrame=@0x3fffffe327: false, \n    stage2=false) at /runtime/src/native/external/llvm-libunwind/src/DwarfInstructions.hpp:287\n#2  0x0000002aaac1164a in UnwindHelpers::StepFrame (regs=0x3fffffe5e0, start_ip=183253853424, format=0, unwind_info=183252605136) at /runtime/src/coreclr/nativeaot/Runtime/unix/UnwindHelpers.cpp:1474\n#3  0x0000002aaac0e7ba in UnixNativeCodeManager::VirtualUnwind (this=0x2aaad51bd0, pMethodInfo=0x3fffffe7f0, pRegisterSet=0x3fffffe5e0) at /runtime/src/coreclr/nativeaot/Runtime/unix/UnixNativeCodeManager.cpp:70\n#4  0x0000002aaac0f164 in UnixNativeCodeManager::UnwindStackFrame (this=0x2aaad51bd0, pMethodInfo=0x3fffffe7f0, flags=3, pRegisterSet=0x3fffffe5e0, ppPreviousTransitionFrame=0x3fffffe8d0)\n    at /runtime/src/coreclr/nativeaot/Runtime/unix/UnixNativeCodeManager.cpp:360\n#5  0x0000002aaab8335e in StackFrameIterator::NextInternal (this=0x3fffffe5c0) at /runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp:1755\n#6  0x0000002aaab831d4 in StackFrameIterator::Next (this=0x3fffffe5c0) at /runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp:1713\n#7  0x0000002aaab83bd4 in StackFrameIterator::Next (this=0x3fffffe5c0, puExCollideClauseIdx=0x0, pfUnwoundReversePInvoke=0x0) at /runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp:2309\n#8  0x0000002aaab83d08 in RhpSfiNext (pThis=0x3fffffe5c0, puExCollideClauseIdx=0x0, pfUnwoundReversePInvoke=0x0, pfIsExceptionIntercepted=0x0) at /runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp:2351\n#9  0x0000002aaac7e6b0 in S_P_CoreLib_System_Runtime_RuntimeExports__RhpCalculateStackTraceWorker (pOutputBuffer=0x0, outputBufferLength=0, addressInCurrentFrame=274877901200)\n    at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/RuntimeExports.cs:321\n#10 0x0000002aaab7ede4 in RhpGetCurrentThreadStackTrace (pOutputBuffer=0x0, outputBufferLength=0, pAddressInCurrentFrame=0x3fffffe990) at /runtime/src/coreclr/nativeaot/Runtime/MiscHelpers.cpp:435\n#11 0x0000002aaac7e5a8 in S_P_CoreLib_System_Runtime_RuntimeExports__RhGetCurrentThreadStackTrace (outputBuffer=...) at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/RuntimeExports.cs:293\n#12 0x0000002aaac8b084 in S_P_CoreLib_System_Diagnostics_StackTrace__InitializeForCurrentThread (this=..., skipFrames=0, needFileInfo=true)\n    at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Diagnostics/StackTrace.NativeAot.cs:21\n#13 0x0000002aaac8b5fc in S_P_CoreLib_System_Diagnostics_StackTrace___ctor_2 (this=..., skipFrames=\u003coptimized out\u003e, fNeedFileInfo=\u003coptimized out\u003e) at /runtime/src/libraries/System.Private.CoreLib/src/System/Diagnostics/StackTrace.cs:75\n#14 0x0000002aaac8b8d0 in S_P_CoreLib_System_Diagnostics_DebugProvider__Fail (this=..., message=..., detailMessage=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Diagnostics/DebugProvider.cs:22\n#15 0x0000002aaac8aa70 in S_P_CoreLib_System_Diagnostics_Debug__Fail_0 (message=..., detailMessage=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Debug.cs:134\n#16 0x0000002aaac8a9b4 in S_P_CoreLib_System_Diagnostics_Debug__Assert_2 (condition=32, message=..., detailMessage=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Debug.cs:98\n#17 0x0000002aaac7ce70 in S_P_CoreLib_System_Runtime_EH__DispatchEx (frameIter=..., exInfo=...) at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/ExceptionHandling.cs:775\n#18 0x0000002aaac7ccec in S_P_CoreLib_System_Runtime_EH__RhThrowEx (exceptionObj=..., exInfo=...) at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/ExceptionHandling.cs:665\n#19 0x0000002aaac18e78 in RhpThrowEx () at /runtime/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S:347\n#20 0x0000002aaacb2d18 in app1_Program___Main__ (args=...) at /app1/Program.cs:3\n#21 0x0000002aaacd8588 in app1__Module___StartupCodeMain () at /runtime/src/coreclr/nativeaot/Common/src/System/Collections/Generic/LowLevelDictionary.cs:287\n#22 0x0000002aaab776ea in main (argc=1, argv=0x3ffffff1b8) at /runtime/src/coreclr/nativeaot/Bootstrap/main.cpp:225\n```",
                                           "updatedAt":  "2025-02-10T06:35:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dzclz",
                                           "createdAt":  "2025-02-10T10:06:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "There\u0027s a `Debug.Assert` on the stack trace which looks a bit suspicious. Otherwise I would expect to reach `void StackFrameIterator::InternalInit(Thread * pThreadToWalk, PTR_PAL_LIMITED_CONTEXT pCtx, uint32_t dwFlags)` from the `RhThrowEx` and initialize the values from there, but it looks the assert happens earlier and this just causes the stack walk for something like `Environment.StackTrace` (which is slightly different code path).",
                                           "updatedAt":  "2025-02-10T10:06:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dzfyW",
                                           "createdAt":  "2025-02-10T10:11:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Perhaps try a breakpoint here and inspect the state:\nhttps://github.com/dotnet/runtime/blob/02f99e5609a45bf8568f3d49a01ee126576fd206/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp#L423",
                                           "updatedAt":  "2025-02-10T10:11:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6d1LNI",
                                           "createdAt":  "2025-02-10T13:16:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "It seems to be returning from line 416 on riscv64 because `GetIP()` returns null and later it fails the assert, while on arm64 it continues. Actually the issue was visible earlier:\n\u003e (gdb) p *(PAL_LIMITED_CONTEXT *)(((ExInfo *)$a1)-\u003em_pExContext)\n\u003e $4 = {FP = 274877902744, RA = 183254068504, A0 = 0, A1 = 0, S1 = 45856363904, S2 = 274877903288, S3 = 45856326920, S4 = 183254378512, S5 = 183252776618, S6 = 274877903304, S7 = 274743680272, S8 = 274743681032, S9 = 183254378512, \n\u003e   S10 = 183252558516, S11 = 274877902736, SP = 183254068504, IP = 0, F = {0, 0, 0, 0, 0, 0, 0, 274877902792, 274877902792, 183254222216, 1, 1}}\n\nwith null IP.\nAt this point, arm64 has:\n\n```gdb\n(gdb) p *(PAL_LIMITED_CONTEXT *)(((ExInfo *)$x1)-\u003em_pExContext)\n$5 = {FP = 281474976707504, LR = 187649985995672, X0 = 0, X1 = 0, X19 = 281474976707992, X20 = 1, X21 = 187649987767024, X22 = 187649984516736, X23 = 281474976708008, X24 = 281474842483544, X25 = 0, X26 = 281474842484736, \n  X27 = 187649987767024, X28 = 0, SP = 281474976707504, IP = 187649985995672, D = {0, 0, 0, 0, 0, 0, 0, 0}}\n```\n\nwith non-null IP. That causes `GetIP()` to return null later.",
                                           "updatedAt":  "2025-02-10T13:16:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6d1x55",
                                           "createdAt":  "2025-02-10T14:15:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Well, that\u0027s constructed by `ALLOC_THROW_FRAME`. We\u0027d need to check the offsets and layout there.",
                                           "updatedAt":  "2025-02-10T14:15:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6d28AK",
                                           "createdAt":  "2025-02-10T15:36:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Sorry, the one in main branch is giving us different, non-zero, values. I forgot that I started rewriting it based on arm64 and it was using t0 instead of a3. Sorry for the confusion. 😅\n\nIt still fails, so I tracked it a bit. When it enters the assembly code, info reg shows this on arm64\n\n```gdb\nThread 1 \"app1\" hit Breakpoint 2, RhpThrowEx () at /__w/1/s/src/coreclr/nativeaot/Runtime/arm64/ExceptionHandling.S:265\n265\t        ALLOC_THROW_FRAME SOFTWARE_EXCEPTION\n(gdb) info reg\nx0             0xffbffa40cc38      281200002387000\nx1             0x80131509          2148734217\nx2             0xffbffa40cc90      281200002387088\nx3             0x0                 0\nx4             0x1                 1\nx5             0xffffffffe9b1      281474976704945\nx6             0x10004157f1c03     281492517231619\nx7             0x16170f12001a1311  1591757563284296465\nx8             0xfffff7fee790      281474842421136\nx9             0xfffffffff238      281474976707128\nx10            0x0                 0\nx11            0xaaaaaadf8130      187649987936560\nx12            0xffbffa000000      281199998140416\nx13            0xffbffa40d090      281200002388112\nx14            0xffbffa40cc48      281200002387016\nx15            0xaaaaaadf4aa8      187649987922600\nx16            0x98d68b25          2564197157\nx17            0xffbffa800000      281200006529024\nx18            0x4                 4\nx19            0xfffffffff598      281474976707992\nx20            0x1                 1\nx21            0xaaaaaadceaf0      187649987767024\nx22            0xaaaaaaab5280      187649984516736\nx23            0xfffffffff5a8      281474976708008\nx24            0xfffff7ffdb58      281474842483544\nx25            0x0                 0\nx26            0xfffff7ffe000      281474842484736\nx27            0xaaaaaadceaf0      187649987767024\nx28            0x0                 0\nx29            0xfffffffff3b0      281474976707504\nx30            0xaaaaaac1e398      187649985995672\nsp             0xfffffffff3b0      0xfffffffff3b0\npc             0xaaaaaab0b370      0xaaaaaab0b370 \u003cRhpThrowEx\u003e\ncpsr           0x20201000          [ EL=0 BTYPE=0 SSBS SS C ]\nfpsr           0x8000010           [ IXC QC ]\nfpcr           0x0                 [ Len=0 Stride=0 RMode=0 ]\ntpidr          0xfffff7fee760      0xfffff7fee760\ntpidr2         0x0                 0x0\npauth_dmask    0x7f000000000000    35747322042253312\npauth_cmask    0x7f000000000000    35747322042253312\n```\n\nso x30 will become IP later by the time we are at the call:\n\n```gdb\nThread 1 \"app1\" hit Breakpoint 3, RhpThrowEx () at /__w/1/s/src/coreclr/nativeaot/Runtime/arm64/ExceptionHandling.S:333\n333\t        bl          C_FUNC(RhThrowEx)\n(gdb) b ExceptionHandling.cpp:265Quit\n(gdb) p *(PAL_LIMITED_CONTEXT *)(((ExInfo *)$x1)-\u003em_pExContext)\n$1 = {FP = 281474976707504, LR = 187649985995672, X0 = 0, X1 = 0, X19 = 281474976707992, X20 = 1, X21 = 187649987767024, X22 = 187649984516736, X23 = 281474976708008, X24 = 281474842483544, X25 = 0, X26 = 281474842484736, \n  X27 = 187649987767024, X28 = 0, SP = 281474976707504, IP = 187649985995672, D = {0, 0, 0, 0, 0, 0, 0, 0}}\n```\n\nnow same in riscv64, when it enters asm stub, info reg looks like\n\n```gdb\nRhpThrowEx () at /runtime/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S:316\n316\t        ALLOC_THROW_FRAME SOFTWARE_EXCEPTION\n(gdb) info reg\nra             0x2aaacb2cf8\t0x2aaacb2cf8 \u003capp1_Program___Main__+104\u003e\nsp             0x3fffffef90\t0x3fffffef90\ngp             0x2aaaaaa800\t0x2aaaaaa800\ntp             0x3ff7db7780\t0x3ff7db7780\nt0             0x9abcdef012345678\t-7296712173568108936\nt1             0x2aaacfd39c\t183254373276\nt2             0x2aaad02c08\t183254395912\nfp             0x3fffffef98\t0x3fffffef98\ns1             0xaad409580\t45856363904\na0             0xaad409580\t45856363904\na1             0x2aaac18d9a\t183253437850\na2             0x2aaac41540\t183253603648\na3             0x0\t0\na4             0x1\t1\na5             0x3ff7db7780\t274741294976\na6             0x3ff7db7128\t274741293352\na7             0x40\t64\ns2             0x3ffffff1b8\t274877903288\ns3             0xaad400508\t45856326920\ns4             0x2aaacfe7f0\t183254378480\ns5             0x2aaab77652\t183252776530\ns6             0x3ffffff1c8\t274877903304\ns7             0x3ff7ffdd10\t274743680272\ns8             0x3ff7ffe008\t274743681032\ns9             0x2aaacfe7f0\t183254378480\ns10            0x2aaab422b4\t183252558516\ns11            0x2aaabd9798\t183253178264\nt3             0xaad409590\t45856363920\nt4             0x2aaad350e0\t183254601952\nt5             0x3fffffe840\t274877900864\nt6             0x2aaad02c10\t183254395920\npc             0x2aaac18d9a\t0x2aaac18d9a \u003cRhpThrowEx\u003e\n```\nand by the time it reaches the call:\n\n```gdb\nThread 1 \"app1\" hit Breakpoint 3, RhpThrowEx () at /runtime/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S:374\n374\t        call C_FUNC(RhThrowEx)\n\n(gdb) p *(PAL_LIMITED_CONTEXT *)(((ExInfo *)$a1)-\u003em_pExContext)\n$1 = {FP = 274877902744, RA = 183254068472, A0 = 0, A1 = 0, S1 = 45856363904, S2 = 274877903288, S3 = 45856326920, S4 = 183254378480, S5 = 183252776530, S6 = 274877903304, S7 = 274743680272, S8 = 274743681032, S9 = 183254378480, \n  S10 = 183252558516, S11 = 183253178264, SP = 274877903184, IP = 274741462972, F = {524288, 274877903288, 1, 183252776530, 274741462922, 274877903184, 274877903288, 1, 0, 183254378480, 183252776530, 274877903304}}\n```\n\nas we can see `ra` is not assigned to `m_pExContext.IP` akin to x30-\u003eIP handling in arm64\u0027s case. So it\u0027s most likely asm offset issue?",
                                           "updatedAt":  "2025-02-10T15:38:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6d4Yvk",
                                           "createdAt":  "2025-02-10T17:50:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "I have double checked `ExInfo` and `RuntimeThreadLocals` offsets, they look fine.\n\n```gdb\n# gdb script to verify offsets in src/coreclr/nativeaot/Runtime/riscv64/AsmOffsetsCpu.h and\n# src/coreclr/nativeaot/Runtime/AsmOffsets.h\n\np/x sizeof(ExInfo)\np/x (char*)\u0026((ExInfo*)$a1)-\u003em_pPrevExInfo - (char*)(ExInfo*)$a1\np/x (char*)\u0026((ExInfo*)$a1)-\u003em_pExContext - (char*)(ExInfo*)$a1\np/x (char*)\u0026((ExInfo*)$a1)-\u003em_exception - (char*)(ExInfo*)$a1\np/x (char*)\u0026((ExInfo*)$a1)-\u003em_kind - (char*)(ExInfo*)$a1\np/x (char*)\u0026((ExInfo*)$a1)-\u003em_passNumber - (char*)(ExInfo*)$a1\np/x (char*)\u0026((ExInfo*)$a1)-\u003em_idxCurClause - (char*)(ExInfo*)$a1\np/x (char*)\u0026((ExInfo*)$a1)-\u003em_frameIter - (char*)(ExInfo*)$a1\np/x (char*)\u0026((ExInfo*)$a1)-\u003em_notifyDebuggerSP - (char*)(ExInfo*)$a1\n\np/x sizeof(RuntimeThreadLocals)\np/x (char*)\u0026((RuntimeThreadLocals*)$a1)-\u003em_eeAllocContext - (char*)(RuntimeThreadLocals*)$a1\np/x (char*)\u0026((RuntimeThreadLocals*)$a1)-\u003em_ThreadStateFlags - (char*)(RuntimeThreadLocals*)$a1\np/x (char*)\u0026((RuntimeThreadLocals*)$a1)-\u003em_pTransitionFrame - (char*)(RuntimeThreadLocals*)$a1\np/x (char*)\u0026((RuntimeThreadLocals*)$a1)-\u003em_pDeferredTransitionFrame - (char*)(RuntimeThreadLocals*)$a1\np/x (char*)\u0026((RuntimeThreadLocals*)$a1)-\u003em_ppvHijackedReturnAddressLocation - (char*)(RuntimeThreadLocals*)$a1\np/x (char*)\u0026((RuntimeThreadLocals*)$a1)-\u003em_pvHijackedReturnAddress - (char*)(RuntimeThreadLocals*)$a1\np/x (char*)\u0026((RuntimeThreadLocals*)$a1)-\u003em_pExInfoStackHead - (char*)(RuntimeThreadLocals*)$a1\np/x (char*)\u0026((RuntimeThreadLocals*)$a1)-\u003em_threadAbortException - (char*)(RuntimeThreadLocals*)$a1\n```\n\nLooks like this:\nhttps://github.com/dotnet/runtime/blob/cc74292fb04d03b4fc91df200fab3da50654d64a/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S#L7\nshould probably be 8 bytes aligned instead of 16:\n```asm\n#define STACKSIZEOF_ExInfo ((SIZEOF__ExInfo + 7) \u0026 ~7)\n```\n\nbut it\u0027s fine since 0x340 is both 16 and 8 bytes aligned so it does not change the value.\n\nSo far, no idea why IP != RA at `ExceptionHandling.S:374`.",
                                           "updatedAt":  "2025-02-10T21:31:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eULRR",
                                           "createdAt":  "2025-02-13T10:02:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "The `PROLOG_SAVE_REG_PAIR_INDEXED` macro is a bit inconsistent between platforms but I think you used a wrong sign for the last parameter in `ALLOC_THROW_FRAME` so it ends up writing the second part of `PAL_LIMITED_CONTEXT` in wrong location and the first part is thus completely lost.",
                                           "updatedAt":  "2025-02-13T10:02:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eVG6l",
                                           "createdAt":  "2025-02-13T11:38:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGQCjA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-13T11:56:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "After fixing the `PROLOG_SAVE_REG_PAIR_INDEXED` offset sign I can throw and catch software exception in my ad-hoc test app:\n```csharp\n        try\n        {\n            Console.WriteLine(\"Hello world!\");\n            throw new NotSupportedException();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(\"Hello exception\");\n            Environment.FailFast(\"FOO\");\n        }\n```\nOutput:\n```\nHello world!\nHello exception\nProcess terminated. FOO\nSegmentation fault (core dumped)\n```\n\nGetting the stack trace (eg. `e.ToString()`) will need more fixes, but this is a good start:\n```\n--------------------------------------------------\nDebug Assertion Violation\n\nMessage: unsupported RISC-V register\n\nExpression: \u0027ASSERT_UNCONDITIONALLY\u0027\n\nFile: /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/unix/UnwindHelpers.cpp, Line: 1251\n```",
                                           "updatedAt":  "2025-02-13T11:53:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eVTQE",
                                           "createdAt":  "2025-02-13T12:00:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGQGwg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-13T12:06:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "There\u0027s actually multiple bugs in `Registers_REGDISPLAY` implementation. It lack support for SP/X2 register and overwrites values instead of recording locations.",
                                           "updatedAt":  "2025-02-13T12:00:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eVbyS",
                                           "createdAt":  "2025-02-13T12:14:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGQLxA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-13T12:17:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "It doesn\u0027t get much further, but this should help us make a bit of a progress:\n```diff\ndiff --git a/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S b/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S\n@@ -44,7 +44,7 @@\n     fsd  fs10, 0x60(sp)\n     fsd  fs11, 0x68(sp)\n \n-    PROLOG_SAVE_REG_PAIR_INDEXED  fp, ra, 0x78\n+    PROLOG_SAVE_REG_PAIR_INDEXED  fp, ra, -0x78\n \n     sd  zero, 0x10(sp)        // locations reserved for return value, not used for exception handling\n     sd  zero, 0x18(sp)\ndiff --git a/src/coreclr/nativeaot/Runtime/unix/UnwindHelpers.cpp b/src/coreclr/nativeaot/Runtime/unix/UnwindHelpers.cpp\nindex e387f3440e3..d49b28fdcfc 100644\n--- a/src/coreclr/nativeaot/Runtime/unix/UnwindHelpers.cpp\n+++ b/src/coreclr/nativeaot/Runtime/unix/UnwindHelpers.cpp\n@@ -1142,6 +1142,8 @@ inline uint64_t Registers_REGDISPLAY::getRegister(int regNum) const {\n     switch (regNum) {\n     case UNW_RISCV_X1:\n         return *pRA;\n+    case UNW_RISCV_X2:\n+        return SP;\n     case UNW_RISCV_X3:\n         return *pGP;\n     case UNW_RISCV_X4:\n@@ -1256,59 +1258,62 @@ void Registers_REGDISPLAY::setRegister(int regNum, uint64_t value, uint64_t loca\n {\n     switch (regNum) {\n     case UNW_RISCV_X1:\n-        *pRA = value;\n+        pRA = (PTR_uintptr_t)location;\n+        break;\n+    case UNW_RISCV_X2:\n+        SP = value;\n         break;\n     case UNW_RISCV_X3:\n-        *pGP = value;\n+        pGP = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X4:\n-        *pTP = value;\n+        pTP = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X5:\n-        *pT0 = value;\n+        pT0 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X6:\n-        *pT1 = value;\n+        pT1 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X7:\n-        *pT2 = value;\n+        pT2 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X28:\n-        *pT3 = value;\n+        pT3 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X29:\n-        *pT4 = value;\n+        pT4 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X30:\n-        *pT5 = value;\n+        pT5 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X31:\n-        *pT6 = value;\n+        pT6 = (PTR_uintptr_t)location;\n         break;\n \n     case UNW_RISCV_X8:\n-        *pFP = value;\n+        pFP = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X9:\n-        *pS1 = value;\n+        pS1 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X18:\n-        *pS2 = value;\n+        pS2 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X19:\n-        *pS3 = value;\n+        pS3 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X20:\n-        *pS4 = value;\n+        pS4 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X21:\n-        *pS5 = value;\n+        pS5 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X22:\n-        *pS6 = value;\n+        pS6 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X23:\n-        *pS7 = value;\n+        pS7 = (PTR_uintptr_t)location;\n         break;\n \n     // Add other general-purpose registers if needed\n```",
                                           "updatedAt":  "2025-02-13T12:14:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eV1YZ",
                                           "createdAt":  "2025-02-13T12:57:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "`RhpNewObject` corrupts the frame pointer needed for unwinding:\nhttps://github.com/dotnet/runtime/blob/953bc61ba9fc14dd1031ce83fc2700c7129042ac/src/coreclr/nativeaot/Runtime/riscv64/AllocFast.S#L246\n\nWe need to use one of the saved registers, such as `s2`.",
                                           "updatedAt":  "2025-02-13T12:57:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eV3Og",
                                           "createdAt":  "2025-02-13T13:00:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Thanks @filipnavara!\n\nIt required some additional cases:\n\n```diff\ndiff --git a/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S b/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S\nindex ff20aeb736c..65a14ae1c49 100644\n--- a/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S\n+++ b/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S\n@@ -4,7 +4,7 @@\n #include \u003cunixasmmacros.inc\u003e\n #include \"AsmOffsets.inc\"\n \n-#define STACKSIZEOF_ExInfo ((SIZEOF__ExInfo + 15)\u0026(~15))\n+#define STACKSIZEOF_ExInfo ((SIZEOF__ExInfo + 7) \u0026 ~7)\n \n #define HARDWARE_EXCEPTION 1\n #define SOFTWARE_EXCEPTION 0\n@@ -44,7 +44,7 @@\n     fsd  fs10, 0x60(sp)\n     fsd  fs11, 0x68(sp)\n \n-    PROLOG_SAVE_REG_PAIR_INDEXED  fp, ra, 0x78\n+    PROLOG_SAVE_REG_PAIR_INDEXED  fp, ra, -0x78\n \n     sd  zero, 0x10(sp)        // locations reserved for return value, not used for exception handling\n     sd  zero, 0x18(sp)\ndiff --git a/src/coreclr/nativeaot/Runtime/unix/UnwindHelpers.cpp b/src/coreclr/nativeaot/Runtime/unix/UnwindHelpers.cpp\nindex e387f3440e3..f71a4b1338a 100644\n--- a/src/coreclr/nativeaot/Runtime/unix/UnwindHelpers.cpp\n+++ b/src/coreclr/nativeaot/Runtime/unix/UnwindHelpers.cpp\n@@ -1140,8 +1140,13 @@ bool Registers_REGDISPLAY::validVectorRegister(int num) const\n \n inline uint64_t Registers_REGDISPLAY::getRegister(int regNum) const {\n     switch (regNum) {\n+    case UNW_REG_IP:\n+        return IP;\n     case UNW_RISCV_X1:\n         return *pRA;\n+    case UNW_REG_SP:\n+    case UNW_RISCV_X2:\n+        return SP;\n     case UNW_RISCV_X3:\n         return *pGP;\n     case UNW_RISCV_X4:\n@@ -1255,60 +1260,79 @@ inline uint64_t Registers_REGDISPLAY::getRegister(int regNum) const {\n void Registers_REGDISPLAY::setRegister(int regNum, uint64_t value, uint64_t location)\n {\n     switch (regNum) {\n+    case UNW_REG_IP:\n+        IP = (uintptr_t)value;\n+        break;\n     case UNW_RISCV_X1:\n-        *pRA = value;\n+        pRA = (PTR_uintptr_t)location;\n+        break;\n+    case UNW_REG_SP:\n+    case UNW_RISCV_X2:\n+        SP = (uintptr_t)value;\n         break;\n     case UNW_RISCV_X3:\n-        *pGP = value;\n+        pGP = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X4:\n-        *pTP = value;\n+        pTP = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X5:\n-        *pT0 = value;\n+        pT0 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X6:\n-        *pT1 = value;\n+        pT1 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X7:\n-        *pT2 = value;\n+        pT2 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X28:\n-        *pT3 = value;\n+        pT3 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X29:\n-        *pT4 = value;\n+        pT4 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X30:\n-        *pT5 = value;\n+        pT5 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X31:\n-        *pT6 = value;\n+        pT6 = (PTR_uintptr_t)location;\n         break;\n \n     case UNW_RISCV_X8:\n-        *pFP = value;\n+        pFP = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X9:\n-        *pS1 = value;\n+        pS1 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X18:\n-        *pS2 = value;\n+        pS2 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X19:\n-        *pS3 = value;\n+        pS3 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X20:\n-        *pS4 = value;\n+        pS4 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X21:\n-        *pS5 = value;\n+        pS5 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X22:\n-        *pS6 = value;\n+        pS6 = (PTR_uintptr_t)location;\n         break;\n     case UNW_RISCV_X23:\n-        *pS7 = value;\n+        pS7 = (PTR_uintptr_t)location;\n+        break;\n+    case UNW_RISCV_X24:\n+        pS8 = (PTR_uintptr_t)location;\n+        break;\n+    case UNW_RISCV_X25:\n+        pS9 = (PTR_uintptr_t)location;\n+        break;\n+    case UNW_RISCV_X26:\n+        pS10 = (PTR_uintptr_t)location;\n+        break;\n+    case UNW_RISCV_X27:\n+        pS11 = (PTR_uintptr_t)location;\n         break;\n \n     // Add other general-purpose registers if needed\n```\n\nNow it gives us:\n\n```\nHello world!\nHello exception: System.NotSupportedException: Specified method is not supported.\n   at Program.\u003cMain\u003e$(String[] args) + 0x88\nProcess terminated. FOO\n--------------------------------------------------\nDebug Assertion Violation\n\nExpression: \u0027m_pInstance-\u003eIsManaged(m_ControlPC) \u0026\u0026 \"unwind from funclet invoke stub failed\"\u0027\n\nFile: /runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp, Line: 1345\n--------------------------------------------------\nAborted (core dumped)\n```\n\nfor\n\n```c#\ntry\n{\n    Console.WriteLine(\"Hello world!\");\n    throw new NotSupportedException();\n}\ncatch (Exception e)\n{\n    Console.WriteLine($\"Hello exception: {e}\");\n    Environment.FailFast(\"FOO\");\n}\n```",
                                           "updatedAt":  "2025-02-13T13:00:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eV9mS",
                                           "createdAt":  "2025-02-13T13:11:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Under gdb:\n\n```gdb\nThread 1 \"app1\" hit Breakpoint 1, StackFrameIterator::UnwindFuncletInvokeThunk (this=0x3fffffe350) at /runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp:1345\n1345\t    ASSERT(m_pInstance-\u003eIsManaged(m_ControlPC) \u0026\u0026 \"unwind from funclet invoke stub failed\");\n(gdb) bt\n#0  StackFrameIterator::UnwindFuncletInvokeThunk (this=0x3fffffe350) at /runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp:1345\n#1  0x0000002aaab8363c in StackFrameIterator::NextInternal (this=0x3fffffe350) at /runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp:1820\n#2  0x0000002aaab832c8 in StackFrameIterator::Next (this=0x3fffffe350) at /runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp:1713\n#3  0x0000002aaab83cc8 in StackFrameIterator::Next (this=0x3fffffe350, puExCollideClauseIdx=0x0, pfUnwoundReversePInvoke=0x0) at /runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp:2309\n#4  0x0000002aaab83dfc in RhpSfiNext (pThis=0x3fffffe350, puExCollideClauseIdx=0x0, pfUnwoundReversePInvoke=0x0, pfIsExceptionIntercepted=0x0) at /runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp:2351\n#5  0x0000002aaac7e9f4 in S_P_CoreLib_System_Runtime_RuntimeExports__RhpCalculateStackTraceWorker (pOutputBuffer=0x0, outputBufferLength=0, addressInCurrentFrame=274877900576)\n    at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/RuntimeExports.cs:334\n#6  0x0000002aaab7eed8 in RhpGetCurrentThreadStackTrace (pOutputBuffer=0x0, outputBufferLength=0, pAddressInCurrentFrame=0x3fffffe720) at /runtime/src/coreclr/nativeaot/Runtime/MiscHelpers.cpp:435\n#7  0x0000002aaac7e888 in S_P_CoreLib_System_Runtime_RuntimeExports__RhGetCurrentThreadStackTrace (outputBuffer=...) at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/RuntimeExports.cs:293\n#8  0x0000002aaac8b364 in S_P_CoreLib_System_Diagnostics_StackTrace__InitializeForCurrentThread (this=..., skipFrames=0, needFileInfo=false)\n    at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Diagnostics/StackTrace.NativeAot.cs:21\n#9  0x0000002aaac8b864 in S_P_CoreLib_System_Diagnostics_StackTrace___ctor (this=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Diagnostics/StackTrace.cs:42\n#10 0x0000002aaac334a0 in S_P_CoreLib_System_RuntimeExceptionHelpers__FailFast (message=..., exception=..., errorSource=..., reason=EnvironmentFailFast, pExAddress=0, pExContext=274741290880)\n    at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/RuntimeExceptionHelpers.cs:238\n#11 0x0000002aaac29590 in S_P_CoreLib_System_Environment__FailFast (message=...) at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Environment.NativeAot.cs:40\n#12 0x0000002aaacb316c in app1_Program___Main__ (args=...) at /app1/Program.cs:9\n#13 0x0000002aaac192e6 in RhpCallCatchFunclet () at /runtime/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S:506\n#14 0x0000002aaacd8a08 in app1__Module___StartupCodeMain () at /runtime/src/coreclr/nativeaot/Common/src/System/Collections/Generic/LowLevelDictionary.cs:287\n#15 0x0000002aaab777de in main (argc=1, argv=0x3ffffff188) at /runtime/src/coreclr/nativeaot/Bootstrap/main.cpp:225\n(gdb) p m_ControlPC\n$1 = (PTR_VOID) 0x3f00000000\n```",
                                           "updatedAt":  "2025-02-13T13:11:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eWB3C",
                                           "createdAt":  "2025-02-13T13:16:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "That\u0027s possibly not too surprising. `RhpCallCatchFunclet` saves 12 FP registers, `UnwindFuncletInvokeThunk` tries to read 32. There may be some other discrepancies in the layout.",
                                           "updatedAt":  "2025-02-13T13:16:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eWJ_l",
                                           "createdAt":  "2025-02-13T13:30:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Ah, arm64 and loongarch64 have `i \u003c 8`, changing it to 8 in riscv64 didn\u0027t fix the error but something we should align while at it.",
                                           "updatedAt":  "2025-02-13T13:30:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eWhvK",
                                           "createdAt":  "2025-02-13T14:07:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Can you start a new branch with the fixes? I\u0027m starting to get lost with the number of changes... :) \n\nNot sure if you saw https://github.com/dotnet/runtime/issues/106223#issuecomment-2656523801; It\u0027s a two line change. It may affect NAOT unwinds, but it surely affects the unwinding in debugger over allocation calls. `.cfi_def_cfa  sp, \\ssize` in PROLOG_SAVE_REG_PAIR_INDEXED also looks wrong, the `.cfi_adjust_cfa_offset  -\\ssize` directive should be enough.",
                                           "updatedAt":  "2025-02-13T14:07:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eXCr3",
                                           "createdAt":  "2025-02-13T14:50:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGRpxQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-13T15:19:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "I have pushed the first fragments to https://github.com/am11/runtime/tree/feature/nativeaot/riscv64-port, you can push to the branch (you are already a collaborator in my fork 😅).",
                                           "updatedAt":  "2025-02-13T14:50:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eYAin",
                                           "createdAt":  "2025-02-13T16:14:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGSLgw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-13T16:18:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Ah, arm64 and loongarch64 have `i \u003c 8`, changing it to 8 in riscv64 didn\u0027t fix the error but something we should align while at it.\n\nIt should be 12, not 8, on RISC-V. I\u0027ll give it a try on device when I get home.",
                                           "updatedAt":  "2025-02-13T16:14:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eYNAZ",
                                           "createdAt":  "2025-02-13T16:31:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Maybe I\u0027m reading it wrong, but are they in sync on other archs? `ALLOC_THROW_FRAME` accounts for d8-d15 on arm64 and f24-f31 on loongarch64, yet they both have:\n\n```c++\nvoid StackFrameIterator::UnwindFuncletInvokeThunk()\n{\n...\n    PTR_uint64_t d = (PTR_uint64_t)(m_RegDisplay.SP);\n\n    for (int i = 0; i \u003c 8; i++)\n    {\n        m_RegDisplay.D[i] = *d++;\n    }\n```\nShould we try to sync riscv64 with them (unless the difference there is by-design)?",
                                           "updatedAt":  "2025-02-13T16:31:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eYRVW",
                                           "createdAt":  "2025-02-13T16:38:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGSb_w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-13T16:49:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "There\u0027s an ABI difference in which FP registers are callee saved. In RISC-V ABI it\u0027s f8, f9 and f18-f27.",
                                           "updatedAt":  "2025-02-13T16:39:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eYdq9",
                                           "createdAt":  "2025-02-13T16:57:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Ah, that rings a bell, read similar discussion recently https://github.com/dotnet/runtime/pull/112267#discussion_r1946385118 ✌",
                                           "updatedAt":  "2025-02-13T16:57:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eYiwf",
                                           "createdAt":  "2025-02-13T17:05:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Pushed a commit to branch and it\u0027s fixed! 😎\n\n```\nHello world!\nHello exception: System.NotSupportedException: Specified method is not supported.\n   at Program.\u003cMain\u003e$(String[] args) + 0x88\nProcess terminated. FOO\n   at System.RuntimeExceptionHelpers.FailFast(String, Exception, String, RhFailFastReason, IntPtr, IntPtr) + 0x270\n   at System.Environment.FailFast(String) + 0x30\n   at Program.\u003cMain\u003e$(String[] args) + 0x1ec\nAborted (core dumped)\n```\n\nWe can run smoke tests next? (unless it\u0027s too soon 👀)",
                                           "updatedAt":  "2025-02-13T17:05:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eYkyp",
                                           "createdAt":  "2025-02-13T17:09:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGSqSw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-13T17:17:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I\u0027ll try and push the small fixes I have locally.",
                                           "updatedAt":  "2025-02-13T17:09:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eYt99",
                                           "createdAt":  "2025-02-13T17:24:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGTArw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-13T18:04:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Pushed a commit to branch and it\u0027s fixed! 😎\n\nKinda... :) It\u0027s still **likely** saving and restoring wrong set of FP registers... but at least it\u0027s the same set between `RhpCallFilterFunclet` and `UnwindFuncletInvokeThunk`. I\u0027ll need to re-read the code to confirm. However, first I would like to get my local environment in shape so I can reach the same checkpoint as you did.",
                                           "updatedAt":  "2025-02-13T17:24:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eZR-k",
                                           "createdAt":  "2025-02-13T18:34:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Are you using source-built SDK on device to build runtime? How much effort was it to switch to preview 1 SDK in global.json? If you could share that patch, I will also switch from this cross-build setup to on-device one. Getting cross-build for community platforms to work with smoke tests requires more infra work.\n\nIf you get to that point first with on-device build, please try building smoke tests to get the test stats. :)",
                                           "updatedAt":  "2025-02-13T18:34:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eZWFK",
                                           "createdAt":  "2025-02-13T18:43:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGTbiA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-13T19:04:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Are you using source-built SDK on device to build runtime? How much effort was it to switch to preview 1 SDK in global.json?\n\nYes; not easy, there are some quirks and dependency on https://github.com/dotnet/runtime/pull/112357.",
                                           "updatedAt":  "2025-02-13T18:43:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ecOGr",
                                           "createdAt":  "2025-02-14T03:44:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Copied some of the smoke test code to standalone console app, it failed here:\n\nhttps://github.com/dotnet/runtime/blob/eb99e9380129ff621132e6c60113793804713860/src/tests/readytorun/tests/generics.cs#L1669\n\n`/app1/Program.cs:4300` was https://gist.github.com/am11/8891138bf45f6fd1d7274a32165a0893 (basically all .cs files referenced in src/tests/nativeaot/SmokeTests/Determinism/Determinism.csproj combined into a single file). It doesn\u0027t fail if we call the Run() method of `class TestSimpleGVMScenarios` in isolated repro. It\u0027s just where GC suspension issue shows up on my machine.\n\nbacktrace:\n\n```gdb\nThread 1 \"app1\" received signal SIGSEGV, Segmentation fault.\n0x0000002aaac5d044 in WKS::GCHeap::Promote (ppObject=0x0, sc=0x3fffffe308, flags=0) at /runtime/src/coreclr/gc/gc.cpp:49916\n49916\t    uint8_t* o = (uint8_t*)*ppObject;\n(gdb) bt\n#0  0x0000002aaac5d044 in WKS::GCHeap::Promote (ppObject=0x0, sc=0x3fffffe308, flags=0) at /runtime/src/coreclr/gc/gc.cpp:49916\n#1  0x0000002aaac0f43c in GcEnumObject (ppObj=0x0, flags=0, fnGcEnumRef=0x2aaac5d018 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pSc=0x3fffffe308) at /runtime/src/coreclr/nativeaot/Runtime/GcEnum.cpp:81\n#2  0x0000002aaac0f634 in EnumGcRefsCallback (hCallback=0x3fffffd9d0, pObject=0x0, flags=0) at /runtime/src/coreclr/nativeaot/Runtime/GcEnum.cpp:122\n#3  0x0000002aaaca09dc in GcInfoDecoder::ReportRegisterToGC (this=0x3fffffd8f8, regNum=9, gcFlags=0, pRD=0x3fffffdb40, flags=0, pCallBack=0x2aaac0f604 \u003cEnumGcRefsCallback(void*, void**, unsigned int)\u003e, hCallBack=0x3fffffd9d0)\n    at /runtime/src/coreclr/nativeaot/Runtime/./../../vm/gcinfodecoder.cpp:2087\n#4  0x0000002aaac9f6cc in GcInfoDecoder::ReportSlotToGC (this=0x3fffffd8f8, slotDecoder=..., slotIndex=0, pRD=0x3fffffdb40, reportScratchSlots=false, inputFlags=0, pCallBack=0x2aaac0f604 \u003cEnumGcRefsCallback(void*, void**, unsigned int)\u003e, \n    hCallBack=0x3fffffd9d0) at /runtime/src/coreclr/nativeaot/Runtime/./../../inc/gcinfodecoder.h:710\n#5  0x0000002aaac9b2de in GcInfoDecoder::EnumerateLiveSlots (this=0x3fffffd8f8, pRD=0x3fffffdb40, reportScratchSlots=false, inputFlags=0, pCallBack=0x2aaac0f604 \u003cEnumGcRefsCallback(void*, void**, unsigned int)\u003e, hCallBack=0x3fffffd9d0)\n    at /runtime/src/coreclr/nativeaot/Runtime/./../../vm/gcinfodecoder.cpp:860\n#6  0x0000002aaaca12fa in UnixNativeCodeManager::EnumGcRefs (this=0x2aaaf0dbd0, pMethodInfo=0x3fffffdd50, safePointAddress=0x2aaad0ea7c \u003cS_P_CoreLib_System_Text_StringBuilder___ctor+60\u003e, pRegisterSet=0x3fffffdb40, hCallback=0x3fffffd9d0, \n    isActiveStackFrame=false) at /runtime/src/coreclr/nativeaot/Runtime/unix/UnixNativeCodeManager.cpp:237\n#7  0x0000002aaac0f5e4 in EnumGcRefs (pCodeManager=0x2aaaf0dbd0, pMethodInfo=0x3fffffdd50, safePointAddress=0x2aaad0ea7c \u003cS_P_CoreLib_System_Text_StringBuilder___ctor+60\u003e, pRegisterSet=0x3fffffdb40, \n    pfnEnumCallback=0x2aaac5d018 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pvCallbackData=0x3fffffe308, isActiveStackFrame=false) at /runtime/src/coreclr/nativeaot/Runtime/GcEnum.cpp:139\n#8  0x0000002aaac1b1ac in Thread::GcScanRootsWorker (this=0x3ff7db67a0, pfnEnumCallback=0x2aaac5d018 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pvCallbackData=0x3fffffe308, frameIterator=...)\n    at /runtime/src/coreclr/nativeaot/Runtime/thread.cpp:519\n#9  0x0000002aaac1af32 in Thread::GcScanRoots (this=0x3ff7db67a0, pfnEnumCallback=0x2aaac5d018 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pvCallbackData=0x3fffffe308) at /runtime/src/coreclr/nativeaot/Runtime/thread.cpp:419\n#10 0x0000002aaac0dc98 in GCToEEInterface::GcScanRoots (fn=0x2aaac5d018 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, condemned=0, max_gen=2, sc=0x3fffffe308) at /runtime/src/coreclr/nativeaot/Runtime/gcenv.ee.cpp:122\n#11 0x0000002aaac854dc in GCScan::GcScanRoots (fn=0x2aaac5d018 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, condemned=0, max_gen=2, sc=0x3fffffe308) at /runtime/src/coreclr/gc/gcscan.cpp:154\n#12 0x0000002aaac45ab6 in WKS::gc_heap::mark_phase (condemned_gen_number=0) at /runtime/src/coreclr/gc/gc.cpp:30249\n#13 0x0000002aaac4208c in WKS::gc_heap::gc1 () at /runtime/src/coreclr/gc/gc.cpp:22694\n#14 0x0000002aaac538de in WKS::gc_heap::garbage_collect (n=0) at /runtime/src/coreclr/gc/gc.cpp:24866\n#15 0x0000002aaac3a43a in WKS::GCHeap::GarbageCollectGeneration (this=0x2aaaf08190, gen=0, reason=reason_alloc_soh) at /runtime/src/coreclr/gc/gc.cpp:51499\n#16 0x0000002aaac3bd0c in WKS::gc_heap::trigger_gc_for_alloc (gen_number=0, gr=reason_alloc_soh, msl=0x2aaae82410 \u003cWKS::gc_heap::more_space_lock_soh\u003e, loh_p=false, take_state=WKS::mt_try_budget) at /runtime/src/coreclr/gc/gc.cpp:19191\n#17 0x0000002aaac3cd1e in WKS::gc_heap::try_allocate_more_space (acontext=0x3ff7db67a8, size=56, flags=0, gen_number=0) at /runtime/src/coreclr/gc/gc.cpp:19329\n#18 0x0000002aaac3ce9a in WKS::gc_heap::allocate_more_space (acontext=0x3ff7db67a8, size=56, flags=0, alloc_generation_number=0) at /runtime/src/coreclr/gc/gc.cpp:19829\n#19 0x0000002aaac7b422 in WKS::gc_heap::allocate (jsize=56, acontext=0x3ff7db67a8, flags=0) at /runtime/src/coreclr/gc/gc.cpp:19860\n#20 WKS::GCHeap::Alloc (this=0x2aaaf08190, context=0x3ff7db67a8, size=56, flags=0) at /runtime/src/coreclr/gc/gc.cpp:50404\n#21 0x0000002aaac0c832 in GcAllocInternal (pEEType=0x2aaaefd688, uFlags=0, numElements=16, pThread=0x3ff7db67a0) at /runtime/src/coreclr/nativeaot/Runtime/GCHelpers.cpp:606\n#22 0x0000002aaac0c4e4 in RhpGcAlloc (pEEType=0x2aaaefd688, uFlags=0, numElements=16, pTransitionFrame=0x3fffffec10) at /runtime/src/coreclr/nativeaot/Runtime/GCHelpers.cpp:680\n#23 0x0000002aaacab87e in RhpNewArrayRare () at /runtime/src/coreclr/nativeaot/Runtime/riscv64/AllocFast.S:252\n#24 0x0000002aaad0ea7c in S_P_CoreLib_System_Text_StringBuilder___ctor (this=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Text/StringBuilder.cs:79\n#25 0x0000002aaadb6620 in S_P_TypeLoader_Internal_TypeSystem_NoMetadata_NoMetadataType__ToString (this=...) at /runtime/src/coreclr/nativeaot/System.Private.TypeLoader/src/Internal/TypeSystem/RuntimeNoMetadataType.cs:388\n#26 0x0000002aaadaffd8 in S_P_TypeLoader_Internal_TypeSystem_TypeSystemContext__ResolveRuntimeTypeHandle (this=..., rtth=...) at /runtime/src/coreclr/nativeaot/System.Private.TypeLoader/src/Internal/TypeSystem/TypeSystemContext.Runtime.cs:280\n#27 0x0000002aaadca5b4 in S_P_TypeLoader_Internal_Runtime_TypeLoader_TypeLoaderEnvironment__ResolveGenericVirtualMethodTarget (this=..., type=..., slot=...)\n    at /runtime/src/coreclr/nativeaot/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/TypeLoaderEnvironment.GVMResolution.cs:128\n#28 0x0000002aaadd0bc8 in S_P_TypeLoader_Internal_Runtime_TypeLoader_Callbacks__ResolveGenericVirtualMethodTarget (this=..., targetTypeHandle=..., declMethod=...)\n    at /runtime/src/coreclr/nativeaot/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/TypeLoaderEnvironment.cs:74\n#29 0x0000002aaad36e64 in S_P_CoreLib_System_Runtime_TypeLoaderExports__CacheMiss_0 (context=183256346072, signature=183256251392, factory=..., contextObject=...)\n    at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Runtime/TypeLoaderExports.cs:151\n#30 0x0000002aaad36e00 in S_P_CoreLib_System_Runtime_TypeLoaderExports__GVMLookupForSlotSlow (obj=..., slot=...) at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Runtime/TypeLoaderExports.cs:109\n#31 0x0000002aaad36d10 in S_P_CoreLib_System_Runtime_TypeLoaderExports__GVMLookupForSlot (obj=..., slot=...) at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Runtime/TypeLoaderExports.cs:104\n#32 0x0000002aaaddfbb4 in app1_Generics_TestSimpleGVMScenarios__Run () at /app1/Program.cs:4300\n#33 0x0000002aaadd9e08 in app1_Generics__Run () at /app1/Program.cs:2806\n#34 0x0000002aaadd99f4 in app1_Program___Main__ (args=...) at /app1/Program.cs:38\n#35 0x0000002aaae339d8 in app1__Module___StartupCodeMain () at /runtime/src/coreclr/nativeaot/Common/src/System/Collections/Generic/LowLevelDictionary.cs:287\n#36 0x0000002aaac0906e in main (argc=1, argv=0x3ffffff188) at /runtime/src/coreclr/nativeaot/Bootstrap/main.cpp:225\n```\n\nLooks similar to https://github.com/dotnet/runtime/issues/97729#issuecomment-1923728173.",
                                           "updatedAt":  "2025-02-14T06:28:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6edZiz",
                                           "createdAt":  "2025-02-14T07:45:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e `RhpNewObject` corrupts the frame pointer needed for unwinding:\n\u003e \n\u003e https://github.com/dotnet/runtime/blob/953bc61ba9fc14dd1031ce83fc2700c7129042ac/src/coreclr/nativeaot/Runtime/riscv64/AllocFast.S#L246\n\u003e \n\u003e We need to use one of the saved registers, such as `s2`.\n\nIt seems like it should stay s0 because the method it will call is:\n\n```gdb\n(gdb) disas\nDump of assembler code for function RhpGcAlloc(MethodTable*, uint32_t, uintptr_t, PInvokeTransitionFrame*):\n   0x0000002aaac0c47a \u003c+0\u003e:\taddi\tsp,sp,-64\n   0x0000002aaac0c47c \u003c+2\u003e:\tsd\tra,56(sp)\n   0x0000002aaac0c47e \u003c+4\u003e:\tsd\ts0,48(sp)\n   0x0000002aaac0c480 \u003c+6\u003e:\taddi\ts0,sp,64\n   0x0000002aaac0c482 \u003c+8\u003e:\tsd\ta0,-24(s0)\n   0x0000002aaac0c486 \u003c+12\u003e:\tsw\ta1,-28(s0)\n   0x0000002aaac0c48a \u003c+16\u003e:\tsd\ta2,-40(s0)\n   0x0000002aaac0c48e \u003c+20\u003e:\tsd\ta3,-48(s0)\n   0x0000002aaac0c492 \u003c+24\u003e:\tjal\t0x2aaac0b05c \u003c_ZN11ThreadStore16GetCurrentThreadEv\u003e\n   0x0000002aaac0c496 \u003c+28\u003e:\tsd\ta0,-56(s0)\n   0x0000002aaac0c49a \u003c+32\u003e:\tld\ta0,-48(s0)\n   0x0000002aaac0c49e \u003c+36\u003e:\tld\ta0,8(a0)\n   0x0000002aaac0c4a0 \u003c+38\u003e:\tjal\t0x2aaac1b4f2 \u003c_ZN6Thread14IsHijackTargetEPv\u003e\n   0x0000002aaac0c4a4 \u003c+42\u003e:\tbeqz\ta0,0x2aaac0c4c4 \u003cRhpGcAlloc(MethodTable*, uint32_t, uintptr_t, PInvokeTransitionFrame*)+74\u003e\n   0x0000002aaac0c4a6 \u003c+44\u003e:\tj\t0x2aaac0c4a8 \u003cRhpGcAlloc(MethodTable*, uint32_t, uintptr_t, PInvokeTransitionFrame*)+46\u003e\n   0x0000002aaac0c4a8 \u003c+46\u003e:\tauipc\ta0,0xfff72\n   0x0000002aaac0c4ac \u003c+50\u003e:\taddi\ta0,a0,-1619 # 0x2aaab7de55\n   0x0000002aaac0c4b0 \u003c+54\u003e:\tauipc\ta1,0xfff80\n   0x0000002aaac0c4b4 \u003c+58\u003e:\taddi\ta1,a1,-67 # 0x2aaab8c46d\n   0x0000002aaac0c4b8 \u003c+62\u003e:\tli\ta2,674\n   0x0000002aaac0c4bc \u003c+66\u003e:\tli\ta3,0\n   0x0000002aaac0c4be \u003c+68\u003e:\tjal\t0x2aaac09f92 \u003c_Z6AssertPKcS0_jS0_\u003e\n   0x0000002aaac0c4c2 \u003c+72\u003e:\tj\t0x2aaac0c4c4 \u003cRhpGcAlloc(MethodTable*, uint32_t, uintptr_t, PInvokeTransitionFrame*)+74\u003e\n   0x0000002aaac0c4c4 \u003c+74\u003e:\tld\ta0,-56(s0)\n   0x0000002aaac0c4c8 \u003c+78\u003e:\tld\ta1,-48(s0)\n   0x0000002aaac0c4cc \u003c+82\u003e:\tjal\t0x2aaac0c4ec \u003c_ZN6Thread26SetDeferredTransitionFrameEP22PInvokeTransitionFrame\u003e\n   0x0000002aaac0c4d0 \u003c+86\u003e:\tld\ta0,-24(s0)\n   0x0000002aaac0c4d4 \u003c+90\u003e:\tlw\ta1,-28(s0)\n   0x0000002aaac0c4d8 \u003c+94\u003e:\tld\ta2,-40(s0)\n   0x0000002aaac0c4dc \u003c+98\u003e:\tld\ta3,-56(s0)\n   0x0000002aaac0c4e0 \u003c+102\u003e:\tjal\t0x2aaac0c592 \u003c_ZL15GcAllocInternalP11MethodTablejmP6Thread\u003e\n   0x0000002aaac0c4e4 \u003c+106\u003e:\tld\tra,56(sp)\n   0x0000002aaac0c4e6 \u003c+108\u003e:\tld\ts0,48(sp)\n   0x0000002aaac0c4e8 \u003c+110\u003e:\taddi\tsp,sp,64\n   0x0000002aaac0c4ea \u003c+112\u003e:\tret\nEnd of assembler dump.\n```\nwhich is only handling s0 in epilog/prolog.",
                                           "updatedAt":  "2025-02-14T07:46:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6edbXd",
                                           "createdAt":  "2025-02-14T07:50:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGXPmg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-14T07:53:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "`s0` is the frame pointer (`fp`). The method you posted saves it in the prolog (+4) and restores it in epilog (+108). That looks just fine.\n\nThe caller just needs a temporary variable to store the value. Any callee saved variable is fine, they are pushed and restored in the COOP frame of `RhpNewObject`.",
                                           "updatedAt":  "2025-02-14T07:53:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6edce1",
                                           "createdAt":  "2025-02-14T07:53:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGXPoQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-14T07:53:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "Ah, it\u0027s is callee-saved so I was thinking we changed it to preserve the value after the call, but your intention was to not overwrite fp in first place. 👍",
                                           "updatedAt":  "2025-02-14T07:53:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eddi3",
                                           "createdAt":  "2025-02-14T07:55:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "```gdb\nGCToEEInterface::GcScanRoots (fn=0x2aaac5d018 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, condemned=0, max_gen=2, sc=0x3fffffe308) at /runtime/src/coreclr/nativeaot/Runtime/gcenv.ee.cpp:117\n117\t            STRESS_LOG1(LF_GC | LF_GCROOTS, LL_INFO100, \"{ Starting scan of Thread %p\\n\", pThread);\n(gdb) list\n112\t            }\n113\t\n114\t            STRESS_LOG1(LF_GC | LF_GCROOTS, LL_INFO100, \"{ Scanning Thread\u0027s %p thread statics root. \\n\", pThread);\n115\t            EnumGcRef(pThread-\u003eGetThreadStaticStorage(), GCRK_Object, fn, sc);\n116\t\n117\t            STRESS_LOG1(LF_GC | LF_GCROOTS, LL_INFO100, \"{ Starting scan of Thread %p\\n\", pThread);\n118\t            sc-\u003ethread_under_crawl = pThread;\n119\t#if defined(FEATURE_EVENT_TRACE) \u0026\u0026 !defined(DACCESS_COMPILE)\n120\t            sc-\u003edwEtwRootKind = kEtwGCRootKindStack;\n121\t#endif\n```\n\nfrom line 114, we hit Promote the first it with non-null object, and second time it\u0027s called from line 117 where it\u0027s null:\n\n```gdb\nThread 1 \"app1\" hit Breakpoint 1, GcEnumObject (ppObj=0x3ff7db6830, flags=0, fnGcEnumRef=0x2aaac5d018 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pSc=0x3fffffe308) at /runtime/src/coreclr/nativeaot/Runtime/GcEnum.cpp:81\n81\t        fnGcEnumRef(ppObj, pSc, flags);\n(gdb) c\nContinuing.\n\nThread 1 \"app1\" hit Breakpoint 1, GcEnumObject (ppObj=0x0, flags=0, fnGcEnumRef=0x2aaac5d018 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pSc=0x3fffffe308) at /runtime/src/coreclr/nativeaot/Runtime/GcEnum.cpp:81\n81\t        fnGcEnumRef(ppObj, pSc, flags);\n(gdb) c\nContinuing.\n\nThread 1 \"app1\" received signal SIGSEGV, Segmentation fault.\n0x0000002aaac5d044 in WKS::GCHeap::Promote (ppObject=0x0, sc=0x3fffffe308, flags=0) at /runtime/src/coreclr/gc/gc.cpp:49916\n49916\t    uint8_t* o = (uint8_t*)*ppObject;\n```",
                                           "updatedAt":  "2025-02-14T07:59:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ediVa",
                                           "createdAt":  "2025-02-14T08:07:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGXxbw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-14T09:07:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I get several of these small corruptions when the GC kicks in (two or three different patterns depending on timing). They are painful to debug. It\u0027s likely some corrupted context in the unwinding. Generally, I would start with checking these things:\n- Which thread is being checked for the GC roots? (tracable from the variables on stack where StackFrameIterator is created)\n- What is the state of the thread? Was it preempted by signal? Did it transition to preemptive state by calling some native runtime API, etc.? That should answer where we produced the initial saved context for the stack frame iterator.\n- Is the problem happening on the first frame or only after we already unwound N frames? (ie. how many times did we go through `StackFrameIterator::Next`; may need some additional tracing in code)\n\nIf we get corruption on first frame, it\u0027s likely we incorrectly set something in the initial transition context. If we get it on later frame, it\u0027s important to check whether there was some special frame on the stack (like the funclet call yesterday) and check that one.\n\n(For reference, I now get either crash in GC, or collected object that should have still been referenced)",
                                           "updatedAt":  "2025-02-14T08:45:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eeEmA",
                                           "createdAt":  "2025-02-14T09:09:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Minimal repro is:\n\n```c#\nusing System;\nusing System.Collections.Generic;\n\nList\u003cobject\u003e objs = new();\nfor (int i = 0; i \u003c 10000; i++) objs.Add(new object());\n\nConsole.WriteLine(objs.Count);\n```\n\n```gdb\n0x0000002aaabcbb4e in WKS::GCHeap::Promote (ppObject=0x0, sc=0x3fffffe558, flags=0) at /runtime/src/coreclr/gc/gc.cpp:49916\n49916\t    uint8_t* o = (uint8_t*)*ppObject;\n(gdb) bt\n#0  0x0000002aaabcbb4e in WKS::GCHeap::Promote (ppObject=0x0, sc=0x3fffffe558, flags=0) at /runtime/src/coreclr/gc/gc.cpp:49916\n#1  0x0000002aaab7e0d0 in GcEnumObject (ppObj=0x0, flags=0, fnGcEnumRef=0x2aaabcbb22 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pSc=0x3fffffe558) at /runtime/src/coreclr/nativeaot/Runtime/GcEnum.cpp:81\n#2  0x0000002aaab7e2c8 in EnumGcRefsCallback (hCallback=0x3fffffdc20, pObject=0x0, flags=0) at /runtime/src/coreclr/nativeaot/Runtime/GcEnum.cpp:122\n#3  0x0000002aaac0edee in GcInfoDecoder::ReportRegisterToGC (this=0x3fffffdb48, regNum=9, gcFlags=0, pRD=0x3fffffdd90, flags=0, pCallBack=0x2aaab7e298 \u003cEnumGcRefsCallback(void*, void**, unsigned int)\u003e, hCallBack=0x3fffffdc20)\n    at /runtime/src/coreclr/nativeaot/Runtime/./../../vm/gcinfodecoder.cpp:2087\n#4  0x0000002aaac0dade in GcInfoDecoder::ReportSlotToGC (this=0x3fffffdb48, slotDecoder=..., slotIndex=0, pRD=0x3fffffdd90, reportScratchSlots=false, inputFlags=0, pCallBack=0x2aaab7e298 \u003cEnumGcRefsCallback(void*, void**, unsigned int)\u003e, \n    hCallBack=0x3fffffdc20) at /runtime/src/coreclr/nativeaot/Runtime/./../../inc/gcinfodecoder.h:710\n#5  0x0000002aaac0af70 in GcInfoDecoder::EnumerateLiveSlots (this=0x3fffffdb48, pRD=0x3fffffdd90, reportScratchSlots=false, inputFlags=0, pCallBack=0x2aaab7e298 \u003cEnumGcRefsCallback(void*, void**, unsigned int)\u003e, hCallBack=0x3fffffdc20)\n    at /runtime/src/coreclr/nativeaot/Runtime/./../../vm/gcinfodecoder.cpp:1016\n#6  0x0000002aaac0f6f4 in UnixNativeCodeManager::EnumGcRefs (this=0x2aaad52bd0, pMethodInfo=0x3fffffdfa0, safePointAddress=0x2aaacb3fac \u003capp1_Program___Main__+140\u003e, pRegisterSet=0x3fffffdd90, hCallback=0x3fffffdc20, isActiveStackFrame=false)\n    at /runtime/src/coreclr/nativeaot/Runtime/unix/UnixNativeCodeManager.cpp:237\n#7  0x0000002aaab7e278 in EnumGcRefs (pCodeManager=0x2aaad52bd0, pMethodInfo=0x3fffffdfa0, safePointAddress=0x2aaacb3fac \u003capp1_Program___Main__+140\u003e, pRegisterSet=0x3fffffdd90, \n    pfnEnumCallback=0x2aaabcbb22 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pvCallbackData=0x3fffffe558, isActiveStackFrame=false) at /runtime/src/coreclr/nativeaot/Runtime/GcEnum.cpp:139\n#8  0x0000002aaab89cb6 in Thread::GcScanRootsWorker (this=0x3ff7db67a0, pfnEnumCallback=0x2aaabcbb22 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pvCallbackData=0x3fffffe558, frameIterator=...)\n    at /runtime/src/coreclr/nativeaot/Runtime/thread.cpp:519\n#9  0x0000002aaab89a3c in Thread::GcScanRoots (this=0x3ff7db67a0, pfnEnumCallback=0x2aaabcbb22 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pvCallbackData=0x3fffffe558) at /runtime/src/coreclr/nativeaot/Runtime/thread.cpp:419\n#10 0x0000002aaab7c92c in GCToEEInterface::GcScanRoots (fn=0x2aaabcbb22 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, condemned=0, max_gen=2, sc=0x3fffffe558) at /runtime/src/coreclr/nativeaot/Runtime/gcenv.ee.cpp:122\n#11 0x0000002aaabf3fe6 in GCScan::GcScanRoots (fn=0x2aaabcbb22 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, condemned=0, max_gen=2, sc=0x3fffffe558) at /runtime/src/coreclr/gc/gcscan.cpp:154\n#12 0x0000002aaabb45c0 in WKS::gc_heap::mark_phase (condemned_gen_number=0) at /runtime/src/coreclr/gc/gc.cpp:30249\n#13 0x0000002aaabb0b96 in WKS::gc_heap::gc1 () at /runtime/src/coreclr/gc/gc.cpp:22694\n#14 0x0000002aaabc23e8 in WKS::gc_heap::garbage_collect (n=0) at /runtime/src/coreclr/gc/gc.cpp:24866\n#15 0x0000002aaaba8f44 in WKS::GCHeap::GarbageCollectGeneration (this=0x2aaad4d190, gen=0, reason=reason_alloc_soh) at /runtime/src/coreclr/gc/gc.cpp:51499\n#16 0x0000002aaabaa816 in WKS::gc_heap::trigger_gc_for_alloc (gen_number=0, gr=reason_alloc_soh, msl=0x2aaad0e070 \u003cWKS::gc_heap::more_space_lock_soh\u003e, loh_p=false, take_state=WKS::mt_try_budget) at /runtime/src/coreclr/gc/gc.cpp:19191\n#17 0x0000002aaabab828 in WKS::gc_heap::try_allocate_more_space (acontext=0x3ff7db67a8, size=24, flags=0, gen_number=0) at /runtime/src/coreclr/gc/gc.cpp:19329\n#18 0x0000002aaabab9a4 in WKS::gc_heap::allocate_more_space (acontext=0x3ff7db67a8, size=24, flags=0, alloc_generation_number=0) at /runtime/src/coreclr/gc/gc.cpp:19829\n#19 0x0000002aaabe9f2c in WKS::gc_heap::allocate (jsize=24, acontext=0x3ff7db67a8, flags=0) at /runtime/src/coreclr/gc/gc.cpp:19860\n#20 WKS::GCHeap::Alloc (this=0x2aaad4d190, context=0x3ff7db67a8, size=24, flags=0) at /runtime/src/coreclr/gc/gc.cpp:50404\n#21 0x0000002aaab7b6f2 in GcAllocInternal (pEEType=0x2aaad3b0f0, uFlags=0, numElements=0, pThread=0x3ff7db67a0) at /runtime/src/coreclr/nativeaot/Runtime/GCHelpers.cpp:606\n#22 0x0000002aaab7b3a4 in RhpGcAlloc (pEEType=0x2aaad3b0f0, uFlags=0, numElements=0, pTransitionFrame=0x3fffffee60) at /runtime/src/coreclr/nativeaot/Runtime/GCHelpers.cpp:680\n#23 0x0000002aaac19620 in RhpNewObject () at /runtime/src/coreclr/nativeaot/Runtime/riscv64/AllocFast.S:84\n#24 0x0000002aaacb3fac in app1_Program___Main__ (args=...) at /app1/Program.cs:5\n#25 0x0000002aaacd9b78 in app1__Module___StartupCodeMain () at /runtime/src/coreclr/nativeaot/Common/src/System/Collections/Generic/LowLevelDictionary.cs:287\n#26 0x0000002aaab77e26 in main (argc=1, argv=0x3ffffff188) at /runtime/src/coreclr/nativeaot/Bootstrap/main.cpp:225\n```",
                                           "updatedAt":  "2025-02-14T09:12:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6efIRX",
                                           "createdAt":  "2025-02-14T10:46:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e Is the problem happening on the first frame or only after we already unwound N frames? (ie. how many times did we go through StackFrameIterator::Next; may need some additional tracing in code)\n\n```gdb\n(gdb) b StackFrameIterator::Next\nBreakpoint 1 at 0xd98e0: StackFrameIterator::Next. (2 locations)\n(gdb) r\nStarting program: /tmp/app1 \n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/riscv64-linux-gnu/libthread_db.so.1\".\n[New Thread 0x3fef759060 (LWP 14520)]\n\nThread 1 \"app1\" received signal SIGSEGV, Segmentation fault.\n0x0000002aaabcb9f8 in WKS::GCHeap::Promote (ppObject=0x0, sc=0x3fffffe5c8, flags=0) at /runtime/src/coreclr/gc/gc.cpp:49916\n49916\t    uint8_t* o = (uint8_t*)*ppObject;\n```\n\n0 times? 👀",
                                           "updatedAt":  "2025-02-14T10:46:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6efLXR",
                                           "createdAt":  "2025-02-14T10:52:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e 0 times?\n\nThat would likely mean it\u0027s the initial frame that is missing something. If it\u0027s the same stack trace as above, then it\u0027s on the same thread (_yay, no multithreading issue yet; in my case I often get crashes on finalizer thread_). That means the initial context should likely come from `PUSH_COOP_PINVOKE_FRAME` in `RhpNewObject`.\n\n`GcInfoDecoder::ReportRegisterToGC` is reporting register 9, so that should be clue on what to check...",
                                           "updatedAt":  "2025-02-14T10:52:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6efxrv",
                                           "createdAt":  "2025-02-14T11:48:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "s1 is the ninth register going by ISA convention (x0,1,2,3) which libunwind uses. (we are using ABI convention a,s,t,f which gdb also uses)",
                                           "updatedAt":  "2025-02-14T11:48:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ef28r",
                                           "createdAt":  "2025-02-14T11:59:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Yep, sounds like `s1`/`x9`. That one is callee-saved. Presumably that should have been saved by `PUSH_COOP_PINVOKE_FRAME`. I\u0027d check the saved values first... and maybe disassemble or JitDump the caller to see what is expected to be in the register at the time of  `RhpNewObject` call.",
                                           "updatedAt":  "2025-02-14T11:59:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ef9Rb",
                                           "createdAt":  "2025-02-14T12:13:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "I was trying to compare it with arm64, but apparently `EnumGcRefsCallback` path is not called there. `WKS::GCHeap::Promote` is reached from other paths though.",
                                           "updatedAt":  "2025-02-14T12:13:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6egDtW",
                                           "createdAt":  "2025-02-14T12:23:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "This doesn\u0027t look right in relation to the layout of `REGDISPLAY` structure:\nhttps://github.com/dotnet/runtime/blob/42423ef91c9f23381d99dee708fa55336318debc/src/coreclr/vm/gcinfodecoder.cpp#L1978-L1982\n\n(should likely be `pR0`)",
                                           "updatedAt":  "2025-02-14T12:36:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6egaus",
                                           "createdAt":  "2025-02-14T13:07:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Good point, with pR0, the needle moves from:\n\n```gdb\n(gdb) disas\nDump of assembler code for function app1_Program___Main__:\n   0x0000002aaacb3d60 \u003c+0\u003e:\taddi\tsp,sp,-48\n   0x0000002aaacb3d64 \u003c+4\u003e:\tsd\ts0,8(sp)\n   0x0000002aaacb3d68 \u003c+8\u003e:\tsd\tra,16(sp)\n   0x0000002aaacb3d6c \u003c+12\u003e:\tsd\ts1,24(sp)\n   0x0000002aaacb3d70 \u003c+16\u003e:\tsd\ts2,32(sp)\n   0x0000002aaacb3d74 \u003c+20\u003e:\tsd\ts3,40(sp)\n   0x0000002aaacb3d78 \u003c+24\u003e:\taddi\ts0,sp,8\n   0x0000002aaacb3d7c \u003c+28\u003e:\tauipc\ta0,0x8f\n   0x0000002aaacb3d80 \u003c+32\u003e:\taddi\ta0,a0,1916 # 0x2aaad434f8\n   0x0000002aaacb3d84 \u003c+36\u003e:\tauipc\ta1,0xfff65\n   0x0000002aaacb3d88 \u003c+40\u003e:\taddi\ta1,a1,1618 # 0x2aaac193d6 \u003cRhpNewFast\u003e\n   0x0000002aaacb3d8c \u003c+44\u003e:\tjalr\ta1\n   0x0000002aaacb3d90 \u003c+48\u003e:\tmv\ts1,a0\n   0x0000002aaacb3d94 \u003c+52\u003e:\tmv\ta0,s1\n   0x0000002aaacb3d98 \u003c+56\u003e:\tauipc\ta1,0x19\n   0x0000002aaacb3d9c \u003c+60\u003e:\taddi\ta1,a1,712 # 0x2aaaccd060 \u003cS_P_CoreLib_System_Collections_Generic_List_1\u003cSystem___Canon\u003e___ctor\u003e\n   0x0000002aaacb3da0 \u003c+64\u003e:\tjalr\ta1\n   0x0000002aaacb3da4 \u003c+68\u003e:\tlui\ts2,0x2\n   0x0000002aaacb3da8 \u003c+72\u003e:\taddiw\ts2,s2,1808 # 0x2710\n   0x0000002aaacb3dac \u003c+76\u003e:\tauipc\ta0,0x87\n   0x0000002aaacb3db0 \u003c+80\u003e:\taddi\ta0,a0,196 # 0x2aaad3ae70\n   0x0000002aaacb3db4 \u003c+84\u003e:\tauipc\ta1,0xfff65\n   0x0000002aaacb3db8 \u003c+88\u003e:\taddi\ta1,a1,1570 # 0x2aaac193d6 \u003cRhpNewFast\u003e\n   0x0000002aaacb3dbc \u003c+92\u003e:\tjalr\ta1\n=\u003e 0x0000002aaacb3dc0 \u003c+96\u003e:\tmv\ta2,a0\n   0x0000002aaacb3dc4 \u003c+100\u003e:\tlw\ta0,20(s1)\n   0x0000002aaacb3dc8 \u003c+104\u003e:\taddiw\ta0,a0,1\n   0x0000002aaacb3dcc \u003c+108\u003e:\tsw\ta0,20(s1)\n   0x0000002aaacb3dd0 \u003c+112\u003e:\tld\ta0,8(s1)\n   0x0000002aaacb3dd4 \u003c+116\u003e:\tlw\ts3,16(s1)\n   0x0000002aaacb3dd8 \u003c+120\u003e:\tlw\ta1,8(a0)\n   0x0000002aaacb3ddc \u003c+124\u003e:\tslli\tra,a1,0x20\n   0x0000002aaacb3de0 \u003c+128\u003e:\tsrli\tra,ra,0x20\n   0x0000002aaacb3de4 \u003c+132\u003e:\tslli\tt6,s3,0x20\n   0x0000002aaacb3de8 \u003c+136\u003e:\tsrli\tt6,t6,0x20\n   0x0000002aaacb3dec \u003c+140\u003e:\tbltu\tt6,ra,0x2aaacb3e08 \u003capp1_Program___Main__+168\u003e\n   0x0000002aaacb3df0 \u003c+144\u003e:\tmv\ta0,s1\n   0x0000002aaacb3df4 \u003c+148\u003e:\tmv\ta1,a2\n   0x0000002aaacb3df8 \u003c+152\u003e:\tauipc\ta2,0x19\n   0x0000002aaacb3dfc \u003c+156\u003e:\taddi\ta2,a2,1272 # 0x2aaaccd2f0 \u003cS_P_CoreLib_System_Collections_Generic_List_1\u003cSystem___Canon\u003e__AddWithResize\u003e\n   0x0000002aaacb3e00 \u003c+160\u003e:\tjalr\ta2\n   0x0000002aaacb3e04 \u003c+164\u003e:\tj\t0x2aaacb3e24 \u003capp1_Program___Main__+196\u003e\n   0x0000002aaacb3e08 \u003c+168\u003e:\taddiw\ta1,s3,1\n   0x0000002aaacb3e0c \u003c+172\u003e:\tsw\ta1,16(s1)\n   0x0000002aaacb3e10 \u003c+176\u003e:\tslli\ta1,s3,0x20\n   0x0000002aaacb3e14 \u003c+180\u003e:\tsrli\ta1,a1,0x20\n   0x0000002aaacb3e18 \u003c+184\u003e:\tauipc\ta3,0xfffcd\n   0x0000002aaacb3e1c \u003c+188\u003e:\taddi\ta3,a3,232 # 0x2aaac80f00 \u003cS_P_CoreLib_System_Runtime_TypeCast__StelemRef\u003e\n   0x0000002aaacb3e20 \u003c+192\u003e:\tjalr\ta3\n   0x0000002aaacb3e24 \u003c+196\u003e:\taddiw\ts2,s2,-1\n   0x0000002aaacb3e28 \u003c+200\u003e:\tsext.w\tt6,s2\n   0x0000002aaacb3e2c \u003c+204\u003e:\tbnez\tt6,0x2aaacb3dac \u003capp1_Program___Main__+76\u003e\n   0x0000002aaacb3e30 \u003c+208\u003e:\tlw\ta0,16(s1)\n   0x0000002aaacb3e34 \u003c+212\u003e:\tauipc\ta1,0xfff6b\n   0x0000002aaacb3e38 \u003c+216\u003e:\taddi\ta1,a1,1804 # 0x2aaac1f540 \u003cSystem_Console_System_Console__WriteLine_7\u003e\n   0x0000002aaacb3e3c \u003c+220\u003e:\tjalr\ta1\n   0x0000002aaacb3e40 \u003c+224\u003e:\tld\ts3,40(sp)\n   0x0000002aaacb3e44 \u003c+228\u003e:\tld\ts2,32(sp)\n   0x0000002aaacb3e48 \u003c+232\u003e:\tld\ts1,24(sp)\n   0x0000002aaacb3e4c \u003c+236\u003e:\tld\tra,16(sp)\n   0x0000002aaacb3e50 \u003c+240\u003e:\tld\ts0,8(sp)\n   0x0000002aaacb3e54 \u003c+244\u003e:\taddi\tsp,sp,48\n   0x0000002aaacb3e58 \u003c+248\u003e:\tret\nEnd of assembler dump\n```\n\nto:\n\n```gdb\nThread 1 \"app1\" received signal SIGSEGV, Segmentation fault.\n0x0000002aaacb3dd8 in app1_Program___Main__ (args=...) at /app1/Program.cs:5\nwarning: 5\t/app1/Program.cs: No such file or directory\n(gdb) bt\n#0  0x0000002aaacb3dd8 in app1_Program___Main__ (args=...) at /app1/Program.cs:5\n#1  0x0000002aaacd98f8 in app1__Module___StartupCodeMain () at /runtime/src/coreclr/nativeaot/Common/src/System/Collections/Generic/LowLevelDictionary.cs:287\n#2  0x0000002aaab77dfa in main (argc=1, argv=0x3ffffff188) at /runtime/src/coreclr/nativeaot/Bootstrap/main.cpp:225\n(gdb) disas\nDump of assembler code for function app1_Program___Main__:\n   0x0000002aaacb3d60 \u003c+0\u003e:\taddi\tsp,sp,-48\n   0x0000002aaacb3d64 \u003c+4\u003e:\tsd\ts0,8(sp)\n   0x0000002aaacb3d68 \u003c+8\u003e:\tsd\tra,16(sp)\n   0x0000002aaacb3d6c \u003c+12\u003e:\tsd\ts1,24(sp)\n   0x0000002aaacb3d70 \u003c+16\u003e:\tsd\ts2,32(sp)\n   0x0000002aaacb3d74 \u003c+20\u003e:\tsd\ts3,40(sp)\n   0x0000002aaacb3d78 \u003c+24\u003e:\taddi\ts0,sp,8\n   0x0000002aaacb3d7c \u003c+28\u003e:\tauipc\ta0,0x8f\n   0x0000002aaacb3d80 \u003c+32\u003e:\taddi\ta0,a0,1916 # 0x2aaad434f8\n   0x0000002aaacb3d84 \u003c+36\u003e:\tauipc\ta1,0xfff65\n   0x0000002aaacb3d88 \u003c+40\u003e:\taddi\ta1,a1,1622 # 0x2aaac193da \u003cRhpNewFast\u003e\n   0x0000002aaacb3d8c \u003c+44\u003e:\tjalr\ta1\n   0x0000002aaacb3d90 \u003c+48\u003e:\tmv\ts1,a0\n   0x0000002aaacb3d94 \u003c+52\u003e:\tmv\ta0,s1\n   0x0000002aaacb3d98 \u003c+56\u003e:\tauipc\ta1,0x19\n   0x0000002aaacb3d9c \u003c+60\u003e:\taddi\ta1,a1,712 # 0x2aaaccd060 \u003cS_P_CoreLib_System_Collections_Generic_List_1\u003cSystem___Canon\u003e___ctor\u003e\n   0x0000002aaacb3da0 \u003c+64\u003e:\tjalr\ta1\n   0x0000002aaacb3da4 \u003c+68\u003e:\tlui\ts2,0x2\n   0x0000002aaacb3da8 \u003c+72\u003e:\taddiw\ts2,s2,1808 # 0x2710\n   0x0000002aaacb3dac \u003c+76\u003e:\tauipc\ta0,0x87\n   0x0000002aaacb3db0 \u003c+80\u003e:\taddi\ta0,a0,196 # 0x2aaad3ae70\n   0x0000002aaacb3db4 \u003c+84\u003e:\tauipc\ta1,0xfff65\n   0x0000002aaacb3db8 \u003c+88\u003e:\taddi\ta1,a1,1574 # 0x2aaac193da \u003cRhpNewFast\u003e\n   0x0000002aaacb3dbc \u003c+92\u003e:\tjalr\ta1\n   0x0000002aaacb3dc0 \u003c+96\u003e:\tmv\ta2,a0\n   0x0000002aaacb3dc4 \u003c+100\u003e:\tlw\ta0,20(s1)\n   0x0000002aaacb3dc8 \u003c+104\u003e:\taddiw\ta0,a0,1\n   0x0000002aaacb3dcc \u003c+108\u003e:\tsw\ta0,20(s1)\n   0x0000002aaacb3dd0 \u003c+112\u003e:\tld\ta0,8(s1)\n   0x0000002aaacb3dd4 \u003c+116\u003e:\tlw\ts3,16(s1)\n=\u003e 0x0000002aaacb3dd8 \u003c+120\u003e:\tlw\ta1,8(a0)\n   0x0000002aaacb3ddc \u003c+124\u003e:\tslli\tra,a1,0x20\n   0x0000002aaacb3de0 \u003c+128\u003e:\tsrli\tra,ra,0x20\n   0x0000002aaacb3de4 \u003c+132\u003e:\tslli\tt6,s3,0x20\n   0x0000002aaacb3de8 \u003c+136\u003e:\tsrli\tt6,t6,0x20\n   0x0000002aaacb3dec \u003c+140\u003e:\tbltu\tt6,ra,0x2aaacb3e08 \u003capp1_Program___Main__+168\u003e\n   0x0000002aaacb3df0 \u003c+144\u003e:\tmv\ta0,s1\n   0x0000002aaacb3df4 \u003c+148\u003e:\tmv\ta1,a2\n   0x0000002aaacb3df8 \u003c+152\u003e:\tauipc\ta2,0x19\n   0x0000002aaacb3dfc \u003c+156\u003e:\taddi\ta2,a2,1272 # 0x2aaaccd2f0 \u003cS_P_CoreLib_System_Collections_Generic_List_1\u003cSystem___Canon\u003e__AddWithResize\u003e\n   0x0000002aaacb3e00 \u003c+160\u003e:\tjalr\ta2\n   0x0000002aaacb3e04 \u003c+164\u003e:\tj\t0x2aaacb3e24 \u003capp1_Program___Main__+196\u003e\n   0x0000002aaacb3e08 \u003c+168\u003e:\taddiw\ta1,s3,1\n   0x0000002aaacb3e0c \u003c+172\u003e:\tsw\ta1,16(s1)\n   0x0000002aaacb3e10 \u003c+176\u003e:\tslli\ta1,s3,0x20\n   0x0000002aaacb3e14 \u003c+180\u003e:\tsrli\ta1,a1,0x20\n   0x0000002aaacb3e18 \u003c+184\u003e:\tauipc\ta3,0xfffcd\n   0x0000002aaacb3e1c \u003c+188\u003e:\taddi\ta3,a3,232 # 0x2aaac80f00 \u003cS_P_CoreLib_System_Runtime_TypeCast__StelemRef\u003e\n   0x0000002aaacb3e20 \u003c+192\u003e:\tjalr\ta3\n   0x0000002aaacb3e24 \u003c+196\u003e:\taddiw\ts2,s2,-1\n   0x0000002aaacb3e28 \u003c+200\u003e:\tsext.w\tt6,s2\n   0x0000002aaacb3e2c \u003c+204\u003e:\tbnez\tt6,0x2aaacb3dac \u003capp1_Program___Main__+76\u003e\n   0x0000002aaacb3e30 \u003c+208\u003e:\tlw\ta0,16(s1)\n   0x0000002aaacb3e34 \u003c+212\u003e:\tauipc\ta1,0xfff6b\n   0x0000002aaacb3e38 \u003c+216\u003e:\taddi\ta1,a1,1804 # 0x2aaac1f540 \u003cSystem_Console_System_Console__WriteLine_7\u003e\n   0x0000002aaacb3e3c \u003c+220\u003e:\tjalr\ta1\n   0x0000002aaacb3e40 \u003c+224\u003e:\tld\ts3,40(sp)\n   0x0000002aaacb3e44 \u003c+228\u003e:\tld\ts2,32(sp)\n   0x0000002aaacb3e48 \u003c+232\u003e:\tld\ts1,24(sp)\n   0x0000002aaacb3e4c \u003c+236\u003e:\tld\tra,16(sp)\n   0x0000002aaacb3e50 \u003c+240\u003e:\tld\ts0,8(sp)\n   0x0000002aaacb3e54 \u003c+244\u003e:\taddi\tsp,sp,48\n   0x0000002aaacb3e58 \u003c+248\u003e:\tret\nEnd of assembler dump.\n```",
                                           "updatedAt":  "2025-02-14T13:07:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6egcmF",
                                           "createdAt":  "2025-02-14T13:11:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e (_yay, no multithreading issue yet; in my case I often get crashes on finalizer thread_)\n\nI think we have lived though some finalizer thread hiccups earlier, we can expect more to show up later 😅 ",
                                           "updatedAt":  "2025-02-14T13:11:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eh7J_",
                                           "createdAt":  "2025-02-14T15:54:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGaxFQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-14T15:58:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I think I managed to catch one of the corruptions in the debugger as it\u0027s happening:\n```\n#1  0x0000002aaace6002 in MethodTable::Validate (this=0x3202bc60, assertOnFail=true) at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/MethodTable.cpp:28\n#2  0x0000002aaacda712 in MethodTable::SanityCheck (this=0x3202bc60) at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/inc/MethodTable.h:296\n#3  0x0000002aaad33d88 in SVR::CObjectHeader::Validate (this=0xab3400c98, bDeep=1, bVerifyNextHeader=0, bVerifySyncBlock=0) at /home/ubuntu/runtime/src/coreclr/gc/gc.cpp:4778\n#4  0x0000002aaad7ad12 in SVR::GCHeap::Promote (ppObject=0x3fec4974c8, sc=0x3fef3fea98, flags=0) at /home/ubuntu/runtime/src/coreclr/gc/gc.cpp:49963\n#5  0x0000002aaac5224e in GcEnumObject (ppObj=0x3fec4974c8, flags=0, fnGcEnumRef=0x2aaad7aaca \u003cSVR::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pSc=0x3fef3fea98) at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/GcEnum.cpp:81\n#6  0x0000002aaac5247e in EnumGcRefsCallback (hCallback=0x3fef3fd8f0, pObject=0x3fec4974c8, flags=0) at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/GcEnum.cpp:122\n#7  0x0000002aaad05876 in GcInfoDecoder::ReportStackSlotToGC (this=0x3fef3fd818, spOffset=-8, spBase=GC_FRAMEREG_REL, gcFlags=0, pRD=0x3fef3fda60, flags=0, pCallBack=0x2aaac5244e \u003cEnumGcRefsCallback(void*, void**, unsigned int)\u003e, hCallBack=0x3fef3fd8f0)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/./../../vm/gcinfodecoder.cpp:2222\n#8  0x0000002aaad0431a in GcInfoDecoder::ReportSlotToGC (this=0x3fef3fd818, slotDecoder=..., slotIndex=23, pRD=0x3fef3fda60, reportScratchSlots=true, inputFlags=0, pCallBack=0x2aaac5244e \u003cEnumGcRefsCallback(void*, void**, unsigned int)\u003e, hCallBack=0x3fef3fd8f0)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/./../../inc/gcinfodecoder.h:732\n#9  0x0000002aaad04408 in GcInfoDecoder::ReportUntrackedSlots (this=0x3fef3fd818, slotDecoder=..., pRD=0x3fef3fda60, inputFlags=0, pCallBack=0x2aaac5244e \u003cEnumGcRefsCallback(void*, void**, unsigned int)\u003e, hCallBack=0x3fef3fd8f0)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/./../../vm/gcinfodecoder.cpp:1096\n#10 0x0000002aaad012ae in GcInfoDecoder::EnumerateLiveSlots (this=0x3fef3fd818, pRD=0x3fef3fda60, reportScratchSlots=false, inputFlags=0, pCallBack=0x2aaac5244e \u003cEnumGcRefsCallback(void*, void**, unsigned int)\u003e, hCallBack=0x3fef3fd8f0)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/./../../vm/gcinfodecoder.cpp:1045\n#11 0x0000002aaad061d4 in UnixNativeCodeManager::EnumGcRefs (this=0x2aab1c5bc0, pMethodInfo=0x3fef3fdc70, safePointAddress=0x2aaaf2c290 \u003cS_P_CoreLib_System_Threading_ManagedThreadId_ImmutableIdDispenser__AllocateId+1328\u003e, pRegisterSet=0x3fef3fda60, hCallback=0x3fef3fd8f0, isActiveStackFrame=false)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/unix/UnixNativeCodeManager.cpp:237\n```\n\nIn most of my runs the `ImmutableIdDispenser` gets into corrupted state. I will probably get back to it tomorrow, need to take a break now.\n\n\nUPD: Unfortunately, this was way after it already failed on the finalizer thread. There\u0027s already thousands of frames when it tried to allocated thread ID and failed with assert due to corruption.",
                                           "updatedAt":  "2025-02-14T16:16:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ei654",
                                           "createdAt":  "2025-02-14T18:02:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Another crash looks like\n\n```gdb\nThread 1 \"app1\" received signal SIGABRT, Aborted.\n0x0000003ff7e29b14 in __pthread_kill_implementation (threadid=\u003coptimized out\u003e, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:43\nwarning: 43\t./nptl/pthread_kill.c: No such file or directory\n(gdb) bt\n#0  0x0000003ff7e29b14 in __pthread_kill_implementation (threadid=\u003coptimized out\u003e, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:43\n#1  0x0000003ff7e29b68 in __pthread_kill_internal (signo=6, threadid=\u003coptimized out\u003e) at ./nptl/pthread_kill.c:78\n#2  0x0000003ff7defe74 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26\n#3  0x0000003ff7ddf372 in __GI_abort () at ./stdlib/abort.c:79\n#4  0x0000002aaabfb9e6 in SystemNative_Abort () at /runtime/src/native/libs/System.Native/pal_threading.c:284\n#5  0x0000002aaacd97d0 in S_P_CoreLib_System_RuntimeExceptionHelpers__FailFast (message=..., exception=..., errorSource=..., reason=\u003coptimized out\u003e, pExAddress=\u003coptimized out\u003e, pExContext=274741288992)\n    at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/RuntimeExceptionHelpers.cs:320\n#6  0x0000002aaad6e0e0 in S_P_CoreLib_System_Diagnostics_DebugProvider__FailCore (stackTrace=..., message=..., detailMessage=..., errorSource=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Diagnostics/DebugProvider.Unix.cs:28\n#7  0x0000002aaad6dbe4 in S_P_CoreLib_System_Diagnostics_DebugProvider__Fail (this=..., message=..., detailMessage=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Diagnostics/DebugProvider.cs:29\n#8  0x0000002aaad6cc30 in S_P_CoreLib_System_Diagnostics_Debug__Fail_0 (message=..., detailMessage=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Debug.cs:134\n#9  0x0000002aaad6cb74 in S_P_CoreLib_System_Diagnostics_Debug__Assert_2 (condition=false, message=..., detailMessage=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Debug.cs:98\n#10 0x0000002aaad6cb2c in S_P_CoreLib_System_Diagnostics_Debug__Assert_0 (condition=false, message=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Debug.cs:87\n#11 0x0000002aaadd535c in S_P_TypeLoader_Internal_NativeFormat_NativeReader__ThrowBadImageFormatException () at /runtime/src/coreclr/tools/Common/Internal/NativeFormat/NativeFormatReader.cs:258\n#12 0x0000002aaadd576c in S_P_TypeLoader_Internal_NativeFormat_NativeReader__EnsureOffsetInRange (this=..., offset=\u003coptimized out\u003e, lookAhead=\u003coptimized out\u003e) at /runtime/src/coreclr/tools/Common/Internal/NativeFormat/NativeFormatReader.cs:268\n#13 0x0000002aaadd5940 in S_P_TypeLoader_Internal_NativeFormat_NativeReader__DecodeUnsigned (this=..., offset=10043, value=@0x3fffffea68: 0) at /runtime/src/coreclr/tools/Common/Internal/NativeFormat/NativeFormatReader.cs:318\n#14 0x0000002aaadd5b08 in S_P_TypeLoader_Internal_NativeFormat_NativeReader__DecodeString (this=..., offset=\u003coptimized out\u003e, value=...) at /runtime/src/coreclr/tools/Common/Internal/NativeFormat/NativeFormatReader.String.cs:41\n#15 0x0000002aaadd60e8 in S_P_TypeLoader_Internal_NativeFormat_NativeParser__GetString (this=...) at /runtime/src/coreclr/tools/Common/Internal/NativeFormat/NativeFormatReader.String.cs:19\n#16 0x0000002aaadd0cec in S_P_TypeLoader_Internal_Runtime_TypeLoader_TypeLoaderEnvironment__GetMethodNameAndSignature (parser=..., moduleHandle=..., methodNameSig=..., methodSig=...)\n    at /runtime/src/coreclr/nativeaot/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/TypeLoaderEnvironment.SignatureParsing.cs:136\n#17 0x0000002aaadc1608 in S_P_TypeLoader_Internal_Runtime_TypeLoader_NativeLayoutInfoLoadContext__GetMethod (this=..., parser=..., methodNameSig=..., methodSig=...)\n    at /runtime/src/coreclr/nativeaot/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/NativeLayoutInfoLoadContext.cs:186\n#18 0x0000002aaadc1754 in S_P_TypeLoader_Internal_Runtime_TypeLoader_NativeLayoutInfoLoadContext__GetMethod_0 (this=..., parser=...)\n    at /runtime/src/coreclr/nativeaot/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/NativeLayoutInfoLoadContext.cs:214\n#19 0x0000002aaadcaeb0 in S_P_TypeLoader_Internal_Runtime_TypeLoader_TypeLoaderEnvironment__TryParseNativeSignatureWorker (typeSystemContext=..., moduleHandle=..., parser=..., typeGenericArgumentHandles=..., methodGenericArgumentHandles=..., \n    isMethodSignature=\u003coptimized out\u003e) at /runtime/src/coreclr/nativeaot/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/TypeLoaderEnvironment.cs:478\n#20 0x0000002aaadc9d6c in S_P_TypeLoader_Internal_Runtime_TypeLoader_TypeLoaderEnvironment__GetMethodFromSignatureAndContext (this=..., context=..., signature=..., typeArgs=..., methodArgs=..., remainingSignature=...)\n    at /runtime/src/coreclr/nativeaot/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/TypeLoaderEnvironment.cs:256\n#21 0x0000002aaadce78c in S_P_TypeLoader_Internal_Runtime_TypeLoader_TypeLoaderEnvironment__GetMethodDescForStaticRuntimeMethodHandle (this=..., context=..., runtimeMethodHandle=...)\n    at /runtime/src/coreclr/nativeaot/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/TypeLoaderEnvironment.LdTokenResultLookup.cs:447\n#22 0x0000002aaadcdf38 in S_P_TypeLoader_Internal_Runtime_TypeLoader_TypeLoaderEnvironment__GetMethodDescForRuntimeMethodHandle (this=..., context=..., runtimeMethodHandle=...)\n    at /runtime/src/coreclr/nativeaot/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/TypeLoaderEnvironment.LdTokenResultLookup.cs:326\n#23 0x0000002aaadcc194 in S_P_TypeLoader_Internal_Runtime_TypeLoader_TypeLoaderEnvironment__ResolveGenericVirtualMethodTarget (this=..., type=..., slot=...)\n    at /runtime/src/coreclr/nativeaot/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/TypeLoaderEnvironment.GVMResolution.cs:128\n#24 0x0000002aaadd2758 in S_P_TypeLoader_Internal_Runtime_TypeLoader_Callbacks__ResolveGenericVirtualMethodTarget (this=..., targetTypeHandle=..., declMethod=...)\n    at /runtime/src/coreclr/nativeaot/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/TypeLoaderEnvironment.cs:74\n#25 0x0000002aaad38044 in S_P_CoreLib_System_Runtime_TypeLoaderExports__CacheMiss_0 (context=183256355464, signature=183256260696, factory=..., contextObject=...)\n    at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Runtime/TypeLoaderExports.cs:151\n#26 0x0000002aaad37fe0 in S_P_CoreLib_System_Runtime_TypeLoaderExports__GVMLookupForSlotSlow (obj=..., slot=...) at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Runtime/TypeLoaderExports.cs:109\n#27 0x0000002aaad37ef0 in S_P_CoreLib_System_Runtime_TypeLoaderExports__GVMLookupForSlot (obj=..., slot=...) at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Runtime/TypeLoaderExports.cs:104\n#28 0x0000002aaade1e50 in app1_Generics_TestSimpleGVMScenarios__Run () at /app1/Program.cs:4332\n#29 0x0000002aaaddbfc8 in app1_Generics__Run () at /app1/Program.cs:2833\n#30 0x0000002aaaddb99c in app1_Program___Main__ (args=...) at /app1/Program.cs:44\n#31 0x0000002aaae35b98 in app1__Module___StartupCodeMain () at /runtime/src/coreclr/nativeaot/Common/src/System/Collections/Generic/LowLevelDictionary.cs:287\n#32 0x0000002aaac09808 in main (argc=1, argv=0x3ffffff188) at /runtime/src/coreclr/nativeaot/Bootstrap/main.cpp:225\n```\n\nIt\u0027s throwing from: \nhttps://github.com/dotnet/runtime/blob/02127c782adbf0cded3ed0778d4bf694e5e75996/src/coreclr/tools/Common/Internal/NativeFormat/NativeFormatReader.cs#L262-L265\n\nI changed it to\n\n```\nif ((int)offset \u003c 0 || offset + lookAhead \u003e= _size)\n{\n    string message = $\"offset: {offset}, lookAhead: {lookAhead}, _size: {_size}\";\n    Console.WriteLine(message);\n    ThrowBadImageFormatException();\n}\n```\nand it prints `offset: 10043, lookAhead: 0, _size: 0`. EnsureOffsetInRange\u0027s called 25308 times since the start before it throws on this path.",
                                           "updatedAt":  "2025-02-14T18:02:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ekuFg",
                                           "createdAt":  "2025-02-14T22:53:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGdt_Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-15T04:53:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "(Looks like I accidentally pushed a merge commit into your branch. Sorry about that, I was switching between machines and accidentally pushed the state from the RISC-V machine...)\n\nThere\u0027s a corruption that happens quite early on, probably on the first GC. It manifests by incorrect values in some objects. I got GC tracing working on my machine but I still need some debugging time to make sense out of it.",
                                           "updatedAt":  "2025-02-14T22:53:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6emKYh",
                                           "createdAt":  "2025-02-15T08:04:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I pushed a commit to fix software write watch but that doesn\u0027t really move the needle. I figured it would be worth a try to run with `DOTNET_gcConservative=1` but apparently that\u0027s broken too because it reports stack bounds that lead to access violation.",
                                           "updatedAt":  "2025-02-15T08:04:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6emL4X",
                                           "createdAt":  "2025-02-15T08:22:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "```sh\n% git grep -i \u0027RETAIL.*gc\u0027 \u0027:/*clrconfigvalues.h\u0027 | sed -E \u0027s/.*W\\(\"([^\"]+)\"\\).*/DOTNET_\\1/\u0027\nDOTNET_GCBreakOnOOM\nDOTNET_gcConcurrent\nDOTNET_gcConservative\nDOTNET_gcServer\nDOTNET_GCRetainVM\nDOTNET_gcAllowVeryLargeObjects\nDOTNET_CheckDoubleReporting\nDOTNET_GCStress\nDOTNET_HeapVerify\nDOTNET_GCCpuGroup\nDOTNET_GCName\nDOTNET_GCPath\nDOTNET_ETW_ObjectAllocationEventsPerTypePerSec\nDOTNET_Thread_DeadThreadCountThresholdForGCTrigger\nDOTNET_Thread_DeadThreadGCTriggerPeriodMilliseconds\nDOTNET_Thread_AssignCpuGroups\nDOTNET_InteropValidatePinnedObjects\nDOTNET_LogCCWRefCountChange\nDOTNET_GCGenAnalysisGen\nDOTNET_GCGenAnalysisBytes\nDOTNET_GCGenAnalysisTimeUSec\nDOTNET_GCGenAnalysisTimeMSec\nDOTNET_GCGenAnalysisIndex\nDOTNET_GCGenAnalysisCmd\nDOTNET_GCGenAnalysisTrace\nDOTNET_GCGenAnalysisDump\nDOTNET_LTTngConfig\nDOTNET_DisableConfigCache\nDOTNET_RestrictedGCStressExe\n```\n\nare we expecting all of them to work? 👀 ",
                                           "updatedAt":  "2025-02-15T08:22:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6emM5H",
                                           "createdAt":  "2025-02-15T08:30:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGd8_A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-15T08:43:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Some of them. `DOTNET_gcConservative` is kinda nice for bring-up because it will report any objects on stack or registers to GC even if the GC info is wrong/incorrect, and it bypasses some context captures too.",
                                           "updatedAt":  "2025-02-15T08:30:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6emOqQ",
                                           "createdAt":  "2025-02-15T08:47:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGeGHw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-15T10:40:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Actually, the crash with `DOTNET_gcConservative` is kinda nice:\n```\n0x0000002aaac52d24 in GcEnumObjectsConservatively (ppLowerBound=0x2aaaed176c \u003cS_P_CoreLib_System_Runtime_RuntimeExports__RhBox+412\u003e, ppUpperBound=0x3ffffff000, \n    fnGcEnumRef=0x2aaad7d1b8 \u003cSVR::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pSc=0x3fad3fea98) at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/GcEnum.cpp:53\n```\n\nIt means that there\u0027s a swapped instruction and stack pointer somewhere. Should not be hard to find :)\n\n```\nThread 2 \".NET Server GC\" hit Breakpoint 1, Thread::GcScanRoots (this=0x3ff7dc37a0, pfnEnumCallback=0x2aaad7d1b8 \u003cSVR::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, \n    pvCallbackData=0x3fad3fea98) at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/thread.cpp:419\n419         GcScanRootsWorker(pfnEnumCallback, pvCallbackData, frameIterator);\n(gdb) p/x frameIterator\n$4 = {m_pThread = 0x3ff7dc37a0, m_pInstance = 0x2aab1a80d0, m_FramePointer = 0x3fad3fda78, m_ControlPC = 0x2aaaed176c, m_RegDisplay = {pR0 = 0x0, pRA = 0x3fffffcdc8, \n    SP = 0x2aaaed176c, pGP = 0x0, pTP = 0x0, pT0 = 0x0, pT1 = 0x0, pT2 = 0x0, pFP = 0x3fffffcdc0, pS1 = 0x3fffffcde0, pA0 = 0x0, pA1 = 0x0, pA2 = 0x0, pA3 = 0x0, pA4 = 0x0, pA5 = 0x0, \n    pA6 = 0x0, pA7 = 0x0, pS2 = 0x3fffffcde8, pS3 = 0x3fffffcdf0, pS4 = 0x3fffffcdf8, pS5 = 0x3fffffce00, pS6 = 0x3fffffce08, pS7 = 0x3fffffce10, pS8 = 0x3fffffce18, \n    pS9 = 0x3fffffce20, pS10 = 0x3fffffce28, pS11 = 0x3fffffce30, pT3 = 0x0, pT4 = 0x0, pT5 = 0x0, pT6 = 0x0, IP = 0x2aaaed176c, F = {0x0 \u003crepeats 32 times\u003e}}, m_pCodeManager = 0x0, \n  m_methodInfo = {dummyPtrs = {0x2aab1aaf80, 0x2aab1aaf80, 0x0, 0x3fad3fea98, 0x3ff7dc3830}, dummyInts = {0x6, 0x9, 0xb3400bd8, 0xa, 0xad3fdd48, 0x100003f, 0x0, 0x0}}, \n  m_effectiveSafePointAddress = 0xab3400bd8, m_pConservativeStackRangeLowerBound = 0x0, m_pConservativeStackRangeUpperBound = 0x0, m_dwFlags = 0x8a, m_pNextExInfo = 0x3fffffe668, \n  m_pendingFuncletFramePointer = 0x0, m_funcletPtrs = {pS1 = 0x717d05c88e6db700, pS2 = 0x3fad3fdd30, pS3 = 0x2aaac52eba, pS4 = 0x3fad3fea98, pS5 = 0x2aaad7d1b8, pS6 = 0xad3fdd70, \n    pS7 = 0x3ff7dc3830, pS8 = 0x3fad3fdd70, pS9 = 0x2aaac52e28, pS10 = 0x1, pS11 = 0x1, pFP = 0x3fad3fea98}, m_OriginalControlPC = 0x2aaaed176c, \n  m_pPreviousTransitionFrame = 0x3fffffcdc0}\n(gdb) p/x this\n$5 = 0x3ff7dc37a0\n(gdb) p/x *this\n$6 = {\u003cRuntimeThreadLocals\u003e = {m_eeAllocContext = {combined_limit = 0x0, m_rgbAllocContextBuffer = {0x0 \u003crepeats 17 times\u003e, 0xf1, 0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x3, 0x3, 0x0, \n        0x0, 0x0, 0x0, 0x0, 0x60, 0xaf, 0x1a, 0xab, 0x2a, 0x0, 0x0, 0x0, 0x60, 0xaf, 0x1a, 0xab, 0x2a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x83, 0x0, 0x0, 0x0, 0x0, 0x0}, static t_random = {\n        random_state = {s = {0x0, 0x0, 0x0, 0x0}}}}, m_ThreadStateFlags = 0x1, m_pTransitionFrame = 0x3fffffcdc0, m_pDeferredTransitionFrame = 0x3fffffcdc0, \n    m_pCachedTransitionFrame = 0x3fffffcdc0, m_pNext = 0x3fa6a007e0, m_ppvHijackedReturnAddressLocation = 0x0, m_pvHijackedReturnAddress = 0x0, m_pExInfoStackHead = 0x3fffffe668, \n    m_threadAbortException = 0x0, m_hOSThread = 0x3ff7dc3020, m_pThreadLocalStatics = 0xab3400bd8, m_pInlinedThreadLocalStatics = 0x0, m_pGCFrameRegistrations = 0x0, \n    m_pStackLow = 0x3fff800000, m_pStackHigh = 0x3ffffff000, m_threadId = 0x4e96c, m_pThreadStressLog = 0x0, m_interruptedContext = 0x0, m_uRand = 0x0}, \n  static s_DeadThreadsNonAllocBytes = 0x0}\n(gdb) p/x m_pTransitionFrame\n$7 = 0x3fffffcdc0\n(gdb) p/x *m_pTransitionFrame\n$8 = {m_FramePointer = 0x3fffffcef0, m_RIP = 0x2aaaed176c, m_pThread = 0x1000000000, m_Flags = 0xfff, m_PreservedRegs = 0x3fffffcde0}\n(gdb) \n```\n^ notice that `m_RIP` from the transition frame ends up in `SP` of `frameIterator.m_RegDisplay`",
                                           "updatedAt":  "2025-02-15T08:54:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6emRNi",
                                           "createdAt":  "2025-02-15T09:12:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGeGJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-15T10:40:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "One thing I noticed is that there\u0027s a disparity in the information saved by `PUSH_COOP_PINVOKE_FRAME`. It fails to save `s11` register which is part of `DEFAULT_FRAME_SAVE_FLAGS`.\n\nUPD: Pushed a fix. Gets a bit further with `DOTNET_gcConservative` but corruption is still happening after first GC.",
                                           "updatedAt":  "2025-02-15T09:37:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6emntC",
                                           "createdAt":  "2025-02-15T13:21:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Nice progress! Last few changes also fixed the problem with determinism smoke test. 👍\n\n\u003e  corruption is still happening after first GC.\n\nYup, the second GC is failing with `DOTNET_gcConservative=1`:\n```c#\nusing System;\nusing System.Collections.Generic;\n\nList\u003cobject\u003e objs = new();\nfor (int i = 0; i \u003c 10000; i++) objs.Add(new object());\nGC.Collect();\nGC.WaitForPendingFinalizers();\nGC.Collect(); // \u003c- second GC\n\nConsole.WriteLine(objs.Count);\n```\n\n```gdb\n# regular run\n(gdb) r\nStarting program: /tmp/app1 \n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/riscv64-linux-gnu/libthread_db.so.1\".\n[New Thread 0x3fad751060 (LWP 22053)]\n[New Thread 0x3facd1b060 (LWP 22054)]\n10000\n[Thread 0x3fad751060 (LWP 22053) exited]\n[Thread 0x3ff7db6020 (LWP 22051) exited]\n[Thread 0x3facd1b060 (LWP 22054) exited]\n[New process 22051]\n[Inferior 1 (process 22051) exited normally]\n\n# no error\n\n# gcConservative run:\n\n(gdb) set env DOTNET_gcConservative=1\n\n(gdb) r\nStarting program: /tmp/app1 \n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/riscv64-linux-gnu/libthread_db.so.1\".\n[New Thread 0x3fad751060 (LWP 22018)]\n\nThread 1 \"app1\" received signal SIGSEGV, Segmentation fault.\n0x0000002aaab7ee52 in GcEnumObjectsConservatively (ppLowerBound=0x0, ppUpperBound=0x4000000000, fnGcEnumRef=0x2aaabcc986 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pSc=0x3fffffe6e8)\n    at /runtime/src/coreclr/nativeaot/Runtime/GcEnum.cpp:53\n53\t            PTR_Object pObj = *ppObj;\n\n(gdb) bt\n#0  0x0000002aaab7ee52 in GcEnumObjectsConservatively (ppLowerBound=0x0, ppUpperBound=0x4000000000, fnGcEnumRef=0x2aaabcc986 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pSc=0x3fffffe6e8)\n    at /runtime/src/coreclr/nativeaot/Runtime/GcEnum.cpp:53\n#1  0x0000002aaab7ee08 in EnumGcRefsInRegionConservatively (pLowerBound=0x0, pUpperBound=0x4000000000, pfnEnumCallback=0x2aaabcc986 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pvCallbackData=0x3fffffe6e8)\n    at /runtime/src/coreclr/nativeaot/Runtime/GcEnum.cpp:65\n#2  0x0000002aaab8aafc in Thread::GcScanRootsWorker (this=0x3ff7db67a0, pfnEnumCallback=0x2aaabcc986 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pvCallbackData=0x3fffffe6e8, frameIterator=...)\n    at /runtime/src/coreclr/nativeaot/Runtime/thread.cpp:503\n#3  0x0000002aaab8a944 in Thread::GcScanRoots (this=0x3ff7db67a0, pfnEnumCallback=0x2aaabcc986 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pvCallbackData=0x3fffffe6e8) at /runtime/src/coreclr/nativeaot/Runtime/thread.cpp:419\n#4  0x0000002aaab7d626 in GCToEEInterface::GcScanRoots (fn=0x2aaabcc986 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, condemned=2, max_gen=2, sc=0x3fffffe6e8) at /runtime/src/coreclr/nativeaot/Runtime/gcenv.ee.cpp:122\n#5  0x0000002aaabf5a54 in GCScan::GcScanRoots (fn=0x2aaabcc986 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, condemned=2, max_gen=2, sc=0x3fffffe6e8) at /runtime/src/coreclr/gc/gcscan.cpp:154\n#6  0x0000002aaabb536c in WKS::gc_heap::mark_phase (condemned_gen_number=2) at /runtime/src/coreclr/gc/gc.cpp:30249\n#7  0x0000002aaabb1956 in WKS::gc_heap::gc1 () at /runtime/src/coreclr/gc/gc.cpp:22694\n#8  0x0000002aaabc3194 in WKS::gc_heap::garbage_collect (n=2) at /runtime/src/coreclr/gc/gc.cpp:24866\n#9  0x0000002aaaba9cc2 in WKS::GCHeap::GarbageCollectGeneration (this=0x2aaad50190, gen=2, reason=reason_induced) at /runtime/src/coreclr/gc/gc.cpp:51499\n#10 0x0000002aaabebf26 in WKS::GCHeap::GarbageCollectTry (this=0x2aaad50190, generation=2, low_memory_p=0, mode=2) at /runtime/src/coreclr/gc/gc.cpp:50693\n#11 0x0000002aaabebdae in WKS::GCHeap::GarbageCollect (this=0x2aaad50190, generation=2, low_memory_p=false, mode=2) at /runtime/src/coreclr/gc/gc.cpp:50623\n#12 0x0000002aaab7baa6 in RhpCollect (uGeneration=4294967295, uMode=2, lowMemoryP=0) at /runtime/src/coreclr/nativeaot/Runtime/GCHelpers.cpp:114\n#13 0x0000002aaac80e3c in S_P_CoreLib_System_Runtime_InternalCalls__RhCollect (generation=0, mode=0, lowMemoryP=134) at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/InternalCalls.cs:65\n#14 0x0000002aaacb73d4 in app1_Program___Main__ (args=...) at /app1/Program.cs:8\n#15 0x0000002aaacdcec8 in app1__Module___StartupCodeMain () at /runtime/src/coreclr/nativeaot/Common/src/System/Collections/Generic/LowLevelDictionary.cs:287\n#16 0x0000002aaab789f4 in main (argc=1, argv=0x3ffffff168) at /runtime/src/coreclr/nativeaot/Bootstrap/main.cpp:225\n```\n\nI compared the execution steps with arm64, and the difference starts at: https://github.com/dotnet/runtime/blob/58b068bea2c150d19ff642d751e6111a50f05c33/src/coreclr/nativeaot/Runtime/thread.cpp#L481, it is returning null on riscv64 at this step:\n\n```gdb\n(gdb) p pLowerBound\n$1 = (PTR_VOID) 0x0\n(gdb) bt\n#0  Thread::GcScanRootsWorker (this=0x3ff7db67a0, pfnEnumCallback=0x2aaabcc986 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pvCallbackData=0x3fffffe6e8, frameIterator=...)\n    at /runtime/src/coreclr/nativeaot/Runtime/thread.cpp:484\n#1  0x0000002aaab8a944 in Thread::GcScanRoots (this=0x3ff7db67a0, pfnEnumCallback=0x2aaabcc986 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pvCallbackData=0x3fffffe6e8) at /runtime/src/coreclr/nativeaot/Runtime/thread.cpp:419\n#2  0x0000002aaab7d626 in GCToEEInterface::GcScanRoots (fn=0x2aaabcc986 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, condemned=2, max_gen=2, sc=0x3fffffe6e8) at /runtime/src/coreclr/nativeaot/Runtime/gcenv.ee.cpp:122\n#3  0x0000002aaabf5a54 in GCScan::GcScanRoots (fn=0x2aaabcc986 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, condemned=2, max_gen=2, sc=0x3fffffe6e8) at /runtime/src/coreclr/gc/gcscan.cpp:154\n#4  0x0000002aaabb536c in WKS::gc_heap::mark_phase (condemned_gen_number=2) at /runtime/src/coreclr/gc/gc.cpp:30249\n#5  0x0000002aaabb1956 in WKS::gc_heap::gc1 () at /runtime/src/coreclr/gc/gc.cpp:22694\n#6  0x0000002aaabc3194 in WKS::gc_heap::garbage_collect (n=2) at /runtime/src/coreclr/gc/gc.cpp:24866\n#7  0x0000002aaaba9cc2 in WKS::GCHeap::GarbageCollectGeneration (this=0x2aaad50190, gen=2, reason=reason_induced) at /runtime/src/coreclr/gc/gc.cpp:51499\n#8  0x0000002aaabebf26 in WKS::GCHeap::GarbageCollectTry (this=0x2aaad50190, generation=2, low_memory_p=0, mode=2) at /runtime/src/coreclr/gc/gc.cpp:50693\n#9  0x0000002aaabebdae in WKS::GCHeap::GarbageCollect (this=0x2aaad50190, generation=2, low_memory_p=false, mode=2) at /runtime/src/coreclr/gc/gc.cpp:50623\n#10 0x0000002aaab7baa6 in RhpCollect (uGeneration=4294967295, uMode=2, lowMemoryP=0) at /runtime/src/coreclr/nativeaot/Runtime/GCHelpers.cpp:114\n#11 0x0000002aaac80e3c in S_P_CoreLib_System_Runtime_InternalCalls__RhCollect (generation=-136616032, mode=0, lowMemoryP=232) at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/InternalCalls.cs:65\n#12 0x0000002aaacb73d4 in app1_Program___Main__ (args=...) at /app1/Program.cs:8\n#13 0x0000002aaacdcec8 in app1__Module___StartupCodeMain () at /runtime/src/coreclr/nativeaot/Common/src/System/Collections/Generic/LowLevelDictionary.cs:287\n#14 0x0000002aaab789f4 in main (argc=1, argv=0x3ffffff168) at /runtime/src/coreclr/nativeaot/Bootstrap/main.cpp:225\n```",
                                           "updatedAt":  "2025-02-15T13:21:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6emqUT",
                                           "createdAt":  "2025-02-15T13:55:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGed-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-15T15:22:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I\u0027ll need to sleep a bit on the GC corruption issue. I have a very reliable repro that I can repeatedly run and get the exact same corruption at the exact same places. It\u0027s as close as I can get to a time travel debugging 😅. Unfortunately, I still didn\u0027t crack what is happening.\n\nDuring the first call to `S_P_CoreLib_System_Threading_ManagedThreadId_ImmutableIdDispenser__AllocateId` there\u0027s an initialization of static variables going on. First, `s_idDispenser` (`0xaaac005e0`) is initialized to an instance returned by `ImmutableIdDisposer.Empty`:\n```\n(gdb) x/g 0xaaac005e0\n0xaaac005e0:    0x0000000ab3400c68\n```\nIt\u0027s subsequently replaced by a new instance after the first thread ID is allocated:\n```\n(gdb) x/g 0xaaac005e0\n0xaaac005e0:    0x0000000ab3400c98\n```\n\nThen the program proceeds to continue until the next GC is triggered ([log](https://gist.github.com/filipnavara/5e7681823981f8d9606646902fc75362)). Persumably, this should collect the first `ImmutableIdDisposer.Empty` instance, relocate the currently used one, and update the reference in the static variable.\n\nHowever, next time `AllocateId` is called on a new finalizer thread, the memory points to the same location and it reads garbage from other objects:\n```\n(gdb) x/g 0xaaac005e0\n0xaaac005e0:    0x0000000ab3400c98\n```",
                                           "updatedAt":  "2025-02-15T14:06:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6enWey",
                                           "createdAt":  "2025-02-15T21:37:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I believe there\u0027s an issue in `INSERT_UNCHECKED_WRITE_BARRIER_CORE`:\n\n```\n        // Check that this card has not already been written. Avoiding useless writes\n        // is a big win on multi-proc systems since it avoids cache thrashing.\n        lb      t2, 0(t6)\n        li      t6, 0xFF\n        beq     t2, t6, 0f\n\n        sb      t6, 0(t6)\n\n#ifdef FEATURE_MANUALLY_MANAGED_CARD_BUNDLES\n        // Check if we need to update the card bundle table\n        la      t2, g_card_bundle_table\n        srli    t6, \\destReg, 21\n        add     t6, t2, t6\n        lb      t2, 0(t6)\n        li      t6, 0xFF\n        beq     t2, t6, 0f\n\n        sb      t6, 0(t6)\n#endif\n```\n\nBoth of the `sb      t6, 0(t6)` instructions will have `t6` trashed and overwritten with the value `0xff` instead of actually modifying the memory location that it previously computed. Don\u0027t you think?",
                                           "updatedAt":  "2025-02-15T21:37:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6enXS0",
                                           "createdAt":  "2025-02-15T21:50:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGfXtg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-16T04:27:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I pushed a commit with the write barrier fixes. It fixes at least some of the GC issues.",
                                           "updatedAt":  "2025-02-15T22:05:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6enZ2-",
                                           "createdAt":  "2025-02-15T22:26:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "The Exceptions test passes locally for me with default GC settings. With conservative GC it still crashes:\n```\nNull reference exception caught!\nTest Stacktrace with exception on stack:\n   at BringUpTest.FilterWithStackTrace(Exception) + 0x58\n   at BringUpTest.Main() + 0x768\n   at BringUpTest.Main() + 0x2fc\n\nException caught via filter!\nExecuting finally in Main + ThrowExcThroughMethodsWithFinalizers1 + ThrowExcThroughMethodsWithFinalizers2\nExecuting finally in Main + ThrowExcThroughMethodsWithFinalizers1\nThrowExcThroughMethodsWithFinalizers2\nException triggered FirstChanceException event handler\n\nThread 2 \".NET Server GC\" received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x3fad400060 (LWP 81779)]\n0x0000002aaac45e90 in GcEnumObjectsConservatively (ppLowerBound=0xbaaddeed, ppUpperBound=0x3ffffff000, fnGcEnumRef=0x2aaad51b88 \u003cSVR::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, \n    pSc=0x3fad3fecc8) at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/GcEnum.cpp:53\n53                  PTR_Object pObj = *ppObj;\n```\nThat looks quite debuggable though. \n\nI rebased the branch to get rid of the merge commit I accidentally introduced earlier. Since the NuGet pruning PR was merged I don\u0027t have any local build file changes except for the updated SDK version in global.json. I do, however, run parts of the build as cross-build (w/ `ROOTFS_DIR=/`) to workaround some build errors.",
                                           "updatedAt":  "2025-02-15T22:57:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6enz7N",
                                           "createdAt":  "2025-02-16T04:20:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e 53                  PTR_Object pObj = *ppObj;\n\nLooks the same as https://github.com/dotnet/runtime/issues/106223#issuecomment-2660924226. I wasn\u0027t getting the other error for some reason (with conservative+servergc).",
                                           "updatedAt":  "2025-02-16T04:20:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eoDL9",
                                           "createdAt":  "2025-02-16T07:36:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e \u003e 53                  PTR_Object pObj = *ppObj;\n\u003e \n\u003e Looks the same as [#106223 (comment)](https://github.com/dotnet/runtime/issues/106223#issuecomment-2660924226). I wasn\u0027t getting the other error for some reason (with conservative+servergc).\n\nAh, except, now it\u0027s failing on first GC and lowerbound is non-null.\n\n```gdb\nThread 2 \".NET Server GC\" received signal SIGSEGV, Segmentation fault.\n0x0000002aaab86480 in GcEnumObjectsConservatively (ppLowerBound=0x2aaaddc3e0, ppUpperBound=0x4000000000, fnGcEnumRef=0x2aaac753c6 \u003cSVR::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pSc=0x3fad606cc8)\n    at /runtime/src/coreclr/nativeaot/Runtime/GcEnum.cpp:53\n53\t            PTR_Object pObj = *ppObj;\n```\n\nBTW, I\u0027ve pushed a commit to disable one R2R call in packs subset (relevant to cross-arch build).",
                                           "updatedAt":  "2025-02-16T07:36:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eoDw1",
                                           "createdAt":  "2025-02-16T07:44:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Ah, except, now it\u0027s failing on first GC and lowerbound is non-null.\n\nThat lower bound looks like a code address. Can you run `info symbol` on it? It\u0027s likely similar bug as the missing S11 saving that shifts some value in the context.",
                                           "updatedAt":  "2025-02-16T07:44:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eoEq4",
                                           "createdAt":  "2025-02-16T07:55:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "The incorrect lower bound I get is from inside the `RhpCollect` call, so it may be the same root cause. `sd    t0, OFFSETOF__PInvokeTransitionFrame__m_PreservedRegs(a0)` in `RhpPInvoke` looks suspicious. The value is never initialized. ",
                                           "updatedAt":  "2025-02-16T07:55:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eoFAt",
                                           "createdAt":  "2025-02-16T08:00:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "The issue seems to be invalid `ppObj` in this context:\n\n```gdb\nThread 2 \".NET Server GC\" received signal SIGSEGV, Segmentation fault.\n0x0000002aaab86480 in GcEnumObjectsConservatively (ppLowerBound=0x2aaaddc3e0, ppUpperBound=0x4000000000, fnGcEnumRef=0x2aaac753c6 \u003cSVR::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pSc=0x3fad606cc8)\n    at /runtime/src/coreclr/nativeaot/Runtime/GcEnum.cpp:53\n53\t            PTR_Object pObj = *ppObj;\n(gdb) info symbol ppLowerBound \nNo symbol matches ppLowerBound.\n(gdb) p ppLowerBound \n$8 = (PTR_PTR_Object) 0x2aaaddc3e0\n(gdb) p/x ppObj\n$13 = 0x2aaae3d000\n(gdb) x/x ppObj\n0x2aaae3d000:\tCannot access memory at address 0x2aaae3d000\n(gdb) disas\nDump of assembler code for function _ZL27GcEnumObjectsConservativelyPP6ObjectS1_PFvS1_P11ScanContextjES3_:\n   0x0000002aaab8643e \u003c+0\u003e:\taddi\tsp,sp,-64\n   0x0000002aaab86440 \u003c+2\u003e:\tsd\tra,56(sp)\n   0x0000002aaab86442 \u003c+4\u003e:\tsd\ts0,48(sp)\n   0x0000002aaab86444 \u003c+6\u003e:\taddi\ts0,sp,64\n   0x0000002aaab86446 \u003c+8\u003e:\tsd\ta0,-24(s0)\n   0x0000002aaab8644a \u003c+12\u003e:\tsd\ta1,-32(s0)\n   0x0000002aaab8644e \u003c+16\u003e:\tsd\ta2,-40(s0)\n   0x0000002aaab86452 \u003c+20\u003e:\tsd\ta3,-48(s0)\n   0x0000002aaab86456 \u003c+24\u003e:\tld\ta0,-48(s0)\n   0x0000002aaab8645a \u003c+28\u003e:\tlbu\ta0,24(a0)\n   0x0000002aaab8645e \u003c+32\u003e:\tandi\ta0,a0,1\n   0x0000002aaab86460 \u003c+34\u003e:\tbeqz\ta0,0x2aaab864d2 \u003c_ZL27GcEnumObjectsConservativelyPP6ObjectS1_PFvS1_P11ScanContextjES3_+148\u003e\n   0x0000002aaab86462 \u003c+36\u003e:\tj\t0x2aaab86464 \u003c_ZL27GcEnumObjectsConservativelyPP6ObjectS1_PFvS1_P11ScanContextjES3_+38\u003e\n   0x0000002aaab86464 \u003c+38\u003e:\tld\ta0,-24(s0)\n   0x0000002aaab86468 \u003c+42\u003e:\tsd\ta0,-56(s0)\n   0x0000002aaab8646c \u003c+46\u003e:\tj\t0x2aaab8646e \u003c_ZL27GcEnumObjectsConservativelyPP6ObjectS1_PFvS1_P11ScanContextjES3_+48\u003e\n   0x0000002aaab8646e \u003c+48\u003e:\tld\ta0,-56(s0)\n   0x0000002aaab86472 \u003c+52\u003e:\tld\ta1,-32(s0)\n   0x0000002aaab86476 \u003c+56\u003e:\tbgeu\ta0,a1,0x2aaab864d0 \u003c_ZL27GcEnumObjectsConservativelyPP6ObjectS1_PFvS1_P11ScanContextjES3_+146\u003e\n   0x0000002aaab8647a \u003c+60\u003e:\tj\t0x2aaab8647c \u003c_ZL27GcEnumObjectsConservativelyPP6ObjectS1_PFvS1_P11ScanContextjES3_+62\u003e\n   0x0000002aaab8647c \u003c+62\u003e:\tld\ta0,-56(s0)\n=\u003e 0x0000002aaab86480 \u003c+66\u003e:\tld\ta0,0(a0)\n   0x0000002aaab86482 \u003c+68\u003e:\tsd\ta0,-64(s0)\n```",
                                           "updatedAt":  "2025-02-16T08:03:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eoGVr",
                                           "createdAt":  "2025-02-16T08:12:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGfsvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-16T09:29:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I pushed a one line fix to `RhpPInvoke`. That solves my `ppLowerBound` issue.",
                                           "updatedAt":  "2025-02-16T08:12:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eoN_7",
                                           "createdAt":  "2025-02-16T09:31:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Thanks, rebuilding from scratch and will try it out soon. (I switched branches for https://github.com/dotnet/dotnet-buildtools-prereqs-docker/pull/1361; faster way of building rootfs without debootstrap)",
                                           "updatedAt":  "2025-02-16T09:31:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eoPhe",
                                           "createdAt":  "2025-02-16T09:49:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I\u0027ll try to look into the preemptive suspend / GC in `UnitTests` smoke test next.\n\nThe thread that kicks in the GC:\n```\n--------------------------------------------------\nDebug Assertion Violation\n\nExpression: \u0027!(pFrame-\u003em_Flags \u0026 PTFF_SAVE_FP)\u0027\n\nFile: /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp, Line: 281\n--------------------------------------------------\n\nThread 146 \"UnitTests\" received signal SIGABRT, Aborted.\n[Switching to Thread 0x3f9ea00060 (LWP 155357)]\nDownload failed: Invalid argument.  Continuing without source file ./nptl/./nptl/pthread_kill.c.\n0x0000003ff7e2ccf2 in __pthread_kill_implementation (threadid=\u003coptimized out\u003e, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44\nwarning: 44     ./nptl/pthread_kill.c: No such file or directory\n(gdb) bt\n#0  0x0000003ff7e2ccf2 in __pthread_kill_implementation (threadid=\u003coptimized out\u003e, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44\n#1  0x0000003ff7e2cd4e in __pthread_kill_internal (threadid=\u003coptimized out\u003e, signo=6) at ./nptl/pthread_kill.c:78\n#2  0x0000003ff7dee722 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26\n#3  0x0000003ff7ddd588 in __GI_abort () at ./stdlib/abort.c:79\n#4  0x0000002aaad814ec in Assert (expr=0x2aaac792c1 \"!(pFrame-\u003em_Flags \u0026 PTFF_SAVE_FP)\", file=0x2aaac7ead5 \"/home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp\", \n    line_num=281, message=0x0) at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/rhassert.cpp:37\n#5  0x0000002aaad8bbe0 in StackFrameIterator::InternalInit (this=0x3f9e9fe3f0, pThreadToWalk=0x3ff7db47a0, pFrame=0x3fffffe7b0, dwFlags=138)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp:281\n#6  0x0000002aaad8b82a in StackFrameIterator::StackFrameIterator (this=0x3f9e9fe3f0, pThreadToWalk=0x3ff7db47a0, pInitialTransitionFrame=0x3fffffe7b0)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp:92\n#7  0x0000002aaad94474 in Thread::GcScanRoots (this=0x3ff7db47a0, pfnEnumCallback=0x2aaadde4aa \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pvCallbackData=0x3f9e9febd8)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/thread.cpp:418\n#8  0x0000002aaad859fa in GCToEEInterface::GcScanRoots (fn=0x2aaadde4aa \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, condemned=0, max_gen=2, sc=0x3f9e9febd8)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/gcenv.ee.cpp:122\n#9  0x0000002aaae0c5fa in GCScan::GcScanRoots (fn=0x2aaadde4aa \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, condemned=0, max_gen=2, sc=0x3f9e9febd8)\n    at /home/ubuntu/runtime/src/coreclr/gc/gcscan.cpp:154\n#10 0x0000002aaadc4014 in WKS::gc_heap::mark_phase (condemned_gen_number=0) at /home/ubuntu/runtime/src/coreclr/gc/gc.cpp:30255\n#11 0x0000002aaadbfede in WKS::gc_heap::gc1 () at /home/ubuntu/runtime/src/coreclr/gc/gc.cpp:22694\n#12 0x0000002aaadd3706 in WKS::gc_heap::garbage_collect (n=0) at /home/ubuntu/runtime/src/coreclr/gc/gc.cpp:24866\n#13 0x0000002aaadb716e in WKS::GCHeap::GarbageCollectGeneration (this=0x2aab520190, gen=0, reason=reason_alloc_soh) at /home/ubuntu/runtime/src/coreclr/gc/gc.cpp:51505\n#14 0x0000002aaadb8d76 in WKS::gc_heap::trigger_gc_for_alloc (gen_number=0, gr=reason_alloc_soh, msl=0x2aab41a7b8 \u003cWKS::gc_heap::more_space_lock_soh\u003e, loh_p=false, \n    take_state=WKS::mt_try_budget) at /home/ubuntu/runtime/src/coreclr/gc/gc.cpp:19191\n#15 0x0000002aaadba028 in WKS::gc_heap::try_allocate_more_space (acontext=0x3f9ea007e8, size=80, flags=2, gen_number=0) at /home/ubuntu/runtime/src/coreclr/gc/gc.cpp:19329\n#16 0x0000002aaadba1ea in WKS::gc_heap::allocate_more_space (acontext=0x3f9ea007e8, size=80, flags=2, alloc_generation_number=0) at /home/ubuntu/runtime/src/coreclr/gc/gc.cpp:19829\n#17 0x0000002aaae00f06 in WKS::gc_heap::allocate (jsize=80, acontext=0x3f9ea007e8, flags=2) at /home/ubuntu/runtime/src/coreclr/gc/gc.cpp:19860\n#18 WKS::GCHeap::Alloc (this=0x2aab520190, context=0x3f9ea007e8, size=80, flags=2) at /home/ubuntu/runtime/src/coreclr/gc/gc.cpp:50410\n#19 0x0000002aaad841e0 in GcAllocInternal (pEEType=0x2aab50b448, uFlags=2, numElements=7, pThread=0x3f9ea007e0) at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/GCHelpers.cpp:606\n#20 0x0000002aaad83e0c in RhpGcAlloc (pEEType=0x2aab50b448, uFlags=0, numElements=7, pTransitionFrame=0x3f9e9ff4e0) at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/GCHelpers.cpp:680\n#21 0x0000002aaae382fe in RhpNewArrayRare () at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/riscv64/AllocFast.S:252\n#22 0x0000002aab0ce5f8 in S_P_CoreLib_Internal_Runtime_ThreadStatics__GetUninlinedThreadStaticBaseForTypeSlow (pModuleData=0x2aab400c00, typeTlsIndex=6)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/Internal/Runtime/ThreadStatics.cs:99\n#23 0x0000002aab0ce3f0 in S_P_CoreLib_Internal_Runtime_ThreadStatics__GetUninlinedThreadStaticBaseForType (pModuleData=0x2aab400c00, typeTlsIndex=6)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/Internal/Runtime/ThreadStatics.cs:73\n#24 0x0000002aab0ce1ec in S_P_CoreLib_Internal_Runtime_ThreadStatics__GetThreadStaticBaseForType (pModuleData=0x2aab400c00, typeTlsIndex=6)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/Internal/Runtime/ThreadStatics.cs:33\n#25 0x0000002aaafcf600 in S_P_CoreLib_System_Threading_Thread__StartThread (parameter=273492873504)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Threading/Thread.NativeAot.cs:429\n#26 0x0000002aaafd0268 in S_P_CoreLib_System_Threading_Thread__ThreadEntryPoint (parameter=273492873504)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Threading/Thread.NativeAot.Unix.cs:114\n#27 0x0000003ff7e2b2da in start_thread (arg=\u003coptimized out\u003e) at ./nptl/pthread_create.c:447\n#28 0x0000003ff7e7ff88 in __thread_start_clone3 () at ../sysdeps/unix/sysv/linux/riscv/clone3.S:71\n```\n\nThe supposedly suspended thread (?):\n```\n#0  S_P_CoreLib_System_Runtime_InteropServices_SafeHandle__InternalRelease (this=..., disposeOrFinalizeOperation=false)\n    at /home/ubuntu/runtime/src/libraries/System.Private.CoreLib/src/System/Runtime/InteropServices/SafeHandle.cs:197\n#1  0x0000002aab05a028 in S_P_CoreLib_System_Runtime_InteropServices_SafeHandle__DangerousRelease (this=...)\n    at /home/ubuntu/runtime/src/libraries/System.Private.CoreLib/src/System/Runtime/InteropServices/SafeHandle.cs:194\n#2  0x0000002aaafd00e8 in S_P_CoreLib_System_Threading_Thread__JoinInternal (this=..., millisecondsTimeout=0)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Threading/Thread.NativeAot.Unix.cs:86\n#3  0x0000002aaafd0074 in S_P_CoreLib_System_Threading_Thread__JoinInternal (this=..., millisecondsTimeout=0)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Threading/Thread.NativeAot.Unix.cs:82\n#4  0x0000002aaafcf32c in S_P_CoreLib_System_Threading_Thread__StartCore (this=...)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Threading/Thread.NativeAot.cs:395\n#5  0x0000002aaafd0a88 in S_P_CoreLib_System_Threading_Thread__Start_2 (this=..., captureContext=true)\n    at /home/ubuntu/runtime/src/libraries/System.Private.CoreLib/src/System/Threading/Thread.cs:259\n#6  0x0000002aaafd0938 in S_P_CoreLib_System_Threading_Thread__Start_1 (this=...) at /home/ubuntu/runtime/src/libraries/System.Private.CoreLib/src/System/Threading/Thread.cs:232\n#7  0x0000002aab19bcd4 in UnitTests_ThreadTest__TestStartShutdown () at /home/ubuntu/runtime/src/tests/nativeaot/SmokeTests/UnitTests/BasicThreading.cs:576\n#8  0x0000002aab19bf78 in UnitTests_ThreadTest__Run () at /home/ubuntu/runtime/src/tests/nativeaot/SmokeTests/UnitTests/BasicThreading.cs:603\n#9  0x0000002aab1985cc in UnitTests_BasicThreading__Run () at /home/ubuntu/runtime/src/tests/nativeaot/SmokeTests/UnitTests/BasicThreading.cs:25\n#10 0x0000002aab1f52c4 in S_P_CoreLib_System_Func_1\u003cInt32\u003e__InvokeOpenStaticThunk () at /home/ubuntu/runtime/src/libraries/System.Private.CoreLib/src/System/Array.Enumerators.cs:111\n#11 0x0000002aab1abb84 in UnitTests_Program____Main___g__RunTest_0_0 (t=..., name=...) at /home/ubuntu/runtime/src/tests/nativeaot/SmokeTests/UnitTests/Main.cs:23\n#12 0x0000002aab1ab630 in UnitTests_Program___Main__ (args=...) at /home/ubuntu/runtime/src/tests/nativeaot/SmokeTests/UnitTests/Main.cs:7\n#13 0x0000002aab2b4afc in __managed__Main () at /home/ubuntu/runtime/src/libraries/System.Private.CoreLib/src/System/ValueTuple.cs:793\n#14 0x0000002aaad802aa in main (argc=1, argv=0x3fffffeed8) at /home/ubuntu/runtime/src/coreclr/nativeaot/Bootstrap/main.cpp:225\n```",
                                           "updatedAt":  "2025-02-16T10:00:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eoQuU",
                                           "createdAt":  "2025-02-16T10:04:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "This thing in PInvoke.S doesn\u0027t look right:\n```\n        PREPARE_EXTERNAL_VAR_INDIRECT_W RhpTrapThreads, t0\n\n        bnez    t1, 0f  // If TrapThreadsFlags_None is non-zero, branch\n```\nwrong register?",
                                           "updatedAt":  "2025-02-16T10:04:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eoRYJ",
                                           "createdAt":  "2025-02-16T10:10:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "```asm\nLEAF_ENTRY RhpPInvokeReturn, _TEXT\n        ld    t0, OFFSETOF__PInvokeTransitionFrame__m_pThread(a0)\n        mv    t1, zero\n        sd    t1, OFFSETOF__Thread__m_pTransitionFrame(t0)\n\n        PREPARE_EXTERNAL_VAR_INDIRECT_W RhpTrapThreads, t0\n\n        andi    t0, t0, 0xFFFFFFFF  // Mask to lower 32 bits\n        bnez    t0, 0f              // If lower 32 bits are nonzero, branch\n        ret\n```\n\nlike this? (to match arm64\u0027s w9 vs. x9)",
                                           "updatedAt":  "2025-02-16T10:10:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eoRsu",
                                           "createdAt":  "2025-02-16T10:13:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGfwVA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-16T10:16:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I don\u0027t think you need to mask it, just fixing `t0` vs `t1` should be fine. Worst case the slow path checks it again and `PREPARE_EXTERNAL_VAR_INDIRECT_W` already did `lw` which I assumed does zero-extension.",
                                           "updatedAt":  "2025-02-16T10:13:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eoTF7",
                                           "createdAt":  "2025-02-16T10:22:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Pushed, I couldn\u0027t repro it locally before or after the change but t0 does seem correct. 👍 ",
                                           "updatedAt":  "2025-02-16T10:22:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eoTkB",
                                           "createdAt":  "2025-02-16T10:28:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Pushed, I couldn\u0027t repro it locally before or after the change but t0 does seem correct. 👍\n\nThanks. I think there\u0027re more issues around the frames pushed for (reverse?) PInvokes. At least those are relatively easy to figure out with a debugger when the right asserts are hit, not like the issue with write barriers that manifested itself much later after the problematic code executed.\n\n(I\u0027m probably going to take a day off.)",
                                           "updatedAt":  "2025-02-16T10:28:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eoVUR",
                                           "createdAt":  "2025-02-16T10:48:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "I haven\u0027t built the smoke tests on device yet (and cross-build of src/tests is not ready for community platforms). Do you have some results how far along we are? :)",
                                           "updatedAt":  "2025-02-16T10:48:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eoWjQ",
                                           "createdAt":  "2025-02-16T11:03:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGf0iw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-16T11:14:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e I haven\u0027t built the smoke tests on device yet (and cross-build of src/tests is not ready for community platforms). Do you have some results how far along we are? :)\n\nNot yet, the build scripts for running the tests give me error about wrappers not being built, so I ended up running tests one by one. Just finished `Exceptions` which passes (both with and without conservative GC). `UnitTests` crashes early on during the multi-threaded tests but it looks like quite debuggable issues. I didn\u0027t try to run the rest. I expect the single threaded code to work somewhat okay at this point.",
                                           "updatedAt":  "2025-02-16T11:03:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eoY7k",
                                           "createdAt":  "2025-02-16T11:31:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Btw, I noticed that there\u0027s one more `PROLOG_SAVE_REG_PAIR_INDEXED  fp, ra, PROBE_FRAME_SIZE` where the sign for `PROBE_FRAME_SIZE` ends up being wrong. It should be `-PROBE_FRAME_SIZE` or we should reverse the macro (to unify with `PROLOG_SAVE_REG_PAIR_NO_FP_INDEXED`). (I didn\u0027t try to see if it fixes any issue but it might...)",
                                           "updatedAt":  "2025-02-16T11:34:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eobmK",
                                           "createdAt":  "2025-02-16T12:01:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "One more untested thing that\u0027s likely missing in the `StackFrameIterator` initialization during hijacks:\n```\n--- a/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp\n+++ b/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp\n@@ -809,6 +809,8 @@ void StackFrameIterator::InternalInit(Thread * pThreadToWalk, NATIVE_CONTEXT* pC\n     m_RegDisplay.pS9 = (PTR_uintptr_t)PTR_TO_REG(pCtx, S9);\n     m_RegDisplay.pS10 = (PTR_uintptr_t)PTR_TO_REG(pCtx, S10);\n     m_RegDisplay.pS11 = (PTR_uintptr_t)PTR_TO_REG(pCtx, S11);\n+    m_RegDisplay.pFP = (PTR_uintptr_t)PTR_TO_REG(pCtx, Fp);\n+    m_RegDisplay.pRA = (PTR_uintptr_t)PTR_TO_REG(pCtx, Ra);\n \n     //\n     // scratch regs\n```",
                                           "updatedAt":  "2025-02-16T12:01:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eohmY",
                                           "createdAt":  "2025-02-16T13:04:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Will give it a try after https://github.com/filipnavara/dotnet-riscv/issues/4#issuecomment-2661421996 (and building smoketests). It\u0027s my first time with on-device build, so I won\u0027t be surprised if it needs more build patches.",
                                           "updatedAt":  "2025-02-16T13:04:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eo62N",
                                           "createdAt":  "2025-02-16T17:04:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Switching from building runtime on macbook to musebook was a day and night difference in terms of speed. 😅\n\n```sh\n# build steps: https://github.com/filipnavara/dotnet-riscv/issues/4#issuecomment-2661526590\n\n$ src/tests/run.sh --runnativeaottests Debug\n$ cat artifacts/tests/coreclr/linux.riscv64.Debug/nativeaot/nativeaot/nativeaot.log \nBEGIN EXECUTION\n/home/am11/projects/runtime/src/tests/Common/scripts/nativeaottest.sh /home/am11/projects/runtime/artifacts/tests/coreclr/linux.riscv64.Debug/nativeaot/nativeaot/ nativeaot.dll \u0027\u0027\n19:00:51.741 Running test: nativeaot/CustomMain/CustomMain/CustomMain.cmd\n\nReturn code:      0\nRaw output file:      /home/am11/projects/runtime/artifacts/tests/coreclr/linux.riscv64.Debug/nativeaot/CustomMain/CustomMain/output.txt\nRaw output:\nBEGIN EXECUTION\n/home/am11/projects/runtime/src/tests/Common/scripts/nativeaottest.sh /home/am11/projects/runtime/artifacts/tests/coreclr/linux.riscv64.Debug/nativeaot/CustomMain/CustomMain/ CustomMain.dll \u0027\u0027\nhello from static constructor\nhello from managed main\nhello from native main\nExpected: 100\nActual: 100\nEND EXECUTION - PASSED\nTest Harness Exitcode is : 0\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /home/am11/projects/runtime/artifacts/tests/coreclr/linux.riscv64.Debug/nativeaot/nativeaot/native/../../CustomMain/CustomMain/CustomMain.sh\n19:00:51.881 Passed test: nativeaot/CustomMain/CustomMain/CustomMain.cmd\n19:00:51.890 Running test: nativeaot/CustomMainWithStubExe/CustomMainWithStubExe/CustomMainWithStubExe.cmd\ncp: cannot stat \u0027libclang_rt.*\u0027: No such file or directory\n\nReturn code:      0\nRaw output file:      /home/am11/projects/runtime/artifacts/tests/coreclr/linux.riscv64.Debug/nativeaot/CustomMainWithStubExe/CustomMainWithStubExe/output.txt\nRaw output:\nBEGIN EXECUTION\n/home/am11/projects/runtime/src/tests/Common/scripts/nativeaottest.sh /home/am11/projects/runtime/artifacts/tests/coreclr/linux.riscv64.Debug/nativeaot/CustomMainWithStubExe/CustomMainWithStubExe/ CustomMainWithStubExe.dll \u0027\u0027\nhello from static constructor\nhello from managed main\nhello from native main\nExpected: 100\nActual: 100\nEND EXECUTION - PASSED\nTest Harness Exitcode is : 0\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /home/am11/projects/runtime/artifacts/tests/coreclr/linux.riscv64.Debug/nativeaot/nativeaot/native/../../CustomMainWithStubExe/CustomMainWithStubExe/CustomMainWithStubExe.sh\n19:00:52.041 Passed test: nativeaot/CustomMainWithStubExe/CustomMainWithStubExe/CustomMainWithStubExe.cmd\n19:00:52.044 Running test: nativeaot/GenerateUnmanagedEntryPoints/GenerateUnmanagedEntryPoints/GenerateUnmanagedEntryPoints.cmd\n\nReturn code:      0\nRaw output file:      /home/am11/projects/runtime/artifacts/tests/coreclr/linux.riscv64.Debug/nativeaot/GenerateUnmanagedEntryPoints/GenerateUnmanagedEntryPoints/output.txt\nRaw output:\nBEGIN EXECUTION\n/home/am11/projects/runtime/src/tests/Common/scripts/nativeaottest.sh /home/am11/projects/runtime/artifacts/tests/coreclr/linux.riscv64.Debug/nativeaot/GenerateUnmanagedEntryPoints/GenerateUnmanagedEntryPoints/ GenerateUnmanagedEntryPoints.dll \u0027\u0027\nHello from MainAssemblyMethod\nHello from ReferencedAssembly1Method\nExpected: 100\nActual: 100\nEND EXECUTION - PASSED\nTest Harness Exitcode is : 0\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /home/am11/projects/runtime/artifacts/tests/coreclr/linux.riscv64.Debug/nativeaot/nativeaot/native/../../GenerateUnmanagedEntryPoints/GenerateUnmanagedEntryPoints/GenerateUnmanagedEntryPoints.sh\n19:00:52.166 Passed test: nativeaot/GenerateUnmanagedEntryPoints/GenerateUnmanagedEntryPoints/GenerateUnmanagedEntryPoints.cmd\n19:00:52.169 Running test: nativeaot/SmokeTests/Determinism/Determinism/Determinism.cmd\n\nReturn code:      0\nRaw output file:      /home/am11/projects/runtime/artifacts/tests/coreclr/linux.riscv64.Debug/nativeaot/SmokeTests/Determinism/Determinism/output.txt\nRaw output:\nBEGIN EXECUTION\n/home/am11/projects/runtime/src/tests/Common/scripts/nativeaottest.sh /home/am11/projects/runtime/artifacts/tests/coreclr/linux.riscv64.Debug/nativeaot/SmokeTests/Determinism/Determinism/ Determinism.dll \u0027\u0027\nBaseline size: 33325449\nCompare size: 33325449\nExpected: 100\nActual: 100\nEND EXECUTION - PASSED\nTest Harness Exitcode is : 0\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /home/am11/projects/runtime/artifacts/tests/coreclr/linux.riscv64.Debug/nativeaot/nativeaot/native/../../SmokeTests/Determinism/Determinism/Determinism.sh\n19:00:57.303 Passed test: nativeaot/SmokeTests/Determinism/Determinism/Determinism.cmd\n19:00:57.305 Running test: nativeaot/SmokeTests/DwarfDump/DwarfDump/DwarfDump.cmd\nProcess terminated. Assertion failed.\n_thread == Thread.CurrentThread\n   at System.Diagnostics.DebugProvider.Fail(String, String) + 0x64\n   at System.Diagnostics.Debug.Fail(String, String) + 0x70\n   at System.Diagnostics.Debug.Assert(Boolean, String, String) + 0x58\n   at System.Diagnostics.Debug.Assert(Boolean, String) + 0x3c\n   at System.Threading.WaitSubsystem.ThreadWaitInfo.ProcessSignaledWaitState() + 0xac\n   at System.Threading.WaitSubsystem.ThreadWaitInfo.Wait(Int32, Boolean, Boolean, WaitSubsystem.LockHolder\u0026) + 0x440\n   at System.Threading.WaitSubsystem.WaitableObject.Wait_Locked(WaitSubsystem.ThreadWaitInfo, Int32, Boolean, Boolean, WaitSubsystem.LockHolder\u0026) + 0x414\n   at System.Threading.WaitSubsystem.WaitableObject.Wait(WaitSubsystem.ThreadWaitInfo, Int32, Boolean, Boolean) + 0x1d0\n   at System.Threading.WaitSubsystem.Wait(WaitSubsystem.WaitableObject, Int32, Boolean, Boolean) + 0xd8\n   at System.Threading.LowLevelLifoSemaphore.WaitCore(Int32) + 0x3c\n   at System.Threading.LowLevelLifoSemaphore.WaitForSignal(Int32) + 0x110\n   at System.Threading.LowLevelLifoSemaphore.Wait(Int32, Boolean) + 0x674\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart() + 0x348\n   at nativeaot!\u003cBaseAddress\u003e+0x974ea4\n   at System.Threading.Thread.StartHelper.RunWorker() + 0xac\n   at System.Threading.Thread.StartHelper.Run() + 0xf8\n   at System.Threading.Thread.StartThread(IntPtr) + 0x18c\n   at System.Threading.Thread.ThreadEntryPoint(IntPtr) + 0x38\n/home/am11/projects/runtime/src/tests/Common/scripts/nativeaottest.sh: line 15: 73568 Aborted                 (core dumped) $_DebuggerFullPath $1/native/$exename \"${@:3}\"\nExpected: 100\nActual: 134\nEND EXECUTION - FAILED\n```\n\nI\u0027ll try your patch next. :)",
                                           "updatedAt":  "2025-02-16T17:04:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6epBzR",
                                           "createdAt":  "2025-02-16T18:17:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGgdqA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-16T18:21:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Switching from building runtime on macbook to musebook was a day and night difference in terms of speed. 😅\n\nYeah, I am using the VisionFive 2 board and it\u0027s quite a slouch. It\u0027s somewhat usable for iterating over one test but full rebuilds are a luxury. ;-)\n\nThe last two fixes I mentioned here in comments seem to improve things a bit, but I still get issues during the thread hijacking by the GC. These are annoying to debug but nowhere near as annoying as the write barrier bug. I\u0027ll need to find couple of free hours to focus on it.",
                                           "updatedAt":  "2025-02-16T18:17:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6epEVr",
                                           "createdAt":  "2025-02-16T18:45:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "On the topic of write barriers, I started manually reviewing the assembly code. `INSERT_CHECKED_WRITE_BARRIER_CORE` and `RhpCheckedAssignRef`  are broken in the same way as I previously fixed the other helpers. They don\u0027t dereference `g_lowest_address`/`g_highest_address` and the `bgeu`/`bltu` instructions are switched (only for `INSERT_CHECKED_WRITE_BARRIER_CORE` it seems). We should carefully audit that code since that\u0027s very difficult to debug.",
                                           "updatedAt":  "2025-02-16T18:48:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6epE3K",
                                           "createdAt":  "2025-02-16T18:51:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGgh2Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-16T18:52:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "You may want to copy what write barrier in regular CoreCLR does and just do minimal adjustments for native AOT env and style differences.",
                                           "updatedAt":  "2025-02-16T18:51:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6epFUu",
                                           "createdAt":  "2025-02-16T18:57:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e You may want to copy what write barrier in regular CoreCLR does and just do minimal adjustments for native AOT env and style differences.\n\nThat may be an option too.\n\nI fixed up some of the code locally. I need to clean it up and then I can commit it. (UPD: Pushed)\n\nSeems like the write barriers were cause of the early failure in `UnitTests`. I got past it with conservative GC now:\n```\n...\nFinalizeTest passed\n===== Test BasicThreading.Run succeeded =====\n===== Running test Delegates.Run =====\nTesting delegates to value types...OK\nTesting delegates to virtual methods...OK\nTesting delegates to interface methods...OK\nTesting static open and closed delegates...OK\nTesting multicast delegates...OK\nTesting dynamic invoke...OK\nTesting LINQ Expressions...\nTesting default interface methods...\n===== Test Delegates.Run succeeded =====\n===== Running test Generics.Run =====\nBase.GMethod1\u003cSystem.Int32\u003e(1,2)\nBase.IMethod1\u003cSystem.Int32\u003e(3,4)\nBase.IMethod1\u003cSystem.Int32\u003e(5,6)\nBase.IMethod1\u003cSystem.Int32\u003e(7,8)\n====================\nDerived.GMethod1\u003cSystem.Int32\u003e(1,2)\nDerived.IFoo\u003cstring\u003e.IMethod1\u003cSystem.Int32\u003e(3,4)\nDerived.IFoo\u003cstring\u003e.IMethod1\u003cSystem.Int32\u003e(5,6)\nBase.IMethod1\u003cSystem.Int32\u003e(7,8)\n====================\nDerived.GMethod1\u003cSystem.Int32\u003e(1,2)\nDerived.IFoo\u003cstring\u003e.IMethod1\u003cSystem.Int32\u003e(3,4)\nDerived.IFoo\u003cstring\u003e.IMethod1\u003cSystem.Int32\u003e(5,6)\nSuperDerived.IFoo\u003cint\u003e.IMethod1\u003cSystem.Int32\u003e(7,8)\n====================\nGenBase\u003cSystem.Byte\u003e.GMethod1\u003cSystem.Int32\u003e(1,2)\nGenBase\u003cSystem.Byte\u003e.IMethod1\u003cSystem.Int32\u003e(3,4)\nGenBase\u003cSystem.Byte\u003e.IMethod1\u003cSystem.Int32\u003e(5,6)\nGenBase\u003cSystem.Byte\u003e.IMethod1\u003cSystem.Int32\u003e(7,8)\n====================\nGenDerived\u003cSystem.Byte\u003e.GMethod1\u003cSystem.Int32\u003e(1,2)\nGenDerived\u003cSystem.Byte\u003e.IFoo\u003cstring\u003e.IMethod1\u003cSystem.Int32\u003e(3,4)\nGenDerived\u003cSystem.Byte\u003e.IFoo\u003cstring\u003e.IMethod1\u003cSystem.Int32\u003e(5,6)\nGenBase\u003cSystem.Byte\u003e.IMethod1\u003cSystem.Int32\u003e(7,8)\n====================\nGenDerived\u003cSystem.String\u003e.GMethod1\u003cSystem.Int32\u003e(1,2)\nGenDerived\u003cSystem.String\u003e.IFoo\u003cstring\u003e.IMethod1\u003cSystem.Int32\u003e(3,4)\nGenDerived\u003cSystem.String\u003e.IFoo\u003cstring\u003e.IMethod1\u003cSystem.Int32\u003e(5,6)\nGenBase\u003cSystem.String\u003e.IMethod1\u003cSystem.Int32\u003e(7,8)\n====================\nGenDerived\u003cSystem.Byte\u003e.GMethod1\u003cSystem.Int32\u003e(1,2)\nGenDerived\u003cSystem.Byte\u003e.IFoo\u003cstring\u003e.IMethod1\u003cSystem.Int32\u003e(3,4)\nGenDerived\u003cSystem.Byte\u003e.IFoo\u003cstring\u003e.IMethod1\u003cSystem.Int32\u003e(5,6)\nGenSuperDerived\u003cSystem.Byte\u003e.IFoo\u003cint\u003e.IMethod1\u003cSystem.Int32\u003e(7,8)\n====================\nMyStruct1.IFoo\u003cstring\u003e.IMethod1\u003cSystem.Int32\u003e(1,2)\nMyStruct1.IFoo\u003cstring\u003e.IMethod1\u003cSystem.Int32\u003e(3,4)\nMyStruct1.IFoo\u003cint\u003e.IMethod1\u003cSystem.Int32\u003e(5,6)\n====================\nMyStruct2.IFoo\u003cstring\u003e.IMethod1\u003cSystem.Int32\u003e(1,2)\nMyStruct2.IFoo\u003cstring\u003e.IMethod1\u003cSystem.Int32\u003e(3,4)\nMyStruct2.IMethod1\u003cSystem.Int32\u003e(5,6)\n====================\nMyStruct3.IMethod1\u003cSystem.Int32\u003e(1,2)\nMyStruct3.IMethod1\u003cSystem.Int32\u003e(3,4)\nMyStruct3.IFoo\u003cint\u003e.IMethod1\u003cSystem.Int32\u003e(5,6)\n====================\nAnotherBaseClass.IFaceGVMethod1\nBarImplementor:123\nYahooDerived:456\nCovariant\u003cString\u003e.ICovariantGVM\u003cException\u003e\nAccepted\nFoo\u003cClassType\u003e cctor\nFoo\u003cStructType\u003e cctor\nBar cctor\nTesting static fields on type Foo\u003cClassType\u003e ...\nTesting static fields on type Foo\u003cStructType\u003e ...\nTesting static fields on type Bar ...\nTesting instance fields on type Foo\u003cClassType\u003e ...\nTesting instance fields on type Foo\u003cStructType\u003e ...\nTesting instance fields on type Bar ...\nFoo\u003cObject\u003e cctor\nFoo\u003cClassType2\u003e cctor\nTesting dynamic invoke stubs...\nGenericDerived\u003cSystem.Object\u003e.Get\u003cSystem.String\u003e\n\nThread 1 \"UnitTests\" received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x3ff7db4020 (LWP 276644)]\n0x0000002aab48c150 in __GenericDict_UnitTests_Generics_TestSimpleGenericRecursion__RecurseOverClass\u003cUnitTests_Generics_TestSimpleGenericRecursion_GenClass_1\u003cUnitTests_Generics_TestSimpleGenericRecursion_GenClass_1\u003cInt32\u003e\u003e\u003e ()\n```\n\nUPD: The stack corruption is real and visible even in debugger (likely R2R helpers?):\n```\n#35 0x0000002aab1a780c in UnitTests_Generics_TestReflectionInvoke__Run () at /home/ubuntu/runtime/src/tests/nativeaot/SmokeTests/UnitTests/Generics.cs:979\n#36 0x5f4e4f4953534553 in ?? ()\n```",
                                           "updatedAt":  "2025-02-16T19:44:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6epFV4",
                                           "createdAt":  "2025-02-16T18:57:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e You may want to copy what write barrier in regular CoreCLR does and just do minimal adjustments for native AOT env and style differences.\n\nI initially looked into it, but coreclr version uses shadow copy on all archs, while nativeaot doesn\u0027t. They are quite different.",
                                           "updatedAt":  "2025-02-16T18:58:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6epG35",
                                           "createdAt":  "2025-02-16T19:14:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGgkrg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-16T19:16:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Shadow copy is a debug-only feature under an ifdef. You can omit the shadow copy part when copying it over to naot.",
                                           "updatedAt":  "2025-02-16T19:14:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6epHSV",
                                           "createdAt":  "2025-02-16T19:19:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I pushed the fixes that get me past `BasicThreading` in `UnitTests`. Seems to work both with and without conservative GC but the multithreading is quite a stress test for my RV64 machine (seems to trigger some race condition in `ManualResetEventSlim` in some of the runs).\n\nI still don\u0027t have much confidence in the write barrier code. If I get some spare time I will try to compare it with the CoreCLR counterpart, unless @am11 beats me to it.",
                                           "updatedAt":  "2025-02-16T19:27:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6epKjb",
                                           "createdAt":  "2025-02-16T19:57:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "There\u0027s a JIT bug at the beginning of `UnitTests_Generics_TestReflectionInvoke__Run` (~~likely immediate generated instead of relocation~~):\n```asm\nDump of assembler code for function UnitTests_Generics_TestReflectionInvoke__Run:\n   0x0000002aab1a26e0 \u003c+0\u003e:     addi    sp,sp,-16\n   0x0000002aab1a26e4 \u003c+4\u003e:     sd      s0,0(sp)\n   0x0000002aab1a26e8 \u003c+8\u003e:     sd      ra,8(sp)\n   0x0000002aab1a26ec \u003c+12\u003e:    mv      s0,sp\n   0x0000002aab1a26f0 \u003c+16\u003e:    lui     t0,0x80000\n   0x0000002aab1a26f4 \u003c+20\u003e:    addiw   t0,t0,-1 # 0x7fffffff\n   0x0000002aab1a26f8 \u003c+24\u003e:    slli    t0,t0,0xb\n   0x0000002aab1a26fc \u003c+28\u003e:    addi    t0,t0,2047\n   0x0000002aab1a2700 \u003c+32\u003e:    slli    t0,t0,0xb\n   0x0000002aab1a2704 \u003c+36\u003e:    addi    t0,t0,2045\n   0x0000002aab1a2708 \u003c+40\u003e:    slli    t0,t0,0xb\n   0x0000002aab1a270c \u003c+44\u003e:    addi    t0,t0,1792\n   0x0000002aab1a2710 \u003c+48\u003e:    add     sp,sp,t0\n   0x0000002aab1a2714 \u003c+52\u003e:    lui     t0,0x80000\n   0x0000002aab1a2718 \u003c+56\u003e:    addiw   t0,t0,-1 # 0x7fffffff\n   0x0000002aab1a271c \u003c+60\u003e:    slli    t0,t0,0xb\n   0x0000002aab1a2720 \u003c+64\u003e:    addi    t0,t0,2047\n   0x0000002aab1a2724 \u003c+68\u003e:    slli    t0,t0,0xb\n   0x0000002aab1a2728 \u003c+72\u003e:    addi    t0,t0,2045\n   0x0000002aab1a272c \u003c+76\u003e:    slli    t0,t0,0xb\n   0x0000002aab1a2730 \u003c+80\u003e:    addi    t0,t0,1800\n   0x0000002aab1a2734 \u003c+84\u003e:    add     t0,s0,t0\n```",
                                           "updatedAt":  "2025-02-16T21:44:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6epLsp",
                                           "createdAt":  "2025-02-16T20:09:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "It was mentioned here https://github.com/dotnet/runtime/pull/112331#pullrequestreview-2605662290, seems like we need to scan for those places in JIT and update them.",
                                           "updatedAt":  "2025-02-16T20:09:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6epPlB",
                                           "createdAt":  "2025-02-16T20:48:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e It was mentioned here [#112331 (review)](https://github.com/dotnet/runtime/pull/112331#pullrequestreview-2605662290), seems like we need to scan for those places in JIT and update them.\n\nThis one is likely big stack allocation (\u003e page size) that needs to do a stack probe. I\u0027m just logging it for posterity, should be trivial to fix. Seems to be producing incorrect unwinding information:\n```\n  DW_CFA_advance_loc: 4 to 0x36e464\n  DW_CFA_def_cfa_offset: +16\n  DW_CFA_advance_loc: 4 to 0x36e468\n  DW_CFA_offset: X8 -16\n  DW_CFA_advance_loc: 4 to 0x36e46c\n  DW_CFA_offset: X1 -8\n  DW_CFA_advance_loc: 4 to 0x36e470\n  DW_CFA_def_cfa_register: X8\n  DW_CFA_advance_loc: 36 to 0x36e494\n  DW_CFA_def_cfa_offset: +4368\n  DW_CFA_nop:\n  DW_CFA_nop:\n  DW_CFA_nop:\n\n  0x36e460: CFA=X2\n  0x36e464: CFA=X2+16\n  0x36e468: CFA=X2+16: X8=[CFA-16]\n  0x36e46c: CFA=X2+16: X1=[CFA-8], X8=[CFA-16]\n  0x36e470: CFA=X8+16: X1=[CFA-8], X8=[CFA-16]\n  0x36e494: CFA=X8+4368: X1=[CFA-8], X8=[CFA-16]\n```\n\nJIT dump: \n[jitdump.txt.zip](https://github.com/user-attachments/files/18816276/jitdump.txt.zip)\n\nPossible fix:\n```diff\n--- a/src/coreclr/jit/codegenriscv64.cpp\n+++ b/src/coreclr/jit/codegenriscv64.cpp\n@@ -7223,7 +7223,7 @@ void CodeGen::genPushCalleeSavedRegisters(regNumber initReg, bool* pInitRegZeroe\n \n     if (leftFrameSize != 0)\n     {\n-        genStackPointerAdjustment(-leftFrameSize, REG_SCRATCH, nullptr, /* reportUnwindData */ true);\n+        genStackPointerAdjustment(-leftFrameSize, REG_SCRATCH, nullptr, /* reportUnwindData */ false);\n     }\n }\n \n```",
                                           "updatedAt":  "2025-02-16T22:06:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6epbXL",
                                           "createdAt":  "2025-02-16T22:47:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Next up, this codegen branch is wrong and jumps to data instead of `GetBadSlotHelper(...)` method:\nhttps://github.com/dotnet/runtime/blob/c69456b63934835d3a62fbec8c89b3cf390bd53f/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/DependencyAnalysis/Target_RiscV64/RiscV64ReadyToRunGenericHelperNode.cs#L50-L51\n\nShould likely be\n```\n                encoder.EmitJMPIfZero(result, GetBadSlotHelper(factory));\n```",
                                           "updatedAt":  "2025-02-16T22:50:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6erDR6",
                                           "createdAt":  "2025-02-17T05:21:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Arcade skipped to preview 2 and missed the entire preview 1. We can\u0027t build a new baseline SDK as the least disruptive SB change https://github.com/dotnet/runtime/pull/112414 was rejected.",
                                           "updatedAt":  "2025-02-17T05:21:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6esQi7",
                                           "createdAt":  "2025-02-17T08:35:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I fixed couple of issues with universal transition. The `UnitTests` get far enough to reach `TestDynamicInterfaceCastable` and it likely fails in the generated thunks (ThunksMapping.cpp code).\n\nThe generated thunk code looks like this:\n```\n(gdb) x/4i 0x3ff7d58000\n   0x3ff7d58000:        auipc   t0,0x8\n   0x3ff7d58004:        ld      t1,0(t0)\n   0x3ff7d58008:        jr      t1\n```\n\nI\u0027d guess that the offsets are wrong (and so are the comments that generate the code, one of the mentions auipc/ld/jr, the other one auipc/addi/jr). This may be easier to fix for someone who actually known RV64 assembly.",
                                           "updatedAt":  "2025-02-17T08:42:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6esU4P",
                                           "createdAt":  "2025-02-17T08:42:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGj0qg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-17T08:47:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tomeksowi",
                                           "body":  "\u003e I\u0027d guess that the offsets are wrong (and so are the comments that generate the code, one of the mentions auipc/ld/jr, the other one auipc/addi/jr).\n\nThe addi comment is likely wrong (for 0x0002B303), 0x03 is the opcode for load.",
                                           "updatedAt":  "2025-02-17T08:44:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ese5w",
                                           "createdAt":  "2025-02-17T09:01:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tomeksowi",
                                           "body":  "\u003e I\u0027d guess that the offsets are wrong\n\n(shooting blind) Aren\u0027t we missing this component to the offset?\nhttps://github.com/dotnet/runtime/blob/5bc9041fa4bc2ce2f1bd6353e2b33f2fb6acf84e/src/coreclr/nativeaot/Runtime/ThunksMapping.cpp#L250-L251",
                                           "updatedAt":  "2025-02-17T09:01:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eshp0",
                                           "createdAt":  "2025-02-17T09:05:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGj-mQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tomeksowi",
                                                                               "createdAt":  "2025-02-17T09:07:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e (shooting blind) Aren\u0027t we missing this component to the offset?\n\nVery likely yes. I can test something later today but it would nice to have an idea how it should the resulting code look like. Whatever is currently generated doesn\u0027t match what other platforms do.",
                                           "updatedAt":  "2025-02-17T09:05:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6es1UQ",
                                           "createdAt":  "2025-02-17T09:37:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGkdbQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tomeksowi",
                                                                               "createdAt":  "2025-02-17T10:04:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "@tomeksowi, this?\n```c++\n#elif TARGET_RISCV64\n\n            //auipc    a1, \u003cdelta PC to thunk data address\u003e\n            //addi     a1, a1, \u003cdelta to get to last word in data page\u003e\n            //lw       a2, \u003cdelta to load word from computed address\u003e\n            //jalr     zero, a2, 0\n\n            int delta = (int)(pCurrentDataAddress - pCurrentThunkAddress);\n            *((uint32_t*)pCurrentThunkAddress) = 0x00000097 | (((delta \u0026 0xFFFFF000) \u003e\u003e 12) \u003c\u003c 12);  // auipc a1, delta[31:12]\n            pCurrentThunkAddress += 4;\n\n            *((uint32_t*)pCurrentThunkAddress) = 0x00130293 | ((delta \u0026 0xFFF) \u003c\u003c 20);  // addi a1, a1, delta[11:0]\n            pCurrentThunkAddress += 4;\n\n            *((uint32_t*)pCurrentThunkAddress) = 0x00030313 | (((OS_PAGE_SIZE - POINTER_SIZE - (i * POINTER_SIZE * 2)) / 8) \u003c\u003c 20); // lw a2, offset(a1)\n            pCurrentThunkAddress += 4;\n\n            *((uint32_t*)pCurrentThunkAddress) = 0x000302f6;  // jalr zero, a2, 0\n            pCurrentThunkAddress += 4;\n```\n\nmaybe with an additional no-op (i have seen both patterns but not sure)\n\n```c++\n            *((uint32_t*)pCurrentThunkAddress) = 0x00000000;  // no-op\n            pCurrentThunkAddress += 4;\n```",
                                           "updatedAt":  "2025-02-17T09:38:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6es24k",
                                           "createdAt":  "2025-02-17T09:39:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGkdZw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tomeksowi",
                                                                               "createdAt":  "2025-02-17T10:04:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e maybe with an additional no-op (i have seen both patterns but not sure)\n\nThe no-op is not necessary. The thunk size is 16-bytes so only platforms that don\u0027t produce 16-bytes would need a no-op.\n\nI\u0027ll try to run the code when I get a moment.",
                                           "updatedAt":  "2025-02-17T09:40:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6es4qU",
                                           "createdAt":  "2025-02-17T09:42:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGkeVw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tomeksowi",
                                                                               "createdAt":  "2025-02-17T10:06:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Also, presumably the `lw` should be `ld` and we should not trash `a0`/`a1` registers (`x28` seems to be the interprocedural scratch register of choice). ",
                                           "updatedAt":  "2025-02-17T09:47:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6etF4S",
                                           "createdAt":  "2025-02-17T10:04:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tomeksowi",
                                           "body":  "\u003e [@tomeksowi](https://github.com/tomeksowi), this?\n\nLooks much better (with @filipnavara\u0027s comments). It would be good to see what it\u0027s trying to jump to and in which register it expects the parameters (the other architectures look as if the delta to pCurrentDataAddress is a parameter).",
                                           "updatedAt":  "2025-02-17T10:04:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6etOMk",
                                           "createdAt":  "2025-02-17T10:17:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "FWIW, I can\u0027t repro these, so I don\u0027t know which test are we fixing here precisely.",
                                           "updatedAt":  "2025-02-17T10:17:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6euHeh",
                                           "createdAt":  "2025-02-17T11:50:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e It would be good to see what it\u0027s trying to jump to and in which register it expects the parameters (the other architectures look as if the delta to pCurrentDataAddress is a parameter).\n\nPresumably it\u0027s the convention expected by ~~`RhpInterfaceDispatchSlow`~~ ~~`RhpUniversalTransition`~~ `RhCommonStub`. One of the registers should point to the data portion of the thunk.\n\n\u003e FWIW, I can\u0027t repro these, so I don\u0027t know which test are we fixing here precisely.\n\nI\u0027m running the `UnitTests` smoke test under debugger. I just disabled the `RunTest(BasicThreading.Run);` call in Main.cs to skip over the long and racy test in the beginning. When running under debugger it will produce couple of SIGSEGVs. That\u0027s expected, it intentionally tests null dereferences. Once it reaches `TestDynamicInterfaceCastable` it will end up in the thunks code path (eg. breakpoint on `RhAllocateThunksMapping` will be triggered) and then it will crash. It\u0027s possible to set the breakpoint on the first thunk by `break *` on the address returned by `RhAllocateThunksMapping`.",
                                           "updatedAt":  "2025-02-17T14:58:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ev2_o",
                                           "createdAt":  "2025-02-17T14:49:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGmuZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tomeksowi",
                                                                               "createdAt":  "2025-02-17T15:00:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I ended up with this:\n```diff\ndiff --git a/src/coreclr/nativeaot/Runtime/ThunksMapping.cpp b/src/coreclr/nativeaot/Runtime/ThunksMapping.cpp\nindex 9f7211a2ee7..f23e2acd364 100644\n--- a/src/coreclr/nativeaot/Runtime/ThunksMapping.cpp\n+++ b/src/coreclr/nativeaot/Runtime/ThunksMapping.cpp\n@@ -25,7 +25,7 @@\n #elif TARGET_LOONGARCH64\n #define THUNK_SIZE  16\n #elif TARGET_RISCV64\n-#define THUNK_SIZE  12\n+#define THUNK_SIZE  16\n #else\n #define THUNK_SIZE  (2 * OS_PAGE_SIZE) // This will cause RhpGetNumThunksPerBlock to return 0\n #endif\n@@ -259,21 +259,22 @@ EXTERN_C void* QCALLTYPE RhAllocateThunksMapping()\n \n #elif defined(TARGET_RISCV64)\n \n-            // auipc  t0, %hi(delta)      // Load upper immediate with address high bits\n-            // ld     t1, %lo(delta)(t0)  // Load data from address in (t0 + lower immediate)\n-            // jr     t1                  // Jump and don\u0027t link register\n+            //auipc    t1, \u003cdelta PC to thunk data address\u003e\n+            //addi     t1, t1, \u003cdelta to get to last word in data page\u003e\n+            //ld       t0, \u003cdelta to load word from computed address\u003e(t1)\n+            //jalr     zero, t0, 0\n \n             int delta = (int)(pCurrentDataAddress - pCurrentThunkAddress);\n-            uint32_t deltaHi = (delta + 0x800) \u0026 0xfffff000;\n-            uint32_t deltaLo = delta \u003c\u003c (32 - 12);\n-            \n-            *((uint32_t*)pCurrentThunkAddress) = 0x00000297 | deltaHi;  // auipc\n+            *((uint32_t*)pCurrentThunkAddress) = 0x00000317 | (((delta \u0026 0xFFFFF000) \u003e\u003e 12) \u003c\u003c 12);  // auipc t1, delta[31:12]\n+            pCurrentThunkAddress += 4;\n+\n+            *((uint32_t*)pCurrentThunkAddress) = 0x00030313 | ((delta \u0026 0xFFF) \u003c\u003c 20);  // addi t1, t1, delta[11:0]\n             pCurrentThunkAddress += 4;\n \n-            *((uint32_t*)pCurrentThunkAddress) = 0x0002B303 | deltaLo;  // addi\n+            *((uint32_t*)pCurrentThunkAddress) = 0x00033283 | (((OS_PAGE_SIZE - POINTER_SIZE - (i * POINTER_SIZE * 2))) \u003c\u003c 20); // ld t0, offset(t1)\n             pCurrentThunkAddress += 4;\n \n-            *((uint32_t*)pCurrentThunkAddress) = 0x00030067; // jr\n+            *((uint32_t*)pCurrentThunkAddress) = 0x00008282;  // jalr zero, t0, 0\n             pCurrentThunkAddress += 4;\n \n #else\n```\n\nThat\u0027s almost there but not quite... because the offset to `ld` ends up being 0xFF8 which is treated as signed `-8`.",
                                           "updatedAt":  "2025-02-17T14:49:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ewAuC",
                                           "createdAt":  "2025-02-17T15:04:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGmweA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-17T15:05:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tomeksowi",
                                           "body":  "\u003e That\u0027s almost there but not quite... because the offset to `ld` ends up being 0xFF8 which is treated as signed `-8`.\n\nThe only way I can think of is adding another `lui` with the upper bits if the `ld` offset doesn\u0027t fit in 12 bits signed :/\n\nEDIT: unless maybe hacks like adding OS_PAGE_SIZE/2 to the delta and subtracting it in the callee, but it complicates life quite a bit.\n\nLarger thunk seems the best way out for now, it can get smaller later on with compressed encodings.",
                                           "updatedAt":  "2025-02-17T15:11:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ewJpn",
                                           "createdAt":  "2025-02-17T15:19:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e EDIT: unless maybe hacks like adding OS_PAGE_SIZE/2 to the delta and subtracting it in the callee, but it complicates life quite a bit.\n\u003e Larger thunk seems the best way out for now, it can get smaller later on with compressed encodings.\n\nIt would be possible to fiddle with the layout but probably not worth it. I can probably do something like this:\n```\n            //auipc    t1, \u003cdelta PC to thunk data address\u003e\n            //auipc    t0, hi(\u003cdelta to get to last word in data page\u003e)\n            //addi     t0, t0, lo(\u003cdelta to get to last word in data page\u003e)\n            //ld       t0, (t0)\n            //jalr     zero, t0, 0\n```\nThe first delta should always be aligned on PAGE_SIZE or its multiply (EDIT: or not), ~~so presumably it\u0027s addressable with just the high bits and single `auipc`~~.",
                                           "updatedAt":  "2025-02-17T15:26:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ewQMr",
                                           "createdAt":  "2025-02-17T15:30:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGm8kg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-17T15:32:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tomeksowi",
                                           "body":  "\u003e (EDIT: or not)\n\nWell, `jr` and `lui` with small immediates have 16-bit encodings so the 5-instruction thunk should still fit in 16 bytes.",
                                           "updatedAt":  "2025-02-17T15:31:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ewlPR",
                                           "createdAt":  "2025-02-17T16:04:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tomeksowi",
                                           "body":  "\u003e Well, `jr` and `lui` with small immediates have 16-bit encodings so the 5-instruction thunk should still fit in 16 bytes.\n\nEr.. except that `lui` clears the existing register instead of adding to it, which is what we need here.",
                                           "updatedAt":  "2025-02-17T16:04:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ewnLc",
                                           "createdAt":  "2025-02-17T16:07:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGnUzg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tomeksowi",
                                                                               "createdAt":  "2025-02-17T16:07:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-17T16:20:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Er.. except that `lui` clears the existing register instead of adding to it, which is what we need here.\n\nNo worries. I have a working version of the thunks locally. There\u0027s room for optimizations but I am no longer blocked on this.\n\nI started fixing `RhCommonStub` now.",
                                           "updatedAt":  "2025-02-17T16:07:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ewx2m",
                                           "createdAt":  "2025-02-17T16:26:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I commited WIP versions of the fixes. It goes successfully through the dynamic invokes. Currently it fails in the epilog of `UnitTests_Interfaces_TestDynamicInterfaceCastable__Run`:\n```\n   0x0000002aab1ba460 \u003c+1408\u003e:  ld      ra,296(sp)\n   0x0000002aab1ba464 \u003c+1412\u003e:  ld      s0,288(sp)\n=\u003e 0x0000002aab1ba468 \u003c+1416\u003e:  addi    sp,sp,304\n   0x0000002aab1ba46c \u003c+1420\u003e:  ret\n```\nThe stack pointer is off or something, and it loads 0 into `ra`. I expect this to be solvable with couple of well-placed breakpoints.\n\nThe problem happens somewhere here:\n```csharp\n                IInterface o = (IInterface)new CastableClass\u003cIInterface, IInterfaceImpl\u003e();\n                bool success = false;\n                try\n                {\n                    o.GetCookie(); // \u003c===== gets here...\n                }\n                catch (InvalidOperationException)\n                {\n                    success = true; // ...and even here, but SP is likely wrong at this point\n                }\n                if (!success)\n                    throw new Exception();\n```",
                                           "updatedAt":  "2025-02-17T19:55:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e1lr9",
                                           "createdAt":  "2025-02-18T07:48:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "```gdb\nThread 1 \"UnitTests\" hit Breakpoint 1, UnitTests_Generics_TestNativeLayoutGeneration__DeepAV (x=0) at /runtime/src/tests/nativeaot/SmokeTests/UnitTests/Generics.cs:2370\n2370\t            ((Unused\u003cobject\u003e)s_ref).Blagh();\n```\n\nHere it calls CheckCastClass at `0x0000002aab1999d0 \u003c+112\u003e:\tjalr\ta2`:\n\n```gdb\n(gdb) disas\nDump of assembler code for function UnitTests_Generics_TestNativeLayoutGeneration__DeepAV:\n   0x0000002aab199960 \u003c+0\u003e:\taddi\tsp,sp,-32\n   0x0000002aab199964 \u003c+4\u003e:\tsd\ts0,16(sp)\n   0x0000002aab199968 \u003c+8\u003e:\tsd\tra,24(sp)\n   0x0000002aab19996c \u003c+12\u003e:\taddi\ts0,sp,16\n   0x0000002aab199970 \u003c+16\u003e:\tsw\tzero,-8(s0)\n   0x0000002aab199974 \u003c+20\u003e:\tsw\ta0,-4(s0)\n   0x0000002aab199978 \u003c+24\u003e:\tnop\n   0x0000002aab19997c \u003c+28\u003e:\tlw\ta0,-4(s0)\n   0x0000002aab199980 \u003c+32\u003e:\tslti\ta0,a0,1\n   0x0000002aab199984 \u003c+36\u003e:\txori\ta0,a0,1\n   0x0000002aab199988 \u003c+40\u003e:\tsw\ta0,-8(s0)\n   0x0000002aab19998c \u003c+44\u003e:\tlw\ta0,-8(s0)\n   0x0000002aab199990 \u003c+48\u003e:\tsext.w\tt6,a0\n   0x0000002aab199994 \u003c+52\u003e:\tbeqz\tt6,0x2aab1999b0 \u003cUnitTests_Generics_TestNativeLayoutGeneration__DeepAV+80\u003e\n   0x0000002aab199998 \u003c+56\u003e:\tlw\ta0,-4(s0)\n   0x0000002aab19999c \u003c+60\u003e:\taddiw\ta0,a0,-1\n   0x0000002aab1999a0 \u003c+64\u003e:\tauipc\ta1,0x0\n   0x0000002aab1999a4 \u003c+68\u003e:\taddi\ta1,a1,-64 # 0x2aab199960 \u003cUnitTests_Generics_TestNativeLayoutGeneration__DeepAV\u003e\n   0x0000002aab1999a8 \u003c+72\u003e:\tjalr\ta1\n   0x0000002aab1999ac \u003c+76\u003e:\tnop\n   0x0000002aab1999b0 \u003c+80\u003e:\tauipc\ta0,0x243\n   0x0000002aab1999b4 \u003c+84\u003e:\taddi\ta0,a0,888 # 0x2aab3dcd28\n   0x0000002aab1999b8 \u003c+88\u003e:\tld\ta0,0(a0)\n   0x0000002aab1999bc \u003c+92\u003e:\tld\ta1,8(a0)\n   0x0000002aab1999c0 \u003c+96\u003e:\tauipc\ta0,0x314\n   0x0000002aab1999c4 \u003c+100\u003e:\taddi\ta0,a0,-960 # 0x2aab4ad600\n   0x0000002aab1999c8 \u003c+104\u003e:\tauipc\ta2,0xffe93\n   0x0000002aab1999cc \u003c+108\u003e:\taddi\ta2,a2,616 # 0x2aab02cc30 \u003cS_P_CoreLib_System_Runtime_TypeCast__CheckCastClass\u003e\n   0x0000002aab1999d0 \u003c+112\u003e:\tjalr\ta2\n=\u003e 0x0000002aab1999d4 \u003c+116\u003e:\tauipc\ta1,0xc6\n   0x0000002aab1999d8 \u003c+120\u003e:\taddi\ta1,a1,1740 # 0x2aab2600a0 \u003cUnitTests_Generics_TestNativeLayoutGeneration_Unused_1\u003cSystem___Canon\u003e__Blagh\u003e\n   0x0000002aab1999dc \u003c+124\u003e:\tlw\tzero,0(a0)\n   0x0000002aab1999e0 \u003c+128\u003e:\tjalr\ta1\n   0x0000002aab1999e4 \u003c+132\u003e:\tnop\n   0x0000002aab1999e8 \u003c+136\u003e:\tnop\n   0x0000002aab1999ec \u003c+140\u003e:\tld\tra,24(sp)\n   0x0000002aab1999f0 \u003c+144\u003e:\tld\ts0,16(sp)\n   0x0000002aab1999f4 \u003c+148\u003e:\taddi\tsp,sp,32\n   0x0000002aab1999f8 \u003c+152\u003e:\tret\n```\n\nwhich looks like:\n\n```gdb\nDump of assembler code for function S_P_CoreLib_System_Runtime_TypeCast__CheckCastClass:\n   0x0000002aab02cc30 \u003c+0\u003e:\taddi\tsp,sp,-96\n   0x0000002aab02cc34 \u003c+4\u003e:\tsd\ts0,80(sp)\n   0x0000002aab02cc38 \u003c+8\u003e:\tsd\tra,88(sp)\n   0x0000002aab02cc3c \u003c+12\u003e:\taddi\ts0,sp,80 \u003c---- prolog ends\n   0x0000002aab02cc40 \u003c+16\u003e:\tsd\tzero,-32(s0)\n   0x0000002aab02cc44 \u003c+20\u003e:\tsd\tzero,-64(s0)\n   0x0000002aab02cc48 \u003c+24\u003e:\tsd\ta0,-8(s0)\n   0x0000002aab02cc4c \u003c+28\u003e:\tsd\ta1,-16(s0)\n   0x0000002aab02cc50 \u003c+32\u003e:\tnop\n```\n\nafter the call a0 is null and sigsegv occurs at `0x0000002aab1999dc \u003c+124\u003e:\tlw\tzero,0(a0)`. Was it supposed to preserve a0 in prolog?",
                                           "updatedAt":  "2025-02-18T07:51:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e1q35",
                                           "createdAt":  "2025-02-18T08:00:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGsPGA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-18T08:04:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "The SIGSEGV at that place is intentional and handled (IIRC). Many of those are null dereferences that are caught and handled.",
                                           "updatedAt":  "2025-02-18T08:00:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e1twM",
                                           "createdAt":  "2025-02-18T08:06:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Some Run methods print `Testing \u003cname\u003e..`, others don\u0027t in the same file. Will need to do some instrumentation to distinguish unhandled sigsegv from the handled one.",
                                           "updatedAt":  "2025-02-18T08:06:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e1x8x",
                                           "createdAt":  "2025-02-18T08:15:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Will need to do some instrumentation to distinguish unhandled sigsegv from the handled one.\n\nRunning the same test on ARM64 under debugger should give you a clue. (Disable the signal used for hijacking, though; SIG34 on Linux, but different on macOS)",
                                           "updatedAt":  "2025-02-18T08:15:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e1yl1",
                                           "createdAt":  "2025-02-18T08:16:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGsYsQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-18T08:24:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "Yea with `handle SIG34 nostop noprint pass noignore` I wouldn\u0027t have gotten this far. 😅 ",
                                           "updatedAt":  "2025-02-18T08:16:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e2Kyt",
                                           "createdAt":  "2025-02-18T09:02:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGs2Pg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-18T09:18:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "I defined a batch of breakpoints for ExceptionHandling.S in ~/.gdbinit\n\n```gdb\ndefine b_ex_stubs\n    b RhpThrowHwEx\n    b RhpThrowEx\n    b RhpRethrow\n    b RhpCallCatchFunclet\n    b RhpCallFinallyFunclet\n    b RhpCallFilterFunclet\n    b RhpCallPropagateExceptionCallback\nend\ndocument b_ex_stubs\n    Set breakpoints for exception stub functions.\nend\n```\n\nThen ran to the faulting line:\n```gdb\nThread 1 \"UnitTests\" hit Breakpoint 1, UnitTests_Interfaces_TestDynamicInterfaceCastable__Run () at /runtime/src/tests/nativeaot/SmokeTests/UnitTests/Interfaces.cs:1113\n1113\t                    o.GetCookie();\n```\nThere are two exception stubs called from this point till the sigsegv\n```\nThread 1 \"UnitTests\" hit Breakpoint 3, RhpThrowEx () at /runtime/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S:316\nThread 1 \"UnitTests\" hit Breakpoint 5, RhpCallCatchFunclet () at /runtime/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S:450\n```\n\nMaybe we need to review these first, as they were translated from arm64 without testing.",
                                           "updatedAt":  "2025-02-18T09:02:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e2XWB",
                                           "createdAt":  "2025-02-18T09:24:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Maybe we need to review these first, as they were translated from arm64 without testing.\n\nFirstly, you can record the \"known-good\" SP at line 1113.\n\nI think there are two questions to answer then. Is the SP correct when executing the catch funclet? And, is the SP restored to correct value after executing the funclet (done in `RhpCallCatchFunclet`)? Both values come from some context.\n\nNow, the definition of \"correct\" is not trivial (https://github.com/dotnet/runtime/blob/main/docs/design/coreclr/botr/clr-abi.md). Comparing to ARM64 may offer some clarity to see where exactly the SP changes back to the original value.\n\nOh, and we should inspect the stack trace at `RhpThrowEx` to see if there are any \"special\" frames on the stack that need custom unwinding.",
                                           "updatedAt":  "2025-02-18T09:25:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e2zCc",
                                           "createdAt":  "2025-02-18T10:08:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGtShQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-18T10:09:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "```gdb\n(gdb) bt\n#0  RhpCallCatchFunclet () at /runtime/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S:450\n#1  0x0000002aab028874 in S_P_CoreLib_System_Runtime_EH__DispatchEx (frameIter=..., exInfo=...) at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/ExceptionHandling.cs:943\n#2  0x0000002aab027efc in S_P_CoreLib_System_Runtime_EH__RhThrowEx (exceptionObj=..., exInfo=...) at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/ExceptionHandling.cs:665\n#3  0x0000002aaae1be34 in RhpThrowEx () at /runtime/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S:374\n#4  0x0000002aab0b0b34 in S_P_CoreLib_Internal_Runtime_IDynamicCastableSupport__IDynamicCastableGetInterfaceImplementationFailure (instance=..., interfaceType=0x2aab4a2828, resolvedImplType=0x2aab4a2878)\n    at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/Internal/Runtime/IDynamicInterfaceCastableSupport.cs:79\n#5  0x0000002aab0b0660 in S_P_CoreLib_Internal_Runtime_IDynamicCastableSupport__IDynamicCastableGetInterfaceImplementation (instance=..., interfaceType=0x2aab4a2828, slot=0)\n    at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/Internal/Runtime/IDynamicInterfaceCastableSupport.cs:44\n#6  0x0000002aab025bd8 in S_P_CoreLib_System_Runtime_CachedInterfaceDispatch__RhResolveDispatchWorker (pObject=..., cell=0x2aab46c4c0, cellInfo=...)\n    at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/CachedInterfaceDispatch.cs:143\n#7  0x0000002aab02560c in S_P_CoreLib_System_Runtime_CachedInterfaceDispatch__RhpCidResolve_Worker (pObject=..., pCell=183262168256) at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/CachedInterfaceDispatch.cs:28\n#8  0x0000002aab02555c in S_P_CoreLib_System_Runtime_CachedInterfaceDispatch__RhpCidResolve (callerTransitionBlockParam=274877901624, pCell=183262168256)\n    at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/CachedInterfaceDispatch.cs:19\n#9  0x0000002aaae1cebc in RhpUniversalTransition_DebugStepTailCall () at /runtime/src/coreclr/nativeaot/Runtime/riscv64/UniversalTransition.S:186\n#10 0x0000002aab1a3d24 in UnitTests_Interfaces_TestDynamicInterfaceCastable__Run () at /runtime/src/tests/nativeaot/SmokeTests/UnitTests/Interfaces.cs:1113\n#11 0x0000002aab17c86c in UnitTests_Interfaces__Run () at /runtime/src/tests/nativeaot/SmokeTests/UnitTests/Interfaces.cs:51\n#12 0x0000002aab1d1044 in S_P_CoreLib_System_Func_1\u003cInt32\u003e__InvokeOpenStaticThunk () at /runtime/src/libraries/System.Private.CoreLib/src/System/Array.Enumerators.cs:111\n#13 0x0000002aab189084 in UnitTests_Program____Main___g__RunTest_0_0 (t=..., name=...) at /runtime/src/tests/nativeaot/SmokeTests/UnitTests/Main.cs:24\n#14 0x0000002aab188d38 in UnitTests_Program___Main__ (args=...) at /runtime/src/tests/nativeaot/SmokeTests/UnitTests/Main.cs:11\n#15 0x0000002aab2907dc in __managed__Main () at /runtime/src/libraries/System.Private.CoreLib/src/System/ValueTuple.cs:793\n#16 0x0000002aaad779c0 in main (argc=1, argv=0x3ffffff118) at /runtime/src/coreclr/nativeaot/Bootstrap/main.cpp:225\n```\n\n----\nBTW, I have figured out a quicker way to rebuild and test, here is the new workbench setup:\n\nBuild in arm64 container:\n```gdb\n# on osx-arm64\n$ cd runtime\n$ docker run --rm -v$(pwd):/runtime -w /runtime -e ROOTFS_DIR=/crossrootfs/riscv64 ubuntu\n\n# inside the container\n$ eng/common/native/install-dependencies.sh\n$ apt install -y python3-venv\n$ rootfsEnv=\"/usr/local/share/rootfs\" \u0026\u0026 python3 -m venv \"$rootfsEnv\" \u0026\u0026 \"$rootfsEnv/bin/python\" -m pip install aiohttp zstandard \u0026\u0026 \\\nPYTHON_EXECUTABLE=\"$rootfsEnv/bin/python\" ./eng/common/cross/build-rootfs.sh riscv64 noble --skipunmount --skipemulation\n\n# stage 1 cross-build\n$ /runtime/build.sh -arch riscv64 -cross -s clr+libs+host -c Debug -p:StageOneBuild=true --keepnativesymbols true\n# stage 2 cross-build\n$ /runtime/build.sh -arch riscv64 -cross -s tools+clr.tools -c Debug --keepnativesymbols true  -p:StageTwoBuild=true\n# build nativeaot tests\n$ SysRoot=$ROOTFS_DIR /runtime/src/tests/build.sh -riscv64 -cross -nativeaot -tree:nativeaot -Debug -p:LibrariesConfiguration=Debug -keepnativesymbols -p:UseLocalAppHostPack=true -p:UseNativeAotForComponents=true -p:TestNativeAot=true\n# build libs tests\n$ /runtime/build.sh -arch riscv64 -cross -s libs.tests -c Debug --keepnativesymbols true -p:UseLocalAppHostPack=true -p:TestNativeAot=true\n```\n\nsetup NFS between mac and linux:\n```sh\n# on osx-arm64, export runtime dir to linux-riscv64 machine (replace \u003clinux-ip\u003e)\n$ sudo sh -c \u0027echo \"/Users/am11/projects/runtime -alldirs -mapall=501:20 \u003clinux-ip\u003e\" \u003e\u003e /etc/exports\u0027\n$ sudo nfsd restart\n$ sudo nfsd checkexports \n\n# ssh into riscv machine and mount (replace \u003cmac-ip\u003e)\n$ ssh 192.168.1.6\n$ sudo mount -v -t nfs -o resvport,rw,nfsvers=3 \u003cmac-ip\u003e:/Users/am11/projects/runtime ~/projects/runtime\n\n# to debug tests, make a local copy (for smooth debugging):\n$ cd ~/projects\n$ cp -r runtime/artifacts/tests/coreclr/linux.riscv64.Debug/nativeaot/SmokeTests/UnitTests/UnitTests/native .\n$ gdb native/UnitTests\n```\n\nNow it\u0027s about switching between terminal tabs where docker is running (to rebuild) and ssh one.\n\nNote that command to build AOT tests `$ SysRoot=$ROOTFS_DIR /runtime/src/tests/build.sh -riscv64 -cross -nativeaot -tree:nativeaot -Debug -p:LibrariesConfiguration=Debug -keepnativesymbols -p:UseLocalAppHostPack=true -p:UseNativeAotForComponents=true -p:TestNativeAot=true` has extra \"SysRoot\", \"UseNativeAotForComponents\" and \"TestNativeAot\" because of `XUnitLogChecker` which is something to look into. The `UseLocalAppHostPack` part is a known hack for community platforms src/tests/build (https://github.com/am11/runtime/commit/54ff0d270aea2b1904792e457970cdb96912ac18).",
                                           "updatedAt":  "2025-03-10T18:51:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e25KH",
                                           "createdAt":  "2025-02-18T10:18:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGtdow==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-18T10:32:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "The stack trace doesn\u0027t seem to contain anything out of the ordinary. Well, the `RhpUniversalTransition` may be worth checking, but I already fixed the most obvious bugs there (swapped RA/FP in the C code). It\u0027s probably worth double checking if there\u0027s any other stack pointer saved in the assembly code and restored in `StackFrameIterator`.\n\n\u003e BTW, I have figured out a quicker way to rebuild and test, here is the new workbench setup:\n\nThat\u0027s definitely nice. :-) Unfortunately I often switch between different environments and physical locations which is why I opted to build everything on the RV64 machine over SSH. It may be useful if I stay home for the weekend though...",
                                           "updatedAt":  "2025-02-18T10:18:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e8UQl",
                                           "createdAt":  "2025-02-18T18:49:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "The SP in `REGDISPLAY` parameter passed to `RhpCallCatchFunclet` is already wrong. We need to go back from there and figure out where it came from.\n\nUPD: Looks like `ALIGNMENT_PADDING_SIZE` in UniversalTransition could be the culprit. It\u0027s set to 8 but we don\u0027t have the padding in the StackFrameIterator code.\n\nUPD2: The saved FP registers (`m_fpArgRegs`) are also not `Fp128` type.\n\nUPD3: I pushed a fix.",
                                           "updatedAt":  "2025-02-18T19:20:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e9E-X",
                                           "createdAt":  "2025-02-18T19:59:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "@filipnavara, thanks. Does it fix `UnitTests_Generics_TestNativeLayoutGeneration__DeepAV`? I\u0027ll resync with branch shortly.",
                                           "updatedAt":  "2025-02-18T19:59:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e9HgS",
                                           "createdAt":  "2025-02-18T20:04:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "`DeepAV` is supposed to cause an exception, hence the name.",
                                           "updatedAt":  "2025-02-18T20:04:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e9Jtl",
                                           "createdAt":  "2025-02-18T20:08:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Ah, I meant `IDynamicInterfaceCastable`.",
                                           "updatedAt":  "2025-02-18T20:08:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e9LTd",
                                           "createdAt":  "2025-02-18T20:12:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGyf_A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-18T20:14:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Ah, I meant `IDynamicInterfaceCastable`.\n\nYep, fixes that test. I still get some extremely weird multi-threading issues later in the `UnitTests`.",
                                           "updatedAt":  "2025-02-18T20:12:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e9Mfv",
                                           "createdAt":  "2025-02-18T20:15:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGygsQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-18T20:16:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "Perhaps `DynamicGenerics` also fails with same threading error (I noticed it yesterday).",
                                           "updatedAt":  "2025-02-18T20:15:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e94Sw",
                                           "createdAt":  "2025-02-18T22:01:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "The multi-threading issues are going to be pain to debug. We should probably start by fixing `RhpCheckedXchg` atomicity guarantees (and checking `RhpCheckedLockCmpXchg` too, just in case).\n\nThere\u0027s also this thing which was fixed recently for ARM64 (https://github.com/dotnet/runtime/issues/106219):\n```diff\n--- a/src/coreclr/tools/Common/Compiler/DependencyAnalysis/Target_RiscV64/RiscV64Emitter.cs\n+++ b/src/coreclr/tools/Common/Compiler/DependencyAnalysis/Target_RiscV64/RiscV64Emitter.cs\n@@ -25,6 +25,11 @@ public void EmitBreak()\n             Builder.EmitUInt(0x00100073);\n         }\n \n+        public void EmitFENCE()\n+        {\n+            Builder.EmitUInt(0x0ff0000f);\n+        }\n+\n         public void EmitLI(Register regDst, int offset)\n         {\n             Debug.Assert((offset \u003e= -2048) \u0026\u0026 (offset \u003c= 2047));\ndiff --git a/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/DependencyAnalysis/Target_RiscV64/RiscV64ReadyToRunGenericHelperNode.cs b/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/DependencyAnalysis/Target_RiscV64/RiscV64ReadyToRunGenericHelperNode.cs\nindex 584b37e53a7..9514c05cb93 100644\n--- a/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/DependencyAnalysis/Target_RiscV64/RiscV64ReadyToRunGenericHelperNode.cs\n+++ b/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/DependencyAnalysis/Target_RiscV64/RiscV64ReadyToRunGenericHelperNode.cs\n@@ -75,6 +75,7 @@ protected sealed override void EmitCode(NodeFactory factory, ref RiscV64Emitter\n                             // We need to trigger the cctor before returning the base. It is stored at the beginning of the non-GC statics region.\n                             encoder.EmitADDI(encoder.TargetRegister.Arg3, encoder.TargetRegister.Arg0, -NonGCStaticsNode.GetClassConstructorContextSize(factory.Target));\n                             encoder.EmitLD(encoder.TargetRegister.Arg2, encoder.TargetRegister.Arg3, 0);\n+                            encoder.EmitFENCE();\n                             encoder.EmitRETIfZero(encoder.TargetRegister.Arg2);\n \n                             encoder.EmitMOV(encoder.TargetRegister.Arg1, encoder.TargetRegister.Result);\n@@ -106,6 +107,7 @@ protected sealed override void EmitCode(NodeFactory factory, ref RiscV64Emitter\n \n                             encoder.EmitADDI(encoder.TargetRegister.Arg2, encoder.TargetRegister.Arg2, -NonGCStaticsNode.GetClassConstructorContextSize(factory.Target));\n                             encoder.EmitLD(encoder.TargetRegister.Arg3, encoder.TargetRegister.Arg2, 0);\n+                            encoder.EmitFENCE();\n                             encoder.EmitRETIfZero(encoder.TargetRegister.Arg3);\n \n                             encoder.EmitMOV(encoder.TargetRegister.Arg1, encoder.TargetRegister.Result);\n```",
                                           "updatedAt":  "2025-02-18T22:01:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e-BVh",
                                           "createdAt":  "2025-02-18T22:23:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGzTVw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-18T22:25:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I made an attempt to fix the multi-threaded issues and had some luck with running `UnitTests` to a successful end:\n\n```diff\n--- a/src/coreclr/nativeaot/Runtime/riscv64/WriteBarriers.S\n+++ b/src/coreclr/nativeaot/Runtime/riscv64/WriteBarriers.S\n@@ -303,6 +303,7 @@ LEAF_END RhpAssignRef, _TEXT\n //  t0, t1, t2, t6: trashed\n //\n LEAF_ENTRY RhpCheckedLockCmpXchg\n+        fence\n \n LOCAL_LABEL(CmpXchgRetry):\n         // Load the current value at the destination address.\n@@ -342,13 +343,15 @@ LEAF_END RhpCheckedLockCmpXchg\n //\n // On exit:\n //  a0: original value of objectref\n-//  t1: trashed\n-//  t3, t6, t4: trashed\n+//  t1, t2, t6: trashed\n //\n LEAF_ENTRY RhpCheckedXchg\n+        fence\n \n-        ld   t1, 0(a0)\n-        sd   a1, 0(a0)\n+RhpCheckedXchgRetry:\n+        lr.d   t1, 0(a0)\n+        sc.d   t2, a1, 0(a0)\n+        bnez   t2, RhpCheckedXchgRetry // if store conditional failed, retry\n \n DoCardsXchg:\n         // We have successfully updated the value of the objectref so now we need a GC write barrier.\n```\n\nI\u0027ll commit it as WIP. You should review it carefully.",
                                           "updatedAt":  "2025-02-18T22:23:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e-Ji5",
                                           "createdAt":  "2025-02-18T22:45:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "`DynamicGenerics` passed too on my machine with all the committed fixes. I guess it\u0027s time to build and run all the smoke tests to see which ones are still failing.",
                                           "updatedAt":  "2025-02-18T22:48:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e-ehn",
                                           "createdAt":  "2025-02-18T23:49:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Running UnitTests a few times gave me:\n\n```\nTesting TestRuntime109496Regression\n===== Test Interfaces.Run succeeded =====\n===== Running test Threading.Run =====\n    WaitSubsystemTests.DoubleSetOnEventWithTimedOutWaiterShouldNotStayInWaitersList\n    WaitSubsystemTests.ManualResetEventTest\n    WaitSubsystemTests.AutoResetEventTest\n    WaitSubsystemTests.SemaphoreTest\n    WaitSubsystemTests.MutexTest\n    WaitSubsystemTests.WaitDurationTest\n    TimersCreatedConcurrentlyOnDifferentThreadsAllFire\n    ThreadPoolTests.RunProcessorCountItemsInParallel\n    ThreadPoolTests.RunMoreThanMaxJobsMakesOneJobWaitForStarvationDetection\n    ThreadPoolTests.ThreadPoolCanPickUpOneJobWhenThreadIsAvailable\n    ThreadPoolTests.ThreadPoolCanPickUpMultipleJobsWhenThreadsAreAvailable\n    ThreadPoolTests.ThreadPoolCanProcessManyWorkItemsInParallelWithoutDeadlocking\n--------------------------------------------------\nDebug Assertion Violation\n\nExpression: \u0027IS_ALIGNED(len, sizeof(size_t))\u0027\n\nFile: /runtime/src/coreclr/nativeaot/Runtime/GCMemoryHelpers.inl, Line: 74\n--------------------------------------------------\nAborted (core dumped)\n```\n\nanother run:\n\n```\n===== Test Devirtualization.Run succeeded =====\n===== Running test StackTraces.Run =====\nProcess terminated. Assertion failed.\nA QueueUserWorkItemCallback was called twice!\n   at System.Diagnostics.DebugProvider.Fail(String, String) + 0x64\n   at System.Diagnostics.Debug.Fail(String, String) + 0x70\n   at System.Diagnostics.Debug.Assert(Boolean, String, String) + 0x58\n   at System.Diagnostics.Debug.Assert(Boolean, String) + 0x3c\n   at System.Threading.QueueUserWorkItemCallbackBase.Execute() + 0x6c\n   at System.Threading.QueueUserWorkItemCallbackDefaultContext.Execute() + 0x3c\n   at System.Threading.ThreadPoolWorkQueue.DispatchWorkItem(Object, Thread) + 0x100\n   at System.Threading.ThreadPoolWorkQueue.Dispatch() + 0x888\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerDoWork(PortableThreadPool, Boolean\u0026) + 0x6c\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart() + 0x31c\n   at UnitTests!\u003cBaseAddress\u003e+0x7e5504\n   at System.Threading.Thread.StartHelper.RunWorker() + 0xac\n   at System.Threading.Thread.StartHelper.Run() + 0xf8\n   at System.Threading.Thread.StartThread(IntPtr) + 0x18c\n   at System.Threading.Thread.ThreadEntryPoint(IntPtr) + 0x38\nAborted (core dumped)\n```",
                                           "updatedAt":  "2025-02-18T23:49:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e-r3k",
                                           "createdAt":  "2025-02-19T00:35:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Ah, I had to delete `artifacts/tests` before rebuilding the tests. Apparently it doesn\u0027t recognize that updated/new toolchain is being used.\n\n`UnitTests` are now passing under qemu (strangely even with BasicThreading), and without BasicThreading on the machine.\n`DynamicGenerics` are failing at:\n\n```\nRunning Test: ThreadLocalStatics.TLSTesting.ThreadLocalStatics_Test\nAssert.AreEqual:Expected: [string3_thread#5]. Actual: [NULL]. \nSegmentation fault (core dumped)\n```\nsometimes:\n```\n--------------------------------\nRunning Test: ThreadLocalStatics.TLSTesting.ThreadLocalStatics_Test\nProcess terminated. Access Violation: Attempted to read or write protected memory. This is often an indication that other memory is corrupt. The application will be terminated since this platform does not support throwing an AccessViolationException.\nAborted (core dumped)\n```\nand sometimes:\n\n```\n--------------------------------\nRunning Test: ThreadLocalStatics.TLSTesting.ThreadLocalStatics_Test\nAssert.AreEqual:Expected: [305?9110]. Actual: [305839110]. \nProcess terminated. Assertion failed.\nInvalid arguments provided to method.\n   at System.Diagnostics.DebugProvider.Fail(String, String) + 0x64\n   at System.Diagnostics.Debug.Fail(String, String) + 0x70\n   at System.Diagnostics.Debug.Assert(Boolean, String, String) + 0x58\n   at System.Diagnostics.Debug.Assert(Boolean, String) + 0x3c\n   at System.Text.Encoding.GetCharsWithFallback(Byte*, Int32, Char*, Int32, Int32, Int32, Boolean) + 0x98\n   at System.Text.UTF8Encoding.GetCharsCommon(Byte*, Int32, Char*, Int32, Boolean) + 0x1d0\n   at System.Text.UTF8Encoding.GetChars(Byte*, Int32, Char*, Int32) + 0x150\n   at System.String.CreateStringFromEncoding(Byte*, Int32, Encoding) + 0x164\n   at System.Text.Encoding.GetString(Byte*, Int32) + 0x78\n   at Internal.NativeFormat.NativeReader.DecodeString(UInt32, String\u0026) + 0x180\n   at Internal.Metadata.NativeFormat.MdBinaryReader.Read(NativeReader, UInt32, String\u0026) + 0x3c\n   at Internal.Metadata.NativeFormat.ConstantStringValue..ctor(MetadataReader, ConstantStringValueHandle) + 0xdc\n   at Internal.Metadata.NativeFormat.ConstantStringValueHandle.GetConstantStringValue(MetadataReader) + 0x4c\n   at Internal.Runtime.TypeLoader.MetadataNameExtensions.GetFullName(TypeDefinitionHandle, MetadataReader, String\u0026, String\u0026, String\u0026) + 0x1f0\n   at Internal.Runtime.TypeLoader.MetadataNameExtensions.GetFullName(TypeDefinitionHandle, MetadataReader) + 0x74\n   at Internal.Runtime.TypeLoader.LowLevelStringConverter.LowLevelToString(RuntimeTypeHandle) + 0xbc\n   at Internal.TypeSystem.NoMetadata.NoMetadataType.ToString() + 0xe4\n   at Internal.TypeSystem.TypeNameHelper.WithDebugName[T](T) + 0x98\n   at Internal.TypeSystem.TypeSystemContext.ResolveRuntimeTypeHandle(RuntimeTypeHandle) + 0xa44\n   at Internal.Runtime.TypeLoader.TypeLoaderTypeSystemContext.GetWellKnownType(WellKnownType, Boolean) + 0xa94\n   at Internal.TypeSystem.TypeDescExtensions.IsWellKnownType(TypeDesc, WellKnownType) + 0x68\n   at Internal.TypeSystem.TypeDesc.get_IsObject() + 0x30\n   at Internal.TypeSystem.DebugNameFormatter.AppendNameForNamespaceType(StringBuilder, DefType, DebugNameFormatter.FormatOptions) + 0x57c\n   at Internal.TypeSystem.TypeNameFormatter`2.AppendName(StringBuilder, DefType, TOptions) + 0x164\n   at Internal.TypeSystem.TypeNameFormatter`2.AppendName(StringBuilder, TypeDesc, TOptions) + 0x318\n   at Internal.TypeSystem.TypeNameFormatter`2.FormatName(TypeDesc, TOptions) + 0x7c\n   at Internal.TypeSystem.TypeDesc.ToString() + 0x74\n   at Internal.TypeSystem.TypeNameHelper.WithDebugName[T](T) + 0x98\n   at Internal.TypeSystem.TypeSystemContext.ResolveRuntimeTypeHandle(RuntimeTypeHandle) + 0xa44\n   at Internal.Runtime.TypeLoader.TypeLoaderEnvironment.CanInstantiationsShareCode(RuntimeTypeHandle[], RuntimeTypeHandle[], CanonicalFormKind) + 0x13c\n   at Internal.Runtime.TypeLoader.CanonicallyEquivalentEntryLocator.IsCanonicallyEquivalent(RuntimeTypeHandle) + 0x230\n   at Internal.Runtime.TypeLoader.TypeLoaderEnvironment.InvokeMapEntryDataEnumerator`2.GetNext(NativeParser\u0026, ExternalReferencesTable\u0026, MethodSignatureComparer\u0026, CanonicallyEquivalentEntryLocator) + 0x394\n   at Internal.Runtime.TypeLoader.TypeLoaderEnvironment.TryGetMethodInvokeMetadataFromInvokeMap(MetadataReader, RuntimeTypeHandle, MethodHandle, RuntimeTypeHandle[], MethodSignatureComparer\u0026, CanonicalFormKind, MethodInvokeMetadata\u0026) + 0x304\n   at Internal.Runtime.TypeLoader.TypeLoaderEnvironment.TryGetMethodInvokeMetadata(RuntimeTypeHandle, QMethodDefinition, RuntimeTypeHandle[], MethodSignatureComparer\u0026, CanonicalFormKind, MethodInvokeMetadata\u0026) + 0xcc\n   at Internal.Reflection.Execution.ExecutionEnvironmentImplementation.TryGetMethodInvokeInfo(RuntimeTypeHandle, QMethodDefinition, RuntimeTypeHandle[], MethodBase, MethodSignatureComparer\u0026, CanonicalFormKind) + 0x78\n   at Internal.Reflection.Execution.ExecutionEnvironmentImplementation.TryGetMethodInvoker(RuntimeTypeHandle, QMethodDefinition, RuntimeTypeHandle[]) + 0x110\n   at Internal.Reflection.Core.Execution.ExecutionEnvironment.GetMethodInvoker(RuntimeTypeInfo, QMethodDefinition, RuntimeTypeInfo[], MemberInfo, Exception\u0026) + 0x2d0\n   at System.Reflection.Runtime.MethodInfos.NativeFormat.NativeFormatMethodCommon.GetUncachedMethodInvoker(RuntimeTypeInfo[], MemberInfo, Exception\u0026) + 0xf0\n   at System.Reflection.Runtime.MethodInfos.RuntimeNamedMethodInfo`1.GetUncachedMethodInvoker(RuntimeTypeInfo[], MemberInfo) + 0x58\n   at System.Reflection.Runtime.MethodInfos.RuntimeNamedMethodInfo`1.get_UncachedMethodInvoker() + 0xc0\n   at System.Reflection.Runtime.MethodInfos.RuntimeMethodInfo.get_MethodInvoker() + 0x7c\n   at System.Reflection.Runtime.MethodInfos.RuntimeMethodInfo.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo) + 0x5c\n   at System.Reflection.MethodBase.Invoke(Object, Object[]) + 0x48\n   at ThreadLocalStatics.TLSTesting.MakeType2(Type, Type, Boolean) + 0xfa0\n   at ThreadLocalStatics.TLSTesting.\u003c\u003ec__DisplayClass3_0.\u003cMultiThreaded_Test\u003eb__0() + 0xa8\n   at System.Threading.Tasks.Task.InnerInvoke() + 0x94\n   at System.Threading.Tasks.Task.\u003c\u003ec.\u003c.cctor\u003eb__292_0(Object obj) + 0x78\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread, ExecutionContext, ContextCallback, Object) + 0x114\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task\u0026, Thread) + 0x214\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(Thread) + 0xcc\n   at System.Threading.Tasks.Task.ExecuteFromThreadPool(Thread) + 0x2c\n   at System.Threading.ThreadPoolWorkQueue.DispatchWorkItem(Object, Thread) + 0x88\n   at System.Threading.ThreadPoolWorkQueue.Dispatch() + 0x888\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerDoWork(PortableThreadPool, Boolean\u0026) + 0x6c\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart() + 0x31c\n   at DynamicGenerics!\u003cBaseAddress\u003e+0x995e64\n   at System.Threading.Thread.StartHelper.RunWorker() + 0xac\n   at System.Threading.Thread.StartHelper.Run() + 0xf8\n   at System.Threading.Thread.StartThread(IntPtr) + 0x18c\n   at System.Threading.Thread.ThreadEntryPoint(IntPtr) + 0x38\nAborted (core dumped)\n```",
                                           "updatedAt":  "2025-02-19T00:35:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fAP-z",
                                           "createdAt":  "2025-02-19T06:44:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e `UnitTests` are now passing under qemu (strangely even with BasicThreading), and without BasicThreading on the machine.\n\nI believe that the bug affecting `BasicThreading` was the incorrect implementation of `RhpCheckedXchg`.\n\n\u003e `DynamicGenerics` are failing at:\n\nI can reproduce those. Apparently my previous run used `DOTNET_gcConservative=1` which was a leftover from some previous tests. The test still passes reliably with the conservative GC on my machine. That means we are looking at GC hole but at least it narrows it down.\n\n",
                                           "updatedAt":  "2025-02-19T06:44:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fAhQj",
                                           "createdAt":  "2025-02-19T07:22:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "With `DOTNET_gcConservative=1` (and servergc), `DynamicGenerics` passes on my machine as well.\n\n`BasicThreading`, without `DOTNET_gcConservative`, takes a while before it OOMs:\n\n```\n===== Running test BasicThreading.Run =====\nSystem.AggregateException: One or more errors occurred. (Thread failed to start.)\n ---\u003e System.Threading.ThreadStartException: Thread failed to start.\n ---\u003e System.OutOfMemoryException: Insufficient memory to continue the execution of the program.\n   --- End of inner exception stack trace ---\n   at System.Threading.Thread.StartCore() + 0x318\n   at System.Threading.Thread.Start(Boolean) + 0xf8\n   at System.Threading.Thread.Start() + 0x28\n   at ThreadTest.\u003c\u003ec__DisplayClass10_0.\u003cTestConcurrentIsBackgroundProperty\u003eb__1() + 0x30\n   at System.Threading.Tasks.Task.InnerInvoke() + 0x94\n   at System.Threading.Tasks.Task.\u003c\u003ec.\u003c.cctor\u003eb__292_0(Object) + 0x78\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread, ExecutionContext, ContextCallback, Object) + 0x114\n--- End of stack trace from previous location ---\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread, ExecutionContext, ContextCallback, Object) + 0x198\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task\u0026, Thread) + 0x214\n   --- End of inner exception stack trace ---\n   at System.Threading.Tasks.Task.WaitAllCore(ReadOnlySpan`1, Int32, CancellationToken) + 0x874\n   at System.Threading.Tasks.Task.WaitAll(Task[]) + 0x94\n   at ThreadTest.TestConcurrentIsBackgroundProperty() + 0x2cc\n   at ThreadTest.Run() + 0xc8\n   at BasicThreading.Run() + 0x9c\n   at UnitTests!\u003cBaseAddress\u003e+0x734a74\n   at Program.\u003c\u003cMain\u003e$\u003eg__RunTest|0_0(Func`1, String) + 0x94\n===== Test BasicThreading.Run failed =====\n===== Running test Delegates.Run =====\n..\n```\n\nalthough, there is enough:\n\n```sh\n$ free -m\n               total        used        free      shared  buff/cache   available\nMem:           15904         938       14305           4         890       14966\nSwap:              0           0           0\n```",
                                           "updatedAt":  "2025-02-19T07:22:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fBHrs",
                                           "createdAt":  "2025-02-19T08:16:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEG2UZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-19T08:19:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "A P/Invoke test is failing.\n\n```gdb\n(gdb) b PInvokeNative.cpp:341\n(gdb) b PInvoke.cs:702\n(gdb) r\n\nThread 1 \"PInvoke\" hit Breakpoint 4, ReversePInvoke_Int (fnPtr=0x3ff7fbe000) at /runtime/src/tests/nativeaot/SmokeTests/PInvoke/PInvokeNative.cpp:341\n341\t    return fnPtr(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == 55;\n(gdb) c\nContinuing.\n\nThread 1 \"PInvoke\" hit Breakpoint 6, PInvoke_PInvokeTests_Program__Sum (a=-136619912, b=2, c=3, d=4, e=5, f=-136620160, g=7, h=8, i=9, j=10) at /runtime/src/tests/nativeaot/SmokeTests/PInvoke/PInvoke.cs:702\n702\t            return a + b + c + d + e + f + g + h + i + j;\n(gdb) bt\n#0  PInvoke_PInvokeTests_Program__Sum (a=-136619912, b=2, c=3, d=4, e=5, f=-136620160, g=7, h=8, i=9, j=10) at /runtime/src/tests/nativeaot/SmokeTests/PInvoke/PInvoke.cs:702\n#1  0x0000002aaaf99638 in Internal_CompilerGenerated__Module___\u003cReverseOpenStaticDelegateStub\u003ePInvoke_PInvokeTests_Program_Delegate_Int () at /runtime/src/coreclr/nativeaot/Common/src/System/Collections/Generic/LowLevelDictionary.cs:289\n#2  0x0000003ff7fd1800 in ReversePInvoke_Int (fnPtr=0x3ff7fbe000) at /runtime/src/tests/nativeaot/SmokeTests/PInvoke/PInvokeNative.cpp:341\n#3  0x0000002aaad05cf0 in PInvoke_PInvokeTests_Program__ReversePInvoke_Int ()\n#4  0x0000002aaad0c484 in PInvoke_PInvokeTests_Program__TestDelegate () at /runtime/src/tests/nativeaot/SmokeTests/PInvoke/PInvoke.cs:636\n#5  0x0000002aaad0a9c4 in PInvoke_PInvokeTests_Program__Main () at /runtime/src/tests/nativeaot/SmokeTests/PInvoke/PInvoke.cs:339\n#6  0x0000002aaafa04d4 in __managed__Main () at /runtime/src/coreclr/nativeaot/Common/src/System/Collections/Generic/LowLevelDictionary.cs:289\n#7  0x0000002aaac5483a in main (argc=1, argv=0x3ffffff138) at /runtime/src/coreclr/nativeaot/Bootstrap/main.cpp:225\n```\n\n`a` and `f` have trash. ",
                                           "updatedAt":  "2025-02-19T08:52:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fCNpj",
                                           "createdAt":  "2025-02-19T10:08:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "At least some of the PInvoke parameter trashing happens in `RhCommonStub` with the `INLINE_GET_TLS_VAR`. At very least it seems to trash `a0` and likely `a5` too.\n\nAt `RhCommonStub+44` it\u0027s already trashed:\n```\na0             0x3ff7db4878     274741282936\na1             0x2      2\na2             0x3      3\na3             0x4      4\na4             0x5      5\na5             0xf8     248\na6             0x7      7\na7             0x8      8\ns2             0x1      1\ns3             0x0      0\n```\n\n(also, `INLINE_GET_TLS_VAR` pushes the stack without producing unwinding information; we don\u0027t interrupt threads running native code so it should not cause issues but it may hinder debugging experience when stepping through the code)",
                                           "updatedAt":  "2025-02-19T10:13:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fCmrr",
                                           "createdAt":  "2025-02-19T10:45:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEG3m-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-19T10:52:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "Thanks! I\u0027ve pushed a fix. When we will switch to tlsdesc in the future, these prolog/epilog won\u0027t be needed (as linker magic due to tlsdesc preserves it). I kept the old version because it requires \"everything new\" libc,binutils-bfd,lld etc. from 2024. In a year or so, we can bump the baseline and switch to tlsdesc.",
                                           "updatedAt":  "2025-02-19T10:45:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fCrJz",
                                           "createdAt":  "2025-02-19T10:52:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEG3nkA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-19T10:53:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Thanks! I\u0027ve pushed a fix.\n\nNote that to be completely safe we should save all `aX` registers, including `a7` and `a8`. It can also trash any `tX` registers and we currently only save `t1` and use one of the `tX` for the return value. This is extremely fragile.\n\n(FWIW I am running up-to-date Ubuntu STS so I should have all the packages necessary for the TLSDESC to work.)",
                                           "updatedAt":  "2025-02-19T10:52:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fCzGG",
                                           "createdAt":  "2025-02-19T11:05:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Bianbu 2.1 (based on Ubuntu 24.04) is using linux 6.6, they are upstreaming their driver patches to linux, so hopefully I will be able to switch the distro soon (or they will switch to kernel 6.8 or above + the newer libc with TLSDESC 🙂). SpacemiT K1 SoC  is also used in other devices (Milk-V https://github.com/milkv-jupiter/jupiter-bianbu-build and boards), so I hope people will extract the patches in other distros rather quickly.\n\nWe can also sync with @tomeksowi et al. on baseline versions after the port completion.",
                                           "updatedAt":  "2025-02-19T11:05:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fC5CO",
                                           "createdAt":  "2025-02-19T11:16:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEG3z4Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-19T11:23:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e Note that to be completely safe we should save all aX registers\n\nPushed a7 (a0 is preserved at call-sites). PInvoke tests are passing. 👍",
                                           "updatedAt":  "2025-02-19T11:16:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fD0zq",
                                           "createdAt":  "2025-02-19T12:57:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e `BasicThreading`, without `DOTNET_gcConservative`, takes a while before it OOMs:\n\nThis one is sometimes stuck and from second terminal, strace -p shows it\u0027s waiting for futex sync:\n\n```sh\n$ strace -p 89552\nstrace: Process 89552 attached\nfutex(0x2ac8e17904, FUTEX_WAIT_BITSET_PRIVATE|FUTEX_CLOCK_REALTIME, 0, NULL, FUTEX_BITSET_MATCH_ANY\n(nothing afterwards)\n```\nand gdb -p:\n```gdb\nAttaching to process 89552\n[New LWP 97850]\n[New LWP 97196]\n[New LWP 97025]\n[New LWP 95070]\n[New LWP 93241]\n[New LWP 89556]\n[New LWP 89554]\n[New LWP 89553]\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/riscv64-linux-gnu/libthread_db.so.1\".\n0x0000003fb635c742 in __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x2ac8e17904) at ./nptl/futex-internal.c:57\n\nwarning: 57\t./nptl/futex-internal.c: No such file or directory\n(gdb) bt\n#0  0x0000003fb635c742 in __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x2ac8e17904) at ./nptl/futex-internal.c:57\n#1  __futex_abstimed_wait_common (futex_word=futex_word@entry=0x2ac8e17904, expected=expected@entry=0, clockid=clockid@entry=0, abstime=abstime@entry=0x0, private=private@entry=0, cancel=cancel@entry=true) at ./nptl/futex-internal.c:87\n#2  0x0000003fb635c77c in __GI___futex_abstimed_wait_cancelable64 (futex_word=futex_word@entry=0x2ac8e17904, expected=expected@entry=0, clockid=clockid@entry=0, abstime=abstime@entry=0x0, private=private@entry=0) at ./nptl/futex-internal.c:139\n#3  0x0000003fb635e7ac in __pthread_cond_wait_common (abstime=0x0, clockid=0, mutex=0x2ac8e178b0, cond=0x2ac8e178d8) at ./nptl/pthread_cond_wait.c:503\n#4  ___pthread_cond_wait (cond=0x2ac8e178d8, mutex=0x2ac8e178b0) at ./nptl/pthread_cond_wait.c:627\n#5  0x0000002ac865956a in SystemNative_LowLevelMonitor_Wait (monitor=0x2ac8e178b0) at /runtime/src/native/libs/System.Native/pal_threading.c:153\n#6  0x0000002ac89b3af0 in S_P_CoreLib_Interop_Sys__LowLevelMonitor_Wait ()\n    at /runtime/artifacts/obj/coreclr/nativeaot/System.Private.CoreLib/linux.riscv64.Debug/generated/Microsoft.Interop.LibraryImportGenerator/Microsoft.Interop.LibraryImportGenerator/LibraryImports.g.cs:2524\n#7  0x0000002ac88adacc in S_P_CoreLib_System_Threading_LowLevelMonitor__WaitCore (this=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Threading/LowLevelMonitor.Unix.cs:44\n#8  0x0000002ac88ad77c in S_P_CoreLib_System_Threading_LowLevelMonitor__Wait (this=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Threading/LowLevelMonitor.cs:91\n#9  0x0000002ac89e5394 in S_P_CoreLib_System_Threading_WaitSubsystem_ThreadWaitInfo__Wait (this=..., timeoutMilliseconds=-1, interruptible=true, isSleep=false, lockHolder=...)\n    at /runtime/src/libraries/System.Private.CoreLib/src/System/Threading/WaitSubsystem.ThreadWaitInfo.Unix.cs:322\n#10 0x0000002ac89e7b74 in S_P_CoreLib_System_Threading_WaitSubsystem_WaitableObject__Wait_Locked (this=..., waitInfo=..., timeoutMilliseconds=-1, interruptible=true, prioritize=false, lockHolder=...)\n    at /runtime/src/libraries/System.Private.CoreLib/src/System/Threading/WaitSubsystem.WaitableObject.Unix.cs:368\n#11 0x0000002ac89e76f0 in S_P_CoreLib_System_Threading_WaitSubsystem_WaitableObject__Wait (this=..., waitInfo=..., timeoutMilliseconds=-1, interruptible=true, prioritize=false)\n    at /runtime/src/libraries/System.Private.CoreLib/src/System/Threading/WaitSubsystem.WaitableObject.Unix.cs:320\n#12 0x0000002ac88c1aa8 in S_P_CoreLib_System_Threading_WaitSubsystem__Wait_0 (waitableObject=..., timeoutMilliseconds=-1, interruptible=true, prioritize=false)\n    at /runtime/src/libraries/System.Private.CoreLib/src/System/Threading/WaitSubsystem.Unix.cs:339\n#13 0x0000002ac88c19a0 in S_P_CoreLib_System_Threading_WaitSubsystem__Wait (handle=272382796208, timeoutMilliseconds=-1, interruptible=true) at /runtime/src/libraries/System.Private.CoreLib/src/System/Threading/WaitSubsystem.Unix.cs:327\n#14 0x0000002ac88bc6e0 in S_P_CoreLib_System_Threading_WaitHandle__WaitOneCore (handle=272382796208, millisecondsTimeout=-1, useTrivialWaits=false) at /runtime/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.Unix.cs:11\n#15 0x0000002ac88bab58 in S_P_CoreLib_System_Threading_WaitHandle__WaitOneNoCheck (this=..., millisecondsTimeout=-1, useTrivialWaits=false, associatedObject=..., waitSource=Unknown)\n    at /runtime/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs:183\n#16 0x0000002ac88ba67c in S_P_CoreLib_System_Threading_WaitHandle__WaitOne (this=..., millisecondsTimeout=-1) at /runtime/src/libraries/System.Private.CoreLib/src/System/Threading/WaitHandle.cs:104\n#17 0x0000002ac88a5864 in S_P_CoreLib_System_Threading_Thread__JoinInternal (this=..., millisecondsTimeout=-1) at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Threading/Thread.NativeAot.Unix.cs:82\n#18 0x0000002ac88a4768 in S_P_CoreLib_System_Threading_Thread__Join (this=..., millisecondsTimeout=-1) at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Threading/Thread.NativeAot.cs:327\n#19 0x0000002ac88a6ac8 in S_P_CoreLib_System_Threading_Thread__Join_0 (this=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Threading/Thread.cs:540\n#20 0x0000002ac8a6f174 in UnitTests_ThreadTest__ExpectPassed (testName=..., expectedPassed=10000) at /runtime/src/tests/nativeaot/SmokeTests/UnitTests/BasicThreading.cs:328\n#21 0x0000002ac8a70748 in UnitTests_ThreadTest__TestConcurrentIsBackgroundProperty () at /runtime/src/tests/nativeaot/SmokeTests/UnitTests/BasicThreading.cs:448\n#22 0x0000002ac8a71798 in UnitTests_ThreadTest__Run () at /runtime/src/tests/nativeaot/SmokeTests/UnitTests/BasicThreading.cs:605\n#23 0x0000002ac8a6dddc in UnitTests_BasicThreading__Run () at /runtime/src/tests/nativeaot/SmokeTests/UnitTests/BasicThreading.cs:25\n#24 0x0000002ac8acaad4 in S_P_CoreLib_System_Func_1\u003cInt32\u003e__InvokeOpenStaticThunk () at /runtime/src/libraries/System.Private.CoreLib/src/System/Array.Enumerators.cs:111\n#25 0x0000002ac8a81394 in UnitTests_Program____Main___g__RunTest_0_0 (t=..., name=...) at /runtime/src/tests/nativeaot/SmokeTests/UnitTests/Main.cs:23\n#26 0x0000002ac8a80e40 in UnitTests_Program___Main__ (args=...) at /runtime/src/tests/nativeaot/SmokeTests/UnitTests/Main.cs:7\n#27 0x0000002ac8b8a30c in __managed__Main () at /runtime/src/libraries/System.Private.CoreLib/src/System/ValueTuple.cs:793\n#28 0x0000002ac8669684 in main (argc=1, argv=0x3ffa116178) at /runtime/src/coreclr/nativeaot/Bootstrap/main.cpp:225\n```\n\nWhen I run it with `strace -f`, it completes. Also running it under gdb, it completes. So it seems like a race condition with locks. 👀 ",
                                           "updatedAt":  "2025-02-19T12:57:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fEQdD",
                                           "createdAt":  "2025-02-19T13:42:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e This one is sometimes stuck and from second terminal, strace -p shows it\u0027s waiting for futex sync:\n\nThat was happening to me before I made the `RhpCheckedXchg` fix. One of the threads running `TestConcurrentIsBackgroundProperty`/`TestIsBackgroundProperty` (iirc) was stuck on `ManualResetEventSlim.Set`, and the main thread was stuck on joining the thread that was blocked by the `ManualResetEventSlim`.\n\n(Interrupting the syscall likely forced a loop in `ManualResetEventSlim` that did a recheck on the condition and unblocked the process.)",
                                           "updatedAt":  "2025-02-19T13:42:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fHZIv",
                                           "createdAt":  "2025-02-19T19:01:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Interesting, I have `RhpCheckedXchg` change in the branch. Did a fresh build, just in case, it persists.\n\nOverall status of smoke tests is looking much better now, exceptions are:\n\n1. `DynamicGenerics` without `DOTNET_gcConservative`\n2. `UnitTests` -\u003e `BasicThreading` category fails on my device if run standalone, passes under debugger/strace, passes on @filipnavara\u0027s device, passes on qemu (running on arm64).\n3. `DwarfDump` fails due to different count (not a real failure, just need if TARGET_RISCV64; unimportant for now)\n\n\nI think we can send a PR after resolving 1. I haven\u0027t done any testing with Release build yet, but we can cover it after this phase is over (during the AOT libs tests 🙂).",
                                           "updatedAt":  "2025-02-19T19:01:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fHh-F",
                                           "createdAt":  "2025-02-19T19:20:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEG7oeQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-19T19:31:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e I think we can send a PR after resolving 1.\n\nI\u0027ve started looking into it but haven\u0027t made much progress. From time to time I can make it crash inside the method table check (first pointer in object) with null value. One time it happened I dumped the pointer address and traced it back on the stack:\n\n```\n#0  0x0000002aab1b16ac in S_P_CoreLib_Internal_Runtime_MethodTable__get_HasComponentSize (this=...) at /home/ubuntu/runtime/src/coreclr/nativeaot/Common/src/Internal/Runtime/MethodTable.cs:183\n#1  0x0000002aab1b17e8 in S_P_CoreLib_Internal_Runtime_MethodTable__get_ExtendedFlags (this=...) at /home/ubuntu/runtime/src/coreclr/nativeaot/Common/src/Internal/Runtime/MethodTable.cs:252\n#2  0x0000002aab1b2b98 in S_P_CoreLib_Internal_Runtime_MethodTable__get_IsIDynamicInterfaceCastable (this=...)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/Common/src/Internal/Runtime/MethodTable.cs:706\n#3  0x0000002aab123280 in S_P_CoreLib_System_Runtime_CachedInterfaceDispatch__RhResolveDispatchWorker (pObject=..., cell=0x2aab6a9760, cellInfo=...)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/CachedInterfaceDispatch.cs:137\n#4  0x0000002aab122d3c in S_P_CoreLib_System_Runtime_CachedInterfaceDispatch__RhpCidResolve_Worker (pObject=..., pCell=183264515936)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/CachedInterfaceDispatch.cs:28\n#5  0x0000002aab122c8c in S_P_CoreLib_System_Runtime_CachedInterfaceDispatch__RhpCidResolve (callerTransitionBlockParam=273254704432, pCell=183264515936)\n    at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/CachedInterfaceDispatch.cs:19\n#6  0x0000002aaaed724a in RhpUniversalTransition_DebugStepTailCall () at /home/ubuntu/runtime/src/coreclr/nativeaot/Runtime/riscv64/UniversalTransition.S:182\n#7  0x0000002aab30d84c in __VerifyUnifierConsistency (this=...) at /home/ubuntu/runtime/src/coreclr/nativeaot/Common/src/System/Collections/Concurrent/ConcurrentUnifierWKeyed.cs:341\n#8  0x0000002aab30c194 in __GetOrAdd (this=..., key=...) at /home/ubuntu/runtime/src/coreclr/nativeaot/Common/src/System/Collections/Concurrent/ConcurrentUnifierWKeyed.cs:113\n...\n```\n\nIt was saved in the frame 7 on the stack. The value on the stack at `-48(fp)` and matched the value that was propagated down. The GC info for `__VerifyUnifierConsistency` marks that location as untracked but valid for the duration of the whole frame:\n```\nStack slot id for offset -48 (-0x30) (frame) (untracked) = 1.\n```\n\nThis should have been reported during the GC, yet somehow the object was collected and overwritten with zeroes. (On second thought, I didn\u0027t try tracing back in the JIT dump if there was a moment where it was not reported correctly before it was written to the stack location.)",
                                           "updatedAt":  "2025-02-19T19:21:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fHt0y",
                                           "createdAt":  "2025-02-19T19:44:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEG_nhQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tomeksowi",
                                                                               "createdAt":  "2025-02-19T20:19:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-20T08:12:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003cstrike\u003e\nI must be missing something in the JIT dump: https://gist.github.com/filipnavara/bce9efde00397de89c7f69c2f6166234\n\nThe garbage value I observed was loaded from stack to register at this instruction:\n```\nIN00b4: 000340      ld             a0, -48(fp)\n```\n\nThe only time that stack location is referenced is in\n```\nIN009c: 0002D8      addi           a1, fp, -48\n```\n\nWhere is it written? What am I missing?\n\u003c/strike\u003e\n\nAh, nevermind, I see it now - `System.WeakReference\u00271[System.__Canon]:TryGetTarget(byref):ubyte:this`.\n\n",
                                           "updatedAt":  "2025-02-19T19:56:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fLa1t",
                                           "createdAt":  "2025-02-20T06:22:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I think the instruction masks in `IsInProlog` may be incorrect. Coming from ARM I always get confused whether they are little/big endian with respect to the manual but regardless of the order they look weird to me.\n\nMay be worth checking. We cannot unwind prologs properly, or rather unwind to wrong functions or apply incorrect GC info, so if this was indeed incorrect it could explain some of the crashes in the heavily multi-threaded/GC tests.\n\nHere\u0027s what I **think** the constants should be:\n```\n// store pair with signed offset\n#define STW_PAIR_BITS 0x00003023\n#define STW_PAIR_MASK 0x0000707F\n\n// add fp, sp, x\n// addi fp, sp, x\n#define ADD_FP_SP_BITS 0x00010413\n#define ADD_FP_SP_MASK 0x000FFFFF\n\n#define STW_PAIR_RS1_MASK 0xF8000\n#define STW_PAIR_RS1_SP  0x10000\n#define STW_PAIR_RS1_FP  0x40000\n#define STW_PAIR_RS2_MASK 0x1F00000\n#define STW_PAIR_RS2_FP  0x800000\n#define STW_PAIR_RS2_RA  0x100000\n```\n(I didn\u0027t actually check it yet. Also, it\u0027s missing the \"addi sp, sp, imm\" pattern.)",
                                           "updatedAt":  "2025-02-20T07:51:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fMFEp",
                                           "createdAt":  "2025-02-20T08:07:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEG_ycQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-20T08:36:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I ended up with this patch for `IsInProlog`:\n```diff\ndiff --git a/src/coreclr/nativeaot/Runtime/unix/UnixNativeCodeManager.cpp b/src/coreclr/nativeaot/Runtime/unix/UnixNativeCodeManager.cpp\nindex a1e2e507df8..80b15694ece 100644\n--- a/src/coreclr/nativeaot/Runtime/unix/UnixNativeCodeManager.cpp\n+++ b/src/coreclr/nativeaot/Runtime/unix/UnixNativeCodeManager.cpp\n@@ -699,22 +699,23 @@ int UnixNativeCodeManager::IsInProlog(MethodInfo * pMethodInfo, PTR_VOID pvAddre\n #elif defined(TARGET_RISCV64)\n \n // store pair with signed offset\n-// 0100 00xx xxxxxxxx xxxx xxxx xxxx xxxx\n-#define STW_PAIR_BITS 0x04000000\n-#define STW_PAIR_MASK 0xFC000000\n+#define STW_PAIR_BITS 0x00003023\n+#define STW_PAIR_MASK 0x0000707F\n \n-// add fp, sp, x\n-// addi fp, sp, x\n-// 0000 0001 100x xxxx xxxx xxxx 0000 0000\n-#define ADD_FP_SP_BITS 0x01C00000\n-#define ADD_FP_SP_MASK 0xFFFFE000\n-\n-#define STW_PAIR_RS1_MASK 0xF80\n-#define STW_PAIR_RS1_SP  0xF80\n-#define STW_PAIR_RS1_FP  0xF00\n-#define STW_PAIR_RS2_MASK 0xF00\n-#define STW_PAIR_RS2_FP  0xF00\n-#define STW_PAIR_RS2_RA  0xF40\n+// add[i] fp, sp, x\n+#define ADD_FP_SP_BITS 0x00010413\n+#define ADD_FP_SP_MASK 0x000FFFFF\n+\n+// add[i] sp, sp, x\n+#define ADD_SP_SP_BITS 0x00010113\n+#define ADD_SP_SP_MASK 0x000FFFFF\n+\n+#define STW_PAIR_RS1_MASK 0xF8000\n+#define STW_PAIR_RS1_SP  0x10000\n+#define STW_PAIR_RS1_FP  0x40000\n+#define STW_PAIR_RS2_MASK 0x1F00000\n+#define STW_PAIR_RS2_FP  0x800000\n+#define STW_PAIR_RS2_RA  0x100000\n \n     UnixNativeMethodInfo * pNativeMethodInfo = (UnixNativeMethodInfo *)pMethodInfo;\n     ASSERT(pNativeMethodInfo != NULL);\n@@ -740,7 +741,7 @@ int UnixNativeCodeManager::IsInProlog(MethodInfo * pMethodInfo, PTR_VOID pvAddre\n         {\n             establishedFp = true;\n         }\n-        else\n+        else if ((instr \u0026 ADD_SP_SP_MASK) != ADD_SP_SP_BITS)\n         {\n             // JIT generates other patterns into the prolog that we currently don\u0027t\n             // recognize (saving unpaired register, stack pointer adjustments). We\n```\n\nIt doesn\u0027t fix the DynamicGenerics prolog by itself but it should still be reviewed for correctness.\n\nUPD: `TrailingEpilogueInstructionsCount` could be wrong too, but at least it seems to get the masks right.",
                                           "updatedAt":  "2025-02-20T08:20:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fMTZc",
                                           "createdAt":  "2025-02-20T08:36:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Should we apply it to the branch?",
                                           "updatedAt":  "2025-02-20T08:36:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fMVe5",
                                           "createdAt":  "2025-02-20T08:40:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEG_4jA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-20T08:49:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Should we apply it to the branch?\n\nI pushed it, but it certainly deserves extra scrutiny.",
                                           "updatedAt":  "2025-02-20T08:40:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fNMKH",
                                           "createdAt":  "2025-02-20T10:08:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "So far testing has not reveled any regression/difference.\n\nTwo other types of failures in DynamicGenerics:\n\n```\nRunning Test: ThreadLocalStatics.TLSTesting.ThreadLocalStatics_Test\nDynamicGenerics: /runtime/src/coreclr/gc/gc.cpp:27196: bool WKS::is_in_heap_range(uint8_t *): Assertion `((g_gc_lowest_address \u003c= o) \u0026\u0026 (o \u003c g_gc_highest_address)) || (o == nullptr) || (ro_segment_lookup (o) != nullptr)\u0027 failed.\n```\n\n```\nRunning Test: ThreadLocalStatics.TLSTesting.ThreadLocalStatics_Test\nProcess terminated. Assertion failed.\nhashCode == _entries[walk1]._hashCode\n   at System.Diagnostics.DebugProvider.Fail(String, String) + 0x64\n   at System.Diagnostics.Debug.Fail(String, String) + 0x70\n   at System.Diagnostics.Debug.Assert(Boolean, String, String) + 0x58\n   at System.Diagnostics.Debug.Assert(Boolean, String) + 0x3c\n   at System.Collections.Concurrent.ConcurrentUnifier`2.Container.VerifyUnifierConsistency() + 0x390\n   at System.Collections.Concurrent.ConcurrentUnifier`2.GetOrAdd(K) + 0x148\n   at System.Reflection.Runtime.TypeInfos.RuntimeTypeInfo.TypeComponentsCache.GetQueriedMembers[M](MemberPolicies`1, String, Boolean) + 0x218\n   at System.Reflection.Runtime.TypeInfos.RuntimeTypeInfo.Query[M](MemberPolicies`1, String, BindingFlags, Func`2) + 0x134\n   at System.Reflection.Runtime.TypeInfos.RuntimeTypeInfo.Query[M](MemberPolicies`1, String, BindingFlags) + 0xb0\n   at System.Reflection.Runtime.TypeInfos.RuntimeTypeInfo.GetMethodImpl(String, Int32, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[]) + 0x174\n   at System.RuntimeType.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[]) + 0x78\n   at System.Type.GetMethod(String, BindingFlags) + 0x70\n   at System.Reflection.TypeInfo.GetDeclaredMethod(String) + 0x34\n   at ThreadLocalStatics.TLSTesting.MakeType1(Type, Boolean) + 0x608\n   at ThreadLocalStatics.TLSTesting.\u003c\u003ec__DisplayClass3_0.\u003cMultiThreaded_Test\u003eb__0() + 0x48\n   at System.Threading.Tasks.Task.InnerInvoke() + 0x94\n   at System.Threading.Tasks.Task.\u003c\u003ec.\u003c.cctor\u003eb__292_0(Object obj) + 0x78\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread, ExecutionContext, ContextCallback, Object) + 0x114\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task\u0026, Thread) + 0x214\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(Thread) + 0xcc\n   at System.Threading.Tasks.Task.ExecuteFromThreadPool(Thread) + 0x2c\n   at System.Threading.ThreadPoolWorkQueue.DispatchWorkItem(Object, Thread) + 0x88\n   at System.Threading.ThreadPoolWorkQueue.Dispatch() + 0x888\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerDoWork(PortableThreadPool, Boolean\u0026) + 0x6c\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart() + 0x31c\n   at DynamicGenerics!\u003cBaseAddress\u003e+0x995ee4\n   at System.Threading.Thread.StartHelper.RunWorker() + 0xac\n   at System.Threading.Thread.StartHelper.Run() + 0xf8\n   at System.Threading.Thread.StartThread(IntPtr) + 0x18c\n   at System.Threading.Thread.ThreadEntryPoint(IntPtr) + 0x38\nAborted\n```\n\nAside from`ThreadLocalStatics.TLSTesting.ThreadLocalStatics_Test`, others are passing for me in DynamicGenerics suite.",
                                           "updatedAt":  "2025-02-20T10:08:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fNT_y",
                                           "createdAt":  "2025-02-20T10:21:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEHAs7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-20T10:26:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I found some bugs in the GC hijacking assembly code. Trying to fix that and I\u0027ll report back.",
                                           "updatedAt":  "2025-02-20T10:21:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fNatD",
                                           "createdAt":  "2025-02-20T10:33:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEHBkng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-20T11:13:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LuckyXu-HF",
                                                                               "createdAt":  "2025-02-20T12:39:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Here\u0027s my current diff. It doesn\u0027t fix it but it changes the failure mode quite a lot, so it may be on the right track.\n\nFirstly, `PTFF_THREAD_HIJACK_HI` had incorrect value and it was not applied correctly (shift to high bits). Secondly, https://github.com/dotnet/runtime/pull/110799 changed how the flags in `RhpTrapThreads` are interpreted and that was not reflected.\n\n```diff\ndiff --git a/src/coreclr/nativeaot/Runtime/riscv64/GcProbe.S b/src/coreclr/nativeaot/Runtime/riscv64/GcProbe.S\nindex 019199d548b..fc25713938e 100644\n--- a/src/coreclr/nativeaot/Runtime/riscv64/GcProbe.S\n+++ b/src/coreclr/nativeaot/Runtime/riscv64/GcProbe.S\n@@ -44,7 +44,7 @@\n \n     # Perform the rest of the PInvokeTransitionFrame initialization.\n     sd  \\threadReg, OFFSETOF__PInvokeTransitionFrame__m_pThread(sp)        # Thread * (unused by stackwalker)\n-    sd  \\BITMASK, (OFFSETOF__PInvokeTransitionFrame__m_pThread + 8)(sp)    # Save the register bitmask passed in by caller\n+    sd  \\BITMASK, OFFSETOF__PInvokeTransitionFrame__m_Flags(sp)            # Save the register bitmask passed in by caller\n \n     addi  \\trashReg, sp, PROBE_FRAME_SIZE                                  # Recover value of caller\u0027s SP\n     sd  \\trashReg, 0x78(sp)                                                # Save caller\u0027s SP\n@@ -100,14 +100,13 @@\n NESTED_ENTRY RhpGcProbeHijack, _TEXT, NoHandler\n     FixupHijackedCallstack\n \n-    PREPARE_EXTERNAL_VAR_INDIRECT_W RhpTrapThreads, a3\n-    andi  t3, a3, 1 \u003c\u003c TrapThreadsFlags_TrapThreads_Bit\n+    PREPARE_EXTERNAL_VAR_INDIRECT_W RhpTrapThreads, t3\n+    andi  t3, t3, 1 \u003c\u003c TrapThreadsFlags_TrapThreads_Bit\n     bnez  t3, LOCAL_LABEL(WaitForGC)\n     jr  ra\n \n LOCAL_LABEL(WaitForGC):\n-    li  t6, (DEFAULT_FRAME_SAVE_FLAGS + PTFF_SAVE_A0 + PTFF_SAVE_A1 + PTFF_THREAD_HIJACK_HI)\n-    or  t3, t3, t6\n+    li  t3, (DEFAULT_FRAME_SAVE_FLAGS + PTFF_SAVE_A0 + PTFF_SAVE_A1 + (PTFF_THREAD_HIJACK_HI \u003c\u003c 32))\n     tail  C_FUNC(RhpWaitForGC)\n NESTED_END RhpGcProbeHijack\n \ndiff --git a/src/coreclr/nativeaot/Runtime/unix/unixasmmacrosloongarch64.inc b/src/coreclr/nativeaot/Runtime/unix/unixasmmacrosloongarch64.inc\nindex b78210c8f85..535d7ca303c 100644\n--- a/src/coreclr/nativeaot/Runtime/unix/unixasmmacrosloongarch64.inc\n+++ b/src/coreclr/nativeaot/Runtime/unix/unixasmmacrosloongarch64.inc\n@@ -198,7 +198,7 @@ C_FUNC(\\Name):\n #define PTFF_SAVE_R4            0x00000800\n #define PTFF_SAVE_R5            0x00001000\n #define PTFF_SAVE_ALL_PRESERVED 0x000001FF // NOTE: r23-r31\n-#define PTFF_THREAD_HIJACK_HI   0x00000002 // upper 32 bits of the PTFF_THREAD_HIJACK\n+#define PTFF_THREAD_HIJACK_HI   0x00000001 // upper 32 bits of the PTFF_THREAD_HIJACK\n \n #define DEFAULT_FRAME_SAVE_FLAGS (PTFF_SAVE_ALL_PRESERVED + PTFF_SAVE_SP)\n \n```",
                                           "updatedAt":  "2025-02-20T10:33:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fN3_z",
                                           "createdAt":  "2025-02-20T11:24:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I pushed the above change with few minor tweaks. There\u0027s still something way off though...\n\nI am pretty sure that I got trashed registers again because `FixupHijackedCallstack` calls `INLINE_GETTHREAD` which calls `INLINE_GET_TLS_VAR` and doesn\u0027t save the `a0` register containing the return value of the hijacked method. I tried to save it to `t3` but that apparently was not enough. We really should rationalize this because this is fragile and it will bite us again and again.\n\nTo get further, here\u0027s a debugging trick:\n```diff\n--- a/src/coreclr/nativeaot/Runtime/riscv64/GcProbe.S\n+++ b/src/coreclr/nativeaot/Runtime/riscv64/GcProbe.S\n@@ -101,6 +101,7 @@\n //\n NESTED_ENTRY RhpGcProbeHijack, _TEXT, NoHandler\n     FixupHijackedCallstack\n+    ret\n \n     PREPARE_EXTERNAL_VAR_INDIRECT_W RhpTrapThreads, t3\n     andi  t3, t3, 1 \u003c\u003c TrapThreadsFlags_TrapThreads_Bit\n```\n\nWe can skip the GC check in the hijack. It currently still fails which means that the hijacking trashes the state. This could either be the hijacking machinery, or `FixupHijackedCallstack` not behaving correctly.",
                                           "updatedAt":  "2025-02-20T11:25:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fN7yj",
                                           "createdAt":  "2025-02-20T11:31:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Aaargh, `t3` gets trashed by `INLINE_GETTHREAD` too. Using `t1` works.",
                                           "updatedAt":  "2025-02-20T11:31:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fOd8p",
                                           "createdAt":  "2025-02-20T12:34:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I think `DynamicGenerics` is fixed now. Please test.",
                                           "updatedAt":  "2025-02-20T12:34:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fOocb",
                                           "createdAt":  "2025-02-20T12:53:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEHB6_A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-20T12:57:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "LuckyXu-HF",
                                                                               "createdAt":  "2025-02-20T13:26:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LuckyXu-HF",
                                                                               "createdAt":  "2025-02-20T13:27:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "am11",
                                           "body":  "Congrats! 🎉 I tested it, it passes on device and qemu. Also, UnitTests suite is also passing now on my device consistently. Opened https://github.com/dotnet/runtime/pull/112736.",
                                           "updatedAt":  "2025-02-20T12:53:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gPzMH",
                                           "createdAt":  "2025-02-27T16:33:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEH6spA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-02-27T16:47:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "Updated workbench with libs.tests step https://github.com/dotnet/runtime/issues/106223#issuecomment-2665164956. It seems to be crossbuilding most of the tests, but ilc gets sigkill on these two (perhps due to the size or some other kind of overflow):\n\n```sh\n$ /runtime/build.sh -arch riscv64 -cross -s libs.tests -c Debug --keepnativesymbols true -p:UseLocalAppHostPack=true -p:TestNativeAot=true -p:LinkerFlavor=lld\n...\n/runtime/artifacts/bin/coreclr/linux.riscv64.Debug/build/Microsoft.NETCore.Native.targets(327,5): error MSB3073: The command \"\"/runtime/artifacts/bin/coreclr/linux.riscv64.Debug/arm64/ilc/ilc\" @\"/runtime/artifacts/obj/System.Diagnostics.DiagnosticSource.Tests/Debug/net10.0/native/System.Diagnostics.DiagnosticSource.Tests.ilc.rsp\"\" exited with code 137. [/runtime/src/libraries/System.Diagnostics.DiagnosticSource/tests/System.Diagnostics.DiagnosticSource.Tests.csproj::TargetFramework=net10.0]\n/runtime/artifacts/bin/coreclr/linux.riscv64.Debug/build/Microsoft.NETCore.Native.targets(327,5): error MSB3073: The command \"\"/runtime/artifacts/bin/coreclr/linux.riscv64.Debug/arm64/ilc/ilc\" @\"/runtime/artifacts/obj/Microsoft.Extensions.DependencyModel.Tests/Debug/net10.0/native/Microsoft.Extensions.DependencyModel.Tests.ilc.rsp\"\" exited with code 137. [/runtime/src/libraries/Microsoft.Extensions.DependencyModel/tests/Microsoft.Extensions.DependencyModel.Tests.csproj::TargetFramework=net10.0]\n```\n\nThe six which were built haven\u0027t reported any failures on the machine:\n```sh\n$ find ~/projects/runtime/artifacts/bin -path \u0027*net10.0-linux/publish*\u0027 -type f -exec file {} \\; |\n    grep ELF.*executable |\n    while IFS=: read f _; do\n      pushd \"$(dirname $f)\"\n      ./$(basename $f) -notrait category=OuterLoop -notrait category=failing\n      popd\n    done\n\nRunning assembly:System.Runtime.Serialization.Formatters.Disabled.Tests, Version=10.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\n...\nTests run: 3, Errors: 0, Failures: 0, Skipped: 2. Time: 0.0425735s\n\nRunning assembly:System.IO.FileSystem.Watcher.Tests, Version=10.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\n...\nTests run: 307, Errors: 0, Failures: 0, Skipped: 0. Time: 3.9406643s\n\nRunning assembly:System.DirectoryServices.Protocols.Tests, Version=10.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\n...\nTests run: 630, Errors: 0, Failures: 0, Skipped: 22. Time: 1.208248s\n\nRunning assembly:Common.Tests, Version=10.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\n...\nTests run: 1444, Errors: 0, Failures: 0, Skipped: 1. Time: 186.2769032s\n\nRunning assembly:System.Net.Http.Functional.Tests, Version=10.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\n...\nTests run: 0, Errors: 0, Failures: 0, Skipped: 0. Time: 0.0080169s\n\nRunning assembly:System.Net.Quic.Functional.Tests, Version=10.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\n...\nTests run: 5, Errors: 0, Failures: 0, Skipped: 1. Time: 3.2699584s\n```",
                                           "updatedAt":  "2025-02-27T16:33:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gXF-D",
                                           "createdAt":  "2025-02-28T11:28:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "With release build, DynamicGeneric smoke is failing at \"Running Test: ThreadLocalStatics.TLSTesting.ThreadLocalStatics_Test\" on both the device and qemu; with `DOTNET_gcConservative=1` it passes on both.\n\n```gdb\nThread 4 \"DynamicGenerics\" received signal SIGABRT, Aborted.\n[Switching to Thread 0x3fa59fe080 (LWP 314432)]\n0x0000003ff7e28b14 in __pthread_kill_implementation (threadid=\u003coptimized out\u003e, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:43\nwarning: 43\t./nptl/pthread_kill.c: No such file or directory\n(gdb) bt\n#0  0x0000003ff7e28b14 in __pthread_kill_implementation (threadid=\u003coptimized out\u003e, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:43\n#1  0x0000003ff7e28b68 in __pthread_kill_internal (signo=6, threadid=\u003coptimized out\u003e) at ./nptl/pthread_kill.c:78\n#2  0x0000003ff7deee74 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26\n#3  0x0000003ff7dde372 in __GI_abort () at ./stdlib/abort.c:79\n#4  0x0000002aaad199fc in RaiseFailFastException (arg1=\u003coptimized out\u003e, arg2=\u003coptimized out\u003e, arg3=\u003coptimized out\u003e) at /runtime/src/coreclr/nativeaot/Runtime/unix/PalRedhawkUnix.cpp:97\n#5  0x0000002aaace1c14 in StackFrameIterator::NextInternal (this=0x3fa59fce10) at /runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp:1758\n#6  0x0000002aaace1b42 in StackFrameIterator::Next (this=0x3fa59fce10) at /runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp:1716\n#7  0x0000002aaace3506 in Thread::GcScanRootsWorker (this=0x3fa51fd800, pfnEnumCallback=0x2aaacfe9b6 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pvCallbackData=0x3fa59fd208, frameIterator=...)\n    at /runtime/src/coreclr/nativeaot/Runtime/thread.cpp:549\n#8  0x0000002aaace342e in Thread::GcScanRoots (this=0x3fa51fd800, pfnEnumCallback=0x2aaacfe9b6 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, pvCallbackData=0x3fa59fd208) at /runtime/src/coreclr/nativeaot/Runtime/thread.cpp:419\n#9  0x0000002aaacdeb84 in GCToEEInterface::GcScanRoots (fn=0x2aaacfe9b6 \u003cWKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)\u003e, condemned=\u003coptimized out\u003e, max_gen=\u003coptimized out\u003e, sc=0x3fa59fd208)\n    at /runtime/src/coreclr/nativeaot/Runtime/gcenv.ee.cpp:122\n#10 0x0000002aaacf56ae in WKS::gc_heap::mark_phase (condemned_gen_number=2) at /runtime/src/coreclr/gc/gc.cpp:30255\n#11 0x0000002aaacf2c6e in WKS::gc_heap::gc1 () at /runtime/src/coreclr/gc/gc.cpp:22694\n#12 0x0000002aaacfb608 in WKS::gc_heap::garbage_collect (n=\u003coptimized out\u003e) at /runtime/src/coreclr/gc/gc.cpp:39995\n#13 0x0000002aaacefa06 in WKS::GCHeap::GarbageCollectGeneration (this=\u003coptimized out\u003e, gen=2, reason=reason_induced) at /runtime/src/coreclr/gc/gc.cpp:51505\n#14 0x0000002aaad0e21e in WKS::GCHeap::GarbageCollectTry (generation=\u003coptimized out\u003e, this=\u003coptimized out\u003e, low_memory_p=\u003coptimized out\u003e, mode=\u003coptimized out\u003e) at /runtime/src/coreclr/gc/gc.cpp:50699\n#15 WKS::GCHeap::GarbageCollect (this=\u003coptimized out\u003e, generation=\u003coptimized out\u003e, low_memory_p=\u003coptimized out\u003e, mode=\u003coptimized out\u003e) at /runtime/src/coreclr/gc/gc.cpp:50629\n#16 0x0000002aaacddfbc in RhpCollect (uGeneration=314432, uMode=4159865678, lowMemoryP=0) at /runtime/src/coreclr/nativeaot/Runtime/GCHelpers.cpp:114\n#17 0x0000002aaae67f1c in S_P_CoreLib_System_Runtime_InternalCalls__RhCollect (generation=0, mode=(unknown: 0x4cc40), lowMemoryP=6) at /runtime/src/coreclr/nativeaot/Runtime.Base/src/System/Runtime/InternalCalls.cs:65\n#18 0x0000002aaad52d14 in DynamicGenerics_ThreadLocalStatics_TLSTesting___c__DisplayClass3_0___MultiThreaded_Test_b__0 (this=...) at /runtime/src/tests/nativeaot/SmokeTests/DynamicGenerics/threadstatics.cs:464\n#19 0x0000002aaae38a1c in S_P_CoreLib_System_Threading_ExecutionContext__RunFromThreadPoolDispatchLoop (threadPoolThread=..., executionContext=..., callback=..., state=...)\n    at /runtime/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs:264\n#20 0x0000002aaae42de0 in S_P_CoreLib_System_Threading_Tasks_Task__ExecuteWithThreadLocal (this=..., currentTaskSlot=..., threadPoolThread=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs:2347\n#21 0x0000002aaae3ddcc in S_P_CoreLib_System_Threading_ThreadPoolWorkQueue__Dispatch () at /runtime/src/libraries/System.Private.CoreLib/src/System/Threading/ThreadPoolWorkQueue.cs:1154\n#22 0x0000002aaaec0608 in S_P_CoreLib_System_Threading_PortableThreadPool_WorkerThread__WorkerThreadStart () at /runtime/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.WorkerThread.cs:127\n#23 0x0000002aaaeba120 in S_P_CoreLib_System_Threading_Thread_StartHelper__RunWorker (this=...) at /runtime/src/libraries/System.Private.CoreLib/src/System/Threading/Thread.cs:77\n#24 0x0000002aaae35e54 in S_P_CoreLib_System_Threading_Thread__StartThread (parameter=0) at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Threading/Thread.NativeAot.cs:459\n#25 0x0000002aaae366a8 in S_P_CoreLib_System_Threading_Thread__ThreadEntryPoint (parameter=\u003coptimized out\u003e) at /runtime/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Threading/Thread.NativeAot.Unix.cs:114\n#26 0x0000003ff7e2719c in start_thread (arg=\u003coptimized out\u003e) at ./nptl/pthread_create.c:447\n#27 0x0000003ff7e792ac in __thread_start_clone3 () at ../sysdeps/unix/sysv/linux/riscv/clone3.S:71\n(gdb) f 5\n#5  0x0000002aaace1c14 in StackFrameIterator::NextInternal (this=0x3fa59fce10) at /runtime/src/coreclr/nativeaot/Runtime/StackFrameIterator.cpp:1758\n1758\t    FAILFAST_OR_DAC_FAIL(GetCodeManager()-\u003eUnwindStackFrame(\u0026m_methodInfo, unwindFlags, \u0026m_RegDisplay,\n(gdb) list\n1753\t    if ((m_dwFlags \u0026 GcStackWalkFlags) == GcStackWalkFlags)\n1754\t    {\n1755\t        unwindFlags |= USFF_GcUnwind;\n1756\t    }\n1757\t\n1758\t    FAILFAST_OR_DAC_FAIL(GetCodeManager()-\u003eUnwindStackFrame(\u0026m_methodInfo, unwindFlags, \u0026m_RegDisplay,\n1759\t                                                            \u0026m_pPreviousTransitionFrame));\n1760\t\n1761\t    if (m_pPreviousTransitionFrame != NULL)\n1762\t    {\n```\n\nIn 1/10 runs, UnitTests also failed (exit code 0), but it seems quite rare (and individually running it doesn\u0027t seem to fail ever).",
                                           "updatedAt":  "2025-02-28T11:28:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gXGhc",
                                           "createdAt":  "2025-02-28T11:29:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIBP-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-28T11:31:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e With release build, DynamicGeneric smoke is failing at \"Running Test: ThreadLocalStatics.TLSTesting.ThreadLocalStatics_Test\" on both the device and qemu; with `DOTNET_gcConservative=1` it passes on both.\n\nI\u0027ll have a look sometime next week unless you beat me to it.",
                                           "updatedAt":  "2025-02-28T11:29:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gfRT5",
                                           "createdAt":  "2025-03-02T04:29:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIKQkw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tomeksowi",
                                                                               "createdAt":  "2025-03-02T08:31:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-03-02T11:29:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e With release build, DynamicGeneric smoke is failing at \"Running Test: ThreadLocalStatics.TLSTesting.ThreadLocalStatics_Test\" on both the device and qemu\n\nI submitted PR to fix this. I didn\u0027t look into UnitTests in Release builds yet.",
                                           "updatedAt":  "2025-03-02T04:29:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gfyt4",
                                           "createdAt":  "2025-03-02T11:35:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Thanks! It\u0027s fixed on device and emulator.\n\n\u003e I didn\u0027t look into UnitTests in Release builds yet.\n\nI wasn\u0027t able to repro that UnitTests failure either after that one time. Will keep an eye out.",
                                           "updatedAt":  "2025-03-02T11:35:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gvW86",
                                           "createdAt":  "2025-03-04T09:16:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIprwQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-03-04T09:25:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "clamp03",
                                                                               "createdAt":  "2025-03-05T03:01:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "sirntar",
                                                                               "createdAt":  "2025-03-05T16:54:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "am11",
                                           "body":  "The tests seem to be passing consistently. It would be a good idea to add AOT smoke tests to PR runs (e.g. https://github.com/dotnet/runtime/pull/112736#issuecomment-2683801567), so it doesn\u0027t regress over time. cc @gbalykov, @clamp03",
                                           "updatedAt":  "2025-03-04T09:16:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g1ayc",
                                           "createdAt":  "2025-03-04T17:05:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIprng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "clamp03",
                                                                               "createdAt":  "2025-03-05T03:01:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sirntar",
                                                                               "createdAt":  "2025-03-05T16:53:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tomeksowi",
                                           "body":  "\u003e The tests seem to be passing consistently. It would be a good idea to add AOT smoke tests to PR runs (e.g. [#112736 (comment)](https://github.com/dotnet/runtime/pull/112736#issuecomment-2683801567)), so it doesn\u0027t regress over time.\n\ncc @sirntar ",
                                           "updatedAt":  "2025-03-04T17:05:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hBgNl",
                                           "createdAt":  "2025-03-05T16:54:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEItexw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-03-05T16:57:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-03-06T01:45:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "sirntar",
                                           "body":  "@am11 I will add them asap.",
                                           "updatedAt":  "2025-03-05T16:54:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hFVut",
                                           "createdAt":  "2025-03-06T01:59:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIwVGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sirntar",
                                                                               "createdAt":  "2025-03-06T09:02:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "@sirntar thank you! The steps for cross-building  are same as https://github.com/dotnet/runtime/issues/106223#issuecomment-2665164956.\n\nThis github action cross-builds runtime and AOT smoke tests, then uses qemu to execute them (`docker run --platform linux/riscv64`):\nhttps://github.com/am11/CrossRepoCITesting/actions/runs/13694911386/workflow \u003cdel\u003eThe `git apply` line will go away once https://github.com/dotnet/runtime/pull/113179 is merged. \u003c/del\u003e (merged) Other than that, you can adapt it in your infra. If your infra is open-source, I can lend hand as well.\n\nYou will notice that running the tests without riscv64 SDK requires some custom scripting, we should include it in `src/tests/Common/scripts/bringup_runtest.sh` under `--nativeaot` or similar flag at some point. It will help not only riscv64/LA64, but any platform bringup in the future when the working SDK is not there.\n\nWith the matching SDK version in `runtime/global.json`, it\u0027s just a matter of `src/tests/build.sh -nativeaot -tree:nativeaot -Debug -p:LibrariesConfiguration=Debug -keepnativesymbols -skipnative -skiprestorepackages`, but currently infra is in the process of transition, so it will take some time to stabilize that route.",
                                           "updatedAt":  "2025-03-06T09:03:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hTyxL",
                                           "createdAt":  "2025-03-07T12:23:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "With #113243, we don\u0027t need to build for host and it cuts time almost in half (36m vs. 56m) https://github.com/am11/CrossRepoCITesting/commit/d4edd9516da04f077894c82f8566a34c6e0156c3. Run https://github.com/am11/CrossRepoCITesting/actions/runs/13730444237",
                                           "updatedAt":  "2025-03-07T23:04:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hnr4u",
                                           "createdAt":  "2025-03-10T18:54:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "@sirntar, fyi, steps are updated above after https://github.com/dotnet/runtime/pull/113243 merged, now we no longer need to do a separate host build. If your infra already has StageOneBuild and StageTwoBuild, all you need is `src/tests/build.sh -nativeaot ...` step shown earlier.",
                                           "updatedAt":  "2025-03-10T18:54:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6labNp",
                                           "createdAt":  "2025-04-03T10:03:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEM5KWg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-04-03T10:13:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "tomeksowi",
                                                                               "createdAt":  "2025-04-03T11:39:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "clamp03",
                                                                               "createdAt":  "2025-04-04T08:37:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "am11",
                                           "body":  "Tests are also passing on Alpine with musl-libc build:\n\nlinux-musl-riscv64: https://github.com/am11/CrossRepoCITesting/blob/master/.github/workflows/linux-riscv64-aot-alpine.yml\nlinux-riscv64 glibc: https://github.com/am11/CrossRepoCITesting/blob/master/.github/workflows/linux-riscv64-aot.yml",
                                           "updatedAt":  "2025-04-03T10:03:27Z"
                                       }
                                   ],
                         "totalCount":  200
                     },
        "title":  "RISC-V NativeAOT port",
        "labels":  [
                       "area-NativeAOT-coreclr",
                       "arch-riscv"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106748",
        "createdAt":  "2024-08-21T07:43:20Z",
        "number":  106748,
        "author":  "vyacheslav-volkov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_XLAw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexyakunin",
                                            "createdAt":  "2024-08-21T10:38:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rgroenewoudt",
                                            "createdAt":  "2024-08-22T06:55:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "charlesroddie",
                                            "createdAt":  "2024-08-22T08:29:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "emmauss",
                                            "createdAt":  "2024-08-23T21:53:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maxkatz6",
                                            "createdAt":  "2024-08-24T16:10:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AigioL",
                                            "createdAt":  "2024-08-27T05:58:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GerardSmit",
                                            "createdAt":  "2024-08-28T14:33:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gdkchan",
                                            "createdAt":  "2024-08-30T15:30:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MohamedA-Ibrahim",
                                            "createdAt":  "2024-09-03T05:31:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "albilaga",
                                            "createdAt":  "2024-09-03T06:09:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JohnySeven",
                                            "createdAt":  "2024-09-03T06:23:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zsuatem",
                                            "createdAt":  "2024-09-03T06:29:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JMND3v",
                                            "createdAt":  "2024-09-03T06:55:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mosabnasri",
                                            "createdAt":  "2024-09-03T06:58:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mackayn",
                                            "createdAt":  "2024-09-03T07:58:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Aleksey-M",
                                            "createdAt":  "2024-09-03T08:02:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nixtar",
                                            "createdAt":  "2024-09-03T08:17:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "roubachof",
                                            "createdAt":  "2024-09-03T09:06:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "beeradmoore",
                                            "createdAt":  "2024-09-03T09:26:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bkaankose",
                                            "createdAt":  "2024-09-03T09:29:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NatElkins",
                                            "createdAt":  "2024-09-03T11:00:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RadekVyM",
                                            "createdAt":  "2024-09-03T11:08:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GuidoNeele",
                                            "createdAt":  "2024-09-03T11:27:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "qumeta",
                                            "createdAt":  "2024-09-03T12:21:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rogihee",
                                            "createdAt":  "2024-09-03T14:37:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andersonvieiragomeslopes",
                                            "createdAt":  "2024-09-03T15:35:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kerams",
                                            "createdAt":  "2024-09-03T21:27:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexis-kochetov",
                                            "createdAt":  "2024-09-04T03:41:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Syed-RI",
                                            "createdAt":  "2024-09-04T08:42:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AhmedZero",
                                            "createdAt":  "2024-09-05T02:35:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexander-efremov",
                                            "createdAt":  "2024-09-05T06:17:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichaelRumpler",
                                            "createdAt":  "2024-09-05T10:37:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "felipejfc",
                                            "createdAt":  "2024-09-14T14:21:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TacoGuyAT",
                                            "createdAt":  "2024-09-18T16:11:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ducdetronquito",
                                            "createdAt":  "2024-09-18T19:20:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tipa",
                                            "createdAt":  "2024-10-01T10:14:24Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Cheesebaron",
                                            "createdAt":  "2024-10-03T07:17:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sweemer",
                                            "createdAt":  "2024-10-03T09:33:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "conde2",
                                            "createdAt":  "2024-10-04T20:20:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NicolasKlaas",
                                            "createdAt":  "2024-10-10T05:25:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Jure-BB",
                                            "createdAt":  "2024-10-24T13:21:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FrozDark",
                                            "createdAt":  "2024-11-08T19:06:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeswin",
                                            "createdAt":  "2024-11-14T08:12:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bruno-garcia",
                                            "createdAt":  "2024-11-17T02:23:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "waitxd",
                                            "createdAt":  "2024-11-19T11:09:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ram16g",
                                            "createdAt":  "2024-12-20T05:44:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Varorbc",
                                            "createdAt":  "2025-01-05T23:25:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "trampster",
                                            "createdAt":  "2025-01-15T01:45:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "knuxbbs",
                                            "createdAt":  "2025-02-17T15:01:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "moloneymb",
                                            "createdAt":  "2025-02-22T19:54:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "15mgm15",
                                            "createdAt":  "2025-02-27T00:22:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "expcat",
                                            "createdAt":  "2025-02-27T06:18:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AFCMS",
                                            "createdAt":  "2025-03-10T13:50:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ivoryguard",
                                            "createdAt":  "2025-03-21T05:46:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2025-03-28T17:48:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2025-03-29T14:55:33Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "bxjg1987",
                                            "createdAt":  "2025-04-01T18:14:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bxjg1987",
                                            "createdAt":  "2025-04-01T18:14:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Bradez",
                                            "createdAt":  "2025-05-08T08:25:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kalebm-woolloo",
                                            "createdAt":  "2025-06-10T05:41:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LittleCodingFox",
                                            "createdAt":  "2025-06-25T15:38:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ShortDevelopment",
                                            "createdAt":  "2025-08-09T00:27:38Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "ShortDevelopment",
                                            "createdAt":  "2025-08-09T00:27:39Z"
                                        }
                                    ],
                          "totalCount":  63
                      },
        "updatedAt":  "2025-03-29T14:55:07Z",
        "body":  "I had previously raised this topic in another issue https://github.com/dotnet/runtime/issues/101135, but I want to create a separate discussion as I couldn\u0027t find a place to track the progress on this matter.\r\n\r\nThe most serious and long-standing issues with Xamarin.Android is the slow startup time for applications. If you search the internet for \"Xamarin.Android slow startup,\" you\u0027ll find hundreds of discussions on this topic. Even with all possible optimizations, including MonoAOT compilation, the startup time remains slow, and even MonoAOT works incorrectly on Android https://github.com/dotnet/runtime/issues/101135. This problem is particularly noticeable with UI frameworks such as Avalonia, UNO, and MAUI. Developers simply don\u0027t have the ability to solve this problem on their own, as it is rooted in the fundamental aspects of the platform\u0027s operation, and a significant amount of time is spent on JIT compilation. In the end, to write a \"fast application\" for Android that still lags behind native applications in terms of startup speed, you need to perform a whole range of additional operations, which not every developer can manage, just to make their application work somewhat faster. I believe that this expectation is where the main problem lies. A developer expects that the release build will immediately work as it should, but instead, they encounter performance issues where they don\u0027t expect them.\r\n\r\nWhen .NET Native was introduced, I thought it would be the solution to the slow startup problem for Android. Starting with version .NET 8.0, it became stable for iOS, and I began actively using it. The results are impressive: a fairly large application on an iPhone X launches as quickly as any native application and even faster than a similar application on a Samsung Galaxy S22 Ultra, despite all possible optimizations for Android. The gap between the release of these devices is five years, and I dread to imagine the startup time on a five-year-old Android device. Yes, there are still limitations on using dynamic code, but they are not that difficult to overcome, resulting in an application that performs as fast as a native one. Isn\u0027t that what we want for a cross-platform application? Moreover, I’m almost 100% sure that no one uses Android applications without ProfiledAOT or FullAOT because, in that case, you can forget about startup performance. This also means they are already using trimming, so transitioning to NativeAOT wouldn\u0027t require much additional effort. Over time, more libraries and frameworks will become fully compatible with NativeAOT, making integration seamless for developers without any issues.\r\n\r\nHowever, observing the discussions about .NET Native and the activity around this topic, I get the impression that the team does not give this problem enough priority, and no specific timelines have been set for its resolution. For example, in one of the discussions on GitHub, the following is mentioned:\r\n\r\n\u003eThese will likely work under Mono, but will need to be fixed one day in .NET 10 or some future release that supports NativeAOT.\r\nhttps://github.com/dotnet/android/issues/8724\r\n\r\nThis gives the impression that allocating resources for NativeAOT on Android is not a priority, and instead, new releases include optimizations that only provide marginal improvements (e.g., -10% startup time for test cases). However, in real-world conditions, such improvements do not solve the problem. If an application takes 2000ms to start, even reducing it to 1800ms makes little difference, and at best, such optimizations are noticeable only under ideal conditions.\r\n\r\nIt seems to me that the team does not fully grasp the depth of this issue. Many of my colleagues have already switched to Flutter specifically because of the slow startup times on Android. When their clients or customers ask why the Android application launches so slowly, developers are forced to reply that it is a limitation of the technology they are using, they may also suggest switching to iOS, where there are no such problems, but this is not an option.\r\n\r\nIn my opinion, the implementation of NativeAOT support for Android, should be considered critically important. I would like to hear the team\u0027s thoughts on this matter: what should we expect? Will NativeAOT support for Android be added in the near future, or should we only hope for small, incremental performance improvements that don\u0027t solve anything and are waiting for everyone to switch to Flutter?\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiv86ww==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6JN0V5",
                                           "createdAt":  "2024-08-21T13:45:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @jonathanpeppers @jonpryor",
                                           "updatedAt":  "2024-08-21T13:47:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JOC47",
                                           "createdAt":  "2024-08-21T14:14:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGVkOw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "qumeta",
                                                                               "createdAt":  "2024-09-03T12:21:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "saint4eva",
                                                                               "createdAt":  "2024-09-03T13:51:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "saint4eva",
                                                                               "createdAt":  "2024-09-03T13:52:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "espenrl",
                                                                               "createdAt":  "2024-11-16T22:37:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ram16g",
                                                                               "createdAt":  "2024-12-20T05:51:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexis-kochetov",
                                                                               "createdAt":  "2025-01-29T16:07:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "MrXhh",
                                                                               "createdAt":  "2025-02-14T01:39:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "Maybe just to breakdown the work involved slightly:\r\n* Runtime team:\r\n  * GC bridge (of some form) to support Java interop\r\n  * NativeAOT runtime packs for Android: this is somewhat working with `linux-bionic-arm64` packages, but we probably want actual `android-arm64`, etc. packages.\r\n* Android team:\r\n  * Android workload (at build time), things like setting up the build for ILC, etc. We need to support multiple RIDs and join them into a single app during a build.\r\n  * Android workload (at runtime) uses Mono embedding APIs for startup, loading assemblies, etc. We\u0027d probably throw out this code (at least partially) and rewrite for NativeAOT.\r\n* MAUI team:\r\n  * We\u0027d probably want to run all their test suites on NativeAOT as well as Mono. They have some of this for iOS already.\r\n\r\nWe did some of the basic groundwork in .NET 9, such as:\r\n* Basic experiments with NativeAOT, testing Java interop _can_ work.\r\n* Java.Interop and the Android .NET assemblies now have 0 trimmer warnings.\r\n\r\nThis seems like a multi-month effort involving multiple teams. I don\u0027t actually know when we\u0027d start on this; as it\u0027s quite above my paygrade.",
                                           "updatedAt":  "2024-08-21T14:14:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JQ9pG",
                                           "createdAt":  "2024-08-21T20:08:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "\u003e NativeAOT runtime packs for Android: this is somewhat working with linux-bionic-arm64 packages, but we probably want actual android-arm64, etc. packages.\r\n\r\nI\u0027m somewhat skeptical of this. We\u0027ve increasingly stopped doing things more specific than `kernel-libc-arch` in the runtime. It seems unlikely that Android needs more than what\u0027s already in our bionic packages.\r\n\r\n\u003e GC bridge (of some form) to support Java interop\r\n\r\nAgreed that this is necessary, but somewhat ill-defined, I think. It\u0027s not clear what functionality is available in Mono that isn\u0027t available in Core CLR.",
                                           "updatedAt":  "2024-08-21T20:08:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JREy5",
                                           "createdAt":  "2024-08-21T20:26:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD12utg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "charlesroddie",
                                                                               "createdAt":  "2024-10-12T19:18:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e It seems unlikely that Android needs more than what\u0027s already in our bionic packages.\r\n\r\nThere are number of special cases for Android in the higher-level runtime libraries. For example: https://github.com/dotnet/runtime/blob/477de3419157d809dc266ea03ff3fb4c05f3d1c1/src/libraries/System.Net.Http/src/System/Net/Http/HttpClientHandler.AnyMobile.InvokeNativeHandler.cs#L20-L22 . \r\n\r\nThese special-cases are unnecessary to get ordinary Linux-targeting code running on Android, but they are necessary for compatibility with Xamarin Android behaviors that exist today.\r\n\r\n\u003e Agreed that this is necessary, but somewhat ill-defined, I think. It\u0027s not clear what functionality is available in Mono that isn\u0027t available in Core CLR.\r\n\r\nYes, the first step would be to extract the required functionality into an API proposal. The [APIs that we have introduced for GC integration with ObjectiveC](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.objectivec.objectivecmarshal) show the general shape to follow.\r\n\r\n\r\n",
                                           "updatedAt":  "2024-08-21T20:26:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JRJ-N",
                                           "createdAt":  "2024-08-21T20:40:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexyakunin",
                                           "body":  "So... The ETA is prob not .NET 10, right?",
                                           "updatedAt":  "2024-08-21T23:22:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JRVWv",
                                           "createdAt":  "2024-08-21T21:12:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwzzaw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2024-08-21T21:45:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2024-08-29T09:00:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-08-30T20:36:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vyacheslav-volkov",
                                                                               "createdAt":  "2024-09-03T13:56:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e It seems unlikely that Android needs more than what\u0027s already in our bionic packages.\r\n\r\nAside from the things mentioned earlier, the whole Android crypto interop is currently not part of the linux-bionic packages.\r\n\r\n\u003e Agreed that this is necessary, but somewhat ill-defined, I think. It\u0027s not clear what functionality is available in Mono that isn\u0027t available in Core CLR.\r\n\r\nI had an idea to implement it in a way similar to Objective-C interop that I discussed informally with some of the stakeholders.\r\n\r\nHere\u0027s the rough version copied from communication logs:\r\n\u003e Assuming you are familiar with the MonoVM bridge, skip this part:\r\n\u003e\r\n\u003e The Java bridged objects have a marker. At the end of GC you find all the marked objects that were collected and reconstruct an object graph of them. Then you switch the Java strong GC refs to weak GC refs, reconstruct the edges from the GC graph on the Java side (when possible, so only for certain bridged objects that have a `List\u003cobject\u003e` on the Java peer side), and run Java GC. Once both the .NET and Java GC are finished, you switch the Java GC handles back to strong ones, and collect everything that didn\u0027t survive either GC.\r\n\u003e\r\n\u003e The idea is to decompose the process into two phases and reuse the same logic that ObjC GC interop (reference counting) and COM interop does.\r\n\u003e\r\n\u003e - When a marked Java peer object is found unused by GC:\r\n\u003e    - If you have strong Java GC handle, convert it to weak GC handle. Return \"ref count\" == 1.\r\n\u003e    - If you have weak Java GC handle, return \"ref count\" == JavaGCHandle.IsAlive\r\n\u003e- If you have a WeakReference pointing to Java peer object:\r\n\u003e    - If you access `Target`, convert the Java GC handle to strong one (if Target != null)\r\n\u003e- Interop that converts Java object to it\u0027s .NET Java peer object looks up the internal dictionary. If found and it has weak handle, convert to strong handle first\r\n\u003e\r\n\u003e Down-side: You need to do .NET GC, Java GC, .NET GC to completely clean up peer objects, ie. one more GC on .NET side than MonoVM does... but MonoVM actually does part of it too, just in the hidden steps; Up-side: You don\u0027t block .NET GC on Java GC, the number of long-term surviving peer objects affects the GC much less\r\n\r\nNotably, I had some feedback on it and there may be additional problems with the approach that I didn\u0027t originally foresee (https://github.com/dotnet/runtime/issues/104272#issuecomment-2239290778). We also didn\u0027t get anywhere near to implementing it, even as a rough prototype.",
                                           "updatedAt":  "2024-08-21T21:32:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JRgZG",
                                           "createdAt":  "2024-08-21T21:48:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "\u003e Aside from the things mentioned earlier, the whole Android crypto interop is currently not part of the linux-bionic packages.\r\n\r\nI stand corrected. I find this factoring pretty unfortunate, though.",
                                           "updatedAt":  "2024-08-21T21:48:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JToQF",
                                           "createdAt":  "2024-08-22T03:56:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEc_WJg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "charlesroddie",
                                                                               "createdAt":  "2024-08-22T16:02:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "kcrg",
                                                                               "createdAt":  "2024-09-03T08:45:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "saint4eva",
                                                                               "createdAt":  "2024-09-03T14:00:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "hez2010",
                                                                               "createdAt":  "2024-10-31T18:24:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "ram16g",
                                                                               "createdAt":  "2024-12-20T05:53:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "TickThunder",
                                                                               "createdAt":  "2025-01-07T02:17:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Sasino97",
                                                                               "createdAt":  "2025-08-04T10:40:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "srxqds",
                                           "body":  "Why doesn\u0027t Microsoft continue to invest more manpower in optimization on monovm?",
                                           "updatedAt":  "2024-08-22T03:57:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JVjUC",
                                           "createdAt":  "2024-08-22T08:52:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e Why doesn\u0027t Microsoft continue to invest more manpower in optimization on monovm?\r\n\r\nThere can be non-trivially duplicated task for optimization - sometimes even totally rework from scratch to make sure the architecture is optimal. NativeAOT was built from scratch to make everything AOT friendly. RyuJIT was built from scratch to replace the old JIT which originates from MSVC.\r\nBeing small doesn\u0027t mean friendly to optimization, and it\u0027s often the opposite due to lack of layering.",
                                           "updatedAt":  "2024-08-22T08:52:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JVw4E",
                                           "createdAt":  "2024-08-22T09:19:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "\u003e \u003e Why doesn\u0027t Microsoft continue to invest more manpower in optimization on monovm?\r\n\u003e \r\n\u003e There can be non-trivially duplicated task for optimization - sometimes even totally rework from scratch to make sure the architecture is optimal. NativeAOT was built from scratch to make everything AOT friendly. RyuJIT was built from scratch to replace the old JIT which originates from MSVC. Being small doesn\u0027t mean friendly to optimization, and it\u0027s often the opposite due to lack of layering.\r\n\r\nYes, you are right, but I hope development team can pay more attention to it, monovm feature and optimization always delay, even ignore, they always said it\u0027s not important. hope it can attach importance to align coreclr.",
                                           "updatedAt":  "2024-08-22T09:19:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JWT8s",
                                           "createdAt":  "2024-08-22T10:33:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "I have opend so many issse https://github.com/dotnet/runtime/issues/created_by/srxqds ,most of them are igored.",
                                           "updatedAt":  "2024-08-22T10:33:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JWtyv",
                                           "createdAt":  "2024-08-22T11:27:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GerardSmit",
                                           "body":  "_Additional information:_\r\n\r\nNativeAOT for Android was experimented here: https://github.com/dotnet/runtimelab/tree/feature/nativeaot-android\r\nAnd the write-up can be found here: https://github.com/dotnet/runtimelab/blob/feature/nativeaot-android/src/mono/sample/Android-NativeAOT/README.md\r\n\r\nWhen you look at the section \"Performance measurements\", take it with a grain of salt. In Discord the following was mentioned when this document was released:\r\n\r\n\u003e they measured the Debug version of NativeAOT \r\n\u003e ..\r\n\u003e They also didn\u0027t strip debugging symbols, so that doubly explains the size.\r\n\r\nThe size and performance of devices \"Pixel 7a\" and \"Emulator\" got updated after this message but I\u0027m not sure about \"Samsung Galaxy S10 Lite\", Samsung \"Galaxy S23\" and \"Pixel 5\". These numbers didn\u0027t change after the initial commit (see [Git Blame](https://github.com/dotnet/runtimelab/blame/feature/nativeaot-android/src/mono/sample/Android-NativeAOT/README.md)).\r\n\r\n---\r\n\r\n\u003e Why doesn\u0027t Microsoft continue to invest more manpower in optimization on monovm?\r\n\r\nCoreCLR was made from the ground. Mono has to adapt to CoreCLR which can make it harder. For example, generics are currently a problem in Mono while more generics are being used in libraries:\r\n\r\n\u003e Those methods are all generic methods which are not AOT\u0027ed. Mono doesn\u0027t have tiered JIT.\r\n\u003e _https://github.com/dotnet/runtime/issues/104076#issuecomment-2278702305 in [MonoAOT Perf_Single and Perf_Double Regressions on 6/3/2024 6:35:27 PM](https://github.com/dotnet/runtime/issues/104076#top)_\r\n\r\nMono has multiple backends; MonoJIT, MonoInterpreter, MonoLLVM (maybe I\u0027m missing more) so implementing performance improvements is quite the task.",
                                           "updatedAt":  "2024-08-22T11:29:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JXtem",
                                           "createdAt":  "2024-08-22T13:35:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "@GerardSmit do you know what the Avalonia team used for this video https://www.reddit.com/r/dotnet/comments/13lvih2/nativeaot_ndk_vs_xamarinandroid_performance/? In their video the performance is as fast as what I get on iOS with NativeAOT. \r\n",
                                           "updatedAt":  "2024-08-22T13:35:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JXueT",
                                           "createdAt":  "2024-08-22T13:37:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwz_sg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GerardSmit",
                                                                               "createdAt":  "2024-08-22T14:38:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "saint4eva",
                                                                               "createdAt":  "2024-09-03T14:17:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "I also have a sample here, that should have been testing `Release` mode:\r\n* https://github.com/jonathanpeppers/Android-NativeAOT",
                                           "updatedAt":  "2024-08-22T13:37:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JX9R1",
                                           "createdAt":  "2024-08-22T14:04:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GerardSmit",
                                           "body":  "@vyacheslav-volkov I\u0027m not sure what they used. I\u0027m also not sure if they released any tools or source. \r\nIn the Reddit comments they commented the following:\r\n\r\n\u003e We may commercialise it, as a way to generate revenue to support our continued OSS work.\r\n\r\nWhich may be the reason they never open-sourced/released this experiment. ",
                                           "updatedAt":  "2024-08-22T14:04:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JYhrp",
                                           "createdAt":  "2024-08-22T15:04:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonpryor",
                                           "body":  "At the risk of completely sidetracking this discussion, @vyacheslav-volkov wrote:\r\n\r\n\u003e The most serious and long-standing issues with Xamarin.Android is the slow startup time for applications.\r\n\r\nThere are many parts of the stack, and the .NET for Android part of the stack is *not that slow*.  On a Pixel 6 Pro:\r\n\r\n  * Java app (Android Studio \u003e New Project \u003e Empty Views Activity), built via `gradlew assembleRelease`:\r\n\r\n        I ActivityTaskManager: Displayed com.example.helloworld/.MainActivity for user 0: +141ms\r\n\r\n  * `dotnet new android` for .NET 8, built via `dotnet build -c Release`:\r\n\r\n        I ActivityTaskManager: Displayed com.companyname.android_net8_hw/crc64b62cfbcfada02d88.MainActivity for user 0: +234ms\r\n\r\nThis is the first time I launched these apps (no averaging or anything), and .NET for Android is 93ms slower.\r\n\r\nI don\u0027t consider that to be a lot of overhead.\r\n\r\nThe problems you\u0027re observing are not solely in MonoVM or JIT or runtime or .NET for Android (or everything built atop of them).  I would not expect NativeAOT to be a \"silver bullet\" either.",
                                           "updatedAt":  "2024-08-22T15:04:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JYvfQ",
                                           "createdAt":  "2024-08-22T15:17:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODw0B2g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "agocke",
                                                                               "createdAt":  "2024-08-22T16:24:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "saint4eva",
                                                                               "createdAt":  "2024-09-03T14:21:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "steveisok",
                                           "body":  "\u003e \u003e Aside from the things mentioned earlier, the whole Android crypto interop is currently not part of the linux-bionic packages.\r\n\u003e \r\n\u003e I stand corrected. I find this factoring pretty unfortunate, though.\r\n\r\nThe reason for this is pretty clear cut. Most / all of the crypto API\u0027s are Java API\u0027s and since linux-bionic is not including any of that (analogous to targeting the NDK), there\u0027s not much we can do outside of re-opening the discussion of shipping openssl as part of the runtime.",
                                           "updatedAt":  "2024-08-22T15:17:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JY51N",
                                           "createdAt":  "2024-08-22T15:26:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODw5ALQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexyakunin",
                                                                               "createdAt":  "2024-08-23T09:30:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kcrg",
                                                                               "createdAt":  "2024-09-03T08:51:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexis-kochetov",
                                                                               "createdAt":  "2024-09-04T03:47:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "@jonpryor I agree that an empty application starts up fairly quickly. However, once you start adding code, the startup time begins to drop dramatically. At this point, the startup time doesn\u0027t depend on actual code optimizations anymore; it all comes down to the JIT compilation speed and efforts to reduce it.\r\n\r\nFor example, some advice suggests using only classes because it supposedly reduces compilation time https://github.com/dotnet/runtime/issues/101135#issuecomment-2138354357. But I can\u0027t say this is great advice, considering that everything in .NET is moving towards reducing allocations in the heap, and the framework itself is actively shifting towards using struct everywhere. Prohibiting the use of struct just for the sake of a faster startup sounds unreasonable.\r\n\r\nOr take a simple MAUI application: its startup time will be around 600 ms. This means that an empty application already starts 2-3 times slower than a native application. As the developer adds their code, the startup time ranges from 1500 to 5000+ ms. In this case, traditional code optimization doesn\u0027t work — the developer must understand that optimization here is about easing the JIT compilation process rather than improving the code itself.\r\n\r\nHere\u0027s a real example: my framework doesn\u0027t use any complex features, but it has a lot of struct and generic. The actual startup time with FullAOT on Android is about 1000 ms on a Galaxy Note 10. The same code on Xamarin.iOS with NativeAOT starts instantly on an iPhone X.\r\n\r\nHere\u0027s the link to the repository https://github.com/vyacheslav-volkov/PerfAndroidTest/tree/main, where you can find two projects — Android (FullAOT) and iOS (NativeAOT). I added .speedscope.json files for the Android project to the `trace` folder. If you have time, please take a look and give me some advice on how I can improve the startup time without changing the runtime or using NativeAOT for Android. Also, if you check this issue https://github.com/dotnet/runtime/issues/101135 you will find that in the current state of Xamarin.Android, even when using FullAOT, it is not possible to AOT generics and structs.",
                                           "updatedAt":  "2024-08-22T15:26:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JY8QC",
                                           "createdAt":  "2024-08-22T15:27:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonpryor",
                                           "body":  "Here is another sample which uses NativeAOT on Android, and unlike @jonathanpeppers sample has the benefit of *looking* like .NET for Android, with a C# subclass of `Android.App.Activity`: https://github.com/dotnet/java-interop/tree/main/samples/Hello-NativeAOTFromAndroid\r\n\r\nFor comparison to [the previous Android times](https://github.com/dotnet/runtime/issues/106748#issuecomment-2304908009):\r\n\r\n    I ActivityTaskManager: Displayed net.dot.jni.helloandroid/my.MainActivity for user 0: +300ms\r\n\r\nCompare 300ms to Java (+141ms) and .NET for Android (+234ms).  This also contains additional debug prints, so isn\u0027t directly comparable, but should further emphasize that NativeAOT *in and of itself* will ***not*** be a silver bullet to all of your startup woes.  *A lot* depends upon code higher up the stack.\r\n\r\nAt present, one of the primary blockers keeping us from dedicating more effort to NativeAOT support within .NET for Android is the lack of a decent GC story.  (The current story is \"everything leaks, lol\".)\r\n\r\nI do not foresee dedicating significant effort to support NativeAOT on the .NET for Android side until after the GC story is complete, and I\u0027d further *guesstimate* that we\u0027d want *at least* one .NET release *after* the GC exists before we\u0027d support it.\r\n\r\n@alexyakunin [wrote](https://github.com/dotnet/runtime/issues/106748#issuecomment-2302975885):\r\n\r\n\u003e So... The ETA is prob not .NET 10, right?\r\n\r\n*If* NativeAOT has a GC story for .NET 10, I\u0027d *tentatively* hope for *preview* support in .NET for Android by .NET 11.  *Maybe*.  (There are a number of unknown unknowns, and would not want to get anyone\u0027s hopes up.)  Increase numbers as appropriate.",
                                           "updatedAt":  "2024-08-22T15:27:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JZltW",
                                           "createdAt":  "2024-08-22T16:33:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "\u003e A lot depends upon code higher up the stack.\r\n\r\nThis sounds right to me. For reference, the console app startup for native aot on a Linux desktop machine is measured in _microseconds_ so the runtime overhead in native aot is ~0. All of the startup impact is the cost of the code running in the startup path. ",
                                           "updatedAt":  "2024-08-22T16:33:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JZu-u",
                                           "createdAt":  "2024-08-22T16:55:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "@jonpryor  I just conducted a quick and rough test, but I think the point will be clear. I measured the initialization time of services in my test application twice, meaning the same code was executed twice. The first time it needed time for JIT compilation, and the second time it ran without JIT compilation. The second run was **27 times faster**. As a developer, there’s nothing I can do to affect JIT compilation, and traditional code optimizations won’t work. I would need to rewrite the entire codebase just to make it easier for Android’s JIT compiler to handle it. And this is just a small portion of the code needed to launch the application. In this code, nothing is being called other than the creation and registration of services.\r\n\r\n```\r\n        var stopwatch = Stopwatch.StartNew();\r\n        MugenApplicationConfiguration.Configure()\r\n                                     .AndroidConfigurationGeneratedBindings\u003cMainViewModel, MainActivity\u003e(true, null, this)\r\n                                     .PerfAndroidGeneratedBindingConfiguration()\r\n                                     .CompositeUIConfiguration(new ShellHandlerProvider())\r\n                                     .WithComponent(new MainSectionManager());\r\n        stopwatch.Stop();\r\n        Log.Wtf(\"STARTUP1\", stopwatch.Elapsed.ToString());\r\n\r\n\r\n        stopwatch.Restart();\r\n        MugenApplicationConfiguration.Configure()\r\n                                     .AndroidConfigurationGeneratedBindings\u003cMainViewModel, MainActivity\u003e(true, null, this)\r\n                                     .PerfAndroidGeneratedBindingConfiguration()\r\n                                     .CompositeUIConfiguration(new ShellHandlerProvider())\r\n                                     .WithComponent(new MainSectionManager());\r\n        stopwatch.Stop();\r\n        Log.Wtf(\"STARTUP2\", stopwatch.Elapsed.ToString());\r\n```\r\n\r\n```\r\nPhone: Galaxy Note 10, Release build + FullAOT\r\nSTARTUP1    00:00:00.1165980\r\nSTARTUP2    00:00:00.0043421\r\n```\r\n\r\nIf NativeAOT can make any user code executes in 50-100 ms (based on this example, this is more than enough if we don\u0027t need JIT compilation), plus an additional runtime execution time of 250-300 ms, we would achieve a total startup time of 350-400 ms for any application. This is comparable to the startup time of native applications.",
                                           "updatedAt":  "2024-08-22T17:40:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JaQt4",
                                           "createdAt":  "2024-08-22T18:13:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "\u003e As a developer, there’s nothing I can do to affect JIT compilation\r\n\r\n@vyacheslav-volkov for your example above, have you tried either to \"AOT Everything\" with `-p:AndroidEnableProfiledAot=false`, or recorded a custom AOT profile?\r\n\r\n* https://github.com/jonathanpeppers/Mono.Profiler.Android\r\n\r\nBy default, we use a built-in AOT profile that won\u0027t include most of your code. It is a reasonable tradeoff for app size vs startup time.\r\n\r\nIf you can use AOT for the code above, `STARTUP1` should be much quicker.\r\n\r\n(note that this is using Mono\u0027s AOT in the current product, and completely unrelated from NativeAOT).",
                                           "updatedAt":  "2024-08-22T18:13:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JaTH7",
                                           "createdAt":  "2024-08-22T18:19:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "@jonathanpeppers I\u0027ve used this test project with FullAOT (Mono\u0027s AOT), you can check the config, it should be good:\r\nhttps://github.com/vyacheslav-volkov/PerfAndroidTest/blob/main/PerfAndroid/PerfAndroid.csproj#L12-L14\r\n\r\nOut of curiosity, I ran the same code without AOT, and here’s the result:\r\n```\r\nSTARTUP1  00:00:00.2220397\r\nSTARTUP2  00:00:00.0038740\r\n```\r\n\r\n",
                                           "updatedAt":  "2024-08-22T18:23:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JacBj",
                                           "createdAt":  "2024-08-22T18:41:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "@vyacheslav-volkov can you check it\u0027s actually using AOT? It seems odd AOT would make the first run _worse_ than JIT.\r\n\r\n    adb shell setprop debug.mono.log default,mono_log_level=debug,mono_log_mask=aot\r\n\r\nThis should make Mono print out a log message for each method like:\r\n\r\n    10401 10401 D Mono    : AOT: FOUND method Microsoft.AspNetCore.Components.WebView.Maui.BlazorWebView:.ctor () [0x6f9efd0150 - 0x6f9efd0340 0x6f9efd260c]\r\n\r\nNote it\u0027s expected some methods will say:\r\n\r\n    10401 10401 D Mono    : AOT NOT FOUND: (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr).\r\n    10401 10401 D Mono    : AOT NOT FOUND: (wrapper managed-to-native) System.Diagnostics.Debugger:IsAttached_internal ().\r\n    10401 10401 D Mono    : AOT NOT FOUND: (wrapper native-to-managed) Android.Runtime.JNINativeWrapper:Wrap_JniMarshal_PPL_V (intptr,intptr,intptr).\r\n\r\nClear `debug.mono.log` later after testing (as it will slowdown apps). You can reboot the device or use `adb shell setprop debug.mono.log \"\u0027\u0027\"`",
                                           "updatedAt":  "2024-08-22T18:41:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jadzc",
                                           "createdAt":  "2024-08-22T18:46:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGX8zg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Aleksey-M",
                                                                               "createdAt":  "2024-09-03T08:20:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AmSmart",
                                                                               "createdAt":  "2024-09-03T16:02:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexis-kochetov",
                                                                               "createdAt":  "2024-09-04T03:53:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Grzegorz1223",
                                                                               "createdAt":  "2025-02-14T09:28:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "charlesroddie",
                                           "body":  "My observations and suggestion as an end user:\r\n\r\n**Android is 2+ years behind other targets** for AOT compilation in dotnet.\r\n- Windows: 2015 with UWP/netnative, 2024 with WinUI/NativeAOT.\r\n- IOS, Mac: 2023 NativeAOT, with full MonoAOT for many years before.\r\n- Web: probably NativeAOT in 2024: Avalonia is very close to running on NativeAOT WASM https://github.com/AvaloniaUI/Avalonia/issues/16211 .\r\n- Android: not even full mono AOT. NativeAOT in 2026 at earliest according to comments above.\r\n\r\n**This stems from using the Android SDK** which relies on Java interop, which makes things much more complicated than any other platform. The possible plans described above (https://github.com/dotnet/runtime/issues/106748#issuecomment-2302160443, https://github.com/dotnet/runtime/issues/106748#issuecomment-2305016834) suggest tackling these issues which may take a long time.\r\n\r\n**Surely the NDK is a better target**\r\n\r\nFlutter uses the NDK and fully AOT-compiles everything and you can access relevant android-specific stuff from dart. This is where dotnet should be:\r\n\r\n\u003e https://docs.flutter.dev/resources/faq#run-android The engine\u0027s C and C++ code are compiled with Android\u0027s NDK. The Dart code (both the SDK\u0027s and yours) are ahead-of-time (AOT) compiled into native, ARM, and x86-64 libraries. Those libraries are included in a \"runner\" Android project, and the whole thing is built into an .apk. When launched, the app loads the Flutter library. Any rendering, input, or event handling, and so on, is delegated to the compiled Flutter and app code.\r\n\r\nIn dotnet, there are some POCs as mentioned above (https://www.reddit.com/r/dotnet/comments/13lvih2/nativeaot_ndk_vs_xamarinandroid_performance/ and more recently https://github.com/jonathanpeppers/Android-NativeAOT ), both using SkiaSharp. But we would need the NDK callable from dotnet, similar to calling native code from dotnet in SkiaSharp, dotnet-ios, WinUI, etc..",
                                           "updatedAt":  "2024-08-22T18:46:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jad0V",
                                           "createdAt":  "2024-08-22T18:46:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvWmXQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jonathanpeppers",
                                                                               "createdAt":  "2024-08-22T18:50:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "@jonathanpeppers I\u0027ll check, but it hasn\u0027t gotten worse. With AOT, the time is `00:00:00.1165980`, and without AOT, it\u0027s `00:00:00.2220397`. The code with AOT runs twice as fast, but it\u0027s still not fast enough.",
                                           "updatedAt":  "2024-08-22T18:46:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Je4j4",
                                           "createdAt":  "2024-08-23T08:28:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvdXRA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "alexyakunin",
                                                                               "createdAt":  "2024-08-23T09:28:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "@jonathanpeppers @jonpryor  I encountered 1,700 AOT NOT FOUND errors https://github.com/vyacheslav-volkov/PerfAndroidTest/blob/main/trace/aot_logs.txt, all related to the use of generics and value types, which matches the description of a known issue https://github.com/dotnet/runtime/issues/101135. I believe this is a serious problem that cannot be ignored. If we don\u0027t get NativeAOT until 2026, we need to find other ways to reduce startup time. Currently, all documentation suggests using ProfiledAOT or FullAOT, but as we can see, this does not solve any problems when using structs with generics, making it ineffective.\r\n\r\nI created an empty project that uses only one framework and nothing else (https://github.com/vyacheslav-volkov/PerfAndroidTest/tree/main), and it already takes 1000 ms to launch, even after using all available optimization methods. I have demonstrated that all the time is spent on JIT compilation rather than executing actual code, as the code itself runs very quickly compared to the JIT compilation https://github.com/dotnet/runtime/issues/106748#issuecomment-2305224622. \r\nThis is a real problem, and currently, there is no solution for it. This issue has been ignored for a long time, causing many developers to stop using Xamarin.Android. Claims that an empty app can launch in 250 ms are not helpful when even a test app takes 1000 ms to start and does nothing but initialize.\r\n\r\nIf you have any real ways to solve this problem right now, please let me know, and I will close this issue, and we will update the documentation so that all developers are aware. But if there is no solution, we need to find one and reduce the startup time. So far I see only two options: using NativeAOT or fixing the existing bug https://github.com/dotnet/runtime/issues/101135.",
                                           "updatedAt":  "2024-08-23T08:28:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jfdvu",
                                           "createdAt":  "2024-08-23T09:50:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGX90g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vyacheslav-volkov",
                                                                               "createdAt":  "2024-08-23T12:24:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexis-kochetov",
                                                                               "createdAt":  "2024-09-04T03:55:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "John0King",
                                                                               "createdAt":  "2024-09-04T14:23:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Jure-BB",
                                                                               "createdAt":  "2024-10-24T13:33:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "espenrl",
                                                                               "createdAt":  "2024-11-16T22:47:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ram16g",
                                                                               "createdAt":  "2024-12-20T06:24:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Grzegorz1223",
                                                                               "createdAt":  "2025-02-14T09:30:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "alexyakunin",
                                           "body":  "@jonpryor @jonathanpeppers \r\n\u003e _If_ NativeAOT has a GC story for .NET 10, I\u0027d _tentatively_ hope for _preview_ support in .NET for Android by .NET 11. _Maybe_. (There are a number of unknown unknowns, and would not want to get anyone\u0027s hopes up.) Increase numbers as appropriate.\r\n\r\nIf that\u0027s the case, IMO it makes sense to address the #101135 first - at least to an extent we can generate most of AOT code with some workarounds. E.g. we already tried to use https://github.com/gluck/il-repack to merge the code from our own assemblies - the merge works for WASM, but leads to errors when you build Android target (that\u0027s in our specific case). I\u0027ll try to drag it to some final conclusion over the next few weeks, so expect some updates here.\r\n\r\nAs for the fix, it seems it\u0027s all about relaxing the filtering conditions here: https://github.com/fanyang-mono/runtime/blob/main/src/mono/mono/mini/aot-compiler.c#L13918 - IDK if there are any other remaining low hanging fruits, but overall, we desperately need a way to generate _at least_ the generic instances parameterized with our own value types - this would close `AsyncTaskMethodBuilder` \u0026 `ConcurrentDictionary` scenarios.\r\n\r\nJust imagine how painful it is to know there is nothing you can do to improve startup time further - while knowing that fixing this single problem would make it 4x faster (I explained in #101135 that 75+% of time is spent in JIT in our case). \r\n\r\nAnd I really don\u0027t understand why MS doesn\u0027t take it very seriously. Slow startup = elevated ANR rate no matter what you do. There are slow devices. As a result, you\u0027ll be penalized on Google Play just because of this:\r\n\r\n![image](https://github.com/user-attachments/assets/fcded6b7-8374-4eb5-b7b1-1df355c9e081)\r\n\r\nAnd literally all of ANRs in our case point to exactly this ANR reason:\r\n```\r\nNative method - android.os.MessageQueue.nativePollOnce\r\nInput dispatching timed out (No focused window)\r\n```\r\n\r\nNow imagine you\u0027re a PM deciding whether to use MAUI or not for the next project. And you find out that no matter whether your app is supposed to start fast or not, **it will be penalized on Google Play for elevated ANR** - all because 1% of devices where your startup time will be \u003e5s. And you have no way to address this. Would you bother to explore the MAUI scenario further? Seriously?",
                                           "updatedAt":  "2024-08-23T10:21:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JlA-e",
                                           "createdAt":  "2024-08-24T08:05:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEMG8lg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "charlesroddie",
                                                                               "createdAt":  "2024-08-24T13:34:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vyacheslav-volkov",
                                                                               "createdAt":  "2024-08-26T10:24:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JMND3v",
                                                                               "createdAt":  "2024-09-03T06:57:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EmVee381",
                                                                               "createdAt":  "2024-09-03T07:21:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kcrg",
                                                                               "createdAt":  "2024-09-03T09:00:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roubachof",
                                                                               "createdAt":  "2024-09-03T09:42:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AathifMahir",
                                                                               "createdAt":  "2024-09-03T15:35:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andersonvieiragomeslopes",
                                                                               "createdAt":  "2024-09-03T15:40:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AmSmart",
                                                                               "createdAt":  "2024-09-03T16:08:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexis-kochetov",
                                                                               "createdAt":  "2024-09-04T03:57:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dgellow",
                                                                               "createdAt":  "2024-09-07T00:51:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wcoder",
                                                                               "createdAt":  "2024-09-12T15:18:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "K-MeLeOn",
                                                                               "createdAt":  "2024-09-16T21:40:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Jure-BB",
                                                                               "createdAt":  "2024-10-24T13:33:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NatElkins",
                                                                               "createdAt":  "2025-03-29T23:59:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  15
                                                         },
                                           "author":  "emmauss",
                                           "body":  "\u003e @GerardSmit do you know what the Avalonia team used for this video https://www.reddit.com/r/dotnet/comments/13lvih2/nativeaot_ndk_vs_xamarinandroid_performance/? In their video the performance is as fast as what I get on iOS with NativeAOT.\r\n\r\nI\u0027m one of the devs in avalonia who directly worked on this port. NativeAot pretty much brought our UI framework as close to native as possible. Most of our framework code is managed, and only skia, which is our main renderer, relies on native api. Both MonoJit and MonoAot have virtually the same slow performance at start up and loading new views in-app, as seen in that simple app shown in the video. We have a much more complex app, the controls catalog, that is near instant to boot with NativeAot, but takes 2-6s depending on device for Xamarin.Android.\r\nWe had 2 experiments. One completely forgoing .Net Android and going full native with ndk\u0027s NativeActivity, which you see in the reddit thread, and another using .Net Android\u0027s AppCompat to create the activity, demonstrated here with our control catalog on  a real device.\r\n\r\n\r\nhttps://github.com/user-attachments/assets/4a4fade8-b7ce-453b-b2ae-4ccd54f882a9\r\n\r\n",
                                           "updatedAt":  "2024-08-24T08:05:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jle-3",
                                           "createdAt":  "2024-08-24T10:09:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexyakunin",
                                           "body":  "@emmauss , a quick q -\r\n\u003e Both MonoJit and MonoAot have virtually the same slow performance at start up and loading new views in-app,\r\n\r\nHow far did you guys investigate the reasons of slow startup - in particular, did you try to count the number of methods for which AOT code wasn\u0027t generated (`AOT_NOT_FOUND` in mono debug log), or something like % of time spent in JIT on startup?\r\n\r\nWe reported #101135 while investigating slow startup in our app - in short, Mono AOT *doesn\u0027t generate code for any generic method instance parameterized with non-primitive value type*. So if you heavily rely on structs \u0026 generics (which is reasonable on CoreCLR), or have a decent amount of async code (it relies on `AsyncTaskMethodBuilder\u003cT\u003e` \u0026 state struct), JIT will dominate. In our case 75% of startup time is spent in JIT.\r\n\r\nI don\u0027t know much about internals of Avalonia, but you can probably instantly tell if the demo app heavily uses something like `Wrapper\u003cT\u003e`, `Adapter\u003cT\u003e`, or `Serialize\u003cT\u003e(...)` on startup, where `T` is a struct. If yes, this could be the reason of a slow startup in this case as well.\r\n\r\nP.S. Kudos for the demo / video. We need some hope ;)",
                                           "updatedAt":  "2024-08-24T10:15:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JltVD",
                                           "createdAt":  "2024-08-24T11:38:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvl8dg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "alexyakunin",
                                                                               "createdAt":  "2024-08-25T11:09:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "emmauss",
                                           "body":  "\u003e @emmauss , a quick q -\r\n\u003e \r\n\u003e \u003e Both MonoJit and MonoAot have virtually the same slow performance at start up and loading new views in-app,\r\n\u003e \r\n\u003e How far did you guys investigate the reasons of slow startup - in particular, did you try to count the number of methods for which AOT code wasn\u0027t generated (`AOT_NOT_FOUND` in mono debug log), or something like % of time spent in JIT on startup?\r\n\u003e \r\n\u003e We reported #101135 while investigating slow startup in our app - in short, Mono AOT _doesn\u0027t generate code for any generic method instance parameterized with non-primitive value type_. So if you heavily rely on structs \u0026 generics (which is reasonable on CoreCLR), or have a decent amount of async code (it relies on `AsyncTaskMethodBuilder\u003cT\u003e` \u0026 state struct), JIT will dominate. In our case 75% of startup time is spent in JIT.\r\n\u003e \r\n\u003e I don\u0027t know much about internals of Avalonia, but you can probably instantly tell if the demo app heavily uses something like `Wrapper\u003cT\u003e`, `Adapter\u003cT\u003e`, or `Serialize\u003cT\u003e(...)` on startup, where `T` is a struct. If yes, this could be the reason of a slow startup in this case as well.\r\n\u003e \r\n\u003e P.S. Kudos for the demo / video. We need some hope ;)\r\n\r\nWe use a lot of generics. Our Property system is completely backed by generics, and every object in the UI is an AvaloniaObject. So, with how our Property must be registered on a type deriving from AvaloniaObject, mono is probably not generating aot code for those. Our styling, visual, and input system rely on it. We do use structs for value types(size, location, etc).",
                                           "updatedAt":  "2024-08-24T11:38:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JnVbt",
                                           "createdAt":  "2024-08-25T11:27:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEc_X8g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "neon-sunset",
                                                                               "createdAt":  "2024-08-25T12:32:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "Sasino97",
                                                                               "createdAt":  "2025-08-04T10:44:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "alexyakunin",
                                           "body":  "Just read: https://docs.avaloniaui.net/docs/basics/user-interface/controls/creating-controls/defining-properties\r\n\r\n\u003e `AvaloniaProperty.Register\u003cMyCustomButton, int\u003e(...)`\r\n\r\nAlmost crying... As far as I can reason, that\u0027s nearly the worst case scenario, assuming it\u0027s not `int`, but any type declared outside of `mscorlib`. It\u0027s going to skip AOT for all `\u003cAnyClass, struct\u003e` params just because there is a struct.\r\n\r\nThere must be \u003e 1K properties in such a demo. Assuming `Register` is not the only generic methods called at least once per property registration + this happens for every property on every component type, it might be easily a few thousands of generic method instances with missing AOT.\r\n\r\nIn our case we see ~4K of AOT_NOT_FOUND methods in Mono debug log, and JIT alone eats up ~ 1.5s of time on Galaxy S23 Ultra.\r\n\r\nOne other notable case is caching - if you use `ConcurrentDictionary.GetOrAdd\u003cTKey, TValue, TState\u003e()` overload with one of args being value type, all of such calls will also require JIT.\r\n\r\nNativeAOT handles all these cases, and this might at least partially explain such a dramatic difference.",
                                           "updatedAt":  "2024-08-29T12:36:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JnV__",
                                           "createdAt":  "2024-08-25T11:33:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexyakunin",
                                           "body":  "@emmauss If you guys can try running the demo with Mono debug log enabled \u0026 share the number of AOT_NOT_FOUND methods @ startup, it would be great... Maybe it will help MS folks to seriously think about the priority of this issue. Especially in the light of \"you\u0027ll be lucky to have .NET Native for Android in .NET 11\".\r\n\r\n```\r\nadb shell setprop debug.mono.log default,assembly,mono_log_level=debug,mono_log_mask=all\r\n```",
                                           "updatedAt":  "2024-08-25T11:34:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KMBaL",
                                           "createdAt":  "2024-08-29T17:11:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "One note: a lot of the above costing implicitly assumes MAUI is on top, meaning that the system needs tight JVM integration. I don\u0027t know if platforms like Avalonia actually require that. If not, and they can compile against the Android NDK, the cost and schedules may change. I\u0027ll let someone from Avalonia speak on how they used Native AOT in the past.",
                                           "updatedAt":  "2024-08-29T17:11:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KMlR8",
                                           "createdAt":  "2024-08-29T18:17:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emmauss",
                                           "body":  "\u003e One note: a lot of the above costing implicitly assumes MAUI is on top, meaning that the system needs tight JVM integration. I don\u0027t know if platforms like Avalonia actually require that. If not, and they can compile against the Android NDK, the cost and schedules may change. I\u0027ll let someone from Avalonia speak on how they used Native AOT in the past.\r\n\r\nWe tested Native AOT with the Android NDK, using NativeActivity for our activity. This cut support for SDK apis that modern android apps use, like the storage access framework, window insets, text and input composition and embedding native android views in-app. Apis we need for storage, window customization and text prediction support. Also, we couldn\u0027t use any dotnet android libraries. These do not make it appealing to end users as they will be cut off from the rich dotnet android library ecosystem, and also need to set up a lot of build scripts just to build and sign their app.",
                                           "updatedAt":  "2024-08-29T18:17:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KMwet",
                                           "createdAt":  "2024-08-29T18:39:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODw0QMQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "saint4eva",
                                                                               "createdAt":  "2024-09-03T14:45:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "\u003e One note: a lot of the above costing implicitly assumes MAUI is on top, meaning that the system needs tight JVM integration. I don\u0027t know if platforms like Avalonia actually require that. If not, and they can compile against the Android NDK, the cost and schedules may change. I\u0027ll let someone from Avalonia speak on how they used Native AOT in the past.\r\n\r\nGenerally, I don\u0027t know how you would make a \"real\" Android application that without calling Java APIs. Even Unity3d games would use [their Java interop support](https://docs.unity3d.com/Manual/android-plugins-java-code-from-c-sharp.html) for things like in-app purchases, push notifications, etc. There are a lot of random OS features you have to access from Java, so I would think most Avalonia apps would also need to use these.",
                                           "updatedAt":  "2024-08-29T18:40:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KPkwO",
                                           "createdAt":  "2024-08-29T23:10:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "\u003e Generally, I don\u0027t know how you would make a \"real\" Android application that without calling Java APIs.\r\n\r\nI believe you could still call Java APIs through JNI, it would just be significantly more effort than the current implementations.\r\n\r\n\u003e do not make it appealing to end users as they will be cut off from the rich dotnet android library ecosystem, and also need to set up a lot of build scripts just to build and sign their app\r\n\r\nAgreed, the downside of this approach would be none of the existing Android/Java interop would work.\r\n",
                                           "updatedAt":  "2024-08-29T23:10:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KTcli",
                                           "createdAt":  "2024-08-30T07:36:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwa7nw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "alexyakunin",
                                                                               "createdAt":  "2024-08-30T12:44:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "@agocke  If someone could fix this issue https://github.com/dotnet/runtime/issues/101135, we could use it as a workaround until full support for NativeAOT is available. Could someone from the team assess how difficult this task might be and estimate how long it might take to fix? Currently, we do not have a truly working solution to the slow startup problem.",
                                           "updatedAt":  "2024-08-30T07:36:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KZ1n9",
                                           "createdAt":  "2024-08-30T17:28:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "That issue has 86 comments, so let me see if I can summarize. That\u0027s not one issue but really a blanket issue for: we\u0027ve seen a variety of methods that must be JITed in our sample apps, which causes slow startup. Is that right? If so, I would expect that issue to verge on impossible to fix. Rearchitecting Mono to AOT everything is more expensive than just using Native AOT.",
                                           "updatedAt":  "2024-08-30T17:28:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KdFd0",
                                           "createdAt":  "2024-08-31T12:17:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexyakunin",
                                           "body":  "\u003e That issue has 86 comments, so let me see if I can summarize. That\u0027s not one issue but really a blanket issue for: we\u0027ve seen a variety of methods that must be JITed in our sample apps, which causes slow startup. Is that right? If so, I would expect that issue to verge on impossible to fix. Rearchitecting Mono to AOT everything is more expensive than just using Native AOT.\r\n\r\nNo, it\u0027s not quite right: there is a very specific scenario where AOT code isn\u0027t generated for a generic method instance:\r\n- It\u0027s an instance with a ValueType parameter\r\n- Which isn\u0027t a primitive type - this was relaxed to a type from mscorlib in a partial fix\r\n- And if I am not mistaken, the method itself has to be declared in the same assembly as its parameter.\r\n\r\nI\u0027ll find the link to the specific piece of code making all these checks a bit later (already shared it here).\r\n\r\nOverall, my impression is: yes, probably some extra is necessary to eliminate some of these constraints (e.g. modifying AOT code lookup logic, etc.), but this isn\u0027t as complicated as a full overhaul of Mono AOT. \r\n\r\nMoreover, I suspect some of these constraints were originally added to decrease the number of generic implementations AOT generates in Full mode, and it happened at the time when generics weren\u0027t so widespread + there was no profile-based AOT mode.",
                                           "updatedAt":  "2024-08-31T12:17:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KdG8r",
                                           "createdAt":  "2024-08-31T12:43:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwxDUw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JohnySeven",
                                                                               "createdAt":  "2024-09-03T08:08:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alexyakunin",
                                           "body":  "\u003e That issue has 86 comments\r\n\r\nI also wish people responding to it take it seriously right from the beginning instead of saying ~ \"well, you guys are fine - the app is at least starting, right? as for the startup time, it\u0027s sad, but please wait for a few more years.\"\r\n\r\nI didn\u0027t write about this bizarre issue with AOT because I genuinely love .NET and believe you guys are doing a great job making it better. So even though this discovery means Mono AOT is 90% fake, and profile-guided AOT deserves this name only formally, I\u0027d rather wait for MS to address it.\r\n\r\nAnd somehow... Somehow I discover that \"it\u0027s fine\" feels like an acceptable answer for MS here. But seriously, how it can be fine, if a single post about this would decrease a chance of MAUI being used by a given company by maybe 50%? Isn\u0027t an elevated ANR \u0026 Play Store penalization one of the worst things you can face, assuming you can\u0027t fix this?",
                                           "updatedAt":  "2024-08-31T12:54:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KdHjA",
                                           "createdAt":  "2024-08-31T12:52:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwyEiQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gpproton",
                                                                               "createdAt":  "2024-09-03T10:09:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alexyakunin",
                                           "body":  "My point is: if you guys would run MAUI as a startup, this issue would  be instantly classified as \"existential\":\r\n- If people start mentioning it as number 1 concern, all of our other efforts to promote MAUI are doomed.\r\n- Thus no matter how much we invest into other features of MAUI or Blazor Hybrid, this single thing deserves more attention.\r\n\r\n",
                                           "updatedAt":  "2024-09-03T06:38:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Kn5_R",
                                           "createdAt":  "2024-09-03T06:40:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "\u003e No, it\u0027s not quite right: there is a very specific scenario where AOT code isn\u0027t generated for a generic method instance:\r\n\r\n\u003e It\u0027s an instance with a ValueType parameter\r\n\u003e Which isn\u0027t a primitive type - this was relaxed to a type from mscorlib in a partial fix\r\n\u003e And if I am not mistaken, the method itself has to be declared in the same assembly as its parameter.\r\n\r\nAssuming the above are true, my understanding is that this is not quite as expensive as guaranteeing Mono can AOT any code, but it\u0027s close. My understanding is that specialization of value types is one of the main limitations in the current architecture and implementing it would be a very large work item.\r\n\r\nIt\u0027s certainly possible that there is a simpler implementation I\u0027m not aware of, but I would start the cost as very expensive.",
                                           "updatedAt":  "2024-09-03T06:40:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Komds",
                                           "createdAt":  "2024-09-03T08:24:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxmw4Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "alexyakunin",
                                                                               "createdAt":  "2024-09-04T01:24:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ram16g",
                                                                               "createdAt":  "2024-09-10T02:34:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "charlesroddie",
                                           "body":  "If a mono architecture limitation prevents full AOT on Android, why does full mono AOT work on IOS?",
                                           "updatedAt":  "2024-09-03T08:24:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ko7kf",
                                           "createdAt":  "2024-09-03T09:05:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERrRIA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mohachouch",
                                                                               "createdAt":  "2024-09-03T10:45:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bkaankose",
                                                                               "createdAt":  "2024-09-03T11:25:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "emmauss",
                                                                               "createdAt":  "2024-09-03T11:38:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ClxS",
                                                                               "createdAt":  "2024-09-03T13:23:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rogihee",
                                                                               "createdAt":  "2024-09-03T14:38:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikegoatly",
                                                                               "createdAt":  "2024-09-03T21:05:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexyakunin",
                                                                               "createdAt":  "2024-09-04T01:13:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "beeradmoore",
                                                                               "createdAt":  "2024-09-04T01:56:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "crui3er",
                                                                               "createdAt":  "2024-09-04T05:21:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dgellow",
                                                                               "createdAt":  "2024-09-07T00:58:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scgm0",
                                                                               "createdAt":  "2024-09-12T15:55:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "usausa",
                                                                               "createdAt":  "2024-09-23T00:05:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maxkatz6",
                                                                               "createdAt":  "2024-09-26T06:41:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "samsosa",
                                                                               "createdAt":  "2024-10-05T11:25:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Bumbar14",
                                                                               "createdAt":  "2024-10-10T05:21:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FrozDark",
                                                                               "createdAt":  "2024-11-08T19:41:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AigioL",
                                                                               "createdAt":  "2024-11-29T06:00:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ram16g",
                                                                               "createdAt":  "2024-12-20T06:31:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Grzegorz1223",
                                                                               "createdAt":  "2025-02-14T09:40:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NatElkins",
                                                                               "createdAt":  "2025-03-30T00:02:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gabriel-kozma",
                                                                               "createdAt":  "2025-05-12T02:51:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  21
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "The problem is that there is a huge gap emerging between iOS and Android in terms of performance for .NET applications. With each new release, the .NET team adds more and more value types `(ValueTuple, ValueTask, Span, Memory, etc.)`, aiming to reduce heap allocations by using more value types. Developers naturally follow this trend, and various libraries increasingly use value types. However, when trying to create an application on Android, they encounter very slow startup times, whereas other platforms do not face this issue.\r\n\r\nWhen developers ask why it is so slow on Android, they are told that using value types is detrimental because it makes JIT compilation harder, and they should avoid using them. But developers who have already spent a lot of time writing their code with value types are unlikely to create a special version just for Android that avoids them. This situation reveals a contradiction: the entire .NET ecosystem is moving towards optimizations by reducing allocations, but if you want to write for Android, you are advised to forget about value types and generics and use only classes.\r\n\r\nI am currently working on a large project, and for iOS, I am using .NET Native. My library heavily utilizes generics and value types, and I see no issues with this. The installation size from the App Store is 72MB, which is smaller than many similar native applications written in Objective-C/Swift (~100MB), and the performance is comparable to these native apps. The situation is entirely different with Android. As soon as I add simple initialization that does nothing but call managed code, I experience a significant performance hit. For instance, JIT compilation slows down initialization by a factor of 27 check my comment https://github.com/dotnet/runtime/issues/106748#issuecomment-2305224622. I\u0027ve also shared a repository where you can check it out https://github.com/vyacheslav-volkov/PerfAndroidTest. I have used all possible optimization methods, including FullAOT for Android, but this only slightly improves the result. The only option I see is to rewrite all the code specifically for Android, but even that may not help, as .NET itself uses many generics.\r\n\r\nI don’t understand the .NET team\u0027s stance, which denies this issue by citing empty applications where everything works fine. I have provided my examples and asked for optimization assistance (@jonathanpeppers @jonpryor) but have not received any real advice that could help address the situation. The most frustrating part is that there seems to be no hope for this issue to be resolved in the near future. Now, think about it: if someone is starting a project for mobile platforms today and is choosing a framework, and they find this issue, will they choose .NET if even for such a basic thing as startup time there is no solution?\r\n\r\nI am confident that if resources were allocated to address this issue, it wouldn\u0027t necessarily require immediate implementation of .NET Native AOT. It would be enough for someone with knowledge of Mono to try to solve this problem https://github.com/dotnet/runtime/issues/101135 and provide an answer: why it really cannot be done or how it can be done and within what timeframe, as far as I understand MonoAOT works for some internal generics but doesn\u0027t work for custom generics, maybe fixing it isn\u0027t that hard. Currently, all discussions point out that Native AOT for Android is difficult, fixing MonoAOT for Android is difficult, and that the problem lies with developers because everything works fine in tests with an empty application.",
                                           "updatedAt":  "2024-09-03T09:05:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KvbTk",
                                           "createdAt":  "2024-09-04T00:35:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I am currently working on a large project, and for iOS, I am using .NET Native. My library heavily utilizes generics and value types, and I see no issues with this. The installation size from the App Store is 72MB,\r\n\r\nDo you happen to have size and startup performance numbers for Mono AOT on iOS for this project? Would the Mono AOT size and startup performance be acceptable on iOS if native AOT did not exist?",
                                           "updatedAt":  "2024-09-04T00:35:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Kviy8",
                                           "createdAt":  "2024-09-04T01:12:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexyakunin",
                                           "body":  "\u003e I am currently working on a large project, and for iOS, I am using .NET Native. My library heavily utilizes generics and value types, and I see no issues with this.\r\n\r\n\u003e If a mono architecture limitation prevents full AOT on Android, why does full mono AOT work on IOS?\r\n\r\nI\u0027m also curious how it\u0027s even possible to run Mono AOT apps on iOS w/o interpreter enabled, assuming it works the same way for both iOS and Android (and our findings for Android are correct).\r\n\r\nFor the note, we use interpreter-only builds for iOS - that\u0027s because our initial attempts w/ full AOT failed there, but that was ~ 1+ year ago, when we knew way less details of how it works + didn\u0027t do anything to address the explosion of generic instances in `ArgumentList\u003cT0, ... T8\u003e` type, etc., and now it\u0027s addressed. So we\u0027ll definitely retry with AOT builds for iOS quite soon.",
                                           "updatedAt":  "2024-09-04T01:13:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Kvkl0",
                                           "createdAt":  "2024-09-04T01:21:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODw5c2Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "crui3er",
                                                                               "createdAt":  "2024-09-04T05:22:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alexyakunin",
                                           "body":  "@jkotas \r\n\r\n\u003e Would the Mono AOT size and startup performance be acceptable on iOS if native AOT did not exist?\r\n\r\nI know I\u0027m not the one you ask here, but in our case **even interpreter-only mode startup performance is acceptable on iOS** - and that\u0027s exactly what we use now. I shared the numbers, it\u0027s about **1.1s on iPhone 13 (interpreter-only)** vs **1.8s on Galaxy S23 Ultra (both profiled and full AOT)**.",
                                           "updatedAt":  "2024-09-04T01:21:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Kw9jU",
                                           "createdAt":  "2024-09-04T07:12:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxKumw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2024-09-04T15:08:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexyakunin",
                                                                               "createdAt":  "2024-09-05T21:15:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "@jkotas MonoAOT performs almost as fast as NativeAOT, but the application size becomes larger. I just checked, and for this project, it\u0027s around 108 MB for MonoAOT. This is a reasonable size, as I mentioned earlier; similar applications written in Objective-C/Swift occupy about the same amount of space.",
                                           "updatedAt":  "2024-09-04T07:12:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6K_zrD",
                                           "createdAt":  "2024-09-05T15:14:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGmzcA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CeSun",
                                                                               "createdAt":  "2024-10-09T17:41:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "knuxbbs",
                                                                               "createdAt":  "2025-02-17T15:11:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "josephmoresena",
                                           "body":  "\u003e   * GC bridge (of some form) to support Java interop\r\n\u003e   * NativeAOT runtime packs for Android: this is somewhat working with `linux-bionic-arm64` packages, but we probably want actual `android-arm64`, etc. packages.\r\n\r\nIn fact a GC bridge for Java intero, .NET (runtime) interop and .NET (NativeAOT) interop would be great.\r\n\r\nFor some time now, I have been working on a JNI framework for .NET that is fully compatible with NativeAOT, and there is even an example of its use on Android.\r\n\r\nHowever, from what I have observed, native Android applications go beyond JNI; it even seems that all of Java\u0027s functionality is encapsulated in Android\u0027s own native libraries.\r\nFor NativeAOT, what might be feasible is to build a framework on top of these native libraries using DirectPInvoke and NativeLibrary.",
                                           "updatedAt":  "2024-09-05T15:14:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Nwyne",
                                           "createdAt":  "2024-09-27T04:28:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "juepiezhongren",
                                           "body":  "it is better to deprecate monoVm in the future, while monoInterpreter to be a preserved component for clr would be a descent result.",
                                           "updatedAt":  "2024-09-27T04:28:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6POO-L",
                                           "createdAt":  "2024-10-09T17:14:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonpryor",
                                           "body":  "@josephmoresena [wrote](https://github.com/dotnet/runtime/issues/106748#issuecomment-2331982531):\n\n\u003e I have been working on a JNI framework for .NET that is fully compatible with NativeAOT\n\nOut of curiosity, why?  [dotnet/java-interop](http://github.com/dotnet/java-interop) has a couple of [samples running on NativeAOT](https://github.com/dotnet/java-interop/tree/main/samples/Hello-NativeAOTFromJNI); the current JNI underpinnings of .NET for Android *can* work with NativeAOT.  The major problem is the *GC*, as mentioned elsewhere on this issue.",
                                           "updatedAt":  "2024-10-09T17:14:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6POfhn",
                                           "createdAt":  "2024-10-09T17:53:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1rA0w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maxkatz6",
                                                                               "createdAt":  "2024-10-10T23:31:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "josephmoresena",
                                           "body":  "\u003e [@josephmoresena](https://github.com/josephmoresena) [wrote](https://github.com/dotnet/runtime/issues/106748#issuecomment-2331982531):\n\u003e \n\u003e \u003e I have been working on a JNI framework for .NET that is fully compatible with NativeAOT\n\u003e \n\u003e Out of curiosity, why? [dotnet/java-interop](https://github.com/dotnet/java-interop) has a couple of [samples running on NativeAOT](https://github.com/dotnet/java-interop/tree/main/samples/Hello-NativeAOTFromJNI); the current JNI underpinnings of .NET for Android _can_ work with NativeAOT. The major problem is the _GC_, as mentioned elsewhere on this issue.\n\nWhen I thought about this, it was December 2021. I also made several static approaches to handling the API, but due to the .NET version at the time, I didn’t like the final result because it depended 100% on instances rather than types.\n\nIt wasn’t until the advent of generic math that I was able to make sense of what I wanted. And that’s all; I believe no one would actually use it because, even though it’s friendly to use, its overloaded—precisely because I tried to make it friendly to use.\n\nI think the most notable aspect of that approach is how I avoided the use of reflection (or even how I used it) through generic math to bring in the definitions (methods, fields, constructors, and functions) and data types (primitives, arrays, classes, and interfaces), always focused on a reflection-free scenario.\n\nIt doesn\u0027t use source generators, and everything is compiled statically. It has switches to trim down scenarios, and in general, it is usable (perhaps with many errors because only I maintain it) in any scenario that uses JNI or the invocation interface.",
                                           "updatedAt":  "2024-10-09T17:53:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PkI-C",
                                           "createdAt":  "2024-10-12T16:18:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "winkmichael",
                                           "body":  "Any update on this? Without AOT performance is pretty horrible starting apps. ",
                                           "updatedAt":  "2024-10-12T16:18:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PkWFZ",
                                           "createdAt":  "2024-10-12T19:29:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEC9ttg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonheryanto",
                                                                               "createdAt":  "2024-11-13T02:33:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ram16g",
                                                                               "createdAt":  "2024-12-20T06:35:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexander-efremov",
                                                                               "createdAt":  "2025-01-17T10:34:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "charlesroddie",
                                           "body":  "\u003e @jonpryor  The major problem is the GC, as mentioned elsewhere on this issue.\n\n\u003e @jkotas Yes, the first step would be to extract the required functionality into an API proposal.\n\nHow far away is the dotnet Android team from being able to create a proposal, as IOS did in [[NativeAOT] Low level API support for Objective-C scenarios](https://github.com/dotnet/runtime/issues/77472) - with GC API described in https://github.com/dotnet/runtime/issues/44659) ?",
                                           "updatedAt":  "2024-10-12T19:29:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gINKC",
                                           "createdAt":  "2025-02-27T00:25:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIZpgw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "expcat",
                                                                               "createdAt":  "2025-02-27T06:19:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "radiKal07",
                                                                               "createdAt":  "2025-03-04T09:40:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "15mgm15",
                                           "body":  "Do we have any news / discussions / ideas about this? @jonathanpeppers ",
                                           "updatedAt":  "2025-02-27T00:25:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gPBDN",
                                           "createdAt":  "2025-02-27T15:25:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEYtfHw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Delsin-Yu",
                                                                               "createdAt":  "2025-02-27T15:31:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "michaldobrodenka",
                                                                               "createdAt":  "2025-02-27T15:40:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-27T16:53:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "viniciusjarina",
                                                                               "createdAt":  "2025-02-27T18:09:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "charlesroddie",
                                                                               "createdAt":  "2025-02-27T20:57:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vyacheslav-volkov",
                                                                               "createdAt":  "2025-03-01T11:15:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "radiKal07",
                                                                               "createdAt":  "2025-03-04T09:40:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Grzegorz1223",
                                                                               "createdAt":  "2025-03-04T18:35:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ram16g",
                                                                               "createdAt":  "2025-03-12T03:11:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "15mgm15",
                                                                               "createdAt":  "2025-03-14T21:03:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2025-03-28T17:48:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hez2010",
                                                                               "createdAt":  "2025-03-29T15:16:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NatElkins",
                                                                               "createdAt":  "2025-03-30T00:05:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Jflaurendeau",
                                                                               "createdAt":  "2025-07-01T14:50:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  14
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "Work is ongoing, you can follow along at:\n* https://github.com/dotnet/android/pulls?q=is%3Apr+NativeAOT",
                                           "updatedAt":  "2025-02-27T15:25:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jz6TZ",
                                           "createdAt":  "2025-03-24T14:18:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e Aside from the things mentioned earlier, the whole Android crypto interop is currently not part of the linux-bionic packages.\n\nIs it desired to maintain both linux-bionic and android runtimes separately? Originally, this RID was added to skip Dalvik VM layer, which has been deprecated since (in favor of Android Runtime). bionic-libc is Android specific. linux-musl, on the other hand, is used by various musl libc distros (https://wiki.musl-libc.org/projects-using-musl.html).\n\nIt sounds like one RID could be enough with a few feature/appcontext switches if someone wants the vanilla mode. (`DOTNET_EnableJavaIntegrations=0` etc. similar to `DOTNET_EnableEventPipe` and friends)",
                                           "updatedAt":  "2025-03-24T14:18:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j1UDE",
                                           "createdAt":  "2025-03-24T16:08:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "\u003e Is it desired to maintain both linux-bionic and android runtimes separately? Originally, this RID was added to skip Dalvik VM layer, which has been deprecated since (in favor of Android Runtime). \n\nIt\u0027s true that the original motivation of the RID was to skip the Dalvik VM, but what I think it also means is targeting the NDK directly.\n\nI think your question still stands as we may be able to achieve both through one. I suspect there to be some various SDK level work to pull that off in a few different repos. Probably a good idea to sort that out and strike while the iron is hot.",
                                           "updatedAt":  "2025-03-24T16:08:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j1aqI",
                                           "createdAt":  "2025-03-24T16:17:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "On `linux-bionic-*`, `Console.WriteLine()`, for example, writes to stdout (or `Console.Error` stderr). These both go to /dev/null on Android.\n\nOn Mono, the `android-*` RID actually writes these messages to `adb logcat`, as that is much more useful for developers. I suspect there would be other differences like SSL-support, etc. that will make sense for an `android-*` RID but not `linux-bionic-*`.",
                                           "updatedAt":  "2025-03-24T16:17:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j1sp1",
                                           "createdAt":  "2025-03-24T16:42:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "\u003e These both go to /dev/null on Android.\n\nI don\u0027t think that\u0027s true if you run inside e.g. Termux, environments like that was the original point of linux-bionic.",
                                           "updatedAt":  "2025-03-24T16:42:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j2jd_",
                                           "createdAt":  "2025-03-24T18:00:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOELfXGg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-03-26T09:14:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "steveisok",
                                           "body":  "\u003e On `linux-bionic-*`, `Console.WriteLine()`, for example, writes to stdout (or `Console.Error` stderr). These both go to /dev/null on Android.\n\u003e \n\u003e On Mono, the `android-*` RID actually writes these messages to `adb logcat`, as that is much more useful for developers. I suspect there would be other differences like SSL-support, etc. that will make sense for an `android-*` RID but not `linux-bionic-*`.\n\nSome of that like redirecting to logcat we\u0027ll sort out in .NET 10. We should at least give some thought at what to do with the rids and the dev experience they\u0027re attached to.",
                                           "updatedAt":  "2025-03-24T18:00:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j2x_S",
                                           "createdAt":  "2025-03-24T18:24:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Delsin-Yu",
                                           "body":  "Can dotnet/android#9784 be the primary tracker for this issue?",
                                           "updatedAt":  "2025-03-24T18:27:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j37br",
                                           "createdAt":  "2025-03-24T20:42:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "\u003e Can [dotnet/android#9784](https://github.com/dotnet/android/issues/9784) be the primary tracker for this issue?\n\nThis issue is what we know needs to be done in the `android` workload. There are other dotnet/runtime tasks that wouldn\u0027t be accounted for (GC bridge, runtime packs, etc.)",
                                           "updatedAt":  "2025-03-24T20:43:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j65lw",
                                           "createdAt":  "2025-03-25T05:25:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOELymOQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexyakunin",
                                                                               "createdAt":  "2025-03-27T00:55:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "expcat",
                                                                               "createdAt":  "2025-03-27T20:51:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Delsin-Yu",
                                           "body":  "I see, thanks for the information.\n\n\u003e There are other dotnet/runtime tasks that wouldn\u0027t be accounted for\n\nAre there other tracking issues available for subscriptions to monitor the NAOT for Android development status? My team would like to have a general idea of the approximate .NET version when the NAOT for Android removed its experimental tag (so that we can start preparing to work on it).",
                                           "updatedAt":  "2025-03-25T05:25:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kto37",
                                           "createdAt":  "2025-03-29T14:55:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEYti1w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Delsin-Yu",
                                                                               "createdAt":  "2025-03-29T15:20:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "expcat",
                                                                               "createdAt":  "2025-03-29T22:02:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "charlesroddie",
                                                                               "createdAt":  "2025-03-30T23:47:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ram16g",
                                                                               "createdAt":  "2025-04-03T05:34:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zxbmmmmmmmmm",
                                                                               "createdAt":  "2025-04-03T09:39:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexyakunin",
                                                                               "createdAt":  "2025-05-08T08:30:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Jflaurendeau",
                                                                               "createdAt":  "2025-07-01T14:56:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "hez2010",
                                           "body":  "\u003e Are there other tracking issues available for subscriptions to monitor the NAOT for Android development status?\n\nHere is an (incomplete) list you can track that are some runtime prerequisites need to be done before enabling proper coreclr/nativeaot support on Android: https://github.com/dotnet/runtime/issues/112109, https://github.com/dotnet/runtime/issues/113362\n",
                                           "updatedAt":  "2025-03-29T14:55:06Z"
                                       }
                                   ],
                         "totalCount":  66
                     },
        "title":  "NativeAOT status for Android",
        "labels":  [
                       "os-android",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107507",
        "createdAt":  "2024-09-08T10:14:08Z",
        "number":  107507,
        "author":  "SingleAccretion",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-28T21:07:00Z",
        "body":  "Test app:\r\n```cs\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\nstatic void ThrowCatchAndRethrow(bool doCatch)\r\n{\r\n    try\r\n    {\r\n        throw new Exception();\r\n    }\r\n    catch when (doCatch)\r\n    {\r\n        throw;\r\n    }\r\n}\r\n\r\ntry\r\n{\r\n    ThrowCatchAndRethrow(doCatch: true);\r\n}\r\ncatch (Exception e)\r\n{\r\n    Console.WriteLine(\"With rethrow:\\n\" + e.StackTrace);\r\n    Console.WriteLine($\"Offset: 0x{new StackTrace(e).GetFrame(0).GetNativeOffset():X}\");\r\n}\r\n\r\ntry\r\n{\r\n    ThrowCatchAndRethrow(doCatch: false);\r\n}\r\ncatch (Exception e)\r\n{\r\n    Console.WriteLine(\"\\nNo rethrow:\\n\" + e.StackTrace);\r\n    Console.WriteLine($\"Offset: 0x{new StackTrace(e).GetFrame(0).GetNativeOffset():X}\");\r\n}\r\n```\r\nCoreCLR output:\r\n```\r\n\u003e dotnet run -f net9.0\r\nWith rethrow:\r\n   at RyuJitReproduction.Program.ThrowCatchAndRethrow(Boolean doCatch) in C:\\Users\\Accretion\\source\\dotnet\\RyuJit\\RyuJitReproduction\\Program.cs:line 77\r\n   at RyuJitReproduction.Program.Main() in C:\\Users\\Accretion\\source\\dotnet\\RyuJit\\RyuJitReproduction\\Program.cs:line 94\r\nOffset: 0x54\r\n\r\nNo rethrow:\r\n   at RyuJitReproduction.Program.ThrowCatchAndRethrow(Boolean doCatch) in C:\\Users\\Accretion\\source\\dotnet\\RyuJit\\RyuJitReproduction\\Program.cs:line 77\r\n   at RyuJitReproduction.Program.Main() in C:\\Users\\Accretion\\source\\dotnet\\RyuJit\\RyuJitReproduction\\Program.cs:line 104\r\nOffset: 0x54\r\n```\r\nNote how the native offsets are equal, and so are the line numbers.\r\n\r\nNativeAOT output:\r\n```\r\n\u003e dotnet publish -f net9.0 /p:PublishAot=true \u0026\u0026 .\\bin\\Release\\net9.0\\win-x64\\publish\\RyuJitReproduction.exe\r\nWith rethrow:\r\n   at RyuJitReproduction.Program.ThrowCatchAndRethrow(Boolean) + 0x50\r\n   at RyuJitReproduction.Program.Main() + 0x55\r\nOffset: 0x50\r\n\r\nNo rethrow:\r\n   at RyuJitReproduction.Program.ThrowCatchAndRethrow(Boolean) + 0x2d\r\n   at RyuJitReproduction.Program.Main() + 0x5e\r\nOffset: 0x2D\r\n```\r\nNote how _different_ IPs are reported (the IP of the throw is switched to the IP of the rethrow).\r\n\r\nSee also [ThrowStatementDoesNotResetExceptionStackLineOtherMethod](https://github.com/dotnet/runtime/blob/b10f5c9d319512d28127bb5d5cddce32424c1adc/src/libraries/System.Runtime/tests/System.Runtime.Tests/System/ExceptionTests.cs#L142), which suggests that this difference is a NativeAOT bug.\r\n\r\nThis is the reason for the difference: https://github.com/dotnet/runtime/blob/c4792a228ea36792b90f87ddf7fce2477e827822/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Exception.NativeAot.cs#L66-L73",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi0Ydsw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6LRh2z",
                                           "createdAt":  "2024-09-08T10:14:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-08T10:14:33Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Rethrow stack trace reporting difference between NativeAOT and CoreCLR",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107807",
        "createdAt":  "2024-09-13T19:02:35Z",
        "number":  107807,
        "author":  "Quake4",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-19T15:02:11Z",
        "body":  "### Description\r\n\r\nIf the project has multiple targets, then the Aot build does not work.\r\n\r\n### Reproduction Steps\r\n\r\nProject\r\n```\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFrameworks\u003enet8.0-windows;net46\u003c/TargetFrameworks\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\nRun command\r\n`dotnet publish -r win-x64 -f net8.0-windows -c Release -p:PublishAot=true`\r\n\r\n### Expected behavior\r\n\r\nbuild aot\r\n\r\n### Actual behavior\r\nError:\r\n```\r\n  Определение проектов для восстановления...\r\nC:\\Program Files\\dotnet\\sdk\\8.0.400\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(90,5): error NETSDK1207: AOT-компиляция не поддерживается целевой платформой. [d:\\GIT\\Test\\AudioAot\\AudioAot.csproj::TargetFramework=net46]\r\n```\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nChange Project to single Target\r\n\r\n```\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet8.0-windows\u003c/TargetFramework\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\n### Configuration\r\n\r\nnet8\r\nwindows10\r\nx64\r\nno\r\nno\r\n\r\n### Other information\r\n\r\nAnd check main project with reference to project with other `common (netstandard2.0)` targets:\r\n`\u003cTargetFrameworks\u003enetstandard2.0;net46\u003c/TargetFrameworks\u003e`\r\n\r\nIt should also compile correctly.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjL4Y3A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6MHikq",
                                           "createdAt":  "2024-09-14T02:14:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-14T02:14:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MHjBa",
                                           "createdAt":  "2024-09-14T02:18:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "`C:\\Program Files\\dotnet\\sdk\\8.0.400\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.FrameworkReferenceResolution.targe\r\nts(90,5): error NETSDK1207: Ahead-of-time compilation is not supported for the target framework. [C:\\repro\\repro.csproj\r\n::TargetFramework=net46]`",
                                           "updatedAt":  "2024-09-14T02:18:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Mg4CE",
                                           "createdAt":  "2024-09-18T03:38:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "This is currently by-design. The fix is to avoid setting `PublishAot` via `-p` as that will apply to all target frameworks.\n\nInstead, put the following in your project file:\n\n`\u003cPublishAot Condition=\"\u0027$(TargetFramework)\u0027 != \u0027net46\u0027\"\u003etrue\u003c/PublishAot\u003e`\n\nNow AOT will be skipped for net46, where it is not supported.",
                                           "updatedAt":  "2024-09-18T03:38:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Mvhjc",
                                           "createdAt":  "2024-09-19T15:02:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Quake4",
                                           "body":  "Then what is the meaning of the -f key? This is an indication of the target platform. Where is the logic?",
                                           "updatedAt":  "2024-09-19T15:02:08Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[NativeAOT] dotnet publish fails for multi-target projects",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107850",
        "createdAt":  "2024-09-16T07:38:01Z",
        "number":  107850,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7W0BQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "filipnavara",
                                            "createdAt":  "2024-09-16T13:09:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BruceForstall",
                                            "createdAt":  "2024-09-26T20:53:42Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-05-20T07:19:17Z",
        "body":  "We need a GC-stress story for Native AOT. We rely on JIT-based GC stress in CoreCLR, but once in a while we have a stress bug specific to NativeAOT, that could be found a lot earlier if we had GC stress infrastructure that could target NativeAOT directly.\r\n\r\nThere are some remnants of GC stress support in the NativeAOT codebase. The code appears to be old - since before switching to RuyJIT and targets different style of suspension (i.e. completely synchronous with polling and loop hijacking). For the current design that code is not very useful and could be mostly removed.\r\n\r\nExperiments with simpler stress approaches like an extra thread blasting `GC.Collect()` in a loop did not yield convincing results. Varying the rate of collections, however smart, makes it either not stressful enough, too expensive or both. It may be an interesting approach for a quick/adhoc stressing of some scenarios, but as a general-purpose GC stress mechanism it appears to be a dead-end. It is better than nothing, but that is not a very inspiring bar to clear.\r\n\r\nAn approach, similar to CoreCLR, while more complex conceptually, could be more promising. The idea of instrumenting safepoints with illegal instructions and then stress-and-fix them as faults are encountered will be more thorough while also less redundant as one location is tested roughly once.\r\n\r\n**Rough sketch of the idea:**\r\n-\tThere is a moment in time when managed code for a given AOT module is finished loading.  \r\nThat is when native AOT-compiled code is all present in memory, various rehydrations, OS relocations, linker relaxations are all done and the code is ready to start executing.  \r\nThis is the moment when the runtime analyses the loaded module and performs final preparations such as to ensure that boundaries of managed code could be recognized and the code can participate in GC stackwalks.\r\n This is also the time when runtime can instrument the code for GC stress.\r\n\r\n-\tFirst we make a copy of existing code. \r\nCurrently the range of managed code for a given module is contiguous, so that makes it even easier as we can simply make a copy of all the managed code in the module at once. It is possible to enumerate method-by-method, but there is no need.\r\n\r\n-\tThe runtime requires that there is a way to associate an instruction location in managed code to a particular method info. \r\nMechanisms may vary (i.e. simplified `RtlLookupFunctionEntry` on Windows), but being able to associate IP with a method is a requirement, which means native method bodies can be enumerated and associated with method infos and GC infos.\r\n\r\n-\tThe runtime requires that for a given method all GC-safe points can be enumerated. There are several ways for this information to be encoded/inferred, but ultimately runtime must be able to answer a question – “is this location GC-safe if a thread is interrupted there?”.  That is the same question as “is this location that we need to stress?”\r\nFor example in fully-interruptible methods every instruction within interruptible ranges would be stressable.\r\n\r\nThere is a small caveat for ISAs with variable instruction size (i.e. x64). We may need to resort to partial disassembling so that given a safepoint location, we could figure the size of the safepoint instruction. That is also the case in CoreCLR implementation and same disasm support could be used. \r\n\r\n-\tEvery safe point is patched with known illegal/privileged instruction (HLT or similar). \r\nThat is – for the entire module. The cost is proportional to the size of code, just like loading/relocating, so should be feasible, and likely negligible next to the cost of subsequent per safe-point GC stress.\r\nMost platforms require something like `FlushInstructionCache` after all is patched to ensure coherence of instruction updates.\r\n\r\n-\tSome safe points may not be explicitly known (i.e. MinOpts may optimize away safepoint info in some cases), so we may miss these while enumerating all interruptible locations. That is the same as on CoreCLR. \r\nIf there is no way to identify a safe point location, it would not be possible to asynchronously interrupt for GC, for the same reasons. In a way the stress still covers all interruptible points and scenarios.\r\n\r\n-\tWe used to have a requirement that a method metadata for the calee must be obtainable in order to make safepoints at call sites instrumentable. To emulate hijack in the calee upon returning, we’d need to know what calee returns so we could protect the return with a special frame, if necessary. Figuring calees of indirect calls was particularly inconvenient. \r\nWith recent changes in GC info encoding, presence of metadata is no longer a requirement. Relaxing that requirement helps AOT case as well.\r\n\r\n-\tOnce code starts executing, we special-case faults due to illegal instructions in a way similar to what CoreCLR does. Every fault will result in causing or participating in a GC. After that, while runtime is still suspended, copy over the original instruction to not stress the same location repeatedly.\r\nThis may need some disassembling (applied to the backup copy), to figure the size of the instruction on some platforms.\r\n`FlushInstructionCache` or similar applies here too.\r\n\r\n-\tThere are scenarios/features like WaitForPendingFinalizers that are incompatible with stress. We will have to add a way to disable stress temporarily (similarly to CoreCLR it can be a recursive counter of suppressions).\r\n\r\n-\tThere could be some difficulties with managed NoGC code like GC callouts. \r\nPossibly all we need is to ignore faults in NoGC mode, restore the original instruction and resume. It may also possible that the same stress-suppression mechanism as mentioned above is sufficient here too.\r\n\r\n-\tIn theory we can use any build flavor, including release, however for better object validation, it could be preferrable to use special build flags or flavor for the native runtime (release CorLib would be ok though).\r\nIt may still be required to do a special build to support GC stress suppression, if that has too much cost to be present in Release.\r\nWhether a special runtime build is required is something that needs to be found out and decided. It is not a blocker.\r\n\r\n-\tSome platforms may not allow modifying native code after it is loaded (i.e. MacOS?). \r\nIt should be possible to modify on Windows/Linux, both on x64 and arm64. That might be sufficient for most needs.\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjEbHVA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6MM9le",
                                           "createdAt":  "2024-09-16T07:38:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-16T07:38:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MOR_W",
                                           "createdAt":  "2024-09-16T10:34:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "Could this stress be driven by the Jit?\r\n\r\nThe idea would be to insert [something like this](https://github.com/dotnet/runtime/blob/550d381a22796f4d3be3a3cd7ad5417db2cbe80f/src/coreclr/vm/jithelpers.cpp#L3585-L3612) in emit after all safe points (interruptible instructions).\r\n\r\nIf feasible, it would have the advantage of needing fewer modifications to the rest of the system (e. g. all the places that store native code pointers in runtime data structures).",
                                           "updatedAt":  "2024-09-16T10:34:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MPoM2",
                                           "createdAt":  "2024-09-16T13:22:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Could this stress be driven by the Jit?\r\n\u003e \r\n\u003e The idea would be to insert [something like this](https://github.com/dotnet/runtime/blob/550d381a22796f4d3be3a3cd7ad5417db2cbe80f/src/coreclr/vm/jithelpers.cpp#L3585-L3612) in emit after all safe points (interruptible instructions).\r\n\r\nThat may be preferable to support targets like macOS, or even iOS. That said, I kinda like the idea of using `hlt`-like instruction, which could be inserted by JIT too. The reason is that it\u0027s actually closer to the signal processing done in actual GC. Also, any additional complex code emitted in JIT may break scenarios that we would like to test. For example, frameless methods [on ARM64] cannot make calls so they would not be testable by the approach in `JIT_StressGC` which makes the GC call directly.",
                                           "updatedAt":  "2024-09-16T13:25:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MQdt5",
                                           "createdAt":  "2024-09-16T14:42:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODzwqyg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SingleAccretion",
                                                                               "createdAt":  "2024-09-16T16:37:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2024-09-16T16:46:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BruceForstall",
                                                                               "createdAt":  "2024-09-26T20:53:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e Could this stress be driven by the Jit?\r\n\r\n\u003e The idea would be to insert [something like this](https://github.com/dotnet/runtime/blob/550d381a22796f4d3be3a3cd7ad5417db2cbe80f/src/coreclr/vm/jithelpers.cpp#L3585-L3612) in emit after all safe points (interruptible instructions).\r\n\r\n\u003e If feasible, it would have the advantage of needing fewer modifications to the rest of the system (e. g. all the places that store native code pointers in runtime data structures).\r\n\r\nI think it is a very important advantage of HLT instrumentation that it does not require different emit. We would be testing exactly the same code with the same GC info shape. The HLT only ensures that every reachable location will be tested and generally only once. \r\n\r\nJIT-inserted probes could work acceptably when the number of safe points is modest (i.e. call sites, loop back branches), but with fully interruptible code where every instruction is interruptible it could get awkward. \r\nRuntime will need to remember what locations were covered (a hash table I guess, which can get pretty large). That will prevent retesting, but the probes will still keep firing and check the table for roughly every instruction. \r\n\r\nThere are scenarios where JIT needs to insert NOP/BRK in the instruction stream to make sure the same safepoint cannot be reached with different GC info or be in different EH regions. Will adding a bunch of interleaving probe calls make this scenario easier or harder? Are the probes themselves interruptible? (they will have to be in fully interruptible code), so will we have to extend interruptible ranges for the probes at the ends? I\u0027d rather not answer these questions.\r\n\r\nInserting probes at JIT time can be made to work too, but instrumentation after loading feels closer to testing the original code. \r\n\r\nEven for MacOS, if there is a lot of desire, there could be a way. Somehow debugger can put breakpoints after all... These HLT are basically a bunch of single-use breakpoints.",
                                           "updatedAt":  "2024-09-16T14:42:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MRhgp",
                                           "createdAt":  "2024-09-16T16:37:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "\u003e I think it is a very important advantage of HLT instrumentation that it does not require different emit. We would be testing exactly the same code with the same GC info shape.\r\n\r\nAgreed.\r\n\r\n\u003e Runtime will need to remember what locations were covered (a hash table I guess, which can get pretty large). That will prevent retesting, but the probes will still keep firing and check the table for roughly every instruction.\r\n\r\nOne doesn\u0027t need a hash table for this - the Jit can emit an inline check for each probe, or pass the flag address to the helper:\r\n```asm\r\ncmp [location_probed_flag], 1 # One byte per each probe site, generated at compile time\r\nje SKIP\r\ncall RhpStressGc\r\n```\r\nI also agree it is not clear this would be acceptably fast for the fully interruptible case. It is known that it is acceptably fast for the partially interruptible one (we have such a scheme implemented in NativeAOT-LLVM).\r\n\r\nI suppose the code pointers problem is not that hard to solve - you \u0027just\u0027 need to record all of the static relocations (including for code itself, to adjust RIP-relative addresses) and re-apply them as appropriate at runtime when the code is copied.",
                                           "updatedAt":  "2024-09-16T16:37:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MRsdU",
                                           "createdAt":  "2024-09-16T16:59:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "CC: @janvorli @mangod9 ",
                                           "updatedAt":  "2024-09-16T16:59:06Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[NativeAOT][Proposal] GC stress support for NativeAOT",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108036",
        "createdAt":  "2024-09-19T19:05:39Z",
        "number":  108036,
        "author":  "agocke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7J95Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ericstj",
                                            "createdAt":  "2024-09-19T19:24:38Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-02-03T21:15:54Z",
        "body":  "This is a placeholder issue for a broader question of: what info can/should we embed in Native AOT binaries?\r\n\r\nInput assemblies are already available to the ILC compiler. Package/NuGet info is lost and would need to be provided out of band.\r\n\r\nThe format of this info is also an open question.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnOKPrg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6MyLEc",
                                           "createdAt":  "2024-09-19T19:06:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-19T19:06:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6c4o-u",
                                           "createdAt":  "2025-02-03T21:15:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Moving this out -- feedback from other teams has been that bundling an SBOM on the side is an acceptable solution.",
                                           "updatedAt":  "2025-02-03T21:15:52Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Native AOT needs a manifest of input assemblies",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108228",
        "createdAt":  "2024-09-25T08:42:15Z",
        "number":  108228,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-25T08:42:36Z",
        "body":  "Looks like CoreCLR added support for this in #90180. Native AOT implementation wasn\u0027t done, pointing to #72909, but generic virtual methods are orthogonal and the fix is very different (the generic virtual method case is likely much simpler to implement).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjXfgvQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Nd-C9",
                                           "createdAt":  "2024-09-25T08:42:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-25T08:42:35Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Support IDynamicInterfaceCastable with generic methods",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108909",
        "createdAt":  "2024-10-15T23:12:03Z",
        "number":  108909,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9DH6A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LevYas",
                                            "createdAt":  "2024-11-28T18:56:50Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-28T21:08:14Z",
        "body":  "Native AOT hooks into the publish logic using `BeforeTargets=\"ComputeResolvedFilesToPublishList\"`:\nhttps://github.com/dotnet/runtime/blob/44b7ba3cf6af26bcf9f6b2bbd1e75cd1aeaa1331/src/coreclr/nativeaot/BuildIntegration/Microsoft.NETCore.Native.Publish.targets#L20-L22\n\nHowever, this target has some conflict resolution that should be done before ILC runs:\nhttps://github.com/dotnet/sdk/blob/456aa42f693f9ff022c7e5f9f7473e0dc5d3b2f4/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L542-L559\n\nI noticed this in a local build where ILLink was picking a different version of an assembly than ILC (because ILLink runs after `ComputeResolvedFilesToPublishList`:\nhttps://github.com/dotnet/sdk/blob/456aa42f693f9ff022c7e5f9f7473e0dc5d3b2f4/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L453-L456\n\nThe `ilc.rsp` file in my scenario has both:\n```\n-r:C:\\Users\\svbomer\\.nuget\\packages\\microsoft.azure.amqp\\2.6.7\\lib\\netstandard2.0\\Microsoft.Azure.Amqp.dll\n-r:D:\\azure-amqp\\bin\\Release\\Microsoft.Azure.Amqp\\net9.0\\Microsoft.Azure.Amqp.dll\n```\n\nILC seems to use the first dll passed on the command-line.\n\nCompare this with the PublishSelfContained output. During `ComputeResolvedFilesToPublishList`, the conflict is resolved and only the dll from the nuget package is removed, leaving the one from a local build. The local build is passed to ILLink.\n\nUnfortunately I wasn\u0027t able to come up with a simple repro, but the project file looked like this:\n\n```xml\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\n  \u003cPropertyGroup\u003e\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\n    \u003cTargetFramework\u003enet9.0\u003c/TargetFramework\u003e\n    \u003c!-- \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\n    \u003cPublishAot\u003etrue\u003c/PublishAot\u003e --\u003e\n    \u003cPublishSelfContained\u003etrue\u003c/PublishSelfContained\u003e\n    \u003cTrimmerSingleWarn\u003efalse\u003c/TrimmerSingleWarn\u003e\n    \u003cIsTestSupportProject\u003etrue\u003c/IsTestSupportProject\u003e\n    \u003c_TrimmerDumpDependencies\u003etrue\u003c/_TrimmerDumpDependencies\u003e\n  \u003c/PropertyGroup\u003e\n  \u003cItemGroup\u003e\n    \u003cProjectReference Include=\"..\\..\\..\\..\\sdk\\eventhub\\Azure.Messaging.EventHubs.Processor\\src\\Azure.Messaging.EventHubs.Processor.csproj\" /\u003e\n    \u003cProjectReference Include=\"..\\..\\..\\..\\sdk\\eventhub\\Azure.Messaging.EventHubs\\src\\Azure.Messaging.EventHubs.csproj\" /\u003e\n    \u003cProjectReference Include=\"D:\\azure-amqp\\src\\Microsoft.Azure.Amqp.csproj\" /\u003e\n    \u003cTrimmerRootAssembly Include=\"Azure.Messaging.EventHubs.Processor\" /\u003e\n  \u003c/ItemGroup\u003e\n  \u003cItemGroup\u003e\n    \u003c!-- Update this dependency to its latest, which has all the annotations --\u003e\n    \u003cPackageReference Include=\"Microsoft.Extensions.Logging.Configuration\" Version=\"8.0.0\" /\u003e\n  \u003c/ItemGroup\u003e\n\u003c/Project\u003e\n```\nBinlogs available upon request.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsO0Wuw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6P_oTT",
                                           "createdAt":  "2024-10-16T06:14:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD2l9gw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2024-10-16T17:27:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "We should ideally redo how the compiler is hooked up into publish in general. The way it\u0027s hooked up right now was inherited from CoreRT and never touched since. SDK is now allowed to know about PublishAot and we should use same mechanisms as PublishTrimmed and PublishSingleFile use (that the SDK knows about and special cases). It would fix other problems, like https://github.com/dotnet/sdk/issues/40488.",
                                           "updatedAt":  "2024-10-16T06:14:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UEX_y",
                                           "createdAt":  "2024-11-18T21:32:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7b-qA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2024-11-18T21:54:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "agocke",
                                           "body":  "@sbomer Could you put this on your backlog? I think it\u0027s time to cleanup publishing for AOT and get this into a good state.",
                                           "updatedAt":  "2024-11-18T21:32:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UGfNs",
                                           "createdAt":  "2024-11-19T05:17:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7lTyQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2024-11-19T17:36:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I think it\u0027s time to cleanup publishing for AOT and get this into a good state.\n\nFor a servicing fix that addresses https://github.com/dotnet/runtime/issues/109872, we may want to do a targeted change. E.g. take file versions into account in https://github.com/dotnet/runtime/blob/main/src/coreclr/tools/aot/ILCompiler.Build.Tasks/ComputeManagedAssembliesToCompileToNative.cs#L154 and let the file with higher version win.",
                                           "updatedAt":  "2024-11-19T05:22:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZjILU",
                                           "createdAt":  "2025-01-07T20:01:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "There are at least five places that can potentially do conflict resolution in a native AOT publish:\n- GenerateBuildDependencyFile\n- _HandlePackageFileConflicts\n- _HandlePackageFileConflictsForPublish\n- ILC\u0027s conflict resolution (ComputeManagedAssembliesToCompileToNative)\n- ResolveOverlappingItemGroupConflicts (during ComputeResolvedFilesToPublishList)\n\nThe goal is for ILC\u0027s special handling to go away and to use the built-in conflict resolution. There are multiple issues here:\n1. ILC hooks into publish in a way that bypasses ComputeResolvedFilesToPublishList (this issue). For this we need to change some of the build integration logic.\n2. ILC doesn\u0027t get the built-in conflict resolution for runtime packs (IIRC this is done in GenerateBuildDependencyFile). For this we need to switch to using runtime packs. This is already supported, but we might want to make it the default.\n",
                                           "updatedAt":  "2025-01-07T20:01:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ful8D",
                                           "createdAt":  "2025-02-24T22:19:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jamiewinder",
                                           "body":  "Sorry to ask, but where are things with this issue? All the issues raised around this are closed, and while there has since been an SDK update I don\u0027t think is yet resolved?\n\nAt the moment using AOT at all feels very precarious since these v9 dependencies can creep in as transitive dependencies very easily (as occurred with OpenTelemetry with 1.10.0 which first gave me the issue).\n\nWould be great to get an update.",
                                           "updatedAt":  "2025-02-25T15:27:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fvQUB",
                                           "createdAt":  "2025-02-24T23:51:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This issue tracks cleaning up how native AOT publish is hooked up.\n\nThe NAOT dependency conflict resolution bug was tracked by https://github.com/dotnet/runtime/issues/109872, and the fix was back ported to both .NET 8 and .NET 9 SDKs: https://github.com/dotnet/runtime/pull/110059 and https://github.com/dotnet/runtime/pull/110058 . If you still see a issues with NAOT dependency conflict resolution in the latest .NET SDK updates, please open a new issue on it.",
                                           "updatedAt":  "2025-02-25T15:28:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6f0B2i",
                                           "createdAt":  "2025-02-25T09:06:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jamiewinder",
                                           "body":  "@jkotas Thanks. Though unless I\u0027m doing something wrong, the same scenario I reported in #109872 is still present using the latest version of the SDK (v8.0.406). I\u0027ve included the following global.json to ensure this version is being used:\n```json\n{\n  \"sdk\": {\n    \"version\": \"8.0.406\"\n  }\n}\n```\nBut I still see a `MissingMethodException`. I\u0027ll open a new issue.\n\nEDIT: Issue opened here with more details and a (very specific) workaround: #112899",
                                           "updatedAt":  "2025-02-25T15:28:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6w7Ra7",
                                           "createdAt":  "2025-06-12T22:30:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "https://github.com/dotnet/runtime/issues/116595#event-18122426373 has a simple repro. Looks like it\u0027s time for me to revive https://github.com/dotnet/runtime/pull/111514 and investigate the ios/wasm failures.",
                                           "updatedAt":  "2025-06-12T22:30:42Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "ILC should run after ComputeResolvedFilesToPublishList",
        "labels":  [
                       "in-pr",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108978",
        "createdAt":  "2024-10-17T14:19:39Z",
        "number":  108978,
        "author":  "jonathanpeppers",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-31T16:32:34Z",
        "body":  "### Description\n\nFor the property:\n\n```csharp\n[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)]\nType? IHybridWebView.InvokeJavaScriptType { get; set; }\n```\n\nWe got the trimmer warning:\n```csharp\nILC: IL2114: Microsoft.Maui.Controls.HybridWebView.\u003cMicrosoft.Maui.IHybridWebView.InvokeJavaScriptType\u003ek__BackingField: \u0027DynamicallyAccessedMembersAttribute\u0027 on \u0027Microsoft.Maui.Controls.HybridWebView\u0027 or one of its base types\n```\n\nThis was inside a .NET MAUI project on iOS.\n\nWe think something like this will workaround this case, but CI is ongoing:\n\n* https://github.com/dotnet/maui/pull/25077/commits/d8552206eb4a7f39bea3ac1c3d71ce9373e88338\n\n### Reproduction Steps\n\n* `dotnet new maui`\n\n* Root everything:\n\n```xml\n\u003cItemGroup\u003e\n\t\u003cPackageReference Include=\"Microsoft.Maui.Controls.Foldable\" Version=\"$(MauiVersion)\" /\u003e\n\t\u003cPackageReference Include=\"Microsoft.Maui.Controls.Maps\" Version=\"$(MauiVersion)\" /\u003e\n\t\u003cPackageReference Include=\"Microsoft.Maui.Graphics.Skia\" Version=\"$(MauiVersion)\" /\u003e\n\u003c/ItemGroup\u003e\n\u003cItemGroup\u003e\n\t\u003cTrimmerRootAssembly Include=\"Microsoft.Maui\" RootMode=\"All\" /\u003e\n\t\u003cTrimmerRootAssembly Include=\"Microsoft.Maui.Controls\" RootMode=\"All\" /\u003e\n\t\u003cTrimmerRootAssembly Include=\"Microsoft.Maui.Controls.Foldable\" RootMode=\"All\" /\u003e\n\t\u003cTrimmerRootAssembly Include=\"Microsoft.Maui.Controls.Maps\" RootMode=\"All\" /\u003e\n\t\u003cTrimmerRootAssembly Include=\"Microsoft.Maui.Controls.Xaml\" RootMode=\"All\" /\u003e\n\t\u003cTrimmerRootAssembly Include=\"Microsoft.Maui.Essentials\" RootMode=\"All\" /\u003e\n\t\u003cTrimmerRootAssembly Include=\"Microsoft.Maui.Graphics\" RootMode=\"All\" /\u003e\n\t\u003cTrimmerRootAssembly Include=\"Microsoft.Maui.Graphics.Skia\" RootMode=\"All\" /\u003e\n\t\u003cTrimmerRootAssembly Include=\"Microsoft.Maui.Maps\" RootMode=\"All\" /\u003e\n\u003c/ItemGroup\u003e\n```\n\n* Publish for NativeAOT: `dotnet publish -c Release -p:PublishAot=true -f net9.0-ios`\n\n### Expected behavior\n\nWe would not get trimmer warnings for `k__BackingField`.\n\n### Actual behavior\n\nWe get trimmer warnings for `k__BackingField`.\n\n### Regression?\n\nNot sure\n\n### Known Workarounds\n\nI assume we can do:\n```csharp\n[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)]\nprivate Type? _invokeJavaScriptType;\n\n[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)]\nType? IHybridWebView.InvokeJavaScriptType\n{\n\tget =\u003e _invokeJavaScriptType;\n\tset =\u003e _invokeJavaScriptType = value;\n}\n```\n\n### Configuration\n\n```\n\u003e dotnet --version\n9.0.100-rc.2.24426.11\n```\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkEBj4w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6QOYvY",
                                           "createdAt":  "2024-10-17T14:20:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-17T14:20:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QP6xS",
                                           "createdAt":  "2024-10-17T17:20:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "The warning is due to `DynamicallyAccessedMembers` on this base class of the property containing type: https://github.com/dotnet/maui/blob/d8552206eb4a7f39bea3ac1c3d71ce9373e88338/src/Controls/src/Core/VisualElement/VisualElement_StyleSheet.cs#L12, which has `NonPublicFields`. This annotation says that non-public fields of any derived types might be reflected over, and the warning guards against violating the annotations on the field via reflection.\n\nHere\u0027s an example of what the warning guards against:\n```csharp\nusing System.Reflection;\nusing System.Diagnostics.CodeAnalysis;\n\nvar t = new C().GetType();\nAssignField(t, typeof(D));\nif (C.P.GetMethods().Length == 0) {\n    throw new Exception(\"No methods\"); // Will throw in AOT only\n}\n\nstatic void AssignField([DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.NonPublicFields)] Type t, Type value) {\n    foreach (var field in t.GetFields(BindingFlags.NonPublic | BindingFlags.Static)) {\n        field.SetValue(null, value);\n    }\n}\n\n[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.NonPublicFields)]\nclass C {\n    [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)]\n    public static Type? P { get; set; }\n}\n\nclass D {\n    public static void M() {}\n}\n```\n\nChanging it to an explicitly implemented property won\u0027t help, it\u0027ll just move the warning to the explicit field.\n\nA more precise analysis could potentially get rid of these warnings and instead warn at the `GetType` or `AssignField` callsite. But the current semantics basically make it illegal to put `DynamicallyAccessedMembers` annotations on fields when a base type has `DynamicallyAccessedMembers.(Non)PublicFields`. In practice it\u0027s probably OK to suppress this if you\u0027re reasonably sure that nobody will use reflection to violate the field annotation.",
                                           "updatedAt":  "2024-10-17T17:50:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QQGPj",
                                           "createdAt":  "2024-10-17T17:46:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "So, I think the issue here is that the warning message could be improved. If the property was mentioned instead of `k__BackingField`, I wouldn\u0027t have thought it was a bug.",
                                           "updatedAt":  "2024-10-17T17:46:43Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  ".NET 9, ILC reports trimmer warnings for `k__BackingField` for auto-properties",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109276",
        "createdAt":  "2024-10-28T10:04:12Z",
        "number":  109276,
        "author":  "shushanhf",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-03T14:20:14Z",
        "body":  "### Description\n\nhttps://github.com/dotnet/runtime/pull/108364#issuecomment-2437185184\n\nI have some question about the CAS-128bit when updating and loading the 128-bit data.\nhttps://github.com/dotnet/runtime/blob/5d09a8f94c72ca4ef0a9c79eb9c58d06198e3ba9/src/coreclr/nativeaot/Runtime/amd64/StubDispatch.S#L30-L32\n\nAre these codes related with the CAS-128-bit data?\nIf yes, is there some problem if the 128-bit data are loaded by two instructions rather than a 128-bit load instruction? When finished the first 64-bit pointer loading, the CAS-128-bit update the whole 128-bit date, then the second loading will get a new value but now the old value.\n\n### Reproduction Steps\n\nWhen finished the first 64-bit pointer loading, the CAS-128-bit update the whole 128-bit date, then the second loading will get a new value but now the old value.\n\n### Expected behavior\n\nshould load the 128-bit date by one instruction atomically.\n\n### Actual behavior\n\nBut now these code will hit the wrong value at the very low possibility.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkjyZag==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6RgKLD",
                                           "createdAt":  "2024-10-28T10:04:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-28T10:04:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RgeUC",
                                           "createdAt":  "2024-10-28T10:35:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-28T10:35:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RikIZ",
                                           "createdAt":  "2024-10-28T14:31:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Is this question about how it\u0027s currently handled on x64 (without cmpxchg16b or atomic guarantees etc.), not loongarch itself, right?",
                                           "updatedAt":  "2024-10-28T14:31:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RnIJe",
                                           "createdAt":  "2024-10-29T00:59:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD4cYCQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2024-10-29T01:12:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "shushanhf",
                                           "body":  "\u003e Is this question about how it\u0027s currently handled on x64 (without cmpxchg16b or atomic guarantees etc.), \n\nNo, for ARM64 and AMD64, there is potential risk when loading the 128-bit of interface dispatch cache entry and indirection cell\u0027s stub/cache, it will get a wrong value .\n\n\u003e not loongarch itself, right?\n\nyes, for all the targets.",
                                           "updatedAt":  "2024-10-29T01:01:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Rodce",
                                           "createdAt":  "2024-10-29T06:14:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I think the only possible transition here is from null to a non-null value (we\u0027ll not update a non-null value to anything else):\n\nhttps://github.com/dotnet/runtime/blob/cca022b6212f33adc982630ab91469882250256c/src/coreclr/nativeaot/Runtime/CachedInterfaceDispatch.cpp#L69-L81\n\nNow, I\u0027m not an expert on memory models, but if the first 64-bit read saw a non-null value from the CAS-128, the second 64-bit read should also see the new value (and not the null).",
                                           "updatedAt":  "2024-10-29T06:14:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RopBC",
                                           "createdAt":  "2024-10-29T06:51:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shushanhf",
                                           "body":  "```\n|                 Thread-1: reading the 128-bit data.                         |    Thread-2: updating 128-bit data by CAS-128.\n| clock N:     get the first 64-bit data.                                     |    After Thead-1 getted the first 64-bit data,\n| clock N+1:                                                                  |    the Thread-2  updated the whole 128-bit data by CAS-128. \n| clock N+2:  when the Thread-1 reading the second 64-bit\n|            it will get the new value.\n|            The Thread-1 will hit a wrong value that not expected value.\n```\n\nBecause reading the 128-bit data is not implemented by atomic, it might get two different version 64-bit data while the two 64-bit data are not paired.",
                                           "updatedAt":  "2024-10-29T07:00:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RoskT",
                                           "createdAt":  "2024-10-29T07:02:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Correct me if I\u0027m wrong, but since the CAS-128 is only used to flip both values from zero to non-zero, Thread-1 will either read 0 in the first 64-bit read (in which case it will not do the second read) or read the value that CAS-128 placed there and the second read will read a value placed there by the same CAS-128\n\nWe should never see torn state because CAS-128 only flips from zero to non-zero per the above comment (\"`cache entry updates  (fFailOnNonNull == true) require that the existing values in the location are both NULL`\"). It never flips non-zero value to a different non-zero value.",
                                           "updatedAt":  "2024-10-29T07:02:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RoyjU",
                                           "createdAt":  "2024-10-29T07:10:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shushanhf",
                                           "body":  "\u003e Correct me if I\u0027m wrong, but since the CAS-128 is only used to flip both values from zero to non-zero, Thread-1 will either read 0 in the first 64-bit read (in which case it will not do the second read) or read the value that CAS-128 placed there and the second read will read a value placed there by the same CAS-128\n\u003e \n\u003e We should never see torn state because CAS-128 only flips from zero to non-zero per the above comment (\"`cache entry updates (fFailOnNonNull == true) require that the existing values in the location are both NULL`\"). It never flips non-zero value to a different non-zero value.\n\nI just focus on the instructions by the ISA\u0027s point and I\u0027m not familiar with the detail usage of the `UpdatePointerPairAtomically`.\nWhat you means that the `UpdatePointerPairAtomically` will be called by each interface dispatch cache entry only one time, is it right ?",
                                           "updatedAt":  "2024-10-29T07:10:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ro7Oz",
                                           "createdAt":  "2024-10-29T07:22:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e \u003e Correct me if I\u0027m wrong, but since the CAS-128 is only used to flip both values from zero to non-zero, Thread-1 will either read 0 in the first 64-bit read (in which case it will not do the second read) or read the value that CAS-128 placed there and the second read will read a value placed there by the same CAS-128\n\u003e \u003e We should never see torn state because CAS-128 only flips from zero to non-zero per the above comment (\"`cache entry updates (fFailOnNonNull == true) require that the existing values in the location are both NULL`\"). It never flips non-zero value to a different non-zero value.\n\u003e \n\u003e I just focus on the instructions by the ISA\u0027s point and I\u0027m not familiar with the detail usage of the `UpdatePointerPairAtomically`. What you means that the `UpdatePointerPairAtomically` will be called by each interface dispatch cache entry only one time, is it right ?\n\nYes, I believe the assembly code you have in top-post only consumes data that was updated with `UpdatePointerPairAtomically` where fFailOnNonNull == true. This use of `UpdatePointerPairAtomically` could likely be replaced by two 64-bit writes (first write the second value, then the first one). It probably doesn\u0027t _need_ to be a 128-bit CAS.\n\nHowever the other use of `UpdatePointerPairAtomically` with `fFailOnNonNull == false` looks like it really needs a 128-bit CAS since that one reads both values unconditionally and we do allow arbitary overwrites. The output of that is not read by the above assembly code. It\u0027s part of cached interface dispatch logic.",
                                           "updatedAt":  "2024-10-29T07:22:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RpAFQ",
                                           "createdAt":  "2024-10-29T07:26:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "heiher",
                                           "body":  "\u003e Correct me if I\u0027m wrong, but since the CAS-128 is only used to flip both values from zero to non-zero, Thread-1 will either read 0 in the first 64-bit read (in which case it will not do the second read) or read the value that CAS-128 placed there and the second read will read a value placed there by the same CAS-128\n\u003e \n\u003e We should never see torn state because CAS-128 only flips from zero to non-zero per the above comment (\"`cache entry updates (fFailOnNonNull == true) require that the existing values in the location are both NULL`\"). It never flips non-zero value to a different non-zero value.\n\nThe loads can be reordered after loads on most [weak memory model architectures](https://en.wikipedia.org/wiki/Memory_ordering#In_symmetric_multiprocessing_(SMP)_microprocessor_systems). It is possible for the first 64 bits to be loaded with a non-zero value while the second 64 bits are loaded with a zero value, unless there is an acquire semantic memory barrier between the two loads.",
                                           "updatedAt":  "2024-10-29T07:26:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RpDxo",
                                           "createdAt":  "2024-10-29T07:35:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shushanhf",
                                           "body":  "\u003e \u003e \u003e Correct me if I\u0027m wrong, but since the CAS-128 is only used to flip both values from zero to non-zero, Thread-1 will either read 0 in the first 64-bit read (in which case it will not do the second read) or read the value that CAS-128 placed there and the second read will read a value placed there by the same CAS-128\n\u003e \u003e \u003e We should never see torn state because CAS-128 only flips from zero to non-zero per the above comment (\"`cache entry updates (fFailOnNonNull == true) require that the existing values in the location are both NULL`\"). It never flips non-zero value to a different non-zero value.\n\u003e \u003e \n\u003e \u003e \n\u003e \u003e I just focus on the instructions by the ISA\u0027s point and I\u0027m not familiar with the detail usage of the `UpdatePointerPairAtomically`. What you means that the `UpdatePointerPairAtomically` will be called by each interface dispatch cache entry only one time, is it right ?\n\u003e \n\u003e Yes, I believe the assembly code you have in top-post only consumes data that was updated with `UpdatePointerPairAtomically` where fFailOnNonNull == true. This use of `UpdatePointerPairAtomically` could likely be replaced by two 64-bit writes (first write the second value, then the first one). It probably doesn\u0027t _need_ to be a 128-bit CAS.\n\nIs it here that the `fFailOnNonNull` is passed by true,\nhttps://github.com/dotnet/runtime/blob/cca022b6212f33adc982630ab91469882250256c/src/coreclr/nativeaot/Runtime/CachedInterfaceDispatch.cpp#L144\n\nSo the Line:92-Line96 below will not excuted. here it probably doesn\u0027t _need_ to be a 128-bit CAS, is it right ?\nhttps://github.com/dotnet/runtime/blob/cca022b6212f33adc982630ab91469882250256c/src/coreclr/nativeaot/Runtime/CachedInterfaceDispatch.cpp#L91-L96\n\n\u003e However the other use of `UpdatePointerPairAtomically` with `fFailOnNonNull == false` looks like it really needs a 128-bit CAS since that one reads both values unconditionally and we do allow arbitary overwrites. The output of that is not read by the above assembly code. It\u0027s part of cached interface dispatch logic.\n\nBut here https://github.com/dotnet/runtime/blob/cca022b6212f33adc982630ab91469882250256c/src/coreclr/nativeaot/Runtime/CachedInterfaceDispatch.cpp#L159\nthe `fFailOnNonNull` is passed by false, this case will be different with the above case and this case might hit  getting two different version 64-bit data while the two 64-bit data are not paired, is is right ?",
                                           "updatedAt":  "2024-10-29T07:35:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SPJlq",
                                           "createdAt":  "2024-11-03T14:20:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "heiher",
                                           "body":  "Here’s a test case reproduced on Apple M-series and Huawei Kunpeng920 CPUs. It verifies that on architectures with weak memory models allowing load and load reordering, atomic stores on one side to two parts of the same cache line cannot guarantee that non-atomic load reads from the same version of value.\n\n```c\n/*\n * memory-order-d64-same-cacheline.c\n * Dual 64-bit memory sequential test case in the same cache line.\n * gcc -O3 -o memory-order-d64-same-cacheline memory-order-d64-same-cacheline.c\n */\n\n#include \u003cstdio.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cpthread.h\u003e\n\nstatic uint64_t d64[2] __attribute__((aligned(16)));\n\nstatic void *\nwriter_handler (void *data)\n{\n    uint64_t i;\n    __int128_t curr = *(__int128_t *) d64;\n\n    for (i = 2; i \u003c (UINT64_MAX - 10); i += 2) {\n        __int128_t next = ((__int128_t) i + 1) \u003c\u003c 64 | i;\n        __sync_val_compare_and_swap ((volatile __int128_t *) d64, curr, next);\n        curr = next;\n    }\n\n    printf (\"SUCC\\n\");\n    exit (0);\n\n    return NULL;\n}\n\nint\nmain (int argc, char *argv[])\n{\n    pthread_t writer;\n    int res = 0;\n\n    *(volatile uint64_t *) \u0026d64[1] = 1;\n    *(volatile uint64_t *) \u0026d64[0] = 0;\n\n    res |= pthread_create (\u0026writer, NULL, writer_handler, NULL);\n    if (res \u003c 0)\n        return -1;\n\n    for (;;) {\n        uint64_t lo, hi;\n\n        lo = *(volatile uint64_t *) \u0026d64[0];\n        hi = *(volatile uint64_t *) \u0026d64[1];\n\n        if (lo \u003e= hi) {\n            printf (\"ASSERATION FAILED: %llu \u003c %llu\\n\", lo, hi);\n            return -2;\n        }\n    }\n\n    return 0;\n}\n```\n\nSpecifically, in each iteration, the writer performs atomic stores of two 64-bit values into the same cache line, with each new version always greater than the previous one.\n\n| Value version | High 64 bits | Low 64 bits |\n| ------------------ | ---------------- | --------------- |\n| 0                     | 1                  | 0                 |\n| 1                     | 3                  | 2                 |\n| 2                     | 5                  | 4                 |\n| 3                     | 7                  | 6                 |\n| 4                     | 9                  | 8                 |\n| ...                    | ...                 | ...                |\n| N                    | N * 2 + 1      | N * 2           |\n\nThe reader first loads the lower 64 bits and then the upper 64 bits. If the lower 64-bit value is greater than or equal to the upper 64-bit value, it indicates that reordering has occurred. The branch instruction lacks `acquire` semantics, so this is similarly applicable to the `(NULL, NULL)` -\u003e `(!NULL, !NULL)` scenario in the current context.\n\n```\nInitial value: (NULL, NULL)\n\nWriter                | Reader\n(Non-NULL, Non-NULL)  |\n                      | (Non-NULL) // Low 64 bits\n                      | (NULL)     // High 64 bits\n```",
                                           "updatedAt":  "2024-11-03T14:20:13Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "The 128-bit of interface dispatch cache entry and indirection cell\u0027s stub/cache mismatch the PalInterlockedCompareExchange128\u0027s atomically requirements",
        "labels":  [
                       "area-NativeAOT-coreclr",
                       "arch-loongarch64"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110293",
        "createdAt":  "2024-12-01T15:21:40Z",
        "number":  110293,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-13T08:12:49Z",
        "body":  "Illegal use of hardware intrinsics does not throw catchable PlatformNotSupportedExceptions in NativeAOT. Instead, NativeAOT failfasts in this situation for performance (and security) reasons.\n\nTests that expect catchable PlatformNotSupportedExceptions to be thrown for invalid use of hardware intrinsics should be updated to account for this behavior:\n\n- `ThrowsPlatformNotSupportedExceptionForIllegalInstruction` to PlatformDetection.cs\n- Condition tests that expect catchable PlatformNotSupportedException to be thrown for illegal instructions on this property\n\nSee https://github.com/dotnet/runtime/pull/110250 for more context.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlZi3uA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6VmLe4",
                                           "createdAt":  "2024-12-01T15:22:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-01T15:22:02Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[NativeAOT] Disable unsupported scenario tests in hardware intrinsics test template",
        "labels":  [
                       "disabled-test",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110683",
        "createdAt":  "2024-12-13T09:07:48Z",
        "number":  110683,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-28T21:37:17Z",
        "body":  "Hitting this assert in the repro from #110607 sometimes.\n\nThe stack is (line numbers are for release/9.0)\n\n```\n \tWinUIAppTest.exe!Assert(const char * expr, const char * file, unsigned int line_num, const char * message) Line 35\tC++\n\t[Inline Frame] WinUIAppTest.exe!Thread::InlineTryFastReversePInvoke(ReversePInvokeFrame *) Line 130\tC++\n \tWinUIAppTest.exe!RhpReversePInvoke(ReversePInvokeFrame * pFrame) Line 1317\tC++\n \tWinUIAppTest.exe!S_P_CoreLib_System_Runtime_InteropServices_TrackerObjectManager__GCStopCollection() Line 173\tUnknown\n \tWinUIAppTest.exe!RestrictedCallouts::InvokeGcCallouts(GcRestrictedCalloutKind eKind, unsigned int uiCondemnedGeneration) Line 195\tC++\n \tWinUIAppTest.exe!GCToEEInterface::GcDone(int condemned) Line 161\tC++\n \tWinUIAppTest.exe!WKS::gc_heap::do_post_gc() Line 50870\tC++\n \tWinUIAppTest.exe!WKS::gc_heap::bgc_thread_function() Line 39957\tC++\n \tWinUIAppTest.exe!WKS::gc_heap::bgc_thread_stub(void * arg) Line 37744\tC++\n```\n\nHopefully this is not a product issue, just an assert that needs to be tweaked.\n\nWe set DoNotTriggerGC here:\n\nhttps://github.com/dotnet/runtime/blob/1622f514684d94a521bfb41c88a27079ad943ee7/src/coreclr/nativeaot/Runtime/RestrictedCallouts.cpp#L180-L182\n\nAnd then we go into the assert path here:\n\nhttps://github.com/dotnet/runtime/blob/1622f514684d94a521bfb41c88a27079ad943ee7/src/coreclr/nativeaot/Runtime/thread.inl#L194-L205\n\nCc @VSadov for opinion",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOl44iqg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Xc6EH",
                                           "createdAt":  "2024-12-13T09:08:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-13T09:08:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Xih4x",
                                           "createdAt":  "2024-12-13T21:28:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "GC callouts are not supposed to happen on background threads. This does not seem right. \n",
                                           "updatedAt":  "2024-12-13T21:28:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XjiKq",
                                           "createdAt":  "2024-12-14T02:24:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e GC callouts are not supposed to happen on background threads.\n\nIt looks like now they can. (as of #90283).\n\nBefore that `IsDoNotTriggerGcSet` was used in these cases:\n* Transient use by exception handling to go through code that is not GC-safe, but that scenario is relatively trivial and does not involve PInvokes or reverse PInvokes. \n* Another use was by GC threads while EE is stopped. In this case we could do reverse pinvokes and returns from them. It was special-cased and transitions are basically noops - ignoring the coop mode of the thread and not checking if suspension is requested. All that is meaningless anyways - when EE is stopped and blocking GC is already running. \n\nNow we have a scenario when background threads call `[UnmanagedCallersOnly]` methods from GC callouts. \nSince the scenario is limited to BGC threads and specific callouts, it may still be ok to do, depending on what those callouts do. - All the rules of what GC callouts cannot do would still apply, but otherwise we could ignore the coop state of a `IsDoNotTriggerGcSet` thread when doing a reverse PInvoke.  \n\nThe GC callouts is a relatively fragile pattern, and it is hard to think of all the consequences, but I think we may be able to get away with it in this case.  \nAssuming we do not see any other troubles besides this assert, I think relaxing the assert to ` ASSERT(IsGcSpecial());` , just to be sure this is not happening with some random thread, could be a sufficient \"fix\".\n\n\n",
                                           "updatedAt":  "2024-12-14T02:33:29Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ASSERT(ThreadStore::IsTrapThreadsRequested()) in Thread::InlineTryFastReversePInvoke",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110684",
        "createdAt":  "2024-12-13T09:10:07Z",
        "number":  110684,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-17T21:07:45Z",
        "body":  "TrackerObjectManager is not covered with any tests on native AOT. One test in the interop tree that looks it might exercise it (Interop\\COM\\ComWrappers\\GlobalInstance) is disabled on native AOT because it seems to require built-in COM to operate.\n\nLooks like we added this without tests in #90283\n\nCc @manodasanW @AaronRobinsonMSFT ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Test hole for TrackerObjectManager",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111191",
        "createdAt":  "2025-01-08T08:45:55Z",
        "number":  111191,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-08T21:44:53Z",
        "body":  "Implement the corner case where interface method implemented on a struct is getting constrained-called and the target of the constrained call is compile-time time ambiguous between a method on the struct and a default-implemented method. CoreCLR throws an NotSupportedException, Mono will box when necessary. Implement whatever is more convenient.\n\nSee disabled tests referencing this issue.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmZtwlg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Zm3CW",
                                           "createdAt":  "2025-01-08T08:46:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-08T08:46:22Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Implemement default interface methods constrained call corner case",
        "labels":  [
                       "disabled-test",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111256",
        "createdAt":  "2025-01-09T22:35:45Z",
        "number":  111256,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-B1BA==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "nagya",
                                            "createdAt":  "2025-01-09T22:39:51Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Sergio0694",
                                            "createdAt":  "2025-01-10T09:18:21Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-03-03T01:11:23Z",
        "body":  "In the below program we should know that something typed as `ITestOutput` won\u0027t ever be non-null. We should be able to optimize out the null check branch in `Foo`.\n\n```csharp\nusing System;\nusing System.Runtime.CompilerServices;\n\nclass Program\n{\n    [MethodImpl(MethodImplOptions.NoInlining)]\n    static void Foo(ITestOutput? to = null)\n    {\n        to?.Log(\"hello\");\n    }\n\n    static void Main() =\u003e Foo(null);\n}\n\ninterface ITestOutput\n{\n    void Log(string s);\n}\n```\n\nCc @nagya @jevansaks @EgorBo ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmqgmxQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Z3LuF",
                                           "createdAt":  "2025-01-09T22:40:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-09T22:40:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6anW-G",
                                           "createdAt":  "2025-01-15T21:49:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "@MichalStrehovsky hm.. how do we check that? I see we have\n```c\nif (info.compCompHnd-\u003egetExactClasses(cls, 0, nullptr) == 0)\n```\nto check if a type can exist, but it returns `-1` for this case, because the interface itself exists, just has no implementators\n\n",
                                           "updatedAt":  "2025-01-15T22:16:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aqCbF",
                                           "createdAt":  "2025-01-16T07:25:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOECvXeg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Suchiman",
                                                                               "createdAt":  "2025-01-16T12:10:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e [@MichalStrehovsky](https://github.com/MichalStrehovsky) hm.. how do we check that? I see we have\n\nYeah, in the top-post repro case the interface method call brings the interface type to life. We have some conservative assumptions within the whole program view due to `IDynamicInterfaceCastable`. I\u0027m looking if I can narrow those assumptions down somehow. What should give you 0 instead of -1 _today_ is:\n\n```csharp\n    [MethodImpl(MethodImplOptions.NoInlining)]\n    static void Foo(ITestOutput? to = null)\n    {\n        if (to != null)\n            Console.WriteLine(\"I\u0027m unreachable\");\n    }\n```\n\n(i.e. do not call any methods on the interface, do not cast anything to the interface.)",
                                           "updatedAt":  "2025-01-16T07:25:03Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "See if we can optimize blocks under null checks",
        "labels":  [
                       "in-pr",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111991",
        "createdAt":  "2025-01-30T07:28:06Z",
        "number":  111991,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-30T07:28:35Z",
        "body":  "The managed type system doesn\u0027t seem to handle various corner case behaviors around `.override` in IL. See tests blocked on this issue.\n\nPutting this under native AOT, but it\u0027s in the shared managed type system.\n\nPossibly related to the following TODO:\n\nhttps://github.com/dotnet/runtime/blob/7693b6d0202281dc38dcfb9562e9064fcd13bc61/src/coreclr/tools/Common/TypeSystem/Common/MetadataVirtualMethodAlgorithm.cs#L468-L470",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnGMUnQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6cYxSd",
                                           "createdAt":  "2025-01-30T07:28:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-30T07:28:34Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Handling IL-level .override corner cases",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112289",
        "createdAt":  "2025-02-07T21:54:35Z",
        "number":  112289,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-28T16:51:46Z",
        "body":  "Failed in https://dev.azure.com/dnceng-public/public/_build/results?buildId=944344\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25077004\u0026paneView=debug (NativeAOT_Pri0_CET_CFG run on windows.11.amd64.cet.open), no crash dump unfortunately:\n```\n0:26:16.702 Running test: JIT\\Performance\\CodeQuality\\BenchmarksGame\\k-nucleotide\\k-nucleotide-9\\k-nucleotide-9.dll\nSystem.AggregateException: One or more errors occurred. (Index was outside the bounds of the array.)\n ---\u003e System.IndexOutOfRangeException: Index was outside the bounds of the array.\n   at BenchmarksGame.KNucleotide_9.writeFrequencies(Dictionary`2 freq, Int32 fragmentLength, Int32[] expected, Boolean\u0026 ok) + 0x38b\n   at System.Threading.Tasks.Task`1.InnerInvoke() + 0x99\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread, ExecutionContext, ContextCallback, Object) + 0xb5\n--- End of stack trace from previous location ---\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread, ExecutionContext, ContextCallback, Object) + 0xeb\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task\u0026, Thread) + 0x6a\n   --- End of inner exception stack trace ---\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean) + 0x52\n   at System.Threading.Tasks.Task`1.GetResultCore(Boolean) + 0x4f\n   at BenchmarksGame.KNucleotide_9.Bench(TestHarnessHelpers helpers, Boolean verbose) + 0x3be\n   at BenchmarksGame.KNucleotide_9.TestEntryPoint() + 0x32\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor38|0_39(StreamWriter tempLogSw, StreamWriter statsCsvSw, Program.\u003c\u003ec__DisplayClass0_0\u0026) + 0x12b\n10:26:16.750 Failed test: JIT\\Performance\\CodeQuality\\BenchmarksGame\\k-nucleotide\\k-nucleotide-9\\k-nucleotide-9.dll\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnZtTQQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6dm0rd",
                                           "createdAt":  "2025-02-07T21:55:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-07T21:55:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dm05S",
                                           "createdAt":  "2025-02-07T21:56:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The crash was hit on CET hardware, so it is potentially a bug in CET support.",
                                           "updatedAt":  "2025-02-07T21:56:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dm1NB",
                                           "createdAt":  "2025-02-07T21:57:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-07T21:57:04Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Crash in `BenchmarksGame.KNucleotide_9` test on windows.11.amd64.cet.open",
        "labels":  [
                       "tenet-reliability",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112290",
        "createdAt":  "2025-02-07T22:42:14Z",
        "number":  112290,
        "author":  "jkoritzinsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T21:13:36Z",
        "body":  "On NativeAOT today, `DllImportSearchPath.AssemblyDirectory` tells the runtime to load the requested library from `Path.Combine(AppContext.BaseDirectory, libName)`. On NativeAOT, `AppContext.BaseDirectory` is always defined as the directory of the process executable. As a result, trying to load a native shared library from a NativeAOT application will always look next to the process entry module.\n\nThis makes sense for NativeAOT applications that produce executables, but this behavior becomes unintuitive for SharedLibrary-based NativeAOT applications. In that scenario, using `DllImportSearchPath.AssemblyDirectory` will look next to the entry executable of the process, not next to the NativeAOT shared library.\n\nThis makes it extremely difficult to load any native shared libraries that are shipped alongside a NativeAOT shared library. Users are forced to manually use P/Invokes to `GetModuleFileName` and `dladdr` to determine their path (or, if loaded by another native library, passed these values) and manually call `NativeLibrary.Load(string)` with the full path to load, losing all of the niceties of `LibraryImport/DllImport` or the `NativeLibrary.Load` overload that takes `DllImportSearchPath` (like prepending `lib` and appending `.so`/`.dylib` on different platforms).\n\nI propose that on NativeAOT SharedLibrary scenarios, the \"Assembly directory\" that\u0027s used is the directory that the NativeAOT shared library is installed in, not the directory where the executable that loads the library is located.\n\n@agocke has also expressed that we should continue to have AppContext.BaseDirectory and the \"Assembly directory\" be the same, and if we decide to do this to change the AppContext.BaseDirectory path to always be the path to the NativeAOT-produced library or exe that is calling `AppContext.BaseDirectory`, not always the process executable path.\n\n@max-charlamb hit this while working on the native unwinder work for the cDAC.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsvIalQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6dnEGA",
                                           "createdAt":  "2025-02-07T22:42:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-07T22:42:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6doE9t",
                                           "createdAt":  "2025-02-08T06:05:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Previously: #90131\n\nIf we can find a mechanism that reliably works crossplatform, it would certainly be an improvement over the current state. \n\nNote that shared libraries could also take advantage of the DirectPInvoke mechanism and have the OS deal with binding (and use OS-level overrides).\n\nCc @AaronRobinsonMSFT @elinor-fung ",
                                           "updatedAt":  "2025-02-08T06:05:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dtEf8",
                                           "createdAt":  "2025-02-08T16:47:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "@agocke and I determined that we could use [dladdr](https://linux.die.net/man/3/dladdr) on non-Windows and `GetModuleFileName` on Windows. This is the exact same mechanism that CoreCLR uses to do the same operation as part of loading the JIT.",
                                           "updatedAt":  "2025-02-08T16:47:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dta-h",
                                           "createdAt":  "2025-02-08T20:27:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "As mentioned, I think it’s reasonable to have a different behavior for Native aot libraries vs applications. Only complication is determining which one we’re compiling for, so we can use a different implementation.\n\nI suppose we could use a feature switch for this. ",
                                           "updatedAt":  "2025-02-08T20:27:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dtd1h",
                                           "createdAt":  "2025-02-08T21:06:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "We have mechanisms in the bootstrapper and the NativeAOT runtime initialization to know whether or not we\u0027re running from an Exe or Library scenario. We could use that to differentiate.",
                                           "updatedAt":  "2025-02-08T21:06:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dycXo",
                                           "createdAt":  "2025-02-10T08:23:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGA9oQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkoritzinsky",
                                                                               "createdAt":  "2025-02-11T20:06:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e We have mechanisms in the bootstrapper and the NativeAOT runtime initialization to know whether or not we\u0027re running from an Exe or Library scenario. We could use that to differentiate.\n\nThat mechanism is a hack added for #91715. I think building native AOT into a static library will make it think we\u0027re in a DLL when in fact we don\u0027t know. For the hack purposes, it\u0027s fine, since event pipe is already unsupported in OutputType!=EXE scenarios and the hack just makes it sort of work.\n\nI think this will need run time probing; we don\u0027t know if we\u0027re a shared library at compile time.",
                                           "updatedAt":  "2025-02-10T08:23:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6d2-IF",
                                           "createdAt":  "2025-02-10T15:39:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "/cc @lateralusX ",
                                           "updatedAt":  "2025-02-10T15:39:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6d3X6R",
                                           "createdAt":  "2025-02-10T16:11:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "We use something similar for Mono components where we have logic to find other runtime component shared libraries that is side by side with the runtime using this logic:\n\nhttps://github.com/dotnet/runtime/blob/9b77dd4f04ff763a16deae36430ea62d5fff95bf/src/mono/mono/metadata/components.c#L147\n\nThe runtime doesn\u0027t know how it will be linked, so it uses a runtime check to get hold of the module owning some symbol at link time in order to get hold of the module owning that address. This scenario doesn\u0027t support the case where runtime is static linked into application and the components end up as shared library, but the probing could be extended with a fallback on unix if dladdr didn\u0027t find the address, since that would mean we should fallback to use the application path (like we currently do). We use this implementation on all platforms that support dynamic loadable components, so it works on at least on Windows, Linux, OSX, iOS, tvOS and Android.",
                                           "updatedAt":  "2025-02-10T16:12:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hQvnU",
                                           "createdAt":  "2025-03-07T04:46:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The fix was reverted in https://github.com/dotnet/runtime/pull/113211",
                                           "updatedAt":  "2025-03-07T04:46:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6y8bpb",
                                           "createdAt":  "2025-06-24T23:54:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jevansaks",
                                           "body":  "In the meantime while you figure out how to implement this, do you all have thoughts on how to do this using C#-only code? (I\u0027d like this to work for both JIT and AOT scenarios). I have a need to get the path of the module that I\u0027m in, not for a p-invoke but to load a file relative to the dll. In C++ I\u0027d use GetModulePath but I don\u0027t know how to get the hmodule in C#. I\u0027m also not sure the canonical way to determine if we\u0027ve been compiled as AOT or not to decide if Assembly.Location is going to work.",
                                           "updatedAt":  "2025-06-24T23:54:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6y8hqV",
                                           "createdAt":  "2025-06-25T00:12:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "For Native AOT, you can use `GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS` on a method from the module. Something like:\n\n```\nvoid* p = (void*)(delegate* \u003cvoid\u003e)(\u0026M);\n\nGetModuleHandleEx(p, GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS, out hModule);\n```\n\nTo handle non-Native AOT, you can check different variants: Check `Assembly.Location` first, `GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS` second, and fallback to Assembly.BaseDirectory if none of those options work.",
                                           "updatedAt":  "2025-06-25T00:12:40Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Implementation of AppContext.BaseDirectory and DllImportSearchPath.AssemblyDirectory handling on NativeAOT in the SharedLibrary scenario is unintuitive",
        "labels":  [
                       "in-pr",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112629",
        "createdAt":  "2025-02-15T21:43:14Z",
        "number":  112629,
        "author":  "JunZiRuFengJianSuiFeng",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-13T07:10:34Z",
        "body":  "This is an AOT-related error. I\u0027m getting the following error when compiling to AOT:\n\nTip 1:\n\"\"C:\\Users\\Administrator\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\9.0.2\\tools\\\\ilc\" @\"obj\\Release\\net9.0\\win-x86\\native\\MyApp.ilc.rsp\"\" has exited with code 1\n\nTip 2:\n \"An item with the same key has already been added. Key: _________________________________\"\n\nHowever, my project compiles fine without AOT enabled. \n\nCode Replication:\nSince the error doesn\u0027t point to a specific line of code, I can\u0027t give a specific block of code. If required, I can provide the complete project.\n\nMy solution:\nAfter I changed the name of the class in the code, it was able to compile successfully.\n\nOpinion:\nI think it\u0027s a bug in the AOT compiler handling the character set, which causes a symbol conflict during the conversion.\n\nEnvironment:\nSDK version: .NET 9.0.2\nDevelopment Environment: VS2022(17.13.0)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnrAXdQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6erAyI",
                                           "createdAt":  "2025-02-16T22:33:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "cc @dotnet/ilc-contrib ",
                                           "updatedAt":  "2025-02-16T22:33:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6erOpQ",
                                           "createdAt":  "2025-02-17T05:58:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "@JunZiRuFengJianSuiFeng could you open a command prompt, change the directory to where is your project file, and re-run the failing command (`\"C:\\Users\\Administrator\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\9.0.2\\tools\\ilc\" @\"obj\\Release\\net9.0\\win-x86\\native\\MyApp.ilc.rsp\"`). It should print a stack when it crashes - please paste it here.",
                                           "updatedAt":  "2025-02-17T05:58:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6erqCo",
                                           "createdAt":  "2025-02-17T07:14:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JunZiRuFengJianSuiFeng",
                                           "body":  "\u003e [@JunZiRuFengJianSuiFeng](https://github.com/JunZiRuFengJianSuiFeng) could you open a command prompt, change the directory to where is your project file, and re-run the failing command (). It should print a stack when it crashes - please paste it here.`\"C:\\Users\\Administrator\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\9.0.2\\tools\\ilc\" @\"obj\\Release\\net9.0\\win-x86\\native\\MyApp.ilc.rsp\"`\n\n[@MichalStrehovsky]\nI\u0027ve tested out the cause of the specific error:\nThe reason is that my C# code is encoded with non-English identifiers, which is correct at managed compilation, but the AOT compiler will underscore non-English identifiers to \u0027_\u0027, so this error occurs, I hope this feedback will help you improve the AOT functionality!",
                                           "updatedAt":  "2025-02-17T07:34:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6erz1y",
                                           "createdAt":  "2025-02-17T07:38:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Can you please paste the stack trace when the exception occurs by following the steps in my previous comment?",
                                           "updatedAt":  "2025-02-17T07:38:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6esAsP",
                                           "createdAt":  "2025-02-17T08:07:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JunZiRuFengJianSuiFeng",
                                           "body":  "\u003e Can you please paste the stack trace when the exception occurs by following the steps in my previous comment?\n\n@MichalStrehovsky \nDon\u0027t know if you\u0027re referring to this:\n1\u003eEXEC(0,0): Error: An item with the same key has already been added. Key: _________________________________\n1\u003eSystem.ArgumentException: An item with the same key has already been added. Key: _________________________________\n1\u003e   at System.Collections.Generic.Dictionary`2.TryInsert(TKey, TValue, InsertionBehavior) + 0x2ba\n1\u003e   at ILCompiler.ObjectWriter.ObjectWriter.EmitObject(String, IReadOnlyCollection`1, IObjectDumper, Logger) + 0xafb\n1\u003e   at ILCompiler.ObjectWriter.ObjectWriter.EmitObject(String, IReadOnlyCollection`1, NodeFactory, ObjectWritingOptions, IObjectDumper, Logger) + 0x142\n1\u003e   at ILCompiler.RyuJitCompilation.CompileInternal(String, ObjectDumper) + 0xbb\n1\u003e   at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String, ObjectDumper) + 0x5d\n1\u003e   at ILCompiler.Program.Run() + 0x2c4c\n1\u003e   at ILCompiler.ILCompilerRootCommand.\u003c\u003ec__DisplayClass240_0.\u003c.ctor\u003eb__0(ParseResult) + 0x321\n",
                                           "updatedAt":  "2025-02-17T08:07:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6esBd1",
                                           "createdAt":  "2025-02-17T08:08:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Yes, thank you!",
                                           "updatedAt":  "2025-02-17T08:08:43Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  ".net 9.0.2 aot compilation errror: An item with the same key has already been added.",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112646",
        "createdAt":  "2025-02-18T06:14:23Z",
        "number":  112646,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-02T21:25:51Z",
        "body":  "Crashed in https://helixr1107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-575497cc18844841b5/Methodical_r1/1/console.600754b4.log?helixlogtype=result\n\nNo dump.\n\nI had this exact binary downloaded with runfo running overnight on my machine with 10000 iterations, no repro. I _think_ I have CET enabled (it does say Kernel-mode Hardware-enforced Stack Protection is On under Core isolation), but also, my CPU is an AMD Ryzen (9700X). Not sure what else can be done. I guess someone could try 10000 iterations on an Intel CPU.\n\n```\n03:50:27.536 Running test: global::Test_throwinfinallynestedintry_30_cs.Class1.TestEntryPoint()\nin main try\n-in foo try\n--in foo try\n---in foo try\n----in foo try\n-----in foo try\n------in foo try\n-------in foo try\n--------in foo try\n---------in foo try\n----------in foo try\n-----------in foo try\n------------in foo try\n-------------in foo try\n--------------in foo try\n---------------in foo try\n----------------in foo try\n-----------------in foo try\n------------------in foo try\n-------------------in foo try\n--------------------in foo try\n---------------------in foo try\n----------------------in foo try\n-----------------------in foo try\n------------------------in foo try\n-------------------------in foo try\n--------------------------in foo try\n---------------------------in foo try\n----------------------------in foo try\n-----------------------------in foo try\n------------------------------in foo try\n------------------------------in foo finally\n------------------------------foo L30\n-----------------------------in foo finally\n------------------------------in foo try\n------------------------------in foo finally\n------------------------------throwing an exception [i = 0]\n----------------------------in foo finally\n-----------------------------in foo try\n-----------------------------throwing an exception [i = 0]\n-----------------------------in foo catch\n-----------------------------in foo finally\n-----------------------------throwing an exception [i = 1]\n---------------------------in foo finally\n----------------------------in foo try\n----------------------------throwing an exception [i = 1]\n----------------------------in foo catch\n----------------------------in foo finally\n----------------------------throwing an exception [i = 2]\n--------------------------in foo finally\n---------------------------in foo try\n---------------------------throwing an exception [i = 2]\n---------------------------in foo catch\n---------------------------in foo finally\n---------------------------throwing an exception [i = 3]\n-------------------------in foo finally\n--------------------------in foo try\n--------------------------throwing an exception [i = 3]\n--------------------------in foo catch\n--------------------------in foo finally\n--------------------------throwing an exception [i = 4]\n------------------------in foo finally\n-------------------------in foo try\n-------------------------throwing an exception [i = 4]\n-------------------------in foo catch\n-------------------------in foo finally\n-------------------------throwing an exception [i = 5]\n-----------------------in foo finally\n------------------------in foo try\n------------------------throwing an exception [i = 5]\n------------------------in foo catch\n------------------------in foo finally\n------------------------throwing an exception [i = 6]\n----------------------in foo finally\n-----------------------in foo try\n-----------------------throwing an exception [i = 6]\n-----------------------in foo catch\n-----------------------in foo finally\n-----------------------throwing an exception [i = 7]\n---------------------in foo finally\n----------------------in foo try\n----------------------throwing an exception [i = 7]\n----------------------in foo catch\n----------------------in foo finally\n----------------------throwing an exception [i = 8]\n--------------------in foo finally\n---------------------in foo try\n---------------------throwing an exception [i = 8]\n---------------------in foo catch\n---------------------in foo finally\n---------------------throwing an exception [i = 9]\n-------------------in foo finally\n--------------------in foo try\n--------------------throwing an exception [i = 9]\n--------------------in foo catch\n--------------------in foo finally\n--------------------throwing an exception [i = 10]\n------------------in foo finally\n-------------------in foo try\n-------------------throwing an exception [i = 10]\n-------------------in foo catch\n-------------------in foo finally\n-------------------throwing an exception [i = 11]\n-----------------in foo finally\n------------------in foo try\n------------------throwing an exception [i = 11]\n------------------in foo catch\n------------------in foo finally\n------------------throwing an exception [i = 12]\n----------------in foo finally\n-----------------in foo try\n-----------------throwing an exception [i = 12]\n-----------------in foo catch\n-----------------in foo finally\n-----------------throwing an exception [i = 13]\n---------------in foo finally\n----------------in foo try\n----------------throwing an exception [i = 13]\n----------------in foo catch\n----------------in foo finally\n----------------throwing an exception [i = 14]\n--------------in foo finally\n---------------in foo try\n---------------throwing an exception [i = 14]\n---------------in foo catch\n---------------in foo finally\n---------------throwing an exception [i = 15]\n-------------in foo finally\n--------------in foo try\n--------------throwing an exception [i = 15]\n--------------in foo catch\n--------------in foo finally\n--------------throwing an exception [i = 16]\n------------in foo finally\n-------------in foo try\n-------------throwing an exception [i = 16]\n-------------in foo catch\n-------------in foo finally\n-------------throwing an exception [i = 17]\n-----------in foo finally\n------------in foo try\n------------throwing an exception [i = 17]\n------------in foo catch\n------------in foo finally\n------------throwing an exception [i = 18]\n----------in foo finally\n-----------in foo try\n-----------throwing an exception [i = 18]\n-----------in foo catch\n-----------in foo finally\n-----------throwing an exception [i = 19]\n---------in foo finally\n----------in foo try\n----------throwing an exception [i = 19]\n----------in foo catch\n----------in foo finally\n----------throwing an exception [i = 20]\n--------in foo finally\n---------in foo try\n---------throwing an exception [i = 20]\n---------in foo catch\n---------in foo finally\n---------throwing an exception [i = 21]\n-------in foo finally\n--------in foo try\n--------throwing an exception [i = 21]\n--------in foo catch\n--------in foo finally\n--------throwing an exception [i = 22]\n------in foo finally\n-------in foo try\n-------throwing an exception [i = 22]\n-------in foo catch\n-------in foo finally\n-------throwing an exception [i = 23]\n-----in foo finally\n------in foo try\n------throwing an exception [i = 23]\n------in foo catch\n------in foo finally\n------throwing an exception [i = 24]\n----in foo finally\n-----in foo try\n-----throwing an exception [i = 24]\n-----in foo catch--------------------------------------------------\nDebug Assertion Violation\n\nMessage: Hardware exception raised inside the runtime.\n\nExpression: \u0027ASSERT_UNCONDITIONALLY\u0027\n\nFile: D:\\a\\_work\\1\\s\\src\\coreclr\\nativeaot\\Runtime\\EHHelpers.cpp, Line: 558\n--------------------------------------------------\nExpected: 100\nActual: -1073740286\nEND EXECUTION - FAILED\nFAILED\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOntRDVw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6e1ENX",
                                           "createdAt":  "2025-02-18T06:14:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-18T06:14:54Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Crash in Methodical_r1 on CET",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114109",
        "createdAt":  "2025-04-01T15:54:45Z",
        "number":  114109,
        "author":  "vyacheslav-volkov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-28T18:10:35Z",
        "body":  "### Description\n\nWhen analyzing my application using sizoscope, I discovered that the final build contains generic classes whose type parameters violate the declared constraints. This can lead to an increase in the build size and create confusion during code analysis.\n\nExample class:\n```\ninternal sealed class GenericMathConverter\u003cTFrom, TTo\u003e : TypeConverterBase\u003cTFrom, TTo\u003e\n    where TFrom : INumberBase\u003cTFrom\u003e\n    where TTo : INumberBase\u003cTTo\u003e\n{\n    public override bool TryConvert(TFrom from, [MaybeNullWhen(false)] out TTo value)\n    {\n        try\n        {\n            value = TTo.CreateTruncating(from);\n            return true;\n        }\n        catch\n        {\n            value = default;\n            return false;\n        }\n    }\n}\n```\nAn instance of this class is created via reflection as follows:\n```\nif (typeof(ISpanFormattable).IsAssignableFrom(typeof(TFrom)) \u0026\u0026 typeof(IComparable\u003cTFrom\u003e).IsAssignableFrom(typeof(TFrom)) \u0026\u0026\n    typeof(ISpanFormattable).IsAssignableFrom(typeof(TTo)) \u0026\u0026 typeof(IComparable\u003cTTo\u003e).IsAssignableFrom(typeof(TTo)))\n{\n    return Activator.CreateInstance(typeof(GenericMathConverter\u003c,\u003e).MakeGenericType(typeof(TFrom), typeof(TTo)));\n}\n```\nNote that the reflection creation condition checks for `ISpanFormattable` and `IComparable\u003cT\u003e`, whereas the class constraints require the implementation of INumberBase\u003cT\u003e but I can\u0027t check it in runtime and I use these interfaces to reduce false positive creation.\n\nThis is a screenshot from the sizoscope, it contains a lot of types which do not implement the `INumberBase` interface moreover they do not implement `ISpanFormattable` and `IComparable\u003cT\u003e` (I included only part of them). They cannot be physically used even if one attempts to create them via reflection as the constraints will prevent it. Therefore, the question arises, why include these types in the release build?\n\u003cimg width=\"792\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/72d54df5-e64e-41d5-9511-75097c0755bc\" /\u003e\n\n### Reproduction Steps\n\nAttempt to create a generic type via reflection using types that violate the constraints, and then verify the result with sizoscope.\n\n### Expected behavior\n\nThe type should not be included in the release build.\n\n### Actual behavior\n\nThe type is included in the release build.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp50Uvw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6lMbrz",
                                           "createdAt":  "2025-04-02T06:50:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I think this is fixed in .NET 10 (fix was in #110330). Can you try with a .NET 10 build?",
                                           "updatedAt":  "2025-04-02T06:50:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lMi8w",
                                           "createdAt":  "2025-04-02T07:05:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "@MichalStrehovsky Thanks, I\u0027ll check today. As for the condition, I expected it would filter all types, since all types are known at build time. The expression can be replaced with a constant value, and we can eliminate this branch for unsupported types but it looks like it was ignored.\n```\nif (typeof(ISpanFormattable).IsAssignableFrom(typeof(TFrom)) \u0026\u0026 typeof(IComparable\u003cTFrom\u003e).IsAssignableFrom(typeof(TFrom)) \u0026\u0026\n    typeof(ISpanFormattable).IsAssignableFrom(typeof(TTo)) \u0026\u0026 typeof(IComparable\u003cTTo\u003e).IsAssignableFrom(typeof(TTo)))\n```",
                                           "updatedAt":  "2025-04-02T07:05:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lMmB5",
                                           "createdAt":  "2025-04-02T07:11:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEMgWNA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vyacheslav-volkov",
                                                                               "createdAt":  "2025-04-02T07:12:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "We probably eliminate the branch during codegen if it\u0027s possible (it\u0027s only possible if both TFrom and TTo are structs). But we don\u0027t eliminate it during whole program analysis (that analyzes things like Activator calls). If codegen can eliminate it, we\u0027ll eliminate it during whole program analysis too if/when #83021 is done, but it\u0027s not done yet.",
                                           "updatedAt":  "2025-04-02T07:11:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lNpGJ",
                                           "createdAt":  "2025-04-02T08:35:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "@MichalStrehovsky I installed .NET 10 Preview 2 and just built my application. Interestingly, according to Sizoscope results, GenericMathConverter isn’t instantiated by any type, and I\u0027m getting errors in my app saying that the types cannot be converted.\n\n\u003cimg width=\"317\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/f119a1fa-db37-41ef-9d26-affefd5b475f\" /\u003e\n\nhere\u0027s the initialization code if you need it:\n```\ninternal abstract class TypeConverterBase\u003cTFrom, TTo\u003e\n{\n    public static TypeConverterBase\u003cTFrom, TTo\u003e? Default { get; } = CreateDefault();\n\n    public abstract bool TryConvert(TFrom from, [MaybeNullWhen(false)] out TTo value);\n\n    private static TypeConverterBase\u003cTFrom, TTo\u003e? CreateDefault()\n    {\n        try\n        {\n//https://github.com/dotnet/runtime/issues/114109 https://github.com/dotnet/runtime/issues/83021\n            if (!typeof(TFrom).IsValueType || !typeof(TTo).IsValueType)\n                return null;\n\n            if (typeof(ISpanFormattable).IsAssignableFrom(typeof(TFrom)) \u0026\u0026 typeof(IComparable\u003cTFrom\u003e).IsAssignableFrom(typeof(TFrom)) \u0026\u0026\n                typeof(ISpanFormattable).IsAssignableFrom(typeof(TTo)) \u0026\u0026 typeof(IComparable\u003cTTo\u003e).IsAssignableFrom(typeof(TTo)))\n                return Unsafe.As\u003cTypeConverterBase\u003cTFrom, TTo\u003e\u003e(Activator.CreateInstance(typeof(GenericMathTypeConverter\u003c,\u003e).MakeGenericType(typeof(TFrom), typeof(TTo))));\n            return null;\n        }\n        catch\n        {\n            return null;\n        }\n    }\n}\n```\n",
                                           "updatedAt":  "2025-04-02T09:37:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6laWJA",
                                           "createdAt":  "2025-04-03T09:55:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "@MichalStrehovsky could you please confirm that you can reproduce it?",
                                           "updatedAt":  "2025-04-03T09:55:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lcWKG",
                                           "createdAt":  "2025-04-03T12:44:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e [@MichalStrehovsky](https://github.com/MichalStrehovsky) could you please confirm that you can reproduce it?\n\nI\u0027ll try to get to it next week. Pasting a complete program with Main that demonstrates the exception would help!",
                                           "updatedAt":  "2025-04-03T12:44:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mTDGz",
                                           "createdAt":  "2025-04-09T14:52:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "@MichalStrehovsky  tried to reproduce the issue in a console project but couldn’t. Then I reviewed my code again and noticed that I never call `Convert` directly, it\u0027s always invoked from other generic methods or classes.\nI then tried adding an explicit call like `Convert\u003cint, int\u003e(1)`, and after that, everything started working, `GenericMathConverter` was generated for all the required types used in other methods.\nI’m still not sure how to reproduce this behavior in a minimal console app, but in my actual project, adding any direct call to `Convert` with number types solves the problem.",
                                           "updatedAt":  "2025-04-09T14:55:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mbL_f",
                                           "createdAt":  "2025-04-10T09:33:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "How does GenericMathTypeConverter look like? Could you post a more concrete example?",
                                           "updatedAt":  "2025-04-10T09:33:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mb_cb",
                                           "createdAt":  "2025-04-10T10:55:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "@MichalStrehovsky I\u0027ve discovered even more interesting behavior, the Convert method needs to be called directly from the iOS project, not from within the shared library. Let me explain in more detail.\n\nI have a .NET library that I use in an iOS app, which I connect as a .dll. This library implements a Convert method using helper classes like TypeConverterBase.\n\nHere’s the situation:\n\nIf I don’t explicitly call Convert\u003cint, long\u003e(1) somewhere in the iOS project code (e.g., in AppDelegate), the required type converters are not generated at runtime. However, once I add this call directly in the iOS project, everything works as expected, and the necessary converters are generated.\n\nOn the other hand, if I add the same call (i.e. Convert\u003cint, long\u003e(1)) inside the library itself and then invoke a method from the library that internally triggers this call, the app crashes with an error saying it cannot convert int to long, implying that the type converters were not generated.\n\nSo in short:\n\nCalling Convert\u003cint, long\u003e(1) in the iOS project ensures that the required converters are generated and available at runtime.\n\nCalling it only within the library (even if the method gets called from the app) does not trigger the generation, leading to runtime failures.\n\nAnd I have another question do you happen to know how to generate converters for nullable types? Right now the linker can\u0027t analyze my code properly when it comes to nullable types.\n\nhere\u0027s the code:\n\n```csharp\npublic abstract class TypeConverterBase\u003cTFrom, TTo\u003e\n{\n    public static TypeConverterBase\u003cTFrom, TTo\u003e? Default { get; set; } = CreateDefault();\n\n    public abstract bool TryConvert(TFrom from, [MaybeNullWhen(false)] out TTo value);\n\n    [UnconditionalSuppressMessage(\"AOT\", \"IL3050:Calling members annotated with \u0027RequiresDynamicCodeAttribute\u0027 may break functionality when AOT compiling.\")]\n    [UnconditionalSuppressMessage(\"Trimming\",\n        \"IL2055:Either the type on which the MakeGenericType is called can\\\u0027t be statically determined, or the type parameters to be used for generic arguments can\\\u0027t be statically determined.\")]\n    private static TypeConverterBase\u003cTFrom, TTo\u003e? CreateDefault()\n    {\n        try\n        {\n            if (\n#if NET9_0 //https://github.com/dotnet/runtime/issues/114109\n                typeof(TTo).IsValueType \u0026\u0026\n#endif\n                typeof(TFrom) == typeof(string) \u0026\u0026 typeof(ISpanFormattable).IsAssignableFrom(typeof(TTo)))\n                return UnsafeEx.As\u003cTypeConverterBase\u003cTFrom, TTo\u003e\u003e(Activator.CreateInstance(typeof(StringParsableTypeConverter\u003c\u003e).MakeGenericType(typeof(TTo))));\n\n#if NET9_0\n            if (!typeof(TFrom).IsValueType || !typeof(TTo).IsValueType)\n                return null;\n#endif\n\n            var isFromNullable = typeof(TFrom).IsGenericType \u0026\u0026 typeof(TFrom).GetGenericTypeDefinition() == typeof(Nullable\u003c\u003e);\n            var isToNullable = typeof(TTo).IsGenericType \u0026\u0026 typeof(TTo).GetGenericTypeDefinition() == typeof(Nullable\u003c\u003e);\n            if (isFromNullable || isToNullable)\n            {\n                if (isFromNullable \u0026\u0026 isToNullable)\n                {\n                    return UnsafeEx.As\u003cTypeConverterBase\u003cTFrom, TTo\u003e\u003e(\n                        Activator.CreateInstance(\n                            typeof(NullableFromToTypeConverter\u003c,\u003e).MakeGenericType(typeof(TFrom).GetGenericArguments()[0], typeof(TTo).GetGenericArguments()[0])));\n                }\n\n                if (isFromNullable)\n                {\n                    return UnsafeEx.As\u003cTypeConverterBase\u003cTFrom, TTo\u003e\u003e(\n                        Activator.CreateInstance(typeof(NullableFromTypeConverter\u003c,\u003e).MakeGenericType(typeof(TFrom).GetGenericArguments()[0], typeof(TTo))));\n                }\n\n                return UnsafeEx.As\u003cTypeConverterBase\u003cTFrom, TTo\u003e\u003e(\n                    Activator.CreateInstance(typeof(NullableToTypeConverter\u003c,\u003e).MakeGenericType(typeof(TFrom), typeof(TTo).GetGenericArguments()[0])));\n            }\n\n\n            if (typeof(ISpanFormattable).IsAssignableFrom(typeof(TFrom)) \u0026\u0026 typeof(IComparable\u003cTFrom\u003e).IsAssignableFrom(typeof(TFrom)) \u0026\u0026\n                typeof(ISpanFormattable).IsAssignableFrom(typeof(TTo)) \u0026\u0026 typeof(IComparable\u003cTTo\u003e).IsAssignableFrom(typeof(TTo)))\n                return UnsafeEx.As\u003cTypeConverterBase\u003cTFrom, TTo\u003e\u003e(Activator.CreateInstance(typeof(GenericMathTypeConverter\u003c,\u003e).MakeGenericType(typeof(TFrom), typeof(TTo))));\n            return null;\n        }\n        catch\n        {\n            return null;\n        }\n    }\n}\n\ninternal sealed class GenericMathTypeConverter\u003cTFrom, TTo\u003e : TypeConverterBase\u003cTFrom, TTo\u003e\n    where TFrom : INumberBase\u003cTFrom\u003e\n    where TTo : INumberBase\u003cTTo\u003e\n{\n    public override bool TryConvert(TFrom from, [MaybeNullWhen(false)] out TTo value)\n    {\n        try\n        {\n            value = TTo.CreateTruncating(from);\n            return true;\n        }\n        catch\n        {\n            value = default;\n            return false;\n        }\n    }\n}\n\n//methods\n    [Pure]\n    public static TTo Convert\u003cTFrom, TTo\u003e(TFrom? value)\n    {\n        if (TryConvert\u003cTFrom, TTo\u003e(value, out var result))\n            return result;\n        ExceptionManager.ThrowCannotConvert(typeof(TFrom), typeof(TTo));\n        return default!;\n    }\n\n    [Pure]\n    public static bool TryConvert\u003cTFrom, TTo\u003e(TFrom? value, [MaybeNullWhen(false)] out TTo result)\n    {\n        if (value == null)\n        {\n            result = default!;\n            return true;\n        }\n\n        if (typeof(TTo) == typeof(Unit))\n        {\n            result = default!;\n            return true;\n        }\n\n        if (value is TTo)\n        {\n            result = typeof(TFrom).IsValueType \u0026\u0026 !typeof(TTo).IsValueType ? (TTo) BoxingExtensions.Box(value) : (TTo) (object) value;\n            return true;\n        }\n\n        if (value is IConvertible\u003cTFrom\u003e \u0026\u0026 ((IConvertible\u003cTFrom\u003e) value).TryConvertTo(value, out result))\n            return true;\n\n        if (typeof(TTo).IsValueType \u0026\u0026 typeof(IConvertible\u003cTTo\u003e).IsAssignableFrom(typeof(TTo)) \u0026\u0026 ((IConvertible\u003cTTo\u003e) default(TTo)!).TryConvertFrom(value, out result))\n            return true;\n\n        if ((typeof(TFrom).IsValueType || typeof(TTo) != typeof(object)) \u0026\u0026 value is IWrapper\u003cTTo\u003e)\n        {\n            result = ((IWrapper\u003cTTo\u003e) value).Target;\n            return true;\n        }\n\n        var converter = TypeConverterBase\u003cTFrom, TTo\u003e.Default;\n        if ((converter != null \u0026\u0026 converter.TryConvert(value, out result)) || TryConvertSlow(value, out result))\n            return true;\n        return false;\n    }\n```",
                                           "updatedAt":  "2025-04-10T10:55:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mcWMd",
                                           "createdAt":  "2025-04-10T11:35:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "I\u0027m trying to reproduce this issue in a separate project, but so far I can only reproduce it in my main (working) project.\nIs there any kind of logging or diagnostics that could help explain why a type wasn\u0027t included?\nThe most interesting part is that, when I inspect the build output using SizoScope, I can see that TypeConverterBase\u003cint, long\u003e is generated, but the actual GenericMathTypeConverter\u003cint, long\u003e is empty.",
                                           "updatedAt":  "2025-04-10T11:35:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mcdH8",
                                           "createdAt":  "2025-04-10T11:47:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Can you try setting a breakpoint at a function named `RhThrowEx` and paste the stack when it hits? You have a lot of catchall blocks and this will give you a \"first chance exception\" (the debugger will stop there whenever an exception is thrown).",
                                           "updatedAt":  "2025-04-15T21:22:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mcv0_",
                                           "createdAt":  "2025-04-10T12:19:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "@MichalStrehovsky I\u0027m using this command to run my iOS app using NativeAOT:\n`dotnet publish -f net10.0-ios -c Release -r ios-arm64  /t:Run`\nHow can I attach the debugger?\n\nAnyway, I removed the try-catch block from TypeConverterBase and got the following error. It looks like the issue is that int fails because it doesn\u0027t implement INumberBase\u003cint\u003e, was it removed by linker?\n```\nat MyProject!\u003cBaseAddress\u003e+0x7f6614  \n\u0027System.Int32\u0027, on \u0027MugenMvvm.Common.GenericMathTypeConverter`2[TFrom,TTo]\u0027 violates the constraint of type \u0027TFrom\u0027. (System.ArgumentException)  \nat Internal.Reflection.Execution.ConstraintValidator.EnsureSatisfiesClassConstraints(Type[], Type[], Object, ConstraintValidator.SigTypeContext) + 0x160  \nat Internal.Reflection.Execution.ConstraintValidator.EnsureSatisfiesClassConstraints(Type, Type[]) + 0x38  \nat Internal.Reflection.Execution.ExecutionEnvironmentImplementation.TryGetConstructedGenericTypeForComponents(RuntimeTypeHandle genericTypeDefinitionHandle, RuntimeTypeHandle[] genericTypeArgumentHandles, RuntimeTypeHandle\u0026 runtimeTypeHandle) + 0x130  \nat System.Reflection.Runtime.TypeInfos.RuntimeConstructedGenericTypeInfo.GetRuntimeTypeHandleIfAny(RuntimeTypeInfo, RuntimeTypeInfo[], RuntimeConstructedGenericTypeInfo.TryGetConstructedGenericTypeDelegate) + 0xb4  \nat System.Reflection.Runtime.TypeInfos.RuntimeConstructedGenericTypeInfo.GetRuntimeConstructedGenericTypeInfo(RuntimeTypeInfo, RuntimeTypeInfo[]) + 0x78  \nat System.Reflection.Runtime.TypeInfos.RuntimeTypeInfo.MakeGenericType(Type[]) + 0x240\n\n```\n\nI found a simple way to reproduce this bug and show how strange it is. I added a test method to the library:\n```csharp\n[MethodImpl(MethodImplOptions.NoInlining)]\npublic static void ConvertTest() =\u003e _ = Convert\u003cint, long\u003e(1);\n```\n\nAnd then I called it at the start of the application:\n```csharp\nprotected override void Initialize(UIApplication application, NSDictionary launchOptions)\n{\n    MugenExtensions.ConvertTest();\n    // _ = MugenExtensions.Convert\u003cint, long\u003e(1); \n}\n```\n\nWith this version, we get the error I pasted above. But if I uncomment the second line, everything works fine.",
                                           "updatedAt":  "2025-04-10T12:21:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ndaXJ",
                                           "createdAt":  "2025-04-16T12:55:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I\u0027m not able to figure it out from this. Is it possible to share your project binaries publicly? If so, could you add:\n\n```xml\n\u003cItemGroup\u003e\n    \u003c!-- Replace /some/path/where/to/store/zip with an actual path --\u003e\n    \u003cIlcArg Include=\"--make-repro-path:/some/path/where/to/store/zip\"\u003e\n\u003c/ItemGroup\u003e\n```\n\nto your project file and run publish with AOT? This should create a zip file under the above path. Upload it here.\n\nIf not, can you share the full stack trace (not just starting at MakeGenericType?\n\nThe liberal (and seemingly unnecessary) use of Unsafe.As makes me worry this is caused by some stray invalid Unsafe.As use.",
                                           "updatedAt":  "2025-04-16T12:55:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nef4Z",
                                           "createdAt":  "2025-04-16T14:34:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "\u003e I\u0027m not able to figure it out from this. Is it possible to share your project binaries publicly?\n\nUnfortunately, I can\u0027t the project is commercial.\n\n\u003e The liberal (and seemingly unnecessary) use of Unsafe.As makes me worry this is caused by some stray invalid Unsafe.As use.\n\nI was trying to reduce the AOT code size by minimizing the number of instructions, since this type gets generated for over 100 types. I assumed that the Activator couldn\u0027t return anything other than the base type, is it wrong?\nHowever, I\u0027m 100% sure that Unsafe.As isn\u0027t the cause here, because if I call the code directly, everything works fine.\n\n\u003e If not, can you share the full stack trace (not just starting at MakeGenericType)?\n\nI’ve removed Unsafe.As and replaced it with a regular cast. Here’s the full stack trace:\n\n```\n(0x1c05f940c 0x1b98d5c28 0x102777f04 0x102777c44 0x1027ef354 0x1c28b85cc 0x1c28b7d9c 0x1c28b6dd0 0x1c28b6a30 0x1c261fbf8 0x1c2935bcc 0x1c27f7de4 0x1c27f7c14 0x1c27f77e4 0x1c27f76c4 0x1c2e76a7c 0x1c2f0a7b8 0x1c26b613c 0x1c2aea3b0 0x1c277c73c 0x1c277c5d0 0x1c277bb40 0x1c277b8e4 0x1d511b4a8 0x1d5155974 0x1d511eefc 0x1d5155618 0x1c73a0780 0x1c73782d0 0x1d5128410 0x1d512804c 0x1d512a600 0x1c06b90e8 0x1c06c4d5c 0x1c064ffc4 0x1c0665138 0x1c0669d20 0x1f8739998 0x1c28fc34c 0x1c28fbfc4 0x102774018 0x102e84bcc 0x102e84d94 0x102e1af78 0x10382566c 0x10278065c 0x1027eb2a0 0x1dde28344)\nReceived unhandled Objective-C exception that was marshalled from a managed exception: A type initializer threw an exception. To determine which type, inspect the InnerException\u0027s StackTrace property. (System.TypeInitializationException)\n   at System.Runtime.CompilerServices.ClassConstructorRunner.EnsureClassConstructorRun(StaticClassConstructionContext*) + 0x158\n   at System.Runtime.CompilerServices.ClassConstructorRunner.CheckStaticClassConstructionReturnGCStaticBase(StaticClassConstructionContext*, Object) + 0x14\n   at MugenMvvm.Extensions.MugenExtensions.TryConvert[TFrom,TTo](TFrom, TTo\u0026) + 0x88\n   at MugenMvvm.Extensions.MugenExtensions.Convert[TFrom,TTo](TFrom) + 0x10\n   at MugenMvvm.Extensions.MugenExtensions.ConvertTest() + 0x10\n   at MyApp.AppDelegate.Initialize(UIApplication, NSDictionary) + 0x38\n   at MyApp!\u003cBaseAddress\u003e+0x7ec574\n\u0027System.Int32\u0027, on \u0027MugenMvvm.Common.GenericMathTypeConverter`2[TFrom,TTo]\u0027 violates the constraint of type \u0027TFrom\u0027. (System.ArgumentException)\n   at Internal.Reflection.Execution.ConstraintValidator.EnsureSatisfiesClassConstraints(Type[], Type[], Object, ConstraintValidator.SigTypeContext) + 0x160\n   at Internal.Reflection.Execution.ConstraintValidator.EnsureSatisfiesClassConstraints(Type, Type[]) + 0x38\n   at Internal.Reflection.Execution.ExecutionEnvironmentImplementation.TryGetConstructedGenericTypeForComponents(RuntimeTypeHandle genericTypeDefinitionHandle, RuntimeTypeHandle[] genericTypeArgumentHandles, RuntimeTypeHandle\u0026 runtimeTypeHandle) + 0x130\n   at System.Reflection.Runtime.TypeInfos.RuntimeConstructedGenericTypeInfo.GetRuntimeTypeHandleIfAny(RuntimeTypeInfo, RuntimeTypeInfo[], RuntimeConstructedGenericTypeInfo.TryGetConstructedGenericTypeDelegate) + 0xb4\n   at System.Reflection.Runtime.TypeInfos.RuntimeConstructedGenericTypeInfo.GetRuntimeConstructedGenericTypeInfo(RuntimeTypeInfo, RuntimeTypeInfo[]) + 0x78\n   at System.Reflection.Runtime.TypeInfos.RuntimeTypeInfo.MakeGenericType(Type[]) + 0x240\n   at MugenMvvm.Common.TypeConverterBase`2.CreateDefault() + 0x74\n   at MugenMvvm.Common.TypeConverterBase`2..cctor() + 0x38\n```",
                                           "updatedAt":  "2025-04-16T14:34:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nnKCH",
                                           "createdAt":  "2025-04-17T07:37:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "What are the trimming/AOT warnings you get on `CreateDefault` (remove the suppressions on it first)?\n\nDoes the line with `Activator.CreateInstance(typeof(GenericMathTypeConverter\u003c,\u003e).MakeGenericType` generate a warning?\n\nBasically, this should be impossible to hit. If we correctly statically detected the MakeGeneric call in CreateDefault and we did compile  `TypeConverterBase\u003cint, long\u003e.CreateDefault` (which I assume we did, since we should be running that code), we should be taking the early out here:\n\nhttps://github.com/dotnet/runtime/blob/b281500fa1f42732455f8d4f06bcb376d88cdfdd/src/coreclr/nativeaot/System.Private.Reflection.Execution/src/Internal/Reflection/Execution/ExecutionEnvironmentImplementation.MappingTables.cs#L183-L203\n\n`TryLookupConstructedGenericTypeForComponents` at the top is supposed to find it. If we\u0027re down at validating constraints, we didn\u0027t find it. The subsequent lines after constraint validation will not succeed either because both parameters are valuetypes. So whether we fail at constraint resolution or proceed further and fail there, it doesn\u0027t matter.\n\nSo my theory is that the MakeGeneric wasn\u0027t recognized and the compiler generated a warning about it.",
                                           "updatedAt":  "2025-04-17T07:37:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nnRS_",
                                           "createdAt":  "2025-04-17T07:51:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "@MichalStrehovsky It doesn\u0027t produce any warnings. I had added UnconditionalSuppressMessage for the nullable converters, but I\u0027ve now removed it and commented out the nullable converters — and still, I don\u0027t see any warnings. Also, I treat all warnings as errors in the project settings.\n```xml\n        \u003cIsAotCompatible\u003etrue\u003c/IsAotCompatible\u003e\n        \u003cTreatWarningsAsErrors\u003etrue\u003c/TreatWarningsAsErrors\u003e\n```\n\nI can\u0027t explain why calling the Convert method directly from AppDelegate works fine, but calling the same method via a wrapper method from the library causes it to fail. I agree that this looks extremely strange. The biggest problem is that I can\u0027t reproduce it in another project.\n\n```csharp\n\n//the code from the lib\n[MethodImpl(MethodImplOptions.NoInlining)]\npublic static void ConvertTest() =\u003e _ = Convert\u003cint, long\u003e(1);\n\n//the code from AppDelegate\nprotected override void Initialize(UIApplication application, NSDictionary launchOptions)\n{\n    MugenExtensions.ConvertTest();//fails\n    // _ = MugenExtensions.Convert\u003cint, long\u003e(1); //works\n}\n```\n\n",
                                           "updatedAt":  "2025-04-17T07:51:39Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "Exclude generic types with parameters that do not satisfy constraints",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115153",
        "createdAt":  "2025-04-29T16:17:44Z",
        "number":  115153,
        "author":  "smaillet",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-13T18:55:42Z",
        "body":  "### Description\n\nWhen running dotnet publish on my project it will generate the following output:\n```\nThe input line is too long.\nThe syntax of the command is incorrect.\n```\n\nAfter sleuthing with diagnostics, it seems to be coming from an attempt to run a packaged version of `findvcvarsall.bat`\n```\n                   Task \"Exec\" (TaskId:389)\n                     Task Parameter:StandardOutputImportance=Low (TaskId:389)\n                     Task Parameter:Command=\"D:\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\9.0.4\\build\\findvcvarsall.bat\" x64 (TaskId:389)\n                     Task Parameter:ConsoleToMSBuild=True (TaskId:389)\n                     Task Parameter:IgnoreExitCode=True (TaskId:389)\n                     \"D:\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\9.0.4\\build\\findvcvarsall.bat\" x64 (TaskId:389)\n                     The input line is too long. (TaskId:389)\n                     The syntax of the command is incorrect. (TaskId:389)\n                     The command \"\"D:\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\9.0.4\\build\\findvcvarsall.bat\" x64\" exited with code 255. (TaskId:389)\n                     Output Property: _FindVCVarsallOutput=The input line is too long.;The syntax of the command is incorrect. (TaskId:389)\n                     Output Property: _VCVarsAllFound=255 (TaskId:389)\n                   Done executing task \"Exec\". (TaskId:389)\n                   Task \"Error\" skipped, due to false condition; (\u0027$(_VCVarsAllFound)\u0027 == \u00271\u0027) was evaluated as (\u0027255\u0027 == \u00271\u0027).\n\n```\n\n\n### Reproduction Steps\n\nsyntax of command run:\n\n```\ndotnet publish -r win-x64 .\\\u003cmyproj\u003e.csproj\n```\n\n### Expected behavior\n\nIt should complete without errors or warnings that are vague or unactionable.\n\n### Actual behavior\n\nAs described, it indicates something is wrong, but doesn\u0027t say what that something is, even though it \"seems\" to produce a working output. (This does NOT inspire one with much in the way of confidence in said output!)\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 9\nWindows 10 Version 22H2 (OS Build 19045.5737) [All Updates applied]\nAMD64\n[Unknown if related to this config only, I have no other configs to try]\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqwTgTA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6pQAKA",
                                           "createdAt":  "2025-04-29T16:37:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-29T16:37:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pXJ7q",
                                           "createdAt":  "2025-04-30T09:46:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I can repro this by opening a command prompt and running\n\n```\n\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\vc\\Auxiliary\\Build\\vcvarsall.bat\" amd64\n```\n\nfive times. Looks like this is [a common problem](https://stackoverflow.com/a/19929778) with vcvarsall - it will start failing when PATH is too long (and has no trouble adding duplicates to PATH) but still exits with 0.\n\nAre you running from a clean command prompt or is that already some kind of developer command prompt? How long is your PATH?",
                                           "updatedAt":  "2025-04-30T09:46:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6paINy",
                                           "createdAt":  "2025-04-30T14:35:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smaillet",
                                           "body":  "1) Yes, PATH env is already rather long `$env:PATH.Length` (3823)\n2) This is already a VS PowerShell Command prompt. Not really sure what running command.exe to run a BAT file could possibly do to the environment of the parent shell...\n3) It seems wrong that it\u0027s even trying to run that legacy bat file when the environment is ALREADY set up for the VC tools.",
                                           "updatedAt":  "2025-04-30T14:35:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6paTVQ",
                                           "createdAt":  "2025-04-30T14:48:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e It seems wrong that it\u0027s even trying to run that legacy bat file when the environment is ALREADY set up for the VC tools.\n\nWe do this because people often have the wrong environment set up. When launching \"Developer PowerShell for VS 2022\" as found in the Start menu, the environment gets set up to target x86 (link.exe that is on PATH and the LIB environment variable all point to x86 binaries that are not usable for x64 targets). Trying to target win-x64 with that environment would result in bad failure modes. We re-run vcvarsall to obtain the correct toolset paths.\n\nLooks like this is a case where vcvarsall can no longer run because it hits environment limits. I think this would be more actionable through Visual Studio channels: https://learn.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2022 - we rely on a usable Visual Studio installation to target Windows.",
                                           "updatedAt":  "2025-04-30T14:48:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pdBdd",
                                           "createdAt":  "2025-04-30T18:41:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQYn6w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "chrisoverzero",
                                                                               "createdAt":  "2025-05-01T02:41:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "smaillet",
                                           "body":  "To be blunt - I don\u0027t care about the politics of finger pointing here. This ONLY happens with dotnet publish. No other commands have this problem. If the environment is configured incorrectly, then it should report such as an error that is reasonable and actionable by the user. As it stands the publish command is broken, very silently reporting issues that are not indicating the underlying problem nor anything actionable on the part of the user to resolve it. That\u0027s a problem with dotnet publish command. If that command uses something else that\u0027s not behaving as you\u0027d hope then YOU need to get that fixed or find an alternative, so your tooling works correctly.",
                                           "updatedAt":  "2025-04-30T18:41:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6p_Yto",
                                           "createdAt":  "2025-05-05T18:33:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Looks like running vcvarsall in an already initialized environment is unsupported: https://developercommunity.microsoft.com/t/vcvarsallbat-reports-The-input-line-is/257260?q=vcvarsall+%22The+input+line+is+too+long.%22\u0026fTime=allTime\n\nI\u0027ll leave this open for tracking but don\u0027t see what we can do about this in the near term here.",
                                           "updatedAt":  "2025-05-05T18:33:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qbRYS",
                                           "createdAt":  "2025-05-07T16:43:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smaillet",
                                           "body":  "I\u0027m confused. You say:\n\u003ebut don\u0027t see what we can do about this in the near term here\n\nBut the general solution seems obvious to me. Detect this condition and DON\u0027T call that bat file if you don\u0027t need to. The problem in `dotnet publish` use here is that it is ALWAYS and blindly calling that assuming it will do the right thing. But it won\u0027t. Even for the stated goal of adjusting if the user has already done the wrong thing it can\u0027t reset the state of things (That\u0027s a bug on VC team). If there\u0027s no way to run the tool to fix the problem - then STOP! Generate an actionable error and bail out. The BUG for dotnet here is that it doesn\u0027t do that. The fix is to do that. Seems pretty obvious to me. If VC team ever fixes their tool, then it won\u0027t matter to dotnet.exe (or, more importantly, it\u0027s users).",
                                           "updatedAt":  "2025-05-07T16:43:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qdsX4",
                                           "createdAt":  "2025-05-07T19:01:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Detect this condition and DON\u0027T call that bat file if you don\u0027t need to.\n\nThis is the part I\u0027m not sure about - we can check whether a link.exe is on PATH. But how do we know the link.exe is workable (it it Microsoft\u0027s link.exe and it matches the target architecture)?\n\nBefore the batch script, we used to require running `dotnet publish` from a correctly configured command prompt. But it was a support cost because people did not have a correctly configured environemnt (https://github.com/dotnet/corert/issues?q=is%3Aissue%20%22conflicts%20with%20target%20machine%20type%22%20).\n\nThe batch script was actually added by someone who ran into an issue that the link.exe on their path wasn\u0027t even Microsoft\u0027s link.exe (https://github.com/dotnet/corert/pull/5219).\n\nSo now we run the script to reset the environment. It will correctly reset the environment unless environment variable length limits are hit. Not running the script has been a bigger support cost so far than running it potentially unnecessarily.",
                                           "updatedAt":  "2025-05-07T19:01:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rAhMq",
                                           "createdAt":  "2025-05-10T17:21:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smaillet",
                                           "body":  "You can look at the environment variables and see if it\u0027s already been run. \n```\nVS170COMNTOOLS=C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\Tools\\\nVSCMD_ARG_app_plat=Desktop\nVSCMD_ARG_HOST_ARCH=x86\nVSCMD_ARG_TGT_ARCH=x86\nVSCMD_VER=17.13.6\nVSINSTALLDIR=C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\\nVSSDK150INSTALL=C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VSSDK\nVSSDKINSTALL=C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VSSDK\n```\n\nAny of those should be enough, though I\u0027d recommend `VSCMD_VER`.\n\nYou claim this is trying to help people that did the wrong thing. That\u0027s generally admirable but punishing the ones who do the right thing as a consequence isn\u0027t a viable solution in my view. I don\u0027t use the shortcuts or even the ancient DOS BAT/CMD processor shell. I use PowerShell, open a command prompt and leave it open for any command work I need to do. Normally, that\u0027s just validation of build/automation to ensure that automated builds without an IDE will work as expected. (Occasionally, like AOT publish, the command line is the only workable answer. That\u0027s a bad design on both the IDE and the AOT tooling [It isn\u0027t \u0027Publishing\u0027 it\u0027s just another stage of the build...])",
                                           "updatedAt":  "2025-05-10T17:21:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rBOBM",
                                           "createdAt":  "2025-05-10T23:49:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e You can look at the environment variables and see if it\u0027s already been run.\n\u003e \n\u003e ```\n\u003e VS170COMNTOOLS=C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\Tools\\\n\u003e VSCMD_ARG_app_plat=Desktop\n\u003e VSCMD_ARG_HOST_ARCH=x86\n\u003e VSCMD_ARG_TGT_ARCH=x86\n\u003e VSCMD_VER=17.13.6\n\u003e VSINSTALLDIR=C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\\n\u003e VSSDK150INSTALL=C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VSSDK\n\u003e VSSDKINSTALL=C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VSSDK\n\u003e ```\n\u003e \n\u003e Any of those should be enough, though I\u0027d recommend `VSCMD_VER`.\n\u003e \n\u003e You claim this is trying to help people that did the wrong thing. That\u0027s generally admirable but punishing the ones who do the right thing as a consequence isn\u0027t a viable solution in my view. I don\u0027t use the shortcuts or even the ancient DOS BAT/CMD processor shell. I use PowerShell, open a command prompt and leave it open for any command work I need to do. Normally, that\u0027s just validation of build/automation to ensure that automated builds without an IDE will work as expected. (Occasionally, like AOT publish, the command line is the only workable answer. That\u0027s a bad design on both the IDE and the AOT tooling [It isn\u0027t \u0027Publishing\u0027 it\u0027s just another stage of the build...])\n\nThose variables don\u0027t seem to be documented anywhere, official MS tools like ILC can\u0027t rely on undocumented stuff. Using those would require getting the VS team to document them.\nAlso I\u0027d assume the `VSCMD_ARG_TGT_ARCH` one would be the most appropriate here.\n\nEDIT: `VSCMD_VER` actually is documented, but would still not be enough in case of target architecture mismatches.",
                                           "updatedAt":  "2025-05-11T00:09:54Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "AOT publish from `dotnet publish` generates error message, but seems to complete anyway",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115216",
        "createdAt":  "2025-05-01T05:52:57Z",
        "number":  115216,
        "author":  "agocke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-02T10:35:01Z",
        "body":  "This isn\u0027t a well-tested scenario at the moment, but works in simple scenarios.\n\nWe should try to get coverage of more scenarios. One way might be to compile the libraries unit tests into separate Native AOT DLLs and then load and run them in the same process.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqZbrOg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6plus6",
                                           "createdAt":  "2025-05-01T16:53:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-01T16:53:59Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add testing for multiple Native AOT DLLs in the same process",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115406",
        "createdAt":  "2025-05-08T17:23:28Z",
        "number":  115406,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-08T21:53:04Z",
        "body":  "We ship natvis visualizers for strings/arrays on Windows so they look nicer in debuggers.\n\nWe should investigate making a Python script to do the same on LLDB.\n\nMono has https://github.com/mono/mono/blob/0f53e9e151d92944cacab3e24ac359410c606df6/data/lldb/mono.py.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqrwABw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6qsaG4",
                                           "createdAt":  "2025-05-08T17:24:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-08T17:24:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qt6cs",
                                           "createdAt":  "2025-05-08T20:14:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERZzUA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jbevain",
                                                                               "createdAt":  "2025-05-08T23:15:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "\u003e We should investigate making a Python script to do the same on LLDB.\n\nThese two can be done automatically (like natvis).\n\nFor arrays, DWARF should contain a descriptor for the size (reference is how C VLAs compile).\n\nFor strings, the solution is https://lldb.llvm.org/use/variable.html#type-summary, they can be embedded into a section of the object file: https://github.com/adrian-prantl/llvm-project/blob/9a9c1d4a6155a96ce9be494cec7e25731d36b33e/lldb/test/API/functionalities/data-formatter/embedded-summary/main.c.\n\nFinally, there is https://lldb.llvm.org/resources/formatterbytecode.html#formatter-bytecode, which enables more complex (interesting) scenarios.\n\nOne caveat with the embedded summaries/formatters is I haven\u0027t personally confirmed they will auto-load properly from the symbol file, but it should be a simple fix on LLDB side if they don\u0027t. Another caveat is these are very new features, while the python script would work on old LLDBs too. The downside is it requires the user to know about it.",
                                           "updatedAt":  "2025-05-08T20:14:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6quftV",
                                           "createdAt":  "2025-05-08T21:08:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jbevain",
                                           "body":  "Took a quick swing at a minimal Python version of the [natvis file for NativeAOT](https://github.com/dotnet/runtime/blob/0a290e814abaf99f5aaeaacebe76d2e71175db0f/src/coreclr/nativeaot/BuildIntegration/NativeAOT.natvis):\n\nhttps://gist.github.com/jbevain/6a0afe03fa458cda51bc65b8d9b1fda0\n\n\u003cimg width=\"610\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ad5414c9-abc8-452a-a61a-879d8d06f4ca\" /\u003e",
                                           "updatedAt":  "2025-05-08T21:08:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qvAAH",
                                           "createdAt":  "2025-05-08T21:53:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Thanks for the pointers @SingleAccretion, it would be nice if we could do that without extra Python scripts people need to add!\n\nThanks for the script @jbevain!",
                                           "updatedAt":  "2025-05-08T21:53:03Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Natvis equivalent debugging helpers for LLDB",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116191",
        "createdAt":  "2025-06-01T05:15:53Z",
        "number":  116191,
        "author":  "filipnavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDFYPw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "am11",
                                            "createdAt":  "2025-06-01T08:51:13Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-05T03:17:51Z",
        "body":  "PR #115339 enables sharing of the allocation helpers written in assembly between CoreCLR and NativeAOT runtimes. This is a tracking issue for follow-up work that came up during review of the PR:\n\n- [ ] Change managed signatures of new array helpers to take nint ([1](https://github.com/dotnet/runtime/pull/115339/#discussion_r2118277068)) \n- [x] Optimization: Enable the `RhpNewObjectArrayFast` helper on NativeAOT and teach JIT interface to use it.\n- [ ] Cleanup: Extract the `0x40000000` magic constant in `RhpNewObjectArrayFast` to a named constant like `FAST_OBJECT_ARRAY_ALLOCATION_THRESHOLD` ([1](https://github.com/dotnet/runtime/pull/115339#discussion_r2115256845))\n- [ ] Correctness: NativeAOT doesn\u0027t properly handle multi-dimensional arrays larger than 2 GB ([1](https://github.com/dotnet/runtime/pull/115339#discussion_r2118649457), [2]( https://github.com/dotnet/runtime/pull/115339#discussion_r2118653927), [3](https://github.com/dotnet/runtime/pull/115339#discussion_r2114114380))\n- [ ] Optimization: Investigate and benchmark potential improvements to x86 allocation helpers ([1](https://github.com/dotnet/runtime/pull/115339#discussion_r2118295714))",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrm9mBQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ub2YF",
                                           "createdAt":  "2025-06-01T05:16:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-01T05:16:32Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Follow-up work on shared allocation helpers",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116249",
        "createdAt":  "2025-06-03T06:55:54Z",
        "number":  116249,
        "author":  "shen11AA",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-30T21:13:33Z",
        "body":  "Replace the existing mono and li2cpp with pure .NET on the developer toolchain of Nintendo Switch2 (this technical route should not have been proposed or verified before)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsYDSeQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6u3rBX",
                                           "createdAt":  "2025-06-03T07:12:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "See https://github.com/dotnet/runtime/issues/103065#issuecomment-2148996400. There is third-party port for NativeAOT on Nintendo Switch. Currently the development focus of Microsoft is to bring up all major platforms (Android, iOS and browser).",
                                           "updatedAt":  "2025-06-03T07:12:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6u4MWo",
                                           "createdAt":  "2025-06-03T07:46:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shen11AA",
                                           "body":  "\u003e 参见 [#103065 （评论）。](https://github.com/dotnet/runtime/issues/103065#issuecomment-2148996400)Nintendo Switch 上有 NativeAOT 的第三方端口。目前，Microsoft 的开发重点是推出所有主要平台（Android、iOS 和浏览器）。\n\nWe are considering evaluating the feasibility and validation of a pure .NET alternative to existing mono, li2cpp on Nintendo Switch2 (using the official version .NET10)It\u0027s still the same Nintendo Switch game console.",
                                           "updatedAt":  "2025-06-03T07:46:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6u4tmU",
                                           "createdAt":  "2025-06-03T08:24:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "参见https://github.com/dotnet/runtime/issues/103065#issuecomment-2148996400 和 https://fna-xna.github.io/docs/appendix/Appendix-B%3A-FNA-on-Consoles/ ，NS的SDK是私有的，官方SDK不能直接接入。",
                                           "updatedAt":  "2025-06-03T08:24:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6u51pH",
                                           "createdAt":  "2025-06-03T09:42:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shen11AA",
                                           "body":  "At present, without official negotiations and official versions, it seems that relying only on the community version may not be able to incorporate its official .NET version into the Nintendo developer toolchain to provide and promote it to all developers.",
                                           "updatedAt":  "2025-06-03T09:42:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6u7zNt",
                                           "createdAt":  "2025-06-03T12:01:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "There will not be solution provided by Microsoft, only third-party commercial solution. Game engines like Unity/UE5 are all of this category.",
                                           "updatedAt":  "2025-06-03T12:01:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6u8Ocm",
                                           "createdAt":  "2025-06-03T12:33:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shen11AA",
                                           "body":  "However, I am considering not using the existing solutions (i.e., mono, li2cpp).",
                                           "updatedAt":  "2025-06-03T12:33:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6u96vR",
                                           "createdAt":  "2025-06-03T14:11:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "There will not be any information about solution in this repo. Game consoles are specialized OSes with additional SDK required.",
                                           "updatedAt":  "2025-06-03T14:11:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vBT0E",
                                           "createdAt":  "2025-06-03T17:09:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "cc @steveisok",
                                           "updatedAt":  "2025-06-03T17:09:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vLJCN",
                                           "createdAt":  "2025-06-04T07:31:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shen11AA",
                                           "body":  "\u003e 抄送\n\nCalling li2cpp, mono, and third-party XNA together as the community solution can indeed lead to misunderstandings, but I still believe it is necessary to verify and propose discussions, requesting further discussions with the .NET team.",
                                           "updatedAt":  "2025-06-04T07:31:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vMYHj",
                                           "createdAt":  "2025-06-04T09:16:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e Calling li2cpp, mono, and third-party XNA together as the community solution can indeed lead to misunderstandings\n\nil2cpp is developed by Unity, not Microsoft or Mono. MonoGame or Mono on Unity are not developed or owned by Microsoft, either.",
                                           "updatedAt":  "2025-06-04T09:16:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vkFzM",
                                           "createdAt":  "2025-06-05T17:48:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "@shen11AA thanks for your interest! We have not yet produced an official build for developer consoles. If your goal is to use Unity, I would recommend all feedback go in their direction. From what I know, they are working on moving to the modern .NET ecosystem and plan to use its IL2CPP toolchain for console platforms. If not, as others have said, NativeAOT is the runtime to use. It is our most portable runtime and is likely the best fit for the console form factor. For your case, I would recommend looking to the community as groups like [FNA](https://fna-xna.github.io/docs/appendix/Appendix-B%3A-FNA-on-Consoles/), [W4Consoles (Godot)](https://www.w4games.com/w4consoles), and [Defold](https://defold.com/) have been super proactive in getting C#/NativeAOT to run on consoles.  \n\nWe hope to continue making Native AOT as portable and fast as possible. When console requirements can be merged into our mainline supported product, we\u0027re excited to do that. Over time we also want to consolidate community efforts around NativeAOT for consoles into a community-driven fork for each console. That will make it easier to upstream changes, and produce console-specific fixes as needed. At the moment we do not have supported official builds, so console users would have to pull from the forks, but as long as the effort is centralized, this can be a routine process. We\u0027ve already done this for XBox (.NET 9), are slowly crawling through PlayStation, and hope to address Switch after that. \n\nAs to Switch2-specific patches, we haven\u0027t had a chance to see what\u0027s different from the original Switch. We know that community members have successfully built Native AOT for Switch. The next step would be to identify differences between Switch2 and Switch and create patches for those differences.",
                                           "updatedAt":  "2025-06-05T17:48:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vkWO2",
                                           "createdAt":  "2025-06-05T18:07:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shen11AA",
                                           "body":  "\u003e 感谢您的关注！我们尚未为开发人员控制台生成正式版本。如果您的目标是使用 Unity，我建议所有反馈都朝着他们的方向发展。据我所知，他们正在努力迁移到现代 .NET 生态系统，并计划将其 IL2CPP 工具链用于控制台平台。如果不是，正如其他人所说，NativeAOT 就是要使用的运行时。它是我们最可移植的运行时，可能最适合控制台外形规格。对于您的情况，我建议您查看社区，因为 [FNA](https://fna-xna.github.io/docs/appendix/Appendix-B%3A-FNA-on-Consoles/)、[W4Consoles （Godot）](https://www.w4games.com/w4consoles) 和 [Defold](https://defold.com/) 等组织在让 C#/NativeAOT 在控制台上运行方面非常积极主动。\n\u003e \n\u003e 我们希望继续使 Native AOT 尽可能便携和快速。当主机要求可以合并到我们的主线支持产品中时，我们很高兴能做到这一点。随着时间的推移，我们还希望将社区围绕控制台 NativeAOT 的工作整合到每个控制台的社区驱动分支中。这将使上游更改变得更加容易，并根据需要生成特定于控制台的修复。目前我们没有支持的官方版本，因此控制台用户必须从分叉中提取，但只要工作是集中的，这可能是一个例行过程。我们已经为 XBox （.NET 9） 做了这件事，正在慢慢地爬过 PlayStation，并希望在那之后解决 Switch。\n\u003e \n\u003e 至于特定于 Switch2 的补丁，我们还没有机会看到与原始 Switch 有什么不同。我们知道社区成员已经成功构建了 Switch 原生 AOT。下一步是确定 Switch2 和 Switch 之间的差异，并为这些差异创建补丁。\n\nHowever, I feel that it cannot be solely driven by the third-party community (integration of .NET10 into the developer toolchain for Nintendo Switch2, which has the same ARM processor as the previous generation of Nintendo Switch, and increased storage from 32G to 256G) but should be done at the official level.",
                                           "updatedAt":  "2025-06-05T18:07:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vlVmA",
                                           "createdAt":  "2025-06-05T19:17:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-05T19:17:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vnGVT",
                                           "createdAt":  "2025-06-05T21:06:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "\u003e it cannot be solely driven by the third-party community\n\nAgreed, things like support for the ARM instruction set should be upstreamed directly into dotnet/runtime, as long as the instruction extension is standard. ",
                                           "updatedAt":  "2025-06-05T21:06:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6voqsa",
                                           "createdAt":  "2025-06-05T22:42:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shen11AA",
                                           "body":  "\u003e \u003e 它不能完全由第三方社区驱动\n\u003e \n\u003e 同意，只要指令扩展是标准的，对 ARM 指令集的支持等内容就应该直接上游到 dotnet/runtime 中。\n\nNativeAOT (NET10) can currently request a seminar or assistance.",
                                           "updatedAt":  "2025-06-05T22:42:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6v0rJX",
                                           "createdAt":  "2025-06-06T16:35:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "The easiest way to request our assistance with a particular gap is to create an issue on this repo with a description of the problem. If the problem requires info behind NDA, we unfortunately do not yet have centralized forums for that. We will have an update when those are ready. ",
                                           "updatedAt":  "2025-06-06T16:35:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6v0z2U",
                                           "createdAt":  "2025-06-06T16:49:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shen11AA",
                                           "body":  "\u003e 请求我们帮助解决特定差距的最简单方法是在此存储库上创建一个问题，并描述问题。如果问题需要 NDA 背后的信息，很遗憾，我们还没有集中的论坛。当这些准备就绪时，我们将进行更新。\n\nAt present, I have not received a response from the Nintendo developer support department (without approval, it has not been opened to developers, and there is no Nintendo Switch 2 developer kit).",
                                           "updatedAt":  "2025-06-06T16:49:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6v7xOd",
                                           "createdAt":  "2025-06-07T04:21:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shen11AA",
                                           "body":  "Architecture-specific optimization mechanisms » How to customize instruction scheduling algorithms for the enhanced ARMv9 architecture? » Can custom instruction sets (such as SVE2 vector instructions) be enabled to improve throughput? Hardware abstraction layer compatibility » Support strategy for non-standard memory management units (MMUs) Cross-heterogeneous core cluster thread scheduling optimization (demonstrated using a Raspberry Pi cluster) How to achieve low-overhead graphics object encapsulation (avoiding Marshal costs) Alternative to the shader compilation pipeline in the JIT disabled environment",
                                           "updatedAt":  "2025-06-07T04:21:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wCqPc",
                                           "createdAt":  "2025-06-08T03:29:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "I believe https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/docs/optimizing.md#options-related-to-code-generation answers some of your questions related to instruction selection. Others may need dedicated issues and discussion. ",
                                           "updatedAt":  "2025-06-08T03:29:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wCxlu",
                                           "createdAt":  "2025-06-08T04:13:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shen11AA",
                                           "body":  "\u003e 我相信 https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/docs/optimizing.md#options-related-to-code-generation 回答了您与指令选择相关的一些问题。其他 API 可能需要专门的问题和讨论。\n\nIt seems possible to contact them in the name of the .NET team.、I think I might need to contact Nintendo\u0027s developer support department for API-related issues involving the Nintendo Switch2.",
                                           "updatedAt":  "2025-06-08T04:13:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xgNJ5",
                                           "createdAt":  "2025-06-16T20:23:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Feel free to file issues on this repo itself if there are issues related to our dependencies on specific APIs. We can consider integrating flags or modes that use different APIs if one is not available.",
                                           "updatedAt":  "2025-06-16T20:23:37Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  ".NET on game consoles",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116758",
        "createdAt":  "2025-06-17T17:47:58Z",
        "number":  116758,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-18T06:53:33Z",
        "body":  "### Description\n\nWhen publishing an AOT\u0027d application that uses [Microsoft.DotNet.XliffTasks](https://github.com/dotnet/arcade/tree/main/src/Microsoft.DotNet.XliffTasks), the published output creates localized folders for each locale. PublishAot is supposed to be embedding these resources in the `.exe`, so the single executable can be simplied copied to a target machine.\n\n![Image](https://github.com/user-attachments/assets/2de9b3fc-49a2-41f9-be34-9a9ef79734bd)\n\n### Reproduction Steps\n\nUsing a .NET 10 SDK, `dotnet publish` the following app: https://github.com/eerhardt/LocalizedConsole/\n\n```xml\n﻿\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\n\n  \u003cPropertyGroup\u003e\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\n    \u003cTargetFramework\u003enet10.0\u003c/TargetFramework\u003e\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\n    \u003cRootNamespace\u003eAspire.Cli\u003c/RootNamespace\u003e\n    \u003cPublishAot\u003etrue\u003c/PublishAot\u003e\n    \u003cInvariantGlobalization\u003etrue\u003c/InvariantGlobalization\u003e\n  \u003c/PropertyGroup\u003e\n\n  \u003cItemGroup\u003e\n    \u003cPackageReference Include=\"Microsoft.DotNet.XliffTasks\" Version=\"9.0.0-beta.25302.2\" PrivateAssets=\"all\" /\u003e\n\n    \u003cCompile Update=\"Resources\\AddCommandStrings.Designer.cs\"\u003e\n      \u003cDesignTime\u003eTrue\u003c/DesignTime\u003e\n      \u003cAutoGen\u003eTrue\u003c/AutoGen\u003e\n      \u003cDependentUpon\u003eAddCommandStrings.resx\u003c/DependentUpon\u003e\n    \u003c/Compile\u003e\n\n    \u003cEmbeddedResource Update=\"Resources\\AddCommandStrings.resx\"\u003e\n      \u003cXlfSourceFormat\u003eResx\u003c/XlfSourceFormat\u003e\n      \u003cXlfOutputItem\u003eEmbeddedResource\u003c/XlfOutputItem\u003e\n      \u003cSubType\u003eDesigner\u003c/SubType\u003e\n      \u003cGenerator\u003ePublicResXFileCodeGenerator\u003c/Generator\u003e\n      \u003cLastGenOutput\u003eAddCommandStrings.Designer.cs\u003c/LastGenOutput\u003e\n    \u003c/EmbeddedResource\u003e\n  \u003c/ItemGroup\u003e\n\n\u003c/Project\u003e\n```\n\nInspect the `bin\\Release\\net10.0\\win-x64\\publish` folder\n\n### Expected behavior\n\nThe folder should only contain the executable and the symbol file.\n\n### Actual behavior\n\nThe folder also contains a folder for each lanugage, with a `App.resources.dll` in each folder.\n\n### Regression?\n\nN/A\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n```\n❯ dotnet --info\n.NET SDK:\n Version:           10.0.100-preview.5.25277.114\n Commit:            ddf39a1b46\n Workload version:  10.0.100-manifests.7b4c7b0a\n MSBuild version:   17.15.0-preview-25277-114+ddf39a1b4\n\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.26100\n OS Platform: Windows\n RID:         win-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\10.0.100-preview.5.25277.114\\\n\n.NET workloads installed:\n [aspire]\n   Installation Source: VS 17.14.36115.3\n   Manifest Version:    8.2.2/8.0.100\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.aspire\\8.2.2\\WorkloadManifest.json\n   Install Type:              Msi\n\nConfigured to use workload sets when installing new manifests.\nWorkloads are configured to install and update using workload versions, but none were found. Run \"dotnet workload restore\" to install a workload version.\n\nHost:\n  Version:      10.0.0-preview.5.25277.114\n  Architecture: x64\n  Commit:       ddf39a1b46\n\n.NET SDKs installed:\n  9.0.300 [C:\\Program Files\\dotnet\\sdk]\n  10.0.100-preview.5.25277.114 [C:\\Program Files\\dotnet\\sdk]\n\n.NET runtimes installed:\n  Microsoft.AspNetCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 6.0.36 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 8.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 9.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 10.0.0-preview.5.25277.114 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 6.0.36 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 8.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 8.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 9.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 10.0.0-preview.5.25277.114 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.WindowsDesktop.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n  Microsoft.WindowsDesktop.App 6.0.36 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n  Microsoft.WindowsDesktop.App 8.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n  Microsoft.WindowsDesktop.App 8.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n  Microsoft.WindowsDesktop.App 9.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n  Microsoft.WindowsDesktop.App 10.0.0-preview.5.25277.114 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n\nOther architectures found:\n  x86   [C:\\Program Files (x86)\\dotnet]\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\n\nEnvironment variables:\n  Not set\n\nglobal.json file:\n  Not found\n\nLearn more:\n  https://aka.ms/dotnet/info\n\nDownload .NET:\n  https://aka.ms/dotnet/download\n```\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsdQgsw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6xstwO",
                                           "createdAt":  "2025-06-17T17:52:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-17T17:52:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6x1CCz",
                                           "createdAt":  "2025-06-18T09:44:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXHgVA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eerhardt",
                                                                               "createdAt":  "2025-06-18T20:33:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "This will also likely be fixed by #108909 (cc @sbomer).",
                                           "updatedAt":  "2025-06-18T09:44:17Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "PublishAot creates localized folders when using Microsoft.DotNet.XliffTasks",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117309",
        "createdAt":  "2025-07-04T08:21:32Z",
        "number":  117309,
        "author":  "dadavadd",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-04T11:04:29Z",
        "body":  "Hi. I am dealing with the problem of mapping local variables and arguments with returned arguments at functions in IDA Pro. That is, type mapping.\n\nMy goal is that when I load a binary into IDA Pro, it will automatically get all the type information it needs in a .pdb file, without having to manually convert pointers to structures from the developer. For example:\n\n![Image](https://github.com/user-attachments/assets/4f24ce3f-cd7a-46a9-9298-fcc066f58b9a)\n\nWhat\u0027s happening now:\n```csharp\npublic class Person\n{\n    public int Id { get; set; }\n    public int Age { get; set; }\n    public string Name { get; set; }\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        Person person = new Person\n        {\n            Id = 1,\n            Name = \"Test\",\n            Age = 15\n        };\n\n        PrintPersonAge(person);\n    }\n\n    [MethodImpl(MethodImplOptions.NoInlining)]\n    private static void PrintPersonAge(Person person)\n    {\n        Console.WriteLine(person.Age);\n    }\n}\n```\nIn the decompiled version from IDA, the arguments are not automatically inserted, although they are specified in Local Types.\n```asm\nrepro_Program__PrintPersonAge proc near\n\nvar_8= byte ptr -8\n\npush    rbp\npush    rdi\nsub     rsp, 28h\nlea     rbp, [rsp+38h+var_8]\nmov     [rbp+10h], rcx\nnop\nmov     rcx, [rbp+10h]\ncall    repro_Person__get_Age\nmov     [rbp-0Ch], eax\nmov     ecx, [rbp-0Ch]\ncall    System_Console_System_Console__WriteLine_7\nnop\nnop\nadd     rsp, 28h\npop     rdi\npop     rbp\nretn\nrepro_Program__PrintPersonAge endp\n```\n\nI decided to use cvdump.exe to see what data is generated, and saw a strange thing:\n\n![Image](https://github.com/user-attachments/assets/bd0c7a2e-b607-444a-a189-3a7f37aee25c)\n\nThe type of the process was not specified. I decided to find out what the problem was and it was because the methodTypeIndex variable was not used in the EmitSubprogramInfo method in the “ILCompiler.Compiler\\Compiler\\ObjectWriter\\CodeView\\CodeViewSymbolsBuilder.cs” file.\n\n![Image](https://github.com/user-attachments/assets/d858d3cb-2402-4d4c-a756-688c37c9b922)\n\nI made the variable write but an additional problem appeared. In the following dump I saw this:\n![Image](https://github.com/user-attachments/assets/7cb85ea8-5763-4da1-a181-60f42c32478c)\n![Image](https://github.com/user-attachments/assets/2859fd91-5ee3-442c-9c85-c5480970d7cc)\nThe reference pointed to a completely empty forward ref type, when the full type was under a completely different number:\n![Image](https://github.com/user-attachments/assets/c896ea75-6f49-407b-8ad0-adaf684e8332)\n\nBUT! Some structures and classes are successfully caught by IDA Pro and shown in the disassembler. That is, after my change, this structure arguments were successfully inserted automatically.\n\n![Image](https://github.com/user-attachments/assets/6a132ba8-94ed-4908-b62a-1bb3cc97f483)\n\nI think the problem is in the file \"ILCompiler.Compiler\\Compiler\\UserDefinedTypeDescriptor.cs\" and it has something to do with:\n```csharp\n private Dictionary\u003cTypeDesc, uint\u003e _knownTypes = new Dictionary\u003cTypeDesc, uint\u003e();\n private Dictionary\u003cTypeDesc, uint\u003e _completeKnownTypes = new Dictionary\u003cTypeDesc, uint\u003e();\n``` \nMost likely, an empty copy of the class is generated initially, so methodTypeIndex may point to it, but I could be wrong. I would be grateful if you could look into this problem.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtPABBA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc608AEE",
                                           "createdAt":  "2025-07-04T11:04:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZS30w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dadavadd",
                                                                               "createdAt":  "2025-07-04T11:27:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "The method type missing is probably the reason why native debuggers show all methods as not taking any parameters in stack traces. The parameter types however do show up as part of local info, so it doesn\u0027t affect debugging method bodies.\n\nFixing this up is not a huge priority because of how little it affects debugging scenarios. But I\u0027d be happy to review a PR that fixes it.",
                                           "updatedAt":  "2025-07-04T11:04:20Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Displays the names of local variables, method arguments and method return values in IDA Pro. (NativeAOT)",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118298",
        "createdAt":  "2025-08-01T23:53:23Z",
        "number":  118298,
        "author":  "jtschuster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-03T09:43:40Z",
        "body":  "NativeAOT targets define the `CopyNativeBinary` target which copies the linked binary to the publish directory after the Publish target. It also adds the native binary to the `IntermediateAssembly` itemgroup, which gets copied to the publish directory in `_CopyResolvedFilesToPublishPreserveNewest`.\n\nhttps://github.com/dotnet/runtime/blob/78abe1053d1a1d2134a11254eb8e0216148b528e/src/coreclr/nativeaot/BuildIntegration/Microsoft.NETCore.Native.Publish.targets#L13-L35\n\nIf the goal of overwriting `IntermediateAssembly` was to prevent the managed .dll from being copied over, we could instead set `CopyBuildOutputToPublishDirectory=false` and let `CopyNativeBinary` copy the file to the publish directory. Or we could remove `CopyNativeBinary` (or make it an empty target - some projects do reference it, but almost exclusively to run after it, not before). But we should avoid a double-write.\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOu6dJjw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc67hIkL",
                                           "createdAt":  "2025-08-01T23:54:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-01T23:54:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67p0mP",
                                           "createdAt":  "2025-08-03T09:43:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Another one that would likely be fixed with #108909 (cc @sbomer)",
                                           "updatedAt":  "2025-08-03T09:43:40Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "NativeAOT targets copies native binary to publish dir twice",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118505",
        "createdAt":  "2025-08-07T23:47:34Z",
        "number":  118505,
        "author":  "EgorBo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODKfusg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MitchRazga",
                                            "createdAt":  "2025-08-08T12:57:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HighPerfDotNet",
                                            "createdAt":  "2025-08-08T13:55:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jasper-d",
                                            "createdAt":  "2025-08-08T17:52:01Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Sergio0694",
                                            "createdAt":  "2025-08-08T18:20:05Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-08-10T07:01:15Z",
        "body":  "Today, CoreCLR heavily relies on Dynamic PGO to inline delegates even when in theory it doesn\u0027t need any profile when the target is known. Since normally NativeAOT doesn\u0027t have any profile, it basically almost never inlines delegates. We can workaround it by synthesizing a fake static pgo data during ILC compilation where for every delegate invocation site we try to detect if there is only one (or a few) address-taken methods exist with the same signature, so then ILC can create such a fake static profile and JIT will use its existing infrastructure to perform a GDV-based inlining for delegates.\n\nExample:\n```cs\n[MethodImpl(MethodImplOptions.NoInlining)]\nstatic void Test() =\u003e Invoke(() =\u003e new Program());\n\nstatic void Invoke(Func\u003cProgram\u003e func) =\u003e func(); // only one method matches this delegate invoke\n```\n\n### CoreCLR with Dynamic PGO:\n```asm\nG_M24707_IG01:  ;; offset=0x0000\n       push     rbx\n       sub      rsp, 32\nG_M24707_IG02:\n       mov      rcx, 0x26622C001F8 \n       mov      rax, gword ptr [rcx]\n       test     rax, rax\n       je       SHORT G_M24707_IG05\nG_M24707_IG03:\n       mov      rcx, 0x7FFA8B7F0948 \n       cmp      qword ptr [rax+0x18], rcx\n       jne      SHORT G_M24707_IG06\nG_M24707_IG04:\n       add      rsp, 32\n       pop      rbx\n       ret      \n\nG_M24707_IG05:\n       \u003ccold section\u003e\n```\n(The delegate was inlined and the `new Program` allocation was optimized out as unused)\n_PS: Presumably for this specific case we don\u0027t even need the GDV check, but that is irrelevant to the issue._\n\n### NativeAOT codegen:\n```asm\n\nG_M24707_IG01:  ;; offset=0x0000\n       push     rbx\n       sub      rsp, 32\nG_M24707_IG02:  ;; offset=0x0005\n       mov      rcx, qword ptr [(reloc 0x4000000000420b10)]\n       mov      rax, gword ptr [rcx+0x10]\n       test     rax, rax\n       jne      SHORT G_M24707_IG04\nG_M24707_IG03:  ;; offset=0x0015\n       lea      rcx, [(reloc 0x4000000000420b80)]      ; System.Func`1[Program]\n       call     CORINFO_HELP_NEWSFAST\n       mov      rbx, rax\n       mov      rcx, rbx\n       lea      rdx, gword ptr [(reloc 0x4000000000420b40)]      ; \u0027Frozen Program.\u003c\u003ec object\u0027\n       call     CORINFO_HELP_READYTORUN_DELEGATE_CTOR\n       mov      rcx, qword ptr [(reloc 0x4000000000420b10)]\n       lea      rcx, [rcx+0x10]\n       mov      rdx, rbx\n       call     CORINFO_HELP_ASSIGN_REF\n       mov      rax, rbx\nG_M24707_IG04:  ;; offset=0x0049\n       mov      rcx, gword ptr [rax+0x08]\n       call     [rax+0x20]System.Func`1[System.__Canon]:Invoke():System.__Canon:this\n       nop      \nG_M24707_IG05:  ;; offset=0x0051\n       add      rsp, 32\n       pop      rbx\n       ret \n```\nNot inlined, the non-inlined target allocates since the return value escapes.\n\ncc @dotnet/ilc-contrib ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvLjBag==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc68t60e",
                                           "createdAt":  "2025-08-07T23:48:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-07T23:48:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68t7Rx",
                                           "createdAt":  "2025-08-07T23:49:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-07T23:49:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68t_Me",
                                           "createdAt":  "2025-08-07T23:57:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Alternatively, we can just create a new JIT-VM API `getExactMethods` similar to `getExactClasses` if we don\u0027t want to deal with a fake profile infra - it\u0027s a bit messy.",
                                           "updatedAt":  "2025-08-07T23:57:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68uJtg",
                                           "createdAt":  "2025-08-08T00:29:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e we try to detect if there is only one (or a few) address-taken methods exist with the same signature\n\nI do not expect that this would work well in cases people care about. It is very common to create same delegate over lambda with the same signature. For example, take the Linq scenario that we have discussed in the internal email thread. All callbacks passed into `Enumerable.Where` have the same signature.",
                                           "updatedAt":  "2025-08-08T00:29:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68uMFq",
                                           "createdAt":  "2025-08-08T00:35:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e \u003e we try to detect if there is only one (or a few) address-taken methods exist with the same signature\n\u003e \n\u003e I do not expect that this would work well in cases people care about. It is very common to create same delegate over lambda with the same signature. For example, take the Linq scenario that we have discussed in the internal email thread. All callbacks passed into `Enumerable.Where` have the same signature.\n\nI didn\u0027t target that specific case, I presume lambdas are still popular outside of LINQ as well. But even for LINQ, I think it might be possible that certain APIs to be quite unique and ILC can, in theory, make speculative guesses (or even with help of AI? 🙂) what kind of lambda is fed into `SelectMany` which, say, is used only once in the current app. The benefit of the fake static PGO is that it doesn\u0027t have to be precise, JIT will filter out irrelevant (stale) profile and the fallback is always kept.",
                                           "updatedAt":  "2025-08-08T00:36:28Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Synthesize Static PGO for NativeAOT (Delegates)",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118788",
        "createdAt":  "2025-08-15T17:08:30Z",
        "number":  118788,
        "author":  "jevansaks",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-20T14:13:17Z",
        "body":  "When turning on ILC\u0027s detailed error output (TrimmerSingleWarn=false), we get an output line per IL error which is great. But there\u0027s two tweaks I\u0027d like to request:\n\n1. Format the error output to align with MSBuild\u0027s error output. \n\nOur build system filters output to errors of a particular format. It looks for almost all of the formats in https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-diagnostic-format-for-tasks?view=vs-2022, but it expects the (line) or (line,col) for the origin. Thus, my request is that the IL errors be formatted not like:\n\n`ILC error IL1005: ...`\n\nBut instead like:\n\n`ILC(0): error IL1005: ...`\n\n2. Provide the originating assembly for errors like IL1005\n\nWhen we get IL1005 the message is only the originating namespace and method, but not the assembly. Especially in cases like C#/WinRT which generate source into your assembly in the same namespace, this leaves me hunting around for which assembly is having the problem. E.g.:\n\n`ILC error IL1005: WinRT.AuthoringMetadataTypeInitializer.GetMetadataTypeMapping(Type): Method will always throw because: Failed to load type \u0027X\u0027 from assembly \u0027Y\u0027 `\n\nIf we could just add the originating assembly here, that would help a lot:\n\n`ILC error IL1005: AssemblyZZZ!WinRT.AuthoringMetadataTypeInitializer.GetMetadataTypeMapping(Type): Method will always throw because: Failed to load type \u0027X\u0027 from assembly \u0027Y\u0027 `",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvkcq7A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6-RY0T",
                                           "createdAt":  "2025-08-15T17:16:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-15T17:16:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-RmbY",
                                           "createdAt":  "2025-08-15T17:42:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e ILC(0)\n\n`(0)` looks weird. There are many error messages produced by established tools for Windows that do not have the line numbers. For example, `link test.obj` produces `LINK : fatal error LNK1181: cannot open input file \u0027test.obj\u0027`. Can we use formatting like that?",
                                           "updatedAt":  "2025-08-15T17:42:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-Ryrs",
                                           "createdAt":  "2025-08-15T18:07:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEeeBsQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2025-08-15T18:29:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jevansaks",
                                           "body":  "Yes, it looks like if there\u0027s a space after the tool name that will work, so could we do:\n\n```\nILC : error IL1005: AssemblyZZZ!WinRT.AuthoringMetadataTypeInitializer.GetMetadataTypeMapping(Type): Method will always throw because: Failed to load type \u0027X\u0027 from assembly \u0027Y\u0027\n```",
                                           "updatedAt":  "2025-08-15T18:07:12Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Request: Tweak the ILC error output to improve diagnosability",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119155",
        "createdAt":  "2025-08-27T23:40:44Z",
        "number":  119155,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-28T05:14:21Z",
        "body":  "While debugging a testcase I saw that sometimes duplicate IL2041 warnings were emitted. I believe this is because they are logged inside of `CreateValueFromKey` of a `LockFreeReaderHashtable`. As far as I understand, `CreateValueFromKey` may be called in parallel if the hashtable is being populated from multiple readers, so should not have side-effects.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwIgjNA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7AiCM0",
                                           "createdAt":  "2025-08-27T23:41:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-27T23:41:47Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ILC race condition can result in duplicate warnings",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119166",
        "createdAt":  "2025-08-28T05:38:41Z",
        "number":  119166,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-12T22:14:39Z",
        "body":  "## Repro steps\n\nFollow instructions at https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/nativeaot.md#building-packages with current .NET 10 RC1\n\n## Result\n\n```\nC:\\test\u003edotnet publish -c release --packages pkg\n  Determining projects to restore...\n  All projects are up-to-date for restore.\nc:\\net10-rc1\\sdk\\10.0.100-rc.1.25425.114\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.target\ns(345,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [C:\\te\nst\\test.csproj]\n  test -\u003e C:\\test\\bin\\release\\net10.0\\win-x64\\test.dll\nC:\\test\\pkg\\microsoft.dotnet.ilcompiler\\10.0.0-dev\\build\\Microsoft.DotNet.ILCompiler.SingleEntry.targets(60,5): warning\n : Delete explicit \u0027Microsoft.DotNet.ILCompiler\u0027 package reference in your project file to avoid versioning problems. [\nC:\\test\\test.csproj]\nC:\\test\\pkg\\microsoft.dotnet.ilcompiler\\10.0.0-dev\\build\\Microsoft.NETCore.Native.Publish.targets(70,5): error : The Pr\nivateSdkAssemblies ItemGroup is required for _ComputeAssembliesToCompileToNative [C:\\test\\test.csproj]\n\nC:\\test\u003etype nuget.config\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cconfiguration\u003e\n  \u003cpackageSources\u003e\n    \u003cadd key=\"local\" value=\"C:\\runtime\\artifacts\\packages\\Release\\Shipping\" /\u003e\n    \u003cadd key=\"dotnet10\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet10/nuget/v3/index.json\" /\u003e\n  \u003c/packageSources\u003e\n\u003c/configuration\u003e\n\nC:\\test\u003etype test.csproj\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\n\n  \u003cPropertyGroup\u003e\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\n    \u003cTargetFramework\u003enet10.0\u003c/TargetFramework\u003e\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\n    \u003cPublishAot\u003etrue\u003c/PublishAot\u003e\n    \u003cInvariantGlobalization\u003etrue\u003c/InvariantGlobalization\u003e\n  \u003c/PropertyGroup\u003e\n\n  \u003cItemGroup\u003e\n    \u003cPackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"10.0.0-dev\" /\u003e\n  \u003c/ItemGroup\u003e\n\u003c/Project\u003e\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw-tnRw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7Ao_Bi",
                                           "createdAt":  "2025-08-28T05:39:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-28T05:39:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Ao_G5",
                                           "createdAt":  "2025-08-28T05:39:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Regressed by https://github.com/dotnet/runtime/pull/116882 . @jkoritzinsky Could you please take a look?",
                                           "updatedAt":  "2025-08-28T05:39:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7D62dH",
                                           "createdAt":  "2025-09-12T22:14:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@agocke is rewriting naot targets",
                                           "updatedAt":  "2025-09-12T22:14:39Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Instructions for using locally built NativeAOT builds are broken",
        "labels":  [
                       "untriaged",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119187",
        "createdAt":  "2025-08-28T19:38:55Z",
        "number":  119187,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:04:30Z",
        "body":  "```\nSystem.AggregateException: One or more errors occurred. (Insufficient memory to continue the execution of the program.)\n ---\u003e System.OutOfMemoryException: Insufficient memory to continue the execution of the program.\n   at System.Threading.Thread.StartCore() + 0xd5\n   at Test_GetTotalAllocatedBytes.\u003c\u003ec__DisplayClass10_0.\u003cTestAnotherThread\u003eb__0() + 0x89\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread, ExecutionContext, ContextCallback, Object) + 0x8b\n```\n\n## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1133784\nBuild error leg or test failing: GC/API/GC/GetTotalAllocatedBytes/GetTotalAllocatedBytes.cmd\nPull request: https://github.com/dotnet/runtime/pull/119167\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": [\"OutOfMemoryException\",\"at Test_GetTotalAllocatedBytes\"],\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133784\r\n**Error message validated:** `[OutOfMemoryException at Test_GetTotalAllocatedBytes`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 8/28/2025 7:39:21 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1152976](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152976)|dotnet/runtime|[GC/API/GC/GetTotalAllocatedBytes/GetTotalAllocatedBytes.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152976\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31855020\u0026resultId=112560)||\r\n|[1152496](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152496)|dotnet/runtime|[GC/API/GC/GetTotalAllocatedBytes/GetTotalAllocatedBytes.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152496\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31841858\u0026resultId=112690)||\r\n|[1152168](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152168)|dotnet/runtime|[GC/API/GC/GetTotalAllocatedBytes/GetTotalAllocatedBytes.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152168\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31832544\u0026resultId=113220)||\r\n|[1151112](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151112)|dotnet/runtime|[GC/API/GC/GetTotalAllocatedBytes/GetTotalAllocatedBytes.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151112\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31804136\u0026resultId=113237)||\r\n|[1151036](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151036)|dotnet/runtime|[GC/API/GC/GetTotalAllocatedBytes/GetTotalAllocatedBytes.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151036\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31802068\u0026resultId=111249)||\r\n|[1148552](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148552)|dotnet/runtime|[GC/API/GC/GetTotalAllocatedBytes/GetTotalAllocatedBytes.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148552\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31725504\u0026resultId=112325)||\r\n|[1147762](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147762)|dotnet/runtime|[GC/API/GC/GetTotalAllocatedBytes/GetTotalAllocatedBytes.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147762\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31687246\u0026resultId=112376)|dotnet/runtime#118371|\r\n|[1145282](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145282)|dotnet/runtime|[GC/API/GC/GetTotalAllocatedBytes/GetTotalAllocatedBytes.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145282\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31601340\u0026resultId=103492)|dotnet/runtime#119385|\r\n|[1144353](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144353)|dotnet/runtime|[GC/API/GC/GetTotalAllocatedBytes/GetTotalAllocatedBytes.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144353\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31572496\u0026resultId=112791)||\r\n|[1141887](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141887)|dotnet/runtime|[GC/API/GC/GetTotalAllocatedBytes/GetTotalAllocatedBytes.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141887\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31478432\u0026resultId=112213)||\r\n|[1139479](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139479)|dotnet/runtime|[GC/API/GC/GetTotalAllocatedBytes/GetTotalAllocatedBytes.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139479\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31393088\u0026resultId=102080)||\r\n|[1138431](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138431)|dotnet/runtime|[GC/API/GC/GetTotalAllocatedBytes/GetTotalAllocatedBytes.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138431\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31359044\u0026resultId=103185)|dotnet/runtime#115335|\r\n|[1137515](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1137515)|dotnet/runtime|[GC/API/GC/GetTotalAllocatedBytes/GetTotalAllocatedBytes.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1137515\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31328796\u0026resultId=113219)||\r\n|[1134449](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134449)|dotnet/runtime|[GC/API/GC/GetTotalAllocatedBytes/GetTotalAllocatedBytes.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134449\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31225576\u0026resultId=110189)||\r\n|[1133784](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133784)|dotnet/runtime|[GC/API/GC/GetTotalAllocatedBytes/GetTotalAllocatedBytes.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133784\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31206908\u0026resultId=112136)|dotnet/runtime#119167|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|7|15|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwM43iA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7Azi5o",
                                           "createdAt":  "2025-08-28T19:45:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The test is starting and joining threads in a tight loop: https://github.com/dotnet/runtime/blob/da520374f65363f1f85f629da6fe0133a99ebae7/src/tests/GC/API/GC/GetTotalAllocatedBytes.cs#L113-L124 . We may have a problem with cleaning up dead threads fast enough.",
                                           "updatedAt":  "2025-08-28T19:45:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AzjeI",
                                           "createdAt":  "2025-08-28T19:46:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-28T19:46:20Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[NativeAOT] Test_GetTotalAllocatedBytes test fails with OutOfMemoryException",
        "labels":  [
                       "arch-arm32",
                       "os-linux",
                       "blocking-clean-ci",
                       "untriaged",
                       "area-NativeAOT-coreclr",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119321",
        "createdAt":  "2025-09-03T14:28:02Z",
        "number":  119321,
        "author":  "NinoFloris",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-04T20:57:07Z",
        "body":  "Tangential follow up on https://github.com/dotnet/runtime/issues/116301\n\nIf we cannot prevent constructs like typeof from marking structs as boxed we should make it possible to limit what a boxed struct implies.\n\nGiven the following code I would expect there to be no record of __GetFieldHelper in the mstat:\n\n```csharp\nusing System.Diagnostics.CodeAnalysis;\nusing System.Runtime.CompilerServices;\n\n_ = TypeOf\u003cFoo\u003e();\n\n[MethodImpl(MethodImplOptions.NoInlining)]\nstatic Type TypeOf\u003cT\u003e() =\u003e typeof(T);\n\nstruct Foo\n{\n    public override int GetHashCode() =\u003e throw new NotSupportedException();\n    public override bool Equals([NotNullWhen(true)] object? obj) =\u003e throw new NotSupportedException();\n}\n```\n\nOnce fixed it would be \\*a* mitigation for large __GetFieldHelpers being emitted.\n\nIdeally though there would be an attribute like `OmitObjectMethodImpls` (or something more narrow like `OmitObjectEquality`) which could be applied to a type (or module even?).\n\nSomething that would make runtimes do the cheapest thing to produce a NotSupportedException in object\u0027s virtual methods for the affected types.\n\nFor NativeAOT that could be a bit flag in the type info or some __GetFieldHelper sentinel return value.\n\nHaving an intrinsic attribute would also be preferable to needing to override two or more methods (though worst case this could be handled by a source generator).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwgzQdA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7Bs65s",
                                           "createdAt":  "2025-09-03T15:41:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-03T15:41:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Bw9JC",
                                           "createdAt":  "2025-09-03T21:16:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "The reason we currently don\u0027t do that is because people sometimes do:\n\n```csharp\nstruct Foo\n{\n    public override int GetHashCode() =\u003e base.GetHashCode();\n}\n```\n\nand then we need to still make sure `__GetFieldHelper` is there. If we add analysis that ensures there\u0027s not a single `call ValueType::GetHashCode`/`call ValueType::Equals` instruction in the whole program, we could get rid of the override.",
                                           "updatedAt":  "2025-09-03T21:16:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BxfZg",
                                           "createdAt":  "2025-09-03T22:11:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "Wouldn\u0027t analyzing whether base is used in the overriding body be better? It\u0027d just be another form of method dependency analysis. I\u0027m surprised it\u0027s not being done already, maybe I\u0027m missing some hidden complexity with that approach?",
                                           "updatedAt":  "2025-09-03T22:11:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B1fYe",
                                           "createdAt":  "2025-09-04T05:55:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Wouldn\u0027t analyzing whether base is used in the overriding body be better? It\u0027d just be another form of method dependency analysis. I\u0027m surprised it\u0027s not being done already, maybe I\u0027m missing some hidden complexity with that approach?\n\nWe support compiling arbitrary IL, not just subset that C# compiler emits. In IL, it\u0027s possible to direct non-virtual call to a base method from anywhere (one is not limited by what the `base` keyword allows in C#). We try to be careful not to introduce optimizations that break non-C# languages (or a potential future C# version that could advantage of this).",
                                           "updatedAt":  "2025-09-04T05:55:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CDNB0",
                                           "createdAt":  "2025-09-04T20:51:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEg7IMg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichalStrehovsky",
                                                                               "createdAt":  "2025-09-04T21:12:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "Right, I forgot that you can access any base implementations of virtual methods from anywhere that way.\n\nSo the most permissive condition that\u0027s still legal would be to check there are no direct calls to the ValueType equality methods.\n\nWhere callvirts could be permitted by doing more analysis to check that all structs have implementations for object equality (where base calls would be caught by being a direct call again)?",
                                           "updatedAt":  "2025-09-04T20:57:07Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[NativeAOT] don\u0027t generate __GetFieldHelper if \u0027boxed\u0027 struct overrides object Equals",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119330",
        "createdAt":  "2025-09-03T19:42:16Z",
        "number":  119330,
        "author":  "ChrisKoebke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-04T15:14:07Z",
        "body":  "### Description\n\nWe are currently having problems building a C# class lib as a native .a library for iOS.\n\n**Installed workloads:**\n```\nInstallierte Workload-ID      Manifestversion        Installationsquelle\nios                           18.5.9215/9.0.100      SDK 9.0.300        \nmaui                          9.0.82/9.0.100         SDK 9.0.300 \n```\n\n**Build command:**\n```\nchris@Air-von-Chris minimal-ios-lib % dotnet publish -r ios-arm64 -c Release\nWiederherstellung abgeschlossen (0,2s)\n  minimal-ios-lib Erfolgreich (1,5s) → bin/Release/net9.0-ios/ios-arm64/minimal-ios-lib.dll\n```\n\nIt does build, but it\u0027s not creating a native library.\n\n**Csproj**\n```xml\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\n\n  \u003cPropertyGroup\u003e\n    \u003cTargetFramework\u003enet9.0-ios\u003c/TargetFramework\u003e\n    \u003cRuntimeIdentifier\u003eios-arm64\u003c/RuntimeIdentifier\u003e\n    \u003cOutputType\u003eLibrary\u003c/OutputType\u003e\n    \u003cPublishAot\u003etrue\u003c/PublishAot\u003e\n    \u003cNativeLib\u003eStatic\u003c/NativeLib\u003e\n  \u003c/PropertyGroup\u003e\n\n\u003c/Project\u003e\n\n```\n\n**Minimal repro:**\n[Archiv.zip](https://github.com/user-attachments/files/22126129/Archiv.zip)\n\n### Reproduction Steps\n\n```\ndotnet publish -r ios-arm64 -c Release\n```\n\n[Archiv.zip](https://github.com/user-attachments/files/22126177/Archiv.zip)\n\n### Expected behavior\n\nProduce a .a native library for iOS\n\n### Actual behavior\n\nOnly writes out a .dll, which we can\u0027t use in our Swift app\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwfb4ew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7BxbzG",
                                           "createdAt":  "2025-09-03T22:05:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-03T22:05:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BxcDD",
                                           "createdAt":  "2025-09-03T22:06:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-03T22:06:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BxldG",
                                           "createdAt":  "2025-09-03T22:24:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "See https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/libraries -- static libraries are not currently supported.",
                                           "updatedAt":  "2025-09-03T22:24:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B1OkS",
                                           "createdAt":  "2025-09-04T05:31:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChrisKoebke",
                                           "body":  "Thank you for clarifying!\n\nSo, there is no way right now to use C# as a language for shared code between iOS and Android?\n\nWasn\u0027t that working in .NET 8 or so?",
                                           "updatedAt":  "2025-09-04T05:31:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B1PyW",
                                           "createdAt":  "2025-09-04T05:32:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "iOS should be able to use shared libraries, you just need to bundle them into a framework. https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/ios-like-platforms/creating-and-consuming-custom-frameworks should have instructions on how to do that.",
                                           "updatedAt":  "2025-09-04T05:32:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B66o3",
                                           "createdAt":  "2025-09-04T12:23:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChrisKoebke",
                                           "body":  "Thank you, we were missing the `\u003cPublishAotUsingRuntimePack\u003etrue\u003c/PublishAotUsingRuntimePack\u003e` and got the .a file built.\n\nWe now made a script that builds a .xcframework out of this and it works so far, but throws a bunch of errors with missing .NET system functions.\n\n```\nUndefined symbol: _GlobalizationNative_CloseSortHandle\n\nUndefined symbol: _GlobalizationNative_GetDefaultLocaleName\n\nUndefined symbol: _GlobalizationNative_GetDefaultLocaleNameNative\n\nUndefined symbol: _GlobalizationNative_GetLocaleInfoGroupingSizes\n\nUndefined symbol: _GlobalizationNative_GetLocaleInfoInt\n\nUndefined symbol: _GlobalizationNative_GetLocaleInfoIntNative\n\nUndefined symbol: _GlobalizationNative_GetLocaleInfoPrimaryGroupingSizeNative\n\nUndefined symbol: _GlobalizationNative_GetLocaleInfoSecondaryGroupingSizeNative\n\nUndefined symbol: _GlobalizationNative_GetLocaleInfoString\n\nUndefined symbol: _GlobalizationNative_GetLocaleInfoStringNative\n\nUndefined symbol: _GlobalizationNative_GetLocaleName\n\nUndefined symbol: _GlobalizationNative_GetLocaleNameNative\n\nUndefined symbol: _GlobalizationNative_GetSortHandle\n\nUndefined symbol: _GlobalizationNative_IndexOf\n\nUndefined symbol: _GlobalizationNative_IndexOfNative\n\nUndefined symbol: _GlobalizationNative_InitOrdinalCasingPage\n\nUndefined symbol: _GlobalizationNative_IsPredefinedLocale\n\nUndefined symbol: _GlobalizationNative_IsPredefinedLocaleNative\n\nUndefined symbol: _GlobalizationNative_LastIndexOf\n\nUndefined symbol: _GlobalizationNative_StartsWith\n\nUndefined symbol: _GlobalizationNative_StartsWithNative\n\nUndefined symbol: _NativeRuntimeEventSource_LogExceptionThrown\n\nUndefined symbol: _RhAllocateNewArray\n\nUndefined symbol: _RhAllocateNewObject\n\nUndefined symbol: _RhAllocateThunksMapping\n\nUndefined symbol: _RhBulkMoveWithWriteBarrier\n\nUndefined symbol: _RhCreateCrashDumpIfEnabled\n\nUndefined symbol: _RhCurrentOSThreadId\n\nUndefined symbol: _RhFindBlob\n\nUndefined symbol: _RhFindMethodStartAddress\n\nUndefined symbol: _RhGetCodeTarget\n\nUndefined symbol: _RhGetCommonStubAddress\n\nUndefined symbol: _RhGetCrashInfoBuffer\n\nUndefined symbol: _RhGetGcCollectionCount\n\nUndefined symbol: _RhGetKnobValues\n\nUndefined symbol: _RhGetMaxGcGeneration\n\nUndefined symbol: _RhGetMemoryInfo\n\nUndefined symbol: _RhGetModuleFileName\n\nUndefined symbol: _RhGetOSModuleFromPointer\n\nUndefined symbol: _RhGetProcessCpuCount\n\nUndefined symbol: _RhGetRuntimeVersion\n\nUndefined symbol: _RhGetTargetOfUnboxingAndInstantiatingStub\n\nUndefined symbol: _RhGetThreadStaticStorage\n\nUndefined symbol: _RhHandleFree\n\nUndefined symbol: _RhHandleGetDependent\n\nUndefined symbol: _RhHandleSet\n\nUndefined symbol: _RhNewString\n\nUndefined symbol: _RhReRegisterForFinalize\n\nUndefined symbol: _RhRegisterFrozenSegment\n\nUndefined symbol: _RhSetThreadExitCallback\n\nUndefined symbol: _RhSpinWait\n\nUndefined symbol: _RhSuppressFinalize\n\nUndefined symbol: _RhUpdateFrozenSegment\n\nUndefined symbol: _RhYield\n\nUndefined symbol: _RhpAssignRef\n\nUndefined symbol: _RhpAssignRefArm64\n\nUndefined symbol: _RhpByRefAssignRefArm64\n\nUndefined symbol: _RhpCallCatchFunclet\n\nUndefined symbol: _RhpCallFilterFunclet\n\nUndefined symbol: _RhpCallFinallyFunclet\n\nUndefined symbol: _RhpCallPropagateExceptionCallback\n\nUndefined symbol: _RhpCheckedAssignRefArm64\n\nUndefined symbol: _RhpCheckedLockCmpXchg\n\nUndefined symbol: _RhpCheckedXchg\n\nUndefined symbol: _RhpCollect\n\nUndefined symbol: _RhpCopyContextFromExInfo\n\nUndefined symbol: _RhpCreateTypeManager\n\nUndefined symbol: _RhpEHEnumInitFromStackFrameIterator\n\nUndefined symbol: _RhpEHEnumNext\n\nUndefined symbol: _RhpEndNoGCRegion\n\nUndefined symbol: _RhpFallbackFailFast\n\nUndefined symbol: _RhpGcPoll\n\nUndefined symbol: _RhpGcSafeZeroMemory\n\nUndefined symbol: _RhpGetClasslibFunctionFromCodeAddress\n\nUndefined symbol: _RhpGetClasslibFunctionFromEEType\n\nUndefined symbol: _RhpGetCurrentThreadStackTrace\n\nUndefined symbol: _RhpGetDispatchCellInfo\n\nUndefined symbol: _RhpGetGcTotalMemory\n\nUndefined symbol: _RhpGetModuleSection\n\nUndefined symbol: _RhpGetNextFinalizableObject\n\nUndefined symbol: _RhpGetNumThunkBlocksPerMapping\n\nUndefined symbol: _RhpGetNumThunksPerBlock\n\nUndefined symbol: _RhpGetThreadAbortException\n\nUndefined symbol: _RhpGetThunkBlockSize\n\nUndefined symbol: _RhpGetThunkDataBlockAddress\n\nUndefined symbol: _RhpGetThunkSize\n\nUndefined symbol: _RhpGetThunkStubsBlockAddress\n\nUndefined symbol: _RhpGetTickCount64\n\nUndefined symbol: _RhpHandleAlloc\n\nUndefined symbol: _RhpHandleAllocDependent\n\nUndefined symbol: _RhpInitialDynamicInterfaceDispatch\n\nUndefined symbol: _RhpNewArray\n\nUndefined symbol: _RhpNewFast\n\nUndefined symbol: _RhpNewFinalizable\n\nUndefined symbol: _RhpPInvoke\n\nUndefined symbol: _RhpPInvokeReturn\n\nUndefined symbol: _RhpRegisterOsModule\n\nUndefined symbol: _RhpRethrow\n\nUndefined symbol: _RhpReversePInvoke\n\nUndefined symbol: _RhpReversePInvokeReturn\n\nLinker command failed with exit code 1 (use -v to see invocation)\n\n```\n\nWhat do we need to do here in order to actually use the C# code from Swift?",
                                           "updatedAt":  "2025-09-04T12:23:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B9vh7",
                                           "createdAt":  "2025-09-04T15:14:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "I’m not following: if you followed the instructions for building a shared library and got a file out for building an xcframework, when are the linker errors occurring? While building the dylib?",
                                           "updatedAt":  "2025-09-04T15:14:07Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[AOT][iOS] Unable to build a .a library for iOS",
        "labels":  [
                       "os-ios",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119347",
        "createdAt":  "2025-09-04T09:20:12Z",
        "number":  119347,
        "author":  "snikeguo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODPHEvA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "istipeti",
                                            "createdAt":  "2025-09-04T12:49:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2025-09-05T05:54:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2025-09-08T15:22:38Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-09-14T00:27:56Z",
        "body":  "Hello,\n\nI am currently porting NativeAOT to ARMv7-M Thumb2 microcontrollers with VFPv5-D16 FPU support. On these embedded platforms, firmware is typically deployed as bin/hex/S19 files, not ELF. As a result, it is not possible to use libunwind, which relies on ELF/DWARF metadata and sections.\n\nWould it be possible for the ILC compiler to generate the necessary method boundary, exception handling metadata.... to rodata  sections? The runtime could then parse this data, removing the dependency on libunwind and ELF. This would make NativeAOT much more portable to RTOS(NUTTX) environments, where only raw binary images are used.\n\nI believe this change would greatly benefit embedded scenarios and make .NET more accessible on microcontrollers.\n\nThank you for considering this feature request!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwh_naQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7B4JDX",
                                           "createdAt":  "2025-09-04T09:21:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-04T09:21:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B8bw6",
                                           "createdAt":  "2025-09-04T13:53:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "I\u0027ve been tracking this for a while with @snikeguo . The aim is to enable basic code running without full debug or reflection support.\n\nI\u0027ve analyzed the usage of libunwind a bit. For example, `RhGetTargetOfUnboxingAndInstantiatingStub` is used by `Delegate.GetDiagnosticMethodInfo`, which is not necessary. Some other usages are under `FEATURE_HIJACK` which is not enabled for all platforms.",
                                           "updatedAt":  "2025-09-04T13:53:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B_2hR",
                                           "createdAt":  "2025-09-04T17:27:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "You are looking at alternative implementation of the code manager. We have two implementations of code managers:\n\nhttps://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/Runtime/windows/CoffNativeCodeManager.cpp - this handles Windows PE file format and depends on Windows OS APIs to parse the unwind data\nhttps://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/Runtime/unix/UnixNativeCodeManager.cpp - this handles ELF and MachO file formats and depends on libunwind to parse DWARF unwind data\n\n\u003e the ILC compiler to generate the necessary method boundary, exception handling metadata.... to rodata sections\n\nThere is a lot of devils in the details when designing a new format for the unwind data, etc. It would make more sense to take one of the existing file formats and make it work instead.",
                                           "updatedAt":  "2025-09-04T17:27:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CBTeW",
                                           "createdAt":  "2025-09-04T18:50:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiJjRg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "snikeguo",
                                                                               "createdAt":  "2025-09-13T17:30:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e Would it be possible for the ILC compiler to generate the necessary method boundary, exception handling metadata.... to rodata sections? The runtime could then parse this data, removing the dependency on libunwind and ELF. This would make NativeAOT much more portable to RTOS(NUTTX) environments, where only raw binary images are used.\n\u003e \n\u003e I believe this change would greatly benefit embedded scenarios and make .NET more accessible on microcontrollers.\n\nI assume this would greatly regress the ability to use native debugging tools on the other hand.",
                                           "updatedAt":  "2025-09-04T18:50:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CH8Le",
                                           "createdAt":  "2025-09-05T02:28:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e \u003e the ILC compiler to generate the necessary method boundary, exception handling metadata.... to rodata sections\n\u003e \n\u003e There is a lot of devils in the details when designing a new format for the unwind data, etc. It would make more sense to take one of the existing file formats and make it work instead.\n\nA possible approach is to take the internal format of ELF, but restructure it to data section.\nWhat features are depending on the unwind data? How would other platforms like wasm handle it? We don\u0027t want to implement full feature set.",
                                           "updatedAt":  "2025-09-05T02:28:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CH-dp",
                                           "createdAt":  "2025-09-05T02:35:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e What features are depending on the unwind data?\n\nException handling and GC (stackwalking).\n\n\u003e How would other platforms like wasm handle it?\n\nWasm does not give you access to any of the low-level details. You have to maintain the stack trace as manually maintained linked list. The head of the linked list is either extra argument for each method (it is what NativeAOT for Wasm in https://github.com/dotnet/runtimelab does) or stored in thread local static. The wasm solution is equivalent to what you would use to maintain a walkable stack in 100% portable C.",
                                           "updatedAt":  "2025-09-14T00:27:56Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Remove libunwind dependency for NativeAOT",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119380",
        "createdAt":  "2025-09-05T02:32:42Z",
        "number":  119380,
        "author":  "agocke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-16T19:02:32Z",
        "body":  "Unfortunately the object file is too big to upload here.\n\n```\nAssertion failed: (_addend == uniqueIndex \u0026\u0026 \"too many large addends\"), function setAddend, file Fixup.cpp, line 1445.\n0  0x1006f552c  __assert_rtn + 252\n1  0x1005db65c  ld::Fixup::setAddend(long long, std::__1::function\u003cunsigned int (long long)\u003e) + 352\n2  0x100640f9c  ld::DynamicAtom::addFixup(ld::file_format::FixupKind, unsigned int, ld::Atom const*, ld::Atom const*, long long) + 368\n3  0x1005e9190  ld::FixupFromRelocs::diff(relocation_info const\u0026, relocation_info const\u0026, long long) const + 252\n4  0x100601f98  ld::InputFiles::SliceParser::parseObjectFile(mach_o::Header const*) const + 5960\n5  0x10060d940  ld::InputFiles::SliceParser::parse() const + 696\n6  0x100610c48  ld::InputFiles::parseAllFiles(void (ld::AtomFile const*) block_pointer)::$_0::operator()(unsigned long, ld::FileInfo const\u0026) const + 516\n7  0x193da9874  _dispatch_client_callout2 + 16\n8  0x193da4610  _dispatch_apply_invoke3 + 336\n9  0x193da985c  _dispatch_client_callout + 16\n10  0x193d92a28  _dispatch_once_callout + 32\n11  0x193da3750  _dispatch_apply_invoke + 252\n12  0x193da985c  _dispatch_client_callout + 16\n13  0x193dc6490  _dispatch_channel_invoke.cold.5 + 32\n14  0x193da1fa4  _dispatch_root_queue_drain + 736\n15  0x193da25d4  _dispatch_worker_thread2 + 156\n16  0x193f43de4  _pthread_wqthread + 232\n```\n\nRepro:\n\nOn a mac, clone https://github.com/agocke/azure-mcp/tree/net10 and run `$ dotnet publish -r osx-arm64 -p:BuildNative=true` inside the `servers/Azure.Mcp.Server/src` directory.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw398zg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7CH93I",
                                           "createdAt":  "2025-09-05T02:33:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-05T02:33:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CMDIh",
                                           "createdAt":  "2025-09-05T10:54:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "@filipnavara you have seen lots of Apple linker crashes. Does this one look familiar to you?",
                                           "updatedAt":  "2025-09-05T10:54:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CMG-b",
                                           "createdAt":  "2025-09-05T11:01:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Yep. Already reported this one to Apple as FB18561897 on July 2 and there was no reply so far. The only known workaround is to use ld-classic (`\u003c_UseClassicLinker\u003etrue\u003c/_UseClassicLinker\u003e` for `netX-macos` projects or manually injecting the `-ld_classic` linker option). Affects all Xcode 16+ versions that I could test.",
                                           "updatedAt":  "2025-09-05T11:01:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CMKZz",
                                           "createdAt":  "2025-09-05T11:06:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Yep. Already reported this one to Apple as FB18561897 on July 2 and there was no reply so far\n\nThank you! Do you know if Apple makes the source code of this linker available? I had no luck finding the assertion message anywhere.",
                                           "updatedAt":  "2025-09-05T11:06:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CMNls",
                                           "createdAt":  "2025-09-05T11:11:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhE2Uw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "MichalStrehovsky",
                                                                               "createdAt":  "2025-09-05T14:59:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Unfortunately the source code is not available. The condition is hit only for bigger object files and I think it\u0027s specifically happening based on number of symbols (or rather the total size of symbol names). The old linker is open source and the handling of the same situation exists there. I don\u0027t remember the exact specifics but searching for `hasLargeAddends`/`hasHugeAddends` eventually leads to the code path. ",
                                           "updatedAt":  "2025-09-05T11:11:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CMULH",
                                           "createdAt":  "2025-09-05T11:22:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Also, the assert message differs slighly based on an Xcode version:\n\n`ld: Assertion failed: (_addend \u003c largeAddends.size()), function addend, file Fixup.cpp, line 1430.` (Xcode 26 beta 2)\n\n`ld: Assertion failed: (_addend == uniqueIndex \u0026\u0026 \"too many large addends\"), function setAddend, file Fixup.cpp, line 1445.` (Xcode 26 beta 6)",
                                           "updatedAt":  "2025-09-05T11:22:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CRezj",
                                           "createdAt":  "2025-09-05T18:27:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhGdlw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-09-05T18:28:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "agocke",
                                           "body":  "Confirmed that `-ld_classic` is a viable workaround. I think we should try to also open an issue with Apple on our side.",
                                           "updatedAt":  "2025-09-05T18:27:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CRgIC",
                                           "createdAt":  "2025-09-05T18:29:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhGfrg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "agocke",
                                                                               "createdAt":  "2025-09-05T18:33:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Confirmed that `-ld_classic` is a viable workaround. I think we should try to also open an issue with Apple on our side.\n\nPlease do mention FB18561897 if you do, I uploaded a full repro there. Unfortunately I cannot share it publicly.",
                                           "updatedAt":  "2025-09-05T18:29:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DXHpn",
                                           "createdAt":  "2025-09-11T05:02:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhx19w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-09-11T06:09:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Andy did mention FB18561897 and the Apple engineer looked at that object file.\n\nThe problem is that the object file has lots of relative relocations (pairs of ARM64_RELOC_SUBTRACTOR and ARM64_RELOC_UNSIGNED ) many of which are relative to the lsection2 symbol, ie., the start of the __DATA,.dotnet_eh_table section.\n\n```\nllvm-objdump --macho --reloc net10_azmcp.o \u003e relocs.txt\n\nRelocation information (__DATA,.dotnet_eh_table) 72890 entries\naddress  pcrel length extern type    scattered symbolnum/value\n00886bd9 False long   True   SUB     False     lsection2\n00886bd9 False long   True   UNSIGND False     ___ehinfo_System_Linq_System_Linq_Enumerable__ToDictionary_6\u003cSystem___Canon__System___Canon__System___Canon\u003e\n00886851 False long   True   SUB     False     lsection2\n00886851 False long   True   UNSIGND False     ___ehinfo_System_Security_Cryptography_System_Security_Cryptography_FixedMemoryKeyBox__UseKey\u003cSystem___Canon__System___Canon\u003e\n008866c2 False long   True   SUB     False     lsection2\n008866c2 False long   True   UNSIGND False     ___ehinfo_System_Linq_System_Linq_Enumerable__ToDictionary_4\u003cSystem___Canon__System___Canon\u003e\n00886596 False long   True   SUB     False     lsection2\n00886596 False long   True   UNSIGND False     ___ehinfo_System_Linq_System_Linq_Enumerable__Aggregate_0\u003cSystem___Canon__System___Canon\u003e\n```\n\nThe contents stored at the address of these relocations (ie., the relocation addend) is quite large, combined with the overall size of the object file and the number of these large addends it ends up exceeding certain encoding limits. Is there a way you could avoid these large addends, maybe by referencing other base symbols? Or if not, can you elaborate on the use case behind it?",
                                           "updatedAt":  "2025-09-11T05:02:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Db9s5",
                                           "createdAt":  "2025-09-11T07:33:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "These are `IMAGE_REL_BASED_RELPTR32` relocations pointing from LSDA data (associated data for code regions pointed from `.eh_frame` exception handling table) to EH info. They are created [here](https://github.com/dotnet/runtime/blob/b0b30e7f0f0c5cdd49d4066eb5fa80e7a69352d4/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/ObjectWriter/UnixObjectWriter.cs#L106-L110). The `objdump` output tells only half of the story since it doesn\u0027t show the offset embedded in the code which is **negative**. In the example above, the offset in the code would be `-0x00886bd9` for the first relocation (`- address [+ addend] - section_start + symbol`). While it does \"overflow\" in the calculation the result could only truly overflow if the distance between `.dotnet_eh_table+00886bd9` and `___ehinfo_System_Linq_System_Linq_Enumerable__ToDictionary_6` is larger than (signed) 32-bit. I\u0027m pretty sure that the resulting linked object from my example was not over 2GB big.\n\nI will double check but I don\u0027t think there\u0027s any Mach-O format limitation that would limit any of those values to smaller size than 32-bit integer. Additionally, ld-classic links this just fine which would suggest that it either comes up with different layout, silently corrupts the output, or that it\u0027s not really a format issue. My suspicion is that they incorrectly flag the negative offset value in the code as a large positive value.",
                                           "updatedAt":  "2025-09-11T07:46:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DfdRU",
                                           "createdAt":  "2025-09-11T10:30:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEh0k8g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-09-11T10:54:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Yep, the questions were just a copy-paste from the Apple engineer. I think I\u0027m going to ask if there is a better reloc kind in MachO we could use to achieve a 32bit relocation without running into the linker limits. The reloc to section start is just means to an end in the end.",
                                           "updatedAt":  "2025-09-11T10:30:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Df3zO",
                                           "createdAt":  "2025-09-11T10:54:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEh1Kjw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichalStrehovsky",
                                                                               "createdAt":  "2025-09-11T12:03:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I\u0027d specifically ask if they correctly treat the offset as signed because the explanation has some holes. I\u0027ll check the input object files and linked output for my test case with the old linker, but it will have to wait until beginning of the next week.",
                                           "updatedAt":  "2025-09-11T10:54:28Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "ld64 crashing while Native AOT compiling Microsoft MCP for .NET 10",
        "labels":  [
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119856",
        "createdAt":  "2025-09-18T18:13:38Z",
        "number":  119856,
        "author":  "snikeguo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T21:10:22Z",
        "body":  "I am now continuing to work on the porting of nativeaot+rtos:\n\nI\u0027m encountering an infinite loop in the stack unwinding logic when calling Environment.StackTrace in a minimal C# program. After resolving TLS-related issues (--enable-tls confirmed working), the stack frame iterator enters an infinite loop during stack unwinding.\n```\nmain()\n{\n    var stacktrace = Environment.StackTrace;\n}\n```\nObserved Behavior:​​\nThe call stack enters an infinite loop in StackFrameIterator::Next() because IsValid() persistently returns true. When examining the ControlPC values during unwinding, I observe the following pattern:\n```\n1.S_P_CoreLib_System_Runtime_RuntimeExports__RhGetCurrentThreadStackTrace\n2.S_P_CoreLib_System_Diagnostics_StackTrace__InitializeForCurrentThread\n3.S_P_CoreLib_System_Diagnostics_StackTrace___ctor_0\n4.S_P_CoreLib_System_Environment__get_StackTrace\n5.Helloworld_Helloworld_Program__Main\n6.__managed__Main\n7.__managed__Main (repeated)\n8.__managed__Main (repeated)\n```\nProblem Location:​​\nThe infinite loop occurs in RhpCalculateStackTraceWorker():\n```\nRhpCalculateStackTraceWorker（）\n{\n    while (frameIter.Next()){ ....}\n}\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxYTGWw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7FQlco",
                                           "createdAt":  "2025-09-18T20:00:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This likely means that the unwind data are wrong. You need to step through the unwinder to figure it out.",
                                           "updatedAt":  "2025-09-18T20:02:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FQnaX",
                                           "createdAt":  "2025-09-18T20:02:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "It may work better if you open an issue or discussion about your rtos port and keep asking these questions on the same issue instead of opening new issues.",
                                           "updatedAt":  "2025-09-18T20:02:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FQn9_",
                                           "createdAt":  "2025-09-18T20:03:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-18T20:03:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FTji6",
                                           "createdAt":  "2025-09-19T02:00:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "snikeguo",
                                           "body":  "can I understand it this way:In the `Thread::Construct()` function, the m_pTransitionFrame and m_pDeferredTransitionFrame are set to TOP_OF_STACK_MARKER, which serves as the termination marker for stack unwinding. When stack unwinding reaches the end, the following code in UnixNativeCodeManager::UnwindStackFrame will be executed:\n`ppPreviousTransitionFrame = (PInvokeTransitionFrame*)(basePointer + slot);`\nAt this point, the value should be 0xFFFFFFFF(TOP_OF_STACK_MARKER)\nWe are using the R7 register FP in thumb2, not R11. Could this be the problem?\n I don’t know what slot means in (PInvokeTransitionFrame**)(basePointer + slot).\n",
                                           "updatedAt":  "2025-09-19T02:00:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FTokI",
                                           "createdAt":  "2025-09-19T02:11:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e We are using the R7 register FP in thumb2\n\nYes, it can be a problem. This register must be change in number of places, including the JIT. You might have missed some of them.",
                                           "updatedAt":  "2025-09-19T02:11:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FVatd",
                                           "createdAt":  "2025-09-19T06:06:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "snikeguo",
                                           "body":  "\u003e \u003e We are using the R7 register FP in thumb2\n\u003e \n\u003e Yes, it can be a problem. This register must be change in number of places, including the JIT. You might have missed some of them.\n\nSuppose I compile a nativeAOT runtime (including the Bootstrap project) on Linux, targeting the Thumb2 instruction set and running in a Linux environment. Does this mean there will be issues？since GCC uses R7 as the frame pointer instead of R11",
                                           "updatedAt":  "2025-09-19T06:06:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FVyOx",
                                           "createdAt":  "2025-09-19T06:42:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "C/C++ code and the native AOT runtime do not have to use the same FP register.",
                                           "updatedAt":  "2025-09-19T06:42:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Fa_Ix",
                                           "createdAt":  "2025-09-19T13:22:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "snikeguo",
                                           "body":  "Yes, so I think this issue might not be related to the FP. Here\u0027s my understanding:\nWhen the runtime starts, it sets a specific location in the stack space as TOP_OF_STACK_MARKER. During stack unwinding, *ppPreviousTransitionFrame = *(PInvokeTransitionFrame**)(basePointer + slot); is executed, and eventually *ppPreviousTransitionFrame becomes TOP_OF_STACK_MARKER.\nIs my understanding correct?",
                                           "updatedAt":  "2025-09-19T13:22:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FhMZb",
                                           "createdAt":  "2025-09-19T21:10:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Yes, that\u0027s sounds right.",
                                           "updatedAt":  "2025-09-19T21:10:22Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "nativeaot for rtos",
        "labels":  [
                       "question",
                       "area-NativeAOT-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119925",
        "createdAt":  "2025-09-20T03:38:02Z",
        "number":  119925,
        "author":  "Disidente",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T05:37:07Z",
        "body":  "### Description\n\nFail with simple GTK4 Test app compiled with AOT in NET10. \n\nIn NET9 or via dotnet run with NET10 work fine.\n\nError creando Gtk.Application: System.InvalidOperationException: Failed to set the specified COM apartment state. Current apartment state \u0027MTA\u0027.\n   at System.Threading.Thread.SetApartmentStateUnchecked(ApartmentState, Boolean) + 0x15f\n   at myProgram.Program.\u003cMain\u003ed__1.MoveNext() + 0xb9\n\n\n\n### Reproduction Steps\n\nProject.csproj\n```\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\n  \u003cPropertyGroup\u003e\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\n    \u003cTargetFramework\u003enet10.0\u003c/TargetFramework\u003e\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\n    \u003cAssemblyName\u003egtk4Test\u003c/AssemblyName\u003e\n    \u003cPublishAot\u003etrue\u003c/PublishAot\u003e\n  \u003c/PropertyGroup\u003e\n\n  \u003cItemGroup\u003e\n    \u003cPackageReference Include=\"GirCore.Gtk-4.0\" Version=\"0.7.0-preview.2\" /\u003e\n    \u003cPackageReference Include=\"GirCore.Gio-2.0\" Version=\"0.7.0-preview.2\" /\u003e\n    \u003cPackageReference Include=\"GirCore.GtkSource-5\" Version=\"0.7.0-preview.2\" /\u003e\n    \u003cPackageReference Include=\"GirCore.GObject-2.0.Integration\" Version=\"0.7.0-preview.2\" /\u003e\n  \u003c/ItemGroup\u003e\n  \n\u003c/Project\u003e  \n```\n\nProgram.cs\n```\n\t[System.STAThread]\n        public static void Main(string[] args)\n        {\n            var application = Gtk.Application.New(\"org.GirCore.GTK4TestApp\", Gio.ApplicationFlags.FlagsNone);\n\t}\n```\n\n\n\n\n\n### Expected behavior\n\nIn NET9 work fine.\n\n### Actual behavior\n\nError creando Gtk.Application: System.InvalidOperationException: Failed to set the specified COM apartment state. Current apartment state \u0027MTA\u0027.\n   at System.Threading.Thread.SetApartmentStateUnchecked(ApartmentState, Boolean) + 0x15f\n   at myProgram.Program.\u003cMain\u003ed__1.MoveNext() + 0xb9\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxZDbdA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7FkNt0",
                                           "createdAt":  "2025-09-20T05:37:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-20T05:37:07Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "NET10:  AOT =\u003e Failed to set the specified COM apartment state. Current apartment state \u0027MTA\u0027.",
        "labels":  [
                       "untriaged",
                       "area-NativeAOT-coreclr"
                   ]
    }
]
