[
    {
        "url":  "https://github.com/dotnet/runtime/issues/49383",
        "createdAt":  "2021-03-09T19:11:49Z",
        "number":  49383,
        "author":  "msallin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-63dw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jakebanks",
                                            "createdAt":  "2024-12-17T05:42:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-12-17T13:20:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rhysparry",
                                            "createdAt":  "2025-02-09T22:10:15Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-12-17T05:43:06Z",
        "body":  "The `Activity.Tags` property only return tags which are `KeyValuePair\u003cstring, string\u003e` and shouldn\u0027t be used anymore. Having both without any hints about this is confusing for the customer and might lead to mistakes.\r\n\r\nDon\u0027t use anymore:\r\nhttps://github.com/dotnet/runtime/blob/79ae74f5ca5c8a6fe3a48935e85bd7374959c570/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/Activity.cs#L271-L280\r\n\r\nUse:\r\nhttps://github.com/dotnet/runtime/blob/79ae74f5ca5c8a6fe3a48935e85bd7374959c570/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/Activity.cs#L282-L289\r\n\r\nFor details see discussion with @tarekgh \r\nhttps://github.com/dotnet/runtime/pull/48722#discussion_r589087042",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOl9iVRA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NDMyNTMyOQ==",
                                           "createdAt":  "2021-03-09T19:11:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe `Activity.Tags` property only return tags which are `KeyValuePair\u003cstring, string\u003e` and shouldn\u0027t be used anymore. Having both without any hints about this is confusing for the customer and might lead to mistakes.\r\n\r\nDon\u0027t use anymore:\r\nhttps://github.com/dotnet/runtime/blob/79ae74f5ca5c8a6fe3a48935e85bd7374959c570/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/Activity.cs#L271-L280\r\n\r\nUse:\r\nhttps://github.com/dotnet/runtime/blob/79ae74f5ca5c8a6fe3a48935e85bd7374959c570/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/Activity.cs#L282-L289\r\n\r\nFor details see discussion with @tarekgh \r\nhttps://github.com/dotnet/runtime/pull/48722#discussion_r589087042\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emsallin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Tracing`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-09T19:11:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NDU2ODA3MQ==",
                                           "createdAt":  "2021-03-09T22:53:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe `Activity.Tags` property only return tags which are `KeyValuePair\u003cstring, string\u003e` and shouldn\u0027t be used anymore. Having both without any hints about this is confusing for the customer and might lead to mistakes.\r\n\r\nDon\u0027t use anymore:\r\nhttps://github.com/dotnet/runtime/blob/79ae74f5ca5c8a6fe3a48935e85bd7374959c570/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/Activity.cs#L271-L280\r\n\r\nUse:\r\nhttps://github.com/dotnet/runtime/blob/79ae74f5ca5c8a6fe3a48935e85bd7374959c570/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/Activity.cs#L282-L289\r\n\r\nFor details see discussion with @tarekgh \r\nhttps://github.com/dotnet/runtime/pull/48722#discussion_r589087042\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emsallin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Activity`, `area-System.Diagnostics.Tracing`, `code-analyzer`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-09T22:53:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5On2N-",
                                           "createdAt":  "2022-11-17T18:57:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@tarekgh, is this really a code analyzer, or are you just considering obsoleting the property if it really shouldn\u0027t be used anymore?",
                                           "updatedAt":  "2022-11-17T18:57:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OoI6s",
                                           "createdAt":  "2022-11-17T20:10:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "It is more considering obsoletion. The analyzer will be needed only if we don\u0027t obsolete it. \r\n\r\nCC @noahfalk ",
                                           "updatedAt":  "2022-11-17T20:11:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TmscG",
                                           "createdAt":  "2023-01-24T21:00:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD_RPlw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jakebanks",
                                                                               "createdAt":  "2024-12-17T05:42:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "menees",
                                           "body":  "Yes, please mark Tags as obsolete in .NET 8. I couldn\u0027t find anything in the .NET 7 docs about which one to use or prefer. Finally, a web search for \"activity tags vs tagobjects\" linked to this issue as the 7th link down. That\u0027s too much of a treasure hunt to figure out the preferred API. An [Obsolete] attribute on Tags that said to use TagObjects instead would be much better.",
                                           "updatedAt":  "2023-01-24T21:00:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6X2JVE",
                                           "createdAt":  "2024-12-17T05:43:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakebanks",
                                           "body":  "Thanks for raising this OP, this was a fun problem to face",
                                           "updatedAt":  "2024-12-17T05:43:05Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Mark Activity.Tags as obsolete and/or create an analyzer",
        "labels":  [
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59496",
        "createdAt":  "2021-09-22T19:36:32Z",
        "number":  59496,
        "author":  "AndreyTretyak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-30T19:12:37Z",
        "body":  "I\u0027m using `System.Diagnostics.DiagnosticSource` with version `6.0.0-rc.1.21451.13` for project that targets `net5.0`.\r\n\r\nIf I understand correctly `SetBaggage` suppose to replace value of the baggage with the same key if it\u0027s present. And this is also stated in the [docs](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.activity.setbaggage?view=net-6.0#System_Diagnostics_Activity_SetBaggage_System_String_System_String_ ).\r\n\r\nBut when I\u0027m trying to call `SetBaggage` for the key that was present in the baggage of parent activity it added as duplicated item.\r\n\r\nFor example, following code:\r\n```CSharp\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nusing (var activity = new Activity(\"A\")\r\n\t.Start()\r\n\t.SetBaggage(\"Test\", \"TA\"))\r\n{\r\n\tusing (var subActivity = new Activity(\"B\")\r\n\t\t.Start()\r\n\t\t.SetBaggage(\"Test\", \"TB\"))\r\n\t{\r\n\t\tforeach (var pair in subActivity.Baggage)\r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"{0}:{1}\", pair.Key, pair.Value);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nWill output:\r\n```\r\nTest:TB\r\nTest:TA\r\n```\r\n\r\nProbably more common case, is setting baggage in `ActivityListener.ActivityStarted` handler:\r\n```CSharp\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nvar listener = new ActivityListener();\r\nlistener.ActivityStarted += a =\u003e { a.SetBaggage(\"Test\", a.OperationName); };\r\nlistener.Sample += (ref ActivityCreationOptions\u003cActivityContext\u003e context) =\u003e ActivitySamplingResult.AllData;\r\nlistener.SampleUsingParentId += (ref ActivityCreationOptions\u003cstring\u003e context) =\u003e ActivitySamplingResult.AllData;\r\nlistener.ShouldListenTo += source =\u003e true;\r\nActivitySource.AddActivityListener(listener);\r\n\r\nvar source = new ActivitySource(\"TestSource\");\r\nusing (var activity = source.StartActivity(\"SA\"))\r\n{\r\n\tusing (var subActivity = source.StartActivity(\"SB\"))\r\n\t{\r\n\t\tforeach (var pair in subActivity.Baggage)\r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"{0}:{1}\", pair.Key, pair.Value);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nIt will output:\r\n```\r\nTest:SB\r\nTest:SA\r\n```\r\n\r\nIf this behavior is intentional, to avoid overriding parent baggage or due to implementation details, then at least docs should be updated, but I think it would be much better if behavior could be changed to override value with the same key as `SetBaggage` suppose  to work, since current approach could cause a lot of confusions and situation when baggage grow more then it should.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONzYmEw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43JmqT",
                                           "createdAt":  "2021-09-22T19:36:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI\u0027m using `System.Diagnostics.DiagnosticSource` with version `6.0.0-rc.1.21451.13` for project that targets `net5.0`.\r\n\r\nIf I understand correctly `SetBaggage` suppose to replace value of the baggage with the same key if it\u0027s present. And this is also stated in the [docs](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.activity.setbaggage?view=net-6.0#System_Diagnostics_Activity_SetBaggage_System_String_System_String_ ).\r\n\r\nBut when I\u0027m trying to call `SetBaggage` for the key that was present in the baggage of parent activity it added as duplicated item.\r\n\r\nFor example, following code:\r\n```CSharp\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nusing (var activity = new Activity(\"A\")\r\n\t.Start()\r\n\t.SetBaggage(\"Test\", \"TA\"))\r\n{\r\n\tusing (var subActivity = new Activity(\"B\")\r\n\t\t.Start()\r\n\t\t.SetBaggage(\"Test\", \"TB\"))\r\n\t{\r\n\t\tforeach (var pair in subActivity.Baggage)\r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"{0}:{1}\", pair.Key, pair.Value);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nWill output:\r\n```\r\nTest:TB\r\nTest:TA\r\n```\r\n\r\nProbably more common case, is setting baggage in `ActivityListener.ActivityStarted` handler:\r\n```CSharp\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nvar listener = new ActivityListener();\r\nlistener.ActivityStarted += a =\u003e { a.SetBaggage(\"Test\", a.OperationName); };\r\nlistener.Sample += (ref ActivityCreationOptions\u003cActivityContext\u003e context) =\u003e ActivitySamplingResult.AllData;\r\nlistener.SampleUsingParentId += (ref ActivityCreationOptions\u003cstring\u003e context) =\u003e ActivitySamplingResult.AllData;\r\nlistener.ShouldListenTo += source =\u003e true;\r\nActivitySource.AddActivityListener(listener);\r\n\r\nvar source = new ActivitySource(\"TestSource\");\r\nusing (var activity = source.StartActivity(\"SA\"))\r\n{\r\n\tusing (var subActivity = source.StartActivity(\"SB\"))\r\n\t{\r\n\t\tforeach (var pair in subActivity.Baggage)\r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"{0}:{1}\", pair.Key, pair.Value);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nIt will output:\r\n```\r\nTest:SB\r\nTest:SA\r\n```\r\n\r\nIf this behavior is intentional, to avoid overriding parent baggage or due to implementation details, then at least docs should be updated, but I think it would be much better if behavior could be changed to override value with the same key as `SetBaggage` suppose  to work, since this could cause a lot of confusions and situation when baggage grow more then it should.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAndreyTretyak\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-System.Diagnostics.Activity`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-22T19:36:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Jo3x",
                                           "createdAt":  "2021-09-22T19:45:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "The current behavior of `SetBaggage` is not allowing the duplication only on the Activity instance (not the whole parent chain). If we need to change this behavior, that will be a breaking change as some applications may be depending on the current behavior. \r\n\r\nCC @noahfalk ",
                                           "updatedAt":  "2021-09-22T19:45:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43JqqH",
                                           "createdAt":  "2021-09-22T19:54:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndreyTretyak",
                                           "body":  "From my point of view, it would make sense to change this behavior before `SetBaggage` was released with `net6.0`, but maybe I\u0027m again too late with this suggestion. \r\n\r\nIn my mind, `SetBaggage` suppose to provide you with the way of overriding baggage item in current activity, irrelevant to its source (although I understand it would make implementation more complex), for example:\r\n```CSharp\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nusing (var activity = new Activity(\"A\")\r\n\t.Start()\r\n\t.SetBaggage(\"Test\", \"TA\"))\r\n{\r\n\tusing (var subActivity = new Activity(\"B\")\r\n\t\t.Start()\r\n\t\t.SetBaggage(\"Test\", \"TB\"))  { }\r\n}\r\n// For activity Test baggage item should be equal to \"TA\"\r\n// For subActivity Test baggage item should be equal to \"TB\"\r\n```\r\nFollowing behavior would provide the best control over baggage and will allow fully prevent cases uncontrollable baggage grows, that could happen now if you set some baggage for each activity, for example in StartActivity handler. ",
                                           "updatedAt":  "2021-09-22T20:03:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43JsxO",
                                           "createdAt":  "2021-09-22T20:06:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e From my point of view, it would make sense to change this behavior before SetBaggage was released with net6.0, but maybe I\u0027m again too late with this suggestion.\r\n\r\nYes, it is too late to do so now considering the risk we may have of changing the code and behavior in the current stage. Think about other scenarios we may run into. For example, what happen if someone set the baggage on the parent, should that reflect on the child too? something like:\r\n\r\n```C#\r\nusing (var activity = new Activity(\"A\")\r\n\t.Start()\r\n{\r\n\tusing (var subActivity = new Activity(\"B\")\r\n\t\t.Start()\r\n\t\t.SetBaggage(\"Test\", \"TB\"))  \r\n        { \r\n            activity.SetBaggage(\"Test\", \"TA\"))\r\n        }\r\n}\r\n\r\n```\r\n\r\nWhat you expect to happen at that time? \r\n\r\nIn general, I am seeing we need to think more about that and decide in the future release what would be the best behavior to provide. We may consider a breaking change if needed to.\r\n\r\nCC @shirhatti \r\n",
                                           "updatedAt":  "2021-09-22T20:06:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Jv2Y",
                                           "createdAt":  "2021-09-22T20:23:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndreyTretyak",
                                           "body":  "I would say that in a scenario that you\u0027ve described `subActivity` should still have value `TB` and in parent `activity` it should have value `TA`. So we would have baggage item value set using `SetBaggage` in current activity overriding values inherited from parent activity.\r\n\r\nIt looks to me like the most straightforward behavior from user\u0027s point of view.\r\n\r\nI assume merging of the lists could be done when the user requesting baggage, but then we would need to keep track of what items were added using `SetBaggage` instead of `AddBaggage`. \r\n\r\nIf this behavior won\u0027t be changed then maybe at least docs could be updated to clarify that there is no way of updating tags that you\u0027ve inherited from the parent activity.\r\nAnd if we are talking about the change in `7.0.0` could the behavior of `SetBaggage` be changed or it would have to be another overload with a flag like `overrideValueFromParent`? I\u0027m worried that we would have too many ways of adding baggage.",
                                           "updatedAt":  "2021-09-22T20:23:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Jymt",
                                           "createdAt":  "2021-09-22T20:40:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e I would say that in a scenario that you\u0027ve described subActivity should still have value TB and in parent activity it should have value TA. So we would have baggage item value set using SetBaggage in current activity overriding values inherited from parent activity.\r\n\u003e It looks to me like the most straightforward behavior from user\u0027s point of view.\r\n\r\nThe confusion would be depending on the order of the calls will get different results. I am not pushing back on any idea here more than just telling this need to be carefully thought in before we do it.\r\n\r\n\u003e And if we are talking about the change in 7.0.0 could the behavior of SetBaggage be changed or it would have to be another overload with a flag like overrideValueFromParent? I\u0027m worried that we would have too many ways of adding baggage.\r\n\r\nI am not going to vote for having extra overload here. I would say we can have the breaking change and we can mitigate this breaking with some config switch if we think scope of the change can break many customers. But as I said we need to think more about the whole thing. Thanks for raising this issue.",
                                           "updatedAt":  "2021-09-22T20:40:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43J01G",
                                           "createdAt":  "2021-09-22T20:54:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e If this behavior won\u0027t be changed then maybe at least docs could be updated to clarify that there is no way of updating tags that you\u0027ve inherited from the parent activity.\r\n\r\nI forgot to mention this is a good idea. Do you want to submit a PR to add this comment to the doc https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.activity.setbaggage?view=net-6.0#System_Diagnostics_Activity_SetBaggage_System_String_System_String_?",
                                           "updatedAt":  "2021-09-22T20:54:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43J2UI",
                                           "createdAt":  "2021-09-22T21:04:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndreyTretyak",
                                           "body":  "\u003e The confusion would be depending on the order of the calls will get different results. I am not pushing back on any idea here more than just telling this need to be carefully thought in before we do it.\r\n\r\nIn the solution that I\u0027m trying to describe result enumeration of the baggage items would be created at the moment when the user requests it. It would be done by combining baggage from the current activity and its parent. So there won\u0027t be a dependency between the order of calls on parent and current activity they would have an independent list the would be combined in the way that baggage item in current would take precedence (if it\u0027s set using `SetBaggage`) and override item with the same key from a parent. \r\n\r\nI understand it would make implementation more complicated, that\u0027s just my understanding of what behavior I would expect looking at the method and what would provide the most control to the user without adding confusion (the list would look seamless and editable to the user on each activity). I\u0027m open to discussing other approaches.",
                                           "updatedAt":  "2021-09-22T21:04:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43J28B",
                                           "createdAt":  "2021-09-22T21:08:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@AndreyTretyak Just to double check, this issue is not a blocker to you to use .NET 6.0 as there is a way to manually filter the list if needed. Right? ",
                                           "updatedAt":  "2021-09-22T21:08:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43LpSW",
                                           "createdAt":  "2021-09-23T13:06:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndreyTretyak",
                                           "body":  "Not sure yet to be honest. I\u0027ve just updated to RC package to use Metrics API and notices failure due to UT failures.\r\n\r\nFirst of all does current implementation guaranty that value set in the current activity would be on the list before value with the same key from parent? So we can use it to distinguish between them?\r\n\r\nI would also need to check how our trace exporters handle duplicated baggage since we do not own them and there are no way of updating Activity to exclude duplicate.\r\n\r\nAnother aspect I\u0027m worried about is that current behavior increate the size of the baggage so with enough nesting it could become bigger then could be transferred in http header (or in any other way) and will block the request, because again there are no way of removing duplicates from current activity.",
                                           "updatedAt":  "2021-09-23T13:06:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43MaYk",
                                           "createdAt":  "2021-09-23T17:10:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e First of all does current implementation guaranty that value set in the current activity would be on the list before value with the same key from parent? So we can use it to distinguish between them?\r\n\r\nYes, we always enumerate the child\u0027s baggage before the parent. https://github.com/dotnet/runtime/blob/44b44501c76c46bd79ee52b7d9a9d8a4957fc85f/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/Activity.cs#L327\r\n\r\n\u003e Another aspect I\u0027m worried about is that current behavior increate the size of the baggage so with enough nesting it could become bigger then could be transferred in http header (or in any other way) and will block the request, because again there are no way of removing duplicates from current activity.\r\n\r\nI am not sure why current behavior do that. Wouldn\u0027t that be the behavior before introducing such APIs? or you had a different logic before using SetBaggage API?\r\n\r\nI believe the best work around for you is when calling SetBaggage, remove the Baggage with the same key from the parent. do something like:\r\n\r\n```C#\r\ncurrentActivity.SetBaggage(key, value);\r\n\r\nfor (Activity? activity = currentActivity.Parent; activity != null; activity = activity.Parent)\r\n{\r\n    activity.SetBaggage(key, null);\r\n}\r\n```\r\n",
                                           "updatedAt":  "2021-09-23T17:11:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Ng5s",
                                           "createdAt":  "2021-09-24T02:09:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndreyTretyak",
                                           "body":  "Thank you for confirming the order. \r\n\r\nTo solve the growth problem while waiting for `SetBaggage` we had to use a hack involving reflection to replace value if it was present. After looking into that hack I think it was working similar to the current `SetBaggage` (replacing value only for current activity) so I think we are mostly fine and should not be blocked. \r\n\r\nI guess the scenario of deep nesting, which will make baggage bigger then http header allows, is theoretical for us. I understand that it is complicated case without an easy fix. The solution that I was suggesting initially does not solve size growth as well. \r\n\r\nI think we\u0027ll try using `SetBaggage` directly for now, since it allows us to keep separate values for each activity in a chain. And if we hit issues with the size growing we\u0027ll try using the workaround that you\u0027ve suggested.  \r\n\r\nThank you for helping me understand to understand the situation. ",
                                           "updatedAt":  "2021-09-24T02:09:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43NiYT",
                                           "createdAt":  "2021-09-24T02:28:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndreyTretyak",
                                           "body":  "\u003e \u003e If this behavior won\u0027t be changed then maybe at least docs could be updated to clarify that there is no way of updating tags that you\u0027ve inherited from the parent activity.\r\n\u003e \r\n\u003e I forgot to mention this is a good idea. Do you want to submit a PR to add this comment to the doc https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.activity.setbaggage?view=net-6.0#System_Diagnostics_Activity_SetBaggage_System_String_System_String_?\r\n\r\nI\u0027ve created PR to update docs https://github.com/dotnet/dotnet-api-docs/pull/7217\r\nFeel free to suggest better wording.",
                                           "updatedAt":  "2021-09-24T02:28:06Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Duplicated activity baggage when calling SetBaggage on parent and current activity",
        "labels":  [
                       "bug",
                       "help wanted",
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61857",
        "createdAt":  "2021-11-19T22:49:47Z",
        "number":  61857,
        "author":  "vishweshbankwar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:39:10Z",
        "body":  "### Description\n\nActivityTraceFlags can be updated after activity is started. However, doing so does not update the activity Id.\n\n### Reproduction Steps\n\n```csharp\r\nvar activity = new Activity(\"Test\");\r\nactivity.Start();\r\nConsole.WriteLine(\"ActivityId Before TraceFlags are set: \" + activity.Id);\r\nConsole.WriteLine(\"ActivityTraceFlags Before: \" + activity.ActivityTraceFlags);\r\nactivity.ActivityTraceFlags |= ActivityTraceFlags.Recorded;\r\nConsole.WriteLine(\"ActivityId After TraceFlags are set: \" + activity.Id);\r\nConsole.WriteLine(\"ActivityTraceFlags After: \" + activity.ActivityTraceFlags);\r\n```\r\n\r\n---- sample output ----\r\nActivityId Before TraceFlags are set: 00-b33ee4ebf1fa3d81e0ab30363fe291e2-40f3aace946db1d2-00\r\nActivityTraceFlags Before: None\r\nActivityId After TraceFlags are set: 00-b33ee4ebf1fa3d81e0ab30363fe291e2-40f3aace946db1d2-00\r\nActivityTraceFlags After: Recorded\n\n### Expected behavior\n\nUpdated ActivityTraceFlags **is** reflected in Activity.Id\n\n### Actual behavior\n\nUpdated ActivityTraceFlags **is not** reflected in Activity.Id\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOiwREg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc46Fgqj",
                                           "createdAt":  "2021-11-19T22:49:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nActivityTraceFlags can be updated after activity is started. However, doing so does not update the activity Id.\n\n### Reproduction Steps\n\n```csharp\r\nvar activity = new Activity(\"Test\");\r\nactivity.Start();\r\nConsole.WriteLine(\"ActivityId Before TraceFlags are set: \" + activity.Id);\r\nConsole.WriteLine(\"ActivityTraceFlags Before: \" + activity.ActivityTraceFlags);\r\nactivity.ActivityTraceFlags |= ActivityTraceFlags.Recorded;\r\nConsole.WriteLine(\"ActivityId After TraceFlags are set: \" + activity.Id);\r\nConsole.WriteLine(\"ActivityTraceFlags After: \" + activity.ActivityTraceFlags);\r\n```\r\n\r\n---- sample output ----\r\nActivityId Before TraceFlags are set: 00-b33ee4ebf1fa3d81e0ab30363fe291e2-40f3aace946db1d2-00\r\nActivityTraceFlags Before: None\r\nActivityId After TraceFlags are set: 00-b33ee4ebf1fa3d81e0ab30363fe291e2-40f3aace946db1d2-00\r\nActivityTraceFlags After: Recorded\n\n### Expected behavior\n\nUpdated ActivityTraceFlags **is** reflected in Activity.Id\n\n### Actual behavior\n\nUpdated ActivityTraceFlags **is not** reflected in Activity.Id\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evishweshbankwar\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-System.Diagnostics.Activity`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-19T22:49:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46FguH",
                                           "createdAt":  "2021-11-19T22:50:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vishweshbankwar",
                                           "body":  "@cijothomas @tarekgh  - Adding it here for tracking.",
                                           "updatedAt":  "2021-11-19T22:50:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46LBES",
                                           "createdAt":  "2021-11-22T22:17:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cijothomas",
                                           "body":  "For now, there are workarounds which needs to tried first. This issue requires no action, until the workarounds are tried in OpenTelemetry/ApplicationInsights.",
                                           "updatedAt":  "2021-11-22T22:17:21Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ActivityTraceFlags is not reflected in Activity Id when updated after activity start()",
        "labels":  [
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65528",
        "createdAt":  "2022-02-17T20:41:23Z",
        "number":  65528,
        "author":  "alanwest",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODP2c7w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ericsampson",
                                            "createdAt":  "2022-03-16T03:11:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NinoFloris",
                                            "createdAt":  "2023-02-25T22:31:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MatisseHack",
                                            "createdAt":  "2023-05-05T17:27:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KalleOlaviNiemitalo",
                                            "createdAt":  "2024-02-19T10:46:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-05-30T13:58:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jsheets-mahle",
                                            "createdAt":  "2024-07-02T04:17:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SaifAqqad",
                                            "createdAt":  "2024-07-31T12:58:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "azhar0106",
                                            "createdAt":  "2024-08-20T00:10:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "abbottdev",
                                            "createdAt":  "2024-08-20T09:54:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "scamrasscrisp",
                                            "createdAt":  "2024-08-20T10:35:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bbrandt",
                                            "createdAt":  "2024-08-23T20:13:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "swythan",
                                            "createdAt":  "2024-09-05T10:12:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "snus-kin",
                                            "createdAt":  "2024-09-27T11:27:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maffelbaffel",
                                            "createdAt":  "2024-10-07T12:04:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tragetaschen",
                                            "createdAt":  "2024-11-27T13:11:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mhenry07",
                                            "createdAt":  "2025-02-02T22:00:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lucaspimentel",
                                            "createdAt":  "2025-05-30T14:10:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Kesigomon",
                                            "createdAt":  "2025-09-11T11:41:47Z"
                                        }
                                    ],
                          "totalCount":  18
                      },
        "updatedAt":  "2025-05-17T12:54:10Z",
        "body":  "Regarding [Span Creation](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#span-creation) the OpenTelemetry specification states that the API must accept:\r\n\r\n\u003e The parent Context or an indication that the new Span should be a root Span.\r\n\r\nThe current `ActivitySource.StartActivity` API does not allow for this if `Activity.Current != null`. The following code creates a new activity as a child of `Activity.Current`. \r\n \r\n```C#\r\nvar rootSpan = activitySource.StartActivity(\r\n        \"RootSpan\",\r\n        ActivityKind.Internal,\r\n        parentContext: default)\r\n```\r\n\r\nOne solution may be to set `Activity.Current = null` when `StartActivity` receives `parentContext = default`, but then it may be debatable whether `Activity.Current` should then be set to:\r\n* the newly created root activity, or\r\n* be restored to the previous value of Activity.Current prior to returning from `StartActivity`.\r\n\r\nThe OpenTelemetry specification also states:\r\n\r\n\u003e In languages with implicit Context propagation, Span creation MUST NOT set the newly created Span as the active Span in the [current Context](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#context-interaction) by default, but this functionality MAY be offered additionally as a separate operation.\r\n\r\nThis implies that `StartActivity` should not affect the value of `Activity.Current`, but since it already does today it may be reasonable to set `Activity.Current` to the newly created root activity.\r\n\r\nAnother option could be to introduce a new API `StartRootActivity` that starts a new activity but does not affect `Activity.Current`. It would be up to the user to manage `Activity.Current`.\r\n\r\n---\r\n\r\nThis need was originally outlined in https://github.com/open-telemetry/opentelemetry-dotnet/issues/984.\r\n\r\n@cijothomas",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrCkHrA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-MSzJ",
                                           "createdAt":  "2022-02-17T20:41:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRegarding [Span Creation](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#span-creation) the OpenTelemetry specification states that the API must accept:\r\n\r\n\u003e The parent Context or an indication that the new Span should be a root Span.\r\n\r\nThe current `ActivitySource.StartActivity` API does not allow for this if `Activity.Current != null`. The following code creates a new activity as a child of `Activity.Current`. \r\n \r\n```C#\r\nvar rootSpan = activitySource.StartActivity(\r\n        \"RootSpan\",\r\n        ActivityKind.Internal,\r\n        parentContext: default)\r\n```\r\n\r\nOne solution may be to set `Activity.Current = null` when `StartActivity` receives `parentContext = default`, but then it may be debatable whether `Activity.Current` should then be set to:\r\n* the newly created root activity, or\r\n* be restored to the previous value of Activity.Current prior to returning from `StartActivity`.\r\n\r\nThe OpenTelemetry specification also states:\r\n\r\n\u003e In languages with implicit Context propagation, Span creation MUST NOT set the newly created Span as the active Span in the [current Context](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#context-interaction) by default, but this functionality MAY be offered additionally as a separate operation.\r\n\r\nThis implies that `StartActivity` should not affect the value of `Activity.Current`, but since it already does today it may be reasonable to set `Activity.Current` to the newly created root activity.\r\n\r\nAnother option could be to introduce a new API `StartRootActivity` that starts a new activity but does not affect `Activity.Current`. It would be up to the user to manage `Activity.Current`.\r\n\r\n---\r\n\r\nThis need was originally outlined in https://github.com/open-telemetry/opentelemetry-dotnet/issues/984.\r\n\r\n@cijothomas\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ealanwest\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Tracing`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-17T20:41:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-Meg0",
                                           "createdAt":  "2022-02-17T21:18:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-activity\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRegarding [Span Creation](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#span-creation) the OpenTelemetry specification states that the API must accept:\r\n\r\n\u003e The parent Context or an indication that the new Span should be a root Span.\r\n\r\nThe current `ActivitySource.StartActivity` API does not allow for this if `Activity.Current != null`. The following code creates a new activity as a child of `Activity.Current`. \r\n \r\n```C#\r\nvar rootSpan = activitySource.StartActivity(\r\n        \"RootSpan\",\r\n        ActivityKind.Internal,\r\n        parentContext: default)\r\n```\r\n\r\nOne solution may be to set `Activity.Current = null` when `StartActivity` receives `parentContext = default`, but then it may be debatable whether `Activity.Current` should then be set to:\r\n* the newly created root activity, or\r\n* be restored to the previous value of Activity.Current prior to returning from `StartActivity`.\r\n\r\nThe OpenTelemetry specification also states:\r\n\r\n\u003e In languages with implicit Context propagation, Span creation MUST NOT set the newly created Span as the active Span in the [current Context](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#context-interaction) by default, but this functionality MAY be offered additionally as a separate operation.\r\n\r\nThis implies that `StartActivity` should not affect the value of `Activity.Current`, but since it already does today it may be reasonable to set `Activity.Current` to the newly created root activity.\r\n\r\nAnother option could be to introduce a new API `StartRootActivity` that starts a new activity but does not affect `Activity.Current`. It would be up to the user to manage `Activity.Current`.\r\n\r\n---\r\n\r\nThis need was originally outlined in https://github.com/open-telemetry/opentelemetry-dotnet/issues/984.\r\n\r\n@cijothomas\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ealanwest\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-System.Diagnostics.Activity`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-17T21:18:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-Sbs_",
                                           "createdAt":  "2022-02-18T18:58:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "For creating a root Activity, why can\u0027t you do:\r\n\r\n```C#\r\nusing Activity? activity = aSource.StartActivity(\"A1\", ActivityKind.Client, new ActivityContext(Activity.TraceIdGenerator is null ? ActivityTraceId.CreateRandom() : Activity.TraceIdGenerator(), default, default, default));\r\n```\r\n\r\nThat will create the Activity acting like the root. Or you don\u0027t want to use your own generated trace id for it?\r\n\r\nFor creating Activity without setting it as the current activity, you can just use [ActivitySource.CreateActivity](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.activitysource.createactivity?view=net-6.0)",
                                           "updatedAt":  "2022-02-20T20:16:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-ScO3",
                                           "createdAt":  "2022-02-18T19:00:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` since it may be missing important information. Please refer to our [contribution guidelines](https://github.com/dotnet/runtime/blob/main/CONTRIBUTING.md#writing-a-good-bug-report) for tips on how to report issues effectively.",
                                           "updatedAt":  "2022-02-18T19:00:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-Sce3",
                                           "createdAt":  "2022-02-18T19:00:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCPbyTQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "reyang",
                                                                               "createdAt":  "2022-02-18T19:03:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @noahfalk @cijothomas @reyang ",
                                           "updatedAt":  "2022-02-18T19:00:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_LuYZ",
                                           "createdAt":  "2022-03-06T21:00:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been automatically marked `no-recent-activity` because it has not had any activity for 14 days. It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will remove `no-recent-activity`.",
                                           "updatedAt":  "2022-03-06T21:00:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_stS4",
                                           "createdAt":  "2022-03-16T03:09:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "We\u0027re all kind of wondering over here as well https://twitter.com/evntdrvn/status/1503898501507284993",
                                           "updatedAt":  "2022-03-16T03:09:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_sv9_",
                                           "createdAt":  "2022-03-16T03:31:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@NinoFloris thanks for pointing at twitter issue. I have replied there but you can do also what I have mentioned in my comment https://github.com/dotnet/runtime/issues/65528#issuecomment-1045019455. what mentioned in https://github.com/open-telemetry/opentelemetry.io/issues/1073 is ok too.",
                                           "updatedAt":  "2022-03-16T03:37:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_swvu",
                                           "createdAt":  "2022-03-16T03:39:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "I didn\u0027t get either of these to work \r\n\r\nThe `parentId: null` version stays parented to Activity.Current:\r\nhttps://dotnetfiddle.net/qezpMP\r\n\r\nThe version in this issue returns a null activity:\r\nhttps://dotnetfiddle.net/oyj9Q7",
                                           "updatedAt":  "2022-03-16T03:39:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_tXK-",
                                           "createdAt":  "2022-03-16T08:22:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODH_rnA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "alanwest",
                                                                               "createdAt":  "2022-03-19T00:30:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "rodeoboy",
                                                                               "createdAt":  "2023-09-27T21:04:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "If you wanted to create a new root using the APIs that currently exist, you can do this:\r\n\r\n```C#\r\nActivity previous = Activity.Current;\r\n// by default StartActivity parents to the current span, we don\u0027t want it to have a parent\r\nActivity.Current = null;\r\nActivity newRoot = source.StartActivity(\"Item2\");\r\n// by default StartActivity() makes the new span current, but if wanted to keep the old span as current then we need this...\r\nActivity.Current = previous; \r\n```\r\n\r\n@NinoFloris based on your latest fiddle (https://dotnetfiddle.net/1gkh9Q) it appears you discovered the same result.\r\nWriting 4 lines of code doesn\u0027t look as elegant as one line of course, so it still seems perfectly legitimate to explore having a more concise API as @alanwest was originally asking about.\r\n\r\n\r\n\u003e I have replied there but you can do also what I have mentioned in my comment https://github.com/dotnet/runtime/issues/65528#issuecomment-1045019455. what mentioned in https://github.com/open-telemetry/opentelemetry.io/issues/1073 is ok too.\r\n\r\nThis isn\u0027t correct unfortunately, neither of these options create new root Activities.\r\n\r\n\r\n\u003e using Activity? activity = aSource.StartActivity(\"A1\", ActivityKind.Client, new ActivityContext(Activity.TraceIdGenerator is null ? ActivityTraceId.CreateRandom() : Activity.TraceIdGenerator(), default, default, default));\r\n\r\n@tarekgh - I don\u0027t know if we\u0027ve done a good job defining what the behavior on that input should be, but the current behavior on this input does weird things. The easiest option for us to do would be to define that as bad input (it is an invalid parent ActivityContext after all), or if we define the behavior some other way then we\u0027ll need to change the implementation to match.\r\nIn the sample callback we pass it as the ParentContext and OpenTelemetry treats any non-default ParentContext to mean that the Activity has a parent and isn\u0027t a root (incidentally classifying it as a parented Activity is also what caused OT to not to sample it in which is why @NinoFloris saw that null result). In Start() we use _parentSpanId == null to infer that the Activity doesn\u0027t have a parent, but then we fallback to making Activity.Current be the parent . So instead of a new root Activity we get a new parented Activity where the sampling callback and Activity.Parent disagree about what the identity of the parent is. This path also opens the door to have an Activity whose TraceId doesn\u0027t match its parent\u0027s id which we\u0027ve attempted to never allow.\r\n\r\n\u003e what mentioned in https://github.com/open-telemetry/opentelemetry.io/issues/1073 is ok too\r\n\r\nThis one doesn\u0027t work either I\u0027m afraid. The code treats default(ActivityContext) as the sentinel value indicating that it should parent the new Activity to Activity.Current.",
                                           "updatedAt":  "2022-03-16T08:22:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_vW9_",
                                           "createdAt":  "2022-03-16T17:23:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Thanks @noahfalk for the advice and the clarification.",
                                           "updatedAt":  "2022-03-16T17:23:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_vsCW",
                                           "createdAt":  "2022-03-16T18:48:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericsampson",
                                           "body":  "\u003e In Start() we use _parentSpanId == null to infer that the Activity doesn\u0027t have a parent, but then we fallback to making Activity.Current be the parent . So instead of a new root Activity we get a new parented Activity where the sampling callback and Activity.Parent disagree about what the identity of the parent is. This path also opens the door to have an Activity whose TraceId doesn\u0027t match its parent\u0027s id which we\u0027ve attempted to never allow.\r\n\r\n\u003e This one doesn\u0027t work either I\u0027m afraid. The code treats default(ActivityContext) as the sentinel value indicating that it should parent the new Activity to Activity.Current.\r\n\r\nThese both seem...suboptimal.\r\n\r\nFor example, the JS OTel API (and probably others too) use their equivalent of `default(ActivityContext)` to explicitly indicate that it should start a new span, and so people working across languages are going to get confused by the .NET equivalent.\r\n\r\nIt would be great to have a more concise API @alanwest, whether that means introducing new sentinel values for `parentContext` or `parentSpanId` to indicate that the parent not be made `Activity.Current`, or another approach.\r\n\r\nBest,\r\nEric",
                                           "updatedAt":  "2022-03-16T18:48:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_vvVv",
                                           "createdAt":  "2022-03-16T18:54:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCTtroQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2022-03-16T19:05:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "noahfalk",
                                                                               "createdAt":  "2022-03-16T22:29:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "alanwest",
                                                                               "createdAt":  "2022-03-19T00:13:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "ericsampson",
                                           "body":  "I\u0027m going to submit a doc request so that the current behavior is at least documented.\r\nI imagine that `CreateActivity(String, ActivityKind)` and `StartActivity(String, ActivityKind)` use `Activity.Current` as well?",
                                           "updatedAt":  "2022-03-16T18:54:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_v2cR",
                                           "createdAt":  "2022-03-16T19:08:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e I imagine that CreateActivity(String, ActivityKind) and StartActivity(String, ActivityKind) use Activity.Current as well?\r\n\r\nYes, these are going to use default Activity context and null parent Id which will cause using Activity.Current set as the parent.",
                                           "updatedAt":  "2022-03-16T19:08:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_8zPO",
                                           "createdAt":  "2022-03-19T00:30:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPCF_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "casperOne",
                                                                               "createdAt":  "2023-01-20T18:14:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pihai",
                                                                               "createdAt":  "2023-02-08T08:53:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "diopolgg",
                                                                               "createdAt":  "2023-12-09T15:38:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "alanwest",
                                           "body":  "Thanks to everyone for taking a close review this. Apologies, somehow I missed @tarekgh initial suggestion, but alas it sounds like it\u0027s a no go.\r\n\r\n\u003e It would be great to have a more concise API @alanwest, whether that means introducing new sentinel values for `parentContext` or `parentSpanId` to indicate that the parent not be made `Activity.Current`, or another approach.\r\n\r\nYes, agreed. I think something like `StartRootActivity` could work well to clearly indicate the intent to create a root activity. Maybe `StartRootActivity` could take a `bool makeCurrent` parameter indicating to set `Activity.Current` to the new root activity.",
                                           "updatedAt":  "2022-03-19T00:30:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WJElK",
                                           "createdAt":  "2023-02-25T22:28:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-activity\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRegarding [Span Creation](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#span-creation) the OpenTelemetry specification states that the API must accept:\r\n\r\n\u003e The parent Context or an indication that the new Span should be a root Span.\r\n\r\nThe current `ActivitySource.StartActivity` API does not allow for this if `Activity.Current != null`. The following code creates a new activity as a child of `Activity.Current`. \r\n \r\n```C#\r\nvar rootSpan = activitySource.StartActivity(\r\n        \"RootSpan\",\r\n        ActivityKind.Internal,\r\n        parentContext: default)\r\n```\r\n\r\nOne solution may be to set `Activity.Current = null` when `StartActivity` receives `parentContext = default`, but then it may be debatable whether `Activity.Current` should then be set to:\r\n* the newly created root activity, or\r\n* be restored to the previous value of Activity.Current prior to returning from `StartActivity`.\r\n\r\nThe OpenTelemetry specification also states:\r\n\r\n\u003e In languages with implicit Context propagation, Span creation MUST NOT set the newly created Span as the active Span in the [current Context](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#context-interaction) by default, but this functionality MAY be offered additionally as a separate operation.\r\n\r\nThis implies that `StartActivity` should not affect the value of `Activity.Current`, but since it already does today it may be reasonable to set `Activity.Current` to the newly created root activity.\r\n\r\nAnother option could be to introduce a new API `StartRootActivity` that starts a new activity but does not affect `Activity.Current`. It would be up to the user to manage `Activity.Current`.\r\n\r\n---\r\n\r\nThis need was originally outlined in https://github.com/open-telemetry/opentelemetry-dotnet/issues/984.\r\n\r\n@cijothomas\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ealanwest\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Activity`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-25T22:28:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WPGWj",
                                           "createdAt":  "2023-02-27T18:02:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODu5LfQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cijothomas",
                                                                               "createdAt":  "2023-02-27T18:18:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericsampson",
                                                                               "createdAt":  "2023-02-28T01:46:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "suraciii",
                                                                               "createdAt":  "2023-02-28T01:58:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nsentinel",
                                                                               "createdAt":  "2024-05-21T11:33:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lailabougria",
                                                                               "createdAt":  "2024-05-30T12:44:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jsheets-mahle",
                                                                               "createdAt":  "2024-07-02T04:20:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "abbottdev",
                                                                               "createdAt":  "2024-07-12T14:54:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JohnnyWombwell",
                                                                               "createdAt":  "2024-08-20T10:09:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "CodeBlanch",
                                           "body":  "I think we might want to consider doing something here. Sure there are workarounds, but I don\u0027t think the API makes it obvious that they are needed. Users have to fail, realize the failure, and then figure out what to do about it. This is a somewhat common scenario/question we see on the OpenTelemetry .NET slack.\r\n\r\n## API Proposal\r\n\r\n```csharp\r\nnamespace System.Diagnostics;\r\n\r\npublic class ActivitySource\r\n{\r\n    public Activity? CreateRootActivity(...) {}\r\n    public Activity? StartRootActivity(...) {}\r\n}\r\n```\r\n\r\nIf we add this API it might be useful to supply a parameter which would automatically add the current parent context (if it exists) as a link.\r\n\r\n```csharp\r\nnamespace System.Diagnostics;\r\n\r\npublic class ActivitySource\r\n{\r\n    public Activity? CreateRootActivity(..., bool linkToCurrentTrace = false, ...) {}\r\n    public Activity? StartRootActivity(..., bool linkToCurrentTrace = false, ...) {}\r\n}\r\n```",
                                           "updatedAt":  "2023-02-27T18:02:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WPVXd",
                                           "createdAt":  "2023-02-27T18:39:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@CodeBlanch thanks for the update. Is it possible we can get the actual parameters proposal?\r\n- do we need to support these with the old-style parents (the APIs that take parent as string)? \r\n- The new APIs still need to allow passing the parent context if need to create the Activity with specific trace id?\r\n- Regarding passing `linkToCurrentTrace`, does the new APIs will take the links list anyway? or you are adding this to optimize it (to avoid creating IEnumerable)? \r\n- Would it make sense instead of having `Start/CreateRootActivity`, to have `Create/StartActivity` taking some flag telling need to be root? this flag will be false by default.\r\n- We may look exposing the new APIs with start using [TagList](https://github.com/dotnet/runtime/blob/b4b3105e944409ad0a20eb2c1948cf98ef2833f1/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/Metrics/TagList.cs#L28) instead of `IEnumerable\u003cKVP\u003e` to support optimization. \r\n\r\nLast, how urgent is this request? Is it a blocker or can wait to next release?",
                                           "updatedAt":  "2023-02-27T18:39:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WQHZL",
                                           "createdAt":  "2023-02-27T20:48:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxIqTg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rkargMsft",
                                                                               "createdAt":  "2024-09-05T16:32:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CodeBlanch",
                                           "body":  "@tarekgh \r\n\r\nHow about...\r\n\r\n## API Proposal\r\n\r\n```csharp\r\npublic Activity? CreateRootActivity(string name, ActivityKind kind) {}\r\n\r\npublic Activity? CreateRootActivity(\r\n   string name, \r\n   ActivityKind kind,\r\n   ActivityTraceId traceId = default,\r\n   in TagList tags = default,\r\n   IEnumerable\u003cActivityLink\u003e? links = null,\r\n   bool addCurrentTraceActivityContextAsLink = false) {}\r\n\r\npublic Activity? StartRootActivity(string name, ActivityKind kind) {}\r\n\r\npublic Activity? StartRootActivity(\r\n   string name, \r\n   ActivityKind kind,\r\n   ActivityTraceId traceId = default,\r\n   in TagList tags = default,\r\n   IEnumerable\u003cActivityLink\u003e? links = null,\r\n   bool addCurrentTraceActivityContextAsLink = false,\r\n   DateTimeOffset startTime = default) {}\r\n```\r\n\r\n\u003e do we need to support these with the old-style parents (the APIs that take parent as string)?\r\n\r\nI don\u0027t think so! Given it is a root we should be able to ignore parent.\r\n\r\n\u003e The new APIs still need to allow passing the parent context if need to create the Activity with specific trace id?\r\n\r\nI hadn\u0027t thought of that, but I added `ActivityTraceId` to the proposal so users can control the traceId if needed. I didn\u0027t add spanId I feel like that is always random in the current API?\r\n\r\n\r\n\u003e Regarding passing linkToCurrentTrace, does the new APIs will take the links list anyway? or you are adding this to optimize it (to avoid creating IEnumerable)?\r\n\r\nYa it is a convenience thing to make (what I anticipate being) a common scenario easy/cheap. The case @martinjt has is some user sends a request to their service with `traceparent`. That trace is the customer\u0027s trace though they want to create their own root and essentially ignore it. But linking it to the customer one seems useful.\r\n\r\n\u003e Would it make sense instead of having Start/CreateRootActivity, to have Create/StartActivity taking some flag telling need to be root? this flag will be false by default.\r\n\r\nI\u0027m not opposed to that. I think having dedicated APIs would be more obvious/cleaner but a flag could work.\r\n\r\n\u003e We may look exposing the new APIs with start using [TagList](https://github.com/dotnet/runtime/blob/b4b3105e944409ad0a20eb2c1948cf98ef2833f1/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/Metrics/TagList.cs#L28) instead of IEnumerable\u003cKVP\u003e to support optimization.\r\n\r\nUsed `TagList` on the proposal.\r\n\r\n\u003e Last, how urgent is this request? Is it a blocker or can wait to next release?\r\n\r\nI don\u0027t think it is urgent at all. Just a nice-to-have.",
                                           "updatedAt":  "2023-02-27T20:48:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WRjnC",
                                           "createdAt":  "2023-02-28T01:50:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericsampson",
                                           "body":  "@cartermp @andrewlock might have some thoughts on this as well.",
                                           "updatedAt":  "2023-02-28T01:50:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_gj3W",
                                           "createdAt":  "2024-05-30T10:21:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvhdGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bbrandt",
                                                                               "createdAt":  "2024-08-23T20:13:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ramonsmits",
                                           "body":  "Having the ability to create a new parent and (optionally) auto link these without requiring the `.Current = null` hack would be very useful.",
                                           "updatedAt":  "2024-05-30T10:21:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AqfK_",
                                           "createdAt":  "2024-06-10T15:09:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxIqxw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "rkargMsft",
                                                                               "createdAt":  "2024-09-05T16:33:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericsampson",
                                           "body":  "Any chance of getting this to API review and moving along? Cheers!",
                                           "updatedAt":  "2024-06-10T15:09:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bYfh1",
                                           "createdAt":  "2025-01-22T10:43:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mu88",
                                           "body":  "@tarekgh: I\u0027m trying to create a new root activity like this:\n```csharp\npublic static class ActivityExtensions\n{\n    private static readonly ActivitySource ActivitySource = new(\"Company.App\");\n\n    public static Activity StartNewRootActivityWithLinkToOtherActivity(Activity? activity, string name)\n    {\n        Activity? newRootActivity = null;\n        if (activity != null)\n        {\n            newRootActivity = ActivitySource.StartActivity(\n                name,\n                ActivityKind.Internal,\n                new ActivityContext(ActivityTraceId.CreateRandom(), ActivitySpanId.CreateRandom(), activity.ActivityTraceFlags),\n                links: [new ActivityLink(activity.Context)]);\n        }\n\n        return newRootActivity ?? new Activity(name).Start();\n    }\n}\n```\n\nThe consumer of this API then calls:\n```csharp\nusing var newRootActivity = ActivityExtensions.StartNewRootActivityWithLinkToOtherActivity(Activity.Current);\n```\n\nWithin our APM tool (Grafana), this new trace is now marked as `\u003croot span not yet received\u003e` - but the trace itself and the related child spans look good 🤔\n\n![Image](https://github.com/user-attachments/assets/ac607047-0a96-4524-976b-8c14fb83f44c)\n\nIs there anything missing or wrong in/with my code?",
                                           "updatedAt":  "2025-01-22T10:43:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bYmNL",
                                           "createdAt":  "2025-01-22T10:54:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "@mu88, your code creates an ActivityContext with random IDs and passes that in as ActivityContext parentContext.  No wonder that the APM tool does not find the parent.\n\nIf you want a real root activity that does not claim to have any parent, then try the code from \u003chttps://github.com/dotnet/runtime/issues/65528#issuecomment-1068855998\u003e that temporarily sets Activity.Current = null.",
                                           "updatedAt":  "2025-01-22T10:54:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bZz1U",
                                           "createdAt":  "2025-01-22T13:20:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mu88",
                                           "body":  "@KalleOlaviNiemitalo: thx for your quick reply 💪🏻 this is my updated code:\n```csharp\n    public static Activity StartNewRootActivityWithLinkToCurrentActivity([CallerMemberName] string name = \"\")\n    {\n        // See here for more information about creating a new root activity: https://github.com/dotnet/runtime/issues/65528#issuecomment-2606916427\n        Activity? newRootActivity = null;\n        Activity? previousActivity = Activity.Current;\n        Activity.Current = null;\n        if (previousActivity != null)\n        {\n            newRootActivity = ActivitySource.StartActivity(name);\n            if (newRootActivity != null)\n            {\n                newRootActivity.AddLink(new ActivityLink(previousActivity.Context));\n                previousActivity.AddLink(new ActivityLink(newRootActivity.Context));\n            }\n        }\n\n        return newRootActivity ?? new Activity(name).Start();\n    }\n```\n\nHowever, the result is still the same:\n\n![Image](https://github.com/user-attachments/assets/4fa341b7-9296-422f-938b-6c9aab70164c)\n\nIt\u0027s also strange that the name is not properly propagated (should be `ProcessAllAsync`)",
                                           "updatedAt":  "2025-01-22T13:20:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6baohj",
                                           "createdAt":  "2025-01-22T14:49:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mu88",
                                           "body":  "@KalleOlaviNiemitalo: is the approach of setting `Activity.Current = null`  feasible in such a situation?\n```csharp\npublic static class ActivityExtensions\n{\n    public static readonly ActivitySource ActivitySource = new(\"Company.App\");\n\n    public static Activity StartNewRootActivityWithLinkToCurrentActivity(string name)\n    {\n        Activity? newRootActivity = null;\n        Activity? previousActivity = Activity.Current;\n        Activity.Current = null;\n        if (previousActivity != null)\n        {\n            newRootActivity = ActivitySource.StartActivity(name);\n            if (newRootActivity != null)\n            {\n                newRootActivity.AddLink(new ActivityLink(previousActivity.Context));\n                previousActivity.AddLink(new ActivityLink(newRootActivity.Context));\n            }\n        }\n\n        return newRootActivity ?? new Activity(name).Start();\n    }\n}\n\npublic class BulkProcessor\n{\n    private readonly IEnumerable\u003cIProcessor\u003e _processors;\n\n    public BulkProcessor(IEnumerable\u003cIProcessor\u003e processors) =\u003e _processors = processors;\n\n    public async Task ProcessAllAsync()\n    {\n        using var activity = ActivityExtensions.ActivitySource.StartActivity(\"ProcessAllAsync\");\n\n        await DoSomeOtherStuffAsync();\n\n        foreach (var processor in _processors)\n        {\n            using var batchActivity = ActivityExtensions.StartNewRootActivityWithLinkToCurrentActivity(\"SingleProcessor\");\n            await processor.ProcessAsync();\n        }\n    }\n}\n```",
                                           "updatedAt":  "2025-01-22T14:49:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bcTRZ",
                                           "createdAt":  "2025-01-22T17:48:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e However, the result is still the same:\n\nIt seems to me that the tool is not showing the right created activity. Are you sure the tool was showing the activity you have created? \n\n\u003e is the approach of setting Activity.Current = null feasible in such a situation?\n\nYes, setting Activity.Current = null should allow creating the activity as a root activity. I have tried the following code:\n\n```C#\n            var listener = new ActivityListener\n            {\n                ShouldListenTo = _ =\u003e true,\n                Sample = (ref ActivityCreationOptions\u003cActivityContext\u003e options) =\u003e ActivitySamplingResult.AllDataAndRecorded,\n            };\n            ActivitySource.AddActivityListener(listener);\n\n\n            Activity current = new Activity(\"OriginalRoot\").Start();\n            Console.WriteLine($\"Current Activity: {current.OperationName} ... We have a root activity?: {current == Activity.Current}\");\n            Activity.Current = null; // reset the root to null\n\n            Activity activity = StartNewRootActivityWithLinkToCurrentActivity(\"MyActivity\");\n            ActivityContext activityContext = activity.Context;\n            Console.WriteLine($\"Activity: {activity.OperationName}\");\n            Console.WriteLine($\"Is Set to current: {activity == Activity.Current}\");\n            Console.WriteLine($\"TracId: {activityContext.TraceId}\");\n            Console.WriteLine($\"SpanId: {activityContext.SpanId}\");\n            Console.WriteLine($\"parent is null?: {activity.Parent is null}\");\n            Console.WriteLine($\"parent Id is null?: {activity.ParentId is null} \");\n            Console.WriteLine($\"ParentSpanId: {activity.ParentSpanId}\");\n```\n\nThis shows:\n\n```\nCurrent Activity: OriginalRoot ... We have a root activity?: True\nActivity: MyActivity\nIs Set to current: True\nTracId: cfb6d947e7ce66110f39d35c79e2df1d\nSpanId: 511be93ef8822014\nparent is null?: True\nparent Id is null?: True\nParentSpanId: 0000000000000000\n```",
                                           "updatedAt":  "2025-01-22T17:48:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bghep",
                                           "createdAt":  "2025-01-23T06:50:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mu88",
                                           "body":  "@tarekgh: could you please also try my code sample which creates n traces with each of them linking back to the very original activity? Thx 🤜🏻🤛🏻",
                                           "updatedAt":  "2025-01-23T06:50:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bxqUw",
                                           "createdAt":  "2025-01-24T22:13:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I tried the following the code:\n\n```C#\n    public class BulkProcessor\n    {\n        private readonly int _count;\n        private readonly ActivitySource _activitySource;\n\n        public BulkProcessor(int count, ActivitySource activitySource)\n        {\n            _count = count;\n            _activitySource = activitySource;\n        }\n\n        private static bool ActivityHasNoRoot(Activity activity)\n        {\n            return activity.Parent is null \u0026\u0026 activity.ParentId is null \u0026\u0026 activity.ParentSpanId == default;\n        }\n\n        public async Task ProcessAllAsync()\n        {\n            using var activity = _activitySource.StartActivity(\"ProcessAllAsync\");\n\n            await Task.Delay(1000);\n\n            for (int i = 0; i \u003c _count; i++)\n            {\n                using var batchActivity = StartNewRootActivityWithLinkToCurrentActivity(\"SingleProcessor\", _activitySource);\n\n                if (!ActivityHasNoRoot(batchActivity))\n                {\n                    Console.WriteLine($\"Activity: {batchActivity.OperationName}\");\n                    Console.WriteLine($\"TracId: {batchActivity.Context.TraceId}\");\n                    Console.WriteLine($\"SpanId: {batchActivity.Context.SpanId}\");\n                    Console.WriteLine($\"parent is null?: {batchActivity.Parent is null}\");\n                    Console.WriteLine($\"parent Id is null?: {batchActivity.ParentId is null} \");\n                    Console.WriteLine($\"ParentSpanId: {batchActivity.ParentSpanId}\");\n                }\n            }\n        }\n\n        public static Activity StartNewRootActivityWithLinkToCurrentActivity(string name, ActivitySource activitySource)\n        {\n            Activity? newRootActivity = null;\n            Activity? previousActivity = Activity.Current;\n            Activity.Current = null;\n            if (previousActivity != null)\n            {\n                newRootActivity = activitySource.StartActivity(name);\n                if (newRootActivity != null)\n                {\n                    newRootActivity.AddLink(new ActivityLink(previousActivity.Context));\n                    previousActivity.AddLink(new ActivityLink(newRootActivity.Context));\n                }\n            }\n\n            return newRootActivity ?? new Activity(name).Start();\n        }\n    }\n```\n\nAnd then calling \n\n```C#\n            var listener = new ActivityListener\n            {\n                ShouldListenTo = _ =\u003e true,\n                Sample = (ref ActivityCreationOptions\u003cActivityContext\u003e options) =\u003e ActivitySamplingResult.AllDataAndRecorded,\n            };\n            ActivitySource.AddActivityListener(listener);\n\n\n            BulkProcessor bulkProcessor = new BulkProcessor(count: 50, ActivitySource);\n            await bulkProcessor.ProcessAllAsync();\n```\n\nThis code didn\u0027t print anything which means all created activities have `null` root parent. Let me know if this is what you were asking to do or if you suggest a different code to try. ",
                                           "updatedAt":  "2025-01-24T22:15:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6b3SAP",
                                           "createdAt":  "2025-01-27T06:46:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mu88",
                                           "body":  "Thx @tarekgh, very much appreciated! I will try the same in our environment and see whether our AMP tool handles this properly🤞🏻",
                                           "updatedAt":  "2025-01-27T06:46:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6b7VmS",
                                           "createdAt":  "2025-01-27T15:10:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mu88",
                                           "body":  "Okay @tarekgh, could you please try the following:\n1. Clone https://github.com/mu88/Repro_OpenTelemetry_Baggage\n2. Run `docker compose up -d`\n3. Call http://localhost:8080/bulkProcessing and note the app\u0027s console output\n4. Call http://localhost:8080/bulkProcessing2 and note the app\u0027s console output\n\nHere\u0027s my output:\n\n\u003cdetails\u003e\n\n\u003csummary\u003eHTTP GET /bulkProcessing\u003c/summary\u003e\n\n```text\nhttp://localhost:8080/bulkProcessing\n\ninfo: Web.Processing.BulkProcessor[0]\n      Bulk processor is processing (False)\ninfo: Web.Processing.BulkProcessor[0]\n      Processing FirstProcessor\ninfo: Web.Processing.FirstProcessor[0]\n      Hello from FirstProcessor\nActivity.TraceId:            31234a3b4704f9e5f7d06ef806aa3f13\nActivity.SpanId:             69b9488914370cc9\nActivity.TraceFlags:         Recorded\nActivity.DisplayName:        FirstProcessor\nActivity.Kind:               Internal\nActivity.StartTime:          2025-01-27T14:59:01.6766893Z\nActivity.Duration:           00:00:00.5039716\nActivity.Links:\n    b009e281d662a2d32330910d96bededd d894e5dbdc0ffa0a\nInstrumentation scope (ActivitySource):\n    Name: Web\n    Version: 1.2.3.4\nResource associated with Activity:\n    service.name: Web\n    service.instance.id: 099b0559-51dc-4ad7-ab1d-cbc4c70dfe69\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 1.11.0\n\ninfo: Web.Processing.BulkProcessor[0]\n      Processing SecondProcessor\ninfo: Web.Processing.SecondProcessor[0]\n      Hello from SecondProcessor\ninfo: Web.Processing.BulkProcessor[0]\n      Processing ThirdProcessor\ninfo: Web.Processing.ThirdProcessor[0]\n      Hello from ThirdProcessor\nActivity.TraceId:            b009e281d662a2d32330910d96bededd\nActivity.SpanId:             d894e5dbdc0ffa0a\nActivity.TraceFlags:         Recorded\nActivity.ParentSpanId:       280b49be02963e30\nActivity.DisplayName:        Within Web API\nActivity.Kind:               Internal\nActivity.StartTime:          2025-01-27T14:59:01.6735820Z\nActivity.Duration:           00:00:01.5250398\nActivity.Links:\n    31234a3b4704f9e5f7d06ef806aa3f13 69b9488914370cc9\nInstrumentation scope (ActivitySource):\n    Name: Web\n    Version: 1.2.3.4\nResource associated with Activity:\n    service.name: Web\n    service.instance.id: 099b0559-51dc-4ad7-ab1d-cbc4c70dfe69\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 1.11.0\n\nActivity.TraceId:            b009e281d662a2d32330910d96bededd\nActivity.SpanId:             280b49be02963e30\nActivity.TraceFlags:         Recorded\nActivity.DisplayName:        GET /bulkProcessing\nActivity.Kind:               Server\nActivity.StartTime:          2025-01-27T14:59:01.6729464Z\nActivity.Duration:           00:00:01.5260103\nActivity.Tags:\n    server.address: localhost\n    server.port: 8080\n    http.request.method: GET\n    url.scheme: http\n    url.path: /bulkProcessing\n    network.protocol.version: 1.1\n    user_agent.original: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0\n    http.route: /bulkProcessing\n    http.response.status_code: 200\nInstrumentation scope (ActivitySource):\n    Name: Microsoft.AspNetCore\nResource associated with Activity:\n    service.name: Web\n    service.instance.id: 099b0559-51dc-4ad7-ab1d-cbc4c70dfe69\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 1.11.0\n```\n\n\u003c/details\u003e\n\n\n\u003cdetails\u003e\n\n\u003csummary\u003eHTTP GET /bulkProcessing2 \u003c/summary\u003e\n\n```text\nhttp://localhost:8080/bulkProcessing2\n\ninfo: Web.Processing.BulkProcessor[0]\n      Bulk processor is processing (True)\ninfo: Web.Processing.BulkProcessor[0]\n      Processing FirstProcessor\ninfo: Web.Processing.FirstProcessor[0]\n      Hello from FirstProcessor\nActivity.TraceId:            ed241fc1b4a390096a30f732c09136d9\nActivity.SpanId:             bb173a17401b7030\nActivity.TraceFlags:         Recorded\nActivity.DisplayName:        FirstProcessor\nActivity.Kind:               Internal\nActivity.StartTime:          2025-01-27T14:58:40.6311193Z\nActivity.Duration:           00:00:00.5050753\nActivity.Links:\n    00701bb391d64393e02bd23eb72df5a7 fcaae100518b5f4e\nInstrumentation scope (ActivitySource):\n    Name: Web\n    Version: 1.2.3.4\nResource associated with Activity:\n    service.name: Web\n    service.instance.id: 099b0559-51dc-4ad7-ab1d-cbc4c70dfe69\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 1.11.0\n\ninfo: Web.Processing.BulkProcessor[0]\n      Processing SecondProcessor\ninfo: Web.Processing.SecondProcessor[0]\n      Hello from SecondProcessor\nActivity.TraceId:            e0648963023130713b173fa5ff4c37ec\nActivity.SpanId:             772ac5754be14d3b\nActivity.TraceFlags:         Recorded\nActivity.DisplayName:        SecondProcessor\nActivity.Kind:               Internal\nActivity.StartTime:          2025-01-27T14:58:41.1452710Z\nActivity.Duration:           00:00:00.5037986\nActivity.Links:\n    00701bb391d64393e02bd23eb72df5a7 fcaae100518b5f4e\nInstrumentation scope (ActivitySource):\n    Name: Web\n    Version: 1.2.3.4\nResource associated with Activity:\n    service.name: Web\n    service.instance.id: 099b0559-51dc-4ad7-ab1d-cbc4c70dfe69\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 1.11.0\n\ninfo: Web.Processing.BulkProcessor[0]\n      Processing ThirdProcessor\ninfo: Web.Processing.ThirdProcessor[0]\n      Hello from ThirdProcessor\nActivity.TraceId:            8058db26d62f600e801ee8098131461e\nActivity.SpanId:             fc24dc399e2e74c7\nActivity.TraceFlags:         Recorded\nActivity.DisplayName:        ThirdProcessor\nActivity.Kind:               Internal\nActivity.StartTime:          2025-01-27T14:58:41.6492786Z\nActivity.Duration:           00:00:00.5105941\nActivity.Links:\n    00701bb391d64393e02bd23eb72df5a7 fcaae100518b5f4e\nInstrumentation scope (ActivitySource):\n    Name: Web\n    Version: 1.2.3.4\nResource associated with Activity:\n    service.name: Web\n    service.instance.id: 099b0559-51dc-4ad7-ab1d-cbc4c70dfe69\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 1.11.0\n\nActivity.TraceId:            00701bb391d64393e02bd23eb72df5a7\nActivity.SpanId:             fcaae100518b5f4e\nActivity.TraceFlags:         Recorded\nActivity.ParentSpanId:       dab6bf6112d20328\nActivity.DisplayName:        Within Web API v2\nActivity.Kind:               Internal\nActivity.StartTime:          2025-01-27T14:58:40.5854548Z\nActivity.Duration:           00:00:01.5746707\nActivity.Links:\n    ed241fc1b4a390096a30f732c09136d9 bb173a17401b7030\n    e0648963023130713b173fa5ff4c37ec 772ac5754be14d3b\n    8058db26d62f600e801ee8098131461e fc24dc399e2e74c7\nInstrumentation scope (ActivitySource):\n    Name: Web\n    Version: 1.2.3.4\nResource associated with Activity:\n    service.name: Web\n    service.instance.id: 099b0559-51dc-4ad7-ab1d-cbc4c70dfe69\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 1.11.0\n\nActivity.TraceId:            00701bb391d64393e02bd23eb72df5a7\nActivity.SpanId:             dab6bf6112d20328\nActivity.TraceFlags:         Recorded\nActivity.DisplayName:        GET /bulkProcessing2\nActivity.Kind:               Server\nActivity.StartTime:          2025-01-27T14:58:40.5521632Z\nActivity.Duration:           00:00:01.6117875\nActivity.Tags:\n    server.address: localhost\n    server.port: 8080\n    http.request.method: GET\n    url.scheme: http\n    url.path: /bulkProcessing2\n    network.protocol.version: 1.1\n    user_agent.original: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0\n    http.route: /bulkProcessing2\n    http.response.status_code: 200\nInstrumentation scope (ActivitySource):\n    Name: Microsoft.AspNetCore\nResource associated with Activity:\n    service.name: Web\n    service.instance.id: 099b0559-51dc-4ad7-ab1d-cbc4c70dfe69\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 1.11.0\n\nActivity.TraceId:            494f7b3f95065e8347ddbbd7c524b067\nActivity.SpanId:             7aed35ffeaab1045\nActivity.TraceFlags:         Recorded\nActivity.DisplayName:        GET\nActivity.Kind:               Server\nActivity.StartTime:          2025-01-27T14:58:42.2195574Z\nActivity.Duration:           00:00:00.0004661\nActivity.Tags:\n    server.address: localhost\n    server.port: 8080\n    http.request.method: GET\n    url.scheme: http\n    url.path: /favicon.ico\n    network.protocol.version: 1.1\n    user_agent.original: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0\n    http.response.status_code: 404\nInstrumentation scope (ActivitySource):\n    Name: Microsoft.AspNetCore\nResource associated with Activity:\n    service.name: Web\n    service.instance.id: 099b0559-51dc-4ad7-ab1d-cbc4c70dfe69\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 1.11.0\n```\n\n\u003c/details\u003e\n\nFor `HTTP GET /bulkProcessing`, the traces for the second and third processor are not emitted, i.e. there is neither a trace with `Activity.DisplayName:        SecondProcessor` nor `Activity.DisplayName:        ThirdProcessor` 🤔\n\nWhen calling `HTTP GET /bulkProcessing2`, the traces and links look OK to me. But would you as an observability hero also consider [the corresponding code](https://github.com/mu88/Repro_OpenTelemetry_Baggage/blob/main/src/Web/ActivityExtensions.cs#L31-L55) safe to use?\n\nThx for your precious time!",
                                           "updatedAt":  "2025-01-27T15:10:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6b9YeK",
                                           "createdAt":  "2025-01-27T18:16:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e When calling HTTP GET /bulkProcessing2, the traces and links look OK to me. But would you as an observability hero also consider [the corresponding code](https://github.com/mu88/Repro_OpenTelemetry_Baggage/blob/main/src/Web/ActivityExtensions.cs#L31-L55) safe to use?\n\nThe code looks ok to me to use. CC @noahfalk if he has more input on that.",
                                           "updatedAt":  "2025-01-27T18:16:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fTkvG",
                                           "createdAt":  "2025-02-20T21:19:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "STRUDSO",
                                           "body":  "Flew past this [one](https://github.com/dotnet/runtime/blob/7e5e573dd32990beedee8b2749a0ffe5af784d3c/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectionPool/ConnectionSetupDistributedTracing.cs#L20), something with [HTTPS connection ](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/distributed-tracing-builtin-activities#http-connection-setup-experimental) as a seperate root span, so seems like someone else in this repo is just setting Activity.Current = null. I don\u0027t fully understand the magic of AsyncLocal, modification in \"down\" stream dos not go up. So maybe one can abuse that...\n\n\n```csharp\nusing System.Diagnostics;\nusing OpenTelemetry;\nusing OpenTelemetry.Trace;\n\n\nvar names = \"Root\";\nICollection\u003cActivity\u003e activities = [];\nusing var tracer = Sdk.CreateTracerProviderBuilder().AddSource(names)\n    .AddInMemoryExporter(activities)\n    .Build();\n\nvar activitySource = new ActivitySource(names);\n\nusing (var activity = activitySource.StartActivity(\"First\"))\n{\n    Console.WriteLine(\"Calling CreateRoot\");\n    using var newRoot = await CreateRoot();\n    Console.WriteLine(\"Activity.Current==null ? \" + (Activity.Current == null));\n    Console.WriteLine(\"newRoot.Parent==null ? \" + (newRoot.Parent == null));\n}\n\nConsole.WriteLine(\"Flushed=\" + tracer.ForceFlush());\nConsole.WriteLine(\"Print all traces\");\nforeach (var a in activities)\n{\n    Console.WriteLine(a.DisplayName + \" Parent==null ? \" + (a.Parent == null));\n}\n\nasync Task\u003cActivity?\u003e CreateRoot()\n{\n    await Task.Delay(0);\n    Console.WriteLine(\"Setting Activity.Curent = null\");\n    Activity.Current = null;\n    return activitySource.StartActivity(\"ROOT\");\n}\n```\n\nwhich outputs:\nCalling CreateRoot\nSetting Activity.Curent = null\nActivity.Current==null ? False\nnewRoot.Parent==null ? True\nFlushed=True\nPrint all traces\nROOT Parent==null ? True\nFirst Parent==null ? True\n\n",
                                           "updatedAt":  "2025-02-20T21:19:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sKQes",
                                           "createdAt":  "2025-05-17T12:50:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arkiaconsulting",
                                           "body":  "For those of us using isolated Azure Functions and having the issue that the `TimerTrigger` functions are not properly instrumented: based on @mu88 proposal:\n```cs\ninternal sealed class TimerTriggerTraceFixMiddleware : IFunctionsWorkerMiddleware\n{\n    async Task IFunctionsWorkerMiddleware.Invoke(FunctionContext context, FunctionExecutionDelegate next)\n    {\n        using var activity = StartNewRootActivityWithLinkToCurrentActivity(\n            $\"TimerTrigger {context.FunctionDefinition.Name}\",\n            DiagnosticConfig.ActivitySource);\n\n        await next(context);\n    }\n\n    private static Activity StartNewRootActivityWithLinkToCurrentActivity(string name, ActivitySource activitySource)\n    {\n        Activity? newRootActivity = null;\n        var previousActivity = Activity.Current;\n        Activity.Current = null;\n\n        if (previousActivity != null)\n        {\n            newRootActivity = activitySource.StartActivity(name, ActivityKind.Server);\n            if (newRootActivity != null)\n            {\n                newRootActivity.AddLink(new ActivityLink(previousActivity.Context));\n                previousActivity.AddLink(new ActivityLink(newRootActivity.Context));\n            }\n        }\n\n        return newRootActivity ?? new Activity(name).Start();\n    }\n}\n```\n\nTo use like so:\n\n```cs\nbuilder.UseWhen\u003cTimerTriggerTraceFixMiddleware\u003e(context =\u003e\n    context.FunctionDefinition.InputBindings.Values.Any(metadata =\u003e metadata.Type == \"timerTrigger\"));\n```",
                                           "updatedAt":  "2025-05-17T12:54:09Z"
                                       }
                                   ],
                         "totalCount":  34
                     },
        "title":  "Allow creation of a root Activity when Activity.Current is not null",
        "labels":  [
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83345",
        "createdAt":  "2023-03-13T18:24:04Z",
        "number":  83345,
        "author":  "jaeyoon21",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCu2bxA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Benedds",
                                            "createdAt":  "2023-03-13T19:13:04Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-07-27T16:30:18Z",
        "body":  "I looked into source of Activity. I realized that Tag is maintained as LinkedList and every SetTag calls lock() and iterates the all tags to check if there is same key or not. \r\nIn our case, we have lots of tags, so locking and iterate LinkedLIst for every setTag might be performance issue. \r\n\r\n1) Can we have SetTag (using Map) instead of LinkedList\r\n2) Can we have SetTag without locking? (in some case, application owner/programmer know that Activity is not called across multiple threads. So no locking is safe.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYpVuHA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Xa9cx",
                                           "createdAt":  "2023-03-13T18:24:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-03-13T18:24:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XbC6z",
                                           "createdAt":  "2023-03-13T18:32:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-activity\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI looked into source of Activity. I realized that Tag is maintained as LinkedList and every SetTag calls lock() and iterates the all tags to check if there is same key or not. \r\nIn our case, we have lots of tags, so locking and iterate LinkedLIst for every setTag might be performance issue. \r\n\r\n1) Can we have SetTag (using Map) instead of LinkedList\r\n2) Can we have SetTag without locking? (in some case, application owner/programmer know that Activity is not called across multiple threads. So no locking is safe.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejaeyoon21\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tenet-performance`, `untriaged`, `area-System.Diagnostics.Activity`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-13T18:32:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ilW4c",
                                           "createdAt":  "2023-07-27T16:30:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cijothomas",
                                           "body":  "SetTag is designed to be thread-safe, so locking(or equivalent) mechanism is required and hence, simple Dictionary cannot be used as a replacement! (ConcurrentDictionary could be, but that won\u0027t be much better in terms of perf for small number of tags (which is the common case). Might help to run benchmarks with diff. scenarios to see if any alternate datastructure might help.\r\n\r\nThe deduplication check could be expensive, and would be nice to get a opt-in feature to remove deduping logic.",
                                           "updatedAt":  "2023-07-27T16:30:18Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "performance issue with SetTag in Activity with large number of tags",
        "labels":  [
                       "tenet-performance",
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85198",
        "createdAt":  "2023-04-22T14:53:16Z",
        "number":  85198,
        "author":  "Rishabh-V",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-23T17:55:25Z",
        "body":  "### Description\n\nI suspect that there is an issue with the way equality is implemented in `ActivityTraceId`. If the activity.TraceId has a default value and we use either the `==` operator or `Equals` method to compare it with the default `ActivityTraceId`, it always seems to returns false. This behavior is unexpected and can lead to bugs in applications that rely on this comparison.\r\n\r\nUsing F12 on Visual Studio to see the definition of `ActivityTraceId`, I noticed that it internally uses _hexString to calculate HashCode and for `Equals` and `==` implementation. When we use `default`, the _hexString is uninitialized which causes this comparison to fail.\r\n\r\nPlease call out if I am doing or expecting something unreasonable. Thanks. \n\n### Reproduction Steps\n\n1. Create an `Activity` object with a default `ActivityTraceId`.\r\n2. Compare the `activity.TraceId` with the default `ActivityTraceId` using the `==` operator or `Equals` method.\r\n3. Observe that the comparison always returns `false`, even though the `TraceId` property of the activity is set to the default value.\r\n\r\nHere is a simple xUnit Test to demonstrate the same. (My library targets .NET Standard 2.1 and uses .NET 6.)\r\n\r\n```\r\n[Fact]\r\npublic void CompareTraceIdWithDefault()\r\n{\r\n    Activity.TraceIdGenerator = () =\u003e default;\r\n    using var activity = new Activity(\"my-activity\").Start();\r\n       \r\n    // All of these fail.\r\n    Assert.Equal(default, activity.TraceId);\r\n    Assert.True(default(ActivityTraceId) == activity.TraceId);\r\n    Assert.True(default(ActivityTraceId).Equals(activity.TraceId));\r\n\r\n    // This works.\r\n    Assert.Equal(default(ActivityTraceId).ToString(), activity.TraceId.ToString());\r\n}\r\n```\n\n### Expected behavior\n\nWhen comparing the `activity.TraceId` with the default `ActivityTraceId` using the `==` operator or `Equals` method, the comparison should return true if the `activity.TraceId` has the default value.`\n\n### Actual behavior\n\nWhen comparing the `activity.TraceId` with the default `ActivityTraceId` using the `==` operator or `Equals` method, the comparison always returns `false`, even if the `activity.TraceId` has the default value.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nUse `ToString()` and then compare.  \n\n### Configuration\n\n- Which version of .NET is the code running on?\r\n .NET 6   (6.0.408)\r\n- What OS and version, and what distro if applicable? \r\nWindows 10.\r\n- What is the architecture (x64, x86, ARM, ARM64)? \r\nx64\r\n- Do you know whether it is specific to that configuration? \r\nDon\u0027t think so.\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWovyUw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ahTJ8",
                                           "createdAt":  "2023-04-22T14:53:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI suspect that there is an issue with the way equality is implemented in `ActivityTraceId`. If the activity.TraceId has a default value and we use either the `==` operator or `Equals` method to compare it with the default `ActivityTraceId`, it always seems to returns false. This behavior is unexpected and can lead to bugs in applications that rely on this comparison.\r\n\r\nUsing F12 on Visual Studio to see the definition of `ActivityTraceId`, I noticed that it internally uses _hexString to calculate HashCode and for `Equals` and `==` implementation. When we use `default`, the _hexString is uninitialized which causes this comparison to fail.\r\n\r\nPlease call out if I am doing or expecting something unreasonable. Thanks. \n\n### Reproduction Steps\n\n1. Create an `Activity` object with a default `ActivityTraceId`.\r\n2. Compare the `activity.TraceId` with the default `ActivityTraceId` using the `==` operator or `Equals` method.\r\n3. Observe that the comparison always returns `false`, even though the `TraceId` property of the activity is set to the default value.\r\n\r\nHere is a simple xUnit Test to demonstrate the same. (My library targets .NET Standard 2.1 and uses .NET 6.)\r\n\r\n```\r\n[Fact]\r\npublic void CompareTraceIdWithDefault()\r\n{\r\n    Activity.TraceIdGenerator = () =\u003e default;\r\n    using var activity = new Activity(\"my-activity\").Start();\r\n       \r\n    // All of these fail.\r\n    Assert.Equal(default, activity.TraceId);\r\n    Assert.True(default(ActivityTraceId) == activity.TraceId);\r\n    Assert.True(default(ActivityTraceId).Equals(activity.TraceId));\r\n\r\n    // This works.\r\n    Assert.Equal(default(ActivityTraceId).ToString(), activity.TraceId.ToString());\r\n}\r\n```\n\n### Expected behavior\n\nWhen comparing the `activity.TraceId` with the default `ActivityTraceId` using the `==` operator or `Equals` method, the comparison should return true if the `activity.TraceId` has the default value.`\n\n### Actual behavior\n\nWhen comparing the `activity.TraceId` with the default `ActivityTraceId` using the `==` operator or `Equals` method, the comparison always returns `false`, even if the `activity.TraceId` has the default value.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nUse `ToString()` and then compare.  \n\n### Configuration\n\n- Which version of .NET is the code running on?\r\n .NET 6   (6.0.408)\r\n- What OS and version, and what distro if applicable? \r\nWindows 10.\r\n- What is the architecture (x64, x86, ARM, ARM64)? \r\nx64\r\n- Do you know whether it is specific to that configuration? \r\nDon\u0027t think so.\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eRishabh-V\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Tracing`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-22T14:53:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ah4P-",
                                           "createdAt":  "2023-04-22T21:42:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-activity\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI suspect that there is an issue with the way equality is implemented in `ActivityTraceId`. If the activity.TraceId has a default value and we use either the `==` operator or `Equals` method to compare it with the default `ActivityTraceId`, it always seems to returns false. This behavior is unexpected and can lead to bugs in applications that rely on this comparison.\r\n\r\nUsing F12 on Visual Studio to see the definition of `ActivityTraceId`, I noticed that it internally uses _hexString to calculate HashCode and for `Equals` and `==` implementation. When we use `default`, the _hexString is uninitialized which causes this comparison to fail.\r\n\r\nPlease call out if I am doing or expecting something unreasonable. Thanks. \n\n### Reproduction Steps\n\n1. Create an `Activity` object with a default `ActivityTraceId`.\r\n2. Compare the `activity.TraceId` with the default `ActivityTraceId` using the `==` operator or `Equals` method.\r\n3. Observe that the comparison always returns `false`, even though the `TraceId` property of the activity is set to the default value.\r\n\r\nHere is a simple xUnit Test to demonstrate the same. (My library targets .NET Standard 2.1 and uses .NET 6.)\r\n\r\n```\r\n[Fact]\r\npublic void CompareTraceIdWithDefault()\r\n{\r\n    Activity.TraceIdGenerator = () =\u003e default;\r\n    using var activity = new Activity(\"my-activity\").Start();\r\n       \r\n    // All of these fail.\r\n    Assert.Equal(default, activity.TraceId);\r\n    Assert.True(default(ActivityTraceId) == activity.TraceId);\r\n    Assert.True(default(ActivityTraceId).Equals(activity.TraceId));\r\n\r\n    // This works.\r\n    Assert.Equal(default(ActivityTraceId).ToString(), activity.TraceId.ToString());\r\n}\r\n```\n\n### Expected behavior\n\nWhen comparing the `activity.TraceId` with the default `ActivityTraceId` using the `==` operator or `Equals` method, the comparison should return true if the `activity.TraceId` has the default value.`\n\n### Actual behavior\n\nWhen comparing the `activity.TraceId` with the default `ActivityTraceId` using the `==` operator or `Equals` method, the comparison always returns `false`, even if the `activity.TraceId` has the default value.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nUse `ToString()` and then compare.  \n\n### Configuration\n\n- Which version of .NET is the code running on?\r\n .NET 6   (6.0.408)\r\n- What OS and version, and what distro if applicable? \r\nWindows 10.\r\n- What is the architecture (x64, x86, ARM, ARM64)? \r\nx64\r\n- Do you know whether it is specific to that configuration? \r\nDon\u0027t think so.\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eRishabh-V\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-System.Diagnostics.Activity`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-22T21:42:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ah4lP",
                                           "createdAt":  "2023-04-22T21:51:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Please call out if I am doing or expecting something unreasonable. \r\n\r\nYou are not doing anything wrong. This is a corner case. For now, if you want to work around the issue, try to compare `ActivityTraceId.ToHexString` which should work fine in all cases.",
                                           "updatedAt":  "2023-04-22T21:51:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ai_JT",
                                           "createdAt":  "2023-04-23T17:55:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6aihw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2023-04-23T18:16:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Rishabh-V",
                                           "body":  "\u003e You are not doing anything wrong. This is a corner case. For now, if you want to work around the issue, try to compare `ActivityTraceId.ToHexString` which should work fine in all cases.\r\n\r\nThanks for a quick response. Given `ToString()` internally calls `ToHexString()`, so I think, `ToString()` should work equally well, which I am using currently. Thanks. \r\n",
                                           "updatedAt":  "2023-04-23T17:55:24Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Possible issue with `Equals`  implementation in `ActivityTraceId` ",
        "labels":  [
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86966",
        "createdAt":  "2023-05-31T18:59:10Z",
        "number":  86966,
        "author":  "cretz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-10T14:55:08Z",
        "body":  "### Background and motivation\n\nPeople need to be able to set the (async local) current activity _context_ for parenting without being forced to create/start an _activity_. In OTel this is referred to as [\"attach context\"](https://opentelemetry.io/docs/specs/otel/context/#attach-context).\r\n\r\nIn my particular use case, I re-obtain activity context and baggage via OTel propagation in a general library, and I need to set that context as the \"current\" context for implicit parenting by all basic uses of `ActivitySource.CreateActivity` and `ActivitySource.StartActivity` downstream. I cannot afford to create an activity every time just to get the parent context on the implicit async local nor is it reasonable for me to ask all users of the application to use create/start overload and manually access my custom `ActivityContext.Current` async local for every activity created.\r\n\r\nAn `ActivityContext.Current` would be defaulted in the internal `ActivitySource.CreateActivity` if it\u0027s present _after_ choosing the context on the current activity. That way existing behavior remains the same as today. So what was effectively `var context = contextParam ?? Activity.Current?.Context` would become `var context = contextParam ?? Activity.Current?.Context ?? ActivityContext.Current`. \n\n### API Proposal\n\n```csharp\r\npublic readonly struct ActivityContext\r\n{\r\n    // ...\r\n\r\n    public static ActivityContext? Current { get; set; }\r\n}\r\n```\r\n\r\nIt is up for discussion whether `ActivityContext.Current` getter should return the `Activity.Current?.Context` if there is not an explicit async local one.\n\n### API Usage\n\n```csharp\r\npublic void MyThing()\r\n{\r\n    var existingActivity = Activity.Current;\r\n    var existingContext = ActivityContext.Current;\r\n    Activity.Current = null;\r\n    ActivityContext.Current = DeserializeFromPropagatedCarrier();\r\n    try\r\n    {\r\n        RunDownstreamCode();\r\n    }\r\n    finally\r\n    {\r\n        Activity.Current = existingActivity;\r\n        ActivityContext.Current = existingContext;\r\n    }\r\n}\r\n```\r\n\r\nWith that, I have effectively performed [attach context](https://opentelemetry.io/docs/specs/otel/context/#attach-context) without starting a new activity.\n\n### Alternative Designs\n\nAn alternative approach would be to support creating an activity from a context, but that may be more confusing/problematic because people expect activities to be created where they start and not be able to be rehydrated from a context.\n\n### Risks\n\nPrimary risk is user confusion of knowing _which_ implicit context is used for parenting by default at create/start activity call.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoZS0xA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5dn_Rw",
                                           "createdAt":  "2023-05-31T18:59:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-activity\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nPeople need to be able to set the (async local) current activity _context_ for parenting without being forced to create/start an _activity_. In OTel this is referred to as [\"attach context\"](https://opentelemetry.io/docs/specs/otel/context/#attach-context).\r\n\r\nIn my particular use case, I re-obtain activity context and baggage via OTel propagation in a general library, and I need to set that context as the \"current\" context for implicit parenting by all basic uses of `ActivitySource.CreateActivity` and `ActivitySource.StartActivity` downstream. I cannot afford to create an activity every time just to get the parent context on the implicit async local nor is it reasonable for me to ask all users of the application to use create/start overload and manually access my custom `ActivityContext.Current` async local for every activity created.\r\n\r\nAn `ActivityContext.Current` would be defaulted in the internal `ActivitySource.CreateActivity` if it\u0027s present _after_ choosing the context on the current activity. That way existing behavior remains the same as today. So what was effectively `var context = contextParam ?? Activity.Current?.Context` would become `var context = contextParam ?? Activity.Current?.Context ?? ActivityContext.Current`. \n\n### API Proposal\n\n```csharp\r\npublic readonly struct ActivityContext\r\n{\r\n    // ...\r\n\r\n    public static ActivityContext? Current { get; set; }\r\n}\r\n```\r\n\r\nIt is up for discussion whether `ActivityContext.Current` getter should return the `Activity.Current?.Context` if there is not an explicit async local one.\n\n### API Usage\n\n```csharp\r\npublic void MyThing()\r\n{\r\n    var existingActivity = Activity.Current;\r\n    var existingContext = ActivityContext.Current;\r\n    Activity.Current = null;\r\n    ActivityContext.Current = DeserializeFromPropagatedCarrier();\r\n    try\r\n    {\r\n        RunDownstreamCode();\r\n    }\r\n    finally\r\n    {\r\n        Activity.Current = existingActivity;\r\n        ActivityContext.Current = existingContext;\r\n    }\r\n}\r\n```\r\n\r\nWith that, I have effectively performed [attach context](https://opentelemetry.io/docs/specs/otel/context/#attach-context) without starting a new activity.\n\n### Alternative Designs\n\nAn alternative approach would be to support creating an activity from a context, but that may be more confusing/problematic because people expect activities to be created where they start and not be able to be rehydrated from a context.\n\n### Risks\n\nPrimary risk is user confusion of knowing _which_ implicit context is used for parenting by default at create/start activity call.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecretz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics.Activity`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-31T18:59:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5doEMj",
                                           "createdAt":  "2023-05-31T19:11:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@cijothomas @reyang @CodeBlanch Isn\u0027t this already supported by OTel context propagators? \r\n\r\nCC @noahfalk ",
                                           "updatedAt":  "2023-05-31T19:11:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5doIjx",
                                           "createdAt":  "2023-05-31T19:21:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cretz",
                                           "body":  "OTel context propagation only supports serializing/deserializing to `OpenTelemetry.Context.Propagation.PropagationContext` which is just an `ActivityContext` + `Baggage` combo. But the example that https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md#context-propagation points to for [inject](https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/examples/MicroserviceExample/Utils/Messaging/MessageSender.cs) and [extract](https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/examples/MicroserviceExample/Utils/Messaging/MessageReceiver.cs) require you to start an activity to use the propagated context because .NET has no facility to set a context without an activity being created.",
                                           "updatedAt":  "2023-05-31T19:21:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5doWGR",
                                           "createdAt":  "2023-05-31T19:58:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e But the example that [open-telemetry/opentelemetry-dotnet@main/src/OpenTelemetry.Api/README.md#context-propagation](https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Api/README.md?rgh-link-date=2023-05-31T19%3A21%3A31Z#context-propagation) points to for [inject](https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/examples/MicroserviceExample/Utils/Messaging/MessageSender.cs?rgh-link-date=2023-05-31T19%3A21%3A31Z) and [extract](https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/examples/MicroserviceExample/Utils/Messaging/MessageReceiver.cs?rgh-link-date=2023-05-31T19%3A21%3A31Z) require you to start an activity to use the propagated context because .NET has no facility to set a context without an activity being created.\r\n\r\nI am not sure this is true. you can create your own context and inject it without creating any Activity objects. The snippet in the code is just using Activity for demonstration. but you can create your own context using `new ActivityContext` and inject it. \r\n\r\n```C#\r\n                ActivityContext contextToInject = default;\r\n                if (activity != null)\r\n                {\r\n                    contextToInject = activity.Context;\r\n                }\r\n                else if (Activity.Current != null)\r\n                {\r\n                    contextToInject = Activity.Current.Context;\r\n                }\r\n\r\n                // Inject the ActivityContext into the message headers to propagate trace context to the receiving service.\r\n                Propagator.Inject(new PropagationContext(contextToInject, Baggage.Current), props, this.InjectTraceContextIntoBasicProperties);\r\n```",
                                           "updatedAt":  "2023-05-31T19:58:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dodDv",
                                           "createdAt":  "2023-05-31T20:16:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cretz",
                                           "body":  "It is true when you need to _use_ the propagated context _implicitly_. You cannot have all downstream activities use an implicit context for parenting, .NET requires they only use implicit activities for parenting.\r\n\r\nMy use case is to let users create their own activities via normal `StartActivity`/`CreateActivity`. As an exercise, take this user code:\r\n\r\n```csharp\r\npublic void DoThing()\r\n{\r\n    using (myActivitySource.StartActivity(\"foo\"))\r\n    {\r\n        DoSomethingElse();\r\n    }\r\n}\r\n```\r\n\r\nWe need to implement `RunThingWithContextPropagated` in our library such that they can call `RunThingWithContextPropagated(() =\u003e DoThing())`. But we don\u0027t want to create an activity for our call because it\u0027d be far too noisy. It is a normal operation to restore a context to its implicit place without creating a span in OTel.\r\n\r\nSo how do we write `RunThingWithContextPropagated`?\r\n\r\n```csharp\r\npublic void RunThingWithContextPropagated(Action action)\r\n{\r\n    var ctx = ExtractViaPropagationContextSomehow();\r\n\r\n    // TODO: What do I do here to make the downstream `StartActivity` _implicitly_ use that context?\r\n    // We DO NOT want to create a new activity everytime this function is called.\r\n    \r\n    action();\r\n}\r\n```\r\n\r\nI hope that helps clarify. This is a very normal thing in OTel (and OpenTracing and most other tracing approaches) to be able to rehydrate a span/activity _context_ that becomes the implicit parent without being forced to create a span. I can show how this is done in other OTel impls (e.g. https://opentelemetry-python.readthedocs.io/en/latest/api/context.html#opentelemetry.context.attach).",
                                           "updatedAt":  "2023-05-31T20:18:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hlLTE",
                                           "createdAt":  "2025-03-10T14:55:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEW70Cg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "kzu",
                                                                               "createdAt":  "2025-06-17T17:13:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Aaronontheweb",
                                           "body":  "I added a clear use case for this here: https://github.com/open-telemetry/opentelemetry-dotnet/issues/6085 - if I want to pass a context after-the-fact to an asynchonrous logging system, it\u0027d be great if I could just pass the span context and now the entire `Activity` ",
                                           "updatedAt":  "2025-03-10T14:55:06Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: System.Diagnostics.ActivityContext.Current ability or similar",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88332",
        "createdAt":  "2023-07-03T14:02:09Z",
        "number":  88332,
        "author":  "JamesNK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEAI8g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2023-07-04T22:03:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2023-08-24T15:28:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "splitt3r",
                                            "createdAt":  "2025-06-16T16:13:36Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-26T10:40:40Z",
        "body":  "Activity doesn\u0027t have a great debug experience:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/303201/c434f586-2d58-45d5-9320-c0638852fedb)\r\n\r\nAdd `DebuggerDisplay` and `DebuggerTypeProxy` to make it easier to discover important information. For example, `OperationName` in the debugger display. And make it easier to view baggage and tags set on an activity.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi34Qvg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5gdjJU",
                                           "createdAt":  "2023-07-03T14:02:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @thaystg\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nActivity doesn\u0027t have a great debug experience:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/303201/c434f586-2d58-45d5-9320-c0638852fedb)\r\n\r\nAdd `DebuggerDisplay` and `DebuggerTypeProxy` to make it easier to discover important information.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJamesNK\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Debugger-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-03T14:02:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gdjqQ",
                                           "createdAt":  "2023-07-03T14:02:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-activity\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nActivity doesn\u0027t have a great debug experience:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/303201/c434f586-2d58-45d5-9320-c0638852fedb)\r\n\r\nAdd `DebuggerDisplay` and `DebuggerTypeProxy` to make it easier to discover important information.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJamesNK\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Debugger-mono`, `area-System.Diagnostics.Activity`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-03T14:02:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HaKNE",
                                           "createdAt":  "2024-08-06T17:23:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@tarekgh is this something we\u0027re planning for 9.0?",
                                           "updatedAt":  "2024-08-06T17:23:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LfhC-",
                                           "createdAt":  "2024-09-10T10:35:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "I suggest adding the help wanted tag if the diagonstics team doesn\u0027t have time to look at this.",
                                           "updatedAt":  "2024-09-10T10:35:30Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Add DebuggerDisplay to Activity and friends",
        "labels":  [
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91265",
        "createdAt":  "2023-08-29T12:57:29Z",
        "number":  91265,
        "author":  "Mpdreamz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-12-19T02:00:49Z",
        "body":  "### Description\n\nStopping an entry span (one that starts a trace) before its children \u0027leaks\u0027 as `Activity.Current` never gets cleared out to `null` again. \r\n\r\n\r\nThis can erroneously cause all subsequent activities to reuse the \u0027leaked\u0027 `trace id`. \r\n\r\n\n\n### Reproduction Steps\n\nUsing the following minimal bootstrap:\r\n\r\n```csharp\r\nusing System.Diagnostics;\r\n\r\nvar listener = new ActivityListener\r\n{\r\n    ShouldListenTo = _ =\u003e true,\r\n    Sample = (ref ActivityCreationOptions\u003cActivityContext\u003e _) =\u003e ActivitySamplingResult.AllData\r\n};\r\nActivitySource.AddActivityListener(listener);\r\n```\r\n\r\n\r\nStarting 3 traces but disposing the entry span before its children:\r\n\r\n```csharp\r\n// Activity.Current == null here (correctly)\r\nfor (var i = 0; i \u003c 3; i++)\r\n{\r\n    Console.WriteLine($\"=\u003e Trace {i}\");\r\n    using var entry = source.StartActivity()!;\r\n    Console.WriteLine($\"=\u003e Active after entry start: {Activity.Current?.Id}\");\r\n    //using var child = source.StartActivity();\r\n    using var span = new Activity(\"child\").Start();\r\n    entry.Stop();\r\n    Console.WriteLine($\"=\u003e Active after entry stop : {Activity.Current?.Id}\");\r\n    child.Stop();\r\n    Console.WriteLine($\"=\u003e Active after child stop : {Activity.Current?.Id}\");\r\n    Console.WriteLine();\r\n}\r\nif (Activity.Current != null)\r\n    Console.WriteLine(\"Still an active trace after all activities are disposed\");\r\n```\r\n\r\nWill yield: \r\n\r\n```\r\n=\u003e Trace 0\r\n=\u003e Active after entry start: 00-1ad1700f46edcdcadbb6c81f20ae206b-f57b7b80644b96ab-00\r\n=\u003e Active after entry stop : \r\n=\u003e Active after span stop  : 00-1ad1700f46edcdcadbb6c81f20ae206b-f57b7b80644b96ab-00\r\n\r\n=\u003e Trace 1\r\n=\u003e Active after entry start: 00-1ad1700f46edcdcadbb6c81f20ae206b-a134bcc4a3b21a5d-00\r\n=\u003e Active after entry stop : 00-1ad1700f46edcdcadbb6c81f20ae206b-f57b7b80644b96ab-00\r\n=\u003e Active after span stop  : 00-1ad1700f46edcdcadbb6c81f20ae206b-a134bcc4a3b21a5d-00\r\n\r\n=\u003e Trace 2\r\n=\u003e Active after entry start: 00-1ad1700f46edcdcadbb6c81f20ae206b-f618bcf43a2b475f-00\r\n=\u003e Active after entry stop : 00-1ad1700f46edcdcadbb6c81f20ae206b-a134bcc4a3b21a5d-00\r\n=\u003e Active after span stop  : 00-1ad1700f46edcdcadbb6c81f20ae206b-f618bcf43a2b475f-00\r\n\r\nStill an active trace after all activities are disposed\r\n```\r\n\r\n\r\nWe can clearly see the `child.Stop()` on the first trace will reinstate `entry` as the `Activity.Current` even though `entry` was already stopped.\r\n\r\n\r\nOn any subsequent iteration the will reuse the `traceid` of the first trace and continue it rather than creating a new one. \r\n\r\n\r\n\n\n### Expected behavior\n\n```csharp\r\nfor (var i = 0; i \u003c 3; i++)\r\n{\r\n    using var entry = source.StartActivity()!;\r\n    Console.WriteLine($\"=\u003e Active after entry start: {Activity.Current?.Id}\");\r\n    using var child = new Activity(\"child\").Start();\r\n}\r\nif (Activity.Current == null)\r\n    Console.WriteLine(\"Correctly reset `Activity.Current` to null as there are no active traces anymore\");\r\n\r\n```\r\n\r\nor even more explicitly \r\n\r\n```csharp\r\nfor (var i = 0; i \u003c 3; i++)\r\n{\r\n    using var entry = source.StartActivity()!;\r\n    Console.WriteLine($\"=\u003e Active after entry start: {Activity.Current?.Id}\");\r\n    using var child = new Activity(\"child\").Start();\r\n    child.Stop();\r\n    entry.Stop();\r\n}\r\n\r\nif (Activity.Current == null)\r\n    Console.WriteLine(\"Correctly reset `Activity.Current` to null as there are no active traces anymore\");\r\n```\r\n\r\nWill yield something similar to:\r\n\r\n```\r\n=\u003e Active after entry start: 00-7144ae3329e4a2b40fac87c0283b8c97-f7846dc870c902aa-00\r\n=\u003e Active after entry start: 00-7c13f4ccf62fa622fe2caf8e5483945e-a7a9e6820e08a0cc-00\r\n=\u003e Active after entry start: 00-6c5a1ddde105a9bcbcdc3d9e6661e08b-dbb803f80eb53244-00\r\nCorrectly reset `Activity.Current` to null as there are no active traces anymore\r\n``` \r\n\r\nEnsuring each iteration correctly starts a new trace and after the for loop `Activity.Current` is correctly reset to `null`.\r\n    \r\n\r\nThe only way to clear this state is to manually set `Activity.Current` to `null`.\r\n\r\n\n\n### Actual behavior\n\nStopping activities out of order may cause `Activity.Current` to stick to a certain `traceid`.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET \u003c= 7.0\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOboGbPQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5lLDcw",
                                           "createdAt":  "2023-08-29T12:57:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nStopping an entry span (one that starts a trace) before its children \u0027leaks\u0027 as `Activity.Current` never gets cleared out to `null` again. \r\n\r\n\r\nThis can erroneously cause all subsequent activities to reuse the \u0027leaked\u0027 `trace id`. \r\n\r\n\n\n### Reproduction Steps\n\nUsing the following minimal bootstrap:\r\n\r\n```csharp\r\nusing System.Diagnostics;\r\n\r\nvar listener = new ActivityListener\r\n{\r\n    ShouldListenTo = _ =\u003e true,\r\n    Sample = (ref ActivityCreationOptions\u003cActivityContext\u003e _) =\u003e ActivitySamplingResult.AllData\r\n};\r\nActivitySource.AddActivityListener(listener);\r\n```\r\n\r\n\r\nStarting 3 traces but disposing the entry span before its children:\r\n\r\n```csharp\r\n// Activity.Current == null here (correctly)\r\nfor (var i = 0; i \u003c 3; i++)\r\n{\r\n    Console.WriteLine($\"=\u003e Trace {i}\");\r\n    using var entry = source.StartActivity()!;\r\n    Console.WriteLine($\"=\u003e Active after entry start: {Activity.Current?.Id}\");\r\n    //using var child = source.StartActivity();\r\n    using var span = new Activity(\"child\").Start();\r\n    entry.Stop();\r\n    Console.WriteLine($\"=\u003e Active after entry stop : {Activity.Current?.Id}\");\r\n    child.Stop();\r\n    Console.WriteLine($\"=\u003e Active after child stop : {Activity.Current?.Id}\");\r\n    Console.WriteLine();\r\n}\r\nif (Activity.Current != null)\r\n    Console.WriteLine(\"Still an active trace after all activities are disposed\");\r\n```\r\n\r\nWill yield: \r\n\r\n```\r\n=\u003e Trace 0\r\n=\u003e Active after entry start: 00-1ad1700f46edcdcadbb6c81f20ae206b-f57b7b80644b96ab-00\r\n=\u003e Active after entry stop : \r\n=\u003e Active after span stop  : 00-1ad1700f46edcdcadbb6c81f20ae206b-f57b7b80644b96ab-00\r\n\r\n=\u003e Trace 1\r\n=\u003e Active after entry start: 00-1ad1700f46edcdcadbb6c81f20ae206b-a134bcc4a3b21a5d-00\r\n=\u003e Active after entry stop : 00-1ad1700f46edcdcadbb6c81f20ae206b-f57b7b80644b96ab-00\r\n=\u003e Active after span stop  : 00-1ad1700f46edcdcadbb6c81f20ae206b-a134bcc4a3b21a5d-00\r\n\r\n=\u003e Trace 2\r\n=\u003e Active after entry start: 00-1ad1700f46edcdcadbb6c81f20ae206b-f618bcf43a2b475f-00\r\n=\u003e Active after entry stop : 00-1ad1700f46edcdcadbb6c81f20ae206b-a134bcc4a3b21a5d-00\r\n=\u003e Active after span stop  : 00-1ad1700f46edcdcadbb6c81f20ae206b-f618bcf43a2b475f-00\r\n\r\nStill an active trace after all activities are disposed\r\n```\r\n\r\n\r\nWe can clearly see the `child.Stop()` on the first trace will reinstate `entry` as the `Activity.Current` even though `entry` was already stopped.\r\n\r\n\r\nOn any subsequent iteration the will reuse the `traceid` of the first trace and continue it rather than creating a new one. \r\n\r\n\r\n\n\n### Expected behavior\n\n```csharp\r\nfor (var i = 0; i \u003c 3; i++)\r\n{\r\n    using var entry = source.StartActivity()!;\r\n    Console.WriteLine($\"=\u003e Active after entry start: {Activity.Current?.Id}\");\r\n    using var child = new Activity(\"child\").Start();\r\n}\r\nif (Activity.Current == null)\r\n    Console.WriteLine(\"Correctly reset `Activity.Current` to null as there are no active traces anymore\");\r\n\r\n```\r\n\r\nor even more explicitly \r\n\r\n```csharp\r\nfor (var i = 0; i \u003c 3; i++)\r\n{\r\n    using var entry = source.StartActivity()!;\r\n    Console.WriteLine($\"=\u003e Active after entry start: {Activity.Current?.Id}\");\r\n    using var child = new Activity(\"child\").Start();\r\n    child.Stop();\r\n    entry.Stop();\r\n}\r\n\r\nif (Activity.Current == null)\r\n    Console.WriteLine(\"Correctly reset `Activity.Current` to null as there are no active traces anymore\");\r\n```\r\n\r\nWill yield something similar to:\r\n\r\n```\r\n=\u003e Active after entry start: 00-7144ae3329e4a2b40fac87c0283b8c97-f7846dc870c902aa-00\r\n=\u003e Active after entry start: 00-7c13f4ccf62fa622fe2caf8e5483945e-a7a9e6820e08a0cc-00\r\n=\u003e Active after entry start: 00-6c5a1ddde105a9bcbcdc3d9e6661e08b-dbb803f80eb53244-00\r\nCorrectly reset `Activity.Current` to null as there are no active traces anymore\r\n``` \r\n\r\nEnsuring each iteration correctly starts a new trace and after the for loop `Activity.Current` is correctly reset to `null`.\r\n    \r\n\r\nThe only way to clear this state is to manually set `Activity.Current` to `null`.\r\n\r\n\n\n### Actual behavior\n\nStopping activities out of order may cause `Activity.Current` to stick to a certain `traceid`.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET \u003c= 7.0\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMpdreamz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Tracing`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-29T12:57:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lLFNz",
                                           "createdAt":  "2023-08-29T13:02:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@noahfalk ",
                                           "updatedAt":  "2023-08-29T13:02:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lM2mu",
                                           "createdAt":  "2023-08-29T17:34:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@Mpdreamz did you run into this issue in a real scenario? ",
                                           "updatedAt":  "2023-08-29T17:34:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lM8eR",
                                           "createdAt":  "2023-08-29T17:55:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-activity\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nStopping an entry span (one that starts a trace) before its children \u0027leaks\u0027 as `Activity.Current` never gets cleared out to `null` again. \r\n\r\n\r\nThis can erroneously cause all subsequent activities to reuse the \u0027leaked\u0027 `trace id`. \r\n\r\n\n\n### Reproduction Steps\n\nUsing the following minimal bootstrap:\r\n\r\n```csharp\r\nusing System.Diagnostics;\r\n\r\nvar listener = new ActivityListener\r\n{\r\n    ShouldListenTo = _ =\u003e true,\r\n    Sample = (ref ActivityCreationOptions\u003cActivityContext\u003e _) =\u003e ActivitySamplingResult.AllData\r\n};\r\nActivitySource.AddActivityListener(listener);\r\n```\r\n\r\n\r\nStarting 3 traces but disposing the entry span before its children:\r\n\r\n```csharp\r\n// Activity.Current == null here (correctly)\r\nfor (var i = 0; i \u003c 3; i++)\r\n{\r\n    Console.WriteLine($\"=\u003e Trace {i}\");\r\n    using var entry = source.StartActivity()!;\r\n    Console.WriteLine($\"=\u003e Active after entry start: {Activity.Current?.Id}\");\r\n    //using var child = source.StartActivity();\r\n    using var span = new Activity(\"child\").Start();\r\n    entry.Stop();\r\n    Console.WriteLine($\"=\u003e Active after entry stop : {Activity.Current?.Id}\");\r\n    child.Stop();\r\n    Console.WriteLine($\"=\u003e Active after child stop : {Activity.Current?.Id}\");\r\n    Console.WriteLine();\r\n}\r\nif (Activity.Current != null)\r\n    Console.WriteLine(\"Still an active trace after all activities are disposed\");\r\n```\r\n\r\nWill yield: \r\n\r\n```\r\n=\u003e Trace 0\r\n=\u003e Active after entry start: 00-1ad1700f46edcdcadbb6c81f20ae206b-f57b7b80644b96ab-00\r\n=\u003e Active after entry stop : \r\n=\u003e Active after span stop  : 00-1ad1700f46edcdcadbb6c81f20ae206b-f57b7b80644b96ab-00\r\n\r\n=\u003e Trace 1\r\n=\u003e Active after entry start: 00-1ad1700f46edcdcadbb6c81f20ae206b-a134bcc4a3b21a5d-00\r\n=\u003e Active after entry stop : 00-1ad1700f46edcdcadbb6c81f20ae206b-f57b7b80644b96ab-00\r\n=\u003e Active after span stop  : 00-1ad1700f46edcdcadbb6c81f20ae206b-a134bcc4a3b21a5d-00\r\n\r\n=\u003e Trace 2\r\n=\u003e Active after entry start: 00-1ad1700f46edcdcadbb6c81f20ae206b-f618bcf43a2b475f-00\r\n=\u003e Active after entry stop : 00-1ad1700f46edcdcadbb6c81f20ae206b-a134bcc4a3b21a5d-00\r\n=\u003e Active after span stop  : 00-1ad1700f46edcdcadbb6c81f20ae206b-f618bcf43a2b475f-00\r\n\r\nStill an active trace after all activities are disposed\r\n```\r\n\r\n\r\nWe can clearly see the `child.Stop()` on the first trace will reinstate `entry` as the `Activity.Current` even though `entry` was already stopped.\r\n\r\n\r\nOn any subsequent iteration the will reuse the `traceid` of the first trace and continue it rather than creating a new one. \r\n\r\n\r\n\n\n### Expected behavior\n\n```csharp\r\nfor (var i = 0; i \u003c 3; i++)\r\n{\r\n    using var entry = source.StartActivity()!;\r\n    Console.WriteLine($\"=\u003e Active after entry start: {Activity.Current?.Id}\");\r\n    using var child = new Activity(\"child\").Start();\r\n}\r\nif (Activity.Current == null)\r\n    Console.WriteLine(\"Correctly reset `Activity.Current` to null as there are no active traces anymore\");\r\n\r\n```\r\n\r\nor even more explicitly \r\n\r\n```csharp\r\nfor (var i = 0; i \u003c 3; i++)\r\n{\r\n    using var entry = source.StartActivity()!;\r\n    Console.WriteLine($\"=\u003e Active after entry start: {Activity.Current?.Id}\");\r\n    using var child = new Activity(\"child\").Start();\r\n    child.Stop();\r\n    entry.Stop();\r\n}\r\n\r\nif (Activity.Current == null)\r\n    Console.WriteLine(\"Correctly reset `Activity.Current` to null as there are no active traces anymore\");\r\n```\r\n\r\nWill yield something similar to:\r\n\r\n```\r\n=\u003e Active after entry start: 00-7144ae3329e4a2b40fac87c0283b8c97-f7846dc870c902aa-00\r\n=\u003e Active after entry start: 00-7c13f4ccf62fa622fe2caf8e5483945e-a7a9e6820e08a0cc-00\r\n=\u003e Active after entry start: 00-6c5a1ddde105a9bcbcdc3d9e6661e08b-dbb803f80eb53244-00\r\nCorrectly reset `Activity.Current` to null as there are no active traces anymore\r\n``` \r\n\r\nEnsuring each iteration correctly starts a new trace and after the for loop `Activity.Current` is correctly reset to `null`.\r\n    \r\n\r\nThe only way to clear this state is to manually set `Activity.Current` to `null`.\r\n\r\n\n\n### Actual behavior\n\nStopping activities out of order may cause `Activity.Current` to stick to a certain `traceid`.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET \u003c= 7.0\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMpdreamz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Activity`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-29T17:55:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5slSfg",
                                           "createdAt":  "2023-11-21T21:25:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-11-21T21:25:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tytD3",
                                           "createdAt":  "2023-12-06T03:01:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been automatically marked `no-recent-activity` because it has not had any activity for 14 days. It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will remove `no-recent-activity`.",
                                           "updatedAt":  "2023-12-06T03:01:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ugZs9",
                                           "createdAt":  "2023-12-13T14:09:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Mpdreamz",
                                           "body":  "\u003e @Mpdreamz did you run into this issue in a real scenario?\r\n\r\n@tarekgh if meaning in one the existing opentelemetry integrations, no. \r\n\r\nHowever I do believe this to be a general API problem. It would be quite common for someone to want to start a trace over various asynchronous work without being able to ensure the entry/starting span is not disposed before all this asynchronous work is completed. \r\n",
                                           "updatedAt":  "2023-12-13T14:09:25Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Activity.Current does not reset to null if entry span stops/disposes before child spans causing all subsequent activities to share the same trace id",
        "labels":  [
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91282",
        "createdAt":  "2023-08-29T17:07:41Z",
        "number":  91282,
        "author":  "kalyanaj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCySR5g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cijothomas",
                                            "createdAt":  "2023-08-30T20:25:01Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-20T03:39:40Z",
        "body":  "As part of the W3C Distributed Tracing working group, on 18th April 2023 we published the Level 2 (aka version 2) of the W3C Trace Context spec in \"Candidate Recommendation\" (CR) status: [https://www.w3.org/TR/trace-context-2/]\r\n\r\nThe main change is that this includes a new flag called the \"random trace id\" flag in the traceflags in the traceparent header, which when set, conveys that at least the right-most 7 bytes of the trace ID have been generated in a random (or pseudo-random) manner.  This can be helpful for samplers / sharding logic etc. as with this they can get stronger guarantees that traceID has been generated in a random/pseudo-random manner.\r\n \r\nWanted to update you on this spec for your evaluation and to consider adoption as part of .NET 9. Assuming the traceID is already being generated in a pseudo-random manner, this would involve setting the corresponding trace flag to reflect it. \r\n\r\nCC: @tarekgh ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvvpOdg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5lMv1z",
                                           "createdAt":  "2023-08-29T17:12:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-activity\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAs part of the W3C Distributed Tracing working group, on 18th April 2023 we published the Level 2 (aka version 2) of the W3C Trace Context spec in \"Candidate Recommendation\" (CR) status: [https://www.w3.org/TR/trace-context-2/]\r\n\r\nThe main change is that this includes a new flag called the \"random trace id\" flag in the traceflags in the traceparent header, which when set, conveys that at least the right-most 7 bytes of the trace ID have been generated in a random (or pseudo-random) manner.  This can be helpful for samplers / sharding logic etc. as with this they can get stronger guarantees that traceID has been generated in a random/pseudo-random manner.\r\n \r\nWanted to update you on this spec for your evaluation and to consider adoption as part of .NET 9. Assuming the traceID is already being generated in a pseudo-random manner, this would involve setting the corresponding trace flag to reflect it. \r\n\r\nCC: @tarekgh \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekalyanaj\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Activity`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-29T17:12:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-s_zU",
                                           "createdAt":  "2025-08-19T06:53:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stevejgordon",
                                           "body":  "@jeffhandley I was just reviewing this with regard to implementing samplers based on [this OTel spec](https://opentelemetry.io/docs/specs/otel/trace/tracestate-probability-sampling/). I see this has been bumped from .NET 10. It looks like the default behaviour is randomised, although consumers can pass their own IDs which may not be random. If I (or someone else) were to look at what\u0027s required to track the use of the random generator and then apply the flag, would that PR potentially make it in? I presume API changes may be required for cases where an ID is provided by the consumer to set the random flag, but for a first pass, we could set it when we know the runtime generated it?",
                                           "updatedAt":  "2025-08-19T06:53:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-zizh",
                                           "createdAt":  "2025-08-19T15:17:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@stevejgordon the specs still not stable to support that in the runtime. This is unlikely to be done before we ship .NET 10. We can target this for .NET 11 when the spec is finalized. ",
                                           "updatedAt":  "2025-08-19T15:17:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-93y0",
                                           "createdAt":  "2025-08-20T02:01:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I wonder if there is a chicken-and-egg problem.  The draft includes this text:\n\n\u003e As an exit criteria, the Working Group intends to demonstrate at least 2 implementations adopting this specification and making use of it, using a test suite.\n\nDoes that refer only to officially released and supported implementations, or would a fork of .NET Runtime also count if it implemented the new bit and had tests for it?",
                                           "updatedAt":  "2025-08-20T02:01:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6--k52",
                                           "createdAt":  "2025-08-20T03:39:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I find it hard to understand why the W3C process needs to differ from other standardization approaches. My concern is: what happens if a product adopts a specification, and then, before it becomes stable, the spec changes? In .NET, I don’t think we should risk rushing to support unstable specs, as that could lead to deprecations or breaking changes down the line.",
                                           "updatedAt":  "2025-08-20T03:39:40Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Request to support W3C TraceContext Level 2: Setting \"random traceid flag\" in tracecontext",
        "labels":  [
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96822",
        "createdAt":  "2024-01-11T00:00:47Z",
        "number":  96822,
        "author":  "CodeBlanch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEAI6w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cijothomas",
                                            "createdAt":  "2024-01-12T18:42:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "splitt3r",
                                            "createdAt":  "2025-06-16T16:13:30Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-01-12T09:44:21Z",
        "body":  "We have this issue open in OpenTelemetry .NET: https://github.com/open-telemetry/opentelemetry-dotnet/issues/3290\r\n\r\nThe spec says the SDK should _always_ create a span / `Activity` (even when it isn\u0027t being sampled) but we don\u0027t currently do that because we feel like the GC pressure will be too high.\r\n\r\nOpening this issue primarily because I don\u0027t think this has been tracked anywhere.\r\n\r\nRandom ideas...\r\n\r\n* #86966 has an idea to detach the context from the `Activity`. I think the goal is different but perhaps something like that might help.\r\n* Perhaps we could move the data kept on `Activity` to a sub-class which is only instantiated when needed to lower the footprint of `Activity` itself.\r\n* Some kind of pooling? Tricky because an `Activity` instance may be kept around for a while before it is exported (batching).\r\n\r\n/cc @alanwest @cijothomas @utpilla",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcJQx0Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5waotv",
                                           "createdAt":  "2024-01-11T01:12:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-activity\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe have this issue open in OpenTelemetry .NET: https://github.com/open-telemetry/opentelemetry-dotnet/issues/3290\r\n\r\nThe spec says the SDK should _always_ create a span / `Activity` (even when it isn\u0027t being sampled) but we don\u0027t currently do that because we feel like the GC pressure will be too high.\r\n\r\nOpening this issue primarily because I don\u0027t think this has been tracked anywhere.\r\n\r\nRandom ideas...\r\n\r\n* #86966 has an idea to detach the context from the `Activity`. I think the goal is different but perhaps something like that might help.\r\n* Perhaps we could move the data kept on `Activity` to a sub-class which is only instantiated when needed to lower the footprint of `Activity` itself.\r\n* Some kind of pooling? Tricky because an `Activity` instance may be kept around for a while before it is exported (batching).\r\n\r\n/cc @alanwest @cijothomas @utpilla\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCodeBlanch\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-System.Diagnostics.Activity`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-11T01:12:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wawvu",
                                           "createdAt":  "2024-01-11T01:45:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @noahfalk @reyang ",
                                           "updatedAt":  "2024-01-11T01:45:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wlDHR",
                                           "createdAt":  "2024-01-12T09:44:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODSzvQw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cijothomas",
                                                                               "createdAt":  "2024-01-12T18:43:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alanwest",
                                                                               "createdAt":  "2024-01-16T17:36:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Oberon00",
                                           "body":  "For the motivation as to why OTel always creates a Span ID, see https://github.com/open-telemetry/opentelemetry-specification/pull/1225 and linked PRs \u0026 issues.",
                                           "updatedAt":  "2024-01-12T09:44:20Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "System.Diagnostics.Activity memory footprint concern",
        "labels":  [
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97899",
        "createdAt":  "2024-02-02T21:35:15Z",
        "number":  97899,
        "author":  "CodeBlanch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-02T22:05:17Z",
        "body":  "### Background and motivation\n\nOpenTelemetry .NET\u0027s propagation API is centered around `ActivityContext`. Anytime we need to propagate a span/`Activity` (for example outgoing http call) we generate a W3C `traceparent`:\r\n\r\nhttps://github.com/open-telemetry/opentelemetry-dotnet/blob/ef942a11ac264d7b0f754a78dd3b4dd7d4d2c6f3/src/OpenTelemetry.Api/Context/Propagation/TraceContextPropagator.cs#L116-L121\r\n\r\nThis is a string allocation and takes some CPU cycles.\r\n\r\nIf a trace is NOT sampled, we create a single root span/`Activity`. That root span/`Activity` may be propagated many times servicing a request (if it calls a lot of downstream services). In that case we\u0027re going to be generating the same string each time.\r\n\r\nThe idea here is basically a performance optimization.\r\n\r\n`Activity` has this [Id](https://github.com/dotnet/runtime/blob/0d8c1e298bb6a896e9b9796832073b8fa9f73ecd/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/Activity.cs#L217) property which is the same W3C `traceparent` as what OTel is building, but it is cached so subsequent calls don\u0027t incur the perf hit to generate it.\r\n\r\nThe goal here is to expose that same `Id` on `ActivityContext` and utilize the cache mechanism where we can.\r\n\r\nProof of concept diff: https://github.com/dotnet/runtime/compare/main...CodeBlanch:activitycontext-id?expand=1\n\n### API Proposal\n\n```diff\r\nnamespace System.Diagnostics;\r\n\r\npublic readonly partial struct ActivityContext\r\n{\r\n+    public string Id { get; }\r\n}\r\n```\r\n\n\n### API Usage\n\n```diff\r\n// OTel W3C propagation implementation\r\npublic class TraceContextPropagator : TextMapPropagator\r\n{\r\n    public override void Inject\u003cT\u003e(PropagationContext context, T carrier, Action\u003cT, string, string\u003e setter)\r\n    {\r\n         // ...\r\n+        var traceparent = context.ActivityContext.Id;\r\n-#if NET6_0_OR_GREATER\r\n-        var traceparent = string.Create(55, context.ActivityContext, WriteTraceParentIntoSpan);\r\n-#else\r\n-        var traceparent = string.Concat(\"00-\", context.ActivityContext.TraceId.ToHexString(), \"-\", -context.ActivityContext.SpanId.ToHexString());\r\n-        traceparent = string.Concat(traceparent, (context.ActivityContext.TraceFlags \u0026 ActivityTraceFlags.Recorded) != 0 ? \"-01\" : \"-00\");\r\n-#endif\r\n         // ...\r\n    }\r\n}\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcrmuxg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5yuRe9",
                                           "createdAt":  "2024-02-02T21:35:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nOpenTelemetry .NET\u0027s propagation API is centered around `ActivityContext`. Anytime we need to propagate a span/`Activity` (for example outgoing http call) we generate a W3C `traceparent`:\r\n\r\nhttps://github.com/open-telemetry/opentelemetry-dotnet/blob/ef942a11ac264d7b0f754a78dd3b4dd7d4d2c6f3/src/OpenTelemetry.Api/Context/Propagation/TraceContextPropagator.cs#L116-L121\r\n\r\nThis is a string allocation and takes some CPU cycles.\r\n\r\nIf a trace is NOT sampled, we create a single root span/`Activity`. That root span/`Activity` may be propagated many times servicing a request (if it calls a lot of downstream services). In that case we\u0027re going to be generating the same string each time.\r\n\r\nThe idea here is basically a performance optimization.\r\n\r\n`Activity` has this [Id](https://github.com/dotnet/runtime/blob/0d8c1e298bb6a896e9b9796832073b8fa9f73ecd/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/Activity.cs#L217) property which is the same W3C `traceparent` as what OTel is building, but it is cached so subsequent calls don\u0027t incur the perf hit to generate it.\r\n\r\nThe goal here is to expose that same `Id` on `ActivityContext` and utilize the cache mechanism where we can.\r\n\r\nProof of concept diff: https://github.com/dotnet/runtime/compare/main...CodeBlanch:activitycontext-id?expand=1\n\n### API Proposal\n\n```diff\r\nnamespace System.Diagnostics;\r\n\r\npublic readonly partial struct ActivityContext\r\n{\r\n+    public string Id { get; }\r\n}\r\n```\r\n\n\n### API Usage\n\n```diff\r\n// OTel W3C propagation implementation\r\npublic class TraceContextPropagator : TextMapPropagator\r\n{\r\n    public override void Inject\u003cT\u003e(PropagationContext context, T carrier, Action\u003cT, string, string\u003e setter)\r\n    {\r\n         // ...\r\n+        var traceparent = context.ActivityContext.Id;\r\n-#if NET6_0_OR_GREATER\r\n-        var traceparent = string.Create(55, context.ActivityContext, WriteTraceParentIntoSpan);\r\n-#else\r\n-        var traceparent = string.Concat(\"00-\", context.ActivityContext.TraceId.ToHexString(), \"-\", -context.ActivityContext.SpanId.ToHexString());\r\n-        traceparent = string.Concat(traceparent, (context.ActivityContext.TraceFlags \u0026 ActivityTraceFlags.Recorded) != 0 ? \"-01\" : \"-00\");\r\n-#endif\r\n         // ...\r\n    }\r\n}\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCodeBlanch\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics.Tracing`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-02T21:35:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yua05",
                                           "createdAt":  "2024-02-02T22:04:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Note that, this proposal will increase the ActivityContext size which I guess it is used a lot especially ActivitContext is a struct which is possible get copied in some scenarios. You are not concerned about this? \r\n\r\nI marked this to future and we can get it back to current release if we see a demand need it soon. ",
                                           "updatedAt":  "2024-02-02T22:04:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yua7G",
                                           "createdAt":  "2024-02-02T22:05:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-activity\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nOpenTelemetry .NET\u0027s propagation API is centered around `ActivityContext`. Anytime we need to propagate a span/`Activity` (for example outgoing http call) we generate a W3C `traceparent`:\r\n\r\nhttps://github.com/open-telemetry/opentelemetry-dotnet/blob/ef942a11ac264d7b0f754a78dd3b4dd7d4d2c6f3/src/OpenTelemetry.Api/Context/Propagation/TraceContextPropagator.cs#L116-L121\r\n\r\nThis is a string allocation and takes some CPU cycles.\r\n\r\nIf a trace is NOT sampled, we create a single root span/`Activity`. That root span/`Activity` may be propagated many times servicing a request (if it calls a lot of downstream services). In that case we\u0027re going to be generating the same string each time.\r\n\r\nThe idea here is basically a performance optimization.\r\n\r\n`Activity` has this [Id](https://github.com/dotnet/runtime/blob/0d8c1e298bb6a896e9b9796832073b8fa9f73ecd/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/Activity.cs#L217) property which is the same W3C `traceparent` as what OTel is building, but it is cached so subsequent calls don\u0027t incur the perf hit to generate it.\r\n\r\nThe goal here is to expose that same `Id` on `ActivityContext` and utilize the cache mechanism where we can.\r\n\r\nProof of concept diff: https://github.com/dotnet/runtime/compare/main...CodeBlanch:activitycontext-id?expand=1\n\n### API Proposal\n\n```diff\r\nnamespace System.Diagnostics;\r\n\r\npublic readonly partial struct ActivityContext\r\n{\r\n+    public string Id { get; }\r\n}\r\n```\r\n\n\n### API Usage\n\n```diff\r\n// OTel W3C propagation implementation\r\npublic class TraceContextPropagator : TextMapPropagator\r\n{\r\n    public override void Inject\u003cT\u003e(PropagationContext context, T carrier, Action\u003cT, string, string\u003e setter)\r\n    {\r\n         // ...\r\n+        var traceparent = context.ActivityContext.Id;\r\n-#if NET6_0_OR_GREATER\r\n-        var traceparent = string.Create(55, context.ActivityContext, WriteTraceParentIntoSpan);\r\n-#else\r\n-        var traceparent = string.Concat(\"00-\", context.ActivityContext.TraceId.ToHexString(), \"-\", -context.ActivityContext.SpanId.ToHexString());\r\n-        traceparent = string.Concat(traceparent, (context.ActivityContext.TraceFlags \u0026 ActivityTraceFlags.Recorded) != 0 ? \"-01\" : \"-00\");\r\n-#endif\r\n         // ...\r\n    }\r\n}\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCodeBlanch\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-System.Diagnostics.Activity`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-02T22:05:15Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Expose Id on System.Diagnostics.ActivityContext",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100317",
        "createdAt":  "2024-03-01T23:26:54Z",
        "number":  100317,
        "author":  "lmolkova",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODI9tmg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "splitt3r",
                                            "createdAt":  "2025-06-16T16:13:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2025-07-29T14:01:27Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-06-20T19:00:22Z",
        "body":  "When configuring distributed tracing, it\u0027s useful to be able to enable and disable sources based on name(space) and other properties.\r\n\r\nFor example, Azure SDKs create multiple sources per library:\r\n- `Azure.Messaging.ServiceBus.SenderClient`, \r\n- `Azure.Messaging.ServiceBus.ReceiverClient`\r\n- .. but also also to trace individual message via `Azure.Messaging.ServiceBus.Message`.\r\n\r\nSome customer want per-message tracing, some don\u0027t, and we need to be able to tell them to enable `Azure.*` (or `Azure.Messaging.ServiceBus.*`) but disable the `Azure.Messaging.ServiceBus.Message`.\r\n\r\nAnother example is more common:  client libraries want to report logical operations (that trace public API surface calls), but want to make protocol level opt-in. E.g. `Azure.CosmosDb.Operation` is a source for logical operations that we want users and OTel distros  to enable by default and `Azure.CosmosDb.Request` would contain more verbose network traces that users should be able to opt into.\r\nWith `MetricsBuilder`-like API this would look like\r\n\r\n```csharp\r\nbuilder.Services.AddDistributedTracing(b =\u003e b.EnableTracing(\"Azure.\")\r\n                                  .DisableTracing(\"Azure.CosmosDb.Request\"));\r\n```\r\n\r\nIt\u0027s not super-convenient for end-users but should be reasonable for OTel Distros. OTel might provide better ways to do it (see below).\r\n\r\nSo, it would be great to have parity with metrics and provide builder-like API allowing to enable and disable sources.\r\n\r\nAt the same time, name is not enough/future-proof in both (tracing and metrics) cases.\r\n- When `ActivitySource` supports scope attributes dotnet/runtime#93795, they could be useful in `EnableSource` to enable/disable based on. Same is already the case for meter - [scope attributes and version](https://github.com/dotnet/runtime/blob/a604763dc82d382e47f5be9fad0b672dc3b3ad72/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/Metrics/Meter.cs#L68) could be useful in `IMetricsBuilder.EnableMetrics`\r\n- OTel at some point might introduce some concepts like verbosity and mechanism to enable/disable tracers/sources based on it. See https://github.com/open-telemetry/opentelemetry-specification/issues/3867 for the context.\r\n\r\nIt would be great to support some form of `EnableSource(Predicate\u003cActivitySource\u003e)` or a list of `EnableSource(string name, string? version, IEnumerable\u003c\u003e? scopeAttributes, ....)` overloads.\r\n\r\nSeparate from this issue, but it would be great to have consistent `IMetricsBuilder.Enable|Disable(Func\u003cMeter, Instrument, bool\u003e)` API or something else that allows to control metrics based on all meter properties.\r\n\r\nSee https://github.com/open-telemetry/opentelemetry-dotnet/pull/5353 for more details.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeH-TMg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc54f5Mt",
                                           "createdAt":  "2024-03-19T15:58:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lmolkova",
                                           "body":  "based on the discussion with otel-dotnet people, they are not open to take contributions and are not ready to take [\"maintenance burden\"](https://github.com/open-telemetry/opentelemetry-dotnet/pull/5353#pullrequestreview-1933092931).\r\n\r\nGiven that it\u0027s problematic for any big set of libraries and turning of sources is one of a common asks we have on Azure SDKs specifically in .NET, I\u0027d like to check if we can provide ability to turn off sources on the BCL level.\r\n\r\n",
                                           "updatedAt":  "2024-03-19T15:58:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54f5My",
                                           "createdAt":  "2024-03-26T23:18:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lmolkova",
                                           "body":  "@jeffschwMSFT @mkArtakMSFT I think it belongs in dotnet/runtime repo ([Microsoft.Extensions.Diagnostics](https://github.com/dotnet/runtime/tree/main/src/libraries/Microsoft.Extensions.Diagnostics) component) and the area should be diagnostics. Could you please check?\r\nThanks!",
                                           "updatedAt":  "2024-03-26T23:19:28Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Tracing configuration similar to MetricsBuilder",
        "labels":  [
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101219",
        "createdAt":  "2024-04-17T23:50:24Z",
        "number":  101219,
        "author":  "nblumhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAYuLA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hangy",
                                            "createdAt":  "2025-03-22T09:22:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "snakefoot",
                                            "createdAt":  "2025-03-22T09:53:42Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-06-20T19:00:48Z",
        "body":  "### Description\r\n\r\nIn .NET 8, `System.Diagnostics.Activity.SetParentId()` enables calling the internal `ActivitySpanId` constructor without checking for the default case `\"0000000000000000\"`.\r\n\r\nThis breaks an implied invariant exploited by `ActivitySpanId.operator==`, where `\"0000000000000000\"` is expected to map to a null `_hexString`, eliminating the cost of ensuring `null == \"0000000000000000\"` and vice-versa:\r\n\r\n```csharp\r\n        public static bool operator ==(ActivitySpanId spanId1, ActivitySpanId spandId2)\r\n        {\r\n            return spanId1._hexString == spandId2._hexString;\r\n        }\r\n```\r\n\r\nI hit this because I\u0027d assumed that `activity.ParentSpanId == default` was a valid way to determine whether an activity had a logical W3C parent.\r\n\r\nBecause of the bug, this comparison may return `true`, despite the parent actually being the invalid all-zeroes value.\r\n\r\nGiven the rest of the codebase attempts to protect against creation of `ActivitySpanId` values with non-null, all-zero `_hexString` fields, I suspect this is a bug in `SetParentId()`:\r\n\r\n```csharp\r\n                _traceId = traceId.ToHexString();     // The child will share the parent\u0027s traceId.\r\n                _parentSpanId = spanId.ToHexString();\r\n                ActivityTraceFlags = activityTraceFlags;\r\n                _parentTraceFlags = (byte)activityTraceFlags;\r\n```\r\n\r\nThe second line here should probably set `_parentSpanId` to `null` if `spanId` is `default`.\r\n\r\n\r\n### Reproduction Steps\r\n\r\n```csharp\r\n// dotnet new console\r\nusing System.Diagnostics;\r\n\r\n// Fails, correctly\r\n// ActivitySpanId.CreateFromString(default(ActivitySpanId).ToHexString());\r\n\r\nvar activity = new Activity(\"test\");\r\n\r\n// Fails to recognize `default` second argument, and passes the string `\"0000000000000000\"` to the `internal ActivitySpanId(string)` constructor\r\nactivity.SetParentId(ActivityTraceId.CreateRandom(), default);\r\n\r\nConsole.WriteLine(activity.ParentSpanId);\r\n// -\u003e 0000000000000000\r\n\r\nConsole.WriteLine(activity.ParentSpanId.ToHexString() == default(ActivitySpanId).ToHexString());\r\n// -\u003e True\r\n\r\nConsole.WriteLine(activity.ParentSpanId == default);\r\n// -\u003e False\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\n`activity.ParentSpanId == default` should be true in any scenario in which `ParentSpanId` is an all-zeroes value.\r\n\r\n### Actual behavior\r\n\r\n`activity.ParentSpanId == default` is false.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOggShBw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc568pR8",
                                           "createdAt":  "2024-04-17T23:50:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-activity\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-17T23:50:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CBKEH",
                                           "createdAt":  "2024-06-20T18:59:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEK90qA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hangy",
                                                                               "createdAt":  "2025-03-22T09:23:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "This is similar/duplicate of https://github.com/dotnet/runtime/issues/85198 I guess.",
                                           "updatedAt":  "2024-06-20T18:59:24Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "`Activity.SetParentId()`allows creation of `ActivitySpanId` that breaks `==` expectations ",
        "labels":  [
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101775",
        "createdAt":  "2024-05-01T21:27:47Z",
        "number":  101775,
        "author":  "antonfirsov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-06T17:31:09Z",
        "body":  "According to https://github.com/open-telemetry/opentelemetry-specification/blob/v1.31.0/specification/trace/api.md#end, child spans are allowed to outlive their parents:\r\n\r\n\u003e `End` MUST NOT have any effects on child spans. Those may still be running and can be ended later.\r\n\r\nHowever in .NET such activities may lead to weird behavior resulting in `Activity.Current` becoming an activity that has been already stopped, leaving devs without an option to leave the corrupted state:\r\n\r\n```C#\r\nActivity a = new Activity(\"a\").Start();\r\nActivity b = new Activity(\"b\").Start();\r\nActivity c = new Activity(\"c\").Start();\r\n\r\nb.Stop();\r\nConsole.WriteLine(Activity.Current!.OperationName); // Prints \"a\"\r\nc.Stop();\r\nConsole.WriteLine(Activity.Current!.OperationName); // Prints \"b\" -- already stopped!\r\nb.Stop(); // Does nothing\r\nConsole.WriteLine(Activity.Current!.OperationName); // Still prints \"b\"\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfPbxqQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc58hinI",
                                           "createdAt":  "2024-05-01T21:28:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-01T21:28:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58hx-F",
                                           "createdAt":  "2024-05-01T22:22:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I think you are mixing between `Parent` and `Current`. \r\n\r\nDoing:\r\n\r\n```C#\r\n            b.Stop();\r\n            Console.WriteLine($\"Current: {Activity.Current!.OperationName} ... b.Parent: {b.Parent!.OperationName}, b.Parent.IsStopped: {b.Parent!.IsStopped} ... c.IsStopped: {c.IsStopped}\");\r\n```\r\n\r\nprint\r\n\r\n```\r\nCurrent: a ... b.Parent: a, b.Parent.IsStopped: False ... c.IsStopped: False // clearly stopping the parent didn\u0027t stop the child.\r\n```\r\n\r\nI can see we may improve the `Current` behavior but I am not sure if this will be a breaking change? \r\n\r\nCC @noahfalk \r\n",
                                           "updatedAt":  "2024-05-01T22:48:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58hyN1",
                                           "createdAt":  "2024-05-01T22:23:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-activity\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-01T22:23:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58h-xr",
                                           "createdAt":  "2024-05-01T23:25:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "\u003e clearly stopping the parent didn\u0027t stop the child.\r\n\r\nI didn\u0027t state that that stopping the parent stops the child. It\u0027s all about `Activity.Current` flipping into a corrupt state, which then messes up parent-child relationships of all future activities created. I quoted the standard only to emphasize that such cases are valid.\r\n\r\nActually, the same problem is present when there is no intention to create a parent-child relationship between the activities, ie. when creating `c` via an `ActivitySource` + manually provided `ActivityContext`:\r\n\r\n```C#\r\nActivity c = activitySource.CreateActivity(\"c\", ActivityKind.Internal,\r\n    new ActivityContext(ActivityTraceId.CreateRandom(), ActivitySpanId.CreateRandom(), ActivityTraceFlags.None));\r\n```\r\n\r\nThis ~is preventing us from implementing~ might be problematic if we implement #93832: we want the connection activity to be unrelated to `Activity.Current` when we create it, and expect it to outlive the previos `Activity.Current` (the HTTP request activity).",
                                           "updatedAt":  "2024-05-01T23:39:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58iB1m",
                                           "createdAt":  "2024-05-01T23:40:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e I didn\u0027t state that that stopping the parent stops the child. \r\n\r\nYou were referring to the OTel specs that says: `MUST NOT have any effects on child spans. Those may still be running and can be ended later.` 😄.\r\n\r\nAnyway, I am not objecting we try to fix the `Current` behavior. I am just checking if we should worry about the breaking change. ",
                                           "updatedAt":  "2024-05-02T00:07:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58vIy5",
                                           "createdAt":  "2024-05-03T10:28:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODghMQQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2024-05-03T13:48:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "I\u0027d consider the current behavior a bug and I think it would be legitimate for us to fix it. I\u0027d guess it has very low (but not zero) odds of breaking someone. \r\n\r\n\u003e leaving devs without an option to leave the corrupted state:\r\n\r\nActivity.Current has a public setter which is one way it could be recovered. In your example calling a.Stop() would also recover it. In async code returning to the caller also restores the caller\u0027s async locals so thats another option.\r\n\r\n\u003e This is preventing us from implementing might be problematic if we implement https://github.com/dotnet/runtime/issues/93832: we want the connection activity to be unrelated to Activity.Current when we create it,\r\n\r\n.NET doesn\u0027t have an explicit API to create new root Activities, but you can set `Activity.Current=null` as a workaround like this:\r\n\r\n```C#\r\nprivate async ValueTask\u003c(Stream, TransportContext?, Activity?, IPEndPoint?)\u003e ConnectAsync(HttpRequestMessage request, bool async, CancellationToken cancellationToken)\r\n{\r\n    // assume Activity.Current is set to some arbitrary http request activity that should not\r\n    // be the parent of this activity\r\n    Activity.Current = null;\r\n    Activity connectionActivity = s_connectionActivitySource.StartActivity(\r\n       DiagnosticsHandlerLoggingStrings.ConnectionActivityName);\r\n}\r\n```\r\n\r\nIf you weren\u0027t in an async function you\u0027d probably want to save and restore the previous value of Activity.Current, but returning from an async function restores the parent\u0027s async locals automatically.\r\n\r\n",
                                           "updatedAt":  "2024-05-03T10:28:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5816Na",
                                           "createdAt":  "2024-05-05T00:05:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "\u003e ```cs\r\n\u003e private async ValueTask\u003c(Stream, TransportContext?, Activity?, IPEndPoint?)\u003e ConnectAsync(HttpRequestMessage request, bool async, CancellationToken cancellationToken)\r\n\u003e {\r\n\u003e     // assume Activity.Current is set to some arbitrary http request activity that should not\r\n\u003e     // be the parent of this activity\r\n\u003e     Activity.Current = null;\r\n\u003e     Activity connectionActivity = s_connectionActivitySource.StartActivity(\r\n\u003e        DiagnosticsHandlerLoggingStrings.ConnectionActivityName);\r\n\u003e }\r\n\u003e ```\r\n\r\nThis feels like an unintuative pattern. I would expect to have a parameter on the StartActivity call to de-parent the child or to explicitly call SetParentId. This looks like you\u0027re changing static state in order to disconnect the child and requires complex knowledge to understand that it will be restored at exit.",
                                           "updatedAt":  "2024-05-05T00:05:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc582gIO",
                                           "createdAt":  "2024-05-05T07:16:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODg0E_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2024-05-06T16:14:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e `Activity.Current` becoming an activity that has been already stopped\n\nThat was reported in \u003chttps://github.com/dotnet/runtime/issues/91265\u003e as well.\n\n\u003e I would expect to have a parameter on the StartActivity call to de-parent the child or to explicitly call SetParentId.\n\nDe-parenting in StartActivity is \u003chttps://github.com/dotnet/runtime/issues/65528\u003e.\n",
                                           "updatedAt":  "2024-05-05T07:16:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc589vGp",
                                           "createdAt":  "2024-05-06T17:31:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e This feels like an unintuative pattern\r\n\r\nYep, no claim that it is easy or intuitive. Its just what is currently available to work with.",
                                           "updatedAt":  "2024-05-06T17:31:08Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Child Activity outliving its parent corrupts `Activity.Current`",
        "labels":  [
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102896",
        "createdAt":  "2024-05-30T19:37:19Z",
        "number":  102896,
        "author":  "CodeBlanch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-30T20:01:04Z",
        "body":  "We can use [DiagnosticSourceEventSource](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticSourceEventSource.cs) to listen to `Activity` \\ traces out of proc. One of the things it does is normalize all tags (`KeyValuePair\u003cstring, object?\u003e`) into strings (`KeyValuePair\u003cstring, string?\u003e`).\r\n\r\nCode:\r\nhttps://github.com/dotnet/runtime/blob/aedb91f487e4bb4ee6f08cd3826233d434736cf7/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticSourceEventSource.cs#L1207\r\n\r\nQuestion: Should we use `InvariantCulture` when we do this?\r\n\r\nProbably also the same question\\issue for [metrics](https://github.com/dotnet/runtime/blob/aedb91f487e4bb4ee6f08cd3826233d434736cf7/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/Metrics/MetricsEventSource.cs#L715) and [logs](https://github.com/dotnet/runtime/blob/aedb91f487e4bb4ee6f08cd3826233d434736cf7/src/libraries/Microsoft.Extensions.Logging.EventSource/src/EventSourceLogger.cs#L205).\r\n\r\n/cc @tarekgh @noahfalk @samsp-msft ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOf5moDg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5_mTCv",
                                           "createdAt":  "2024-05-30T19:37:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-30T19:37:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_magO",
                                           "createdAt":  "2024-05-30T20:01:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-activity\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-30T20:01:03Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Q: System.Diagnostics.Activity out of proc monitoring value conversion culture variance",
        "labels":  [
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103245",
        "createdAt":  "2024-06-10T20:39:58Z",
        "number":  103245,
        "author":  "Wraith2",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-22T18:53:04Z",
        "body":  "### Background and motivation\n\nWhen creating an activity using ActivitySource there are currently two overloads available which allow you to pass tags which will be available to samplers.\r\n\r\n```csharp\r\npublic Activity? CreateActivity(\r\n\tstring! name, \r\n\tActivityKind kind, \r\n\tActivityContext parentContext, \r\n\tIEnumerable\u003cKeyValuePair\u003cstring!, object?\u003e\u003e? tags = null, \r\n\tIEnumerable\u003cActivityLink\u003e? links = null, \r\n\tActivityIdFormat idFormat = ActivityIdFormat.Unknown\r\n);\r\n\r\npublic Activity? CreateActivity(\r\n\tstring! name, \r\n\tActivityKind kind, \r\n\tstring? parentId, \r\n\tIEnumerable\u003cKeyValuePair\u003cstring!, object?\u003e\u003e? tags = null, \r\n\tIEnumerable\u003cActivityLink\u003e? links = null, \r\n\tActivityIdFormat idFormat = ActivityIdFormat.Unknown\r\n);\r\n```\r\n\r\nIf you want to pass a single tag to the sampler there isn\u0027t a good way to do it. without excessive allocations. \r\n- If you use a TagList you\u0027ll find that there is no single value constructor and that because it is a struct which contains 8 valuetype fields it is expensive to box.\r\n- You can\u0027t stackalloc because the `KeyValuePair\u003cstring, object?\u003e` type contains references.\r\n- You can\u0027t rent an array and pass a span because `ReadOnlySpan\u003c\u003e` is a ref struct, doesn\u0027t implement enumerable and can\u0027t be boxed.\r\n- If you rent an array and use an `ArraySegment\u003c\u003e` it\u0027ll box the array segment because it\u0027s a struct.\r\n\r\nThe easiest thing to do is a simple single value array allocation and if you want to amortize it you\u0027ll have to manage the array pooling yourself. It would be good to have a lower allocation path to create the activity in this case because the activity is being created for every incoming request.\r\n\r\nThis came up while trying to extend OpenTelemetry TelemetryHttpModule https://github.com/open-telemetry/opentelemetry-dotnet-contrib/pull/1871#discussion_r1633402415\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics;\r\n\r\npublic class ActivitySource\r\n{\r\n\tpublic Activity? CreateActivity(\r\n\t\tstring! name, \r\n\t\tActivityKind kind, \r\n\t\tActivityContext parentContext, \r\n\t\tKeyValuePair\u003cstring!, object?\u003e? tags = default, \r\n\t\tIEnumerable\u003cActivityLink\u003e? links = null, \r\n\t\tActivityIdFormat idFormat = ActivityIdFormat.Unknown\r\n\t);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nActivitySource source = new ActivitySource(\"name\");\r\nActivityContext context = new ActivityContext();\r\nActivity? activity = source.CreateActivity(\"activity\", ActivityKind.Server, context, new KeyValuePair\u003cstring,object?\u003e(\"tagName\",\"tagValue\"));\r\n```\r\n\n\n### Alternative Designs\n\nIf it possible to provide a way to call one of the existing overloads and avoiding per call allocations which will be discarded then that may be acceptable.\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgodvwQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6As3bm",
                                           "createdAt":  "2024-06-10T20:40:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-activity\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-10T20:40:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6As70C",
                                           "createdAt":  "2024-06-10T20:52:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODlLgAQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cijothomas",
                                                                               "createdAt":  "2024-06-10T23:16:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "julealgon",
                                           "body":  "Wouldn\u0027t it be possible to leverage the new `params collections` feature for this as well?",
                                           "updatedAt":  "2024-06-10T20:52:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AtWKj",
                                           "createdAt":  "2024-06-10T21:57:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODlLKjg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-10T22:01:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "If that would work downstream on netfx then yes. This specific use case is from the AspNet opentelemetry code not the AspNetCore.",
                                           "updatedAt":  "2024-06-10T21:57:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ats1X",
                                           "createdAt":  "2024-06-10T23:16:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODlLlaQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-10T23:41:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "cijothomas",
                                           "body":  "\u003e Wouldn\u0027t it be possible to leverage the new `params collections` feature for this as well?\r\n\r\nGood point! It might be bit tricky and also need changes to [ActivityCreationOptions](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/ActivityCreationOptions.cs#L28) to move to `ReadOnlySpan` in a back-compact way!\r\n\r\nSeparately, I think `params collections` would be easy to incorporate to Metrics side, where the [MeterListener callbacks are all ReadOnlySpan](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/Metrics/MeterListener.cs#L292) already!",
                                           "updatedAt":  "2024-06-10T23:16:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AzWGD",
                                           "createdAt":  "2024-06-11T14:42:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cijothomas",
                                           "body":  "Linking to https://github.com/open-telemetry/opentelemetry-dotnet-contrib/issues/2012",
                                           "updatedAt":  "2024-06-11T14:42:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AzcGV",
                                           "createdAt":  "2024-06-11T14:52:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cijothomas",
                                           "body":  "@Wraith2 I suggest the following too:\r\n1. Add StartActivity also to this.\r\n2. We need more than 1 tags! Don\u0027t have a solid number yet, but it could be 1-9 based on OTel conventions. It may not be feasible to provide that many overloads, so maybe do what Metrics did - dedicated overload for 1,2,3 and then TagList. :)\r\n\r\n\r\nan example needing a lot of tags: https://github.com/open-telemetry/semantic-conventions/blob/main/docs/http/http-spans.md\r\n\r\nThe following attributes can be important for making sampling decisions and SHOULD be provided at span creation time (if provided at all):\r\n\r\n[client.address](https://github.com/open-telemetry/semantic-conventions/blob/main/docs/attributes-registry/client.md)\r\n[http.request.header.\u003ckey\u003e](https://github.com/open-telemetry/semantic-conventions/blob/main/docs/attributes-registry/http.md)\r\n[http.request.method](https://github.com/open-telemetry/semantic-conventions/blob/main/docs/attributes-registry/http.md)\r\n[server.address](https://github.com/open-telemetry/semantic-conventions/blob/main/docs/attributes-registry/server.md)\r\n[server.port](https://github.com/open-telemetry/semantic-conventions/blob/main/docs/attributes-registry/server.md)\r\n[url.path](https://github.com/open-telemetry/semantic-conventions/blob/main/docs/attributes-registry/url.md)\r\n[url.query](https://github.com/open-telemetry/semantic-conventions/blob/main/docs/attributes-registry/url.md)\r\n[url.scheme](https://github.com/open-telemetry/semantic-conventions/blob/main/docs/attributes-registry/url.md)\r\n[user_agent.original](https://github.com/open-telemetry/semantic-conventions/blob/main/docs/attributes-registry/user-agent.md)",
                                           "updatedAt":  "2024-06-11T14:52:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A2CwQ",
                                           "createdAt":  "2024-06-11T21:44:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnGbCA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CodeBlanch",
                                                                               "createdAt":  "2024-06-25T18:59:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I don\u0027t think we need such overloads. We can have the one that takes `TagList` and pass it as a reference. No copying will be needed at that time. This will give the flexibility to pass whatever number of tags including single one. `new TagList { {\"key\", \"value} }`",
                                           "updatedAt":  "2024-06-11T21:44:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A2XxZ",
                                           "createdAt":  "2024-06-11T23:01:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cijothomas",
                                           "body":  "I think the 1,2,3 tag overloads is just for convenience, not for perf.\r\nstartActivity(new KVP(key,value)) instead of writing startActivity(new TagList{key,value}).",
                                           "updatedAt":  "2024-06-11T23:01:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A2f1e",
                                           "createdAt":  "2024-06-11T23:30:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e I think the 1,2,3 tag overloads is just for convenience, not for perf.\r\n\r\nI am seeing using TagList is much simpler. \r\n\r\n| KVP | TagList|\r\n|----------|----------|\r\n|new KeyValuePair(key,value)                                                                              | new TagList { {key, value } } |\r\n|new KeyValuePair(key1,value1), new KeyValuePair(key2,value2)                                      | new TagList { {key1, value1 },  {key2, value2 }} |\r\n|new KeyValuePair(key1,value1), new KeyValuePair(key2,value2), new KeyValuePair(key3,value3) | new TagList { {key1, value1 },  {key2, value2 },  {key2, value2 }} |\r\n",
                                           "updatedAt":  "2024-06-11T23:30:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A20Kx",
                                           "createdAt":  "2024-06-12T00:43:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "Seems reasonable. If the TagList taken as an instance into the activity rather than enumerated and the individual items copied then the boxing of the quite large TagList won\u0027t have been wasteful.",
                                           "updatedAt":  "2024-06-12T00:43:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ChjjK",
                                           "createdAt":  "2024-06-25T19:40:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CodeBlanch",
                                           "body":  "@tarekgh \r\n\r\nLet\u0027s say we add overloads which accept `in TagList`...\r\n\r\n```csharp\r\npublic class ActivitySource\r\n{\r\n\tpublic Activity? CreateActivity(\r\n\t\tstring name, \r\n\t\tActivityKind kind, \r\n\t\tActivityContext parentContext, \r\n\t\tin TagList tags = default, \r\n\t\tIEnumerable\u003cActivityLink\u003e? links = null, \r\n\t\tActivityIdFormat idFormat = ActivityIdFormat.Unknown\r\n\t) {}\r\n\r\n\tpublic Activity? StartActivity(\r\n\t\tstring name, \r\n\t\tActivityKind kind, \r\n\t\tActivityContext parentContext, \r\n\t\tin TagList tags = default, \r\n\t\tIEnumerable\u003cActivityLink\u003e? links = null, \r\n\t\tDateTimeOffset startTime = default\r\n\t) {}\r\n}\r\n```\r\n\r\n👍 from me so far.\r\n\r\nBut on `ActivityCreationOptions\u003cT\u003e` we have `IEnumerable\u003cKeyValuePair\u003cstring, object?\u003e\u003e? Tags`:\r\n\r\nhttps://github.com/dotnet/runtime/blob/c5e8f83db1606a89e70a9f4a0ac2fc03dea2418c/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/ActivityCreationOptions.cs#L108\r\n\r\nSeems like we would end up with an allocation/boxing due to that. So we may need to do something there as well?",
                                           "updatedAt":  "2024-06-25T19:40:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ch2_B",
                                           "createdAt":  "2024-06-25T20:30:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnQU1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CodeBlanch",
                                                                               "createdAt":  "2024-06-25T21:02:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cijothomas",
                                                                               "createdAt":  "2024-06-26T13:42:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@CodeBlanch right, that is what @cijothomas mentioned in https://github.com/dotnet/runtime/issues/103245#issuecomment-2159463767. We\u0027ll look more at the details when the time come 😄 ",
                                           "updatedAt":  "2024-06-25T20:30:23Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "[API Proposal]: new ActivitySource.CreateActivity overload",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111175",
        "createdAt":  "2025-01-07T21:11:25Z",
        "number":  111175,
        "author":  "tarekgh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEAJHQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "splitt3r",
                                            "createdAt":  "2025-06-16T16:14:00Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-23T15:33:53Z",
        "body":  "Enable tracing in the DI as we do in logging and metrics. More detailed proposal will follow.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmY4g1A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Zjh6r",
                                           "createdAt":  "2025-01-07T21:11:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-07T21:11:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZjiDU",
                                           "createdAt":  "2025-01-07T21:12:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-activity\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-07T21:12:11Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Make tracing DI friendly",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112803",
        "createdAt":  "2025-02-21T22:34:41Z",
        "number":  112803,
        "author":  "samsp-msft",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEAI0g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "oising",
                                            "createdAt":  "2025-03-17T15:37:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "veikkoeeva",
                                            "createdAt":  "2025-04-08T17:28:36Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "erwinkramer",
                                            "createdAt":  "2025-04-23T18:32:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "splitt3r",
                                            "createdAt":  "2025-06-16T16:13:13Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-04-16T19:50:27Z",
        "body":  "# Baggage Proposal\n\n## Introduction\n\nBaggage is an API to enable passing key value pairs between contexts for web  calls. There are two related specs:\na) W3C baggage propogation https://www.w3.org/TR/baggage/\nb) OpenTelemetry baggage API https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/baggage/api.md \nhttps://opentelemetry.io/docs/specs/otel/baggage/api/\n\n## Existing Baggage API\n\n.NET has APIs on Activity for managing baggage:\n\n- `public System.Collections.Generic.IEnumerable\u003cSystem.Collections.Generic.KeyValuePair\u003cstring,string?\u003e\u003e Baggage { get; }`\n- `public System.Diagnostics.Activity AddBaggage (string key, string? value);`\n- `public System.Diagnostics.Activity SetBaggage (string key, string? value);`\n\nThe premise is that baggage can be added to an activity. Child activities will inherit the baggage fron the parent, but with a variation of copy on write semantics so that changes to the child are not replicated back to the parent.\n\n## Problems with the existing Baggage Support\n\n- The Baggage API on Activity doesn\u0027t work as its specified to - Setting a baggage with the same key as an existing item will not override the value, it just adds a new value.\n- Baggage is tied to Activity - this seems to be more of a theoretical problem than specific functionality is broken because of it. An implicit root activity is created in .NET even if it is not flagged to be recorded.\n  - OTel specs baggage to be separate from Tracing, but given .NET has Activity built-in, the concern seems to be more about spec divergance, rather than limiting functionality\n- OTel has the concept of scopes for baggage - the scenario for scopes is to be able to create a new scope that does not inherit the baggage of the parent scope, so the parent baggage is not passed to a downstream service when that service is not trusted with that baggage info.\n- W3C standard changed the header to \"baggage\". ASP.NET understands both `baggage` and `Correlation-Context` but http client LegacyPropagator only understands Correlation-Context so is sending the _wrong_ header.\n- W3C spec for baggage enables multipe related values to be attached to a property name, but are not the value of the property. [#5677](https://github.com/open-telemetry/opentelemetry-dotnet/issues/5677)\n- Encoding issues\n  - [OTel.NET] Baggage encoding should be using % encoding for spaces. [#5687](https://github.com/open-telemetry/opentelemetry-dotnet/pull/5687) showed that fixing encoding is more complicated than it first seems.\n  - [BaggagePropagator] Do not encode and decode keys [#5479](https://github.com/open-telemetry/opentelemetry-dotnet/issues/5479)\n  - [baggage] space encoding in baggage item value when injecting baggage [#5260](https://github.com/open-telemetry/opentelemetry-dotnet/issues/5260)\n - Updated OTel Spec https://github.com/open-telemetry/opentelemetry-specification/pull/3801\n\n\n## Goals\n\n- Introduce API changes to .NET runtime/extensions that support Baggage in a W3C compliant way and APIs that are sympathetic to the goals expressed in the OTel specifications\n- Keep the 3 existing APIs on Activity and map them to the new functionality\n- Support propogation \n  - Reading using both the `baggage` and legacy `Correlation-Context` headers,\n   - writing using the `baggage` header as part of HttpClient (change in functionality)\n- Enable contexts to be created to enable more control over baggage propogation and data hiding\n- Enable the implementation to be wrapped/used by the OTEL.NET library\n\n### Non-goals\n- Port the existing support from OTel.NET to runtime/extensions\n\n## Related Issues\n\n_.NET Runtime_\n\n- Support W3C Baggage propagation without Activity [#103174](https://github.com/dotnet/runtime/issues/103174)\n- [API Proposal]: System.Diagnostics.ActivityContext.Current ability or similar [#86966](https://github.com/dotnet/runtime/issues/86966)\n- Allow creation of a root Activity when Activity.Current is not null [#65528](https://github.com/dotnet/runtime/issues/65528)\n- Duplicated activity baggage when calling SetBaggage on parent and current activity [#59496](https://github.com/dotnet/runtime/issues/#59496)\n- Support W3C Baggage proposed standard in HttpHandlerDiagnosticListener [#45496](https://github.com/dotnet/runtime/issues/45496)\n\n_OpenTelemetry .NET_\n\n- BaggagePropagator handle baggage properties [#5677](https://github.com/open-telemetry/opentelemetry-dotnet/issues/5677)\n- Baggage propagation is not possible for instrumentations without depending on OpenTelemetry.Api package [#5667](https://github.com/open-telemetry/opentelemetry-dotnet/issues/5667)\n\n\n## Concepts for discussion\n_This is no where near final, but I want to put a stake in the ground that we can then argue over :-)_\n\n### immutability\n\nThe OTel spec for baggage talks about immutability, which has led Java to create a baggage API using the builder pattern. For example\n\n``` java\n    // Access current baggage with Baggage.current()\n    // output =\u003e context baggage: {}\n    Baggage currentBaggage = Baggage.current();\n    System.out.println(\"current baggage: \" + asString(currentBaggage));\n    // ...or from a Context\n    currentBaggage = Baggage.fromContext(current());\n\n    // Baggage has a variety of methods for manipulating and reading data.\n    // Convert to builder and add entries:\n    Baggage newBaggage =\n        Baggage.current().toBuilder()\n            .put(\"shopId\", \"abc123\")\n            .put(\"shopName\", \"opentelemetry-demo\", BaggageEntryMetadata.create(\"metadata\"))\n            .build();\n    // ...or uncomment to start from empty\n    // newBaggage = Baggage.empty().toBuilder().put(\"shopId\", \"abc123\").build();\n    // output =\u003e new baggage: {shopId=abc123(), shopName=opentelemetry-demo(metadata)}\n    System.out.println(\"new baggage: \" + asString(newBaggage));\n\n```\n\nThe problem with this approach is that it isn\u0027t really compatible with the existing `Activity.SetBaggage()` set of methods, that I think we should endeavor to keep compatibility with.\n\nThe scenario where this is important is when a new baggage context is created, which inherits from the parent context. If there are changes to the parent context after the fork, should those be visible to the child. Eg I set a value in Actviity1, create a child Activity2, and then in another task update Activity1. I think that Activity2 should have a snapshot of the state when it was created.\n\nCurrently we try to be clever, and have a heirarchy of baggage state. I am thinking that we can probably achieve a good experience using copy semantics for child contexts. If baggage is a list of key value pairs, which are strings, and strings are immutable in .NET, then copying the list will not be excessive in memory consumption as its just pointers to the string values, which can\u0027t change. Within a context, values can be added and changed. Only when a new context is created is a new snapshot created.\n\nThe other altrenatives would be:\n- always create a copy on every write - is inefficient unless you use a builder pattern, even then unrelated code is going to cause duplication\n- have pointers to child baggage contexts and use change notifications to force duplication when non-leaf edits are made\n\n### Context storage\n\nThe OTel specs are based around the idea of a context, and then baggage and spans are stored as part of the context. In .NET we already have Activity as a built in type, and its automatically created by ASP.NET and (hopefully other infrastructure). I don\u0027t think we should go back and re-imagine having Activity as a child of a new context, so we should work with what we have.\n\nMy suggestions\n- Within the scope of an Activity, store the baggage(s) in the activity. \n- if not in an activity, then use an AsyncLocal\n\nWhy not just always use an async local? The scenarios for baggage will have a very high overlap with Activity and as most access will be via Activity, and Activities will need to snapshot the baggage on creation, we might as well store the data there.\n\n### Proposal\n\n\n- Add a `Baggage` class to store baggage data\n  - Has Add/get/set functionality\n  - Also optional metadata string\n  - implements IEnumerable\u003cKeyValuePair\u003cstring,string?\u003e\u003e so it can be returned by Activity.Baggage\n\n- Add a `BaggageContext` static class to manage baggage contexts\n  - stores data in Activity or Asynclocal if not in an Activity context\n    - why? - so we don\u0027t need to have as many context\u0027s flying around\n  - static `BaggageContext.Current` would return the current baggage\n    - Activity.Baggage would return `Baggage.Current`\n  - Has Push/Pop semantics for managing the contexts, so new ones can be created with child activities or on demand\n    - Activity creation will create a new context, using the parent activity (if avaiable) for baggage parent\n  - Baggage can be dependent on their parent or fresh\n    - When created from a parent, it does a shallow copy of the parent baggage\n    - Fresh context will not pull through any values from the parent context\n\n- Add a new W3C propogator that reads both `baggage` and `Correlation-Context` but serializes using the `baggage` header and is compliant with standards for string serialization/escaping.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp4ZpKw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ffMyD",
                                           "createdAt":  "2025-02-21T22:35:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-activity\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-21T22:35:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ffNNy",
                                           "createdAt":  "2025-02-21T22:36:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "samsp-msft",
                                           "body":  "@tarekgh @lmolkova @CodeBlanch @noahfalk @cijothomas \n\nThoughts?",
                                           "updatedAt":  "2025-02-21T22:36:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ffUti",
                                           "createdAt":  "2025-02-21T23:02:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Why what OTel has is not enough and need to have something like this in the runtime?",
                                           "updatedAt":  "2025-02-21T23:02:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ffYVx",
                                           "createdAt":  "2025-02-21T23:16:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "samsp-msft",
                                           "body":  "The reason this should go in the runtime is because:\n- we are not following the standards in our propagation today - which should happen even if the application is not referencing OTel\n- The current behavior for baggage APIs on Activity is broken\n- We have docs in OTel to say not to use the Activity version of baggage, and only use the OTel libs\n\nAs said in https://github.com/open-telemetry/opentelemetry-dotnet/pull/6144#issuecomment-2675177355 we should fix this in the runtime, and then deprecate the functionality in the OTel libs.",
                                           "updatedAt":  "2025-02-21T23:16:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fgeoc",
                                           "createdAt":  "2025-02-22T08:32:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Thanks for forging ahead on a tricky feature Sam! Mostly just questions at this point, I probably don\u0027t fully understand the proposal yet.\n\n- In some places it sounded like we were trying to be compatible with the existing Activity Baggage APIs, and in other places it sounded like we were proposing breaking changes. If I understood right I think the proposal was \"the APIs will still exist, but the behavior won\u0027t be the same\". It would help to understand how impactful this is expected to be. Is it just a few apps doing corner-case things with the current API that will need to change their code or is it more broad?\n\n- You mentioned that having a mutable baggage context that would create copies when forked. I wasn\u0027t sure which operations cause it to be forked?\n\n- I wasn\u0027t sure if changes to Activity.Current are supposed to change Baggage.Current?\n\n- If creating a new Activity forks the baggage, that suggests when I call activity.Baggage on different activity instances I might get different results. Elsewhere the proposal said that activity.Baggage would call Baggage.Current which suggests activity.Baggage won\u0027t change regardless which activity instance it is called on. I probably misunderstood something but that part seemed contradictory.\n\n- It sounded like making the baggage mutable was partly a perf consideration and partly a compromise to retain more compat with the current Activity API. From the perf angle immutability means we copy-on-write vs. mutability is copy-on-fork. I\u0027d guess we fork more often than we write so I\u0027d guess the immutable copy-on-write might come out ahead if perf was the only factor. I wasn\u0027t sure how exactly immutability interfered with continuing to use the SetBaggage() API? For example could we just define that each time you call SetBaggage() we generate a new immutable instance of Baggage and then update Activity to refer to that new Baggage?",
                                           "updatedAt":  "2025-02-22T08:32:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fvBVC",
                                           "createdAt":  "2025-02-24T23:16:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "samsp-msft",
                                           "body":  "\u003e In some places it sounded like we were trying to be compatible with the existing Activity Baggage APIs, and in other places it sounded like we were proposing breaking changes. If I understood right I think the proposal was \"the APIs will still exist, but the behavior won\u0027t be the same\". It would help to understand how impactful this is expected to be. Is it just a few apps doing corner-case things with the current API that will need to change their code or is it more broad?\n\nThe current Baggage APIs do not behave as the documentation states, in that child activities do not hide the values of parent activities when the same key is used. Similarly setting a null value does not clear the value from Baggage.\n\nI am proposing that the new API would behave as the Baggage APIs have been documented to behave.\n\n\u003e You mentioned that having a mutable baggage context that would create copies when forked. I wasn\u0027t sure which operations cause it to be forked?\n\nAny operation that creates a child baggage will fork a copy of the parent baggage. This is so that subsequent writes to the parent baggage do not affect the child. We need to think about what happens if a task creates a new Activity and another task edits the baggage of the parent activity - what state should the child activity have?\n\n\u003e If creating a new Activity forks the baggage, that suggests when I call activity.Baggage on different activity instances I might get different results. Elsewhere the proposal said that activity.Baggage would call Baggage.Current which suggests activity.Baggage won\u0027t change regardless which activity instance it is called on. I probably misunderstood something but that part seemed contradictory.\n\nThe state for baggage will be stored in the Activity, so that we don\u0027t need another AsyncLocal in most cases. The Activity.Baggage should be wired up so it gets the baggage for that Activity. I was probably confusing when I said it will Baggage.Current - the point is that it continues to return a baggage object that can be enumerated in the same way as before.\n\n\u003e It sounded like making the baggage mutable was partly a perf consideration and partly a compromise to retain more compat with the current Activity API. From the perf angle immutability means we copy-on-write vs. mutability is copy-on-fork. I\u0027d guess we fork more often than we write so I\u0027d guess the immutable copy-on-write might come out ahead if perf was the only factor. I wasn\u0027t sure how exactly immutability interfered with continuing to use the SetBaggage() API? For example could we just define that each time you call SetBaggage() we generate a new immutable instance of Baggage and then update Activity to refer to that new Baggage?\n\nIt\u0027s going to depend on what the most common usage is of baggage. How often are people adding more baggage, and how many attributes do they add. \n\nWe could probably implement this with:\n- Full immutability - each edit creates a new copy of the baggage, children can reference a specific instance - Java does this\n- Change notifications - child baggage references the parent and forks its copy if the parent is changed - seemed overly complicated\n- Child copies - child baggage shallow copies the parent baggage when its created - what I proposed\nThere are probably other alternatives that could be used too.",
                                           "updatedAt":  "2025-02-24T23:16:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fv50k",
                                           "createdAt":  "2025-02-25T01:34:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e I am proposing that the new API would behave as the Baggage APIs have been documented to behave.\n\nDoes that mean the APIs will completely ignore Baggage.Current, or you mean they will behave as currently documented only in scenarios where Baggage.Current isn\u0027t being used? For example in this code snippet:\n\n```C#\nBaggage.Current = \u003csome_non_empty_baggage\u003e\nActivity.Current = null;\nusing(var a = Activity.Start(\"foo\"))\n{\n    Console.WriteLine(a.Baggage.Count());\n}\n```\n\nIf the Activity APIs followed the current docs Baggage.Current would be irrelevant and 0 would be printed. Is the proposed behavior also to print 0, or its going to print something else, or my snippet makes no sense because Baggage.Current won\u0027t be usable like that?\n\n\u003e Any operation that creates a child baggage will fork a copy of the parent baggage.\n\nWhich operations create a child baggage? It sounds like creating a new Activity would do that but it wasn\u0027t clear if that is the only operation that does.\n\n",
                                           "updatedAt":  "2025-02-25T01:34:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nhmkr",
                                           "createdAt":  "2025-04-16T19:50:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "samsp-msft",
                                           "body":  "\u003e If the Activity APIs followed the current docs Baggage.Current would be irrelevant and 0 would be printed. Is the proposed behavior also to print 0, or its going to print something else, or my snippet makes no sense because Baggage.Current won\u0027t be usable like that?\n\nAssuming that you setup some baggage in the current context - which following the spirit of your code you were doing in line 1.\n\nWhen you start the `foo` activity, it should capture the current baggage context at that point. \n\nIMHO your WriteLine would have a non-0 response.\n\nWhat is more interesting is if the code becomes:\n\n``` csharp\nBaggage.Current.Set(\"name\",\"value\"); //\u003csome_non_empty_baggage\u003e\n\n// snapshot the current context\nvar startContext = Baggage.Current;\nActivity.Current = null;\nusing(var foo = Activity.Start(\"foo\"))\n{\n    Console.WriteLine(foo.Baggage.Count());\n}\n\n//Set some more baggage via the activity\nActivity.Current.AddBaggage(\"ActivityKey\", \"ActivityValue\");\n\n// Has this affected the current baggage?\nConsole.WriteLine(foo.Baggage.Count() == Baggage.Current.Count());\n\n// Has this affected the snapshot that was created at the beginning?\nConsole.WriteLine(foo.Baggage.Count() == startContext.Count());\n\n```",
                                           "updatedAt":  "2025-04-16T19:50:26Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Telemetry Baggage proposal",
        "labels":  [
                       "area-System.Diagnostics.Activity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118592",
        "createdAt":  "2025-08-11T16:26:17Z",
        "number":  118592,
        "author":  "aradalvand",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-12T01:18:02Z",
        "body":  "### Background and motivation\n\nUnlike the `TraceContextPropagator.Inject` method in the official `OpenTelemetry.Api` package, which receives an `ActivityContext` as its first parameter, .NET\u0027s standard `DistributedContextPropagator.Inject` requires a complete `Activity` object. This is nonsensical, and problematic in cases where an `ActivityContext` is being (de)serialized and round-tripped to e.g. persistent datastore, where you obviously won\u0027t have the `Activity` in scope, you\u0027d only have the `ActivityContext`.\n\nIt is also in violation of the OpenTelemetry specification which states that the `inject` function should receive a *span context* (and optionally baggage), NOT a full-fledged, active `Span`. See [here](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md#inject).\n\n### API Proposal\n\n```csharp\nnamespace System.Diagnostics;\n\npublic abstract class DistributedContextPropagator\n{\n        /// \u003csummary\u003e\n        /// Injects the trace values stored in the \u003csee cref=\"Activity\"/\u003e object into a carrier. For example, into the headers of an HTTP request.\n        /// \u003c/summary\u003e\n        /// \u003cparam name=\"activity\"\u003eThe object representing the distributed context to inject into the carrier.\u003c/param\u003e\n        /// \u003cparam name=\"carrier\"\u003eCarrier is the medium in which the distributed context will be stored.\u003c/param\u003e\n        /// \u003cparam name=\"setter\"\u003eThe callback will be invoked to set a named key/value pair on the carrier.\u003c/param\u003e\n        public abstract void Inject(ActivityContext activity, object? carrier, PropagatorSetterCallback? setter);\n}\n```\n\n\n### API Usage\n\nI currently have these two heavily-used extension methods in a library, and I had to take a dependency on `OpenTelemetry.Api` for this same reason:\n```csharp\npublic static class ActivityContextExtensions\n{\n\t// NOTE: The proper/standard way of propagating trace contexts (which `ActivityContext` represents) over the wire is by serializing it into a text map (i.e. string-to-string dictionary) with standard key names value formats.\n\t// NOTE: The OpenTelemetry package\u0027s `TraceContextPropagator` is superior to .NET\u0027s standard `DistributedContextPropagator` in two ways: 1. The latter takes in an entire `Activity` object, whereas the former only needs an `ActivityContext`, which is absolutely crucial in our case. 2. The former actually conforms to the OTEL specs by setting `IsRemote` to `true` upon extracting a context from a text map, where as `DistributedContextPropagator` doesn\u0027t — see https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#isremote\n\tprivate static readonly TraceContextPropagator _propagator = new();\n\tpublic static Dictionary\u003cstring, string\u003e ToPropagationMap(this ActivityContext activityContext)\n\t{\n\t\tDictionary\u003cstring, string\u003e carrier = [];\n\t\t_propagator.Inject(\n\t\t\tcontext: new(activityContext, Baggage.Current),\n\t\t\tcarrier: carrier,\n\t\t\tsetter: (_, fieldName, fieldValue) =\u003e\n\t\t\t\tcarrier[fieldName] = fieldValue\n\t\t);\n\t\treturn carrier;\n\t}\n\n\tpublic static ActivityContext ExtractActivityContext(this Dictionary\u003cstring, string\u003e carrier)\n\t{\n\t\tvar result = _propagator.Extract(\n\t\t\tcontext: default,\n\t\t\tcarrier: carrier,\n\t\t\tgetter: (_, fieldName) =\u003e\n\t\t\t\tcarrier.TryGetValue(fieldName, out var val)\n\t\t\t\t\t? [val]\n\t\t\t\t\t: []\n\t\t);\n\t\tBaggage.Current = result.Baggage;\n\t\treturn result.ActivityContext;\n\t}\n}\n```\nThen I have MessagePack/JSON/BSON serializers that do something along these lines:\n```cs\npublic sealed class ActivityContextJsonConverter : JsonConverter\u003cActivityContext\u003e\n{\n    public override ActivityContext Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\n    {\n        var dictionary = JsonSerializer.Deserialize\u003cDictionary\u003cstring, string\u003e\u003e(ref reader, options);\n        return dictionary!.ExtractActivityContext();\n    }\n\n    public override void Write(Utf8JsonWriter writer, ActivityContext value, JsonSerializerOptions options)\n    {\n        var map = value.ToPropagationMap();\n        JsonSerializer.Serialize(writer, map, options);\n    }\n}\n```\nThis currently CANNOT be soundly implemented with `DistributedContextPropagator`.\nWith this new method introduced, however, it could. And consequently, the dependency on `OpenTelemetry.Api` could be eliminated.\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvWL-wQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc69YHiE",
                                           "createdAt":  "2025-08-11T23:44:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-activity\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-11T23:44:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69Yv7B",
                                           "createdAt":  "2025-08-12T01:17:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Minor note: the new proposed API should be `virtual`, not `abstract`. Otherwise, it will break existing implementations of this abstraction.\n",
                                           "updatedAt":  "2025-08-12T01:17:52Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: `DistributedContextPropagator.Inject` should have an overload that only receives an `ActivityContext`",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Activity"
                   ]
    }
]
