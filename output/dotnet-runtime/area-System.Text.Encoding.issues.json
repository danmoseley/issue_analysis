[
    {
        "url":  "https://github.com/dotnet/runtime/issues/14785",
        "createdAt":  "2015-07-01T17:50:09Z",
        "number":  14785,
        "author":  "tmat",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-18T13:09:38Z",
        "body":  "According to RFC 3629 encoding/decoding unmatched surrogates should be disallowed:\n\n\"The definition of UTF-8 prohibits encoding character numbers between U+D800 and U+DFFF, which are reserved for use with the UTF-16 encoding form (as surrogate pairs) and do not directly represent    characters.\"\n\nHowever, this hasn\u0027t been followed by real world encoders/decoders. For example, the ECMA-335 standard encodes string arguments of custom attributes using UTF8 and the compilers allowed unpaired surrogates in the attribute argument. Another example is PDB - the file paths in PDB are stored as UTF8 encoded strings and unpaired surrogates are also allowed. The same for values of local string constants (e.g. `const string surrogate = \"\\ud800\"`).\n\nTo avoid breaking changes Roslyn needs to allow unpaired surrogates in the above cases and the MetadataReader should also use a variant of UTF8 encoding that is able to decode them. Currently Roslyn has a custom implementation of UTF8 encoder originating from CCI. In general, it seems that pragmatically a UTF16-UTF8 round-tripping is desirable in certain scenarios and UTF8Encoding should support it.\n\nI propose to add a constructor to UTF8 Encoding that takes a bool allowUnpairedSurrogates (false by default) that can be used by both Roslyn and MetadataReader.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsd6H7Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0NzI4MTEzOQ==",
                                           "createdAt":  "2015-10-12T03:12:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joshfree",
                                           "body":  "/cc @KrzysztofCwalina \n",
                                           "updatedAt":  "2015-10-12T03:12:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0NzQ0NTAyOA==",
                                           "createdAt":  "2015-10-12T15:54:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KrzysztofCwalina",
                                           "body":  "cc @krwq \n",
                                           "updatedAt":  "2015-10-12T15:54:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0NzQ2OTM2OA==",
                                           "createdAt":  "2015-10-12T17:31:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@tmat when encoding UTF16 \"\\ud800\" to UTF8 bytes, what you expect to get as bytes if we allow the encoding? I am asking because there could be a workaround you can use but before I propose it I need to understand what you expect. \n",
                                           "updatedAt":  "2015-10-12T17:38:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjAxOTE0Mw==",
                                           "createdAt":  "2015-10-28T22:39:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "I expect it to write UTF8 like so (note allowUnpairedSurrogates flag that determines whether unpaired surrogates are encoded into the result or replaced with invalid character byte sequence):\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis/PEWriter/BlobUtilities.cs,15d9d2fb5564ddbc,references\nand be able to read it and roundtrip the values.\n\nAn unpaired surrogate _c_ would be encoded into 3 bytes:\n\n``` C#\nptr[0] = (byte)(((c \u003e\u003e 12) \u0026 0xF) | 0xE0);\nptr[1] = (byte)(((c \u003e\u003e 6) \u0026 0x3F) | 0x80);\nptr[2] = (byte)((c \u0026 0x3F) | 0x80);\n```\n",
                                           "updatedAt":  "2015-10-28T22:45:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjAyMjE5Ng==",
                                           "createdAt":  "2015-10-28T22:54:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "You can achieve this result by simple implementation of custom EncoderFallback and EncoderFallbackBuffer\n\nhttps://msdn.microsoft.com/en-us/library/system.text.encoderfallback(v=vs.110).aspx\nhttps://msdn.microsoft.com/en-us/library/system.text.encoderfallbackbuffer(v=vs.110).aspx\n\nEncoding fallback mechanism is originally introduced to address the scenarios like yours. \n",
                                           "updatedAt":  "2015-10-28T22:54:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjAyMzYxNw==",
                                           "createdAt":  "2015-10-28T23:02:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Yes, i know. The point is I shouldn\u0027t need to write fallbacks, this should be a built-in functionality. Using fallbacks is complex. I\u0027d rather keep the above code as is.  \n",
                                           "updatedAt":  "2015-10-28T23:05:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjAyNDI4Nw==",
                                           "createdAt":  "2015-10-28T23:07:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "why? the default behavior is conforming with the standard. any other behavior is achieved by the fallback mechanism. why we need to add more configuration to the API to let it do that while there is already unified way to do it? also looks this is not main stream case either as we didn\u0027t get anyone raising this issue. \n",
                                           "updatedAt":  "2015-10-28T23:07:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjAyNDQ4NQ==",
                                           "createdAt":  "2015-10-28T23:08:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Are encoding fallbacks available on CoreCLR? What contracts are they included in?\n",
                                           "updatedAt":  "2015-10-28T23:08:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjAyNDg3MQ==",
                                           "createdAt":  "2015-10-28T23:11:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Yes it is supported in System.Text.Encoding 4.0.10.0 contract\n",
                                           "updatedAt":  "2015-10-28T23:11:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjAyNjEyOQ==",
                                           "createdAt":  "2015-10-28T23:17:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Can you point me to an example of how this is supposed to be used?\n",
                                           "updatedAt":  "2015-10-28T23:17:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjAyNzg0NA==",
                                           "createdAt":  "2015-10-28T23:24:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "You may look at https://github.com/dotnet/corefx/blob/ceae1d38c93e3f53210ad91884dabc1bd6d30a90/src/System.Text.Encoding.Extensions/tests/Fallback.cs \nit has simple example which you can modify to make it work the way you like. let me know if you want me help with that too. \n",
                                           "updatedAt":  "2015-10-28T23:24:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjAzMDkzMQ==",
                                           "createdAt":  "2015-10-28T23:34:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "I don\u0027t understand what GetNextChar is supposed to do. I need to return 3 bytes for the unpaired surrogate. Where do I return those bytes?\n",
                                           "updatedAt":  "2015-10-28T23:35:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjAzNjE5OA==",
                                           "createdAt":  "2015-10-29T00:04:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "first you may not need to implement anything if you just used the replacement fallback. something like \n\n```\n        Encoding utf8 = Encoding.GetEncoding(\"utf-8\", new EncoderReplacementFallback(\"\\uFFFD\"), new DecoderReplacementFallback(\"\\uFFFD\"));\n        byte[] bytes = new byte[10];\n        int count = utf8.GetBytes(\"\\ud800\", 0, 1, bytes, 0);\n```\n\nto answer your question just in case you still need to implement your fallback, the way fallback work is it\u0027ll pass you the character that cannot encode. this done by the call to the method EncoderFallbackBuffer.Fallback methods. if your Fallback methods implementation return true, this means you can handle the fallback for such character. this will cause EncoderFallbackBuffer.GetNextChar get called and in this method you need to return the char and not bytes. in your case you\u0027ll need to return \u0027\\uFFFD\u0027 to match your original implementation. GetNextChar will keep get called again till you return 0 that is because you can fallback using multiple characters and not only one character. \nplease let me know if there is anything unclear here.\n",
                                           "updatedAt":  "2015-10-29T00:04:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjAzNzY2Mw==",
                                           "createdAt":  "2015-10-29T00:15:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "From what you describe it looks to me that the fallbacks are not designed to support the scenario.\n\nI don\u0027t need to replace an unpaired surrogate with another character. I need to encode it as 3 bytes:\n\n``` C#\n(byte)(((c \u003e\u003e 12) \u0026 0xF) | 0xE0)\n(byte)(((c \u003e\u003e 6) \u0026 0x3F) | 0x80)\n(byte)((c \u0026 0x3F) | 0x80)\n```\n\nI don\u0027t see how I can achieve it using the fallbacks.\n",
                                           "updatedAt":  "2015-10-29T00:16:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjAzODc2MQ==",
                                           "createdAt":  "2015-10-29T00:23:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "actually you are doing exactly the same as the fallback is doing. you have the code which is doing the check \n                     const char ReplacementCharacter = \u0027\\uFFFD\u0027;\n                            if (!allowUnpairedSurrogates)\n                            {\n                                c = ReplacementCharacter;\n                            }\nand then you encode \\uFFFD to utf8 using \n\n(byte)(((c \u003e\u003e 12) \u0026 0xF) | 0xE0)\n(byte)(((c \u003e\u003e 6) \u0026 0x3F) | 0x80)\n(byte)((c \u0026 0x3F) | 0x80)\n\nif you use \n        Encoding utf8 = Encoding.GetEncoding(\"utf-8\", new EncoderReplacementFallback(\"\\uFFFD\"), new DecoderReplacementFallback(\"\\uFFFD\"));\n        byte[] bytes = new byte[10];\n        int count = utf8.GetBytes(\"\\ud800\", 0, 1, bytes, 0);\n\nyou will get the exact result\n",
                                           "updatedAt":  "2015-10-29T00:23:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjAzOTIwNg==",
                                           "createdAt":  "2015-10-29T00:27:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Not quite. That replacement with \\uFFFD only happens when we _don\u0027t_ allow unpaired surrogates. If we do the surrogate itself gets encoded into the 3 bytes.\n",
                                           "updatedAt":  "2015-10-29T00:27:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjAzOTMzMQ==",
                                           "createdAt":  "2015-10-29T00:28:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "(the method I pointed at above implements 2 kinds of encodings).\n",
                                           "updatedAt":  "2015-10-29T00:28:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjA0MDA1OA==",
                                           "createdAt":  "2015-10-29T00:34:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "in your code if you have valid paired surrogate you\u0027ll encode it in 4 bytes \n\n```\n                        // surrogate pair\n                        if (IsHighSurrogateChar(c) \u0026\u0026 charPtr \u003c strEnd \u0026\u0026 IsLowSurrogateChar(*charPtr))\n                        {\n                            int highSurrogate = c;\n                            int lowSurrogate = *charPtr++;\n                            int codepoint = (((highSurrogate - 0xd800) \u003c\u003c 10) + lowSurrogate - 0xdc00) + 0x10000;\n                            ptr[0] = (byte)(((codepoint \u003e\u003e 18) \u0026 0x7) | 0xF0);\n                            ptr[1] = (byte)(((codepoint \u003e\u003e 12) \u0026 0x3F) | 0x80);\n                            ptr[2] = (byte)(((codepoint \u003e\u003e 6) \u0026 0x3F) | 0x80);\n                            ptr[3] = (byte)((codepoint \u0026 0x3F) | 0x80);\n                            ptr += 4;\n                            continue;\n                        }\n```\n\nand that is what UTF8 encoding will do too. the fallback will get involved only if you have invalid surrogate.\nI suggest if you have some test work with your implementation, try to run it with the way I suggested \n\nEncoding utf8 = Encoding.GetEncoding(\"utf-8\", new EncoderReplacementFallback(\"\\uFFFD\"), new DecoderReplacementFallback(\"\\uFFFD\"));\n\nand then let me know what differences you are seeing. \n",
                                           "updatedAt":  "2015-10-29T00:34:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjA0NDU1MQ==",
                                           "createdAt":  "2015-10-29T01:05:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "The difference for \"\\uD800\" is:\n\n`ED-A0-80` (our impl with allowUnpairedSurrogates = true)\n`EF-BF-BD` (our impl with allowUnpairedSurrogates = false) \n`EF-BF-BD` (fallback) \n\nThe fallback only addresses the case allowUnpairedSurrogates = false, but doesn\u0027t address the other one and I don\u0027t see how it can be implemented.\n",
                                           "updatedAt":  "2015-10-29T01:47:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjA0NzM0Mw==",
                                           "createdAt":  "2015-10-29T01:28:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Will look at  that and will get back to you. thanks.\n",
                                           "updatedAt":  "2015-10-29T01:28:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MjA0Nzg2Nw==",
                                           "createdAt":  "2015-10-29T01:33:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Thanks Tarek.\n",
                                           "updatedAt":  "2015-10-29T01:33:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzE5NzM1NQ==",
                                           "createdAt":  "2015-11-03T00:01:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Thanks Tomáš for your patience \n\nI had a chance to look more at that. There is no good way to encode the invalid surrogate the way you mentioned here. I mean encoding \\uD800 to { 0xED, 0xA0, 0x80 }. And it is still not a good idea to support this scenario in the framework because we always promise encoding the string with valid bytes in the target encoding. If we produce something like {0xED, 0xA0, 0x80}, those are invalid byte sequence for UTF8 and it will not be right to have it. This is why our encoders fallback is using Unicode characters and not allowing passing fallback bytes.\n\nI understand in your scenario you have used to produce such sequence and you may need to keep it for compatibility reason but I am wondering how the output really get used if the byte sequence is invalid anyway? Note that you cannot even round trip these sequence to UTF16 without special handling too or you’ll end the \\uFFFD fallback again.\n\nMy suggestion is, if possible you deprecate this behavior and always use the case allowUnpairedSurrogates = false. Otherwise you’ll need to keep your current code.\n",
                                           "updatedAt":  "2015-11-03T00:01:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1NjU1ODczMw==",
                                           "createdAt":  "2015-11-13T21:16:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "@tarekgh We won\u0027t deprecate this. This is a feature and not a bug.\n\nSee https://en.wikipedia.org/wiki/UTF-8#WTF-8\n\nSure I can roundtrip it. That\u0027s the whole point. The encoding is lossless. Decoding the bytes into UTF16 will result in the original string with unpaired surrogates.\n",
                                           "updatedAt":  "2015-11-13T21:20:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1OTI5NzY5OA==",
                                           "createdAt":  "2016-11-08T23:56:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "We need formal API proposal -- a flag on UTF8Encoding class.\n",
                                           "updatedAt":  "2016-11-08T23:56:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Mzc0Mzg0OQ==",
                                           "createdAt":  "2016-11-30T00:21:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JonHanna",
                                           "body":  "Why not\r\n```\r\nWTF8Encoding : Encoding\r\n{\r\n}\r\n```\r\n?\r\n\r\nThis could provide the encoding needed while remaining distinct from UTF-8, not called UTF-8 (though perhaps called something else, I\u0027m pretty sure Wobbly Transformation Format is a tongue-in-cheek reference to another expansion of the same acronym), and need not even necessarily be in System.Text.",
                                           "updatedAt":  "2016-11-30T00:21:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Mzc0NjczNA==",
                                           "createdAt":  "2016-11-30T00:37:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@JonHanna WTF8Encoding is option too we can consider. the question is, is it better to have whole new class to handle the unpaired surrogate or can we just let UTF8Encoding class support this with some property or flag? \r\n\r\nif we are going to have WTF8Encoding, I think it should be inherited from UTF8Encoding. but anyway we need to see the complete proposal so we can discuss it. Thanks.",
                                           "updatedAt":  "2016-11-30T00:37:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Mzc3MTQ2Mw==",
                                           "createdAt":  "2016-11-30T03:14:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bendono",
                                           "body":  "I am a little concerned about this proposal. Unpaired surrogates are invalid in UTF-16, and the corresponding UTF-8 is ill-formed. In fact, this very issue is handled in the [Unicode FAQ](http://unicode.org/faq/utf_bom.html#utf8-5):\r\n\r\n\u003e Q: How do I convert an unpaired UTF-16 surrogate to UTF-8?\r\n\u003e \r\n\u003e A different issue arises if an unpaired surrogate is encountered when converting ill-formed UTF-16 data. By represented such an unpaired surrogate on its own as a 3-byte sequence, the resulting UTF-8 data stream would become ill-formed. While it faithfully reflects the nature of the input, Unicode conformance requires that encoding form conversion always results in valid data stream. Therefore a converter must treat this as an error. [AF]\r\n\u003e \r\n\r\nI realize that there are use cases because some external processes do not strictly enforce the rules. However, the line needs to be drawn somewhere. Not enforcing well-formed data is **infectious**: people can no longer depend on their data being well defined so will need to drop UTF-8 and instead use WTF-8 by default.\r\n\r\nI would much rather see the invalid data stopped at the source. Produce an error for unpaired surrogates in attributes. Produce an error when a path contains an unpaired surrogate. Letting these errors propagate is the only reason that WTF-8 has any use.\r\n\r\nAlso note that WTF-8 is not a real Unicode encoding defined in the Unicode Standard.\r\n\r\nWhile I highly caution against it, if it must be, then WTF-8 should be an internal class. It should not be available publicly in the framework. Any use of it publicly is an abuse in my opinion.\r\n\r\nIt may also be wise to consult with Unicode. There is a public [mailing list](http://www.unicode.org/consortium/distlist.html) with many experts.\r\n",
                                           "updatedAt":  "2016-11-30T03:32:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Mzc3Nzk5NQ==",
                                           "createdAt":  "2016-11-30T04:06:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "@bendono There are legitimate scenarios where WTF8 is needed. For example, C# string literals are UTF16 encoded, so they can express unpaired surrogates. \r\n\r\n```C#\r\nconst string str = \"\\uD800\";\r\n```\r\n\r\nIs a valid constant literal. In order to serialize it in metadata we either need to use UTF16 or WTF8, in order for the string to be deserializable without data loss. ECMA CLI metadata standard chose UTF16, which is space inefficient. If we want to represent the string efficiently we need to use something like WTF8.\r\n\r\nIn libraries like System.Reflection.Metadata we indeed have an internal [UTF8 encoder/decoder that supports unpaired surrogates](https://source.dot.net/#System.Reflection.Metadata/System/Reflection/Internal/Utilities/BlobUtilities.cs,004a5421a72bfd1f,references). It\u0027s not desirable to have a copy of such code in all libraries that need to do this.\r\n\r\n\r\n",
                                           "updatedAt":  "2016-11-30T04:15:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Mzc3ODcyMA==",
                                           "createdAt":  "2016-11-30T04:13:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Re whether it should be a new class or a flag in UTF8Encoding ctor:\r\nAdding a constructor overload with ```allowUnpairedSurrogates``` flag would make this feature less visible than adding a new class. Which seems to be desirable based on the opinions expressed above. It would also be consistent with the existing constructors that accept flags ```bool encoderShouldEmitUTF8Identifier``` and ```bool throwOnInvalidBytes```. ",
                                           "updatedAt":  "2016-11-30T04:14:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Mzc4MTQ2Mw==",
                                           "createdAt":  "2016-11-30T04:40:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bendono",
                                           "body":  "@tmat There needs to be a distinction between a string (for example System.String) and an encoding. A string may be encoded in UTF-16, but that is an implementation detail and not important. (There have been calls for it to be encoded as UTF-8 and several other schemes.) An encoded string is a byte array / stream. I am referring to the later.\r\n\r\nIn fact, this distinction too is handled in the [Unicode Standard](http://www.unicode.org/versions/Unicode9.0.0/ch02.pdf). See section 2.7 where it discusses that a string may not always be well defined. As such, you can have a string that contains unpaired surrogates, as you point out. However, it should fail (see Unicode FAQ) if that same string is output into a encoded UTF-8 byte array / stream.\r\n\r\nI do not dismiss the use cases that you mention. I would prefer raising an error in these cases, but as I wrote above if it must be done, do it in private. It will be abused as part of the larger, general framework. If you don\u0027t want to have a copy in multiple libraries, then make a public implementation in your own library that can be shared.  I don\u0027t see the need for this to be in the BCL.\r\n",
                                           "updatedAt":  "2016-11-30T04:40:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Mzc4Mjg1MA==",
                                           "createdAt":  "2016-11-30T04:53:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "@bendono I indeed distinguish between those two. By \"UTF16 encoded\" i mean in memory they are represented as UTF16 bytes and support storage of unpaired surrogates. In metadata they can be inefficiently stored the same way as in memory or more efficiently as WTF8 encoded.\r\n\r\nBTW, System.Reflection.Metadata is in CoreFX. So if we make it public there it will be public in BCL ;) \r\n",
                                           "updatedAt":  "2016-11-30T04:53:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0OTE0MDk3Mg==",
                                           "createdAt":  "2017-12-04T23:23:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAQITuw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bendono",
                                                                               "createdAt":  "2017-12-05T00:00:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Given that (a) this is a violation of the UTF-8 specification, (b) there has been little demand for this feature aside from domain-specific use cases, (c) this issue has existed for multiple years without action, and (d) alternatives exist via use of private implementation encoding routines, I\u0027m closing this as won\u0027t fix.",
                                           "updatedAt":  "2017-12-04T23:23:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rqkxV",
                                           "createdAt":  "2023-11-10T19:29:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Reopening this issue to be reconsidered again. \r\n\r\nThe scenario is a serialization of arbitrary UTF16 strings. A serializer that uses UTF8 encoding as a performance optimization (reducing payload size) won\u0027t be able to roundtrip all UTF16 encoded strings (those w/ unpaired surrogates). It is reasonable for the client of such serialization framework to expect `str == Deserialize(Serialize(str))` to hold for all inputs. It is surprising and leads to bugs if this doesn\u0027t hold.\r\n\r\nIt is true that these frameworks can implement their custom UTF8 serialization. In reality, this has two problems though:\r\n1) They need to know to do that.\r\n2) Their custom implementation won\u0027t likely be as optimized as the runtime implementation.\r\n\r\nHaving a UTF8 encoding implementation that supports roundtripping available out of the box and documented (perhaps linked from UTF8 doc with comment like \"Note that UTF8Encoding does not roundtrip. Use this alternative API instead if roundtripping is required.\") would mitigate both of these.",
                                           "updatedAt":  "2023-11-10T19:34:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6x3oft",
                                           "createdAt":  "2025-06-18T13:09:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "Would a better option be to create a _new_ `Encoding.Wtf8`? Because that\u0027s what UTF-8 encoded surrogates are sometimes considered: [WTF-8](https://simonsapin.github.io/wtf-8/)?",
                                           "updatedAt":  "2025-06-18T13:09:37Z"
                                       }
                                   ],
                         "totalCount":  34
                     },
        "title":  "UTF8Encoding should support encoding/decoding of unpaired surrogates",
        "labels":  [
                       "api-needs-work",
                       "area-System.Text.Encoding",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/2136",
        "createdAt":  "2020-01-24T09:03:57Z",
        "number":  2136,
        "author":  "oliverjanik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCCuQiQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nil4",
                                            "createdAt":  "2020-01-25T08:57:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mcpiroman",
                                            "createdAt":  "2020-01-26T09:28:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "augustoproiete",
                                            "createdAt":  "2020-01-28T20:22:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "manne",
                                            "createdAt":  "2020-01-29T21:15:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "khellang",
                                            "createdAt":  "2020-03-17T12:56:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AronParker",
                                            "createdAt":  "2020-03-28T15:00:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "castholm",
                                            "createdAt":  "2021-01-27T13:00:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yyjdelete",
                                            "createdAt":  "2021-11-16T12:35:51Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2025-07-30T19:12:36Z",
        "body":  "The `System.Text.Encoding.UT8` encodes using BOM which is generally not recommended.\r\n\r\nCan we have a `UTF8NoBom` property for convenience ?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuwLxmw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3ODI1ODA2OQ==",
                                           "createdAt":  "2020-01-24T19:02:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MeikTranel",
                                           "body":  "There\u0027s a constructor that lets you switch off the bom. See https://docs.microsoft.com/en-us/dotnet/api/system.text.utf8encoding.-ctor?view=netcore-3.1#System_Text_UTF8Encoding__ctor_System_Boolean_",
                                           "updatedAt":  "2020-01-24T19:02:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3ODMxODIyNw==",
                                           "createdAt":  "2020-01-24T21:58:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA_bhXA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nil4",
                                                                               "createdAt":  "2020-01-25T08:57:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oliverjanik",
                                                                               "createdAt":  "2020-01-25T11:19:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NoneGiven",
                                                                               "createdAt":  "2020-01-26T06:16:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gfoidl",
                                                                               "createdAt":  "2020-01-27T09:40:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "augustoproiete",
                                                                               "createdAt":  "2020-01-28T20:05:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ufcpp",
                                                                               "createdAt":  "2020-01-29T01:06:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wisemoth",
                                                                               "createdAt":  "2020-02-03T14:30:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "khellang",
                                                                               "createdAt":  "2020-03-17T12:56:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AronParker",
                                                                               "createdAt":  "2020-03-28T15:00:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "True, it\u0027s easy for somebody to construct this themselves. But a devil\u0027s advocate argument: we define an internal property `UTF8NoBom` in around a half-dozen places throughout our codebase. If we\u0027re doing this frequently then it stands to reason that our customers are doing it frequently as well.",
                                           "updatedAt":  "2020-01-24T21:58:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3ODMzNTQ4NA==",
                                           "createdAt":  "2020-01-24T23:00:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MeikTranel",
                                           "body":  "True. I\u0027m in favor of this as well. It was more me making sure people immediately see that there is an easy workaround when they land on this page via google.",
                                           "updatedAt":  "2020-01-24T23:00:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3ODMzNjc2OA==",
                                           "createdAt":  "2020-01-24T23:05:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "@tarekgh Do you have any thoughts on this?",
                                           "updatedAt":  "2020-01-24T23:05:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3ODM0MDY3OA==",
                                           "createdAt":  "2020-01-24T23:23:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA57FyQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oliverjanik",
                                                                               "createdAt":  "2020-01-25T11:17:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MeikTranel",
                                                                               "createdAt":  "2020-01-25T15:54:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "No objection here. I am just wondering, do we need to add properties like `UnicodeNoBom` and `UTF32NoBom`? \r\n\r\nMinor issue, regarding naming. I think \u0027Bom\u0027 is ok but, is it better to use `UTF8NoBOM`? we did a similar thing when we used `ISO` and `UTF`. Or use the full name `UTF8NoByteOrderMark`.\r\n\r\n",
                                           "updatedAt":  "2020-01-24T23:36:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3ODM0MjQ0Mg==",
                                           "createdAt":  "2020-01-24T23:31:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "I don\u0027t know if there\u0027s much evidence that people use `UnicodeEncoding` or `UTF32Encoding` anywhere near as much as `UTF8Encoding`. But if we had such evidence then an accelerator on those might also make sense.",
                                           "updatedAt":  "2020-01-24T23:31:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3ODM0NDIwNg==",
                                           "createdAt":  "2020-01-24T23:40:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Unicode encoding usually used with System.IO. UTF32 is rarely used. We can wait not exposing any properties for these till we get a demand. \r\n",
                                           "updatedAt":  "2020-01-24T23:40:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3OTUzNDc4MA==",
                                           "createdAt":  "2020-01-29T00:15:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e we define an internal property UTF8NoBom in around a half-dozen\r\n\r\nMost of these internal places define this property as NoBom + throwing. Do we want the encoding returned by this property to be non-throwing or throwing? Do we want to have both variants (throwing and non-throwing)?",
                                           "updatedAt":  "2020-01-29T00:28:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3OTUzNjU0OA==",
                                           "createdAt":  "2020-01-29T00:22:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I think providing both options (throwing and non-throwing) would be the best. but the priority would be for non-throwing as users will have more control.",
                                           "updatedAt":  "2020-01-29T00:22:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3OTUzODQxNg==",
                                           "createdAt":  "2020-01-29T00:30:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "augustoproiete",
                                           "body":  "A simple `UTF8NoBOM` property should be non-throwing for consistency with the other properties in the `Encoding` class (UTF8, Unicode, BigEndianUnicode, etc...) which are all non-throwing.\r\n\r\nMy understanding is that a non-throwing instance is always used for reading (relaxed), whilst a throwing instance is always used for writing (strict), so it would be great if both options were available.\r\n",
                                           "updatedAt":  "2020-01-29T00:30:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3OTUzOTk2NQ==",
                                           "createdAt":  "2020-01-29T00:36:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e a non-throwing instance is always used for reading \r\n\r\nThat is not correct. For example, the new JsonReader uses throwing to reject invalid UTF8 data: https://github.com/dotnet/runtime/blob/master/src/libraries/System.Text.Json/src/System/Text/Json/Reader/JsonReaderHelper.Unescaping.cs#L39\r\n\r\nFrom security point of view, it is always better to use throwing variant because of it prevents invalid data from getting through the system.\r\n\r\nI won\u0027t disagree if the simple property is non-throwing for consistency with the other properties.",
                                           "updatedAt":  "2020-01-29T00:36:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3OTU0MjQzOA==",
                                           "createdAt":  "2020-01-29T00:47:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "augustoproiete",
                                           "body":  "\u003e the new JsonReader uses throwing to reject invalid UTF8 data\r\n\r\nInteresting, thanks. I read the comment \"[_The high level goal is to be tolerant of encoding errors when we read and very strict when we write_](https://github.com/dotnet/runtime/search?q=%22The+high+level+goal+is+to+be+tolerant+of+encoding+errors+when+we+read+and+very+strict%22\u0026unscoped_q=%22The+high+level+goal+is+to+be+tolerant+of+encoding+errors+when+we+read+and+very+strict%22)\" in different files in the codebase (StreamReader/StreamWriter) and assumed it was a general principle.",
                                           "updatedAt":  "2020-01-29T00:47:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NzM0Mjk5Ng==",
                                           "createdAt":  "2020-03-10T22:12:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Repathing to future because we\u0027re still not sure if including this is the right thing for the product. The workaround is really simple: instantiate the class yourself with whatever arguments you require. The only real place we\u0027d be able to add significant value is if we were to take advantage of JIT devirtualization or some other perf optimization that folks outside the runtime couldn\u0027t gain.",
                                           "updatedAt":  "2020-03-10T22:12:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NQgw3",
                                           "createdAt":  "2024-09-24T01:22:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "oliverjanik",
                                           "body":  "Keep open please, I keep adding this property to every lib/project.\r\n\r\nSeems like a common practice https://github.com/search?q=Utf8NoBom+language%3AC%23\u0026type=code\u0026l=C%23\r\n\r\n",
                                           "updatedAt":  "2024-09-24T01:22:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67AvGb",
                                           "createdAt":  "2025-07-30T19:12:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "YoshiRulz",
                                           "body":  "See also #51353.",
                                           "updatedAt":  "2025-07-30T19:12:36Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Add UTF8NoBom property to System.Text.Encoding class",
        "labels":  [
                       "api-suggestion",
                       "area-System.Text.Encoding"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51353",
        "createdAt":  "2021-04-15T23:36:59Z",
        "number":  51353,
        "author":  "GrabYourPitchforks",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCRMPoA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tarekgh",
                                            "createdAt":  "2021-04-15T23:44:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattjohnsonpint",
                                            "createdAt":  "2021-04-15T23:48:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iamcarbon",
                                            "createdAt":  "2021-04-16T00:14:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jnm2",
                                            "createdAt":  "2021-04-16T00:25:22Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "jnm2",
                                            "createdAt":  "2021-04-16T00:25:25Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "jnm2",
                                            "createdAt":  "2021-04-16T00:25:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CyrusNajmabadi",
                                            "createdAt":  "2021-04-16T00:29:03Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "saucecontrol",
                                            "createdAt":  "2021-04-16T00:29:30Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "saucecontrol",
                                            "createdAt":  "2021-04-16T00:29:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "saucecontrol",
                                            "createdAt":  "2021-04-16T00:29:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tannergooding",
                                            "createdAt":  "2021-04-16T00:29:45Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "tannergooding",
                                            "createdAt":  "2021-04-16T00:29:46Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "tannergooding",
                                            "createdAt":  "2021-04-16T00:29:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tyrrrz",
                                            "createdAt":  "2021-04-16T00:30:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wraith2",
                                            "createdAt":  "2021-04-16T01:00:08Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "rgwood",
                                            "createdAt":  "2021-04-16T01:31:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rgwood",
                                            "createdAt":  "2021-04-16T01:31:31Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "rgwood",
                                            "createdAt":  "2021-04-16T01:31:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "avsorokin",
                                            "createdAt":  "2021-04-16T04:35:46Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2021-04-16T05:11:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nil4",
                                            "createdAt":  "2021-04-16T07:59:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gfoidl",
                                            "createdAt":  "2021-04-16T08:04:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2021-04-16T08:11:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "benaadams",
                                            "createdAt":  "2021-04-16T09:49:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "krwq",
                                            "createdAt":  "2021-04-16T10:14:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MihaZupan",
                                            "createdAt":  "2021-04-16T10:19:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wzchua",
                                            "createdAt":  "2021-04-16T13:22:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tornhoof",
                                            "createdAt":  "2021-04-16T13:46:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aromaa",
                                            "createdAt":  "2021-04-16T15:13:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2021-04-16T21:47:07Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "ufcpp",
                                            "createdAt":  "2021-04-17T03:52:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kkamegawa",
                                            "createdAt":  "2021-04-17T04:31:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "sharwell",
                                            "createdAt":  "2021-04-17T05:04:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SingleAccretion",
                                            "createdAt":  "2021-04-17T19:09:35Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "KevinCathcart",
                                            "createdAt":  "2021-05-01T01:52:39Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "KevinCathcart",
                                            "createdAt":  "2021-05-01T01:52:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KevinCathcart",
                                            "createdAt":  "2021-05-01T01:52:41Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "mklement0",
                                            "createdAt":  "2021-05-10T11:57:09Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "buyaa-n",
                                            "createdAt":  "2021-05-10T17:10:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ssa3512",
                                            "createdAt":  "2021-05-10T20:48:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "henkmollema",
                                            "createdAt":  "2021-05-10T21:01:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Petr-Kovalev",
                                            "createdAt":  "2021-05-11T00:33:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sfiruch",
                                            "createdAt":  "2021-05-25T15:47:18Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "sfiruch",
                                            "createdAt":  "2021-05-25T15:52:26Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "sfiruch",
                                            "createdAt":  "2021-05-25T15:52:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EamonNerbonne",
                                            "createdAt":  "2021-07-19T11:00:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vcsjones",
                                            "createdAt":  "2021-10-18T16:07:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2022-02-12T09:12:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austinw-fineart",
                                            "createdAt":  "2022-02-21T02:29:44Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2022-03-03T06:49:04Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2022-03-03T06:49:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2022-03-03T06:49:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ltrzesniewski",
                                            "createdAt":  "2022-05-28T11:13:53Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "samsosa",
                                            "createdAt":  "2022-08-11T16:45:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "samsosa",
                                            "createdAt":  "2022-08-11T16:45:02Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "samsosa",
                                            "createdAt":  "2022-08-11T16:45:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aayjaychan",
                                            "createdAt":  "2022-09-15T01:33:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jasper-d",
                                            "createdAt":  "2022-09-29T22:24:27Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "jasper-d",
                                            "createdAt":  "2022-09-29T22:24:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "santisq",
                                            "createdAt":  "2022-10-19T23:34:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mahara",
                                            "createdAt":  "2022-12-06T17:10:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FranklinWhale",
                                            "createdAt":  "2022-12-19T14:44:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "Youssef1313",
                                            "createdAt":  "2023-01-11T20:22:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "doominator42",
                                            "createdAt":  "2023-01-24T16:44:55Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "doominator42",
                                            "createdAt":  "2023-01-24T16:44:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PJB3005",
                                            "createdAt":  "2023-04-26T20:15:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MrGadget1024",
                                            "createdAt":  "2023-10-19T03:31:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BoundedChenn31",
                                            "createdAt":  "2023-10-28T12:03:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "piju3",
                                            "createdAt":  "2024-02-08T20:15:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-02-17T04:10:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2024-04-01T11:20:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bachratyg",
                                            "createdAt":  "2024-05-14T14:22:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Genmutant",
                                            "createdAt":  "2024-05-30T12:19:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Evengard",
                                            "createdAt":  "2024-12-11T20:04:36Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Evengard",
                                            "createdAt":  "2024-12-11T20:04:38Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "Evengard",
                                            "createdAt":  "2024-12-11T20:04:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "verdie-g",
                                            "createdAt":  "2025-04-01T00:34:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Athari",
                                            "createdAt":  "2025-07-19T00:35:57Z"
                                        }
                                    ],
                          "totalCount":  78
                      },
        "updatedAt":  "2024-04-02T22:38:19Z",
        "body":  "## tl;dr\r\n\r\nThe `Encoding.UTF8` singleton currently says \"please emit a BOM when writing.\" This is an anachronism. Nowadays, it should say \"please _do not_ emit a BOM when writing.\"\r\n\r\nThe `Encoding.UTF8` singleton should continue to perform U+FFFD substitution on invalid subsequences, just as it does today.\r\n\r\n## Discussion\r\n\r\nMore information: https://github.com/dotnet/standard/issues/260, https://github.com/dotnet/runtime/issues/7779, with further discussion at https://github.com/dotnet/runtime/issues/28218\r\n\r\nHistorically, the `Encoding.UTF8` singleton has been equivalent to `new UTF8Encoding(encoderShouldEmitUTF8Identifier: true, throwOnInvalidBytes: false)`. This is largely for historical reasons, as these types were introduced during a period when multiple different encodings were commonplace, and the world hadn\u0027t yet settled on UTF-8 as the de facto standard. Now, 20 years later, UTF-8 has cemented its place as the true winner, and many tools across Unix and Windows natively operate on UTF-8. But as mentioned in the above linked issues, these tools can fail if they encounter a BOM at the start of the data.\r\n\r\nThe Unicode maintainers have also discussed recommending _against_ the use of BOMs by default unless explicitly required by the protocol or file format.\r\n\r\n* https://www.unicode.org/L2/L2021/21038-bom-guidance.pdf (guidance being drafted, but not yet adopted)\r\n* https://corp.unicode.org/pipermail/unicode/2020-October/009070.html (previous discussion on this issue which led to above draft guidance)\r\n* https://corp.unicode.org/pipermail/unicode/2020-June/008713.html (earlier discussion on this issue)\r\n\r\nThis would be a breaking change. However, this breaking change should be an overall net positive for the ecosystem because it would prevent our writers from emitting bytes which many tools do not properly discard upon read. We have a history of making breaking changes in this area for .NET Core to assist with interoperability. For example, we changed [`Encoding.Default` to be UTF-8 w/o BOM](https://github.com/dotnet/runtime/issues/7779) across all OSes. We also changed `UTF8Encoding` [to be more standards-compliant](https://github.com/dotnet/docs/issues/13547) when it comes to replacing ill-formed input sequences with U+FFFD chars.\r\n\r\nParsers can still opt to honor BOMs at the beginning of files opened for read. Nothing in this proposal discourages readers from parsing the first few bytes and selecting an appropriate `Encoding` based on that data.\r\n\r\nThis proposal _does not_ suggest changing the BOM behavior for `Encoding.UTF32`, `Encoding.Unicode`, or other built-in singletons. For writers which query the preamble before writing text, it is useful for these writers to continue to emit a \"this data is not UTF-8!\" marker before the bytestream. This should help preserve compatibility in the less-common scenarios where people want to continue writing XML files as UTF-16.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeTCALw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMDgwNDEyOQ==",
                                           "createdAt":  "2021-04-15T23:37:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @krwq, @eiriktsarpalis, @layomia\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## tl;dr\r\n\r\nThe `Encoding.UTF8` singleton currently says \"please emit a BOM when writing.\" This is an anachronism. Nowadays, it should say \"please _do not_ emit a BOM when writing.\"\r\n\r\nThe `Encoding.UTF8` singleton should continue to perform U+FFFD substitution on invalid subsequences, just as it does today.\r\n\r\n## Discussion\r\n\r\nMore information: https://github.com/dotnet/standard/issues/260, https://github.com/dotnet/runtime/issues/7779, with further discussion at https://github.com/dotnet/runtime/issues/28218\r\n\r\nHistorically, the `Encoding.UTF8` singleton has been equivalent to `new UTF8Encoding(encoderShouldEmitUTF8Identifier: true, throwOnInvalidBytes: false)`. This is largely for historical reasons, as these types were introduced during a period when multiple different encodings were commonplace, and the world hadn\u0027t yet settled on UTF-8 as the de facto standard. Now, 20 years later, UTF-8 has cemented its place as the true winner, and many tools across Unix and Windows natively operate on UTF-8. But as mentioned in the above linked issues, these tools can fail if they encounter a BOM at the start of the data.\r\n\r\nThe Unicode maintainers have also discussed recommending _against_ the use of BOMs by default unless explicitly required by the protocol or file format.\r\n\r\n* https://www.unicode.org/L2/L2021/21038-bom-guidance.pdf (guidance being drafted, but not yet adopted)\r\n* https://corp.unicode.org/pipermail/unicode/2020-October/009070.html (previous discussion on this issue which led to above draft guidance)\r\n* https://corp.unicode.org/pipermail/unicode/2020-June/008713.html (earlier discussion on this issue)\r\n\r\nThis would be a breaking change. However, this breaking change should be an overall net positive for the ecosystem because it would prevent our writers from emitting bytes which many tools do not properly discard upon read. We have a history of making breaking changes in this area for .NET Core to assist with interoperability. For example, we changed [`Encoding.Default` to be UTF-8 w/o BOM](https://github.com/dotnet/runtime/issues/7779) across all OSes. We also changed `UTF8Encoding` [to be more standards-compliant](https://github.com/dotnet/docs/issues/13547) when it comes to replacing ill-formed input sequences with U+FFFD chars.\r\n\r\nParsers can still opt to honor BOMs at the beginning of files opened for read. Nothing in this proposal discourages readers from parsing the first few bytes and selecting an appropriate `Encoding` based on that data.\r\n\r\nThis proposal _does not_ suggest changing the BOM behavior for `Encoding.UTF32`, `Encoding.Unicode`, or other built-in singletons. For writers which query the preamble before writing text, it is useful for these writers to continue to emit a \"this data is not UTF-8!\" marker before the bytestream. This should help preserve compatibility in the less-common scenarios where people want to continue writing XML files as UTF-16.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eGrabYourPitchforks\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Encoding`, `breaking-change`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-15T23:37:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMDgwNzAwMQ==",
                                           "createdAt":  "2021-04-15T23:46:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCsJ5tA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krwq",
                                                                               "createdAt":  "2021-04-16T10:14:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kronic",
                                                                               "createdAt":  "2021-04-16T21:49:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ssa3512",
                                                                               "createdAt":  "2021-05-10T20:48:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EamonNerbonne",
                                                                               "createdAt":  "2021-07-19T11:00:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sfiruch",
                                                                               "createdAt":  "2021-10-15T22:20:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2022-03-03T06:50:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2022-09-13T17:30:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I am a supporter of this proposal. We need to provide a config switch to go back to old behavior if needed. ",
                                           "updatedAt":  "2021-04-15T23:46:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMDg0OTkyNQ==",
                                           "createdAt":  "2021-04-16T01:51:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjDGzQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "antiufo",
                                                                               "createdAt":  "2021-04-16T21:46:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "kronic",
                                                                               "createdAt":  "2021-04-16T21:49:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "sfiruch",
                                                                               "createdAt":  "2021-05-25T15:47:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "austinw-fineart",
                                                                               "createdAt":  "2022-02-21T02:36:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "mahara",
                                                                               "createdAt":  "2022-12-06T17:11:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "codaamok",
                                                                               "createdAt":  "2023-09-11T15:51:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "mstefarov",
                                                                               "createdAt":  "2024-02-26T20:49:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xced",
                                                                               "createdAt":  "2024-04-11T11:58:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MarkPflug",
                                                                               "createdAt":  "2024-05-10T22:43:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ramonsmits",
                                                                               "createdAt":  "2024-05-24T07:55:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  10
                                                         },
                                           "author":  "SimonCropp",
                                           "body":  "IMO this is such a significant (and difficult to discover) breaking change that \"provide a config switch to go back to old behavior\" is not sufficient. I propose: \r\n\r\n * obsolete `Encoding.UTF8` with warning\r\n * add `Encoding.UTF8IncludingBom` and `Encoding.UTF8ExcludingBom` (or equivalent)",
                                           "updatedAt":  "2021-04-16T01:51:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMDkxMDE1MQ==",
                                           "createdAt":  "2021-04-16T05:11:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCRMQmg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "doncot",
                                                                               "createdAt":  "2021-04-17T03:59:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sfiruch",
                                                                               "createdAt":  "2021-05-25T15:47:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2022-03-03T06:51:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "I wonder if default encoding can be changed from ANSI to UTF8, as a breaking change.\r\nIn practice, especially for East Asian users, ASNI codepages are much more annoying than BOM.",
                                           "updatedAt":  "2021-04-16T05:11:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMDkxMTAxNA==",
                                           "createdAt":  "2021-04-16T05:14:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC25kiw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mix4242",
                                                                               "createdAt":  "2023-02-28T13:27:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "heemskerkerik",
                                           "body":  "I am confused. The documentation says that it does include a BOM. Which method does that? When I try `GetBytes`, it doesn\u0027t appear to return a BOM:\n\n```csharp\nvar b = System.Text.Encoding.UTF8.GetBytes(\"Hello world\");\n\nforeach (byte bb in b)\n    Console.WriteLine(bb.ToString(\"X2\"));\n```\n\nThis outputs (on .NET 5):\n```\n48\n65\n6C\n6C\n6F\n20\n77\n6F\n72\n6C\n64\n```",
                                           "updatedAt":  "2021-04-16T05:14:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMDkxMzczNg==",
                                           "createdAt":  "2021-04-16T05:22:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODcjrpQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mix4242",
                                                                               "createdAt":  "2023-03-01T07:52:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2024-04-01T11:16:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "heemskerkerik",
                                           "body":  "Ah, I see. `GetBytes` never returns a BOM, but a `StreamWriter` will first write the result of `GetPreamble` and _then_ the result of `GetBytes`.",
                                           "updatedAt":  "2021-04-16T05:22:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMTA2MDUwNw==",
                                           "createdAt":  "2021-04-16T09:51:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tfenise",
                                           "body":  "It seems confusing if `Encoding.UTF32` and `Encoding.Unicode` emit BOM, but `Encoding.UTF8` does not.",
                                           "updatedAt":  "2021-04-16T09:51:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMTA2NDkwMw==",
                                           "createdAt":  "2021-04-16T09:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODYoYWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krwq",
                                                                               "createdAt":  "2021-04-16T10:14:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2021-04-16T10:32:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mklement0",
                                                                               "createdAt":  "2021-05-10T16:37:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "henkmollema",
                                                                               "createdAt":  "2021-05-10T21:03:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2022-03-03T06:52:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mahara",
                                                                               "createdAt":  "2022-12-06T17:13:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yieldOnly",
                                                                               "createdAt":  "2024-02-28T16:41:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "benaadams",
                                           "body":  "\u003e It seems confusing if `Encoding.UTF32` and `Encoding.Unicode` emit BOM, but `Encoding.UTF8` does not.\r\n\r\nUTF32 and UTF16 need a Byte Order Mark to indicate the endianness of the data apart from anything else; UTF8 doesn\u0027t have any endianness so doesn\u0027t require it for that purpose.\r\n\r\nAlso while ASCII text encoded using UTF-8 is backward compatible with ASCII, this is not true when Unicode Standard recommendations are ignored and a BOM is added.",
                                           "updatedAt":  "2021-04-16T09:59:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMTExMzYyNA==",
                                           "createdAt":  "2021-04-16T11:35:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tfenise",
                                           "body":  "`Encoding.UTF8` is explicitly documented to emit BOM. Changing `Encoding.UTF8` is unlike changing `Encoding.Default` to be UTF-8 w/o BOM. `Encoding.Default` is platform-dependent anyway. If `Encoding.UTF8` is easily misused, obsoletion or analyzer or warning seems better than a breaking change on `Encoding.UTF8`.",
                                           "updatedAt":  "2021-04-16T11:35:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMTExNzA3MA==",
                                           "createdAt":  "2021-04-16T11:43:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODd0y0g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "0xced",
                                                                               "createdAt":  "2024-04-11T12:02:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "benaadams",
                                           "body":  "\u003e obsoletion or analyzer or warning seems better than a breaking change on Encoding.UTF8.\r\n\r\nObsolete `Encoding.UTF8` introduce `Encoding.Utf8` 🤔 Though VB isn\u0027t case sensitive so that wouldn\u0027t work",
                                           "updatedAt":  "2021-04-16T11:43:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMTI3NTYyMQ==",
                                           "createdAt":  "2021-04-16T15:57:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This breaking change can break msbuild or powershell scripts. For example, the fix from https://github.com/dotnet/runtimelab/pull/782 would break since it depends on `Encoding.GetEncoding(\"utf-8\")` returning encoding with BOM. What would be the recommended action to resolve the break for this specific case?",
                                           "updatedAt":  "2021-04-16T15:58:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMTMyNzI2MA==",
                                           "createdAt":  "2021-04-16T17:29:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "@jkotas Yeah, the challenge is to weigh how many people will be broken against how many future .NET developers won\u0027t run into this trap. In your scenario, the ideal resolution would be to update the tooling to understand UTF-8 natively without a BOM. If this is impractical and the file format remains \"you must emit a BOM before writing UTF-8\", then this falls squarely under the scenario at https://www.unicode.org/L2/L2021/21038-bom-guidance.pdf, bottom of pg. 6. In that case, I\u0027d suggest the following three changes:\r\n\r\n* The `WriteLinesToFile` task get an additional property _WriteBOM_, which defaults to _false_.\r\n* The `WriteLinesToFile` code check the _WriteBOM_ property and special-case it for the known Unicode encodings (see sample code below).\r\n* The Native AOT compilation toolchain puts _encoding=\"utf-8\" writeBom=\"true\"_ in their targets file.\r\n\r\n```cs\r\nEncoding encoding = Encoding.GetEncoding(requestedEncoding);\r\nif (encoding.CodePage == Encoding.UTF8.CodePage)\r\n{\r\n    encoding = new UTF8Encoding(writeBom);\r\n}\r\nelse if (encoding.CodePage = Encoding.Unicode.CodePage)\r\n{\r\n    encoding = new UnicodeEncoding(writeBom);\r\n}\r\nelse if (/* ... */) { }\r\n```",
                                           "updatedAt":  "2021-04-16T17:29:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMTM0NjQ5Nw==",
                                           "createdAt":  "2021-04-16T17:51:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e In your scenario, the ideal resolution would be to update the tooling to understand UTF-8 natively without a BOM\r\n\r\nIn this case, it would be a breaking change and/or new feature for VC++ compiler/linker.\r\n\r\n\u003e WriteLinesToFile task get an additional property WriteBOM\r\n\r\nAgree. In fact, msbuild has an issue on this already: https://github.com/dotnet/msbuild/issues/6168. It sounds like we would have some coordination to do for this one with msbuild and other similar projects.",
                                           "updatedAt":  "2021-04-16T17:51:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMTc2MjkwMw==",
                                           "createdAt":  "2021-04-17T04:15:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjDGug==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ramonsmits",
                                                                               "createdAt":  "2024-05-24T07:54:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "atsushieno",
                                           "body":  "Mono mscorlib.dll used to have `Encoding.UTF8Unmarked` (internal only) which I believe is still much better than mixing cases or introducing breaking changes. Having this alongside, Encoding.UTF8 would not look confusing anymore.",
                                           "updatedAt":  "2021-04-17T04:15:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMTc2Njc4NQ==",
                                           "createdAt":  "2021-04-17T04:56:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZipyw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mklement0",
                                                                               "createdAt":  "2021-05-10T12:04:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "henkmollema",
                                                                               "createdAt":  "2021-05-10T21:05:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sfiruch",
                                                                               "createdAt":  "2021-05-25T15:48:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2022-03-03T06:55:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yieldOnly",
                                                                               "createdAt":  "2024-02-28T16:43:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mahara",
                                                                               "createdAt":  "2025-07-07T07:10:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "We discussed a little bit internally the idea of having `Encoding.UTF8NoBOM` as a first-class citizen alongside `Encoding.UTF8`. That suggestion has come up a few times in this thread as well.\r\n\r\nI\u0027m not sold on that as a good long-term solution. The spirit of this work item is that we want to reduce the number of developers who are exposed to the concept of a BOM. By having static factories for \"with BOM\" and \"without BOM\", we\u0027d be foisting this concept upon every developer who starts typing `Encoding.*` in their code editor. A developer who is well-versed in these concepts can quickly and correctly answer the question of \"do I want a BOM or not?\", but for the majority of the developer audience these terms would be unfamiliar and they wouldn\u0027t know how to answer the question. Ultimately I think exposing these concepts on a primary API would result in a poorer user experience than exists today.",
                                           "updatedAt":  "2021-04-17T04:56:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMTc2ODAyMw==",
                                           "createdAt":  "2021-04-17T05:07:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sharwell",
                                           "body":  "I am strongly against this proposal. Not only is the current behavior documented such that applications can depend on it (object on compatibility grounds), but the BOM has proven widely beneficial in my experience at avoiding encoding errors in documents that change over time (object to the principle of the proposed direction). ",
                                           "updatedAt":  "2021-04-17T05:07:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMTc2OTU3OA==",
                                           "createdAt":  "2021-04-17T05:22:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "atsushieno",
                                           "body":  "I completely agree that BOM-less UTF8 is definitely better and having only one instead of two brings better developer experience.\r\n\r\nBut ABI-breaking changes should be the last resort and should not be made for \"somewhat better\" developer experience. Aged platforms have their appropriate reasons for technical choices.\r\n\r\nTo not make ABI breaking changes, there are still ways to improve developer experience with updating the API:\r\n\r\n- Add CLEARER coding hints (`\u003csummar\u003e` on `Encoding.*` members) to tell those casual developers using simple words like \"you would not like to use it unless you understand what BOM is.\"\r\n- Deprecate `Encoding.UTF8` with same or similar comment, indicating the new alternative like `UTF8NoBOM`. If I were to design \"long term\" solution, I would deprecate UTF8 first, then remove it from the API, then bring it back as BOM-less.",
                                           "updatedAt":  "2021-04-17T05:22:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNjY2NDkwMQ==",
                                           "createdAt":  "2021-05-10T12:55:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@GrabYourPitchforks are there any news here? Did we get into any consensus? Is this conversation only about Encoding.UTF8 or also `Encoding.GetEncoding(\"utf-8\")` which currently returns UTF8 instance which produces BOM? As a first step perhaps we could only make latter return BOM-less instance? Encoding.UTF8 will probably cause more issues than that",
                                           "updatedAt":  "2021-05-10T12:55:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNjc2ODA1Mg==",
                                           "createdAt":  "2021-05-10T14:27:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODYobZA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2022-03-03T06:59:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2022-03-03T06:59:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mahara",
                                                                               "createdAt":  "2022-12-06T17:21:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "piju3",
                                                                               "createdAt":  "2024-02-08T20:16:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "piju3",
                                                                               "createdAt":  "2024-02-08T20:16:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yieldOnly",
                                                                               "createdAt":  "2024-02-28T16:46:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "mklement0",
                                           "body":  "Good catch, @krwq: `Encoding.GetEncoding(\"utf-8\")` _does_ emit a BOM (though you wouldn\u0027t be able to tell from the  the description of the [`.Preamble`](https://docs.microsoft.com/en-us/dotnet/api/system.text.utf8encoding.preamble?view=net-5.0) property, which doesn\u0027t mention `.GetEncoding()` and explicitly states that only using `System.Text.Encoding.UTF8` and using the argument-less or no-BOM `UTF8Encoding` constructor results in a BOM).\r\n\r\nBy contrast, `System.Text.Encoding.GetEncoding(0)`, [documented](https://docs.microsoft.com/en-US/dotnet/api/system.text.encoding.getencoding?view=net-5.0#System_Text_Encoding_GetEncoding_System_String_) to return UTF-8 in .NET Core, does _not_ emit a BOM.\r\n\r\n(A systematic review of the docs with respect to recommending / discouraging a UTF-8 BOM  is called for either way, as certain pages contradict each other.)\r\n\r\n---\r\n\r\n**I think consistency is called for, and my vote is to _consistently default to BOM-less UTF-8_ and only ever return a with-BOM instance _if explicitly requested_.**\r\n\r\nWhile undoubtedly a breaking change, @GrabYourPitchforks has already made compelling (to me) arguments for it in the initial post; let me add a few points:\r\n\r\n* The _Unix_ world has moved to BOM-less UTF-8 a long time ago, and it is primarily tools with a Unix heritage that do _not_ expect a BOM, and in the presence of one either choke or misinterpret the BOM as part of the data.\r\n\r\n* The _Windows_ world is undoubtedly moving towards _assuming UTF-8_ in the absence of a BOM as well:\r\n\r\n  * The major (cross-platform) text editors nowadays write and read BOM-less UTF-8 by default - see https://github.com/dotnet/runtime/issues/28218#issuecomment-795925634 for an overview.\r\n\r\n  * PowerShell _Core_ (the cross-platform edition built on .NET Core / 5+) too uses BOM-less UTF-8 as its consistent default, both when reading its source code and in its file-processing cmdlets.\r\n\r\n  * Node.js (`node.exe`) - and others? - have chosen to \"speak\" (BOM-less) UTF-8 by default, irrespective of the active OEM code page as determined by the system locale (aka language for non-Unicode programs).\r\n    * Python chose a different (also nonstandard) approach, defaulting to the active ANSI code page even when called from the console, rather than the OEM code page console applications are expected to use. However, it is is trivial to configure `python` to use (BOM-less) UTF-8 instead, via an environment variable (`PYTHONUTF8`) or, situationally, via a CLI parameter (`-X utf8`).\r\n\r\n  * Windows 10 now offers a - still-in-beta as of this writing - feature to switch to (BOM-less) UTF-8 _system-wide_, by setting the system locale so that _both_ the OEM and the ANSI code pages use code page `65001`, i.e. UTF-8; see [this Stack Overflow answer](https://stackoverflow.com/a/57134096/45375) for details and a discussion of the ramifications.\r\n     * With this configuration:\r\n       * Even _Windows PowerShell_ and Python, for instance, then default to BOM-less UTF-8 (since the ANSI code page is then effectively UTF-8).\r\n       * So will all conventional console applications that use the OEM code page, with the caveat that _legacy_ applications that aren\u0027t equipped to handle the variable-length aspect of UTF-8 encoding malfunction.\r\n\r\n   * Last but not least: **.NET\u0027s _own_ default encoding for its `System.IO` APIs has - commendably - been _BOM-less_ UTF-8 since v1.**\r\n\r\n",
                                           "updatedAt":  "2021-05-10T23:39:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNjkxODcyNw==",
                                           "createdAt":  "2021-05-10T16:24:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODcjsGA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mklement0",
                                                                               "createdAt":  "2021-05-10T16:25:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nil4",
                                                                               "createdAt":  "2021-05-10T20:45:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "heemskerkerik",
                                                                               "createdAt":  "2021-05-11T05:37:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2021-05-11T06:32:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sfiruch",
                                                                               "createdAt":  "2021-05-25T15:49:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krwq",
                                                                               "createdAt":  "2021-05-31T09:41:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yieldOnly",
                                                                               "createdAt":  "2024-02-28T16:46:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2024-04-01T11:18:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "@krwq The idea is that all UTF-8 factories hanging off `Encoding` will be no-BOM, _unless_ the caller calls `new UTF8Encoding(true)`.",
                                           "updatedAt":  "2021-05-10T16:24:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40tPzu",
                                           "createdAt":  "2021-07-21T15:22:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "@GrabYourPitchforks fair to assume we\u0027re punting this for a post .NET 6 release?",
                                           "updatedAt":  "2021-07-21T15:22:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40tfjv",
                                           "createdAt":  "2021-07-21T16:55:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Yup, post-6.0. This is really the type of thing that needs to go into an early preview.",
                                           "updatedAt":  "2021-07-21T16:55:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IQAbB",
                                           "createdAt":  "2022-08-11T15:35:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@GrabYourPitchforks I think we should pull the trigger right after 7.0 snap and have this smoke out through entire 8.0 period",
                                           "updatedAt":  "2022-08-11T15:35:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc547709",
                                           "createdAt":  "2024-04-01T00:48:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODcikuA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2024-04-01T07:43:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fgimian",
                                           "body":  "I personally think it would be ideal to have both as statics just like [PowerShell has for `Set-Content`](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/set-content?view=powershell-7.4#-encoding) but I respect the decision made here. My only thoughts are that the XML documentation for `Encoding.UTF8` could be improved.\r\n\r\nHere\u0027s what I see with go to definition in VS Code:\r\n\r\n```c#\r\n        //\r\n        // Summary:\r\n        //     Gets an encoding for the UTF-8 format.\r\n        //\r\n        // Returns:\r\n        //     An encoding for the UTF-8 format.\r\n```\r\n\r\nAnd in Visual Studio:\r\n\r\n```c#\r\n        // Returns an encoding for the UTF-8 format. The returned encoding will be\r\n        // an instance of the UTF8Encoding class.\r\n\r\n        public static Encoding UTF8 =\u003e UTF8Encoding.s_default;\r\n```\r\n\r\nAs you can see, the comments related to `Encoding.UTF8` don\u0027t clearly indicate that it will include the BOM. One\u0027s natural expectation would be for a BOM to not be included today, and thus I think it would be beneficial to clearly state it in the docs.\r\n\r\nCheers\r\nFotis",
                                           "updatedAt":  "2024-04-02T01:05:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5495Ap",
                                           "createdAt":  "2024-04-01T09:40:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vladd",
                                           "body":  "Maybe it would be sufficient to change `Encoding.Default` to be UTF-8 without BOM? I assume the current common wisdom is that `Encoding.Default` should not be used at all.",
                                           "updatedAt":  "2024-04-01T09:40:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5496cI",
                                           "createdAt":  "2024-04-01T09:46:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fgimian",
                                           "body":  "\u003e Maybe it would be sufficient to change `Encoding.Default` to be UTF-8 without BOM? I assume the current common wisdom is that `Encoding.Default` should not be used at all.\n\nHmm, I checked this earlier today and `Encoding.Default` was actually UTF-8 without a BOM. So I\u0027m using it along with Encoding.UTF8 to get both variants without having to create my own instance of UTF8Encoding. Not sure if I\u0027m missing something though. 😊",
                                           "updatedAt":  "2024-04-01T09:46:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54__ak",
                                           "createdAt":  "2024-04-01T15:53:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Certainly, `Encoding.Default` returns a UTF-8 encoding object without a Byte Order Mark (BOM). However, it\u0027s important to note that if your code is executed on the .NET Framework, `Encoding.Default` may not necessarily return a UTF-8 encoding object. Instead, it retrieves the default active codepage encoding on Windows.",
                                           "updatedAt":  "2024-04-01T15:53:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55AkWe",
                                           "createdAt":  "2024-04-01T17:20:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mklement0",
                                           "body":  "More specifically, in .NET Framework `Encoding.Default` is the _varying_ encoding that represents a given machine\u0027s legacy system locale\u0027s _ANSI_ code page, such as Windows-1252 on a US-English system, or Windows-1250 on a Czech system.\r\n\r\nThe only case in which `Encoding.Default` in  .NET Framework  reports UTF-8 - without a BOM (the _invariable_ default in .NET (Core)) - is if you\u0027ve changed your system locale to the still-in-beta option to use UTF-8 _system-wide_, as a result of which _both_ the ANSI and the OEM code page are set to `65001` (UTF-8); note that doing this has far-reaching consequences.\r\n\r\n\u003e  along with Encoding.UTF8 to get both variants without having to create my own instance of UTF8Encoding.\r\n\r\nThe very purpose of this proposal is to _remove_ the BOM from `Encoding.UTF8`, so I wouldn\u0027t rely on that.\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2024-04-01T17:23:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55MIAv",
                                           "createdAt":  "2024-04-02T22:38:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbKZcw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "ltrzesniewski",
                                                                               "createdAt":  "2024-04-02T23:37:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "Athari",
                                                                               "createdAt":  "2025-07-19T00:36:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "fgimian",
                                           "body":  "Just an additional note that is somewhat related. As of today, the very latest version of Visual Studio 2022 creates all  files in projects with a BOM too. That includes *.sln, *csproj and *.cs files too.",
                                           "updatedAt":  "2024-04-02T22:38:18Z"
                                       }
                                   ],
                         "totalCount":  29
                     },
        "title":  "Breaking change proposal: Encoding.UTF8 singleton should not have a BOM",
        "labels":  [
                       "area-System.Text.Encoding",
                       "breaking-change"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63592",
        "createdAt":  "2022-01-10T21:25:48Z",
        "number":  63592,
        "author":  "zacknewman",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-02T08:45:46Z",
        "body":  "### Description\r\n\r\nNot sure if this is a bug or an issue with API documentation; but according to the [API documentation](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoder.convert?view=net-6.0), \"`GetBytes` will throw an exception if the output buffer isn\u0027t large enough, but `Convert` will fill as much space as possible and return the chars read and bytes written.\" In reality, `System.ArgumentException`s are thrown anytime the `System.Span\u003cbyte\u003e` parameter has length smaller than the amount necessary to contain the first encoded \"unit\" (e.g., Unicode scalar value).\r\n\r\n### Reproduction Steps\r\n\r\n```csharp\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nnamespace Bug {\r\n    static class Program {\r\n        static void Main() {\r\n            try {\r\n                UTF8Example();\r\n            } catch (ArgumentException ex) {\r\n                // Displays \"The output byte buffer is too small to contain the encoded data, encoding \u0027Unicode (UTF-8)\u0027 fallback \u0027System.Text.EncoderExceptionFallback\u0027. (Parameter \u0027bytes\u0027).\"\r\n                Console.WriteLine(ex.Message);\r\n            }\r\n            try {\r\n                UTF16LEExample();\r\n            } catch (ArgumentException ex) {\r\n                // Displays \"The output byte buffer is too small to contain the encoded data, encoding \u0027Unicode\u0027 fallback \u0027System.Text.EncoderExceptionFallback\u0027. (Parameter \u0027bytes\u0027).\"\r\n                Console.WriteLine(ex.Message);\r\n            }\r\n        }\r\n        static void UTF8Example() =\u003e new UTF8Encoding(false, true).GetEncoder().Convert(\"ࠀ\".AsSpan(), stackalloc byte[2], false, out var charsUsed, out var bytesUsed, out var completed);\r\n        // Slightly different example than above in that the UTF16-LE encoder first buffers internally a high surrogate Unicode code point.\r\n        // Then when it gets a low surrogate Unicode code point but the System.Span\u003cbyte\u003e parameter is too small to contain the sequence of bytes corresponding to the Unicode scalar value made up of the surrogate pair, it throws the System.ArgumentException.\r\n        static void UTF16LEExample() {\r\n\r\n            var utf16 = new UnicodeEncoding(false, false, true).GetEncoder();\r\n            int charsUsed;\r\n            int bytesUsed;\r\n            bool completed;\r\n            utf16.Convert(((char)0xD800).ToString().AsSpan(), Span\u003cbyte\u003e.Empty, false, out charsUsed, out bytesUsed, out completed);\r\n            Trace.Assert(charsUsed == 1 \u0026\u0026 bytesUsed == 0 \u0026\u0026 completed);\r\n            utf16.Convert(((char)0xDC00).ToString().AsSpan(), stackalloc byte[2], false, out charsUsed, out bytesUsed, out completed);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\n`System.Exception`s not be thrown, but instead the variables `charsUsed`, `bytesUsed`, and `completed` to be assigned the values `0`, `0`, and `true` respectively as well as the temporary `System.Span\u003cbyte\u003e` variables to have no data written to them. With those values I would know to increase the lengths of the`System.Span\u003cbyte\u003e`s since the `System.ReadOnlySpan\u003cchar\u003e`s had positive lengths but both `charsUsed` variables were `0`.\r\n\r\n### Actual behavior\r\n\r\n`System.ArgumentException`s are thrown with the messages `The output byte buffer is too small to contain the encoded data, encoding \u0027Unicode (UTF-8)\u0027 fallback \u0027System.Text.EncoderExceptionFallback\u0027. (Parameter \u0027bytes\u0027)` and `The output byte buffer is too small to contain the encoded data, encoding \u0027Unicode\u0027 fallback \u0027System.Text.EncoderExceptionFallback\u0027. (Parameter \u0027bytes\u0027)`.\r\n\r\n### Regression?\r\n\r\nI don\u0027t believe this worked with previous .NET versions. I have verified that .NET 5 and .NET Framework 4.7.2 also have this issue.\r\n\r\n### Known Workarounds\r\n\r\nCatch the `System.ArgumentException`s or use `GetByteCount` first to allocate the proper sizes.\r\n\r\n### Configuration\r\n\r\n.NET versions: .NET 6, .NET 5, and .NET Framework 4.7.2\r\nOS: Windows 10\r\nCPU architecture: x64\r\nI highly doubt the configuration matters.\r\n\r\n### Other information\r\n\r\nEither `Convert` should work in the event no bytes are written to the `System.Span\u003cbyte\u003e` parameter or the API documentation should be amended stating that `System.ArgumentException`s can be thrown in the event the `System.Span\u003cbyte\u003e` parameter has length smaller than the amount necessary to contain the first encoded \"unit\" (e.g., Unicode scalar value).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPDf7OQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48KZdl",
                                           "createdAt":  "2022-01-10T21:25:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-01-10T21:25:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Kh8g",
                                           "createdAt":  "2022-01-10T22:12:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encoding, @tarekgh\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nNot sure if this is a bug or an issue with API documentation; but according to the [API documentation](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoder.convert?view=net-6.0), \"`GetBytes` will throw an exception if the output buffer isn\u0027t large enough, but `Convert` will fill as much space as possible and return the chars read and bytes written.\" In reality, `System.ArgumentException`s are thrown anytime 0 bytes are able to be written to the `System.Span\u003cbyte\u003e` parameter despite the `System.ReadOnlySpan\u003cchar\u003e` having a positive length.\n\n### Reproduction Steps\n\n```csharp\r\nusing System;\r\nusing System.Text;\r\n\r\nnamespace Bug {\r\n    static class Program {\r\n        // This throws a System.ArgumentException with the message \"The output byte buffer is too small to contain the encoded data, encoding \u0027Unicode (UTF-8)\u0027 fallback \u0027System.Text.EncoderExceptionFallback\u0027. (Parameter \u0027bytes\u0027).\"\r\n        static void Main() =\u003e new UTF8Encoding(false, true).GetEncoder().Convert(\"ࠀ\".AsSpan(), stackalloc byte[2], false, out var charsUsed, out var bytesUsed, out var completed);\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\nFor a `System.Exception` not to be thrown, but instead the variables `charsUsed`, `bytesUsed`, and `completed` to be assigned the values `0`, `0`, and `true` respectively as well as the temporary `System.Span\u003cbyte\u003e` variable to have no data written to it. With those values I would know to increase the the `System.Span\u003cbyte\u003e` length since the `System.ReadOnlySpan\u003cchar\u003e` had positive length but `charsUsed` was `0`.\n\n### Actual behavior\n\nA `System.ArgumentException` is thrown with the message `The output byte buffer is too small to contain the encoded data, encoding \u0027Unicode (UTF-8)\u0027 fallback \u0027System.Text.EncoderExceptionFallback\u0027. (Parameter \u0027bytes\u0027)`.\n\n### Regression?\n\nI don\u0027t believe this worked with previous .NET versions. I have verified that .NET 5 and .NET Framework 4.7.2 also have this issue.\n\n### Known Workarounds\n\nCatch the `System.ArgumentException` or use `GetByteCount` first to allocate the proper size.\n\n### Configuration\n\n.NET versions: .NET 6, .NET 5, and .NET Framework 4.7.2\r\nOS: Windows 10\r\nCPU architecture: x64\r\nI highly doubt the configuration matters.\n\n### Other information\n\nEither `Convert` should work in the event no bytes are written to the `System.Span\u003cbyte\u003e` parameter or the API documentation should be amended stating that `System.ArgumentException`s can be thrown in the event the `System.Span\u003cbyte\u003e` parameter has no bytes written to it despite the `System.ReadOnlySpan\u003cchar\u003e` having positive length.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ezacknewman\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Encoding`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-10T22:12:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48N_s5",
                                           "createdAt":  "2022-01-11T19:42:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "It looks the problem is in the code \r\n\r\nhttps://github.com/dotnet/runtime/blob/64f48857a6193a81faa32825cc78d7340a3ebd46/src/libraries/System.Private.CoreLib/src/System/Text/Encoding.Internal.cs#L626\r\n\r\nwhich jump to the `finish` even without trying the encoder at all. The issue is the source buffer is decoded correctly in `Rune.DecodeFromUtf16(chars, out Rune firstScalarValue, out int charsConsumedThisIteration)` but couldn\u0027t write the result to the output bytes buffer because it is not big enough in `EncodeRune(firstScalarValue, bytes, out _)`. At that time I think we should try to call the encoder to initialize the state of the encoding there and not just throw in the following line:\r\n\r\nhttps://github.com/dotnet/runtime/blob/64f48857a6193a81faa32825cc78d7340a3ebd46/src/libraries/System.Private.CoreLib/src/System/Text/Encoding.Internal.cs#L683",
                                           "updatedAt":  "2022-01-11T19:44:22Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Bug in the Convert functions defined on various System.Text.Encoders",
        "labels":  [
                       "area-System.Text.Encoding"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63605",
        "createdAt":  "2022-01-11T01:09:33Z",
        "number":  63605,
        "author":  "zacknewman",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-02T08:45:16Z",
        "body":  "### Description\n\nNot sure if this a bug or a mistake in the API documentation; but per the [API documentation](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.webname?view=net-6.0), \"`WebName` returns an IANA-registered name for the encoding\"; however [IANA](https://www.iana.org/assignments/character-sets/character-sets.xhtml) cites [RFC 2781](https://www.rfc-editor.org/rfc/rfc2781.html) for the the proper names for UTF-16 encodings and [Unicode Standard Annex #19](https://www.unicode.org/reports/tr19/tr19-9.html) for the proper names for UTF-32 encodings. Both resources require a BOM to be used if and only if \"le\" and \"be\" are omitted in the name.\n\n### Reproduction Steps\n\n```csharp\r\nusing System;\r\nusing System.Text;\r\n\r\nnamespace Bug {\r\n    static class Program {\r\n        static void Main() {\r\n            // Displays \"utf-16\"; but since we don\u0027t include a BOM, it MUST display \"utf-16le\" per RFC 2781 Section 3.3.\r\n            Console.WriteLine(new UnicodeEncoding(false, false, true).WebName);\r\n            // Displays \"utf-16BE\"; but since we include a BOM, it MUST display \"utf-16\" per RFC 2781 Section 3.3.\r\n            Console.WriteLine(new UnicodeEncoding(true, true, true).WebName);\r\n            // Displays \"utf-32\"; but since we don\u0027t include a BOM, it MUST display \"utf-32le\" per UAX #19.\r\n            Console.WriteLine(new UTF32Encoding(false, false, true).WebName);\r\n            // Displays \"utf-32BE\"; but since we include a BOM, it MUST display \"utf-32\" per UAX #19.\r\n            Console.WriteLine(new UTF32Encoding(true, true, true).WebName);\r\n        }\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\n`new System.Text.UnicodeEncoding(false, false, true).WebName` to equal `utf-16le`, `new System.Text.UnicodeEncoding(true, true, true).WebName` to equal `utf-16`, `new System.Text.UTF32Encoding(false, false, true).WebName` to equal `utf-32le`, and `new System.Text.UTF32Encoding(true, true, true).WebName` to equal `utf-32`.\n\n### Actual behavior\n\n`System.Text.UnicodeEncoding` always returns `utf-16` when little-endian regardless of the BOM `bool`, `System.Text.UnicodeEncoding` always returns `utf-16BE` when big-endian regardless of the BOM `bool`, `System.Text.UTF32Encoding` always returns `utf-32` when little-endian regardless of the BOM `bool`, and `System.Text.UTF32Encoding` always returns `utf-32BE` when big-endian regardless of the BOM `bool`.\n\n### Regression?\n\nI don\u0027t believe this worked with previous .NET versions. I have verified that .NET 5 and .NET Framework 4.7.2 also have this issue.\n\n### Known Workarounds\n\nWhen the `System.Text.Encoding` is known ahead of time, hardcode the proper value yourself. In the event the actual `System.Text.Encoding` is not known, use reflection to test if the runtime type is one of these types as well as call `GetPreamble()` and test if it\u0027s empty.\n\n### Configuration\n\n.NET versions: .NET 6, .NET 5, and .NET Framework 4.7.2\r\nOS: Windows 10\r\nCPU architecture: x64\r\nI highly doubt the configuration matters.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPCvjSw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48K-NL",
                                           "createdAt":  "2022-01-11T01:09:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encoding, @tarekgh\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nNot sure if this a bug or a mistake in the API documentation; but per the [API documentation](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.webname?view=net-6.0), \"`WebName` returns an IANA-registered name for the encoding\"; however [IANA](https://www.iana.org/assignments/character-sets/character-sets.xhtml) cites [RFC 2781](https://www.rfc-editor.org/rfc/rfc2781.html) for the the proper names for UTF-16 encodings and [Unicode Standard Annex #19](https://www.unicode.org/reports/tr19/tr19-9.html) for the proper names for UTF-32 encodings. Both resources require a BOM to be used if and only if \"le\" and \"be\" are omitted in the name.\n\n### Reproduction Steps\n\n```csharp\r\nusing System;\r\nusing System.Text;\r\n\r\nnamespace Bug {\r\n    static class Program {\r\n        static void Main() {\r\n            // Displays \"utf-16\"; but since we don\u0027t include a BOM, it MUST display \"utf-16le\" per RFC 2781 Section 3.3.\r\n            Console.WriteLine(new UnicodeEncoding(false, false, true).WebName);\r\n            // Displays \"utf-16BE\"; but since we include a BOM, it MUST display \"utf-16\" per RFC 2781 Section 3.3.\r\n            Console.WriteLine(new UnicodeEncoding(true, true, true).WebName);\r\n            // Displays \"utf-32\"; but since we don\u0027t include a BOM, it MUST display \"utf-32le\" per UAX #19.\r\n            Console.WriteLine(new UTF32Encoding(false, false, true).WebName);\r\n            // Displays \"utf-32BE\"; but since we include a BOM, it MUST display \"utf-32\" per UAX #19.\r\n            Console.WriteLine(new UTF32Encoding(true, true, true).WebName);\r\n        }\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\n`new System.Text.UnicodeEncoding(false, false, true).WebName` to equal `utf-16le`, `new System.Text.UnicodeEncoding(true, true, true).WebName` to equal `utf-16`, `new System.Text.UTF32Encoding(false, false, true).WebName` to equal `utf-32le`, and `new System.Text.UTF32Encoding(true, true, true).WebName` to equal `utf-32`.\n\n### Actual behavior\n\n`System.Text.UnicodeEncoding` always returns `utf-16` when little-endian regardless of the BOM `bool`, `System.Text.UnicodeEncoding` always returns `utf-16BE` when big-endian regardless of the BOM `bool`, `System.Text.UTF32Encoding` always returns `utf-32` when little-endian regardless of the BOM `bool`, and `System.Text.UTF32Encoding` always returns `utf-32BE` when big-endian regardless of the BOM `bool`.\n\n### Regression?\n\nI don\u0027t believe this worked with previous .NET versions. I have verified that .NET 5 and .NET Framework 4.7.2 also have this issue.\n\n### Known Workarounds\n\nWhen the `System.Text.Encoding` is known ahead of time, hardcode the proper value yourself. In the event the actual `System.Text.Encoding` is not known, use reflection to test if the runtime type is one of these types as well as call `GetPreamble()` and test if it\u0027s empty.\n\n### Configuration\n\n.NET versions: .NET 6, .NET 5, and .NET Framework 4.7.2\r\nOS: Windows 10\r\nCPU architecture: x64\r\nI highly doubt the configuration matters.\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ezacknewman\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Encoding`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-11T01:09:37Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "System.Text.Encoding.WebName is wrong for System.Text.UnicodeEncoding and System.Text.UTF32Encoding",
        "labels":  [
                       "area-System.Text.Encoding"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70573",
        "createdAt":  "2022-06-10T16:53:42Z",
        "number":  70573,
        "author":  "Santosh-Kathare3",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-11T01:51:43Z",
        "body":  "### Description\r\n\r\nI have set of bytes (binary) which represents JIS X 0212 characters. When I use csISO2022JP encoder from microsoft, it doesn\u0027t give right characters from this code page, it rather falls back to JIS X 0208 codepage. This use case doesn\u0027t even work for EUC-JP encoding. So basically microsoft encoders doesn\u0027t work for JIS X 0212 character table.\r\n\r\n\r\n\r\n### Reproduction Steps\r\n\r\nattached the program.zip file which has the sample to reproduce the issue\r\n\r\n### Expected behavior\r\n\r\nmicrosoft documentation (https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding?view=net-6.0) says JIS x 0212 is supported by EUC-JP code page, but this returns ASCII bytes after encoding\r\n\r\n\u003chtml\u003e\r\n\u003cbody\u003e\r\n\u003c!--StartFragment--\u003e\r\n\r\n20932 | EUC-JP | Japanese (JIS 0208-1990 and 0212-1990)\r\n-- | -- | --\r\n\r\n\r\n\u003c!--EndFragment--\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n\r\nEven csISO2022JP, iso-2022-jp doesn\u0027t encode the JIS X 0212 characters correctly.\r\nIt should return the characters from the JIS X 0212 table and not from other character tables randomly.\r\n\r\nsample code attached:\r\n\r\n```C#\r\nusing System;\r\nusing System.Text;\r\n\r\npublic class SamplesEncoding\r\n{\r\n    private static unsafe string TranslateByteArrayToString(\r\n        byte[] bytes,\r\n        int offset,\r\n        int length,\r\n        Encoding encoding\r\n    )\r\n    {\r\n        string s = null;\r\n        try {\r\n            fixed (byte* b = bytes) {\r\n                s = new string((sbyte*)b, offset, length, encoding);\r\n            }\r\n        } catch (ArgumentException) {\r\n        }\r\n        return s;\r\n    }\r\n    public static void Main() {\r\n\r\n\t      Encoding csISOJP = Encoding.GetEncoding(\"csISO2022JP\", new EncoderReplacementFallback(),\r\n\t      new DecoderReplacementFallback());\r\n\t      Encoding eucJP = Encoding.GetEncoding(\"EUC-JP\", new EncoderReplacementFallback(),\r\n\t          new DecoderReplacementFallback());\r\n\t      Encoding cs_iso_JP = Encoding.GetEncoding(\"iso-2022-jp\", new EncoderReplacementFallback(),\r\n\t          new DecoderReplacementFallback());\r\n\t          // Refer link for japanese JIS X 0212 code page \r\n\t      // https://www.asahi-net.or.jp/~ax2s-kmtn/ref/jisx0212/index.html\r\n\t      // character bytes 6d2d represents 鼙\r\n\t      // character bytes 6d2e represents 鼚\r\n\t      // character bytes 6d2f represents 鼛\r\n\t      // character bytes 6d30 represents 鼟\r\n\t  \r\n\t      string expectedJapaneseAlphabets = \"鼙鼚鼛鼟\";\r\n\t      var dicomStream =\r\n\t          new byte[] {\r\n\t              0x50 ,0x69 ,0x72 ,0x61 ,0x61 ,0x74 ,0x5E ,0x1B ,0x24 ,0x28 ,0x44 ,0x6D ,0x2D ,0x1B ,0x2D ,0x41 ,0x20 ,0x1B ,\r\n\t              0x24 ,0x28 ,0x44 ,0x6D ,0x2E ,0x1B ,0x2D ,0x41 ,0x20 ,0x1B ,0x24 ,0x28 ,0x44 ,0x6D ,0x2F ,0x1B ,0x2D ,0x41 ,\r\n\t              0x20 ,0x1B ,0x24 ,0x28 ,0x44 ,0x6D ,0x30 ,0x1B ,0x2D ,0x41 ,0x5E,0x5E,0x5E\r\n\t          };\r\n\t      // following code will try to encode 0x1b 0x24 0x28 0x44 (escape sequence for japanese JIS X 0212 character) 0x6D 0x2D (japanese)\r\n\t      // we end up getting character from JIS X 208 table: \"蹲\" which has 0x6D2D byte sequence which is completely wrong \r\n\t      var converted1 = TranslateByteArrayToString(dicomStream, 7, 6, csISOJP);\r\n\t      var converted2 = TranslateByteArrayToString(dicomStream, 7, 6, eucJP);\r\n\t      var converted3 = TranslateByteArrayToString(dicomStream, 7, 6, cs_iso_JP);\r\n\t      Console.OutputEncoding = Encoding.UTF8;\r\n\t      Console.WriteLine(\"Expected japanese character is 鼙 but encoder returned :\" + converted1);\r\n\t      Console.ReadKey();\r\n    }\r\n}\r\n```\r\n[sample program.zip](https://github.com/dotnet/runtime/files/8880667/sample.program.zip)\r\n\r\n### Actual behavior\r\n\r\nMicrosoft encoders doesnt have JIS X 0212 table and it randomly selects something from JIS x 0208 table which is completely wrong\r\ncomment in github code which clearly says its doing it wrong, (https://github.com/dotnet/runtime/blob/f7a32c0418e083e781b25934e205b3cb1f2dca61/src/libraries/System.Text.Encoding.CodePages/src/System/Text/ISO2022Encoding.cs) \r\n   // Make sure we\u0027re in the right mode (JIS 0208 or JIS 0212)\r\n   // Note: Right now we don\u0027t use JIS 0212.  Also this table would be wrong\r\n\r\nDont know why its done wrongly instead of returning ? (fallback characters)\r\n (see sample code above to reproduce the issue)\r\n\r\n### Regression?\r\n\r\nthis doesnt work anywhere as per microsoft code comment says\r\nhttps://github.com/dotnet/runtime/blob/f7a32c0418e083e781b25934e205b3cb1f2dca61/src/libraries/System.Text.Encoding.CodePages/src/System/Text/ISO2022Encoding.cs :\r\n// Make sure we\u0027re in the right mode (JIS 0208 or JIS 0212) \r\n   // Note: Right now we don\u0027t use JIS 0212.  Also this table would be wrong\r\n\r\n### Known Workarounds\r\n\r\nnone\r\n\r\n### Configuration\r\n\r\ni tried it in .net framework 4.8 and 4.7.2, observed same behavior\r\n\r\n### Other information\r\n\r\nMicrosoft code page doesnt load JIS X 0212 table currently",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORLKYPw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Espg_",
                                           "createdAt":  "2022-06-10T16:53:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encoding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI have set of bytes (binary) which represents JIS X 0212 characters. When I use csISO2022JP encoder from microsoft, it doesn\u0027t give right characters from this code page, it rather falls back to JIS X 0208 codepage. This use case doesn\u0027t even work for EUC-JP encoding. So basically microsoft encoders doesn\u0027t work for JIS X 0212 character table.\r\n\r\n\n\n### Reproduction Steps\n\nattached the program.zip file which has the sample to reproduce the issue\n\n### Expected behavior\n\nmicrosoft documentation (https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding?view=net-6.0) says JIS x 0212 is supported by EUC-JP code page, but this returns ASCII bytes after encoding\r\n\r\n\u003chtml\u003e\r\n\u003cbody\u003e\r\n\u003c!--StartFragment--\u003e\r\n\r\n20932 | EUC-JP | Japanese (JIS 0208-1990 and 0212-1990)\r\n-- | -- | --\r\n\r\n\r\n\u003c!--EndFragment--\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n\r\nEven csISO2022JP, iso-2022-jp doesn\u0027t encode the JIS X 0212 characters correctly.\r\nIt should return the characters from the JIS X 0212 table and not from other character tables randomly.\r\n\r\nsample code attached:\r\nusing System;\r\nusing System.Text;\r\n\r\npublic class SamplesEncoding\r\n{\r\n    private static unsafe string TranslateByteArrayToString(\r\n        byte[] bytes,\r\n        int offset,\r\n        int length,\r\n        Encoding encoding\r\n    )\r\n    {\r\n        string s = null;\r\n        try {\r\n            fixed (byte* b = bytes) {\r\n                s = new string((sbyte*)b, offset, length, encoding);\r\n            }\r\n        } catch (ArgumentException) {\r\n        }\r\n        return s;\r\n    }\r\n    public static void Main() {\r\n\r\n    Encoding csISOJP = Encoding.GetEncoding(\"csISO2022JP\", new EncoderReplacementFallback(),\r\n    new DecoderReplacementFallback());\r\n    Encoding eucJP = Encoding.GetEncoding(\"EUC-JP\", new EncoderReplacementFallback(),\r\n        new DecoderReplacementFallback());\r\n    Encoding cs_iso_JP = Encoding.GetEncoding(\"iso-2022-jp\", new EncoderReplacementFallback(),\r\n        new DecoderReplacementFallback());\r\n        // Refer link for japanese JIS X 0212 code page \r\n    // https://www.asahi-net.or.jp/~ax2s-kmtn/ref/jisx0212/index.html\r\n    // character bytes 6d2d represents 鼙\r\n    // character bytes 6d2e represents 鼚\r\n    // character bytes 6d2f represents 鼛\r\n    // character bytes 6d30 represents 鼟\r\n\r\n    string expectedJapaneseAlphabets = \"鼙鼚鼛鼟\";\r\n    var dicomStream =\r\n        new byte[] {\r\n            0x50 ,0x69 ,0x72 ,0x61 ,0x61 ,0x74 ,0x5E ,0x1B ,0x24 ,0x28 ,0x44 ,0x6D ,0x2D ,0x1B ,0x2D ,0x41 ,0x20 ,0x1B ,\r\n            0x24 ,0x28 ,0x44 ,0x6D ,0x2E ,0x1B ,0x2D ,0x41 ,0x20 ,0x1B ,0x24 ,0x28 ,0x44 ,0x6D ,0x2F ,0x1B ,0x2D ,0x41 ,\r\n            0x20 ,0x1B ,0x24 ,0x28 ,0x44 ,0x6D ,0x30 ,0x1B ,0x2D ,0x41 ,0x5E,0x5E,0x5E\r\n        };\r\n    // following code will try to encode 0x1b 0x24 0x28 0x44 (escape sequence for japanese JIS X 0212 character) 0x6D 0x2D (japanese)\r\n    // we end up getting character from JIS X 208 table: \"蹲\" which has 0x6D2D byte sequence which is completely wrong \r\n    var converted1 = TranslateByteArrayToString(dicomStream, 7, 6, csISOJP);\r\n    var converted2 = TranslateByteArrayToString(dicomStream, 7, 6, eucJP);\r\n    var converted3 = TranslateByteArrayToString(dicomStream, 7, 6, cs_iso_JP);\r\n    Console.OutputEncoding = Encoding.UTF8;\r\n    Console.WriteLine(\"Expected japanese character is 鼙 but encoder returned :\" + converted1);\r\n    Console.ReadKey();\r\n\r\n    }\r\n[sample program.zip](https://github.com/dotnet/runtime/files/8880667/sample.program.zip)\r\n}\n\n### Actual behavior\n\nMicrosoft encoders doesnt have JIS X 0212 table and it randomly selects something from JIS x 0208 table which is completely wrong\r\ncomment in github code which clearly says its doing it wrong, (https://github.com/dotnet/runtime/blob/f7a32c0418e083e781b25934e205b3cb1f2dca61/src/libraries/System.Text.Encoding.CodePages/src/System/Text/ISO2022Encoding.cs) \r\n   // Make sure we\u0027re in the right mode (JIS 0208 or JIS 0212)\r\n   // Note: Right now we don\u0027t use JIS 0212.  Also this table would be wrong\r\n\r\nDont know why its done wrongly instead of returning ? (fallback characters)\r\n (see sample code above to reproduce the issue)\n\n### Regression?\n\nthis doesnt work anywhere as per microsoft code comment says\r\nhttps://github.com/dotnet/runtime/blob/f7a32c0418e083e781b25934e205b3cb1f2dca61/src/libraries/System.Text.Encoding.CodePages/src/System/Text/ISO2022Encoding.cs :\r\n// Make sure we\u0027re in the right mode (JIS 0208 or JIS 0212) \r\n   // Note: Right now we don\u0027t use JIS 0212.  Also this table would be wrong\n\n### Known Workarounds\n\nnone\n\n### Configuration\n\ni tried it in .net framework 4.8 and 4.7.2, observed same behavior\n\n### Other information\n\nMicrosoft code page doesnt load JIS X 0212 table currently\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eSantosh-Kathare3\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Encoding`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-10T16:53:53Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "csISO2022JP/EUC-JP encoding doesn\u0027t return JIS X 0212 characters ",
        "labels":  [
                       "area-System.Text.Encoding"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77544",
        "createdAt":  "2022-10-27T09:10:27Z",
        "number":  77544,
        "author":  "performanceautofiler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-22T01:41:39Z",
        "body":  "### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | ubuntu 20.04\r\nBaseline | [5108757b997c59ab8ba1fc5309ab0d4e730e2b77](https://github.com/dotnet/runtime/commit/5108757b997c59ab8ba1fc5309ab0d4e730e2b77)\r\nCompare | [ecf677d2a596b537a6b237e51a65c5a718a4dbc7](https://github.com/dotnet/runtime/commit/ecf677d2a596b537a6b237e51a65c5a718a4dbc7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/5108757b997c59ab8ba1fc5309ab0d4e730e2b77...ecf677d2a596b537a6b237e51a65c5a718a4dbc7)\r\n\r\n\r\n### Regressions in System.Text.Json.Tests.Perf_Basic\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[WriteBasicUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Basic.WriteBasicUtf16(Formatted%3a%20True%2c%20SkipValidation%3a%20True%2c%20DataSize%3a%2010).html\u003e) | 979.36 ns | 1.03 μs | 1.06 | 0.00 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Basic_1.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Basic.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Text.Json.Tests.Perf_Basic*\u0027\r\n```\r\n\r\n### Related Issues\r\n\r\n#### Regressions\r\n\r\n* [[Perf] Windows/arm64: 2 Regressions on 10/25/2022 1:30:53 PM](\u003chttps://github.com/dotnet/runtime/issues/77551\u003e)\r\n#### Improvements\r\n\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3cb34cf-303d-4bda-a273-87bf694185551c5285423dc425187/dd739d27-fc0f-4468-8fcd-1685e7b5e0c9.zip?sv=2021-08-06\u0026se=2022-11-24T05%3A26%3A55Z\u0026sr=c\u0026sp=rl\u0026sig=C7c9Rn8CL%2Fsj%2BXQ4O41vd19wtaycH7qcrkLZNia%2BjyU%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-9fc9f66c-f26c-4072-a94a-da6edfd21c83c8f713f783f4cee8b/e9ad679d-0a29-435d-aad8-f2afd0af686f.zip?sv=2021-08-06\u0026se=2022-11-24T19%3A44%3A11Z\u0026sr=c\u0026sp=rl\u0026sig=M3noMVd2L2SdZPLLiNIdxXyag0l243ATqAneKoyQSgU%3D\u003e)\r\n### Histogram\r\n\r\n### Edge Detector Info\r\n\r\n[Collection Data](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/reports/10_27_2022/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Basic.WriteBasicUtf16(Formatted- True, SkipValidation- True, DataSize- 10).txt?sv=2018-03-28\u0026sr=c\u0026sig=JoytaT70%2ByX0ce090BDZwAg8TDntVqLeANIlSNxVryw%3D\u0026se=2022-11-24T00%3A17%3A57Z\u0026sp=racwdl\u003e)\r\n#### System.Text.Json.Tests.Perf_Basic.WriteBasicUtf16(Formatted: True, SkipValidation: True, DataSize: 10)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionWindowed: Marked as regression because 1.0336284474718538 \u003e 1027.8616268539915.\r\nIsChangePoint: Marked as a change because one of 9/23/2022 2:49:56 PM, 10/7/2022 4:12:34 PM, 10/25/2022 8:54:59 AM, 10/27/2022 12:34:03 AM falls between 10/18/2022 9:26:37 AM and 10/27/2022 12:34:03 AM.\r\nIsRegressionStdDev: Marked as regression because -61.40601114385213 (T) = (0 -1035.1884216418835) / Math.Sqrt((3.2161243834611812 / (31)) + (4.95623426113491 / (7))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (31) + (7) - 2, .025) and -0.05646311540247545 = (979.8623411925867 - 1035.1884216418835) / 979.8623411925867 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | ubuntu 20.04\r\nBaseline | [5108757b997c59ab8ba1fc5309ab0d4e730e2b77](https://github.com/dotnet/runtime/commit/5108757b997c59ab8ba1fc5309ab0d4e730e2b77)\r\nCompare | [ecf677d2a596b537a6b237e51a65c5a718a4dbc7](https://github.com/dotnet/runtime/commit/ecf677d2a596b537a6b237e51a65c5a718a4dbc7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/5108757b997c59ab8ba1fc5309ab0d4e730e2b77...ecf677d2a596b537a6b237e51a65c5a718a4dbc7)\r\n\r\n\r\n### Regressions in System.Text.Json.Tests.Perf_Deep\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[WriteDeepUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted%3a%20False%2c%20SkipValidation%3a%20False).html\u003e) | 5.36 ms | 5.93 ms | 1.11 | 0.00 | False | | |\r\n[WriteDeepUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf8(Formatted%3a%20False%2c%20SkipValidation%3a%20True).html\u003e) | 5.07 ms | 5.64 ms | 1.11 | 0.00 | False | | |\r\n[WriteDeepUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf8(Formatted%3a%20False%2c%20SkipValidation%3a%20False).html\u003e) | 5.37 ms | 5.90 ms | 1.10 | 0.00 | False | | |\r\n[WriteDeepUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted%3a%20False%2c%20SkipValidation%3a%20True).html\u003e) | 5.07 ms | 5.62 ms | 1.11 | 0.00 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Deep_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Deep_2.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Deep_3.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Deep_4.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Deep.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Text.Json.Tests.Perf_Deep*\u0027\r\n```\r\n\r\n### Related Issues\r\n\r\n#### Regressions\r\n\r\n* [[Perf] Windows/arm64: 2 Regressions on 10/25/2022 1:30:53 PM](\u003chttps://github.com/dotnet/runtime/issues/77551\u003e)\r\n#### Improvements\r\n\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3cb34cf-303d-4bda-a273-87bf694185551c5285423dc425187/dd739d27-fc0f-4468-8fcd-1685e7b5e0c9.zip?sv=2021-08-06\u0026se=2022-11-24T05%3A26%3A55Z\u0026sr=c\u0026sp=rl\u0026sig=C7c9Rn8CL%2Fsj%2BXQ4O41vd19wtaycH7qcrkLZNia%2BjyU%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-9fc9f66c-f26c-4072-a94a-da6edfd21c83c8f713f783f4cee8b/e9ad679d-0a29-435d-aad8-f2afd0af686f.zip?sv=2021-08-06\u0026se=2022-11-24T19%3A44%3A11Z\u0026sr=c\u0026sp=rl\u0026sig=M3noMVd2L2SdZPLLiNIdxXyag0l243ATqAneKoyQSgU%3D\u003e)\r\n### Histogram\r\n\r\n### Edge Detector Info\r\n\r\n[Collection Data](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/reports/10_27_2022/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted- False, SkipValidation- True).txt?sv=2018-03-28\u0026sr=c\u0026sig=JoytaT70%2ByX0ce090BDZwAg8TDntVqLeANIlSNxVryw%3D\u0026se=2022-11-24T00%3A17%3A57Z\u0026sp=racwdl\u003e)\r\n#### System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted: False, SkipValidation: False)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionWindowed: Marked as regression because 5.932006456910569 \u003e 5.636536617917875.\r\nIsChangePoint: Marked as a change because one of 9/23/2022 2:49:56 PM, 10/25/2022 8:54:59 AM, 10/27/2022 12:34:03 AM falls between 10/18/2022 9:26:37 AM and 10/27/2022 12:34:03 AM.\r\nIsRegressionStdDev: Marked as regression because -103.09702837645301 (T) = (0 -5911444.991333167) / Math.Sqrt((219653226.93222767 / (31)) + (139476596.74883065 / (7))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (31) + (7) - 2, .025) and -0.09967486253079402 = (5375629.827282362 - 5911444.991333167) / 5375629.827282362 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.Text.Json.Tests.Perf_Deep.WriteDeepUtf8(Formatted: False, SkipValidation: True)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionWindowed: Marked as regression because 5.63593612868217 \u003e 5.3247345794270835.\r\nIsChangePoint: Marked as a change because one of 9/23/2022 6:26:22 PM, 10/25/2022 8:54:59 AM, 10/27/2022 12:34:03 AM falls between 10/18/2022 9:26:37 AM and 10/27/2022 12:34:03 AM.\r\nIsRegressionStdDev: Marked as regression because -58.12187629480479 (T) = (0 -5593454.027599919) / Math.Sqrt((847916533.0728942 / (31)) + (378357483.8892741 / (7))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (31) + (7) - 2, .025) and -0.10345065620429936 = (5069056.77761844 - 5593454.027599919) / 5069056.77761844 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.Text.Json.Tests.Perf_Deep.WriteDeepUtf8(Formatted: False, SkipValidation: False)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionWindowed: Marked as regression because 5.897058604878049 \u003e 5.639199849111112.\r\nIsChangePoint: Marked as a change because one of 9/1/2022 1:51:24 AM, 9/23/2022 2:49:56 PM, 10/25/2022 8:54:59 AM, 10/27/2022 12:34:03 AM falls between 10/18/2022 9:26:37 AM and 10/27/2022 12:34:03 AM.\r\nIsRegressionStdDev: Marked as regression because -81.13787542026836 (T) = (0 -5896938.258186877) / Math.Sqrt((271983877.6849514 / (31)) + (240434488.6133558 / (7))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (31) + (7) - 2, .025) and -0.09932784052601532 = (5364130.735891544 - 5896938.258186877) / 5364130.735891544 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted: False, SkipValidation: True)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionWindowed: Marked as regression because 5.615225030303029 \u003e 5.326227882812501.\r\nIsChangePoint: Marked as a change because one of 9/23/2022 2:49:56 PM, 10/25/2022 8:54:59 AM, 10/27/2022 12:34:03 AM falls between 10/18/2022 9:26:37 AM and 10/27/2022 12:34:03 AM.\r\nIsRegressionStdDev: Marked as regression because -21.21429871732625 (T) = (0 -5622035.0751970345) / Math.Sqrt((138052045.11067542 / (31)) + (4619772723.853835 / (7))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (31) + (7) - 2, .025) and -0.10774484050791204 = (5075207.637725738 - 5622035.0751970345) / 5075207.637725738 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOU9LhPA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5NHZTV",
                                           "createdAt":  "2022-10-27T16:29:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-10-27T16:29:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NHZXq",
                                           "createdAt":  "2022-10-27T16:30:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "Likely caused by https://github.com/dotnet/runtime/pull/77400",
                                           "updatedAt":  "2022-10-27T16:30:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NHZoO",
                                           "createdAt":  "2022-10-27T16:31:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json, @gregsdennis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | ubuntu 20.04\r\nBaseline | [5108757b997c59ab8ba1fc5309ab0d4e730e2b77](https://github.com/dotnet/runtime/commit/5108757b997c59ab8ba1fc5309ab0d4e730e2b77)\r\nCompare | [ecf677d2a596b537a6b237e51a65c5a718a4dbc7](https://github.com/dotnet/runtime/commit/ecf677d2a596b537a6b237e51a65c5a718a4dbc7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/5108757b997c59ab8ba1fc5309ab0d4e730e2b77...ecf677d2a596b537a6b237e51a65c5a718a4dbc7)\r\n\r\n\r\n### Regressions in System.Text.Json.Tests.Perf_Basic\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[WriteBasicUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Basic.WriteBasicUtf16(Formatted%3a%20True%2c%20SkipValidation%3a%20True%2c%20DataSize%3a%2010).html\u003e) | 979.36 ns | 1.03 μs | 1.06 | 0.00 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Basic_1.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Basic.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Text.Json.Tests.Perf_Basic*\u0027\r\n```\r\n\r\n### Related Issues\r\n\r\n#### Regressions\r\n\r\n* [[Perf] Windows/arm64: 2 Regressions on 10/25/2022 1:30:53 PM](\u003chttps://github.com/dotnet/runtime/issues/77551\u003e)\r\n#### Improvements\r\n\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3cb34cf-303d-4bda-a273-87bf694185551c5285423dc425187/dd739d27-fc0f-4468-8fcd-1685e7b5e0c9.zip?sv=2021-08-06\u0026se=2022-11-24T05%3A26%3A55Z\u0026sr=c\u0026sp=rl\u0026sig=C7c9Rn8CL%2Fsj%2BXQ4O41vd19wtaycH7qcrkLZNia%2BjyU%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-9fc9f66c-f26c-4072-a94a-da6edfd21c83c8f713f783f4cee8b/e9ad679d-0a29-435d-aad8-f2afd0af686f.zip?sv=2021-08-06\u0026se=2022-11-24T19%3A44%3A11Z\u0026sr=c\u0026sp=rl\u0026sig=M3noMVd2L2SdZPLLiNIdxXyag0l243ATqAneKoyQSgU%3D\u003e)\r\n### Histogram\r\n\r\n### Edge Detector Info\r\n\r\n[Collection Data](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/reports/10_27_2022/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Basic.WriteBasicUtf16(Formatted- True, SkipValidation- True, DataSize- 10).txt?sv=2018-03-28\u0026sr=c\u0026sig=JoytaT70%2ByX0ce090BDZwAg8TDntVqLeANIlSNxVryw%3D\u0026se=2022-11-24T00%3A17%3A57Z\u0026sp=racwdl\u003e)\r\n#### System.Text.Json.Tests.Perf_Basic.WriteBasicUtf16(Formatted: True, SkipValidation: True, DataSize: 10)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionWindowed: Marked as regression because 1.0336284474718538 \u003e 1027.8616268539915.\r\nIsChangePoint: Marked as a change because one of 9/23/2022 2:49:56 PM, 10/7/2022 4:12:34 PM, 10/25/2022 8:54:59 AM, 10/27/2022 12:34:03 AM falls between 10/18/2022 9:26:37 AM and 10/27/2022 12:34:03 AM.\r\nIsRegressionStdDev: Marked as regression because -61.40601114385213 (T) = (0 -1035.1884216418835) / Math.Sqrt((3.2161243834611812 / (31)) + (4.95623426113491 / (7))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (31) + (7) - 2, .025) and -0.05646311540247545 = (979.8623411925867 - 1035.1884216418835) / 979.8623411925867 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | ubuntu 20.04\r\nBaseline | [5108757b997c59ab8ba1fc5309ab0d4e730e2b77](https://github.com/dotnet/runtime/commit/5108757b997c59ab8ba1fc5309ab0d4e730e2b77)\r\nCompare | [ecf677d2a596b537a6b237e51a65c5a718a4dbc7](https://github.com/dotnet/runtime/commit/ecf677d2a596b537a6b237e51a65c5a718a4dbc7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/5108757b997c59ab8ba1fc5309ab0d4e730e2b77...ecf677d2a596b537a6b237e51a65c5a718a4dbc7)\r\n\r\n\r\n### Regressions in System.Text.Json.Tests.Perf_Deep\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[WriteDeepUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted%3a%20False%2c%20SkipValidation%3a%20False).html\u003e) | 5.36 ms | 5.93 ms | 1.11 | 0.00 | False | | |\r\n[WriteDeepUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf8(Formatted%3a%20False%2c%20SkipValidation%3a%20True).html\u003e) | 5.07 ms | 5.64 ms | 1.11 | 0.00 | False | | |\r\n[WriteDeepUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf8(Formatted%3a%20False%2c%20SkipValidation%3a%20False).html\u003e) | 5.37 ms | 5.90 ms | 1.10 | 0.00 | False | | |\r\n[WriteDeepUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted%3a%20False%2c%20SkipValidation%3a%20True).html\u003e) | 5.07 ms | 5.62 ms | 1.11 | 0.00 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Deep_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Deep_2.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Deep_3.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Deep_4.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Deep.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Text.Json.Tests.Perf_Deep*\u0027\r\n```\r\n\r\n### Related Issues\r\n\r\n#### Regressions\r\n\r\n* [[Perf] Windows/arm64: 2 Regressions on 10/25/2022 1:30:53 PM](\u003chttps://github.com/dotnet/runtime/issues/77551\u003e)\r\n#### Improvements\r\n\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3cb34cf-303d-4bda-a273-87bf694185551c5285423dc425187/dd739d27-fc0f-4468-8fcd-1685e7b5e0c9.zip?sv=2021-08-06\u0026se=2022-11-24T05%3A26%3A55Z\u0026sr=c\u0026sp=rl\u0026sig=C7c9Rn8CL%2Fsj%2BXQ4O41vd19wtaycH7qcrkLZNia%2BjyU%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-9fc9f66c-f26c-4072-a94a-da6edfd21c83c8f713f783f4cee8b/e9ad679d-0a29-435d-aad8-f2afd0af686f.zip?sv=2021-08-06\u0026se=2022-11-24T19%3A44%3A11Z\u0026sr=c\u0026sp=rl\u0026sig=M3noMVd2L2SdZPLLiNIdxXyag0l243ATqAneKoyQSgU%3D\u003e)\r\n### Histogram\r\n\r\n### Edge Detector Info\r\n\r\n[Collection Data](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/reports/10_27_2022/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted- False, SkipValidation- True).txt?sv=2018-03-28\u0026sr=c\u0026sig=JoytaT70%2ByX0ce090BDZwAg8TDntVqLeANIlSNxVryw%3D\u0026se=2022-11-24T00%3A17%3A57Z\u0026sp=racwdl\u003e)\r\n#### System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted: False, SkipValidation: False)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionWindowed: Marked as regression because 5.932006456910569 \u003e 5.636536617917875.\r\nIsChangePoint: Marked as a change because one of 9/23/2022 2:49:56 PM, 10/25/2022 8:54:59 AM, 10/27/2022 12:34:03 AM falls between 10/18/2022 9:26:37 AM and 10/27/2022 12:34:03 AM.\r\nIsRegressionStdDev: Marked as regression because -103.09702837645301 (T) = (0 -5911444.991333167) / Math.Sqrt((219653226.93222767 / (31)) + (139476596.74883065 / (7))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (31) + (7) - 2, .025) and -0.09967486253079402 = (5375629.827282362 - 5911444.991333167) / 5375629.827282362 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.Text.Json.Tests.Perf_Deep.WriteDeepUtf8(Formatted: False, SkipValidation: True)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionWindowed: Marked as regression because 5.63593612868217 \u003e 5.3247345794270835.\r\nIsChangePoint: Marked as a change because one of 9/23/2022 6:26:22 PM, 10/25/2022 8:54:59 AM, 10/27/2022 12:34:03 AM falls between 10/18/2022 9:26:37 AM and 10/27/2022 12:34:03 AM.\r\nIsRegressionStdDev: Marked as regression because -58.12187629480479 (T) = (0 -5593454.027599919) / Math.Sqrt((847916533.0728942 / (31)) + (378357483.8892741 / (7))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (31) + (7) - 2, .025) and -0.10345065620429936 = (5069056.77761844 - 5593454.027599919) / 5069056.77761844 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.Text.Json.Tests.Perf_Deep.WriteDeepUtf8(Formatted: False, SkipValidation: False)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionWindowed: Marked as regression because 5.897058604878049 \u003e 5.639199849111112.\r\nIsChangePoint: Marked as a change because one of 9/1/2022 1:51:24 AM, 9/23/2022 2:49:56 PM, 10/25/2022 8:54:59 AM, 10/27/2022 12:34:03 AM falls between 10/18/2022 9:26:37 AM and 10/27/2022 12:34:03 AM.\r\nIsRegressionStdDev: Marked as regression because -81.13787542026836 (T) = (0 -5896938.258186877) / Math.Sqrt((271983877.6849514 / (31)) + (240434488.6133558 / (7))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (31) + (7) - 2, .025) and -0.09932784052601532 = (5364130.735891544 - 5896938.258186877) / 5364130.735891544 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted: False, SkipValidation: True)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionWindowed: Marked as regression because 5.615225030303029 \u003e 5.326227882812501.\r\nIsChangePoint: Marked as a change because one of 9/23/2022 2:49:56 PM, 10/25/2022 8:54:59 AM, 10/27/2022 12:34:03 AM falls between 10/18/2022 9:26:37 AM and 10/27/2022 12:34:03 AM.\r\nIsRegressionStdDev: Marked as regression because -21.21429871732625 (T) = (0 -5622035.0751970345) / Math.Sqrt((138052045.11067542 / (31)) + (4619772723.853835 / (7))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (31) + (7) - 2, .025) and -0.10774484050791204 = (5075207.637725738 - 5622035.0751970345) / 5075207.637725738 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eperformanceautofiler[bot]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`, `tenet-performance`, `tenet-performance-benchmarks`, `untriaged`, `refs/heads/main`, `RunKind=micro`, `Regression`, `CoreClr`, `arm64`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-27T16:59:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NanTb",
                                           "createdAt":  "2022-11-01T16:49:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "Some improvements, for reference: \r\nhttps://github.com/dotnet/perf-autofiling-issues/issues/9403\r\nhttps://github.com/dotnet/perf-autofiling-issues/issues/9361\r\nhttps://github.com/dotnet/perf-autofiling-issues/issues/9374",
                                           "updatedAt":  "2022-11-01T16:49:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T0t-z",
                                           "createdAt":  "2023-01-27T10:47:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Judging by the impacted benchmarks this seems to be caused by [swapping out](https://github.com/dotnet/runtime/pull/77400/files#diff-263a3caca05cf3c15f2ec738bfff563be9d4d5bc81d996b4064d20837fa707d1R263) the built-in UTF-16 to UTF-8 transcoding routines with the ones in the `Utf8` class, and is primarily [impacting small strings](https://github.com/dotnet/performance/blob/feb4c43e5a18e425c00e09bbb5b1a00b303b8b96/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.Deep.cs#L47-L58). Perf changes are a mixed bag, however the [improvements are far more substantial](https://github.com/dotnet/runtime/pull/77400/files#diff-263a3caca05cf3c15f2ec738bfff563be9d4d5bc81d996b4064d20837fa707d1R263) than the regressions. I\u0027d be inclined to close the issue, but I\u0027ll leave it up to to the `System.Text` owners to make a determination on whether performance can be improved.",
                                           "updatedAt":  "2023-01-27T10:47:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T0uE8",
                                           "createdAt":  "2023-01-27T10:48:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encoding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | ubuntu 20.04\r\nBaseline | [5108757b997c59ab8ba1fc5309ab0d4e730e2b77](https://github.com/dotnet/runtime/commit/5108757b997c59ab8ba1fc5309ab0d4e730e2b77)\r\nCompare | [ecf677d2a596b537a6b237e51a65c5a718a4dbc7](https://github.com/dotnet/runtime/commit/ecf677d2a596b537a6b237e51a65c5a718a4dbc7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/5108757b997c59ab8ba1fc5309ab0d4e730e2b77...ecf677d2a596b537a6b237e51a65c5a718a4dbc7)\r\n\r\n\r\n### Regressions in System.Text.Json.Tests.Perf_Basic\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[WriteBasicUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Basic.WriteBasicUtf16(Formatted%3a%20True%2c%20SkipValidation%3a%20True%2c%20DataSize%3a%2010).html\u003e) | 979.36 ns | 1.03 μs | 1.06 | 0.00 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Basic_1.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Basic.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Text.Json.Tests.Perf_Basic*\u0027\r\n```\r\n\r\n### Related Issues\r\n\r\n#### Regressions\r\n\r\n* [[Perf] Windows/arm64: 2 Regressions on 10/25/2022 1:30:53 PM](\u003chttps://github.com/dotnet/runtime/issues/77551\u003e)\r\n#### Improvements\r\n\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3cb34cf-303d-4bda-a273-87bf694185551c5285423dc425187/dd739d27-fc0f-4468-8fcd-1685e7b5e0c9.zip?sv=2021-08-06\u0026se=2022-11-24T05%3A26%3A55Z\u0026sr=c\u0026sp=rl\u0026sig=C7c9Rn8CL%2Fsj%2BXQ4O41vd19wtaycH7qcrkLZNia%2BjyU%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-9fc9f66c-f26c-4072-a94a-da6edfd21c83c8f713f783f4cee8b/e9ad679d-0a29-435d-aad8-f2afd0af686f.zip?sv=2021-08-06\u0026se=2022-11-24T19%3A44%3A11Z\u0026sr=c\u0026sp=rl\u0026sig=M3noMVd2L2SdZPLLiNIdxXyag0l243ATqAneKoyQSgU%3D\u003e)\r\n### Histogram\r\n\r\n### Edge Detector Info\r\n\r\n[Collection Data](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/reports/10_27_2022/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Basic.WriteBasicUtf16(Formatted- True, SkipValidation- True, DataSize- 10).txt?sv=2018-03-28\u0026sr=c\u0026sig=JoytaT70%2ByX0ce090BDZwAg8TDntVqLeANIlSNxVryw%3D\u0026se=2022-11-24T00%3A17%3A57Z\u0026sp=racwdl\u003e)\r\n#### System.Text.Json.Tests.Perf_Basic.WriteBasicUtf16(Formatted: True, SkipValidation: True, DataSize: 10)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionWindowed: Marked as regression because 1.0336284474718538 \u003e 1027.8616268539915.\r\nIsChangePoint: Marked as a change because one of 9/23/2022 2:49:56 PM, 10/7/2022 4:12:34 PM, 10/25/2022 8:54:59 AM, 10/27/2022 12:34:03 AM falls between 10/18/2022 9:26:37 AM and 10/27/2022 12:34:03 AM.\r\nIsRegressionStdDev: Marked as regression because -61.40601114385213 (T) = (0 -1035.1884216418835) / Math.Sqrt((3.2161243834611812 / (31)) + (4.95623426113491 / (7))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (31) + (7) - 2, .025) and -0.05646311540247545 = (979.8623411925867 - 1035.1884216418835) / 979.8623411925867 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n### Run Information\r\n\r\nArchitecture | arm64\r\n-- | --\r\nOS | ubuntu 20.04\r\nBaseline | [5108757b997c59ab8ba1fc5309ab0d4e730e2b77](https://github.com/dotnet/runtime/commit/5108757b997c59ab8ba1fc5309ab0d4e730e2b77)\r\nCompare | [ecf677d2a596b537a6b237e51a65c5a718a4dbc7](https://github.com/dotnet/runtime/commit/ecf677d2a596b537a6b237e51a65c5a718a4dbc7)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/5108757b997c59ab8ba1fc5309ab0d4e730e2b77...ecf677d2a596b537a6b237e51a65c5a718a4dbc7)\r\n\r\n\r\n### Regressions in System.Text.Json.Tests.Perf_Deep\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[WriteDeepUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted%3a%20False%2c%20SkipValidation%3a%20False).html\u003e) | 5.36 ms | 5.93 ms | 1.11 | 0.00 | False | | |\r\n[WriteDeepUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf8(Formatted%3a%20False%2c%20SkipValidation%3a%20True).html\u003e) | 5.07 ms | 5.64 ms | 1.11 | 0.00 | False | | |\r\n[WriteDeepUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf8(Formatted%3a%20False%2c%20SkipValidation%3a%20False).html\u003e) | 5.37 ms | 5.90 ms | 1.10 | 0.00 | False | | |\r\n[WriteDeepUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted%3a%20False%2c%20SkipValidation%3a%20True).html\u003e) | 5.07 ms | 5.62 ms | 1.11 | 0.00 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Deep_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Deep_2.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Deep_3.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Deep_4.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_27_2022/refs/heads/main_arm64_ubuntu%2020.04_Regression/System.Text.Json.Tests.Perf_Deep.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Text.Json.Tests.Perf_Deep*\u0027\r\n```\r\n\r\n### Related Issues\r\n\r\n#### Regressions\r\n\r\n* [[Perf] Windows/arm64: 2 Regressions on 10/25/2022 1:30:53 PM](\u003chttps://github.com/dotnet/runtime/issues/77551\u003e)\r\n#### Improvements\r\n\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3cb34cf-303d-4bda-a273-87bf694185551c5285423dc425187/dd739d27-fc0f-4468-8fcd-1685e7b5e0c9.zip?sv=2021-08-06\u0026se=2022-11-24T05%3A26%3A55Z\u0026sr=c\u0026sp=rl\u0026sig=C7c9Rn8CL%2Fsj%2BXQ4O41vd19wtaycH7qcrkLZNia%2BjyU%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-9fc9f66c-f26c-4072-a94a-da6edfd21c83c8f713f783f4cee8b/e9ad679d-0a29-435d-aad8-f2afd0af686f.zip?sv=2021-08-06\u0026se=2022-11-24T19%3A44%3A11Z\u0026sr=c\u0026sp=rl\u0026sig=M3noMVd2L2SdZPLLiNIdxXyag0l243ATqAneKoyQSgU%3D\u003e)\r\n### Histogram\r\n\r\n### Edge Detector Info\r\n\r\n[Collection Data](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/reports/10_27_2022/refs/heads/main_arm64_ubuntu 20.04/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted- False, SkipValidation- True).txt?sv=2018-03-28\u0026sr=c\u0026sig=JoytaT70%2ByX0ce090BDZwAg8TDntVqLeANIlSNxVryw%3D\u0026se=2022-11-24T00%3A17%3A57Z\u0026sp=racwdl\u003e)\r\n#### System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted: False, SkipValidation: False)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionWindowed: Marked as regression because 5.932006456910569 \u003e 5.636536617917875.\r\nIsChangePoint: Marked as a change because one of 9/23/2022 2:49:56 PM, 10/25/2022 8:54:59 AM, 10/27/2022 12:34:03 AM falls between 10/18/2022 9:26:37 AM and 10/27/2022 12:34:03 AM.\r\nIsRegressionStdDev: Marked as regression because -103.09702837645301 (T) = (0 -5911444.991333167) / Math.Sqrt((219653226.93222767 / (31)) + (139476596.74883065 / (7))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (31) + (7) - 2, .025) and -0.09967486253079402 = (5375629.827282362 - 5911444.991333167) / 5375629.827282362 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.Text.Json.Tests.Perf_Deep.WriteDeepUtf8(Formatted: False, SkipValidation: True)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionWindowed: Marked as regression because 5.63593612868217 \u003e 5.3247345794270835.\r\nIsChangePoint: Marked as a change because one of 9/23/2022 6:26:22 PM, 10/25/2022 8:54:59 AM, 10/27/2022 12:34:03 AM falls between 10/18/2022 9:26:37 AM and 10/27/2022 12:34:03 AM.\r\nIsRegressionStdDev: Marked as regression because -58.12187629480479 (T) = (0 -5593454.027599919) / Math.Sqrt((847916533.0728942 / (31)) + (378357483.8892741 / (7))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (31) + (7) - 2, .025) and -0.10345065620429936 = (5069056.77761844 - 5593454.027599919) / 5069056.77761844 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.Text.Json.Tests.Perf_Deep.WriteDeepUtf8(Formatted: False, SkipValidation: False)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionWindowed: Marked as regression because 5.897058604878049 \u003e 5.639199849111112.\r\nIsChangePoint: Marked as a change because one of 9/1/2022 1:51:24 AM, 9/23/2022 2:49:56 PM, 10/25/2022 8:54:59 AM, 10/27/2022 12:34:03 AM falls between 10/18/2022 9:26:37 AM and 10/27/2022 12:34:03 AM.\r\nIsRegressionStdDev: Marked as regression because -81.13787542026836 (T) = (0 -5896938.258186877) / Math.Sqrt((271983877.6849514 / (31)) + (240434488.6133558 / (7))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (31) + (7) - 2, .025) and -0.09932784052601532 = (5364130.735891544 - 5896938.258186877) / 5364130.735891544 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted: False, SkipValidation: True)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionWindowed: Marked as regression because 5.615225030303029 \u003e 5.326227882812501.\r\nIsChangePoint: Marked as a change because one of 9/23/2022 2:49:56 PM, 10/25/2022 8:54:59 AM, 10/27/2022 12:34:03 AM falls between 10/18/2022 9:26:37 AM and 10/27/2022 12:34:03 AM.\r\nIsRegressionStdDev: Marked as regression because -21.21429871732625 (T) = (0 -5622035.0751970345) / Math.Sqrt((138052045.11067542 / (31)) + (4619772723.853835 / (7))) is less than -2.028094000977961 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (31) + (7) - 2, .025) and -0.10774484050791204 = (5075207.637725738 - 5622035.0751970345) / 5075207.637725738 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eperformanceautofiler[bot]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-arm64`, `area-System.Text.Encoding`, `tenet-performance`, `tenet-performance-benchmarks`, `untriaged`, `runtime-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-27T10:48:11Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Regressions in Utf8/16",
        "labels":  [
                       "arch-arm64",
                       "area-System.Text.Encoding",
                       "tenet-performance",
                       "tenet-performance-benchmarks",
                       "runtime-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81693",
        "createdAt":  "2023-02-06T11:52:23Z",
        "number":  81693,
        "author":  "premun",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:40:38Z",
        "body":  "### Context\r\n\r\nThe key goal of source-build is to satisfy the official packaging rules of commonly used Linux distributions, such as [Fedora](https://fedoraproject.org/wiki/Packaging:Guidelines) and [Debian](https://www.debian.org/doc/manuals/maint-guide/build.en.html). Many Linux distributions have similar rules. These rules tend to have two main principles: consistent reproducibility, and source code for everything.\r\n\r\nIn order to support the \"source code for everything\" requirement, binary files are not allowed in product repositories. Aside from, binaries that can be created during the build process from source are better not to be checked in as one of the main goals of git is that humans can review the code changes.\r\n\r\n### Questions\r\n\r\n- What scenario / which RID are these files used for?\r\n- Are these files necessary for a successful build of the .NET SDK?\r\n- If they are is, can they be removed from the repository and replaced with a source and process that synthesizes them during build?\r\n\r\n### Goal\r\n\r\nWe should comply with the source build requirements and get rid of these binaries. The file in question is https://github.com/dotnet/runtime/blob/main/src/libraries/System.Text.Encoding.CodePages/src/Data/codepages.nlp\r\n\r\nBased on the discussion [here](https://teams.microsoft.com/l/message/19:977f68c19ca2422db22072560f93ae27@thread.skype/1675076942682?tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47\u0026groupId=014ca51d-be57-47fa-9628-a15efcc3c376\u0026parentMessageId=1675076942682\u0026teamName=dotnet%2Fruntime%20repo\u0026channelName=General\u0026createdTime=1675076942682), it seems it\u0027s possible to synthesize this file from source but the current tool that does that is written in Perl.\r\n\r\n### Possible workarounds\r\n\r\nAt the moment, we only source-build Linux x64/arm64 so if this file is required for other RIDs, it can be temporarily removed from the source build. This is only in case it\u0027s difficult to replace the file with source. Other platforms will be supported by source build in the future though, so this problem will re-surface in case we go around it this way.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVQcrYg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Uk5sa",
                                           "createdAt":  "2023-02-06T11:52:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-02-06T11:52:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UmYso",
                                           "createdAt":  "2023-02-06T16:16:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encoding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Context\r\n\r\nThe key goal of source-build is to satisfy the official packaging rules of commonly used Linux distributions, such as [Fedora](https://fedoraproject.org/wiki/Packaging:Guidelines) and [Debian](https://www.debian.org/doc/manuals/maint-guide/build.en.html). Many Linux distributions have similar rules. These rules tend to have two main principles: consistent reproducibility, and source code for everything.\r\n\r\nIn order to support the \"source code for everything\" requirement, binary files are not allowed in product repositories. Aside from, binaries that can be created during the build process from source are better not to be checked in as one of the main goals of git is that humans can review the code changes.\r\n\r\n### Questions\r\n\r\n- What scenario / which RID are these files used for?\r\n- Are these files necessary for a successful build of the .NET SDK?\r\n- If they are is, can they be removed from the repository and replaced with a source and process that synthesizes them during build?\r\n\r\n### Goal\r\n\r\nWe should comply with the source build requirements and get rid of these binaries. The file in question is https://github.com/dotnet/runtime/blob/main/src/libraries/System.Text.Encoding.CodePages/src/Data/codepages.nlp\r\n\r\nBased on the discussion [here](https://teams.microsoft.com/l/message/19:977f68c19ca2422db22072560f93ae27@thread.skype/1675076942682?tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47\u0026groupId=014ca51d-be57-47fa-9628-a15efcc3c376\u0026parentMessageId=1675076942682\u0026teamName=dotnet%2Fruntime%20repo\u0026channelName=General\u0026createdTime=1675076942682), it seems it\u0027s possible to synthesize this file from source but the current tool that does that is written in Perl.\r\n\r\n### Possible workarounds\r\n\r\nAt the moment, we only source-build Linux x64/arm64 so if this file is required for other RIDs, it can be temporarily removed from the source build. This is only in case it\u0027s difficult to replace the file with source. Other platforms will be supported by source build in the future though, so this problem will re-surface in case we go around it this way.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epremun\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Encoding`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-06T16:16:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VByti",
                                           "createdAt":  "2023-02-11T00:35:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Some info about `codepages.nlp`:\r\n\r\n- This file contains the single and double bytes codepages data which is used to convert to/from Unicode-16 encoding. The list of the supported codepages can be viewed in the [doc example output](https://learn.microsoft.com/en-us/dotnet/api/system.text.encoding.getencodings?view=net-7.0#examples) minus the encodings listed the [doc remark section](https://learn.microsoft.com/en-us/dotnet/api/system.text.codepagesencodingprovider?view=net-7.0#remarks).\r\n- `codepages.nlp` is the exact same file used in the .NET Framework which is generated from the sources there. We are keeping this issue open to track porting the generation tool to open source. ",
                                           "updatedAt":  "2023-02-11T00:35:36Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "`codepages.nlp` binary in `System.Text.Encoding.CodePages`",
        "labels":  [
                       "area-System.Text.Encoding"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86119",
        "createdAt":  "2023-05-11T20:54:06Z",
        "number":  86119,
        "author":  "DeepakRajendrakumaran",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-18T22:44:29Z",
        "body":  "This task is to identify potential opportunities to use `Vector512` in these libraries(ASCII/UTF) and add `Vector512 `paths where possible to further accelerate  using SIMD.\r\n\r\n@dotnet/avx512-contrib \r\n\r\n\r\nSee below for list of functions which have SIMD paths in them\r\n\r\n- [ ] **GetPointerToFirstInvalidChar**(_utf16Utility.Validation.cs_)\r\n      Note from Ruihan - The existing implementation has Sse2 code path and Vector128 code path, a Sse2.AddSaturate differentiates these 2 code path. We worked internally to upgrade it with Vector256/Avx2, and Vector512/Avx512 code paths, the performance for Vector256 path was fine but the upgrade was blocked by the performance issue we found on Vector512 path due to the execution unit contention between AddSaturate(VPADDUSW) and ExtractMostSignificantBits(VPMOVB2M), which leads to no performance gain compared against Vector256.\r\n\r\n- [ ] **GetPointerToFirstInvalidByte**(_Utf8Utility.Validation.cs_)\r\n_**Up for grabs for community to work on**_\r\n\r\n- [ ] **TranscodeToUtf8**(Utf8Utility.Transcoding.cs)\r\n_**Up for grabs for community to work on**_\r\n\r\n- [ ] **AllBytesInVector128AreAscii**(Utf8Utility.cs) , **Vector128OrdinalIgnoreCaseAscii**(Utf8Utility.cs)-\u003e **EqualsIgnoreCaseUtf8_Vector128**(Ordinal.Utf8.cs) -\u003e **EqualsIgnoreCaseUtf8**(Ordinal.Utf8.cs)\r\n_**Up for grabs for community to work on**_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcIunpQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5cEbb0",
                                           "createdAt":  "2023-05-11T20:54:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis task is to identify potential opportunities to use `Vector512` in these libraries(ASCII/UTF) and add `Vector512 `paths where possible to further accelerate  using SIMD.\r\n\r\n@dotnet/avx512-contrib \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDeepakRajendrakumaran\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Meta`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-11T20:54:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cEdyL",
                                           "createdAt":  "2023-05-11T21:01:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeepakRajendrakumaran",
                                           "body":  "@BruceForstall - Can you please link this to https://github.com/dotnet/runtime/issues/77034",
                                           "updatedAt":  "2023-05-11T21:01:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cEd8i",
                                           "createdAt":  "2023-05-11T21:02:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encoding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis task is to identify potential opportunities to use `Vector512` in these libraries(ASCII/UTF) and add `Vector512 `paths where possible to further accelerate  using SIMD.\r\n\r\n@dotnet/avx512-contrib \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDeepakRajendrakumaran\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Meta`, `area-System.Text.Encoding`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-11T21:02:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cEe2J",
                                           "createdAt":  "2023-05-11T21:04:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "\u003e @BruceForstall - Can you please link this to #77034\r\n\r\nDone. Thanks.",
                                           "updatedAt":  "2023-05-11T21:04:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iCXAQ",
                                           "createdAt":  "2023-07-20T23:32:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "anthonycanino",
                                           "body":  "@BruceForstall to better track work we did/plan to do, I have made https://github.com/dotnet/runtime/issues/89280 which covers the upgrades to `Ascii.Utility` which some of `UTF8` encoding uses.\r\n\r\nFor this issue, I will go through and identify the upgrades that pertain directly to `UTF8.Utility` and `UTF16.Utility`, which will be for .NET 9 release.",
                                           "updatedAt":  "2023-07-20T23:32:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wi6el",
                                           "createdAt":  "2024-01-12T00:31:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ruihan-Yin",
                                           "body":  "For `GetPointerToFirstInvalidChar` in utf16Utility.Validation.cs,\r\n\r\nThe existing implementation has Sse2 code path and Vector128 code path, a `Sse2.AddSaturate` differentiates these 2 code path. We worked internally to upgrade it with Vector256/Avx2, and Vector512/Avx512 code paths, the performance for Vector256 path was fine but the upgrade was blocked by the performance issue we found on Vector512 path due to the execution unit contention between `AddSaturate`(`VPADDUSW`) and `ExtractMostSignificantBits`(`VPMOVB2M`), which leads to no performance gain compared against Vector256.",
                                           "updatedAt":  "2024-01-12T00:31:08Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Light up Utf8Utility.*.cs and Utf16Utility.*.cs with Vector512 code paths. ",
        "labels":  [
                       "area-System.Text.Encoding",
                       "tenet-performance",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89280",
        "createdAt":  "2023-07-20T23:30:44Z",
        "number":  89280,
        "author":  "anthonycanino",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-24T20:20:55Z",
        "body":  "This issue tracks upgrades to `Ascii.Utility` with `Vector512` (and in some cases `Vector256`) code paths.\r\n\r\nWe plan to upgrade the following methods (the ones checked off have already been merged into main).\r\n\r\n- [x] NarrowUtf16ToAscii\r\n- [x] WidenAsciiToUtf16\r\n- [x] GetIndexOfFirstNonAsciiChar\r\n- [x] GetIndexOfFirstNonAsciiByte\r\n- [ ] IsValidCore\r\n- [x] Equals/EqualsIgnore\r\n- [ ] CaseConversion\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuag1WA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5iGDrA",
                                           "createdAt":  "2023-07-21T15:21:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encoding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis issue tracks upgrades to `Ascii.Utility` with `Vector512` (in in some cases `Vector256`) code paths.\r\n\r\nWe plan to upgrade the following methods (the ones checked off have already been merged into main).\r\n\r\n- [x] NarrowUtf16ToAscii\r\n- [x] WidenAsciiToUtf16\r\n- [x] GetIndexOfFirstNonAsciiChar\r\n- [x] GetIndexOfFirstNonAsciiByte\r\n- [ ] IsValidCore\r\n- [ ] Equals/EqualsIgnore\r\n- [ ] CaseConversion\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eanthonycanino\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Encoding`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-21T15:21:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iHYqk",
                                           "createdAt":  "2023-07-21T18:42:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "layomia",
                                           "body":  "Triage per offline discussion with @anthonycanino:\r\n\r\nThis work isn\u0027t a must-have for 8.0, but folks still hope to get a couple PRs in soon. We\u0027ll mark as 8.0 for now; cc @BruceForstall @tannergooding who could weigh in on if/when to move this to future.",
                                           "updatedAt":  "2023-07-21T18:42:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oqI9U",
                                           "createdAt":  "2023-10-10T17:00:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJM4rw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BruceForstall",
                                                                               "createdAt":  "2023-10-10T17:04:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Moving this to 9.0 as it\u0027s clearly too late to do more here.  @BruceForstall feel free to make more changes as appropriate.",
                                           "updatedAt":  "2023-10-10T17:00:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5o6pyf",
                                           "createdAt":  "2023-10-12T18:56:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ruihan-Yin",
                                           "body":  "For the remaining ones:\r\n1. Equals/EqualsIgnore: can be checked off as #88650 has been merged to main.\r\n2. CaseConversion: Some in-place methods were not scaling well on Vector512 path compared with Vector256 due to the penalty from split vector load, which might be solved by #89892, this PR is currently paused and targeting on .Net 9.",
                                           "updatedAt":  "2023-10-12T18:56:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65qDVY",
                                           "createdAt":  "2025-07-24T20:20:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "Moving to .NET 11.",
                                           "updatedAt":  "2025-07-24T20:20:55Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Light up `Ascii.Utility` methods with `Vector512` code paths.",
        "labels":  [
                       "area-System.Text.Encoding",
                       "avx512"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89924",
        "createdAt":  "2023-08-03T11:04:05Z",
        "number":  89924,
        "author":  "neon-sunset",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-01T19:34:46Z",
        "body":  "### Description\r\n\r\nIt appears that `GetIndexOfFirstNonAsciiByte` in https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Text/Ascii.Utility.cs#L104 does not exercise the `GetIndexOfFirstNonAsciiByte_Vector` path despite it having explicit support for `AdvSimd` and `SSE4.1`.\r\n\r\nIs this intended? Should SSE4.1 and AdvSimd targets be allowed to take `_Vector` instead?\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Data\r\n\r\nPreliminary benchmark shows that on `osx-arm64` `apple-m1` the time to traverse 1_000_000 bytes is 28.71us with current `_Intrinsified` path and is improved by ~40% to `20.12us` if we relax the check and allow calling `GetIndexOfFirstNonAsciiByte_Vector` for `Vector128.IsHardwareAccelerated`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZABWsQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jK1s1",
                                           "createdAt":  "2023-08-03T11:06:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODCmEZw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "neon-sunset",
                                                                               "createdAt":  "2023-08-03T11:09:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Looks like a regression (or leftover) from https://github.com/dotnet/runtime/pull/88532 cc @anthonycanino",
                                           "updatedAt":  "2023-08-03T11:07:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jMYmt",
                                           "createdAt":  "2023-08-03T15:25:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encoding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nIt appears that `GetIndexOfFirstNonAsciiByte` in https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Text/Ascii.Utility.cs#L104 does not exercise the `GetIndexOfFirstNonAsciiByte_Vector` path despite it having explicit support for `AdvSimd` and `SSE4.1`.\r\n\r\nIs this intended? Should SSE4.1 and AdvSimd targets be allowed to take `_Vector` instead?\r\n\r\n### Regression?\r\n\r\nNo.\r\n\r\n### Data\r\n\r\nPreliminary benchmark shows that on `osx-arm64` `apple-m1` the time to traverse 1_000_000 bytes is 28.71us with current `_Intrinsified` path and is improved by ~40% to `20.12us` if we relax the check and allow calling `GetIndexOfFirstNonAsciiByte_Vector` for `Vector128.IsHardwareAccelerated`.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eneon-sunset\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Encoding`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-03T15:25:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kAEAG",
                                           "createdAt":  "2023-08-14T17:15:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Regression? Yes, vs .NET 7\r\n\r\n@neon-sunset, @tannergooding pointed out to me offline it was using the _Intrinsified path in .NET 7:\r\nhttps://github.com/dotnet/runtime/blob/a6dbb800a47735bde43187350fd3aff4071c7f9c/src/libraries/System.Private.CoreLib/src/System/Text/ASCIIUtility.cs#L81-L91\r\n\r\nDid you measure it to be a regression from .NET 7, and if so, can you share the benchmark and your resulting numbers?\r\n\r\nOr are you just saying it\u0027s not as good in .NET 8 as it could be but it\u0027s not a regression?\r\n\r\nEDIT: Tanner just commented on the PR with similar feedback:\r\nhttps://github.com/dotnet/runtime/pull/90527#discussion_r1293751532",
                                           "updatedAt":  "2023-08-14T17:19:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kAFax",
                                           "createdAt":  "2023-08-14T17:19:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "neon-sunset",
                                           "body":  "\u003e Or are you just saying it\u0027s not as good in .NET 8 as it could be but it\u0027s not a regression?\r\n\r\nYes, it appears to not be a regression because I mistakenly assumed the `_Vector` path was present in .NET 7. I have updated the description.",
                                           "updatedAt":  "2023-08-14T17:19:36Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "GetIndexOfFirstNonAsciiByte_Vector path in Ascii.Utility.cs is never exercised for AdvSimd/SSE4.1",
        "labels":  [
                       "area-System.Text.Encoding",
                       "tenet-performance",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91068",
        "createdAt":  "2023-08-24T16:07:35Z",
        "number":  91068,
        "author":  "hpetith",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-24T16:36:35Z",
        "body":  "The latest version GB18030-2022 specifies three implementation levels building on each other. When testing my application on .NET 6, 7 and 8 for compliance with implementation levels 1 and 2, I found that there is only one missing bit that is not yet fulfilled by the current implementation in [GB18030Encoding.cs](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Text.Encoding.CodePages/src/System/Text/GB18030Encoding.cs). All other extensions mandated by GB18030-2022 implementation levels 1\u00262 perfectly work out of the box. \r\n\r\nIn detail, GB18030-2022 changes a set of code mappings to no longer point to private use area PUA, but rather to codes standardized by Unicode in the meantime. The changed mappings are nicely described in [this blog post](https://ken-lunde.medium.com/the-gb-18030-2022-standard-3d0ebaeb4132), section \"No PUA Requirement\". The Unicode consortium has a [pragmatic proposal](https://www.unicode.org/L2/L2023/23003-gb18030-recommendations.pdf) to implement the changed mappings only into one direction, for ease of transcoding into the standard.\r\n\r\nWith the missing bit implemented, the .NET codepage would be fully compliant with GB18030-2022 implementation levels 1\u00262.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZNp81A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5k2chb",
                                           "createdAt":  "2023-08-24T16:12:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe latest version GB18030-2022 specifies three implementation levels building on each other. When testing my application on .NET 6, 7 and 8 for compliance with implementation levels 1 and 2, I found that there is only one missing bit that is not yet fulfilled by the current implementation in [GB18030Encoding.cs](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Text.Encoding.CodePages/src/System/Text/GB18030Encoding.cs). All other extensions mandated by GB18030-2022 implementation levels 1\u00262 perfectly work out of the box. \r\n\r\nIn detail, GB18030-2022 changes a set of code mappings to no longer point to private use area PUA, but rather to codes standardized by Unicode in the meantime. The changed mappings are nicely described in [this blog post](https://ken-lunde.medium.com/the-gb-18030-2022-standard-3d0ebaeb4132), section \"No PUA Requirement\". The Unicode consortium has a [pragmatic proposal](https://www.unicode.org/L2/L2023/23003-gb18030-recommendations.pdf) to implement the changed mappings only into one direction, for ease of transcoding into the standard.\r\n\r\nWith the missing bit implemented, the .NET codepage would be fully compliant with GB18030-2022 implementation levels 1\u00262.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehpetith\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-24T16:12:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5k2nzU",
                                           "createdAt":  "2023-08-24T16:36:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encoding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe latest version GB18030-2022 specifies three implementation levels building on each other. When testing my application on .NET 6, 7 and 8 for compliance with implementation levels 1 and 2, I found that there is only one missing bit that is not yet fulfilled by the current implementation in [GB18030Encoding.cs](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Text.Encoding.CodePages/src/System/Text/GB18030Encoding.cs). All other extensions mandated by GB18030-2022 implementation levels 1\u00262 perfectly work out of the box. \r\n\r\nIn detail, GB18030-2022 changes a set of code mappings to no longer point to private use area PUA, but rather to codes standardized by Unicode in the meantime. The changed mappings are nicely described in [this blog post](https://ken-lunde.medium.com/the-gb-18030-2022-standard-3d0ebaeb4132), section \"No PUA Requirement\". The Unicode consortium has a [pragmatic proposal](https://www.unicode.org/L2/L2023/23003-gb18030-recommendations.pdf) to implement the changed mappings only into one direction, for ease of transcoding into the standard.\r\n\r\nWith the missing bit implemented, the .NET codepage would be fully compliant with GB18030-2022 implementation levels 1\u00262.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehpetith\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Encoding`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-24T16:36:33Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Codepage GB18030 does not implement the latest version of the standard GB18030-2022",
        "labels":  [
                       "area-System.Text.Encoding"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93269",
        "createdAt":  "2023-10-10T00:45:11Z",
        "number":  93269,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC36JMg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2023-10-10T01:57:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jandupej",
                                            "createdAt":  "2023-10-10T10:29:08Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "MihaZupan",
                                            "createdAt":  "2023-10-10T10:45:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xor-el",
                                            "createdAt":  "2023-10-10T19:35:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eiriktsarpalis",
                                            "createdAt":  "2023-11-01T12:04:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sveinungf",
                                            "createdAt":  "2023-11-13T07:22:30Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "samsosa",
                                            "createdAt":  "2023-11-18T09:22:37Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-05-15T08:53:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-05-15T08:53:04Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2025-07-26T10:43:43Z",
        "body":  "And whether there\u0027s anything that can be applied from https://lemire.me/blog/2023/09/13/transcoding-unicode-strings-at-crazy-speeds-with-avx-512.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOahv0GA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ojcWL",
                                           "createdAt":  "2023-10-10T00:45:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encoding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAnd whether there\u0027s anything that can be applied from https://lemire.me/blog/2023/09/13/transcoding-unicode-strings-at-crazy-speeds-with-avx-512.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Encoding`, `tenet-performance`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-10T00:45:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qG_QY",
                                           "createdAt":  "2023-10-26T00:02:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODh24Ag==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2023-10-26T00:14:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Nick-Nuon",
                                                                               "createdAt":  "2023-10-26T00:30:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "MichalPetryka",
                                                                               "createdAt":  "2023-10-26T00:53:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2023-10-26T02:40:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "saucecontrol",
                                                                               "createdAt":  "2023-10-26T05:07:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2023-10-29T04:44:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "samsosa",
                                                                               "createdAt":  "2023-11-18T09:23:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "samsosa",
                                                                               "createdAt":  "2023-11-18T09:23:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Zintom",
                                                                               "createdAt":  "2023-11-19T17:00:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "jason-triplett-igt",
                                                                               "createdAt":  "2024-02-13T19:58:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-05-15T08:53:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-05-15T08:53:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  12
                                                         },
                                           "author":  "lemire",
                                           "body":  "I actually have a _secret_ projet to work on this (not specifically with AVX-512, though that would be great).\r\n\r\nWe think that UTF-8 validation, for example, could be improved in dotnet.\r\n\r\nIf you\u0027d like to chat, get in touch!!!\r\n\r\n(Note that I have contributed to dotnet/runtime in the past.)\r\n",
                                           "updatedAt":  "2023-10-26T00:02:17Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Investigate UTF8/UTF16 transcoding with AVX512",
        "labels":  [
                       "area-System.Text.Encoding",
                       "tenet-performance",
                       "avx512"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97576",
        "createdAt":  "2024-01-23T12:35:11Z",
        "number":  97576,
        "author":  "devWR",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-09T11:32:33Z",
        "body":  "### Description\r\n\r\nWhen trimming is enabled I cannot retrieve ASCII Encoding object. It looks like it\u0027s removed from Environment variables. It\u0027s working when trimmiing is disabled. Sample attached:\r\nExpected:\r\n- Click button\r\n- Button text will update with Encoding name (US-ASCII) and encoding object will be initiated\r\nActual:\r\n- Click button\r\n- Button text updates with incorrect name: Globalization_cp_20127 and then crashes when trying to retrieve encoding object\r\n\r\nI tried to include in Linker.xml:\r\n\u003cassembly fullname=\"System.Private.CoreLib\"\u003e\r\n  \u003ctype fullname=\"System.Environment\" preserve=\"all\" /\u003e\r\n\u003c/assembly\u003e\r\nbut unfortunately it didn\u0027t help.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create project in Maui (can be Android or iOS)\r\n2. Enable trimming\r\n3. Try to invoke: System.Text.Encoding.GetEncoding(System.Text.Encoding.ASCII.EncodingName, EncoderFallback.ExceptionFallback, DecoderFallback.ExceptionFallback.\r\n4. Crash happens\r\n\r\n### Link to public reproduction project repository\r\nhttps://github.com/devWR/maui_encodingissue\r\n\r\n_No response_\r\n\r\n### Version with bug\r\n\r\n8.0.3\r\n\r\n### Is this a regression from previous behavior?\r\n\r\nNot sure, did not test other versions\r\n\r\n### Last version that worked well\r\n\r\nUnknown/Other\r\n\r\n### Affected platforms\r\n\r\niOS, Android\r\n\r\n### Affected platform versions\r\n\r\nAndroid 14/iOS15\r\n\r\n### Did you find any workaround?\r\n\r\nNo\r\n\r\n### Relevant log output\r\n\r\n```shell\r\nEncoding ASCII: Globalization_cp_20127\r\nArgument_EncodingNotSupported, Globalization_cp_20127 Arg_ParamName_Name, name\r\nSystem.ArgumentException: Argument_EncodingNotSupported, Globalization_cp_20127 Arg_ParamName_Name, name\r\n   at System.Text.EncodingTable.InternalGetCodePageFromName(String )\r\n   at System.Text.EncodingTable.GetCodePageFromName(String )\r\n   at System.Text.Encoding.GetEncoding(String , EncoderFallback , DecoderFallback )\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhCr_uw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5yAxvv",
                                           "createdAt":  "2024-01-26T23:01:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encoding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen trimming is enabled I cannot retrieve ASCII Encoding object. It looks like it\u0027s removed from Environment variables. It\u0027s working when trimmiing is disabled. Sample attached:\r\nExpected:\r\n- Click button\r\n- Button text will update with Encoding name (US-ASCII) and encoding object will be initiated\r\nActual:\r\n- Click button\r\n- Button text updates with incorrect name: Globalization_cp_20127 and then crashes when trying to retrieve encoding object\r\n\r\nI tried to include in Linker.xml:\r\n\u003cassembly fullname=\"System.Private.CoreLib\"\u003e\r\n  \u003ctype fullname=\"System.Environment\" preserve=\"all\" /\u003e\r\n\u003c/assembly\u003e\r\nbut unfortunately it didn\u0027t help.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create project in Maui (can be Android or iOS)\r\n2. Enable trimming\r\n3. Try to invoke: System.Text.Encoding.GetEncoding(System.Text.Encoding.ASCII.EncodingName, EncoderFallback.ExceptionFallback, DecoderFallback.ExceptionFallback.\r\n4. Crash happens\r\n\r\n### Link to public reproduction project repository\r\nhttps://github.com/devWR/maui_encodingissue\r\n\r\n_No response_\r\n\r\n### Version with bug\r\n\r\n8.0.3\r\n\r\n### Is this a regression from previous behavior?\r\n\r\nNot sure, did not test other versions\r\n\r\n### Last version that worked well\r\n\r\nUnknown/Other\r\n\r\n### Affected platforms\r\n\r\niOS, Android\r\n\r\n### Affected platform versions\r\n\r\nAndroid 14/iOS15\r\n\r\n### Did you find any workaround?\r\n\r\nNo\r\n\r\n### Relevant log output\r\n\r\n```shell\r\nEncoding ASCII: Globalization_cp_20127\r\nArgument_EncodingNotSupported, Globalization_cp_20127 Arg_ParamName_Name, name\r\nSystem.ArgumentException: Argument_EncodingNotSupported, Globalization_cp_20127 Arg_ParamName_Name, name\r\n   at System.Text.EncodingTable.InternalGetCodePageFromName(String )\r\n   at System.Text.EncodingTable.GetCodePageFromName(String )\r\n   at System.Text.Encoding.GetEncoding(String , EncoderFallback , DecoderFallback )\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edevWR\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Encoding`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-26T23:01:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yAyzM",
                                           "createdAt":  "2024-01-26T23:07:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @steveisok, @akoeplinger, @kotlarmilos\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen trimming is enabled I cannot retrieve ASCII Encoding object. It looks like it\u0027s removed from Environment variables. It\u0027s working when trimmiing is disabled. Sample attached:\r\nExpected:\r\n- Click button\r\n- Button text will update with Encoding name (US-ASCII) and encoding object will be initiated\r\nActual:\r\n- Click button\r\n- Button text updates with incorrect name: Globalization_cp_20127 and then crashes when trying to retrieve encoding object\r\n\r\nI tried to include in Linker.xml:\r\n\u003cassembly fullname=\"System.Private.CoreLib\"\u003e\r\n  \u003ctype fullname=\"System.Environment\" preserve=\"all\" /\u003e\r\n\u003c/assembly\u003e\r\nbut unfortunately it didn\u0027t help.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create project in Maui (can be Android or iOS)\r\n2. Enable trimming\r\n3. Try to invoke: System.Text.Encoding.GetEncoding(System.Text.Encoding.ASCII.EncodingName, EncoderFallback.ExceptionFallback, DecoderFallback.ExceptionFallback.\r\n4. Crash happens\r\n\r\n### Link to public reproduction project repository\r\nhttps://github.com/devWR/maui_encodingissue\r\n\r\n_No response_\r\n\r\n### Version with bug\r\n\r\n8.0.3\r\n\r\n### Is this a regression from previous behavior?\r\n\r\nNot sure, did not test other versions\r\n\r\n### Last version that worked well\r\n\r\nUnknown/Other\r\n\r\n### Affected platforms\r\n\r\niOS, Android\r\n\r\n### Affected platform versions\r\n\r\nAndroid 14/iOS15\r\n\r\n### Did you find any workaround?\r\n\r\nNo\r\n\r\n### Relevant log output\r\n\r\n```shell\r\nEncoding ASCII: Globalization_cp_20127\r\nArgument_EncodingNotSupported, Globalization_cp_20127 Arg_ParamName_Name, name\r\nSystem.ArgumentException: Argument_EncodingNotSupported, Globalization_cp_20127 Arg_ParamName_Name, name\r\n   at System.Text.EncodingTable.InternalGetCodePageFromName(String )\r\n   at System.Text.EncodingTable.GetCodePageFromName(String )\r\n   at System.Text.Encoding.GetEncoding(String , EncoderFallback , DecoderFallback )\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edevWR\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Encoding`, `os-android`, `untriaged`, `os-ios`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-26T23:07:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yBF2k",
                                           "createdAt":  "2024-01-27T01:07:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027linkable-framework\u0027: @eerhardt, @vitek-karas, @LakshanF, @sbomer, @joperezr, @marek-safar\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen trimming is enabled I cannot retrieve ASCII Encoding object. It looks like it\u0027s removed from Environment variables. It\u0027s working when trimmiing is disabled. Sample attached:\r\nExpected:\r\n- Click button\r\n- Button text will update with Encoding name (US-ASCII) and encoding object will be initiated\r\nActual:\r\n- Click button\r\n- Button text updates with incorrect name: Globalization_cp_20127 and then crashes when trying to retrieve encoding object\r\n\r\nI tried to include in Linker.xml:\r\n\u003cassembly fullname=\"System.Private.CoreLib\"\u003e\r\n  \u003ctype fullname=\"System.Environment\" preserve=\"all\" /\u003e\r\n\u003c/assembly\u003e\r\nbut unfortunately it didn\u0027t help.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create project in Maui (can be Android or iOS)\r\n2. Enable trimming\r\n3. Try to invoke: System.Text.Encoding.GetEncoding(System.Text.Encoding.ASCII.EncodingName, EncoderFallback.ExceptionFallback, DecoderFallback.ExceptionFallback.\r\n4. Crash happens\r\n\r\n### Link to public reproduction project repository\r\nhttps://github.com/devWR/maui_encodingissue\r\n\r\n_No response_\r\n\r\n### Version with bug\r\n\r\n8.0.3\r\n\r\n### Is this a regression from previous behavior?\r\n\r\nNot sure, did not test other versions\r\n\r\n### Last version that worked well\r\n\r\nUnknown/Other\r\n\r\n### Affected platforms\r\n\r\niOS, Android\r\n\r\n### Affected platform versions\r\n\r\nAndroid 14/iOS15\r\n\r\n### Did you find any workaround?\r\n\r\nNo\r\n\r\n### Relevant log output\r\n\r\n```shell\r\nEncoding ASCII: Globalization_cp_20127\r\nArgument_EncodingNotSupported, Globalization_cp_20127 Arg_ParamName_Name, name\r\nSystem.ArgumentException: Argument_EncodingNotSupported, Globalization_cp_20127 Arg_ParamName_Name, name\r\n   at System.Text.EncodingTable.InternalGetCodePageFromName(String )\r\n   at System.Text.EncodingTable.GetCodePageFromName(String )\r\n   at System.Text.Encoding.GetEncoding(String , EncoderFallback , DecoderFallback )\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edevWR\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`os-android`, `untriaged`, `area-CoreLib-mono`, `linkable-framework`, `os-ios`, `trimming-for-aot`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-27T01:07:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yJUBe",
                                           "createdAt":  "2024-01-29T16:13:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "fyi, we are deprecating area-corelib-mono and replacing with specific areas paths",
                                           "updatedAt":  "2024-01-29T16:13:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yJUJ3",
                                           "createdAt":  "2024-01-29T16:13:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encoding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen trimming is enabled I cannot retrieve ASCII Encoding object. It looks like it\u0027s removed from Environment variables. It\u0027s working when trimmiing is disabled. Sample attached:\r\nExpected:\r\n- Click button\r\n- Button text will update with Encoding name (US-ASCII) and encoding object will be initiated\r\nActual:\r\n- Click button\r\n- Button text updates with incorrect name: Globalization_cp_20127 and then crashes when trying to retrieve encoding object\r\n\r\nI tried to include in Linker.xml:\r\n\u003cassembly fullname=\"System.Private.CoreLib\"\u003e\r\n  \u003ctype fullname=\"System.Environment\" preserve=\"all\" /\u003e\r\n\u003c/assembly\u003e\r\nbut unfortunately it didn\u0027t help.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create project in Maui (can be Android or iOS)\r\n2. Enable trimming\r\n3. Try to invoke: System.Text.Encoding.GetEncoding(System.Text.Encoding.ASCII.EncodingName, EncoderFallback.ExceptionFallback, DecoderFallback.ExceptionFallback.\r\n4. Crash happens\r\n\r\n### Link to public reproduction project repository\r\nhttps://github.com/devWR/maui_encodingissue\r\n\r\n_No response_\r\n\r\n### Version with bug\r\n\r\n8.0.3\r\n\r\n### Is this a regression from previous behavior?\r\n\r\nNot sure, did not test other versions\r\n\r\n### Last version that worked well\r\n\r\nUnknown/Other\r\n\r\n### Affected platforms\r\n\r\niOS, Android\r\n\r\n### Affected platform versions\r\n\r\nAndroid 14/iOS15\r\n\r\n### Did you find any workaround?\r\n\r\nNo\r\n\r\n### Relevant log output\r\n\r\n```shell\r\nEncoding ASCII: Globalization_cp_20127\r\nArgument_EncodingNotSupported, Globalization_cp_20127 Arg_ParamName_Name, name\r\nSystem.ArgumentException: Argument_EncodingNotSupported, Globalization_cp_20127 Arg_ParamName_Name, name\r\n   at System.Text.EncodingTable.InternalGetCodePageFromName(String )\r\n   at System.Text.EncodingTable.GetCodePageFromName(String )\r\n   at System.Text.Encoding.GetEncoding(String , EncoderFallback , DecoderFallback )\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edevWR\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Encoding`, `os-android`, `linkable-framework`, `os-ios`, `trimming-for-aot`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.x\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-29T16:13:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51qQdL",
                                           "createdAt":  "2024-03-01T22:19:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEYGIQw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sergeikoshelnykcirasync",
                                                                               "createdAt":  "2025-06-26T18:58:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "This is because of resource stripping.\r\nTo reduce application size, we strip all string resources from CoreLib - this will remove the resources used by `EncodingTable.GetDisplayName` [link](https://github.com/dotnet/runtime/blob/a2e4177bb55f192483a9f9477a79621338f9c58a/src/libraries/System.Private.CoreLib/src/System/Text/EncodingTable.cs#L238-L250).\r\nThis means that in trimmed app the display name is returned as the \"wrong\" `Globalization_cp_20127` since that\u0027s the resource key name. But the reverse lookup table which is in https://github.com/dotnet/runtime/blob/a2e4177bb55f192483a9f9477a79621338f9c58a/src/libraries/System.Private.CoreLib/src/System/Text/EncodingData.cs#L19 stays the same. So the reverse lookup fails since the wrong name is not there.\r\n\r\nThe correct usage is to use `WebName` instead - see the docs here https://learn.microsoft.com/en-us/dotnet/api/system.text.encoding.getencoding?view=net-8.0#system-text-encoding-getencoding(system-string). It states that any `WebName` is valid. `EncodingName` is a humanly readable string, potentially localized, so the reverse lookup won\u0027t work for it.\r\n\r\nThat said - it\u0027s a good question if MAUI should be trimming encoding display names in the first place.\r\n\r\n@jeffhandley as the owner of the System.Text.Encoding - mostly for opinions on the behavior of trimmed app as described above.",
                                           "updatedAt":  "2024-03-01T22:19:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EKv-7",
                                           "createdAt":  "2024-07-09T11:32:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "This is basically a problem where the display name is broken when `UseSystemResourceKeys=true` which is the default for all mobile and Blazor projects. @jeffhandley I\u0027ll leave it up to you to decide what to do about this - I\u0027ll be glad to help with the technical specifics around trimming if needed.",
                                           "updatedAt":  "2024-07-09T11:32:32Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Encoding.ASCII is trimmed in Android/iOS in .NET8",
        "labels":  [
                       "area-System.Text.Encoding",
                       "linkable-framework",
                       "trimming-for-aot"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103781",
        "createdAt":  "2024-06-20T19:55:47Z",
        "number":  103781,
        "author":  "lemire",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODRPN4g==",
                          "nodes":  [
                                        {
                                            "content":  "HOORAY",
                                            "user":  "EgorBo",
                                            "createdAt":  "2024-06-20T19:59:49Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "neon-sunset",
                                            "createdAt":  "2024-06-20T20:03:12Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-06-20T20:12:39Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-06-20T20:15:26Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Sergio0694",
                                            "createdAt":  "2024-06-20T20:20:28Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "chsienki",
                                            "createdAt":  "2024-06-20T20:34:05Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "MihaZupan",
                                            "createdAt":  "2024-06-20T20:44:28Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "CodeByAidan",
                                            "createdAt":  "2024-06-20T20:47:14Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "CodeByAidan",
                                            "createdAt":  "2024-06-20T20:47:15Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "richlander",
                                            "createdAt":  "2024-06-20T21:35:47Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "rampaa",
                                            "createdAt":  "2024-06-20T21:51:39Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "rampaa",
                                            "createdAt":  "2024-06-20T21:51:44Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "Suchiman",
                                            "createdAt":  "2024-06-20T23:35:07Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Suchiman",
                                            "createdAt":  "2024-06-20T23:35:08Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "danroth27",
                                            "createdAt":  "2024-06-21T00:15:08Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Hona",
                                            "createdAt":  "2024-06-21T00:26:43Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-06-21T00:32:12Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "Nick-Nuon",
                                            "createdAt":  "2024-06-21T01:20:15Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "saucecontrol",
                                            "createdAt":  "2024-06-21T01:30:15Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "ReubenBond",
                                            "createdAt":  "2024-06-21T01:57:55Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "danmoseley",
                                            "createdAt":  "2024-06-21T03:15:14Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "mahdikshk",
                                            "createdAt":  "2024-06-21T09:14:11Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "hamarb123",
                                            "createdAt":  "2024-06-21T09:30:20Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-06-21T10:48:53Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "eerhardt",
                                            "createdAt":  "2024-06-21T15:41:25Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "Tornhoof",
                                            "createdAt":  "2024-06-21T21:55:05Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "veikkoeeva",
                                            "createdAt":  "2024-06-23T12:00:14Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "markusschaber",
                                            "createdAt":  "2024-06-24T07:39:40Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "am11",
                                            "createdAt":  "2024-06-24T15:30:03Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "AjayKMehta",
                                            "createdAt":  "2024-07-04T04:30:09Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "AlgorithmsAreCool",
                                            "createdAt":  "2024-07-10T15:10:17Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "markusschaber",
                                            "createdAt":  "2024-10-04T07:31:30Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Vlaaaaaaad",
                                            "createdAt":  "2025-09-17T11:26:58Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Vlaaaaaaad",
                                            "createdAt":  "2025-09-17T11:26:59Z"
                                        }
                                    ],
                          "totalCount":  34
                      },
        "updatedAt":  "2024-09-21T13:48:43Z",
        "body":  "The runtime has a great and fast function for UTF-8 validation: `Utf8Utility.GetPointerToFirstInvalidByte`. But we might be able to do better.\r\n\r\nWe implemented in C#, the \u0027lookup\u0027 UTF-8validation algorithm from \r\n\r\n- [Validating UTF-8 In Less Than One Instruction Per Byte](https://arxiv.org/abs/2010.03090), Software: Practice and Experience 51 (5), 2021\r\n\r\nThe algorithm is used by Oracle GraalVM, the Node.js and Bun JavaScript runtimes. For example, [Node.js is capable of validating Arabic or Chinese strings at 17 GB/s on an 2 GHz Intel server (from JavaScript)](https://lemire.me/blog/2023/12/05/how-fast-can-you-validate-utf-8-strings-in-javascript/).\r\n\r\nWe adapted it so that we can match exactly the functionality of `Utf8Utility.GetPointerToFirstInvalidByte` with a function called `SimdUnicode.UTF8.GetPointerToFirstInvalidByte`.  It is available on GitHub at [simdutf/SimdUnicode](https://github.com/simdutf/SimdUnicode). We have good tests, and decent benchmarks.  We use .NET\u0027s excellent runtime dispatching functionality to select the best function (SSE4.2, AVX2, AVX-512, fallback, NEON). We used @EgorBo\u0027s [Disasmo](https://github.com/EgorBo/Disasmo) to help tune the code, although we make no claim that it is optimal (it probably is not).\r\n\r\nIntel Ice Lake results:\r\n\r\n| data set        | SimdUnicode AVX-512 (GB/s) | .NET speed (GB/s) | speed up |\r\n|:----------------|:------------------------|:-------------------|:-------------------|\r\n| Twitter.json    | 29                      | 12                | 2.4 x |\r\n| Arabic-Lipsum   | 12                    | 2.3               | 5.2 x |\r\n| Chinese-Lipsum  | 12                    | 3.9               | 3.0 x |\r\n| Emoji-Lipsum    | 12                     | 0.9               | 13 x |\r\n| Hebrew-Lipsum   |12                    | 2.3               | 5.2 x |\r\n| Hindi-Lipsum    | 12                     | 2.1               | 5.7 x |\r\n| Japanese-Lipsum | 10                     | 3.5               | 2.9 x |\r\n| Korean-Lipsum   | 10                     | 1.3               | 7.7 x |\r\n| Latin-Lipsum    | 76                      | 76                | --- |\r\n| Russian-Lipsum  | 12                    | 1.2               | 10 x |\r\n\r\n```\r\n\r\nTwitter.json\r\n SimdUnicode ▏   29 GB/s █████████████████████████\r\n.NET Runtime ▏   12 GB/s ██████████▎\r\n\r\nArabic-Lipsum\r\n SimdUnicode ▏   12 GB/s █████████████████████████\r\n.NET Runtime ▏  2.3 GB/s ████▊\r\n\r\nChinese-Lipsum\r\n SimdUnicode ▏   12 GB/s █████████████████████████\r\n.NET Runtime ▏  3.9 GB/s ████████▏\r\n\r\nEmoji-Lipsum\r\n SimdUnicode ▏   12 GB/s █████████████████████████\r\n.NET Runtime ▏  0.9 GB/s █▉\r\n\r\nJapanese-Lipsum\r\n SimdUnicode ▏   10 GB/s █████████████████████████\r\n.NET Runtime ▏  3.5 GB/s ████████▊\r\n\r\n```\r\n\r\n\r\nApple M2 results:\r\n\r\n| data set      | SimdUnicode speed (GB/s) | .NET speed (GB/s) |  speed up |\r\n|:----------------|:-----------|:--------------------------|:-------------------|\r\n| Twitter.json    |  25        | 14                        | 1.8 x           |\r\n| Arabic-Lipsum   |  7.4       | 3.5                       | 2.1 x           |\r\n| Chinese-Lipsum  |  7.4       | 4.8                       | 1.5 x           |\r\n| Emoji-Lipsum    |  7.4       | 2.5                       | 3.0 x           |\r\n| Hebrew-Lipsum   |  7.4       | 3.5                       | 2.1 x           |\r\n| Hindi-Lipsum    |  7.3       | 3.0                       | 2.4 x           |\r\n| Japanese-Lipsum |  7.3       | 4.6                       | 1.6 x           |\r\n| Korean-Lipsum   |  7.4       | 1.8                       | 4.1 x           |\r\n| Latin-Lipsum    |  87        | 38                        | 2.3 x           |\r\n| Russian-Lipsum  |  7.4       | 2.7                       | 2.7 x           |\r\n\r\n\r\n\r\n\r\nOn a Neoverse V1 (Graviton 3), our validation function is 1.3 to over five times\r\nfaster than the standard library.\r\n\r\n| data set      | SimdUnicode speed (GB/s) | .NET speed (GB/s) |  speed up |\r\n|:----------------|:-----------|:--------------------------|:-------------------|\r\n| Twitter.json    |  14        | 8.7                        | 1.4 x           |\r\n| Arabic-Lipsum   |  4.2       | 2.0                       | 2.1 x           |\r\n| Chinese-Lipsum  |  4.2        | 2.6                       | 1.6 x           |\r\n| Emoji-Lipsum    |  4.2        | 0.8                       | 5.3 x           |\r\n| Hebrew-Lipsum   |  4.2        | 2.0                       | 2.1 x           |\r\n| Hindi-Lipsum    |  4.2        | 1.6                       | 2.6 x           |\r\n| Japanese-Lipsum |  4.2        | 2.4                       | 1.8 x           |\r\n| Korean-Lipsum   |  4.2        | 1.3                       | 3.2 x           |\r\n| Latin-Lipsum    |  42        | 17                        | 2.5 x           |\r\n| Russian-Lipsum  |  4.2        | 0.95                       | 4.4 x           |\r\n\r\n\r\n\r\nOn a Qualcomm 8cx gen3 (Windows Dev Kit 2023), we get roughly the same relative performance\r\nboost as the Neoverse V1.\r\n\r\n| data set      | SimdUnicode speed (GB/s) | .NET speed (GB/s) |  speed up |\r\n|:----------------|:-----------|:--------------------------|:-------------------|\r\n| Twitter.json    |  17        | 10                        | 1.7 x           |\r\n| Arabic-Lipsum   |  5.0       | 2.3                       | 2.2 x           |\r\n| Chinese-Lipsum  |  5.0       | 2.9                       | 1.7 x           |\r\n| Emoji-Lipsum    |  5.0       | 0.9                       | 5.5 x           |\r\n| Hebrew-Lipsum   |  5.0       | 2.3                       | 2.2 x           |\r\n| Hindi-Lipsum    |  5.0       | 1.9                       | 2.6 x           |\r\n| Japanese-Lipsum |  5.0       | 2.7                       | 1.9 x           |\r\n| Korean-Lipsum   |  5.0       | 1.5                       | 3.3 x           |\r\n| Latin-Lipsum    |  50        | 20                       | 2.5 x           |\r\n| Russian-Lipsum  |  5.0       | 1.2                       | 5.2 x           |\r\n\r\n\r\nOn a Neoverse N1 (Graviton 2), our validation function is up to over three times\r\nfaster than the standard library.\r\n\r\n| data set      | SimdUnicode speed (GB/s) | .NET speed (GB/s) |  speed up |\r\n|:----------------|:-----------|:--------------------------|:-------------------|\r\n| Twitter.json    |  7.8        | 5.7                        | 1.4 x           |\r\n| Arabic-Lipsum   |  2.5       | 0.9                       | 2.8 x           |\r\n| Chinese-Lipsum  |  2.5       | 1.8                       | 1.4 x           |\r\n| Emoji-Lipsum    |  2.5       | 0.7                       | 3.6 x           |\r\n| Hebrew-Lipsum   |  2.5       | 0.9                       | 2.7 x           |\r\n| Hindi-Lipsum    |  2.3       | 1.0                       | 2.3 x           |\r\n| Japanese-Lipsum |  2.4       | 1.7                       | 1.4 x           |\r\n| Korean-Lipsum   |  2.5       | 1.0                       | 2.5 x           |\r\n| Latin-Lipsum    |  23        | 13                        | 1.8 x           |\r\n| Russian-Lipsum  |  2.3      | 0.7                       | 3.3 x           |\r\n\r\n\r\n\r\nImportantly, there is no patent involved, and no licensing issue. We are eager for reviews, feedback and so forth. \r\n\r\nNote that we have other fast Unicode algorithms that could be implemented in C#, including fast transcoding functions. UTF-8 validation is simply the simplest non-trivial case.\r\n\r\n\r\nThis is joint work with @Nick-Nuon\r\n\r\n**Further reading**: [Validating gigabytes of Unicode strings per second… in C#?](https://lemire.me/blog/2024/06/20/validating-gigabytes-of-unicode-strings-per-second-in-c/) (blog post)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjPn_FQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6CBwVS",
                                           "createdAt":  "2024-06-20T20:24:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encoding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-20T20:24:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6M-f8V",
                                           "createdAt":  "2024-09-21T13:48:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODzGfrw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "Nick-Nuon",
                                                                               "createdAt":  "2024-09-21T14:02:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lemire",
                                           "body":  "The SimdUnicode C# code has been ported to Mojo (Chris Lattner\u0027s new programming language) and it is now part of their standard library... https://github.com/modularml/mojo/blob/nightly/stdlib/src/utils/_utf8_validation.mojo",
                                           "updatedAt":  "2024-09-21T13:48:43Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Consider using SimdUnicode.UTF8.GetPointerToFirstInvalidByte for UTF-8 validation",
        "labels":  [
                       "area-System.Text.Encoding"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106232",
        "createdAt":  "2024-08-11T06:06:39Z",
        "number":  106232,
        "author":  "kiddkaffeine",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-15T09:12:41Z",
        "body":  "### Description\n\nPer documentation, adding flags like\n\n### Reproduction Steps\n\n1. Create net8.0-ios or net8.0-android project.\r\n2. Add \u003cMtouchI18n\u003ecjk\u003c/MtouchI18n\u003e on iOS or \u003cMandroidI18n\u003ecjk\u003c/MandroidI18n\u003e on Android\r\n3. Attempt to use Shift JIS encoding, e.g.: System.Text.Encoding.GetEncoding(932)\n\n### Expected behavior\n\nShift JIS encoding returned.\n\n### Actual behavior\n\nException thrown that encoding is not supported.\n\n### Regression?\n\nUnknown, but possible based on workaround linked in documentation this worked in earlier .net releases and documentation is out of date.\n\n### Known Workarounds\n\nFollowing https://www.nuget.org/packages/System.Text.Encoding.CodePages/#readme-body-tab and adding this:\r\n\r\n// Register the CodePages encoding provider at application startup to enable using single and double byte encodings.\r\nEncoding.RegisterProvider(CodePagesEncodingProvider.Instance);\r\n\r\nSeems to fix.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiBIBjQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6IDkmV",
                                           "createdAt":  "2024-08-11T06:07:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encoding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-11T06:07:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IEE6J",
                                           "createdAt":  "2024-08-11T13:58:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "That is by design. The old options are no longer supported in modern .NET. `Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);` is the correct and documented way to achieve it.",
                                           "updatedAt":  "2024-08-11T13:58:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IEViF",
                                           "createdAt":  "2024-08-11T17:51:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kiddkaffeine",
                                           "body":  "Thanks for the feedback.  I\u0027m not sure if you guys control this or not but it seems like a lot of still maintained documentation refers to this, for example:\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/android/building-apps/build-properties#mandroidi18n",
                                           "updatedAt":  "2024-08-11T17:51:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IEgFM",
                                           "createdAt":  "2024-08-11T20:34:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODto6UA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2024-08-12T07:38:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "The behavior is documented in https://learn.microsoft.com/en-us/dotnet/api/system.text.encoding.getencoding?view=net-8.0#overloads. I\u0027ll let @matouskozak @vitek-karas @mdh1418 comment on the docs https://learn.microsoft.com/en-us/dotnet/android/building-apps/build-properties#mandroidi18n.",
                                           "updatedAt":  "2024-08-11T20:34:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IEgGF",
                                           "createdAt":  "2024-08-11T20:34:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-11T20:34:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IEgGN",
                                           "createdAt":  "2024-08-11T20:34:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-11T20:34:31Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "net8.0-ios / net8.0-android: mtouchi18n / mandroidi18n options do not apply?",
        "labels":  [
                       "area-System.Text.Encoding",
                       "os-android",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110388",
        "createdAt":  "2024-12-04T09:56:22Z",
        "number":  110388,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODNbN1w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2024-12-04T11:24:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jasper-d",
                                            "createdAt":  "2024-12-04T11:41:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MineCake147E",
                                            "createdAt":  "2024-12-06T02:27:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlgorithmsAreCool",
                                            "createdAt":  "2024-12-07T03:59:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zmj",
                                            "createdAt":  "2024-12-10T22:13:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lilinus",
                                            "createdAt":  "2024-12-17T09:02:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pentp",
                                            "createdAt":  "2025-01-29T13:17:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Peter-Juhasz",
                                            "createdAt":  "2025-02-09T15:50:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "petrroll",
                                            "createdAt":  "2025-06-27T18:59:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vladd",
                                            "createdAt":  "2025-08-30T09:08:18Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2025-08-30T12:28:29Z",
        "body":  "Today when dealing with converting utf16 text to utf8 text (or vice versa), we have 2 options:\n- Use higher-level methods that are inefficient\n- Use lower-level methods that are very efficient but harder to use\n\nThings are mostly great when the source text is in a single string or char[], but less great when the text is a stream of data, or broken into chunks. One of the problems is that we have multiple ways to represent these chunks of data and not enough APIs that support converting from one to the other.\n\n| Utf16 |\n|----|\n| string |\n| char[] |\n| ReadOnly/Span/Memory\\\u003cchar\\\u003e |\n| StringBuilder |\n| StreamReader/StreamWriter |\n| ReadOnlySequence\\\u003cchar\\\u003e |\n\n\n| Utf8 |\n|----|\n| byte[]  |\n| ReadOnly/Span/Memory\\\u003cbyte\\\u003e |\n| ReadOnlySequence\\\u003cbyte\\\u003e |\n| IBufferWriter\\\u003cbyte\\\u003e |\n| Stream |\n| PipeWriter/PipeReader |\n\n|Rune|\n|----|\n\n|APIs with encoding operations|\n|----|\n|Encoding.UTF8|\n|Rune.*|\n|Utf8.*|\n\n\nWhat further complicates things, is that there sometimes aren\u0027t good conversions between some of these types (and none that are allocation free).\n\nHere was an example that came up recently:\n\n```C#\npublic async Task ExecuteAsync(HttpContext httpContext)\n{\n    httpContext.Response.ContentType = $\"{MediaTypeNames.Text.Csv}; charset=utf-8\";\n    if (!string.IsNullOrWhiteSpace(filename))\n    {\n        httpContext.Response.Headers.Append(\"Content-Disposition\", $\"attachment; filename=\\\"{filename}.csv\\\"\");\n    }\n\n    // Don\u0027t dispose of writer as that will result in the synchronous version of\n    // httpContext.Response.Body.Write to be called which is not supported.\n    var writer = new StreamWriter(httpContext.Response.Body, Encoding.UTF8, bufferSize: 4096, leaveOpen: true);\n\n    var stringBuilder = new StringBuilder();\n    if (headerRowAction is not null)\n    {\n        headerRowAction.Invoke(stringBuilder);\n        await writer.WriteLineAsync(stringBuilder, cancellationToken);\n    }\n\n    await foreach (var item in items.WithCancellation(cancellationToken))\n    {\n        stringBuilder.Clear();\n        itemToRowAction.Invoke(item, stringBuilder);\n        await writer.WriteLineAsync(stringBuilder, cancellationToken);\n    }\n\n    await writer.FlushAsync(cancellationToken);\n}\n```\n\nThere are tons of copies here, StringBuilder -\u003e(copy) StreamWriter (char[] -\u003e(transcode) byte[]) -\u003e HttpResponseStream (copy).\n\nThis could be improved by writing the StringBuilder (assuming that\u0027s the right public API here) directly to the underlying HttpResponse buffer (PipeWriter/IBufferWrite\u003cbyte\u003e). The problem is, now I\u0027m stuck writing this complex encoding logic to translate utf16 to utf8.\n\nThis was another example https://www.reddit.com/r/dotnet/comments/1gx11ex/reading_streams_efficiently/.\n\nPS: We did some of this work in System.Memory for `ReadOnlySequence\u003cchar\u003e` a while back https://learn.microsoft.com/en-us/dotnet/api/system.text.encodingextensions?view=net-8.0. We\u0027d need to do similar work to expand the set of types that can participate in this conversion (OR we can push IBufferWriter\u003cT\u003e lower into the stack 😄).\n\nI\u0027d love to turn this into an API proposal once we get a handle on the problem.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwRLIKQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6aPBS0",
                                           "createdAt":  "2025-01-13T16:41:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@davidfowl we need to prioritize this to know if this is something need to be in .NET 10 release. For now, it is marked for the future. \n\nCC @GrabYourPitchforks @ericstj ",
                                           "updatedAt":  "2025-01-13T16:41:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A4GQk",
                                           "createdAt":  "2025-08-29T06:50:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "habbes",
                                           "body":  "@davidfowl I wanted to transcode a stream utf-16 (could also be in other encodings) encoded bytes into utf-8 byte buffer or buffer write/pipe writer in an efficient way. All APIs I\u0027ve found, `Encoding.UTF8.GetBytes`, `Encoding.Unicode.GetDecoder()`, `Utf8.FromUtf16` expect a `char` buffer. But there are no APIs that accept a byte buffer as the string input. If the utf-16 bytes have the same byte order as `char`, I am considering a reinterpret cast like `MemoryMarshal.Cast\u003cbyte, char\u003e`, for other scenarios, extra work may be involved (e.g. swapping bytes or decoding to `char`). Wanted to know whether this is within the scope of what you\u0027re proposing? Would be good to get APIs like `Utf8.FromUtf16()` that accept strings as `ReadOnlySpan\u003cbyte\u003e` instead of `char`. I\u0027ve also looked at the extensions: https://learn.microsoft.com/en-us/dotnet/api/system.text.encodingextensions and they all seem to accept `char` for strings.",
                                           "updatedAt":  "2025-08-29T13:11:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A9485",
                                           "createdAt":  "2025-08-29T15:31:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Since you mention that your scenario is streaming, note that using one-shot APIs that take a single buffer is going to easily introduce correctness issues as you\u0027re not handling trailing elements (e.g. did your first chunk end with half of a surrogate pair).\n\nThere\u0027s an `Encoding.CreateTranscodingStream` API that handles such things for you correctly.\nIt\u0027s a convenient wrapper over `Encoding.GetEncoder` \u0026 `Encoding.GetDecoder` APIs.\n```c#\nusing var ts = Encoding.CreateTranscodingStream(HttpContext.Request.Body, Encoding.Unicode, Encoding.UTF8, leaveOpen: true);\nawait ts.CopyToAsync(HttpContext.Response.Body, HttpContext.RequestAborted);\n```\n\nRe: `MemoryMarshal.Cast\u003cbyte, char\u003e`, note that you\u0027d be only able to use that if\n- you know that your input is properly aligned (`char`s must be 2-byte aligned),\n- you\u0027re manually dealing with trailing elements, and\n- you don\u0027t care about the sort of validation/normalization `Encoding.Unicode` does.",
                                           "updatedAt":  "2025-08-29T15:31:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BEsgp",
                                           "createdAt":  "2025-08-30T12:28:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "habbes",
                                           "body":  "@MihaZupan Thanks for the additional context. I meant stream as a general term for a flow of bytes. I could be an actual `Stream` object or it could be `PipeReader`, or some other source (some callers work with `IAsyncEnumerable\u003cReadOnlyMemory\u003cbyte\u003e\u003e` for example). That\u0027s why I was thinking of a flexible API like `Utf8.FromUtf16`, it could return the number of bytes read for example. Alternatively, it could be something like `Encoder.Encode` which maintains internal state to deal with trailing bytes. The main thing is that it\u0027s able to accept a bytes instead of chars. CreateEncodingStream would have been perfect if it were not tightly coupled to `Stream`. But sounds like there are lot of assumptions that must hold for such an API to exist.",
                                           "updatedAt":  "2025-08-30T12:28:29Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Add more efficient higher-level methods for converting between Utf16 and Utf8",
        "labels":  [
                       "area-System.Text.Encoding"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114998",
        "createdAt":  "2025-04-24T08:31:40Z",
        "number":  114998,
        "author":  "performanceautofiler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-05T21:18:32Z",
        "body":  "\u003c!-- DATA: {\"RunType\":{\"Repo\":\"dotnetruntime\",\"Branch\":\"refs/heads/main\",\"Arch\":\"ARM64\",\"Os\":\"Ubuntu2204\",\"Queue\":\"AmpereUbuntu\",\"Frequency\":\"Weekly\",\"CoreClr\":true,\"Mono\":false,\"Wasm\":false,\"Maui\":false,\"Configs\":[\"CompilationMode:tiered\",\"RunKind:micro\"]},\"RegressionDate\":\"2025-04-16T22:55:00\",\"IsRegression\":true} --\u003e\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | arm64\r\nOS | ubuntu 22.04\r\nQueue | AmpereUbuntu\r\nBaseline | [8d0a87c2380f661b4415a558c948e6d8a2c710c4](https://github.com/dotnet/runtime/commit/8d0a87c2380f661b4415a558c948e6d8a2c710c4)\r\nCompare | [b281500fa1f42732455f8d4f06bcb376d88cdfdd](https://github.com/dotnet/runtime/commit/b281500fa1f42732455f8d4f06bcb376d88cdfdd)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8d0a87c2380f661b4415a558c948e6d8a2c710c4...b281500fa1f42732455f8d4f06bcb376d88cdfdd)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Text.Encodings.Web.Tests.Perf_Encoders\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n|\u003cul\u003e\u003cli\u003e[EncodeUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments%3a%20JavaScript%2cno%20escaping%20required%2c512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Encodings.Web/Perf.Encoders.cs#L28-#L31\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1SwW4TMRC9R8o/DLk4EdvsdkOlNsgSUCIQqBJqAj0i1zubGHntxR63iSj/zjibXLiM5fHMm/fe2CIBYSSQ8E6sD5Gwm29wT/OV074xbhvnD/jIqUhx/g1D+/P4gCEOFfid2uupCtvUoaO4hC/qSa11MD0VzgNGrXpGgYC/kwnYFFeX9Uy8HY8sD1YtYeDJjSIk0+G0ruqri6q+qN9squtlfbmsFvObRV1d3ixeV9WyqmanzoC950bReHJIZUgu959xH4NyepffA7ax3KFqYtkp484F2rvWbPPkg1Od0dM/4tZ3vbGKjHd3LEssQZBBZiwKEPfJfTWuyUmuDl78zUQ+IX02kXwwWtmPitSDoV3GUcFE7+I0GytzKAap8hiLI3uZQ3GiKoejOBGTwzEbj16gD/4XaoI1BoOxgA/J2GbDYtekur6AH8omlHk/t55dwHCPMVl6/4RBbXE8KssXeN6xkBMCvGJwYi8iTCbkV3ttU4OTCZQlrPYMaRF8C62xjJU35xMvCuKxORMK6Hj9kP3WOxUInlk1TIcCeaa5196mzsn/6R6GfJRH3lxHhixKwfYhO304Xe9QxRQw/ykx+wehVJm1pAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 72.83 ns | 79.32 ns | 1.09 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[EncodeUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments%3a%20UnsafeRelaxed%2cno%20(escaping%20%2f)%20required%2c16).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Encodings.Web/Perf.Encoders.cs#L28-#L31\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1STW8TMRC9R8p/GHJxIrbZTUohDRgBJQIJVUJJSo/I3Z1NjLx2sMd0I9r/zji7uXCZkefjzZs3NkhAGAgkfBCbYyBspltsabqypau03YXpPT5wKFCYfkdf/zwl0IeuAu+oXoyV38UGLYUl3NmgalyjUS1WmXXwDkOpDowE+Xvw+Dtqz4nZ64l4OxwYHq9qQs/zK0VIusHxvJhfXRTzi/mrbbFYzmfL2eX0+vrN4moxe1kUy6KY9J0eD44bReXIIuU+2tR/xn3wypb7lPdYh3yPqgp5o7Q9F5TO1nqXJh+tanQ5/ituXHPQRpF29paXE0sQpJEJiwzEOtpv2lYpyNXeiedE5AvSVx3IeV0q81mRute0TzjK6+BsGCd5ZTJZt6o82ezEXiaT9VRl57KemOzcZDh4goN3v7Ak2KDXGDL4FLWptrzshlRzyOCHMhFlutKNYxXQrzFEQx//oFc7HA7y/Ake97xIjwAvGJxYiwCjEblVW5pY4WgEeQ6rliENgquh1oax0u1c5ENBODUnQh4tfwJIepd75QkeeWsYdwXyTLMtnYmNlf/TPXbxIE+8uY40GZSC5UNW+tg/b1GF6DH9LDH5B0yhQ9SqAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 16.32 ns | 19.60 ns | 1.20 | 0.05 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[EncodeUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments%3a%20Url%2c%26lorem%20ipsum%3ddolor%20sit%20amet%2c16).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Encodings.Web/Perf.Encoders.cs#L28-#L31\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1STWsbMRC9G/wfpj5UNt14N0scXBdB29SkEAIldppjUXZnbRV9GGnU2DT57x157UsvIzR68+bNGxkkIIwEEj6L1SES2uka9zRdusa32m3i9AmfORUpTn9g6H4dHzDEHoGP1M3HKmySRUdxAY/BFO+ND2hB72KysvV8g6gJlEUqLq8n4tNwYLiv6ggDN24VIWmL47qqZxdVfVFfrav5or5c1FfTaja//jibfaiqRVVNTpUBd54LRevJIZUhuVx/5n0OyjXb/B6wi+UWVRtLq7Q7AxrvOr3JnQ9OWd2M/4obb3faKNLe3fNUYgGCNAZsRQHiIbk77dqcZHTw4i0LuUX6riP5oBtlvilST5q2mUcFHb2L4+yrzKHoR5XHWBzVyxyKk1TZH8VJmOyPyXDwCrvgf2NDsMKgMRbwNWnTrnnYFSm7K+CnMgllXs+NZxcwPGBMhr78waA2OByU5Su8bHmQEwO8Y3JiLyKMRuSX+8akFkcjKEtY7pnSIPgOOm2Yi9cPPvGiIB6Ls6CAjrcP2e9mqwLBC08N4x4gzzL3jTfJOvm/3EOfj/Kom3GkyaAUbB+y04fT9R5VTPyF+EuJyT8Y2sHZowIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 64.91 ns | 70.76 ns | 1.09 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[EncodeUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf16(arguments%3a%20JavaScript%2c%26Hello%2b(World)!%2c16).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Encodings.Web/Perf.Encoders.cs#L33-#L35\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1SwW7bMAy9B8g/sDlMDurGdpoWgzcN29pgxYYCQ5Mtx0G16USDLAUU3SZY+++V4uSyCwVR5ON7jzLIwOgZJHwWi71nbCdL3PFkbitXa7v2kxU+hpRnP/mJ1Pw5PCD5vgJ/cVNcJ4rWXYuWfQnf1ZNaVKS3nL67Q2Pc+ceVI1N/OkuL67H4MByYMFM1jBSG1oqRdYvJNJ9eXeTTi+lsmb8vp0V5OZsUs6K4LK7O87zM8/Gxk3DrQqOoHVvkjDob+0+4j6RstYnvhI3PNqhqn7VK21NB5Wyj13Hy3qpWV8k/ceParTaKtbP3QZEoQbBGwlqkIB46+0PbOiZDNTnxGol8Q77Tnh3pSplbxWqleRNxFGnvrE+ipzKGtJcqDzE9sJcxpEeqsj/SIzHZH+Ph4AW25P5ixbBA0uhT+NppUy+D2AWrdpvCb2U6lHE1Ny64gPSAvjP85QlJrXE4yLIXeN4EIUcEOAvgHLzwMBqxm+8q09U4GkGWwXwXIA2Ca6DRJmCF1YPrwqLAH5ojIUIbNg/R72qjiOE5qIakL5AnmrvKma618n+6+z7v5YF3qGPNBqUI9mFwen+83qPyHWH8TWL8Bk2+Oa+fAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 66.24 ns | 74.76 ns | 1.13 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[EncodeUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf16(arguments%3a%20JavaScript%2cno%20escaping%20required%2c16).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Encodings.Web/Perf.Encoders.cs#L33-#L35\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1SUW/TMBB+r9T/cPTFrciSNHSDBVkCRgUCTUJrYY/Icy6tkWMH+7y1Yvx37KR94eUsn++++77vrJGA0BNweMc2R0/Y5Vs8UL420jbK7Hx+jw8x5cnn39C1P4cHdH6swO/ULq/mwu1Ch4Z8DV/Eo9hIp3rKjAX0UvQRBhz+Dsphky2vFuztdKLjYNESuji5EYSkOpxXZXV5UVYX1WpbvqmrZb1a5VV1/fry1fXLsqzLcnHqdNjb2MgaSwapcMGk/jPugxNG7tO7w9YXexSNLzqhzLlAWtOqXZp8NKJTcv6H3diuV1qQsuY2ymI1MFIYCbMM2F0wX5VpUjJWO8v+JiKfkD4rT9YpKfRHQeJe0T7hCKe8NX6ejOUpZKNUPsRsYM9TyE5U+XhkJ2J8PBbTyTP0zv5CSbBBp9Bn8CEo3Wyj2A2Jrs/gh9ABedrPjY0uoLtDHzS9f0QndjidFMUzPO2jkBMCvIjgFL3wMJuRXR+kDg3OZlAUsD5ESI1gW2iVjlhpcTbERYEfmhMhhyauH5Lfci8cwVNUDfOxgJ9pHqTVoTP8f7rHMe/5wDvWkSKNnEX7MDp9PF1vUfjgMH0ptvgHT9Y0faQCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 20.37 ns | 22.12 ns | 1.09 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[EncodeUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments%3a%20Url%2c%ef%bf%bd2020%2c512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Encodings.Web/Perf.Encoders.cs#L28-#L31\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1SwY7TMBC9V+o/DL24Fdkkm23REmQJWCqQ0Epo22WPyJtMGiPHruwJ24rl0xCfxC8wTtoLl7E8fvPmzRsbJCAMBBLeis0xEHbpFg+Urm3lam13IX3AR04FCukX9M234QF9GBF4T831XPld36GlUMK9N8nfP7+LvMiT1WWxEG+mE8NNVEPouUutCEl3OGfE6iIvLorlNr8ui8tytUyv8vzq1evlyzwv83xxqvS4d1woakcWKfO9jfVn3kevbNXGd49NyFpUdcg6pe0ZUDnb6F3sfLSq09X8p7hx3V4bRdrZWx5BlCBIo8daJCDuevtZ2zomGe2d+BWFfET6pAM5rytlPihSD5rayKO8Ds6GeTRRxpCMo8ohJoN6GUNykirHIzkJk+OxmE6eYe/dd6wINug1hgTe99rUWx52Q6rbJ/BVmR5l3MWNYxfQ32HoDb37gV7tcDrJsmd4anmQEwO8YHJiLwLMZuTWh8r0Nc5mkGWwPjClQXANNNowF+8aXM+LgjAUR0EeLa8aot9VqzzBE08N8xEgzzIPlTN9Z+X/co9jPshBN+NIk0Ep2D5kp4+n6y2q0HuM/0cs/gEJ6oo1kAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 105.35 ns | 117.50 ns | 1.12 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[EncodeUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments%3a%20JavaScript%2c%26Hello%2b(World)!%2c512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Encodings.Web/Perf.Encoders.cs#L28-#L31\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1SwW7bMAy9B8g/sDlMCerGrpGggTcN27pgxYoCQ5Mtx0G16USDLAUU3SZY9++VYueyCwVR5ON7jzLIwOgZJHwSq6NnbKZrPPB0aUtXabv10w0+hZRnP/2BVP8+PSD5rgJ/cr0YK9q2DVr2BXxXz2pVkt5z8u4OjXGXHzaOTPXxIplf5xPxfjgwYaaqGSkMrRQj6wbHeZbPr7L8Kp+ts0WR50U2m86u57PFzc1llhVZNuk7CfcuNIrKsUVOqbWx/4z7RMqWu/hOWPt0h6ryaaO0PReUztZ6GycfrWp0Of4rbl2z10axdvYhKBIFCNZIWIkExGNr77WtYjJUkxP/IpFvyHfasyNdKvNVsdpo3kUcRdo768fRUxlD0kmVp5ic2MsYkp6q7I6kJya7YzIcvMKe3B8sGVZIGn0CX1ptqnUQu2LV7BP4pUyLMq7m1gUXkB7Rt4Y/PyOpLQ4HafoKL7sgpEeAiwDOwQsPoxG75aE0bYWjEaQpLA8B0iC4GmptAlZYPbg2LAr8qTkSIrRh8xD9LneKGF6Cahh3BfJM81A60zZW/k/32OW9PPEOdazZoBTBPgxOH/vrAyrfEsbvJCZv9bmjdZ8CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 100.94 ns | 116.89 ns | 1.16 | 0.00 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[EncodeUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments%3a%20JavaScript%2c%26Hello%2b(World)!%2c16).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Encodings.Web/Perf.Encoders.cs#L28-#L31\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1SwW7bMAy9B8g/sDlMDurGrpF0QTYN29pgxYYCQ5Mtx0G16USDLAUU3SZY9++TYueyCwVR5ON7jzLIwOgZJHwUq6NnbCZrPPBkaUtXabv1kw0+hZRnP/mOVP86PSD5rgJ/cD1PFG3bBi37BXxVz2pVkt5z+uYejXGX7zeOTPXhIr2+GYt3w4EJI1XNSGFmpRhZN5gUeTG7yourYrrO54uiWFxPJ9P521k+u7nM80Wej/tOwr0LjaJybJEzam3sP+M+kbLlLr4T1j7boap81ihtzwWls7XexslHqxpdJn/ErWv22ijWzj4EQWIBgjUSViIF8djab9pWMRmqyYm/kcgX5Hvt2ZEulblTrDaadxFHkfbO+iRaKmNIO6nyFNMTexlD2lOV3ZH2xGR3jIeDV9iT+40lwwpJo0/hc6tNtQ5iV6yafQo/lWlRxs3cuuAC0iP61vCnZyS1xeEgy17hZReE9AhwEcA5eOFhNGK3PJSmrXA0giyD5SFAGgRXQ61NwAqbB9eGRYE/NUdChDYsHqLf5U4Rw0tQDUlXIM80D6UzbWPl/3SPXd7LE+9Qx5oNShHsw+D0sb8+oPItYfxNYvwPnpxBtZ4CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 45.03 ns | 54.18 ns | 1.20 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[EncodeUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf16(arguments%3a%20UnsafeRelaxed%2chello%20%22there%22%2c16).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Encodings.Web/Perf.Encoders.cs#L33-#L35\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1SwWrcMBC9L+w/TH2Rlzq2YxITXARt06WFEii7m+RYFHu8VpGlRRo3Xpr+eyXbe+llhEZv3rx5I4UEhI6Aw0e2PzvCPj3gSOlW16aR+ujSZ3zxKUcu/YG2/Tk9oHUzAh+pvS5jYY9Dj5pcBY/aiRZ3qMSITdKhUgYi6tBilFyXG/ZhvVK+qWgJre/aCEKSPcZFXtxe5cVVcXPI76qiqIqbtCzu8rLM3+d5leebpdLiyfhC1hjSSJkddKi/8L5YoesuvFtsXdahaFzWC6kvgNroVh5D57MWvazjP+ze9CepBEmjH/xIrAJG0gtuWAJsN+jvUjch6dHWsL9ByFekb9KRsbIW6osg8SypCzzCSme0i4OpPIRkHpVPMZnU8xCSRSqfj2QRxudjs169wcmaX1gT7NFKdAl8HqRqDn7YPYn+lMCTUAPysJt7411Au0M3KPr0G6044nqVZW/wGpxfGOCdJyfvhYMoIrMdazU0GEWQZbAdPaVCMC20Unkuv3swg18UuKk4CLKo/eoh+F13whK8+qkhngH8InOsjRp6zf+Xe57zjk+6PY4kKeTM24fe6fNyfUDhBovhO7HNP02j2D6gAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 38.67 ns | 46.13 ns | 1.19 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[EncodeUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf16(arguments%3a%20Url%2c%ef%bf%bd2020%2c16).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Encodings.Web/Perf.Encoders.cs#L33-#L35\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1SwW7bMAy9B8g/cLkowVzbddqs8CBgWxd0wFBgaNL1OKg2nWiQpUCi1wTrPq3oJ+0XRtnJZRcKoh4fHx9lkIAwEEj4IFaHQNima9xTurSVq7XdhPQBHzkVKKTf0Dc/+gf0YUDgPTXni6nym65FS6GEe2+Sv68vRV7kyfliJt6PR4abqIbQc5daEZJuccqAy7O8OCsu1vlVWRTl/CJ9N7+aF5eLt3le5vnsWOlx57hQ1I4sUuY7G+tPvI9e2Wob3z02IduiqkPWKm1PgMrZRm9i54NVra6mv8W1a3faKNLO3vIIogRBGj3WIgFx19mv2tYxyWjvxJ8o5Abpiw7kvK6U+axIPWjaRh7ldXA2TKOJMoZkGFX2MenVyxiSo1Q5HMlRmByO2Xj0DDvvfmJFsEKvMSTwqdOmXvOwK1LtLoHvynQo4y6uHbuA/g5DZ+jjL/Rqg+NRlj3D05YHOTLAGyYn9iLAZEJuua9MV+NkAlkGyz1TGgTXQKMNc/GuwXW8KAh9cRTk0fKqIfpdbZUneOKpYToA5EnmvnKma638X+5hyAfZ62YcaTIoBduH7PTheL1FFTqP8fuI2T9lDZq3kAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 43.36 ns | 53.20 ns | 1.23 | 0.00 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[EncodeUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments%3a%20UnsafeRelaxed%2chello%20%22there%22%2c512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Encodings.Web/Perf.Encoders.cs#L28-#L31\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1SwW7bMAy9B8g/cL7IwVzbc9Mh9SBgWxd0wFBgSNL1OKg2HWuQpUCiVwfr/n2S7Vx2oSDq8fHxUQoJCB0Bh49sf3aEXXrAgdKtrkwt9dGlT/jsU45c+h1t83N8QOsmBD5Ss4mFPfYdanIlPGonGtyhEgPWSYtKGYioRYtRcvOuWLEPy4XyTUVDaH3XWhCS7DAu8uLmKi+uivUh35RFUa7X6eb6/e3m+vZtnpd5vporLZ6ML2S1IY2U2V6H+gvvsxW6asO7xcZlLYraZZ2Q+gKojG7kMXQ+a9HJKv7D7kx3kkqQNPrBj8RKYCS94polwHa9/iZ1HZIebQ37G4TcI32VjoyVlVBfBIknSW3gEVY6o10cTOUhJNOofIzJqJ6HkMxS+XQkszA+Havl4hVO1vzCimCPVqJL4HMvVX3ww+5JdKcEfgjVIw+7uTPeBbQ7dL2iT7/RiiMuF1n2Ci/B+pkB3nhy8l44iCIy26FSfY1RBFkG28FTKgTTQCOV5/K7B9P7RYEbi4Mgi9qvHoLfVSsswYufGuIJwC8yh8qovtP8f7nnKe/4qNvjSJJCzrx96J0+z9cHFK63GP4TW/0DlLDS3KACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 90.22 ns | 103.79 ns | 1.15 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[EncodeUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments%3a%20JavaScript%2cno%20escaping%20required%2c16).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Encodings.Web/Perf.Encoders.cs#L28-#L31\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1SUW/TMBB+r9T/cPTFrciSLHRTCbIEjGoINAmthT0iz7m0Ro4d7PPWivHfsZP2hZezfL777vu+s0YCQk/A4T3bHD1hl2/xQPnaSNsos/P5Az7GlCeff0PX/hwe0PmxAr9Tu5oLtwsdGvI1fBFPYiOd6ikzFtBL0UcUcPg7KIdNdnm9YO+mEx3nipbQxcGNICTV4bwqq6uLsrqolttyVVdVfbXM314uyzer69dlWZfl4tTpsLexkTWWDFLhgkn9Z9xHJ4zcp3eHrS/2KBpfdEKZc4G0plW7NPloRKfk/A+7sV2vtCBlzV1UxWpgpDASZhmw+2C+KtOkZKx2lv1NRG6RPitP1ikp9CdB4kHRPuEIp7w1fp585Slko1Q+xGxgz1PITlT5eGQnYnw8FtPJC/TO/kJJsEGn0GfwMSjdbKPYDYmuz+CH0AF5Ws+NjS6gu0cfNH14Qid2OJ0UxQs876OQEwK8iuAUvfAwm5FdH6QODc5mUBSwPkRIjWBbaJWOWGlxNsRFgR+aEyGHJm4fkt9yLxzBc1QN87GAn2kepNWhM/x/uscx7/nAO9aRIo2cRfswOn08Xe9Q+OAwfSm2+AcyhLbIowIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 16.70 ns | 19.65 ns | 1.18 | 0.03 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[EncodeUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments%3a%20UnsafeRelaxed%2chello%20%22there%22%2c16).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Encodings.Web/Perf.Encoders.cs#L28-#L31\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1SwW7bMAy9B8g/cL4owVzbc9uh8CBgWxeswFCgSNL1OKg2HWuQpUCiVgfr/n2S7Vx6oSDq8fHxUQoJCB0Bh89sd3KEfbbHgbKNrk0j9cFlT/gcUo5c9oC2/TU+oHUTAh+pvVkJe/A9anIVPGonWtyiEgM2aYdKGUioQ4tJ+uHjmn1aLlToKVpCG5o2gpBkj6uyKK8vivKivNoXN1V5WRXXWVGWl1dF+b4oqqJYz5UWjyYUssaQRsqt17H+zPtsha67+G6xdXmHonF5L6Q+A2qjW3mInU9a9LJe/WW3pj9KJUgafR8mYhUwkkFww1JgW69/SN3EZEBbw/5FId+R7qQjY2Ut1DdB4klSF3mElc5ot4qe8hjSaVQ+xnRUz2NIZ6l8OtJZGJ+O9XLxCkdrfmNNsEMr0aXw1UvV7MOwOxL9MYWfQnnkcTW3JriAdovOK/ryB6044HKR56/wEp2fGeBdIKfghYMkIbMZauUbTBLIc9gMgVIhmBZaqQJXWD0YHxYFbiyOgizqsHmIftedsAQvYWpYTQB+ljnURvle87dyT1Pe8VF3wJEkhZwF+zA4fZqv9yictxi/E1v/BxqE9w6fAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 32.39 ns | 41.98 ns | 1.30 | 0.00 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[EncodeUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments%3a%20Url%2c%ef%bf%bd2020%2c16).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Encodings.Web/Perf.Encoders.cs#L28-#L31\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl1SwW4TMRC9R8o/DLk4EdtdZ0urKMgSUCIqoUqoSekRubuziZHXjuxZmojyaYhP4hcYZzcXLmN5/ObNmze2SEAYCRS8E+tjJGzzDR4oX7nK18ZtY/6IT5yKFPMvGJpvpwcMsUfgAzWLqQ7brkVHcQkPwWZ///wuZSmz+fVMvB2PLPfQDWHgJrUmJNPilAFXF7K8KN9s5GJZXi7nV/lcXl+WcvFayqWUs6Ey4N5zoag9OaQidC7Vn3mfgnbVLr0HbGKxQ13HotXGnQGVd43Zps5Hp1tTTX+KG9/ujdVkvLvjCcQSBBkMWIsMxH3nPhtXpySjgxe/kpBPSLcmkg+m0vajJv1oaJd4dDDRuzhNHqoUsn5UdYrZSb1KIRukqv7IBmGqP2bj0Qvsg/+OFcEag8GYwYfO2HrDw65Jt/sMvmrboUqruPHsAoZ7jJ2l9z8w6C2OR0XxAs87HmRggFdMTuxFhMmE/OpQ2a7GyQSKAlYHprQIvoHGWObiVYPveFEQT8VJUEDHm4bkd7XTgeCZp4ZpD1BnmYfK26516n+5xz4f1Uk348iQRSXYPmSnj8P1DnXsAqbvI2b/ANYHbn+PAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 51.23 ns | 58.22 ns | 1.14 | 0.00 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders_001.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders_002.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders_003.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders_004.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders_005.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders_006.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders_007.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders_008.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders_009.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders_010.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders_011.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders_012.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders_013.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders_014.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders.html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Text.Encodings.Web.Tests.Perf_Encoders*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments: JavaScript,no escaping required,512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments: UnsafeRelaxed,no \u0026lt;escaping /\u0026gt; required,16)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments: Url,\u0026lorem ipsum=dolor sit amet,16)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf16(arguments: JavaScript,\u0026Hello+\u0026lt;World\u0026gt;!,16)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf16(arguments: JavaScript,no escaping required,16)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments: Url,�2020,512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments: JavaScript,\u0026Hello+\u0026lt;World\u0026gt;!,512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments: JavaScript,\u0026Hello+\u0026lt;World\u0026gt;!,16)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf16(arguments: UnsafeRelaxed,hello \"there\",16)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf16(arguments: Url,�2020,16)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments: UnsafeRelaxed,hello \"there\",512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments: JavaScript,no escaping required,16)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments: UnsafeRelaxed,hello \"there\",16)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments: Url,�2020,16)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n---\r\n\r\n\r\n### Run Information\r\n\r\nName | Value\r\n-- | --\r\nArchitecture | arm64\r\nOS | ubuntu 22.04\r\nQueue | AmpereUbuntu\r\nBaseline | [8d0a87c2380f661b4415a558c948e6d8a2c710c4](https://github.com/dotnet/runtime/commit/8d0a87c2380f661b4415a558c948e6d8a2c710c4)\r\nCompare | [b281500fa1f42732455f8d4f06bcb376d88cdfdd](https://github.com/dotnet/runtime/commit/b281500fa1f42732455f8d4f06bcb376d88cdfdd)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8d0a87c2380f661b4415a558c948e6d8a2c710c4...b281500fa1f42732455f8d4f06bcb376d88cdfdd)\r\nConfigs | CompilationMode:tiered, RunKind:micro\r\n\r\n\r\n### Regressions in System.Text.Json.Tests.Perf_Strings\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n|\u003cul\u003e\u003cli\u003e[WriteStringsUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Text.Json.Tests.Perf_Strings.WriteStringsUtf16(Formatted%3a%20False%2c%20SkipValidation%3a%20False%2c%20Escaped%3a%20AllEscaped).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.Strings.cs#L100-#L116\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl2RUW/TMBDH3yv1Oxx9cSuyJmTA1iBLjNGBQJPQWtgjMsmlNTh2ZF+2VozvzjlJeeDlbF/u/vnd/wwSEAYCCW/F5hgIm+UWD7T8FJzlW6Cw/IK+/r4hr+0uLO+9JhwfX6l+8Xp+43yjiLAq4EaZgAlsfun2mzK6UqSd/Zdeh1K1sezKmPG+EG+mE8MMqib0DMEtSLrBeZ7lr86y/Cx/uc0ui/yiOM+Xq1V2ubo4f55lRZYtxk6PreNGUTmySKnvbOw/6f7wypb7+N1jHdI9qiqkjdL2VFA6W+td/PPRqkaX89/i2jWtNj37ratQFCBIo8dKJCDuOvtZ2yomudo78SeCfED6qAM5r0tl3itS95r2UUd5zUaGefRYxpAMo8o+Jj29jCEZUeVwJCOYHI7FdPIErXc/sSTYoNcYEnjXaVNtedgNqaZNgC3vUMadXTt2Af0dhs7Q1QN6tcPpJE2f4HHPg4wK8IzFib0IMJuRWx9K01U4m0GawvrAkgbB1VBrw1q8b3AdLwpC3xyBPNqKtxb9LvfKEzzy1DAfCuQJ81A60zVW/o97HPJB9txcR5oMSsH2ITt9HJ+3qELnsUFLYvEXqvjHVa8CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 85.45 ms | 96.13 ms | 1.13 | 0.15 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[WriteStringsUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_ubuntu 22.04/System.Text.Json.Tests.Perf_Strings.WriteStringsUtf16(Formatted%3a%20True%2c%20SkipValidation%3a%20False%2c%20Escaped%3a%20AllEscaped).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.Strings.cs#L100-#L116\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl2RUW/TMBDH3yv1Oxx9cSuyJMs2BkGWGKNjAk1Ca2GPyCSX1uDYkX3ZWrF9d85N+sLL2b7c/fO7/xkkIAwEEj6I1T4Qtukad5R+Cc7yLVBIv6Fvfq7Ia7sJ6YPXhOPjOzWnb+Y3zreKCOsS1r7HBFZ/dPdDGV0r0s6WcKNM4PQyVKqLVVfGjPeFeD+dGEZQDaFnBm5B0i3Oi7y4OMmLk+J8nb8ti8vy/Cw9zd9dnl0Ur/O8zPPF2Omxc9woakcWKfO9jf1H3V9e2Wobv3tsQrZFVYesVdoeCypnG72Jf95b1epq/ldcu7bT5sB+52oUJQjS6LEWCYj73n7Vto5JrvZOvESQz0i3OpDzulLmkyL1oGkbdZTX7GOYR4tlDMkwqjzE5EAvY0hGVDkcyQgmh2MxnTxD591vrAhW6DWGBD722tRrHnZFqu0SYMt7lHFl145dQH+PoTd09YhebXA6ybJneNryIKMCvGJxYi8CzGbklrvK9DXOZpBlsNyxpEFwDTTasBavG1zPi4JwaI5AHm3NW4t+V1vlCZ54apgPBfKIuauc6Vsr/8fdD/kgD9xcR5oMSsH2ITu9H593qELvsUVLYvEPabRn3a4CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 85.50 ms | 95.69 ms | 1.12 | 0.15 | False | | |\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Json.Tests.Perf_Strings_001.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Json.Tests.Perf_Strings_002.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/04_24_2025/refs/heads/main_arm64_ubuntu%2022.04_Regression/System.Text.Json.Tests.Perf_Strings.html\u003e)\r\n\r\n### Repro\r\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npython3 .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Text.Json.Tests.Perf_Strings*\u0027\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n### System.Text.Json.Tests.Perf_Strings.WriteStringsUtf16(Formatted: False, SkipValidation: False, Escaped: AllEscaped)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Tests.Perf_Strings.WriteStringsUtf16(Formatted: True, SkipValidation: False, Escaped: AllEscaped)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwkw5ig==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6okvJ5",
                                           "createdAt":  "2025-04-24T16:24:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "Looks like it was https://github.com/dotnet/runtime/pull/114494",
                                           "updatedAt":  "2025-04-24T16:24:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6okvbv",
                                           "createdAt":  "2025-04-24T16:25:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "Fyi @MihaZupan ",
                                           "updatedAt":  "2025-04-24T16:25:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6okw38",
                                           "createdAt":  "2025-04-24T16:27:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "Related\n\n* https://github.com/dotnet/perf-autofiling-issues/issues/54310\n* https://github.com/dotnet/perf-autofiling-issues/issues/54104\n* https://github.com/dotnet/perf-autofiling-issues/issues/54085",
                                           "updatedAt":  "2025-04-24T16:47:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ouzYr",
                                           "createdAt":  "2025-04-25T16:12:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encoding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-25T16:12:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ovwvf",
                                           "createdAt":  "2025-04-25T18:09:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQT_fA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2025-04-30T15:05:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@MihaZupan could you please have a look?",
                                           "updatedAt":  "2025-04-25T18:09:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_KSGt",
                                           "createdAt":  "2025-08-20T16:35:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrewScoggins",
                                           "body":  "@MihaZupan many of these tests still have regressions. Have we taken a look at this?",
                                           "updatedAt":  "2025-08-20T16:35:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CTDmK",
                                           "createdAt":  "2025-09-05T21:18:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "I\u0027m not seeing any meaningful regressions for Json tests (https://github.com/MihuBot/runtime-utils/issues/1443, https://github.com/MihuBot/runtime-utils/issues/1444, https://github.com/MihuBot/runtime-utils/issues/1445).\n\nMoving this out of 10.0 given that Json seems fine.\n\n\nFor `Perf_Encoders` on X64, the only consistent regression seems to be for the short UrlEncoder case.\nBut on ARM64, there are a bunch of regressed cases for `Perf_Encoders`: https://github.com/MihuBot/runtime-utils/issues/1442 (\"PR\" here being a revert of the change). Could be some codegen difference compared to `SearchValues`, this is worth investigating further for 11.",
                                           "updatedAt":  "2025-09-05T21:18:32Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[Perf] Linux/arm64: 16 Regressions on 4/16/2025 10:55:00 PM +00:00",
        "labels":  [
                       "area-System.Text.Encoding",
                       "tenet-performance",
                       "tenet-performance-benchmarks",
                       "runtime-coreclr",
                       "PGO"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117486",
        "createdAt":  "2025-07-09T23:08:51Z",
        "number":  117486,
        "author":  "tarekgh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T23:04:10Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1090193\nBuild error leg or test failing: WasmTestOnChrome-ST-System.Text.Encoding.CodePages.Tests.WorkItemExecution\nPull request: https://github.com/dotnet/runtime/pull/117474\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"OpenQA.Selenium.WebDriverTimeoutException: timeout: Timed out receiving message from renderer\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1090193\r\n**Error message validated:** `[OpenQA.Selenium.WebDriverTimeoutException: timeout: Timed out receiving message from renderer`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 7/9/2025 11:10:54 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1150471](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150471)|dotnet/runtime|[WasmTestOnChrome-ST-System.Memory.Data.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150471\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31783000\u0026resultId=186292)|dotnet/runtime#119754|\r\n|[1148547](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148547)|dotnet/runtime|[WasmTestOnChrome-ST-System.Collections.Concurrent.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148547\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31719546\u0026resultId=185311)||\r\n|[1147118](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147118)|dotnet/runtime|[WasmTestOnChrome-ST-System.Reflection.MetadataLoadContext.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147118\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31664344\u0026resultId=174491)||\r\n|[1145755](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145755)|dotnet/runtime|[WasmTestOnChrome-ST-System.Text.Json.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145755\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31614446\u0026resultId=185696)|dotnet/runtime#119584|\r\n|[1144352](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144352)|dotnet/runtime|[WasmTestOnChrome-ST-Microsoft.Extensions.Configuration.Xml.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144352\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31564820\u0026resultId=174989)||\r\n|[1143631](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143631)|dotnet/runtime|[WasmTestOnChrome-ST-System.Net.Primitives.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143631\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31538944\u0026resultId=186064)|dotnet/runtime#119467|\r\n|[1143169](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143169)|dotnet/runtime|[WasmTestOnChrome-ST-System.Reflection.DispatchProxy.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143169\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31520818\u0026resultId=186334)|dotnet/runtime#100729|\r\n|[1141888](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141888)|dotnet/runtime|[WasmTestOnChrome-ST-System.Collections.Specialized.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141888\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31475874\u0026resultId=174534)||\r\n|[1140474](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140474)|dotnet/runtime|[WasmTestOnChrome-ST-System.Transactions.Local.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140474\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31424722\u0026resultId=185984)|dotnet/runtime#119395|\r\n|[1140453](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140453)|dotnet/runtime|[WasmTestOnChrome-ST-System.Diagnostics.Tools.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140453\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31423708\u0026resultId=186162)||\r\n|[1138486](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138486)|dotnet/runtime|[WasmTestOnChrome-ST-System.IO.Hashing.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138486\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31361066\u0026resultId=196345)|dotnet/runtime#119307|\r\n|[1137302](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1137302)|dotnet/runtime|[WasmTestOnChrome-ST-System.Diagnostics.TextWriterTraceListener.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1137302\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31319756\u0026resultId=186284)|dotnet/runtime#118732|\r\n|[1137027](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1137027)|dotnet/runtime|[WasmTestOnChrome-ST-System.Data.DataSetExtensions.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1137027\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31311266\u0026resultId=185694)|dotnet/runtime#118991|\r\n|[1135246](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135246)|dotnet/runtime|[WasmTestOnChrome-ST-System.Xml.XmlSerializer.ReflectionOnly.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135246\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31249256\u0026resultId=186057)|dotnet/runtime#118361|\r\n|[1134807](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134807)|dotnet/runtime|[WasmTestOnChrome-ST-System.Runtime.ReflectionInvokeEmit.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134807\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31236332\u0026resultId=182350)||\r\n|[1134703](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134703)|dotnet/runtime|[WasmTestOnChrome-ST-System.Diagnostics.Tools.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134703\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31229418\u0026resultId=186205)|dotnet/runtime#118805|\r\n|[1134209](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134209)|dotnet/runtime|[WasmTestOnChrome-ST-System.Net.Security.Enterprise.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134209\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31217236\u0026resultId=186321)|dotnet/runtime#118985|\r\n|[1133564](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133564)|dotnet/runtime|[WasmTestOnChrome-ST-System.IO.Pipelines.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133564\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31194950\u0026resultId=185937)|dotnet/runtime#119158|\r\n|[1132454](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132454)|dotnet/runtime|[WasmTestOnChrome-ST-System.IO.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132454\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31161602\u0026resultId=174425)||\r\n|[1132123](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132123)|dotnet/runtime|[WasmTestOnChrome-ST-System.Runtime.Intrinsics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132123\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31150612\u0026resultId=109493)||\r\n|[1131141](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131141)|dotnet/runtime|[WasmTestOnChrome-ST-System.Linq.AsyncEnumerable.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131141\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31121496\u0026resultId=185974)|dotnet/runtime#119059|\r\n|[1129671](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1129671)|dotnet/runtime|[WasmTestOnChrome-ST-Microsoft.Extensions.Logging.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1129671\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31075172\u0026resultId=196383)|dotnet/runtime#118957|\r\n|[1129101](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1129101)|dotnet/runtime|[WasmTestOnChrome-ST-System.Net.Http.Enterprise.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1129101\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31057042\u0026resultId=175030)||\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|2|23|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxIOXBg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc62Djck",
                                           "createdAt":  "2025-07-09T23:09:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-09T23:09:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc62Sqkq",
                                           "createdAt":  "2025-07-10T17:37:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encoding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-10T17:37:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Eg5cG",
                                           "createdAt":  "2025-09-16T09:18:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Note this is problem of the browser on our CI, not a problem of dotnet product.",
                                           "updatedAt":  "2025-09-16T09:18:49Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[wasm] OpenQA.Selenium.WebDriverTimeoutException: timeout: Timed out receiving message from renderer",
        "labels":  [
                       "arch-wasm",
                       "area-System.Text.Encoding",
                       "blocking-clean-ci",
                       "Known Build Error"
                   ]
    }
]
