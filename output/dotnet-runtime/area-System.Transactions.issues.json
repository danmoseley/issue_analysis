[
    {
        "url":  "https://github.com/dotnet/runtime/issues/1421",
        "createdAt":  "2018-12-14T07:45:49Z",
        "number":  1421,
        "author":  "damiand2",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-23T22:54:06Z",
        "body":  "when using TransactionScope with  TransactionScopeAsyncFlowOption.Enabled current transaction gets copied to new threads that were manually created/queued and have nothign to do with async. With TransactionScopeAsyncFlowOption.Suppress code works as intended (transaction does not propagate to other threads)\r\n\r\nSample code to reproduce issue (.net core 2.1):\r\n\r\n```c#\r\n       class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"TransactionScopeAsyncFlowOption.Enabled\");\r\n            var scope = new TransactionScope(TransactionScopeOption.RequiresNew, TransactionScopeAsyncFlowOption.Enabled);\r\n\r\n            var t = Transaction.Current;\r\n            Console.WriteLine(\"Transaction in main thread present:\" + (t != null));\r\n            var thread = new Thread(Dowork);\r\n            thread.Start();\r\n            ThreadPool.QueueUserWorkItem(ThreadPoolThreadWork);\r\n\r\n\r\n            Console.ReadLine();\r\n        }\r\n\r\n        private static void ThreadPoolThreadWork(object state)\r\n        {\r\n            var t = Transaction.Current;\r\n            Console.WriteLine(\"Transaction in threadpool thread present:\" + (t != null));\r\n        }\r\n\r\n        private static void Dowork(object obj)\r\n        {\r\n\r\n            var t = Transaction.Current;\r\n            Console.WriteLine(\"Transaction in manually created thread present:\" + (t != null));\r\n        }\r\n    }\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHbrx4Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NzM3NzI1NQ==",
                                           "createdAt":  "2018-12-14T16:28:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@damiand2 do you have a question regarding that? It seems that it is doing what it\u0027s supposed to do (based on option names). Or do you see a problem?",
                                           "updatedAt":  "2018-12-14T16:28:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NzU2MzM2Nw==",
                                           "createdAt":  "2018-12-15T12:00:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "damiand2",
                                           "body":  "sorry i wasnt clear - it is not doing what is it supposed to do, Transactions from one thread should not migrate \u0027automatically\u0027 to other threads (as happens when you use TransactionScopeAsyncFlowOption.Suppress or as when happened before \u0027async\u0027 was introduced to .net). Sample code does not use any async feature and therefore should get the same behavior as with TransactionScopeAsyncFlowOption.Suppress (suppress async and no async from logical point of view it the same)",
                                           "updatedAt":  "2018-12-15T12:00:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NzYwMDk5Nw==",
                                           "createdAt":  "2018-12-15T22:04:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@damiand2 I am not expert on transactions, so I don\u0027t understand why you think this is true:\r\n\u003e Sample code does not use any async feature and therefore should get the same behavior as with TransactionScopeAsyncFlowOption.Suppress\r\n\r\nIs it based on documentation? Or is it based on how you think it should behave (aka view point)?",
                                           "updatedAt":  "2018-12-15T22:04:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NzY0NTA5NA==",
                                           "createdAt":  "2018-12-16T13:52:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I see the same behavior on .NET Framework. You\u0027re right that it has nothing to do with async in particular (even though it\u0027s named as such), it\u0027s to do with the ExecutionContext flow. The ExecutionContext is captured and restored when using various APIs in .NET Framework (usually callback based APIs) to ensure the \"context\" (we can talk about what exactly flows later) is the same at execution time as it was when the callback was captured.\r\n\r\nSome of the common APIs that have this behavior:\r\n- new Thread\r\n- QueueUserWorkItem\r\n- new Timer\r\n\r\nTo avoid capturing the ExecutionContext on some of these APIs, you\u0027d usually use the \"unsafe\" variants (if offered). For example if you changed the thread pool example to use UnsafeQueueUserWorkItem:\r\n\r\n```C#\r\nThreadPool.UnsafeQueueUserWorkItem(ThreadPoolThreadWork, null);\r\n```\r\n\r\nYou\u0027ll see the following output:\r\n\r\n```\r\nTransactionScopeAsyncFlowOption.Enabled\r\nTransaction in main thread present:True\r\nTransaction in manually created thread present:True\r\nTransaction in threadpool thread present:False\r\n```\r\nFWIW. .NET Framework has the same behavior.",
                                           "updatedAt":  "2018-12-16T13:52:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0Nzc0Nzc4MQ==",
                                           "createdAt":  "2018-12-17T07:28:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "damiand2",
                                           "body":  "hi @davidfowl , thank you for your explanation, if this is \u0027main\u0027 .net framework works also then i do not think we should change it, however i would like then to request additional clarification in docs about it. Your explanation provides more sense than default:\r\n\"An instance of the TransactionScopeAsyncFlowOption enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.\" \r\n",
                                           "updatedAt":  "2018-12-17T07:28:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODc5MDg4MQ==",
                                           "createdAt":  "2019-06-04T18:34:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jimcarley",
                                           "body":  "Okay. So what we are looking for is an enhancement to the documentation for TransactionScopeAsyncFlowOption that indicates that the transaction will flow to ALL threads creating in that transaction scope, not just those threads associated with Tasks or async programming model.\r\n\r\nI will see what I can do.\r\n",
                                           "updatedAt":  "2019-06-04T18:34:10Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Transaction.Current migrates to new threads even without using async",
        "labels":  [
                       "documentation",
                       "area-System.Transactions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1420",
        "createdAt":  "2019-10-04T11:05:30Z",
        "number":  1420,
        "author":  "Timovzl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7iZMA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "scalablecory",
                                            "createdAt":  "2019-10-04T18:45:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rubenprins",
                                            "createdAt":  "2019-10-04T20:36:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevinchalet",
                                            "createdAt":  "2019-10-22T14:48:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "karlra",
                                            "createdAt":  "2019-11-21T21:40:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davidroth",
                                            "createdAt":  "2019-11-22T13:50:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aayjaychan",
                                            "createdAt":  "2019-11-25T08:08:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fredericDelaporte",
                                            "createdAt":  "2019-12-12T13:32:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pontusdacke",
                                            "createdAt":  "2019-12-17T10:24:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "flitjens",
                                            "createdAt":  "2020-01-10T11:08:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Chrisw32",
                                            "createdAt":  "2020-03-17T05:07:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamjones1",
                                            "createdAt":  "2020-06-27T13:14:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ajbeaven",
                                            "createdAt":  "2021-03-18T12:27:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dpluscec",
                                            "createdAt":  "2021-05-07T14:46:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "swimmesberger",
                                            "createdAt":  "2021-09-10T14:03:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "uhfath",
                                            "createdAt":  "2022-11-23T07:16:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aromaa",
                                            "createdAt":  "2022-12-03T00:12:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Samemantlt",
                                            "createdAt":  "2022-12-16T13:16:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "janseris",
                                            "createdAt":  "2022-12-30T17:14:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ProTip",
                                            "createdAt":  "2023-03-30T21:32:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "glen-84",
                                            "createdAt":  "2023-04-21T10:54:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iCodeSometime",
                                            "createdAt":  "2023-05-03T17:41:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AntonC9018",
                                            "createdAt":  "2023-05-18T09:56:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "latonz",
                                            "createdAt":  "2023-06-12T19:20:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kz-gonzalo-curbelo",
                                            "createdAt":  "2023-06-16T13:55:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rcollina",
                                            "createdAt":  "2023-07-17T09:14:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xiety",
                                            "createdAt":  "2023-08-28T11:45:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Evengard",
                                            "createdAt":  "2023-08-29T18:04:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "solomon-okolie",
                                            "createdAt":  "2023-09-11T18:28:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DAHAG-ArisNourbakhsh",
                                            "createdAt":  "2023-09-15T10:43:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bahusoid",
                                            "createdAt":  "2023-09-17T13:19:24Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "aloraman",
                                            "createdAt":  "2023-10-28T12:00:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jimmyp",
                                            "createdAt":  "2023-11-16T02:26:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xin9le",
                                            "createdAt":  "2023-11-24T17:55:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "candanbaykan",
                                            "createdAt":  "2023-12-16T21:42:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VoX",
                                            "createdAt":  "2024-01-30T17:58:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zejji",
                                            "createdAt":  "2024-02-02T12:53:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Place1",
                                            "createdAt":  "2024-02-27T00:33:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Charlieface",
                                            "createdAt":  "2024-03-04T22:26:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jr01",
                                            "createdAt":  "2024-04-19T10:14:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ronimizy",
                                            "createdAt":  "2024-05-04T21:12:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zachabney",
                                            "createdAt":  "2024-05-22T17:00:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dawsonbooth",
                                            "createdAt":  "2024-05-22T17:03:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "misaelaguayo",
                                            "createdAt":  "2024-05-22T18:39:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RawToaster",
                                            "createdAt":  "2024-05-22T18:39:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jon3b",
                                            "createdAt":  "2024-05-23T19:50:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "verdie-g",
                                            "createdAt":  "2024-06-14T19:09:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xriuk",
                                            "createdAt":  "2024-06-27T07:57:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bachratyg",
                                            "createdAt":  "2024-07-03T15:29:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dzliera",
                                            "createdAt":  "2024-08-23T11:42:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eduardofreire",
                                            "createdAt":  "2024-10-03T14:39:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HiranAzevedo",
                                            "createdAt":  "2024-10-03T14:52:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "uncheckederror",
                                            "createdAt":  "2024-10-30T00:31:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jmbryan4",
                                            "createdAt":  "2024-10-30T04:05:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DMiradakis",
                                            "createdAt":  "2024-10-30T05:37:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maikschott",
                                            "createdAt":  "2024-10-30T06:35:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viktor-svub",
                                            "createdAt":  "2024-10-30T08:20:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nikolai-mb",
                                            "createdAt":  "2024-10-30T15:44:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "damianh",
                                            "createdAt":  "2024-10-30T23:04:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "themegosh",
                                            "createdAt":  "2024-10-31T01:48:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "risc-vee",
                                            "createdAt":  "2024-11-08T23:43:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "frencsi",
                                            "createdAt":  "2024-11-28T09:03:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "manandre",
                                            "createdAt":  "2024-12-14T14:39:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andre-ss6",
                                            "createdAt":  "2025-01-17T04:32:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mus65",
                                            "createdAt":  "2025-01-18T11:38:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DunetsNM",
                                            "createdAt":  "2025-01-30T07:06:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "antoniofreire",
                                            "createdAt":  "2025-02-04T17:23:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "resnikb",
                                            "createdAt":  "2025-03-01T01:34:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mgpreston",
                                            "createdAt":  "2025-03-04T20:48:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SpaceOgre",
                                            "createdAt":  "2025-04-01T10:34:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cyril265",
                                            "createdAt":  "2025-04-05T22:09:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jokk-itu",
                                            "createdAt":  "2025-04-15T15:23:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vRune4",
                                            "createdAt":  "2025-04-28T08:33:02Z"
                                        }
                                    ],
                          "totalCount":  72
                      },
        "updatedAt":  "2024-03-01T20:57:33Z",
        "body":  "`TransactionScope` is a disposable type that almost always has I/O work to do on disposal.\r\n\r\nAre there any plans for making `TransactionScope` implement `IAsyncDisposable`? (I am not aware of how readily the ADO.NET methods involved are available as async.)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdad0hQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MzE1MTk1NQ==",
                                           "createdAt":  "2019-11-12T22:44:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA3cNCA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Timovzl",
                                                                               "createdAt":  "2019-11-13T12:31:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "Timovzl",
                                                                               "createdAt":  "2019-11-13T12:31:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pontusdacke",
                                                                               "createdAt":  "2019-12-17T10:24:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "pontusdacke",
                                                                               "createdAt":  "2019-12-17T10:24:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "StephenBonikowsky",
                                           "body":  "@Timovzl We didn\u0027t have plans to do this, but we will consider it for 5.0.0. We need to do some investigation first to see how complicated the work will be.",
                                           "updatedAt":  "2019-11-12T22:44:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NTAwODY1Ng==",
                                           "createdAt":  "2019-12-12T13:33:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD4q-0w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "kieranbenton",
                                                                               "createdAt":  "2024-10-30T08:12:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fredericDelaporte",
                                           "body":  "Based on the votes on this [Stackoverflow question (of mine)](https://stackoverflow.com/q/44159992/1178314) about that, it looks to me this feature is awaited by many people.",
                                           "updatedAt":  "2019-12-12T13:33:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NTAyMTAwMQ==",
                                           "createdAt":  "2019-12-12T14:07:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODVKdTw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "pontusdacke",
                                                                               "createdAt":  "2019-12-17T10:24:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zejji",
                                                                               "createdAt":  "2024-02-02T12:53:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "karlra",
                                           "body":  "I don\u0027t understand either how this isn\u0027t included already. It is such a basic feature and together with https://github.com/dotnet/corefx/issues/42341, TransactionScope is basically not usable right now.",
                                           "updatedAt":  "2019-12-12T14:07:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc402Bpu",
                                           "createdAt":  "2021-07-26T10:27:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Timovzl",
                                           "body":  "@StephenBonikowsky, could this be moved up for consideration again? It is so basic, so IO-heavy, and so unusual in its lack of an async API.",
                                           "updatedAt":  "2021-07-26T10:27:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc403DTw",
                                           "createdAt":  "2021-07-26T16:23:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenBonikowsky",
                                           "body":  "@HongGit and @StephenMolloy who own this feature area.",
                                           "updatedAt":  "2021-07-26T16:23:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42pxCO",
                                           "createdAt":  "2021-09-10T13:48:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "meiedomi",
                                           "body":  "In our project we wrap the `TransactionScope` inside a custom unit of work. Since we do more stuff than just dispose the `TransactionScope` in our own `Dispose` method, we switched to `IAsyncDisposable`. Since we worked with `AsyncLocal\u003cT\u003e` inside of our unit of work, we encountered that it was impossible to restore ambient context inside of the new `DisposeAsync` method, because inside that method we have already lost the original value of `AsyncLocal\u003cT\u003e` and got a copy of it instead.\r\n\r\nAs far as I can tell, there is no way to get around this.\r\n\r\nProbably the main difficulty for supporting `DisposeAsync` in `TransactionScope` has to do with that very same issue.",
                                           "updatedAt":  "2021-09-11T09:31:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42scny",
                                           "createdAt":  "2021-09-12T11:54:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Timovzl",
                                           "body":  "@meiedomi Thanks for your addition. Could you elaborate on the issue you\u0027re having?\r\n\r\nIn my experience, the following holds true: An `AsyncLocal\u003cT\u003e` value goes out-of-scope exactly when any `async` method completes on a call stack depth _no deeper than where the value was assigned_.\r\n\r\nIn other words:\r\n- If we assign such a value from an `async` method, the scope ends when we complete that method.\r\n- However, if we assign such a value from a synchronous method (such as a constructor!), the value _remains in scope_, until we complete any `async` method higher up our call chain.\r\n\r\n(As a side note, remember that we can have `Task`-returning methods without the `async` keyword, which behave like any non-`async` method when it comes to `AsyncLocal\u003cT\u003e` scoping.)\r\n\r\nAre you doing anything special with regards to where your unit of work is instantiated vs. disposed?\r\n\r\nI believe the following usage pattern should pose no problems:\r\n\r\n```cs\r\npublic async Task PerformExampleUnitOfWork()\r\n{\r\n    // The TransactionScope constructor assigns the Transaction.Current AsyncLocal\u003cT\u003e value\r\n    // It remains visible as we exit the constructor, since it is a non-async method\r\n    await using (var transactionScope = new TransactionScope(/*snip*/))\r\n    {\r\n        // This async method is deeper down the call stack\r\n        // As such, it does not cause the AsyncLocal\u003cT\u003e value to go out of scope\r\n        await this.InteractWithDatabase();\r\n\r\n        transactionScope.Complete();\r\n    } // TransactionScope.DisposeAsync() still sees the same AsyncLocal\u003cT\u003e value :)\r\n} // AsyncLocal\u003cT\u003e value goes out-of-scope, as we complete an async method on the same level or higher compared to its assignment\r\n```",
                                           "updatedAt":  "2021-09-12T11:54:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42sy4u",
                                           "createdAt":  "2021-09-12T21:20:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "meiedomi",
                                           "body":  "@Timovzl The scope of `AsyncLocal\u003cT\u003e` is directly associated to that of the current `ExecutionContext`. In fact, all async local values live in a dictionary `ExecutionContext.m_localValues`. This execution context has **copy-on-write semantics**, that is, the entire thing is *shallow-copied* each time any `AsyncLocal\u003cT\u003e` value is modified.\r\n\r\nThe current `ExecutionContext` is a thread-static value which is flown across various execution points such as when threads or tasks are spawned or when async methods are invoked. Each time some thread X encounters an `await` statement, the thread Y which is running the continuation later on will receive the same `ExecutionContext` instance as X had previously. And thus, any `AsyncLocal\u003cT\u003e` will get restored with it.\r\n\r\nHere is the pseudo code to guide the following discussion.\r\n```cs\r\npublic class UnitOfWork : IAsyncDisposable\r\n{\r\n  private readonly TransactionScope scope;\r\n\r\n  public UnitOfWork()\r\n  {\r\n    this.scope = new TransactionScope(/*snip*/);\r\n    // Setup other things.\r\n  }\r\n\r\n  public async Task CompleteAsync()\r\n  {\r\n    // Flush changes to the database or whatever. Not important here.\r\n  }\r\n\r\n  public async ValueTask DisposeAsync()\r\n  {\r\n    await MyOwnCleanupAsync(); // Note: This will still make use of the current transaction scope.\r\n    this.scope.Dispose();\r\n  }\r\n}\r\n```\r\n\r\nUsage looks like that:\r\n```cs\r\nawait using (var uow = new UnitOfWork())\r\n{\r\n  // Do stuff like calling repositories (with or without await).\r\n  await uow.CompleteAsync();\r\n} // \u003c-- DisposeAsync called here\r\n\r\n// Disaster here: We are still in the ambient TransactionScope (which is disposed already, but still)\r\n// created by the now disposed unit of work.\r\n```\r\n\r\nSo you can see where this is going: If I start a `TransactionScope` (which essentially stores itself into some `AsyncLocal` internally) in the constructor of our unit of work `uow`, then that scope is stored in the current `ExecutionContext`. This execution context gets retained across every `await` inside of my `await using` block. Note that the body of this block is not yet `async`. The `await` in front of the `using` refers to the implicit call to `DisposeAsync()` at the end of the block. This is also where the problem lies. The compiler emits `await uow.DisposeAsync()`, so at this point the execution context flows unaltered into `DisposeAsync`. However, in there I call `Dispose()` of my `TransactionScope` (remember, my `uow` simply wraps a transaction scope plus adds some additional functionality that need to be disposed asynchronously). The transaction scope sets its `AsyncLocal` back to `null` (or any outer ambient transaction scope if any was present), which leads to the afore-mentioned copy-on-write of the entire execution context. This modified execution context is only visible to the current async method (i.e. the `DisposeAsync`) and anything called by that. However, when `DisposeAsync` returns, the previous execution context is restored and with it the old `TransactionScope`. Bang!! :(\r\n\r\nThe current implementation of `TransactionScope` assumes that the creation and disposal of it live in the same execution context, which is no longer the case if we switch to `DisposeAsync`.\r\n\r\nThe only way out for us is to not use `await using` and instead pass the body of the unit of work as a lambda into some higher-order function. Like that:\r\n```cs\r\n    public static class UnitOfWork\r\n    {\r\n        public static async Task RunAsync(Func\u003cTask\u003e uowBody)\r\n        {\r\n            using (var tc = new TransactionScope(/*snip*/))\r\n            {\r\n                await uowBody();\r\n                await MyOwnCleanupAsync();\r\n                tc.Complete();\r\n            } // \u003c-- TransactionScope is disposed in the same execution context that created it.\r\n        }\r\n    }\r\n```\r\n\r\nUsage:\r\n```cs\r\n    UnitOfWork.RunAsync(async (uow) =\u003e {\r\n      // Do stuff with the unit of work.\r\n      // I do not even need to complete anything, as this can be done generically in the higher order function.\r\n    })\r\n```",
                                           "updatedAt":  "2021-09-13T15:55:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42ucgl",
                                           "createdAt":  "2021-09-13T12:32:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEC7ORw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "meiedomi",
                                                                               "createdAt":  "2021-09-13T14:59:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "andre-ss6",
                                                                               "createdAt":  "2025-01-17T04:38:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Timovzl",
                                           "body":  "@meiedomi Thanks for the thorough explanation!\r\n\r\nI might have a solution:\r\n\r\n\u003e (As a side note, remember that we can have Task-returning methods without the async keyword, which behave like any non-async method when it comes to AsyncLocal\u003cT\u003e scoping.)\r\n\r\nThe crux is that the calling method, i.e. the one holding `UnitOfWork` in a `using`, should call `TransactionScope.Dispose()` via a **non-async** intermediate method. That way, it observes `TransactionScope`\u0027s modification to its `AsyncLocal\u003cT\u003e`.\r\n\r\nEasy enough to do:\r\n\r\n```cs\r\npublic class UnitOfWork : IAsyncDisposable\r\n{\r\n    // Snip all the way down to DisposeAsync()...\r\n\r\n    // WITHOUT async keyword!\r\n    public ValueTask DisposeAsync()\r\n    {\r\n        // This method must remain non-async\r\n        // This allows the caller to observe the TransactionScope\u0027s AsyncLocal modifications\r\n\r\n        this.scope.Dispose();\r\n        return this.DisposeAsyncCore();\r\n    }\r\n\r\n    private async ValueTask DisposeAsyncCore()\r\n    {\r\n        // Await whatever we like here\r\n\r\n        // Snip...\r\n    }\r\n```\r\n\r\nBecause `DisposeAsync` is now a synchronous method (that just so happens to return an awaitable), its modifications to any `AsyncLocal\u003cT\u003e` are now observed from the nearest encapsulating `async` method, as though they had been made from that method itself. We have achieved the same thing as your `try/finally` example: for all intents and purposes, it was `RunAsync` that called `TransactionScope.Dispose()`.\r\n\r\nPlease report back and share if that solves your issue!",
                                           "updatedAt":  "2021-09-13T12:32:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42vA_q",
                                           "createdAt":  "2021-09-13T15:12:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "meiedomi",
                                           "body":  "@Timovzl Thanks a lot for your great solution. I also learned something about `async/await` in the process. :)\r\nThis would have solved the problem I posed perfectly.\r\n\r\nUnfortunately, I misrepresented our own problem. :( The stuff we do inside `MyOwnCleanupAsync` actually still makes use of the ambient transaction scope, i.e. it writes some things to the database which should happen in the same transaction still. Therefore, it needs to happend *before* the call to `scope.Dispose()`.\r\nI corrected my last post accordingly.\r\n\r\nStill more ideas? :)",
                                           "updatedAt":  "2021-09-13T15:50:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42vKz5",
                                           "createdAt":  "2021-09-13T15:55:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Taudris",
                                           "body":  "This may work:\r\n\r\n    public class UnitOfWork : IAsyncDisposable\r\n    {\r\n        // WITHOUT async keyword!\r\n        public ValueTask DisposeAsync()\r\n        {\r\n            // This method must remain non-async\r\n            // This allows the caller to observe the TransactionScope\u0027s AsyncLocal modifications\r\n\r\n            // Prevent DisposeAsyncCore() from creating a copy of the ExecutionContext, so its AsyncLocal modifications are observable\r\n            // Unknown detail: AsyncFlowControl implements IDisposable to revert flow. Does the suppression survive multiple ExecutionContext creations?\r\n            // If not (which I suspect), then asyncFlowControl can be disposed inside this method instead of passing it to DisposeAsyncCore.\r\n            var asyncFlowControl = ExecutionContext.SuppressFlow();\r\n\r\n            return this.DisposeAsyncCore(asyncFlowControl);\r\n        }\r\n\r\n        private async ValueTask DisposeAsyncCore(AsyncFlowControl asyncFlowControl)\r\n        {\r\n            asyncFlowControl.Dispose(); // This can probably be moved to DisposeAsync as a using statement\r\n\r\n            // Await whatever we like here\r\n\r\n            this.scope.Dispose();\r\n    \r\n            // Snip...\r\n        }\r\n    }\r\n\r\nI don\u0027t know which method must contain the call to `asyncFlowControl.Dispose()`. It depends on [how flow suppression is implemented](https://github.com/dotnet/corert/blob/master/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs) which I don\u0027t have time to review just this second.",
                                           "updatedAt":  "2021-09-13T15:55:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42wJeJ",
                                           "createdAt":  "2021-09-13T21:27:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "meiedomi",
                                           "body":  "@Taudris Wow that\u0027s pretty black magic right there! But it actually *works*! Thank you! :)\r\n\r\nI wonder how I could make use of `using (ExecutionContext.SuppressFlow())` inside of `DisposeAsync`? As far as I understand, it is crucial to restore proper flow once we entered `DisposeAsyncCore`, as we certainly don\u0027t want to keep suppressing the flow inside of that. Right?\r\nAlso, which other method did you think could/should host `asyncFlowControl.Dispose()` and why?\r\n\r\nI have a minor but important addition to your solution. If I don\u0027t use `ConfigureAwait(false)` (extension method on `IAsyncDisposable`) on my unit of work, the continuation that runs after my unit of work got disposed might be on some **random thread from the ThreadPool**. Since we suppressed the flow of the execution context, this thread\u0027s context is not restored and it might therefore have a *completely unrelated execution context*, causing even worse kinds of side effects. The `ConfigureAwait(false)` makes sure that the very same thread that ends our `DisposeAsyncCore` actually continues after the unit of work is done.\r\n\r\nThe reason why my tests were all successful even without the extra `ConfigureAwait(false)` is because there is a sneaky litte optimization in place that reuses the same thread in some situations regardless. See here: https://stackoverflow.com/a/59691044/3616714. Since this is not documented or standardized, we should not rely on it and always use `ConfigureAwait(false)`.\r\n\r\nThis solution also slightly complicates the usage of my unit of work, as I now have to return a `ConfiguredAsyncDisposable` from a factory instead of the unit of work directly. When I want to call other methods of the unit of work while it is executing, I have to provide it using an `out` parameter:\r\n\r\n```cs\r\nawait using (UnitOfWorkFactory.Create(out var uow))\r\n{\r\n  await uow.CompleteAsync();\r\n}\r\n```\r\nI the end, this starts to look equally convoluted as the solution with the higher-order function. And the \"black magic\" going on under the hood doesn\u0027t really give it the upper hand either. I believe that all those issues are reason enough why there is no `DisposeAsync` for `TransactionScope` yet (and probably never will be?).",
                                           "updatedAt":  "2021-09-13T22:05:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42yzjE",
                                           "createdAt":  "2021-09-14T15:58:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Taudris",
                                           "body":  "It seems that I misunderstand `ExecutionContext`. [Here\u0027s me trying to test it.](https://dotnetfiddle.net/cujvNX) It seems there is stuff that `async` is doing with `ExecutionContext` that cannot be replicated without `async` or reflection. I\u0027m not done experimenting, but I need to stop for now (actual work).",
                                           "updatedAt":  "2021-09-14T15:58:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4209cM",
                                           "createdAt":  "2021-09-15T09:25:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB6mjSA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "meiedomi",
                                                                               "createdAt":  "2021-09-16T11:40:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Taudris",
                                           "body":  "Well, it turns out that `ExecutionContext.SuppressFlow()` can\u0027t be used to accomplish what I thought it was doing from reading the source code. (It is really dense stuff!) It doesn\u0027t cause future invocations of `.Capture()` to use the current EC (without cloning) or its `AsyncLocal`s like I thought; it just causes `.Capture()` to return `null` until the suppression is removed, and the intended pattern for callees in that case is to not attempt to restore an EC at all and just use the current one. Which doesn\u0027t work for your use case, of course.\r\n\r\n[Here\u0027s another approach I came up with using `ExecutionContext.Run()`.](https://dotnetfiddle.net/u2Hyoc) This is still not a perfect solution, though, because it prevents any new `AsyncLocal` values from being visible to the methods on `UnitOfWork`.\r\n\r\nAt this point, I don\u0027t think a perfect solution with your desired constraints is possible. The correct solution is for the creator of `UnitOfWork` to manage the `TransactionScope`, not `UnitOfWork` itself. If you need `UnitOfWork` to be in control of the transaction, `TransactionScope` is not the correct tool, and you should use some other facility like `DbTransaction` or ORM-native transaction APIs instead.",
                                           "updatedAt":  "2021-09-15T09:25:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc420939",
                                           "createdAt":  "2021-09-15T09:27:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Timovzl",
                                           "body":  "@meiedomi As per the [docs](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.configureawait?view=net-5.0), it is `ConfigureAwait(` **`true`** `)` that causes the original `SynchronizationContext` and `TaskScheduler` to be used for the continuation. This happens to be the default, so it may be omitted. By contrast, `ConfigureAwait(false)` exists specifically to indicate that this is unnecessary, as a potential performance optimization.\r\n\r\nRegardless, I do not believe that `ConfigureAwait` should make a difference here. Quoting Stephen Toub in the [ConfigureAwait FAQ](https://devblogs.microsoft.com/dotnet/configureawait-faq/):\r\n\r\n\u003e **I used ConfigureAwait(false), but my AsyncLocal still flowed to code after the await. Is that a bug?**\r\n\u003e No, that is expected. AsyncLocal\u003cT\u003e data flows as part of ExecutionContext, which is separate from SynchronizationContext. Unless you’ve explicitly disabled ExecutionContext flow with ExecutionContext.SuppressFlow(), ExecutionContext (and thus AsyncLocal\u003cT\u003e data) will always flow across awaits, regardless of whether ConfigureAwait is used to avoid capturing the original SynchronizationContext. For more information, see this blog post.\r\n\r\nCan you confirm that the boolean passed to `ConfigureAwait` makes no difference? Perhaps you could test from a controller method in an ASP.NET Core application: that way, the original thread _actually has a `SynchronizationContext` and is also not a thread pool thread_, which should cause a distinct difference between `ConfigureAwait(false)` and `ConfigureAwait(true)`. That should truly hit both scenarios, allowing you to observe that both have the same result, hopefully.",
                                           "updatedAt":  "2021-09-15T09:27:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc420_fR",
                                           "createdAt":  "2021-09-15T09:36:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Timovzl",
                                           "body":  "\u003e At this point, I don\u0027t think a perfect solution with your desired constraints is possible.\r\n\r\n@Taudris I\u0027m surprised. @meiedomi reported success with your [original proposal](https://github.com/dotnet/runtime/issues/1420#issuecomment-918334713) of this solution. Could you describe what is wrong with that approach, and why it did seem to work?",
                                           "updatedAt":  "2021-09-15T09:36:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc426Xx-",
                                           "createdAt":  "2021-09-16T21:34:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "meiedomi",
                                           "body":  "I can confirm that in my test scenario @Taudris original proposal still works. It also makes sense as to why it works. When entering an `async ` method, the execution context usually gets captured. Unless it is suppressed, which is exactly what we do. Since nothing gets captured, nothing can be restored by the continuation to `await DisposeAsync()`. Since nothing gets restored, the execution context is whatever execution context the thread running the continuation happens to have at this point.\r\n\r\nSince we want that thread to have the same context as the one we got right after the last `await` inside of `DisposeAsyncCore`, we must make sure that the thread is the same. And to address @Timovzl question here: This can only be guaranteed if we use `ConfigureAwait(false)` on the awaiter to `DisposeAsync`. In my test scenario, it works even with the default `ConfigureAwait(true)`, but that\u0027s because of an optimization by .NET which still uses the same thread in most common scenarios (but this is not guaranteed in every case which is why we need to use `ConfigureAwait(false)` explicitly).\r\n\r\nHere is my test scenario:\r\n```cs\r\n[TestFixture]\r\npublic class ExecutionContextFlowTests\r\n{\r\n\tprivate readonly AsyncLocal\u003cint\u003e asyncLocal = new();\r\n\t\r\n\t[Test]\r\n\tpublic async Task TestExecutionFlow()\r\n\t{\r\n\t\tasyncLocal.Value = 42;\r\n\r\n                // ConfigureAwait(false) is the only way to guarantee that thread X will run the continuation.\r\n\t\tawait DisposeAsync().ConfigureAwait(false);\r\n\t\t\r\n\t\t// This continuation will be executed by thread X,\r\n\t\t// and this will have the same execution context as X,\r\n\t\t// which is why the value is 55.\r\n\t\tasyncLocal.Value.Should().Be(55);\r\n\t}\r\n\r\n\tprivate Task DisposeAsync()\r\n\t{\r\n\t\tvar asyncFlowControl = ExecutionContext.SuppressFlow();\r\n\t\t\r\n\t\t// Suppressed, so nothing gets captured by the next call.\r\n\t\treturn DisposeAsyncCore(asyncFlowControl);\r\n\t}\r\n\r\n\tprivate async Task DisposeAsyncCore(AsyncFlowControl asyncFlowControl)\r\n\t{\r\n\t\t// Now make sure to stop the suppressing here, as we want to normally flow again from here on.\r\n\t\tasyncFlowControl.Dispose();\r\n\t\t\r\n\t\tawait DoStuffAsync();\r\n\t\t\r\n\t\t// The current thread is X.\r\n\t\tasyncLocal.Value = 55;\r\n\t} // Async method ends here, but the execution context will not be restored, since there was nothing captured to restore it to.\r\n\r\n\tprivate async Task DoStuffAsync()\r\n\t{\r\n\t\tawait Task.Delay(10);\r\n\t}\r\n}\r\n```\r\n\r\n@Taudris It would be great if you could pinpoint the place and reason where you think it doesn\u0027t work as I have outlined here. :)",
                                           "updatedAt":  "2021-09-17T07:15:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc428r3W",
                                           "createdAt":  "2021-09-17T15:15:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Taudris",
                                           "body":  "The workaround I proposed is extremely difficult to understand the true behavior of. After several hours of my own testing, I still don\u0027t. Case in point: the `.ConfigureAwait(false)` you added to your test in an edit causes the `AsyncLocal` to return 0, which breaks the test.\r\n\r\nPlay around with commenting and uncommenting things in the snippet below. (Heads up: it uses xUnit.) The fact that changing what is being awaited anywhere in the logical call stack can break `DisposeAsync()` is unacceptable IMO; you have no guarantee that some other piece of code you\u0027re calling won\u0027t later on be changed in a way that causes your code to break, and the problem will be very difficult to diagnose, especially if whoever has to troubleshoot it is someone other than you.\r\n\r\nI can only recommend: ***Don\u0027t use this workaround.*** You should instead change the design so you don\u0027t need it.\r\n\r\n```C#\r\npublic class ExecutionContextFlowTests\r\n{\r\n    private readonly AsyncLocal\u003cint\u003e asyncLocal = new();\r\n    private int local;\r\n\r\n    private void SetLocal(int value)\r\n    {\r\n        this.asyncLocal.Value = value;\r\n        this.local = value;\r\n    }\r\n\r\n    [Fact]\r\n    public async Task TestExecutionFlow()\r\n    {\r\n        this.SetLocal(42);\r\n\r\n        Task? awaitable = this.DisposeAsync();\r\n\r\n        Assert.Equal(49, this.local); //sanity check\r\n\r\n        //commenting and uncommenting this assert changes the behavior\r\n        Assert.Equal(42, this.asyncLocal.Value); //expected 49, but it\u0027s still 42. also, merely reading this.asyncLocal.Value can break the other asserts below.\r\n\r\n        //await awaitable;\r\n        await awaitable.ConfigureAwait(false);\r\n\r\n        Assert.Equal(55, this.local); //sanity check\r\n\r\n        //this assert fails on 0 when using .ConfigureAwait(false) and this method does NOT read asyncLocal.Value.\r\n        //this assert fails on 42 when using .ConfigureAwait(false) and this method reads asyncLocal.Value before awaiting awaitable.\r\n        //this assert fails on 42 when DoStuffAsync() calls Task.Yield() and this method reads asyncLocal.Value before awaiting awaitable.\r\n        Assert.Equal(55, this.asyncLocal.Value);\r\n\r\n        //this assert fails when using .ConfigureAwait(false) and this method reads asyncLocal.Value before awaiting awaitable.\r\n        //this assert fails when DoStuffAsync() calls Task.Yield() and this method reads asyncLocal.Value before awaiting awaitable.\r\n        this.RequireEC();\r\n    }\r\n\r\n    private Task DisposeAsync()\r\n    {\r\n        AsyncFlowControl asyncFlowControl = ExecutionContext.SuppressFlow();\r\n\r\n        this.RequireNoEC();\r\n\r\n        return this.DisposeAsyncCore(asyncFlowControl);\r\n    }\r\n\r\n    private async Task DisposeAsyncCore(AsyncFlowControl asyncFlowControl)\r\n    {\r\n        this.RequireNoEC();\r\n        this.SetLocal(48); //no effect on asyncLocal\r\n        this.RequireNoEC();\r\n\r\n        asyncFlowControl.Dispose();\r\n        this.RequireEC();\r\n\r\n        //last change before first await. expected this to be visible to callers prior to awaiting the returned task, but it isn\u0027t.\r\n        this.SetLocal(49);\r\n\r\n        await this.DoStuffAsync();\r\n\r\n        this.SetLocal(55); //this value is visible on asyncLocal to callers after awaiting\r\n    }\r\n\r\n    //private async Task DoStuffAsync() =\u003e await Task.Delay(10);\r\n    private async Task DoStuffAsync() =\u003e await Task.Yield();\r\n\r\n    private void RequireEC()\r\n    {\r\n        var ec = ExecutionContext.Capture();\r\n        Assert.NotNull(ec);\r\n        ec!.Dispose();\r\n    }\r\n\r\n    private void RequireNoEC()\r\n    {\r\n        var ec = ExecutionContext.Capture();\r\n        Assert.Null(ec);\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2021-09-17T15:19:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc428y0y",
                                           "createdAt":  "2021-09-17T15:57:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Taudris",
                                           "body":  "[Here\u0027s a unit test that demonstrates capturing an ExecutionContext and running code on it.](https://gist.github.com/Taudris/5dc87b1f82cb4a9960daf92e49e637cc) I expect this pattern to be more predictable and less fragile than messing with EC flow.",
                                           "updatedAt":  "2021-09-17T15:57:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc429b-e",
                                           "createdAt":  "2021-09-17T20:53:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "meiedomi",
                                           "body":  "Hey @Taudris, thanks a lot for your efforts. I was able to verify that XUnit messes with the execution context while the other frameworks like NUnit and MSTest don\u0027t. A normal console app also doesn\u0027t exhibit faulty behavior. So my example with `ConfigureAwait(false)` works everywhere except within XUnit. And I absolutely have no clue why and I probably don\u0027t want to know either. ;)\r\nYou can verify that for yourself using my repo: https://github.com/meiedomi/AsyncLocalTesting\r\n\r\nI also studied your latest [gist](https://gist.github.com/Taudris/5dc87b1f82cb4a9960daf92e49e637cc). But I can\u0027t quite see the behavior I want: Remember that we simulate the `TransactionScope` with our `AsyncLocal` value. In your code, setting the value to `48` represents entering a new transaction scope. Then, in the `DisposeAsync` you set it to `55`, which represents a potential parent transaction scope. However, the code that actually runs inside of the unit of work must see `48` as well, since we want to issue SQL in the unit of works transaction scope.\r\nSo the value on [this line](https://gist.github.com/Taudris/5dc87b1f82cb4a9960daf92e49e637cc#file-captureexecutioncontexttests-cs-L72) should be `48`, and not `42`. Or am I confusing something myself here?\r\n\r\n\u003e Don\u0027t use this workaround\r\n\r\nI agree with this. To be honest, at work I already refactored to the solution with the higher order function I proposed earlier. It doesn\u0027t mess with the execution context at all and gives easy and predictable behavior.\r\n\r\nI still find this discussion very interesting, and I think it also should make clear that an `IAsyncDisposable` transaction scope will probably never happen. For good. :)",
                                           "updatedAt":  "2021-09-17T20:58:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc429t-2",
                                           "createdAt":  "2021-09-18T00:44:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Taudris",
                                           "body":  "The NUnit and MSTest tests still break when switching out the `Task.Delay(10)` for `Task.Yield()`. But if you have both Delay *and* Yield in any order, it works. The console output from the AsyncLocal change logging (great idea btw) is quite a bit different as well. So yeah, even with xUnit having its own problems, the workaround is still pretty fragile.\r\n\r\n[This line](https://gist.github.com/Taudris/5dc87b1f82cb4a9960daf92e49e637cc#file-captureexecutioncontexttests-cs-L72) actually should *not* see the new value. The idea is for `UnitOfWork` to capture and maintain its own `ExecutionContext` and never expose it to callers. So `TestCapturedExecutionContext()` only ever sees its own `42`, and so would not be able to participate in `UnitOfWork`\u0027s transaction. (It could create its own `TransactionScope`, which `UnitOfWork` would see in its constructor and be able to associate with it. But no other `UnitOfWork` methods would be able to associate with callers\u0027 `TransactionScope`s; just the constructor where the initial capture happens.)",
                                           "updatedAt":  "2021-09-18T00:44:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4290AS",
                                           "createdAt":  "2021-09-18T03:48:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB647Bg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Taudris",
                                                                               "createdAt":  "2021-09-18T16:16:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "meiedomi",
                                           "body":  "Alright, this scares the hell out of me. I stop doing further investigations on your original workaround solution and conclude that we just shouldn\u0027t mess with suppressing the execution context across async boundaries. I\u0027m out of mental models to explain the observed behavior.\r\n\r\nThanks also for clarifying your design intent for your latest try. This then means that anything running inside the unit of work that wants to inherit the transaction scope (not the other way around as you explained) would need to go through some public method of the unit of work such that it can establish its internally maintained execution context. Nesting another unit of work inside of it by just `using` it would not capture the transaction scope. Also, when establishing a log context for example (or any other custom `AsyncLocal`s for that matter), it won\u0027t be observed inside of the unit of work, since it uses its own execution context. Certainly this is better and more stable than the flaky workaround though. :)",
                                           "updatedAt":  "2021-09-18T03:50:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43PFnk",
                                           "createdAt":  "2021-09-24T15:07:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Timovzl",
                                           "body":  "Here is another thought: Would it help if, after doing our own disposal work, we called `TransactionScope.Dispose()` _from a `ContinueWith()`_?\r\n\r\nThis avoids the `async` keyword and gives us control over which `Task` the continuation is attached to. It might offer a way.\r\n\r\nThe thing is, `ContinueWith()` still confuses me. You want get it absolutely right, as if you had first awaited the prior work within a `try` block and then called `TransactionScope.Dispose()` from the `finally` block. I\u0027m not entirely sure how to achieve precisely that effect in all situations.",
                                           "updatedAt":  "2021-09-24T15:07:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43gWvH",
                                           "createdAt":  "2021-09-30T11:16:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "meiedomi",
                                           "body":  "@Timovzl I think that `ContinueWith` inherits the execution context from the thread calling that method, and not from the task that eventually kicks off the continuation. But either way, the problem is that the mere act of *inheriting* the execution context is enough to lose the original context in which the unit of work is created and run, and thus the `TransactionScope` will not be properly restored.\r\n\r\nI guess that `IAsyncDisposable` simply does not play well with any type of ambient state management, which `TransactionScope` is just one example of. As far as we are concerned, switching to a functional approach got rid of the issue. For the future, I noted that `Dispose/AsyncDispose` should really only be used for what it is designed for: **Cleanup of resources**. Not anything else. ;)",
                                           "updatedAt":  "2021-09-30T11:21:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43hPgi",
                                           "createdAt":  "2021-09-30T16:07:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Timovzl",
                                           "body":  "@meiedomi Actually, it just hit me that the problem is that **the deeper async layers cannot make changes that are observable to the outer layers**. We can circumvent this with a simple layer of indirection.\r\n\r\nAs a crude first attempt:\r\n\r\n- Use an `AsyncLocal\u003cUnitOfWork[]\u003e`. (Yes, an array. Eventually we might use a more efficient wrapper, but a single-element array serves our purposes for now.)\r\n- To set the `AsyncLocal\u003cT\u003e` value:\r\n  - If `Value` is null, set `Value = new UnitOfWork[1]`.\r\n  - Assign the intended value to `Value[0]`.\r\n- To get the `AsyncLocal\u003cT\u003e` value:\r\n  - Get `Value?[0]`.\r\n\r\nThe calling code has assigned the array, and populated element 0. `DisposeAsync`, being deeper down, can see it. It then modifies the array by nulling out element 0. Later, back up the chain, the calling code observes the modification to \"its\" array.",
                                           "updatedAt":  "2021-09-30T16:07:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43jU1Y",
                                           "createdAt":  "2021-10-01T07:58:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB883tA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Taudris",
                                                                               "createdAt":  "2021-10-05T06:13:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "meiedomi",
                                           "body":  "@Timovzl I had the very same idea pretty early on. Why not just put the value on the heap (i.e. array/box/whatever) and therefore share it among any async flow? :) And this would actually work for _our own_ unit of work stuff!\r\n\r\nHowever, the issue is that I still need to dispose the `TransactionScope`. And the implementation thereof uses its own `AsyncLocal` to manage the ambient transaction, and doesn\u0027t use a box for it. The only thing that would make `TransactionScope` work is to make sure we dispose it in the _same async layer_ (I like that term ;)) where we created it, which puts us back to square one, unfortunately.",
                                           "updatedAt":  "2021-10-01T07:59:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43jgow",
                                           "createdAt":  "2021-10-01T09:06:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC47PKQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "meiedomi",
                                                                               "createdAt":  "2021-10-01T18:21:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ProTip",
                                                                               "createdAt":  "2023-03-30T21:37:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Timovzl",
                                           "body":  "@meiedomi Argh! 😛 It truly is a tricky one when we have no control over the type working with `AsyncLocal\u003cT\u003e`.\r\n\r\nIn any case, at least we have a solution for the changes to `TransactionScope` itself that this issue is about. @HongGit @StephenMolloy",
                                           "updatedAt":  "2021-10-01T09:06:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cjiA0",
                                           "createdAt":  "2023-05-18T09:56:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODFISSg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "xiety",
                                                                               "createdAt":  "2023-08-29T13:07:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AntonC9018",
                                           "body":  "When can we expect this to get fixed?",
                                           "updatedAt":  "2023-05-18T09:56:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ehfWD",
                                           "createdAt":  "2023-06-10T22:33:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ProTip",
                                           "body":  "Lack of async API on `TransactionScope` is making it unusable in 2023. Projects like Quartz.Net and Npgsql itself would benefit from this so there is an \"official\" transaction scope API that will allow separate projects/libraries to participate in the same transaction..\r\n\r\nAs it is bespoke APIs need to be created. I believe there was even a request on the Npgsql project to add some flag on the connection that can be used to determine if a transaction has been opened yet or not..",
                                           "updatedAt":  "2023-06-10T22:34:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eodzC",
                                           "createdAt":  "2023-06-12T16:26:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "Responsibility for the Transactions area migrated to another team some time ago. I haven\u0027t seen them chime in on this thread, so I don\u0027t know if this issue is on their radar. @roji?",
                                           "updatedAt":  "2023-06-12T16:26:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5epFA1",
                                           "createdAt":  "2023-06-12T18:06:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@StephenMolloy @ProTip this issue is on my radar, but this unfortunately involves far more than simply making TransactionScope itself IAsyncDisposable. When only one connection (AKA resource) is enlisted to the transaction (non-distributed), disposing the TransactionScope ends up directly calling commit/rollback on e.g. the enlisted ADO.NET. The APIs there (i.e. [IPromotableSinglePhaseNotification](https://learn.microsoft.com/en-us/dotnet/api/system.transactions.ipromotablesinglephasenotification?view=net-7.0)) would also need to be retrofitted with async APIs, and all database drivers (and anything else that supports System.Transactions) would need to react to that, implementing async versions of commit/rollback.\r\n\r\nThis is unfortunately quite a big change, which would require both careful designing and also propagating of the new functionality across the ecosystem (e.g. SqlClient, Npgsql...). As of now, the 23 votes on this issue don\u0027t indicate a huge interest in this, so there\u0027s little chance we\u0027ll prioritize this work in the near future... If asynchronous commit/rollback is important to you, you\u0027ll have to stick to DbTransaction for now (note that SqlClient [hasn\u0027t yet implemented async there either](https://github.com/dotnet/SqlClient/issues/113)).\r\n\r\nNote that when the transaction is distributed, System.Transactions communicates with MSDTC instead. This process should also ideally be asynchronous, which is yet another complication in this whole thing.",
                                           "updatedAt":  "2023-06-12T18:06:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iaCKJ",
                                           "createdAt":  "2023-07-26T05:13:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ProTip",
                                           "body":  "It\u0027s just kind of a shame since full async coverage seems to be so important to the ecosystem and the `Asp.Net Core` project itself as it warns in their best practices to [Avoid blocking calls](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/best-practices?view=aspnetcore-7.0#avoid-blocking-calls).\r\n\r\nWould it be a viable path forward to create an `AsyncTransactionScope` that could slowly phase out `TransactionScope`, or at least libraries could adopt compatibility of at their own pace? I believe this was the approach taken with `IAsyncDisposable` and `AsyncServiceScope`.",
                                           "updatedAt":  "2023-07-26T05:13:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5icIE0",
                                           "createdAt":  "2023-07-26T10:49:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@ProTip a separate AsyncTransactionScope on its own wouldn\u0027t help, not any more than simply making TransactionScope implement IAsyncDisposable: the problem is in the implementation behind that. As I wrote above, the problem is in the interactions between System.Transactions (which is behind TransactionScope) and the specific database drivers (like SqlClient or Npgsql); those APIs also have to be retrofitted with async method counterparts, and the different drivers have to be updated to use them as well.\r\n\r\nUnfortunately there\u0027s simply no quick and easy fix here - for this to work, async would need to be properly plumbed through System.Transactions, and then to the drivers.",
                                           "updatedAt":  "2023-07-26T22:23:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ie6Gg",
                                           "createdAt":  "2023-07-26T18:04:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ProTip",
                                           "body":  "Ah, I thought perhaps there was a way to reduce the up-front burden. Thanks for the detailed response.",
                                           "updatedAt":  "2023-07-26T18:04:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yqiGt",
                                           "createdAt":  "2024-02-02T12:57:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zejji",
                                           "body":  "@roji \r\n\r\nIs there any news as to whether this is on the roadmap for EF Core 9?\r\n\r\nJust about to embark on the implementation of an accounting system (currently in the R\u0026D phase) that will make heavy use of transactions and PostgreSQL\u0027s serializable snapshot isolation level and having async support for transaction scopes would be extremely useful.\r\n\r\nOr would it be prudent to assume this is unlikely to be implemented and ensure that we fit within the constraints of DbTransaction instead?",
                                           "updatedAt":  "2024-02-02T13:23:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yrrsM",
                                           "createdAt":  "2024-02-02T14:59:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@zejji this isn\u0027t on the roadmap, as you can see by the milestone of the issue; this is a very non-trivial piece of work, and there are generally very few votes. So yes, at this point I\u0027d recommend using DbTransaction in order to get fully async transaction handling.",
                                           "updatedAt":  "2024-02-02T14:59:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yr_tK",
                                           "createdAt":  "2024-02-02T15:45:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zejji",
                                           "body":  "@roji Will do - thank you for confirming",
                                           "updatedAt":  "2024-02-02T15:45:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51okwl",
                                           "createdAt":  "2024-03-01T17:12:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODY_uvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "xiety",
                                                                               "createdAt":  "2024-03-01T22:06:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karlra",
                                           "body":  "@roji \r\n\r\nI think this feature is so important that my company is willing to finance its development. Is there any such program at microsoft?",
                                           "updatedAt":  "2024-03-01T17:12:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51p3SF",
                                           "createdAt":  "2024-03-01T20:57:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@karlra I\u0027m not aware of anything specific (but that doesn\u0027t mean something doesn\u0027t exist). One suggestion would be to contact a vendor who would do the work and submit the relevant PR/PRs, which we\u0027d review as usual.\r\n\r\nFor this particular issue, the change likely is going to be quite complex (which is why it hasn\u0027t yet been), and it would also need to span both the runtime and the database driver(s) in question (e.g. SqlClient), which are not part of the runtime.",
                                           "updatedAt":  "2024-03-01T20:57:32Z"
                                       }
                                   ],
                         "totalCount":  39
                     },
        "title":  "Add async support to System.Transactions (e.g. TransactionScope)",
        "labels":  [
                       "enhancement",
                       "api-suggestion",
                       "area-System.Transactions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38682",
        "createdAt":  "2020-07-01T21:25:14Z",
        "number":  38682,
        "author":  "GrabYourPitchforks",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-05-11T18:52:53Z",
        "body":  "Example: the internal interface `System.Transactions.IPromotedEnlistment` has no implementations, which means all fields and locals of type `IPromotedEnlistment` will always have the value _null_. The ILLinkTrim step that we use when building the libraries cannot always optimize this away, which results in us building and shipping a larger-than-necessary assembly which contains dead code.\r\n\r\nThe area owners should go through the project, manually removing code paths which are known not to work correctly in .NET Core applications.\r\n\r\n/cc @eerhardt, who was giving me some offline guidance during the initial investigation phases",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOK0xPTw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTE2Mjg0Mg==",
                                           "createdAt":  "2020-09-01T22:17:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HongGit",
                                           "body":  "@GrabYourPitchforks could this issue be closed now?",
                                           "updatedAt":  "2020-09-01T22:17:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNjQyMTMyNw==",
                                           "createdAt":  "2020-11-13T00:15:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "@HongGit Looks like the dead code is still included. I can probably spare a few cycles during MQ if it\u0027d help!",
                                           "updatedAt":  "2020-11-13T00:15:51Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Much of System.Transactions.Local\u0027s distributed transactions logic is a no-op but cannot be linked away",
        "labels":  [
                       "area-System.Transactions",
                       "size-reduction"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/41043",
        "createdAt":  "2020-08-19T16:26:01Z",
        "number":  41043,
        "author":  "niveditha0706",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-27T09:23:33Z",
        "body":  "I am getting TransactionAbortedException at scope.Complete() when running asynchronous operations (multiple update requests to the DB). Please find below the code snippet that i am using.\r\n\r\n`public void UpdateUsingAsyncAwait(Datawindow data)\r\n{\r\n\tusing (TransactionScope scope = new TransactionScope(TransactionScopeOption.RequiresNew,\r\n\tnew TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadCommitted, Timeout = new TimeSpan(0, 15, 0) }, TransactionScopeAsyncFlowOption.Enabled))\r\n\t{\r\n\t\tQueryBuilder queryBuilder = new QueryBuilder(_dataAccess);\r\n\t\tIList sqlUpdate = queryBuilder.BuildBatchUpdate(data);\r\n\t\tTask[] updates = new Task[sqlUpdate.Count];\r\n\r\n\t\tfor (int i = 0; i \u003c sqlUpdate.Count; i++)\r\n\t\t{\r\n\t\t\tupdates[i] = UpdateAsyncAlt(sqlUpdate[i]);\r\n\t\t}\r\n\t\tTask.WhenAll(updates);\r\n\t\tscope.Complete();\r\n\t}\r\n}`\r\n\r\n `public async Task UpdateAsyncAlt(QueryStore data)\r\n{\r\n\r\n\tString sqlQuery = data.getSqlQuery();\r\n\r\n\tusing (SqlConnection con = new SqlConnection(_dataAccess.Connection.ConnectionString))\r\n\t{\r\n\t\tcon.Open();\r\n\t\tusing (DbCommand cmd = con.CreateCommand())\r\n\t\t{\r\n\t\t\tcmd.CommandText = \"ADD_INFO\";\r\n\t\t\tcmd.CommandType = CommandType.StoredProcedure;\r\n\t\t\tIDbDataParameter param = cmd.CreateParameter();\r\n\t\t\tparam.ParameterName = \"@userId\";\r\n\t\t\tparam.Value = _dataAccess.GetUserName();\r\n\t\t\tcmd.Parameters.Add(param);\r\n\t\t\tawait cmd.ExecuteNonQueryAsync();\r\n\t\t}\r\n\t\tusing (SqlCommand command = new SqlCommand(sqlQuery, con))\r\n\t\t{\r\n\t\t\tcommand.CommandType = CommandType.Text;\r\n\t\t\tforeach (var parameter in data.getParameterList())\r\n\t\t\t{\r\n\t\t\t\tcommand.Parameters.Add(parameter);\r\n\t\t\t}\r\n\t\t\tcommand.CommandTimeout = 120;\r\n\t\t\tawait command.ExecuteNonQueryAsync();\r\n\t\t}\r\n\t}\t\r\n\r\n}`\r\n\r\nIs there something I am missing here? How do I get it to work with asynchronous operation?\r\n\r\nPS: I tried to get the code tag work but for some reason it did not work well with that code. I am also not able to add the area label \"area-System.Transactions\"\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKFM6uA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjU0MzE2MA==",
                                           "createdAt":  "2020-08-19T16:55:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-08-19T16:55:18Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "TransactionAbortedException at scope.Complete() when running asynchronous operation ",
        "labels":  [
                       "area-System.Transactions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50848",
        "createdAt":  "2021-04-07T14:12:11Z",
        "number":  50848,
        "author":  "csnemes",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-30T07:37:55Z",
        "body":  "### Description\r\nWhen one tries to enable System.Transactions.TransactionsEventSource an error happens:\r\nERROR: Exception in Command Processing for EventSource System.Transactions.TransactionsEventSource: Event SetActivityId has ID 40 which is already in use.\r\n\r\n### Configuration\r\n\r\n* Which version of .NET is the code running on? .NET5.0\r\n* What OS and version, and what distro if applicable? Windows 10\r\n* What is the architecture (x64, x86, ARM, ARM64)? x64\r\n\r\nReproduction\r\n\r\n    public class MyEventListener : EventListener\r\n    {\r\n        protected override void OnEventSourceCreated(EventSource eventSource)\r\n        {\r\n            if (eventSource.Name.StartsWith(\"System.Transaction\"))\r\n            {\r\n                EnableEvents(eventSource, EventLevel.LogAlways, EventKeywords.All);\r\n            }\r\n        }\r\n\r\n        protected override void OnEventWritten(EventWrittenEventArgs eventData)\r\n        {\r\n          //message will contain the error here\r\n        }\r\n    }\r\n\r\n### Other information\r\n\r\nMy guess is that the private void SetActivityId(string str) method in TransactionsWtwProvider.cs misses the NonEvent attribute.\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObUUrOw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNDk4OTY5Ng==",
                                           "createdAt":  "2021-04-07T15:04:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003chttps://github.com/dotnet/runtime/blob/cf258a14b70ad9069470a108f13765e0e5988f51/src/libraries/System.Transactions.Local/src/System/Transactions/TransactionsEtwProvider.cs#L1158\u003e\r\n\r\nTransactionsEtwProvider.SetActivityId does not appear to access the TransactionsEtwProvider instance. If you made it `static`, then that would also prevent EventSource from treating it as an event method, like NonEventAttribute.\r\n\r\n\u003chttps://github.com/dotnet/runtime/blob/cf258a14b70ad9069470a108f13765e0e5988f51/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L3062\u003e",
                                           "updatedAt":  "2021-04-07T15:04:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNTAwOTQ1MA==",
                                           "createdAt":  "2021-04-07T15:30:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "AsyncTransactionScopeTests.AsyncTSTest enables the event source, but I think it does not detect the error because it just collects the logged events and then ignores them unless the test fails for some other reason.\r\n\r\n\u003chttps://github.com/dotnet/runtime/blob/cf258a14b70ad9069470a108f13765e0e5988f51/src/libraries/System.Transactions.Local/src/System/Transactions/TransactionsEtwProvider.cs#L62-L66\u003e\r\n\r\n\u003chttps://github.com/dotnet/runtime/blob/cf258a14b70ad9069470a108f13765e0e5988f51/src/libraries/System.Transactions.Local/tests/AsyncTransactionScopeTests.cs#L102\u003e\r\n\r\n\u003chttps://github.com/dotnet/runtime/blob/cf258a14b70ad9069470a108f13765e0e5988f51/src/libraries/System.Transactions.Local/tests/TransactionTracingEventListener.cs#L97-L100\u003e",
                                           "updatedAt":  "2021-04-07T15:30:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxODI2MDk5NA==",
                                           "createdAt":  "2021-04-12T21:39:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@HongGit This appears to be an issue in System.Transactions and its uses of Activities.  Please let us know if we can help with the investigation of the issue.",
                                           "updatedAt":  "2021-04-12T21:39:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tRSs7",
                                           "createdAt":  "2023-11-30T07:37:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "This use of `SetActivityId(transactionIdentifier)` looks wrong anyway; the activity ID that it sets will also affect subsequent non-transaction events from the same thread.  Preferably, TransactionsEtwProvider should use a method like [EventSource.Write\\\u003cT\\\u003e (string? eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, ref Guid activityId, ref Guid relatedActivityId, ref T data)](\u003chttps://learn.microsoft.com/dotnet/api/system.diagnostics.tracing.eventsource.write?view=net-8.0#system-diagnostics-tracing-eventsource-write-1(system-string-system-diagnostics-tracing-eventsourceoptions@-system-guid@-system-guid@-0@)\u003e) and pass the activity ID as a parameter, instead of touching the per-thread activity ID.  Alas, that method looks suitable for TraceLogging events only; the EventSource class doesn\u0027t seem to have a similar public or protected method for manifest-based events.  The alternative is to save the original activity ID of the thread and restore it at the end.",
                                           "updatedAt":  "2023-11-30T07:37:54Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "System.Transactions.TransactionsEventSource cannot be enabled due to Event ID failure",
        "labels":  [
                       "area-System.Transactions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55337",
        "createdAt":  "2021-07-08T15:24:20Z",
        "number":  55337,
        "author":  "ionmincu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCpVZxw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sergey-netdev",
                                            "createdAt":  "2022-07-30T08:44:07Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-07-30T09:16:01Z",
        "body":  "### Description\r\n\r\nSometimes on our servers we see the following exception\r\n\r\n```\r\nThe operation is not valid for the state of the transaction.\r\n```\r\n\r\nStacktrace:\r\n\r\n```\r\nLinux x64\r\n\r\n0 { \"method\":\"System.Transactions.TransactionStatePSPEOperation.get_Status\",     \"level\":0, \"line\":0, \"assembly\":\"System.Transactions.Local, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\" }\r\n1 { \"method\":\"System.Transactions.TransactionInformation.get_Status\",            \"level\":1, \"line\":0, \"assembly\":\"System.Transactions.Local, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\" }\r\n2 { \"method\":\"System.Data.SqlClient.SqlDelegatedTransaction.Promote\",            \"level\":2, \"line\":0, \"assembly\":\"System.Data.SqlClient,     Version=4.6.1.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" }\r\n3 { \"method\":\"System.Transactions.TransactionStatePSPEOperation.PSPEPromote\",    \"level\":3, \"line\":0, \"assembly\":\"System.Transactions.Local, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\" }\r\n4 { \"method\":\"System.Transactions.TransactionStateDelegatedNonMSDTC.EnterState\", \"level\":4, \"line\":0, \"assembly\":\"System.Transactions.Local, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\" }\r\n5 { \"method\":\"System.Transactions.EnlistableStates.PromotedToken\",               \"level\":5, \"line\":0, \"assembly\":\"System.Transactions.Local, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\" }\r\n6 { \"method\":\"System.Transactions.Transaction.GetPromotedToken\",                 \"level\":6, \"line\":0, \"assembly\":\"System.Transactions.Local, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\" }\r\n\r\n\r\n0  { \"method\":\"System.RuntimeMethodHandle.InvokeMethod\",                                                     \"assembly\":\"System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\",    \"level\":0,\"line\":0}\r\n1  { \"method\":\"System.Data.SqlClient.SqlInternalConnection.EnlistNonNull\",                                   \"assembly\":\"System.Data.SqlClient, Version=4.6.1.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\",     \"level\":1,\"line\":0}\r\n2  { \"method\":\"System.Data.ProviderBase.DbConnectionPool.PrepareConnection\",                                 \"assembly\":\"System.Data.SqlClient, Version=4.6.1.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\",     \"level\":2,\"line\":0}\r\n3  { \"method\":\"System.Data.ProviderBase.DbConnectionPool.TryGetConnection\",                                  \"assembly\":\"System.Data.SqlClient, Version=4.6.1.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\",     \"level\":3,\"line\":0}\r\n4  { \"method\":\"System.Data.ProviderBase.DbConnectionPool.TryGetConnection\",                                  \"assembly\":\"System.Data.SqlClient, Version=4.6.1.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\",     \"level\":4,\"line\":0}\r\n5  { \"method\":\"System.Data.ProviderBase.DbConnectionFactory.TryGetConnection\",                               \"assembly\":\"System.Data.SqlClient, Version=4.6.1.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\",     \"level\":5,\"line\":0}\r\n6  { \"method\":\"System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal\",                     \"assembly\":\"System.Data.SqlClient, Version=4.6.1.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\",     \"level\":6,\"line\":0}\r\n7  { \"method\":\"System.Data.SqlClient.SqlConnection.TryOpen\",                                                 \"assembly\":\"System.Data.SqlClient, Version=4.6.1.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\",     \"level\":7,\"line\":0}\r\n8  { \"method\":\"System.Data.SqlClient.SqlConnection.Open\",                                                    \"assembly\":\"System.Data.SqlClient, Version=4.6.1.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\",     \"level\":8,\"line\":0}\r\n9  { \"method\":\"System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch\",                \"assembly\":\"EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\",           \"level\":9,\"line\":0}\r\n10 { \"method\":\"System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open\",                  \"assembly\":\"EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\",           \"level\":10,\"line\":0}\r\n11 { \"method\":\"System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy+\u003c\u003ec__DisplayClass2_0.\u003cExecute\u003eb__0\", \"assembly\":\"EntityFramework.SqlServer, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\", \"level\":11,\"line\":0}\r\n12 { \"method\":\"System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute\",                            \"assembly\":\"EntityFramework.SqlServer, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\", \"level\":12,\"line\":0}\r\n13 { \"method\":\"System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute\",                            \"assembly\":\"EntityFramework.SqlServer, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\", \"level\":13,\"line\":0}\r\n14 { \"method\":\"System.Data.Entity.Core.EntityClient.EntityConnection.Open\",                                  \"assembly\":\"EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\",           \"level\":14,\"line\":0}\r\n```\r\n\r\n\r\n**EDIT:**\r\nWe found the same stack trace under a **Windows environment** as well\r\n\r\n```\r\nWindows x64\r\n\r\n0 { \"method\":\"System.Transactions.TransactionStatePSPEOperation.get_Status\",     \"assembly\":\"System.Transactions.Local, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\", \"level\":0,\"line\":0 }\r\n1 { \"method\":\"System.Transactions.TransactionInformation.get_Status\",            \"assembly\":\"System.Transactions.Local, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\", \"level\":1,\"line\":0 }\r\n2 { \"method\":\"System.Data.SqlClient.SqlDelegatedTransaction.Promote\",            \"assembly\":\"System.Data.SqlClient,     Version=4.6.1.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", \"level\":2,\"line\":0 }\r\n3 { \"method\":\"System.Transactions.TransactionStatePSPEOperation.PSPEPromote\",    \"assembly\":\"System.Transactions.Local, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\", \"level\":3,\"line\":0 }\r\n4 { \"method\":\"System.Transactions.TransactionStateDelegatedNonMSDTC.EnterState\", \"assembly\":\"System.Transactions.Local, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\", \"level\":4,\"line\":0 }\r\n5 { \"method\":\"System.Transactions.EnlistableStates.PromotedToken\",               \"assembly\":\"System.Transactions.Local, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\", \"level\":5,\"line\":0 }\r\n6 { \"method\":\"System.Transactions.Transaction.GetPromotedToken\",                 \"assembly\":\"System.Transactions.Local, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\", \"level\":6,\"line\":0 }\r\n```\r\n\r\n### Configuration\r\n- Runtime Linux x64 (first stack trace), Windows x64 (after edit)\r\n- dotnet 5.0.203\r\n\r\n### Regression?\r\n- Not sure if this is a regression\r\n\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\nBased on the documentation page of  [Promotable Single Phase Enlistment](https://docs.microsoft.com/en-us/dotnet/framework/data/transactions/optimization-spc-and-promotable-spn#promotable-single-phase-enlistment) \r\n\r\n\u003e the Promotable Single Phase Enlistment (PSPE) that allows a single remote durable resource, located in a different application domain, process or machine, to participate in a System.Transactions transaction without causing it to be escalated to an MSDTC transaction.\r\n\r\n...**TransactionStatePSPEOperation**  should not throw an exception under a Linux environment where we don\u0027t have MSDTC.\r\n\r\n\r\n# Related\r\nIssue https://github.com/dotnet/SqlClient/issues/784 seems to present the same stacktrace (second one) . \r\n\r\nThis mentions https://github.com/dotnet/SqlClient/pull/543/  which seems to be the culprid because they introduced a new `if` statement and checks the status here \r\n```csharp\r\n                //Throw exception only if Transaction is still active and not yet aborted.\r\n                if (promoteException != null \u0026\u0026 Transaction.TransactionInformation.Status != TransactionStatus.Aborted)\r\n                {\r\n                    throw SQL.PromotionFailed(promoteException);\r\n                }\r\n```\r\nSource: https://github.com/dotnet/SqlClient/pull/543/files#diff-318a0b3769dd34240f6758ac2efc7fc599875e28230753d10d438f6a1c797fbfR211\r\n\r\nAlso opened an issue here: https://github.com/dotnet/SqlClient/issues/1163",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR4hqoA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NjUzMTYwMg==",
                                           "createdAt":  "2021-07-08T15:24:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-07-08T15:24:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HiGqg",
                                           "createdAt":  "2022-07-30T09:16:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sergey-netdev",
                                           "body":  "I have a similar issue on Windows in a .NET 4.8 application using EF Core 3.1\r\nMicrosoft.Data.SqlClient 1.13.20136.2\r\nMicrosoft SQL Server 2019 (RTM-GDR) (KB5014356) - 15.0.2095.3 (X64)   Apr 29 2022 18:00:13   Copyright (C) 2019 Microsoft Corporation  Developer Edition (64-bit) on Windows 10 Pro 10.0 \u003cX64\u003e (Build 19044: ) (Hypervisor) \r\n\r\nI have no distributed transactions (unless some library code does something funny) so use of MSDTC is not expected. The issue manifests itself under high load when there are a lot of write-heavy transactions.\r\n\r\n```\r\nSystem.Transactions.TransactionException: The operation is not valid for the state of the transaction.\r\n   at System.Transactions.TransactionStatePSPEOperation.get_Status(InternalTransaction tx)\r\n   at System.Transactions.TransactionInformation.get_Status()\r\n   at Microsoft.Data.SqlClient.SqlDelegatedTransaction.Promote()\r\n   at System.Transactions.TransactionStatePSPEOperation.PSPEPromote(InternalTransaction tx)\r\n   at System.Transactions.TransactionStateDelegatedBase.EnterState(InternalTransaction tx)\r\n   at System.Transactions.EnlistableStates.Promote(InternalTransaction tx)\r\n   at System.Transactions.Transaction.Promote()\r\n   at System.Transactions.TransactionInterop.ConvertToOletxTransaction(Transaction transaction)\r\n   at System.Transactions.TransactionInterop.GetExportCookie(Transaction transaction, Byte[] whereabouts)\r\n   at Microsoft.Data.SqlClient.SqlInternalConnection.GetTransactionCookie(Transaction transaction, Byte[] whereAbouts)\r\n   at Microsoft.Data.SqlClient.SqlInternalConnection.EnlistNonNull(Transaction tx)\r\n   at Microsoft.Data.SqlClient.SqlInternalConnection.Enlist(Transaction tx)\r\n   at Microsoft.Data.ProviderBase.DbConnectionInternal.ActivateConnection(Transaction transaction)\r\n   at Microsoft.Data.ProviderBase.DbConnectionPool.PrepareConnection(DbConnection owningObject, DbConnectionInternal obj, Transaction transaction)\r\n   at Microsoft.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal\u0026 connection)\r\n   at Microsoft.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal\u0026 connection)\r\n   at Microsoft.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal\u0026 connection)\r\n   at Microsoft.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at Microsoft.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)\r\n   at Microsoft.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\r\n   at Microsoft.Data.SqlClient.SqlConnection.Open()\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenDbConnection(Boolean errorsExpected)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Open(Boolean errorsExpected)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.OpenConnection(DatabaseFacade databaseFacade)\r\n```",
                                           "updatedAt":  "2022-07-30T09:16:00Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "BUG: TransactionStatePSPEOperation throws exception in valid enviroment",
        "labels":  [
                       "area-System.Transactions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71769",
        "createdAt":  "2022-07-07T16:37:38Z",
        "number":  71769,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqUEwA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "natalie-o-perret",
                                            "createdAt":  "2022-07-07T16:50:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "natalie-o-perret",
                                            "createdAt":  "2022-07-07T16:51:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rwasef1830",
                                            "createdAt":  "2022-07-07T17:01:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jonlouie",
                                            "createdAt":  "2022-07-07T17:17:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "petarpetrovt",
                                            "createdAt":  "2022-07-07T18:26:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "paillave",
                                            "createdAt":  "2022-07-07T19:28:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "quixoticaxis",
                                            "createdAt":  "2022-07-07T20:07:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SimonCropp",
                                            "createdAt":  "2022-07-07T20:43:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bhanuteja-dev",
                                            "createdAt":  "2022-07-07T20:44:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "yreynhout",
                                            "createdAt":  "2022-07-07T20:52:30Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Zoxive",
                                            "createdAt":  "2022-07-07T20:54:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "randyburden",
                                            "createdAt":  "2022-07-07T21:40:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "godfa99",
                                            "createdAt":  "2022-07-07T22:13:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NZE",
                                            "createdAt":  "2022-07-07T22:28:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gbiellem",
                                            "createdAt":  "2022-07-07T22:35:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cristhyanc",
                                            "createdAt":  "2022-07-07T22:56:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Varorbc",
                                            "createdAt":  "2022-07-07T22:59:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2022-07-07T23:02:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mandlar",
                                            "createdAt":  "2022-07-07T23:05:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "birojnayak",
                                            "createdAt":  "2022-07-07T23:19:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "deivisonrpg",
                                            "createdAt":  "2022-07-08T01:10:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HEskandari",
                                            "createdAt":  "2022-07-08T02:40:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mahara",
                                            "createdAt":  "2022-07-08T02:46:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SIkebe",
                                            "createdAt":  "2022-07-08T06:53:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "swh-cb",
                                            "createdAt":  "2022-07-08T07:59:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gfoidl",
                                            "createdAt":  "2022-07-08T09:47:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sakno",
                                            "createdAt":  "2022-07-08T12:50:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tillig",
                                            "createdAt":  "2022-07-08T15:19:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hammdo",
                                            "createdAt":  "2022-07-09T04:27:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "altso",
                                            "createdAt":  "2022-07-11T15:21:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pughua",
                                            "createdAt":  "2022-07-12T00:41:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "csrowell",
                                            "createdAt":  "2022-07-12T04:10:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ValdisThomann",
                                            "createdAt":  "2022-07-15T04:06:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "llermanos",
                                            "createdAt":  "2022-07-15T23:07:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mbakhoff",
                                            "createdAt":  "2022-07-24T18:04:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "XieJJ99",
                                            "createdAt":  "2022-07-27T09:12:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "notes2c",
                                            "createdAt":  "2022-08-01T10:12:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2022-08-02T17:48:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pruiz",
                                            "createdAt":  "2022-08-02T18:45:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "l2999019",
                                            "createdAt":  "2022-08-05T08:30:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Jens-Alexander-jyskebank-dk",
                                            "createdAt":  "2022-08-08T07:14:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2022-08-08T22:09:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jasonmwebb-lv",
                                            "createdAt":  "2022-08-10T01:53:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Giorgi",
                                            "createdAt":  "2022-08-13T18:36:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gtbuchanan",
                                            "createdAt":  "2022-08-15T19:10:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Azaferany",
                                            "createdAt":  "2022-08-22T11:55:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aRmanNM",
                                            "createdAt":  "2022-08-22T11:56:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "deinman",
                                            "createdAt":  "2022-08-23T15:39:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HongGit",
                                            "createdAt":  "2022-08-23T22:43:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YataoFeng",
                                            "createdAt":  "2022-08-27T08:09:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LingDian2019",
                                            "createdAt":  "2022-08-27T08:14:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bestvcboy",
                                            "createdAt":  "2022-08-27T08:15:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "geffzhang",
                                            "createdAt":  "2022-08-27T11:56:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bxjg1987",
                                            "createdAt":  "2022-08-27T14:26:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mburumaxwell",
                                            "createdAt":  "2022-08-28T08:58:20Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "HarisPit",
                                            "createdAt":  "2022-09-08T17:08:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "peterbomers",
                                            "createdAt":  "2022-09-12T12:24:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "c0shea",
                                            "createdAt":  "2022-09-15T12:31:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "slamj1",
                                            "createdAt":  "2022-09-16T23:11:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "veizx",
                                            "createdAt":  "2022-09-22T11:03:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joskoanicic",
                                            "createdAt":  "2022-09-23T08:29:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ZellChen",
                                            "createdAt":  "2022-09-26T02:53:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jack775544",
                                            "createdAt":  "2022-09-30T01:32:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Westboldyi",
                                            "createdAt":  "2022-10-01T04:44:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JackBOBO",
                                            "createdAt":  "2022-10-10T06:19:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sibusten",
                                            "createdAt":  "2022-10-14T19:56:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cheenamalhotra",
                                            "createdAt":  "2022-11-16T08:30:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mlidbom",
                                            "createdAt":  "2022-11-17T10:01:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mr-Lei-web",
                                            "createdAt":  "2022-11-24T08:11:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mwt-jyskebank-dk",
                                            "createdAt":  "2022-11-30T15:06:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fradaham",
                                            "createdAt":  "2022-12-09T17:07:42Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "fradaham",
                                            "createdAt":  "2022-12-12T07:59:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bencelang",
                                            "createdAt":  "2023-01-02T15:02:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zgramana",
                                            "createdAt":  "2023-01-04T23:03:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TomaszWegrzyn",
                                            "createdAt":  "2023-01-05T16:09:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vasiljevic",
                                            "createdAt":  "2023-01-05T18:13:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "georg-jung",
                                            "createdAt":  "2023-01-13T10:08:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "frodet",
                                            "createdAt":  "2023-01-19T12:54:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "btarasevich",
                                            "createdAt":  "2023-01-21T00:21:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "antoniofreire",
                                            "createdAt":  "2023-01-30T00:52:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jlopez788",
                                            "createdAt":  "2023-02-06T05:41:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Bezdaak",
                                            "createdAt":  "2023-02-06T15:13:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wuhkuh",
                                            "createdAt":  "2023-02-23T10:27:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Admiralkheir",
                                            "createdAt":  "2023-03-20T15:58:41Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Admiralkheir",
                                            "createdAt":  "2023-03-20T15:58:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iancassl",
                                            "createdAt":  "2023-03-21T18:01:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pedoc",
                                            "createdAt":  "2023-03-31T03:01:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dvdtth",
                                            "createdAt":  "2023-04-01T00:08:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Abdullah-onGit",
                                            "createdAt":  "2023-04-03T09:21:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tillingworthxplor",
                                            "createdAt":  "2023-04-06T09:38:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "romfir",
                                            "createdAt":  "2023-05-02T23:38:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MitchellPaff",
                                            "createdAt":  "2023-05-04T14:15:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Artur2",
                                            "createdAt":  "2023-05-15T07:40:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Broderick890",
                                            "createdAt":  "2023-05-16T16:03:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Molochnikov",
                                            "createdAt":  "2023-05-23T19:24:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "phoenixcoded20",
                                            "createdAt":  "2023-06-16T09:26:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sb-ruisms",
                                            "createdAt":  "2023-06-26T16:32:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jimmyzimms",
                                            "createdAt":  "2023-06-28T01:06:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wertzui",
                                            "createdAt":  "2023-07-04T12:22:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tewr",
                                            "createdAt":  "2023-07-09T09:28:22Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Tewr",
                                            "createdAt":  "2023-07-09T09:28:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TWRRLX",
                                            "createdAt":  "2023-07-11T11:37:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "atsukur",
                                            "createdAt":  "2023-07-18T01:33:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xXAvoraXx",
                                            "createdAt":  "2023-07-18T16:51:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CSharpFiasco",
                                            "createdAt":  "2023-08-19T15:33:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bartbovendeerdt",
                                            "createdAt":  "2023-08-23T07:24:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "snagda",
                                            "createdAt":  "2023-08-24T18:27:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ksn1992",
                                            "createdAt":  "2023-09-07T00:59:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vasiokp",
                                            "createdAt":  "2023-09-07T09:44:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ksyu33",
                                            "createdAt":  "2023-09-11T09:04:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "koenvanderlinden",
                                            "createdAt":  "2023-09-14T13:31:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NicMeadows",
                                            "createdAt":  "2023-09-19T11:01:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CedricHg",
                                            "createdAt":  "2023-10-02T15:20:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omajid",
                                            "createdAt":  "2023-10-24T20:56:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "captainsafia",
                                            "createdAt":  "2023-10-30T02:39:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sverigevader",
                                            "createdAt":  "2023-11-02T22:19:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "odyvangelis",
                                            "createdAt":  "2023-11-07T13:06:20Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "aloraman",
                                            "createdAt":  "2023-11-08T20:11:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rafaelbm",
                                            "createdAt":  "2023-11-17T02:15:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kresimirfijacko",
                                            "createdAt":  "2023-11-17T12:44:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mihaimyh",
                                            "createdAt":  "2023-12-15T04:22:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "candanbaykan",
                                            "createdAt":  "2023-12-17T06:15:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "inson1",
                                            "createdAt":  "2024-01-04T23:41:29Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "inson1",
                                            "createdAt":  "2024-01-04T23:41:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alperber",
                                            "createdAt":  "2024-01-22T12:41:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vjraitila",
                                            "createdAt":  "2024-02-17T16:07:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YohanSciubukgian",
                                            "createdAt":  "2024-03-04T21:10:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DebashishSaha",
                                            "createdAt":  "2024-03-22T21:50:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lassanter",
                                            "createdAt":  "2024-03-28T02:16:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Neme12",
                                            "createdAt":  "2024-04-01T12:54:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RomanBadiornyi",
                                            "createdAt":  "2024-04-02T12:48:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zadykian",
                                            "createdAt":  "2024-04-09T14:37:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SystematicChaos012",
                                            "createdAt":  "2024-04-22T02:25:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DAHAG-ArisNourbakhsh",
                                            "createdAt":  "2024-04-25T10:22:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Zalarian",
                                            "createdAt":  "2024-05-08T16:28:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ClassTerr",
                                            "createdAt":  "2024-05-31T14:34:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xriuk",
                                            "createdAt":  "2024-06-05T07:55:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ArneVanhee",
                                            "createdAt":  "2024-06-14T13:51:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andreykotomin",
                                            "createdAt":  "2024-06-18T13:16:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "airbreather",
                                            "createdAt":  "2024-07-03T10:17:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AhmedKabbary",
                                            "createdAt":  "2024-07-09T10:08:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rvdginste",
                                            "createdAt":  "2024-07-17T10:43:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NathanWash",
                                            "createdAt":  "2024-07-21T15:54:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KieranDevvs",
                                            "createdAt":  "2024-07-25T09:04:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "1w1f",
                                            "createdAt":  "2024-08-15T08:53:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "akarboush",
                                            "createdAt":  "2024-08-23T09:49:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JeremyButts",
                                            "createdAt":  "2024-08-26T22:07:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cojosh",
                                            "createdAt":  "2024-09-12T09:30:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "coleman-c",
                                            "createdAt":  "2024-09-19T12:33:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pallen0304",
                                            "createdAt":  "2024-09-20T19:01:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "leedonhyun",
                                            "createdAt":  "2024-10-07T04:31:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MoazAlkharfan",
                                            "createdAt":  "2024-10-16T17:30:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "graju-tibco",
                                            "createdAt":  "2024-12-12T01:48:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BernhardNinaus",
                                            "createdAt":  "2024-12-17T16:06:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zengande",
                                            "createdAt":  "2025-01-08T01:40:30Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "zengande",
                                            "createdAt":  "2025-01-08T01:40:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LPVRamos",
                                            "createdAt":  "2025-02-11T14:49:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pekkah",
                                            "createdAt":  "2025-02-12T12:40:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LarsKemmann",
                                            "createdAt":  "2025-02-14T20:51:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2025-02-17T15:48:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Flithor",
                                            "createdAt":  "2025-02-19T02:50:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "professor-k",
                                            "createdAt":  "2025-03-04T16:55:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "msiemens",
                                            "createdAt":  "2025-03-11T16:09:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pedro-fontinele",
                                            "createdAt":  "2025-03-23T22:21:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "connorb08",
                                            "createdAt":  "2025-03-31T18:43:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "piskov",
                                            "createdAt":  "2025-04-23T15:04:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Travis-Th",
                                            "createdAt":  "2025-05-14T17:46:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alpersogukpinar",
                                            "createdAt":  "2025-05-16T04:14:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "filipe-assis",
                                            "createdAt":  "2025-05-25T21:56:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "splitt3r",
                                            "createdAt":  "2025-07-09T04:57:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "frencsi",
                                            "createdAt":  "2025-08-04T14:47:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pertinokin",
                                            "createdAt":  "2025-08-19T21:35:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "simonsk90",
                                            "createdAt":  "2025-08-25T12:41:43Z"
                                        }
                                    ],
                          "totalCount":  173
                      },
        "updatedAt":  "2025-03-24T08:02:40Z",
        "body":  "#715 tracks porting the .NET Framework distributed transaction support over to modern .NET. Unfortunately, that support is tightly coupled to the Windows MSDTC service (and the OleTx protocol), so this works on **Windows only**. This issue tracks enabling distributed transactions in a cross-platform way. We are currently gauging user interest in this; if this is something you want, please upvote.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOo79NVA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5GQpYw",
                                           "createdAt":  "2022-07-08T09:31:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "paillave",
                                           "body":  "This feature is dramatically useful on a cross-platform target since docker takes more place every day in infrastructures.\r\nAt my side, I don\u0027t use WCF since ages, but TransactionScope remains extremely important when dealing with multiple Dbs, or simply to manage transaction in a simple and generic way.\r\n",
                                           "updatedAt":  "2022-07-08T09:31:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GQ5yy",
                                           "createdAt":  "2022-07-08T10:40:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "I\u0027ve discussed this with various people, and there seems to be a trend away from 2-phase-commit distributed transactions in new applications utilizing cloud-native and microservice architectures. The alternatives are typically compensation-based patterns (e.g. Sagas), which allow some degree of eventual consistency in the system, but do not require a centralized, highly-available transaction manager, and do not introduce the additional dependencies and latency that 2PC does.\r\n\r\nFor more info on why 2PC may not be the right choice for the cloud, I recommend reading [this](http://vasters.com/archive/Transactions-In-Windows-Azure-with-Service-Bus---An-Email-Discussion.html). For a good architectural comparison of 2PC vs. compensation strategies, I recommend [this post](https://developers.redhat.com/articles/2021/09/21/distributed-transaction-patterns-microservices-compared#orchestration) and [this one](https://vasters.com/archive/Achieving-Transactional-Behavior-With-Messaging.html) (thanks to @scoriani for these).\r\n\r\nNote that my intent isn\u0027t to start a big discussion on 2PC vs. Sagas on this issue - that\u0027s better done elsewhere. I do understand that Docker is a reason why cross-platform is more important; at this point we want to gauge how many users are interested in this, and why also why the alternatives (e.g. Sagas) aren\u0027t viable for their situation.",
                                           "updatedAt":  "2022-07-08T10:40:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GRMHI",
                                           "createdAt":  "2022-07-08T12:04:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ImGonaRot",
                                           "body":  "@roji I think you meant to say (https://github.com/dotnet/runtime/issues/715 is for gauging that interest) since it was created back in 2019 and has lots of user comments versus https://github.com/dotnet/runtime/issues/71769 which was just created 19 hours ago. I am a .NET contractor for several companies, one with a 100+ developers, that still use MSDTC for distributed transactions across multiple MS SQL servers. They do use some .NET Core for smaller projects but will be stuck with .NET 4.x framework for their main websites and EDI engines since those require heavy use of distributed transactions with MSDTC. As long as MS SQL server can use MSDTC for distributed transactions, I think you will find a lot of the bigger shops that use multiple MS SQL servers will sticking with good old ADO.NET / MSDTC / distributed transactions. I know it is Windows only but I\u0027m not sure why MS would abandon a great key feature of MS SQL. That is just my opinion though. I do hope some day it is added to .NET 7+.",
                                           "updatedAt":  "2022-07-08T12:04:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GRNq-",
                                           "createdAt":  "2022-07-08T12:11:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e I think you meant to say (https://github.com/dotnet/runtime/issues/715 is for gauging that interest) since it was created back in 2019 and has lots of user comments versus https://github.com/dotnet/runtime/issues/71769 which was just created 19 hours ago.\r\n\r\nThe problem is that #715 was generally about supporting distributed transactions in .NET Core; it\u0027s not clear whether people voting on it are interested in simply moving existing applications from .NET Framework to Core - on Windows (that\u0027s what we aim to enable in .NET 7.0), or whether they\u0027re looking for cross-platform support. I suspect that a lot of the interest is about moving away from .NET Framework, and much less is about being able to move from Windows to Linux/Mac. This is why this separate issue now explicitly tracks cross-platform support, as opposed to Windows-only support.\r\n\r\n",
                                           "updatedAt":  "2022-07-08T12:11:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GRQS5",
                                           "createdAt":  "2022-07-08T12:23:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "paillave",
                                           "body":  "What I\u0027m going to say may sound crazy, but I\u0027ll give it a try:\r\nAs Microsoft is a large powerful company, is it crazy to imagine that a new standard protocol is created for 2PC? This protocol would be simple enough to permit to any DB engine to be updated to support it. Then Microsoft could start to embed it in the DB engine it supports: SqlServer, CosmoDb, even Postgre...\r\nI know this sounds like quite a journey ( 🤣 ) but this is a very useful and powerful pattern that needs an influent actor such as Microsoft to deal with this large scale problem.",
                                           "updatedAt":  "2022-07-08T12:24:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GRS_f",
                                           "createdAt":  "2022-07-08T12:35:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOClyzDA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2022-07-08T12:40:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "scoriani",
                                           "body":  "Let me clarify: Microsoft is not \"abandoning\" 2PC and MSDTC, period! This is and will be supported by SQL Server on both Windows and Linux deployments across the entire stack. That said, as the industry recognise (see the articles linked above), 2PC doesn\u0027t really cope with cloud native development and architectures so, for those scenarios, we\u0027re not really going to promote this approach. Hope this clarifies.",
                                           "updatedAt":  "2022-07-08T12:35:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GRU2X",
                                           "createdAt":  "2022-07-08T12:43:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOClz5sw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sakno",
                                                                               "createdAt":  "2022-07-08T12:51:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "paillave",
                                                                               "createdAt":  "2022-07-08T14:17:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "roji",
                                           "body":  "Thanks for the clarification @scoriani. Yes; we\u0027re assuming that cross-platform supported would mainly be to support cloud-native deployments, but in those deployments 2PC is generally considered problematic (see the articles above). This is why we\u0027re looking to understand whether people are actually interested this. We\u0027re still committed to supporting 2PC and MSDTC on Windows, which is what we\u0027re targeting for .NET 7.0.\r\n\r\n@paillave there\u0027s no need to invent a new protocol for 2PC; XA already exists and is well-supported across databases and transaction managers. If we did go ahead and implement cross-platform distributed transactions, that\u0027s what we\u0027d build upon.",
                                           "updatedAt":  "2022-07-08T12:43:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GRW6Z",
                                           "createdAt":  "2022-07-08T12:52:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rwasef1830",
                                           "body":  "Is the transaction scope API pluggable ? If not, can it at least be made\nwith a provider model to allow others to implement an xa based transaction\nscope support ?\n\nThe case I need is the simple synchronization between 2 postgres databases\nand two phase commit.\n\nOn Fri, 8 Jul 2022, 2:43 pm Shay Rojansky, ***@***.***\u003e wrote:\n\n\u003e Thanks for the clarification @scoriani \u003chttps://github.com/scoriani\u003e.\n\u003e Yes; we\u0027re assuming that cross-platform supported would mainly be to\n\u003e support cloud-native deployments, but in those deployments 2PC is generally\n\u003e considered problematic (see the articles above). This is why we\u0027re looking\n\u003e to understand whether people are actually interested this. We\u0027re still\n\u003e committed to supporting 2PC and MSDTC on Windows, which is what we\u0027re\n\u003e targeting for .NET 7.0.\n\u003e\n\u003e @paillave \u003chttps://github.com/paillave\u003e there\u0027s no need to invent a new\n\u003e protocol for 2PC; XA already exists and is well-supported. If we did go\n\u003e ahead and implement cross-platform distributed transactions, that\u0027s what\n\u003e we\u0027d build upon.\n\u003e\n\u003e —\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/dotnet/runtime/issues/71769#issuecomment-1178946967\u003e,\n\u003e or unsubscribe\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/ABDK5PNYJLN54VQADTK3NEDVTAPAZANCNFSM526BXHJQ\u003e\n\u003e .\n\u003e You are receiving this because you are subscribed to this thread.Message\n\u003e ID: ***@***.***\u003e\n\u003e\n",
                                           "updatedAt":  "2022-07-08T12:52:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GRcek",
                                           "createdAt":  "2022-07-08T13:16:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODb5j7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "paillave",
                                                                               "createdAt":  "2022-07-08T14:18:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mahara",
                                                                               "createdAt":  "2022-07-08T21:47:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ksn1992",
                                                                               "createdAt":  "2023-09-07T01:12:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sergiivolchkovatbetsson",
                                                                               "createdAt":  "2024-03-26T10:38:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "roji",
                                           "body":  "@rwasef1830 System.Transactions (TransactionScope) currently isn\u0027t pluggable in terms of the transaction manager - it\u0027s currently mostly hard-wired to using MSDTC. What you\u0027re say basically amounts to implementing cross-platform distributed transactions, as I\u0027ve described above. It would roughly mean the following (this isn\u0027t exhaustive):\r\n\r\n* Creating a new a transaction manager abstraction, to allow users to plug in 3rd-party TM (e.g. Redhat Narayana, Atomikos, Tuxedo, etc.\r\n* Modifying Sys.Tx to allow users to provide their TM implementation (Globally? For each TransactionScope?)\r\n* Modifying the interface between Sys.Tx and resource managers (i.e. database drivers) to allow supporting XA. For example, the recovery flow in Sys.Tx is currently geared around SQL Server/MSDTC, and isn\u0027t really compatible with XA. There are other incompatibilities.\r\n* Modify all database drivers (e.g. SqlClient, Npgsql) to work with the modified Sys.Tx.\r\n* As an alternative to retrofitting XA into Sys.Tx, we could create a separate, new API only for XA-based distributed transactions.\r\n\r\nThe above is, well, far from trivial, and most probably not something one can simply do as a 3rd-party thing.\r\n\r\nNote that Npgsql did support distributed transactions for PostgreSQL on .NET Framework, via Sys.Tx. However, it did so as a volatile RM, meaning that recovery wasn\u0027t implemented; this was mainly because of the incompatible recovery flow mentioned above (see https://github.com/npgsql/npgsql/issues/1378).\r\n\r\nPS As a sort of hack, if you\u0027re just looking to do 2PC without recovery, you can manually send PostgreSQL [`PREPARE TRANSACTION`](https://www.postgresql.org/docs/current/sql-prepare-transaction.html) and [`COMMIT PREPARED`](https://www.postgresql.org/docs/current/sql-commit-prepared.html) from your application. This should work, but if there\u0027s a crash in between, you\u0027ll have to somehow deal with it yourself.",
                                           "updatedAt":  "2022-07-08T13:21:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GV-gG",
                                           "createdAt":  "2022-07-11T09:23:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swh-cb",
                                           "body":  "@roji Do you know if it\u0027s technically possible to deploy MSDTC as a stand-alone service (i.e. without SQL Server) on platforms other than Windows in the future? If MSDTC would provide a new, platform-independent (HTTP?) API as an alternative to the existing COM interface for this stand-alone service, .NET could continue to use OleTx transactions with MSDTC for all platforms. This would have the advantage that the existing database drivers doesn\u0027t need to be changed. If an application wants to use a 3rd party XA transaction manager, .NET can still map the XA transaction to an internal OleTx transaction using the [XA mapping functionality provided by MSDTC](https://docs.microsoft.com/en-us/archive/blogs/bobsql/how-it-works-sql-server-dtc-msdtc-and-xa-transactions). For example the [ODBC driver for SQL server](https://docs.microsoft.com/en-us/sql/connect/odbc/use-xa-with-dtc) can use a remote MSDTC (that is connected to the SQL server) to coordinate XA transactions platform-independently on Windows, Linux and macOS.\r\n\r\nBy the way, distributed transactions are already possible for cloud-native deployments if you deploy your apps to Azure with Azure SQL only. Azure SQL supports distributed transactions (called [elastic transactions](https://docs.microsoft.com/en-us/azure/azure-sql/database/elastic-transactions-overview)) in a limited way using a non-MSDTC transaction coordinator. For this to work in .NET, the SQL client performs a PSPE enlistment with a custom promoter type on Azure. Custom promoter types were [introduced in .NET Framework 4.6.1](https://devblogs.microsoft.com/dotnet/net-framework-4-6-1-is-now-available/#distributed-transactions-with-non-msdtc-coordinators) and ported to .NET Core to allow external non-MSDTC transaction managers in `System.Transactions` for delegated transactions only.",
                                           "updatedAt":  "2022-07-11T09:23:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GWDux",
                                           "createdAt":  "2022-07-11T09:46:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@swh-cb I\u0027m not related to MSDTC in any way, so I can\u0027t speak to their plans. But as far as I know, MSDTC definitely doesn\u0027t run on non-Windows platforms - and I\u0027d be surprised if there are plans to change that. It\u0027s purely a Windows service. So a future HTTP-based OleTx interface wouldn\u0027t really help, unless you\u0027re OK with having a Windows server somewhere just for that.\r\n\r\nIt\u0027s unfortunately very likely that drivers will need to change in any case; as I wrote above, the Sys.Tx model has some incompatibilities with the XA approach, especially around recovery and the management of the transaction ID (XID in XA).\r\n\r\nYeah, I\u0027m well-aware of the Azure SQL elastic transaction mechanism. That\u0027s a pretty unique model, in which the (first) database itself acts as DTC. Sys.Tx was changed specifically to support that model, and you can\u0027t manage any non-Azure resources in the distributed transaction (e.g. a queue). Though interestingly enough, since there\u0027s no dependency on MSDTC, it should be possible to do those transactions from non-Windows platforms. In any case, I don\u0027t think this model is very relevant for the general cross-platform 2PC conversation.",
                                           "updatedAt":  "2022-07-11T09:46:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GWNO5",
                                           "createdAt":  "2022-07-11T10:27:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "paillave",
                                           "body":  "@roji  Maybe @swh-cb has a point here. It **might** be easier and less risky to make some sort of multi platform MSDC (in .NET core if performances can allow it). \r\nBecause indeed, the plan you have in mind not only looks like a daunting duty, but it seems very risky (as many key components have to be touched in their core), and very complicated to manage (as there are as many teams as there are components involved in all this matter, it looks like something like this can be done in 5 years min and has many chances to be abandoned at the end of the day).\r\nMaking an opensource multiplatform replacement of MSDTC in .NET seems to be the most graceful way to overcome your problem at then end of the day.\r\nTherefore at your side, the work would be limited to ensure to call the right transaction manager depending on the runtime context.\r\nDo I sound too crazy?",
                                           "updatedAt":  "2022-07-11T10:39:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GWRfJ",
                                           "createdAt":  "2022-07-11T10:47:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "First, creating a new transaction manager is well out of scope of this discussion. A DTC is a complex piece of software with very strong reliability requirements; building a new one (and possibly porting MSDTC to Linux) is very likely to be more work than the above cross-platform plan. In any case, battle-proven DTCs already exist out there, so I don\u0027t think we should be writing another one.\r\n\r\nSecond, a cross-platform MSDTC would not be a magic bullet solution here. As I wrote above, the Sys.Tx design is incompatible with some XA aspects, especially around recovery and transaction ID management. This means that while you\u0027d be able to do 2PC against SQL Server run on Linux, it would still be problematic - and possibly impossible - to implement full 2PC against other databases (e.g. MySQL, PostgreSQL).\r\n\r\nFinally, it doesn\u0027t seem appropriate to require anyone using distributed transactions to use only one transaction manager; it should be possible for people to use whatever it is that fits their needs.\r\n\r\nTo summarize, cross-platform 2PC support in .NET would mean adopting the XA protocol, which is already supported across a wide array of of both databases/queues, and transaction manager implementations. This would unfortunately require changes in both Sys.Tx and existing database drivers.",
                                           "updatedAt":  "2022-07-11T10:47:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GWiXN",
                                           "createdAt":  "2022-07-11T11:49:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGca8Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "LarsKemmann",
                                                                               "createdAt":  "2025-02-14T20:43:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "paillave",
                                           "body":  "I don\u0027t really know what you have in mind when you mention the \"scope\". I get that the scope of this post is to have a vote whether TransactionScope shall be multiplatform or not. As a matter of a fact, the only scope I\u0027m interested in is to have a simple 2PC tooling working on every platform. The way it is done behind the scenes really doesn\u0027t matter to me 😄 \r\n\r\nIf my understanding is correct (I may be wrong), what you say is the following:\r\n\r\n- There is already a protocol defined for such matters\r\n- There are several multiplatform servers that correctly implement this protocol\r\n- MSDTC doesn\u0027t fully respect this protocol (I suppose the reason of this choice is that 24 year ago, when Microsoft started to write MSDTC for DCOM, the protocol wasn\u0027t complete enough for all the needs that had to be covered)\r\n- Drivers Microsoft wrote are made to interact with MSDTC, but not with servers that respect this protocol (same assumption as above)\r\n\r\nIf what I mention above is correct... There is obviously something that must be addressed at the end of the day. I understand this is a lot of work and **very** risky actions. But I believe that at some point, in years maybe, it is clearly obvious that MSDTC and drivers will have to respect this protocol.\r\n\r\nSadly, it looks like this will never happen, as it took 20 years for something as crucial and popular as a web browser to fully comply with standards... so I can\u0027t even imagine how long it will take for a 2PC server 😞 \r\n\r\nI believe you won\u0027t have many votes to request to have this done as most people will choose the easy and quick solution (not using docker) and will never have the patience to wait that Microsoft does the work.",
                                           "updatedAt":  "2022-07-11T11:49:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GWkcZ",
                                           "createdAt":  "2022-07-11T11:59:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e The way it is done behind the scenes really doesn\u0027t matter to me\r\n\r\nI do understand that, and you\u0027re right that users shouldn\u0027t care how the solution is implemented. But it\u0027s important to understand that we\u0027re discussing this within the scope of .NET, where MSDTC is a completely different component, which is part of Windows. Any approach which relies on MSDTC being ported to non-Windows is, pragmatically speaking, most probably a non-starter. In addition, as I wrote above, we don\u0027t want the end result to be dependent on MSDTC, but rather to support other distributed transaction managers. That\u0027s why I suggest leaving MSDTC out of the cross-platform discussion.",
                                           "updatedAt":  "2022-07-11T11:59:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GWl0M",
                                           "createdAt":  "2022-07-11T12:05:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "paillave",
                                           "body":  "\u003e  In addition, as I wrote above, we don\u0027t want the end result to be dependent on MSDTC, but rather to support other distributed transaction managers. That\u0027s why I suggest leaving MSDTC out of the cross-platform discussion.\r\n\r\nI could not agree more, and this is this very conclusion that leads me to think that I am not going to see this proper solution to be implemented soon regarding the massive and risky work that must be done.",
                                           "updatedAt":  "2022-07-11T12:05:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GXkcC",
                                           "createdAt":  "2022-07-11T15:54:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swh-cb",
                                           "body":  "@roji Thank you for the detailed explanation why in the long term the XA protocol should be integrated in .NET, similar to Java.\r\n\r\n\u003e But as far as I know, MSDTC definitely doesn\u0027t run on non-Windows platforms - and I\u0027d be surprised if there are plans to change that. It\u0027s purely a Windows service. \r\n\r\nAre you sure? So far I was of the opinion that MSDTC is already embedded in the SQL Server and has been running on Linux since SQL Server 2017. This is also what the [SQL Server documentation](https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-configure-msdtc) says. So I thought that before teaching .NET the XA protocol, maybe it should be considered to extract the MSDTC component as a stand-alone service in Linux. This is of course not the scope of this .NET issue and should be discussed with the MSDTC/SQL Server team. Maybe there is also a solution for the XA/OleTx incompatibilities you mentioned.\r\n\r\n",
                                           "updatedAt":  "2022-07-11T15:54:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GYP3Y",
                                           "createdAt":  "2022-07-11T19:05:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@swh-cb even if this were possible (and I don\u0027t know if it is), as I wrote above that still excludes other databases (PostgreSQL, MySQL) and other transaction managers. So I still don\u0027t think it makes sense as a general strategy for cross-platform distributed transactions.",
                                           "updatedAt":  "2022-07-11T19:05:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GsTj5",
                                           "createdAt":  "2022-07-15T23:24:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "llermanos",
                                           "body":  "In our case, we have business applications developed from .NET 3.5 that use WCF with ONPREMISE distributed transactions and this is not going to change due to the business needs of our clients. Solutions that have more than 150+ assemblies and have around more than 15 years of work.\r\n\r\nCurrently we have been able to migrate most services and applications to .NET 6, but the transactional layers have been stuck in .NET 4.8 and .Net Standard.\r\n\r\nWe don\u0027t need it to be multiplatform or cloud either, because with Windows it covers our needs and the cloud is not an option. The best option in our case is for it to be a Windows-only feature and to be able to migrate all projects to .NET 6.\r\n",
                                           "updatedAt":  "2022-07-15T23:24:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gsyfo",
                                           "createdAt":  "2022-07-16T10:29:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@llermanos thanks for the feedback - that\u0027s definitely a scenario we had in mind, and that\u0027s why we\u0027re planning on doing #715 for the upcoming 7.0 release (am actively working on that). I may need some help confirming that WCF works well here, any chance you could help out with a minimal .NET Core console program that would represent your scenario?",
                                           "updatedAt":  "2022-07-16T10:29:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HoPXe",
                                           "createdAt":  "2022-08-01T21:17:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "llermanos",
                                           "body":  "@roji \r\n\r\nOf course I can help.\r\nI\u0027m going to need a couple of days to prepare a demo.\r\nWhat I\u0027m not sure about in a scenario where there is WCF with TransactionFlow=Enabled/Required at another end might work. I know that CoreWCF doesn\u0027t support TransactionFlow yet, I should do some more research.\r\n\r\nScenario 1:\r\n.NET6 Console App w/EF 6.4 (Transaction Scope)\r\n.NET4.8 WCF Service w/EF 6.4 OR ADO.\r\n\r\nScenario 2:\r\n.NET6 Console App w/EF 6.4 (Transaction Scope) EF/ADO\r\n.NET6 Console App EF 6.4 (Transaction Scope) EF/ADO",
                                           "updatedAt":  "2022-08-01T21:21:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HoQSc",
                                           "createdAt":  "2022-08-01T21:21:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@llermanos thanks.\r\n\r\nAt the moment I\u0027m indeed concentrating on the scenario where multiple database connections are enlisted to the same transaction (e.g. via TransactionScope) in the same application. I did bring the entire support over from .NET Framework, so in principle, there\u0027s good reason to believe WCF scenarios would work as well; but proper testing is important here.\r\n\r\nI\u0027ll be focusing on the PR in the coming days, to get it merge within the next two weeks. Any info/samples/help would be appreciated.\r\n\r\nBTW let\u0027s continue this conversation over on #715, since this issue tracks the cross-platform support. I\u0027ll minimize our comments here.",
                                           "updatedAt":  "2022-08-01T21:21:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IALbL",
                                           "createdAt":  "2022-08-08T11:29:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8Ryng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TomaszWegrzyn",
                                                                               "createdAt":  "2023-01-05T16:13:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "chester89",
                                                                               "createdAt":  "2023-03-23T14:57:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JackBOBO",
                                                                               "createdAt":  "2023-04-25T02:47:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Molochnikov",
                                                                               "createdAt":  "2023-05-23T19:45:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "alevenelli",
                                           "body":  "Guys, good morning.\r\n\r\nI can\u0027t believe we won\u0027t have this feature (2PC) supported by .Net7 or .Net8 running on Linux. We know that in microservices architectures, we must use SAGA or other processes, but the fact is that if this resource does not exist for .Net, every time we start factoring a monolith, we will go to Java containers so that we don\u0027t have to initially create all the compensation process that does not exist in each object/method of the application.\r\nPlease support me if I\u0027m right and correct me if I\u0027m wrong.",
                                           "updatedAt":  "2022-08-08T11:29:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IAZ7l",
                                           "createdAt":  "2022-08-08T12:30:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC65C9w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maxisam",
                                                                               "createdAt":  "2023-05-01T15:05:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "paillave",
                                           "body":  "\u003e I can\u0027t believe we won\u0027t have this feature (2PC) supported by .Net7 or .Net8 running on Linux. We know that in microservices architectures, we must use SAGA or other processes, but the fact is that if this resource does not exist for .Net, every time we start factoring a monolith, we will go to Java containers so that we don\u0027t have to initially create all the compensation process that does not exist in each object/method of the application. Please support me if I\u0027m right and correct me if I\u0027m wrong.\r\n\r\n@alevenelli Many of us would love to have this feature for NET generally speaking. But as mentioned above, sometimes, history is too heavy to be changed very quickly. It happens that Microsoft initially thought all its tools for Windows platform, moreover at a time when distributed transactions standards were not precise enough. Microsoft developed its own distributed transaction server for windows, it worked (and still works) gracefully. You must bear in mind that when DCOM, the ancestor or COM+ started to be developed right when linux was just released in V1.0!\r\nNow, almost 30 years later, linux became very important (I work myself exclusively on linux since 4 years!), NET became open source as well, and Microsoft invests more and more into linux platform. But changing something that is as sensitive and central into Windows OS like COM+ is a great risk and the strategy to move forward must be cautiously chosen.\r\nThings are not always going as fast as we would expect, but obviously, if we trust what @roji has in mind to move forward, at some point, things should be finally done in a very graceful way regarding 2PC implementation.",
                                           "updatedAt":  "2022-08-08T12:30:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JRCVb",
                                           "createdAt":  "2022-08-27T14:27:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIP-EQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "altso",
                                                                               "createdAt":  "2022-08-29T13:10:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Grimmgork",
                                                                               "createdAt":  "2025-03-03T10:56:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "bxjg1987",
                                           "body":  "相当给力的特征",
                                           "updatedAt":  "2022-08-27T14:27:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5f1Zfm",
                                           "createdAt":  "2023-06-26T16:34:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "birojnayak",
                                           "body":  "I see lots of votes (thank you for that).. It would be really helpful for everyone to know type of Apps and what\u0027s final distro (OS target) people are looking to host.",
                                           "updatedAt":  "2023-06-26T17:33:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gkaNw",
                                           "createdAt":  "2023-07-04T12:26:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wertzui",
                                           "body":  "I have the need to use a distributed transaction targeting multiple databases (SQL Server).\r\nI need to modify 2 tables in those databases and this must happen atomically.\r\nThe app is running in a Debian Docker Container.",
                                           "updatedAt":  "2023-07-04T12:29:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hyXhP",
                                           "createdAt":  "2023-07-18T16:53:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xXAvoraXx",
                                           "body":  "Problem solved for .NET 7 Oracle.EntityFrameworkCore linux distribution?",
                                           "updatedAt":  "2023-07-18T18:25:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hydlb",
                                           "createdAt":  "2023-07-18T17:04:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@xXAvoraXx not sure what you mean; as per this issue, .NET currently does not support distributed transactions on any non-Windows platform.",
                                           "updatedAt":  "2023-07-18T18:25:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hytow",
                                           "createdAt":  "2023-07-18T17:46:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xXAvoraXx",
                                           "body":  "\u003e \r\n\r\nI am developing web api with .NET 7, we use oracle as database. I use transaction scope while performing entityframework operations, but it does not allow distributed transactions.",
                                           "updatedAt":  "2023-07-18T18:25:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hyu4J",
                                           "createdAt":  "2023-07-18T17:51:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "That\u0027s correct. You can use TransactionScope with distributed transactions, but if you really do need distributed transactions across multiple databases, you\u0027ll have to use Windows because of the current dependency on the MSDTC.",
                                           "updatedAt":  "2023-07-18T18:25:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hyvjV",
                                           "createdAt":  "2023-07-18T17:53:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xXAvoraXx",
                                           "body":  "When will support for cross-platforms be available?",
                                           "updatedAt":  "2023-07-18T18:25:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hyy5J",
                                           "createdAt":  "2023-07-18T18:04:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@xXAvoraXx there are no current plans to implement this, as it would require a very big investment across the entire stack. For now we\u0027re using this issue to gather feedback.",
                                           "updatedAt":  "2023-07-18T18:26:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hy4Ls",
                                           "createdAt":  "2023-07-18T18:20:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xXAvoraXx",
                                           "body":  "Is there a third party open source library that solves this problem?",
                                           "updatedAt":  "2023-07-18T18:26:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hy6Ns",
                                           "createdAt":  "2023-07-18T18:25:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Not as far as I know.",
                                           "updatedAt":  "2023-07-18T18:26:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vQg-C",
                                           "createdAt":  "2023-12-21T16:23:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dormendo",
                                           "body":  "Hello!\r\n\r\nI\u0027m working on enterprise project which manages master data and allows users to create new data tables with non-unified structure. The server can work on SQL Server, Oracle or postgres DBMS. The metadata service implements its own volatile transaction managers for in-memory metadata cache. This cache should store absolutely actual metadata. And we need to create authorization rules in the same transaction that created a new data storage table. Authorization rules must have an ability to be stored in a special DB resource. So we really need such conceptions as transaction resources and 2 phase commit. I know we could rewrite this logic, but we completely satisfied with it and would love not to lose it. Going crossplatform causing our project to lose some Windows-only functionality like OLEDB import and export of data, Windows-based impersonation, so on. But nevertheless we would like to have transaction resources and 2PC.",
                                           "updatedAt":  "2023-12-21T16:23:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vR9hT",
                                           "createdAt":  "2023-12-21T21:56:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@dormendo you can do 2PC since .NET 7.0, but you have to be on Windows to do it, because of the dependency on MSDTC.",
                                           "updatedAt":  "2023-12-21T21:56:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ekHcX",
                                           "createdAt":  "2025-02-14T21:05:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LarsKemmann",
                                           "body":  "I just want to state the obvious, for the record, because I saw several comments both on this and other linked issues pointing to the **\u0027waning interest\u0027** in 2PC/distributed transactions in \u0027the cloud/microservices era.\u0027\n\n(In my mind, 2PC/distributed transactions are essential for improving reliability in distributed systems, whether cloud-based or otherwise and regardless of how \"micro\" your services are.)\n\nA key factor in \u0027waning interest\u0027 is simply this: Microsoft didn\u0027t include cross-platform distributed transaction support in .NET 5 or any version since then. (I was so excited to discover that @roji had implemented MSDTC support in .NET 7 for EF Core... only to realize that the reason I wasn\u0027t aware of it until taking the time to read all these issues today is that _it wasn\u0027t ever mentioned in [the release notes](https://learn.microsoft.com/en-us/ef/core/what-is-new/ef-core-7.0/whatsnew)!!_\n\nAt first, this meant waiting and hoping.\n\nThen, as teams decided waiting to upgrade wasn\u0027t worth the delay, the community started looking for \"next-best\" alternatives: sagas/compensating transactions -- which are significantly less performant and far more difficult to get right.\n\nAs effort went into promoting these \"cloud-native\" techniques (which are really just \"the best we can do right now\", there\u0027s nothing specifically tying them to the cloud or microservice architectures -- yes, propagating transactions across HTTP/gRPC APIs would require a comparable solution to WS-AtomicTransaction but that\u0027s another matter), less effort was spent on teaching/evangelizing 2PC/distributed transactions, because why bother if they\u0027re not available on current stacks?\n\nSo please, .NET team, don\u0027t use the excuse of \u0027waning interest\u0027 to justify not doing this essential engineering work. We\u0027re all just trying to get by as best we can until you get around to doing this.\n\nAnd sadly, the longer you wait, the fewer of us will even remember what 2PC/distributed transactions could do for developer experience (DX) and system reliability. So \u0027waning interest\u0027 really becomes a self-fulfilling prophecy.\n\nDo you realize how much money you could make off enterprise customers if you offer XA-compatible \"cloud-native\" DTC as a first-party Azure service?",
                                           "updatedAt":  "2025-02-14T21:05:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ekO-R",
                                           "createdAt":  "2025-02-14T21:24:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e Then, as teams decided waiting to upgrade wasn\u0027t worth the delay, the community started looking for \"next-best\" alternatives: sagas/compensating transactions -- which are significantly less performant and far more difficult to get right.\n\nThis narrative is missing a crucial bit - the general movement away from 2PC to sagas/compensating transaction (in cloud scenarios in particular), isn\u0027t limited to .NET: it has and is occuring in other language/frameworks where 2PC is fully supported across all platforms. The reason for this shift isn\u0027t related to the .NET lack of cross-platform support, but rather to inherent design problems with 2PC itself, related to its scalability in cloud scenarios where services go down and can indefinitely block distributed transactions.\n\nI highly recommend reading about 2PC and compensation-based transactions in general, and comparisons between the two which have nothing to do with .NET; [here\u0027s one such article explaining why 2PC is problematic in cloud scenarios](http://vasters.com/archive/Transactions-In-Windows-Azure-with-Service-Bus---An-Email-Discussion.html) (there are various others). You don\u0027t have to agree with what they write, but this should give an idea why many people don\u0027t consider 2PC appropriate for these scenarios (and for good reason).\n\n\u003e Do you realize how much money you could make off enterprise customers if you offer XA-compatible \"cloud-native\" DTC as a first-party Azure service?\n\nI\u0027m not an expert and do not work for Azure, but I\u0027m not sure we\u0027re actually seeing such customer signals. Every user has the feature they\u0027d like to see implemented, and it\u0027s easy to think that everyone else wants the same thing - but that\u0027s not always the case.",
                                           "updatedAt":  "2025-02-14T21:24:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jtHsP",
                                           "createdAt":  "2025-03-23T22:28:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pedro-fontinele",
                                           "body":  "Hi @roji!\n\nI recently opened an issue ([#113805](https://github.com/dotnet/runtime/issues/113805)) regarding `TransactionManager.ImplicitDistributedTransactions = true`, but it was merged into [this discussion](https://github.com/dotnet/runtime/issues/71769).\n\nI want to confirm whether my current implementation of distributed transactions will work correctly on Linux servers. Here’s a relevant snippet of my code:\n\n\n```\nTransactionManager.ImplicitDistributedTransactions = true;\n\nusing (var transactionScope = new TransactionScope(TransactionScopeOption.RequiresNew, TransactionScopeAsyncFlowOption.Enabled))\n{\n    try\n    {\n        await Task.WhenAll(\n            _categoryRepository.SoftDeleteByIdAsync(id, deletedBy),\n            _additionalRepository.SoftDeleteByCategoryIdAsync(id, deletedBy),\n            _stageRepository.SoftDeleteByCategoryIdAsync(id, deletedBy),\n            _stageItemsRepository.SoftDeleteByCategoryIdAsync(id, deletedBy)\n        );\n\n        transactionScope.Complete();\n\n        return new Response\u003cCategoryOutputDto\u003e(HttpStatusCode.OK, GlobalMessage.RegisterSuccessfullyDeleted);\n    }\n    catch (Exception)\n    {\n        transactionScope.Dispose();\n        throw;\n    }\n}\n```\n\nWould this approach work properly on Linux, considering that I am enabling distributed transactions with `TransactionManager.ImplicitDistributedTransactions = true`? Or are there limitations that I should be aware of?\n\nI’d really appreciate your insights on this.\n\nBest regards,\n\n\n",
                                           "updatedAt":  "2025-03-23T22:47:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jtJvm",
                                           "createdAt":  "2025-03-23T22:46:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "If each of those repositories represent a different database (or even wraps a different connection to the same database), then you\u0027re attempting to perform a distributed transaction; that\u0027s only supported on Windows. Read the above comments for more context on this and for possible alternative approaches.",
                                           "updatedAt":  "2025-03-23T22:46:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jtOHA",
                                           "createdAt":  "2025-03-23T23:14:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pedro-fontinele",
                                           "body":  "\u003e If each of those repositories represent a different database (or even wraps a different connection to the same database), then you\u0027re attempting to perform a distributed transaction; that\u0027s only supported on Windows. Read the above comments for more context on this and for possible alternative approaches.\n\n@Roji  yes, these are separate transactions, but they use the same database connection and the same database instance. Would this setup work correctly on a Linux server? Or would there be any limitations I should consider?\n\nThanks for your help!",
                                           "updatedAt":  "2025-03-24T08:02:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jv01U",
                                           "createdAt":  "2025-03-24T08:02:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e these are separate transactions\n\nI\u0027m not sure quite what that means.\n\nAt the end of the day, what matters is whether a single database **connection** (DbConnection) is being used. In other words, if `_categoryRepository`, `_additionalRepository` and the rest all wrap the same connection, then there\u0027s no distributed transaction here at all - just access to the same database via the same connection, and a simple, single non-distributed transaction can be used. If it\u0027s at all possible for you to refactor your code in this way, that\u0027s highly recommended; even if distributed transactions were supported on Linux, they introduce a high degree of complexity (e.g. a transaction manager is needed) and potential performance issues, and should be avoided unless necessary.\n\n",
                                           "updatedAt":  "2025-03-24T08:02:39Z"
                                       }
                                   ],
                         "totalCount":  43
                     },
        "title":  "Cross-platform distributed transactions",
        "labels":  [
                       "enhancement",
                       "area-System.Transactions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76791",
        "createdAt":  "2022-10-09T10:46:27Z",
        "number":  76791,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCrGGMQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sakno",
                                            "createdAt":  "2022-10-20T20:06:27Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-06-16T15:40:53Z",
        "body":  "The way that System.Transactions is currently factored makes it impossible to trim the distributed transactions code when it\u0027s not used (note that this affects Windows only, other platforms don\u0027t have this code). Some initial work was done in 7.0 by @teo-tsirpanis (thanks!), see https://github.com/dotnet/runtime/pull/76376#issuecomment-1272088154 and below - but the bulk of the code remains untrimmable.\r\n\r\nThis could be done by refactoring all distributed transactions code into an implementation of an interface (these are currently called DtcTransactionConnector and ITransactionConnector respectively), so that instead of static calls directly to distributed transaction code, we go through a static member which have the interface type. That member is only set to the implementation when the TransactionManager.ImplicitDistributedTransactions flag is set, so when it\u0027s not set, the implementation (and all its dependencies) can be trimmed.\r\n\r\n/cc @teo-tsirpanis @jkotas @ajcvickers",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOS9kExA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5L2QTE",
                                           "createdAt":  "2022-10-09T10:46:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027linkable-framework\u0027: @eerhardt, @vitek-karas, @LakshanF, @sbomer, @joperezr\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe way that System.Transactions is currently factored makes it impossible to trim the distributed transactions code when it\u0027s not used (note that this affects Windows only, other platforms don\u0027t have this code). Some initial work was done in 7.0 by @teo-tsirpanis (thanks!), see https://github.com/dotnet/runtime/pull/76376#issuecomment-1272088154 and below - but the bulk of the code remains untrimmable.\r\n\r\nThis could be done by refactoring all distributed transactions code into an implementation of an interface (these are currently called DtcTransactionConnector and ITransactionConnector respectively), so that instead of static calls directly to distributed transaction code, we go through a static member which have the interface type. That member is only set to the implementation when the TransactionManager.ImplicitDistributedTransactions flag is set, so when it\u0027s not set, the implementation (and all its dependencies) can be trimmed.\r\n\r\n/cc @teo-tsirpanis @jkotas @ajcvickers\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eroji\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eroji\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Transactions`, `linkable-framework`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-09T10:46:36Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Make distributed transactions code trimmable (on Windows)",
        "labels":  [
                       "area-System.Transactions",
                       "linkable-framework"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77241",
        "createdAt":  "2022-10-20T01:21:53Z",
        "number":  77241,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-16T15:34:04Z",
        "body":  "Run: [runtime-coreclr libraries-jitstress 20221019.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=56832\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=1164524\u0026resultId=197529\u0026paneView=debug)\r\n\r\nFailed test:\r\n```\r\nnet7.0-windows-Release-arm64-CoreCLR_checked-jitstress1_tiered-Windows.10.Arm64v8.Open\r\n\r\n- System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true\r\n\r\nnet7.0-windows-Release-arm64-CoreCLR_checked-jitminopts-Windows.10.Arm64v8.Open\r\n\r\n- System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true\r\n```\r\n**Error message:**\r\n```\r\nHalf-way through waiting for remote process.\r\nMemory load: 50\r\n\r\nImage Name                     PID Services\r\n\r\n========================= ======== ============================================\r\nsvchost.exe                   1552 BrokerInfrastructure, DcomLaunch, Power,\r\n\r\nSystemEventsBroker\r\n\r\nsvchost.exe                   1720 RpcEptMapper, RpcSs\r\n\r\nsvchost.exe                   1800 LSM\r\n\r\nsvchost.exe                   2028 BTAGService\r\n\r\nsvchost.exe                   2036 BthAvctpSvc\r\n\r\nsvchost.exe                   2044 nsi\r\n\r\nsvchost.exe                      8 TermService\r\n\r\nsvchost.exe                   1220 bthserv\r\n\r\nsvchost.exe                   2120 EventLog\r\n\r\nsvchost.exe                   2124 NcbService\r\n\r\nsvchost.exe                   2140 Wcmsvc\r\n\r\nsvchost.exe                   2148 Schedule\r\n\r\nsvchost.exe                   2168 TimeBrokerSvc\r\n\r\nsvchost.exe                   2300 ProfSvc\r\n\r\nsvchost.exe                   2396 Dhcp\r\n\r\nsvchost.exe                   2480 DisplayEnhancementService\r\n\r\nsvchost.exe                   2488 UserManager\r\n\r\nsvchost.exe                   2504 hidserv\r\n\r\nsvchost.exe                   2512 SEMgrSvc\r\n\r\nsvchost.exe                   2684 DeviceAssociationService\r\n\r\nsvchost.exe                   2692 WinHttpAutoProxySvc\r\n\r\nsvchost.exe                   2700 UmRdpService\r\n\r\nsvchost.exe                   2708 TabletInputService\r\n\r\nsvchost.exe                   2716 NlaSvc\r\n\r\nsvchost.exe                   3132 LanmanWorkstation\r\n\r\nsvchost.exe                   3140 StateRepository\r\n\r\nsvchost.exe                   3152 Dnscache\r\n\r\nsvchost.exe                   3220 netprofm\r\n\r\nsvchost.exe                   3384 SessionEnv\r\n\r\nsvchost.exe                   3644 CertPropSvc\r\n\r\nsvchost.exe                   3576 EventSystem\r\n\r\nsvchost.exe                   3848 Themes\r\n\r\nsvchost.exe                   3864 SysMain\r\n\r\nsvchost.exe                   3876 SensrSvc\r\n\r\nsvchost.exe                   4200 CoreMessagingRegistrar\r\n\r\nsvchost.exe                   4208 SENS\r\n\r\nsvchost.exe                   4320 AudioEndpointBuilder\r\n\r\nsvchost.exe                   4328 FontCache\r\n\r\nsvchost.exe                   4432 DispBrokerDesktopSvc\r\n\r\nsvchost.exe                   4832 RmSvc\r\n\r\nsvchost.exe                   4840 winmgmt\r\n\r\nsvchost.exe                   4620 Audiosrv\r\n\r\nsvchost.exe                   5204 WwanSvc\r\n\r\nsvchost.exe                   5212 DusmSvc\r\n\r\nsvchost.exe                   5268 WlanSvc\r\n\r\nsvchost.exe                   5384 lfsvc\r\n\r\n\r\nStack trace\r\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 224\r\n   at System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true() in /_/src/libraries/System.Transactions.Local/tests/OleTxTests.cs:line 549\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodInvoker.cs:line 69\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOToGUUA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5MlAeT",
                                           "createdAt":  "2022-10-20T01:21:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-10-20T01:21:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Mo8-f",
                                           "createdAt":  "2022-10-20T16:00:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRun: [runtime-coreclr libraries-jitstress 20221019.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=56832\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=1164524\u0026resultId=197529\u0026paneView=debug)\r\n\r\nFailed test:\r\n```\r\nnet7.0-windows-Release-arm64-CoreCLR_checked-jitstress1_tiered-Windows.10.Arm64v8.Open\r\n\r\n- System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true\r\n\r\nnet7.0-windows-Release-arm64-CoreCLR_checked-jitminopts-Windows.10.Arm64v8.Open\r\n\r\n- System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true\r\n```\r\n**Error message:**\r\n```\r\nHalf-way through waiting for remote process.\r\nMemory load: 50\r\n\r\nImage Name                     PID Services\r\n\r\n========================= ======== ============================================\r\nsvchost.exe                   1552 BrokerInfrastructure, DcomLaunch, Power,\r\n\r\nSystemEventsBroker\r\n\r\nsvchost.exe                   1720 RpcEptMapper, RpcSs\r\n\r\nsvchost.exe                   1800 LSM\r\n\r\nsvchost.exe                   2028 BTAGService\r\n\r\nsvchost.exe                   2036 BthAvctpSvc\r\n\r\nsvchost.exe                   2044 nsi\r\n\r\nsvchost.exe                      8 TermService\r\n\r\nsvchost.exe                   1220 bthserv\r\n\r\nsvchost.exe                   2120 EventLog\r\n\r\nsvchost.exe                   2124 NcbService\r\n\r\nsvchost.exe                   2140 Wcmsvc\r\n\r\nsvchost.exe                   2148 Schedule\r\n\r\nsvchost.exe                   2168 TimeBrokerSvc\r\n\r\nsvchost.exe                   2300 ProfSvc\r\n\r\nsvchost.exe                   2396 Dhcp\r\n\r\nsvchost.exe                   2480 DisplayEnhancementService\r\n\r\nsvchost.exe                   2488 UserManager\r\n\r\nsvchost.exe                   2504 hidserv\r\n\r\nsvchost.exe                   2512 SEMgrSvc\r\n\r\nsvchost.exe                   2684 DeviceAssociationService\r\n\r\nsvchost.exe                   2692 WinHttpAutoProxySvc\r\n\r\nsvchost.exe                   2700 UmRdpService\r\n\r\nsvchost.exe                   2708 TabletInputService\r\n\r\nsvchost.exe                   2716 NlaSvc\r\n\r\nsvchost.exe                   3132 LanmanWorkstation\r\n\r\nsvchost.exe                   3140 StateRepository\r\n\r\nsvchost.exe                   3152 Dnscache\r\n\r\nsvchost.exe                   3220 netprofm\r\n\r\nsvchost.exe                   3384 SessionEnv\r\n\r\nsvchost.exe                   3644 CertPropSvc\r\n\r\nsvchost.exe                   3576 EventSystem\r\n\r\nsvchost.exe                   3848 Themes\r\n\r\nsvchost.exe                   3864 SysMain\r\n\r\nsvchost.exe                   3876 SensrSvc\r\n\r\nsvchost.exe                   4200 CoreMessagingRegistrar\r\n\r\nsvchost.exe                   4208 SENS\r\n\r\nsvchost.exe                   4320 AudioEndpointBuilder\r\n\r\nsvchost.exe                   4328 FontCache\r\n\r\nsvchost.exe                   4432 DispBrokerDesktopSvc\r\n\r\nsvchost.exe                   4832 RmSvc\r\n\r\nsvchost.exe                   4840 winmgmt\r\n\r\nsvchost.exe                   4620 Audiosrv\r\n\r\nsvchost.exe                   5204 WwanSvc\r\n\r\nsvchost.exe                   5212 DusmSvc\r\n\r\nsvchost.exe                   5268 WlanSvc\r\n\r\nsvchost.exe                   5384 lfsvc\r\n\r\n\r\nStack trace\r\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 224\r\n   at System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true() in /_/src/libraries/System.Transactions.Local/tests/OleTxTests.cs:line 549\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodInvoker.cs:line 69\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ev-wenyuxu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-arm64`, `area-System.Transactions`, `os-windows`, `JitStress`, `untriaged`, `blocking-clean-ci-optional`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-20T16:00:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MtgfJ",
                                           "createdAt":  "2022-10-21T13:52:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "I\u0027m OOF for the next week so won\u0027t be able to look into this... But could this be related to the RemoteExecutor rather than to  distributed transactions? Or is there a way to get more visibility on what\u0027s going on there?\r\n\r\n/cc @stephentoub ",
                                           "updatedAt":  "2022-10-21T13:52:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NJUrt",
                                           "createdAt":  "2022-10-28T01:12:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "Failed again in: [runtime-coreclr libraries-jitstress 20221027.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=64889\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=1321348\u0026resultId=197615\u0026paneView=debug)\r\n\r\nFailed test:\r\n```\r\nnet7.0-windows-Release-arm64-CoreCLR_checked-zapdisable-Windows.10.Arm64v8.Open\r\n\r\n- System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true\r\n\r\nnet7.0-windows-Release-arm64-CoreCLR_checked-jitstress2_tiered-Windows.10.Arm64v8.Open\r\n\r\n- System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true\r\n\r\nnet7.0-windows-Release-arm64-CoreCLR_checked-jitstress2-Windows.10.Arm64v8.Open\r\n\r\n- System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true\r\n```\r\n**Error message:**\r\n```\r\nHalf-way through waiting for remote process.\r\nMemory load: 47\r\n\r\nImage Name                     PID Services\r\n\r\n========================= ======== ============================================\r\nsvchost.exe                   1568 BrokerInfrastructure, DcomLaunch, Power,\r\n\r\nSystemEventsBroker\r\n\r\nsvchost.exe                   1720 RpcEptMapper, RpcSs\r\n\r\nsvchost.exe                   1792 LSM\r\n\r\nsvchost.exe                    760 BDESVC\r\n\r\nsvchost.exe                   1104 TermService\r\n\r\nsvchost.exe                   1108 nsi\r\n\r\nsvchost.exe                   1112 BTAGService\r\n\r\nsvchost.exe                   1236 BthAvctpSvc\r\n\r\nsvchost.exe                   1228 bthserv\r\n\r\nsvchost.exe                   2068 NcbService\r\n\r\nsvchost.exe                   2076 TimeBrokerSvc\r\n\r\nsvchost.exe                   2252 Wcmsvc\r\n\r\nsvchost.exe                   2264 Schedule\r\n\r\nsvchost.exe                   2348 EventLog\r\n\r\nsvchost.exe                   2360 DisplayEnhancementService\r\n\r\nsvchost.exe                   2384 ProfSvc\r\n\r\nsvchost.exe                   2408 hidserv\r\n\r\nsvchost.exe                   2536 Dhcp\r\n\r\nsvchost.exe                   2592 TabletInputService\r\n\r\nsvchost.exe                   2816 UmRdpService\r\n\r\nsvchost.exe                   2832 DeviceAssociationService\r\n\r\nsvchost.exe                   2840 UserManager\r\n\r\nsvchost.exe                   2992 camsvc\r\n\r\nsvchost.exe                   3000 NlaSvc\r\n\r\nsvchost.exe                   3028 StateRepository\r\n\r\nsvchost.exe                   3328 LanmanWorkstation\r\n\r\nsvchost.exe                   3400 SEMgrSvc\r\n\r\nsvchost.exe                   3408 Dnscache\r\n\r\nsvchost.exe                   3444 netprofm\r\n\r\nsvchost.exe                   3600 SessionEnv\r\n\r\nsvchost.exe                   3716 CertPropSvc\r\n\r\nsvchost.exe                   3464 SensrSvc\r\n\r\nsvchost.exe                   2896 Themes\r\n\r\nsvchost.exe                   3968 SysMain\r\n\r\nsvchost.exe                   4108 EventSystem\r\n\r\nsvchost.exe                   4268 SENS\r\n\r\nsvchost.exe                   4308 AudioEndpointBuilder\r\n\r\nsvchost.exe                   4304 FontCache\r\n\r\nsvchost.exe                   4440 CoreMessagingRegistrar\r\n\r\nsvchost.exe                   4604 DispBrokerDesktopSvc\r\n\r\nsvchost.exe                   4804 Audiosrv\r\n\r\nsvchost.exe                   4812 winmgmt\r\n\r\nsvchost.exe                   4924 DusmSvc\r\n\r\nsvchost.exe                   4944 WwanSvc\r\n\r\nsvchost.exe                   4996 WlanSvc\r\n\r\nsvchost.exe                   5048 RmSvc\r\n\r\n\r\nStack trace\r\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 224\r\n   at System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true() in /_/src/libraries/System.Transactions.Local/tests/OleTxTests.cs:line 549\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodInvoker.cs:line 64\r\n```",
                                           "updatedAt":  "2022-10-28T01:12:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NRGTx",
                                           "createdAt":  "2022-10-30T19:01:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Thanks, I\u0027ll be looking into this, but it may take a bit of time due to other priorities.",
                                           "updatedAt":  "2022-10-30T19:01:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NyC1A",
                                           "createdAt":  "2022-11-07T01:10:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "Failed again in: [runtime-coreclr libraries-jitstress2-jitstressregs 20221105.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=74065)\r\n \r\n **Failed tests:**\r\n ```\r\n net7.0-windows-Release-arm64-CoreCLR_checked-jitstress2_jitstressregs4-Windows.10.Arm64v8.Open\r\n- System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true\r\n net7.0-windows-Release-arm64-CoreCLR_checked-jitstress2_jitstressregs2-Windows.10.Arm64v8.Open\r\n- System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true\r\n net7.0-windows-Release-arm64-CoreCLR_checked-jitstress2_jitstressregs0x10-Windows.10.Arm64v8.Open\r\n- System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true\r\n net7.0-windows-Release-arm64-CoreCLR_checked-jitstress2_jitstressregs0x80-Windows.10.Arm64v8.Open\r\n - System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true\r\n ```\r\n \r\n **Error message:**\r\n ```\r\n Half-way through waiting for remote process.\r\nMemory load: 55\r\n\r\nImage Name                     PID Services                                    \r\n========================= ======== ============================================\r\nsvchost.exe                   1584 BrokerInfrastructure, DcomLaunch, Power,    \r\n                                   SystemEventsBroker                          \r\nsvchost.exe                   1744 RpcEptMapper, RpcSs                         \r\nsvchost.exe                   1808 LSM                                         \r\nsvchost.exe                    616 nsi                                         \r\nsvchost.exe                   1008 TermService                                 \r\nsvchost.exe                   1164 BthAvctpSvc                                 \r\nsvchost.exe                   1424 bthserv                                     \r\nsvchost.exe                   1380 BTAGService                                 \r\nsvchost.exe                   2068 SEMgrSvc                                    \r\nsvchost.exe                   2076 Wcmsvc                                      \r\nsvchost.exe                   2084 NcbService                                  \r\nsvchost.exe                   2192 Schedule                                    \r\nsvchost.exe                   2240 ProfSvc                                     \r\nsvchost.exe                   2364 DisplayEnhancementService                   \r\nsvchost.exe                   2360 hidserv                                     \r\nsvchost.exe                   2436 Dhcp                                        \r\nsvchost.exe                   2432 EventLog                                    \r\nsvchost.exe                   2484 UserManager                                 \r\nsvchost.exe                   2600 UmRdpService                                \r\nsvchost.exe                   2608 TabletInputService                          \r\nsvchost.exe                   2760 NlaSvc                                      \r\nsvchost.exe                   2780 TimeBrokerSvc                               \r\nsvchost.exe                   3028 DeviceAssociationService                    \r\nsvchost.exe                   3116 LanmanWorkstation                           \r\nsvchost.exe                   3124 StateRepository                             \r\nsvchost.exe                   3292 Dnscache                                    \r\nsvchost.exe                   3384 netprofm                                    \r\nsvchost.exe                   3460 SessionEnv                                  \r\nsvchost.exe                   3608 CertPropSvc                                 \r\nsvchost.exe                   3720 CoreMessagingRegistrar                      \r\nsvchost.exe                   3828 DispBrokerDesktopSvc                        \r\nsvchost.exe                   3200 SensrSvc                                    \r\nsvchost.exe                   4140 FontCache                                   \r\nsvchost.exe                   4148 Themes                                      \r\nsvchost.exe                   4156 SysMain                                     \r\nsvchost.exe                   4164 EventSystem                                 \r\nsvchost.exe                   4364 SENS                                        \r\nsvchost.exe                   4420 AudioEndpointBuilder                        \r\nsvchost.exe                   4592 RmSvc                                       \r\nsvchost.exe                   4844 winmgmt                                     \r\nsvchost.exe                   4852 Audiosrv                                    \r\nsvchost.exe                   5008 DusmSvc                                     \r\nsvchost.exe                   4112 WlanSvc                                     \r\nsvchost.exe                   4116 lfsvc                                       \r\nsvchost.exe                   4212 WwanSvc                                     \r\nsvchost.exe                   5276 ShellHWDetec\r\n ```\r\n \r\n **Stack trace:**\r\n ```\r\n    at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 224\r\n   at System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true() in /_/src/libraries/System.Transactions.Local/tests/OleTxTests.cs:line 549\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodInvoker.cs:line 64\r\n ```",
                                           "updatedAt":  "2022-11-07T01:12:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NzySH",
                                           "createdAt":  "2022-11-07T10:46:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "@roji Can we disable the test in the meantime? We hit this frequently on JIT pipelies.",
                                           "updatedAt":  "2022-11-07T10:46:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N4hoc",
                                           "createdAt":  "2022-11-08T05:37:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Sorry for the delay on this, am currently away on vacation. Will fix or disable the test tomorrow.",
                                           "updatedAt":  "2022-11-08T05:37:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N6Ahs",
                                           "createdAt":  "2022-11-08T11:21:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "\u003e Sorry for the delay on this, am currently away on vacation. Will fix or disable the test tomorrow.\r\n\r\nNo worries, enjoy your vacation.",
                                           "updatedAt":  "2022-11-08T11:21:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OXACZ",
                                           "createdAt":  "2022-11-15T01:59:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "Failed in Run: [runtime-coreclr libraries-jitstress 20221113.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=82328)\r\n \r\n **Failed tests:**\r\n ```\r\n net7.0-windows-Release-arm64-CoreCLR_checked-no_tiered_compilation-Windows.10.Arm64v8.Open\r\n- System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true\r\n\r\n net7.0-windows-Release-arm64-CoreCLR_checked-jitstress1_tiered-Windows.10.Arm64v8.Open\r\n- System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true\r\n\r\n net7.0-windows-Release-arm64-CoreCLR_checked-jitstress1-Windows.10.Arm64v8.Open\r\n- System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true\r\n\r\n net7.0-windows-Release-arm64-CoreCLR_checked-tailcallstress-Windows.10.Arm64v8.Open\r\n- System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true\r\n ```\r\n \r\n **Error message:**\r\n ```\r\n Half-way through waiting for remote process.\r\nMemory load: 57\r\n\r\nImage Name                     PID Services                                    \r\n========================= ======== ============================================\r\nsvchost.exe                   1588 BrokerInfrastructure, DcomLaunch, Power,    \r\n                                   SystemEventsBroker                          \r\nsvchost.exe                   1748 RpcEptMapper, RpcSs                         \r\nsvchost.exe                   1808 LSM                                         \r\nsvchost.exe                   1028 BDESVC                                      \r\nsvchost.exe                   1144 TermService                                 \r\nsvchost.exe                    964 BthAvctpSvc                                 \r\nsvchost.exe                   1184 nsi                                         \r\nsvchost.exe                   1412 bthserv                                     \r\nsvchost.exe                   1272 BTAGService                                 \r\nsvchost.exe                   2088 NcbService                                  \r\nsvchost.exe                   2096 TimeBrokerSvc                               \r\nsvchost.exe                   2268 Wcmsvc                                      \r\nsvchost.exe                   2276 Schedule                                    \r\nsvchost.exe                   2284 EventLog                                    \r\nsvchost.exe                   2372 ProfSvc                                     \r\nsvchost.exe                   2480 DisplayEnhancementService                   \r\nsvchost.exe                   2488 hidserv                                     \r\nsvchost.exe                   2584 Dhcp                                        \r\nsvchost.exe                   2580 DeviceAssociationService                    \r\nsvchost.exe                   2636 UserManager                                 \r\nsvchost.exe                   2652 UmRdpService                                \r\nsvchost.exe                   2740 TabletInputService                          \r\nsvchost.exe                   3008 WinHttpAutoProxySvc                         \r\nsvchost.exe                   3052 NlaSvc                                      \r\nsvchost.exe                   2596 LanmanWorkstation                           \r\nsvchost.exe                   2900 StateRepository                             \r\nsvchost.exe                   3432 Dnscache                                    \r\nsvchost.exe                   3440 netprofm                                    \r\nsvchost.exe                   3540 SessionEnv                                  \r\nsvchost.exe                   3688 CertPropSvc                                 \r\nsvchost.exe                   3756 CoreMessagingRegistrar                      \r\nsvchost.exe                   3836 SEMgrSvc                                    \r\nsvchost.exe                   3904 DispBrokerDesktopSvc                        \r\nsvchost.exe                   3092 SensrSvc                                    \r\nsvchost.exe                   4176 FontCache                                   \r\nsvchost.exe                   4324 Themes                                      \r\nsvchost.exe                   4332 EventSystem                                 \r\nsvchost.exe                   4340 SysMain                                     \r\nsvchost.exe                   4508 SENS                                        \r\nsvchost.exe                   4536 AudioEndpointBuilder                        \r\nsvchost.exe                   4628 RmSvc                                       \r\nsvchost.exe                   5032 Audiosrv                                    \r\nsvchost.exe                   5040 winmgmt                                     \r\nsvchost.exe                   4300 WwanSvc                                     \r\nsvchost.exe                   4388 DusmSvc                                     \r\nsvchost.exe                   5156 WlanSvc     \r\n ```\r\n \r\n **Stack trace:**\r\n ```\r\n    at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 224\r\n   at System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true() in /_/src/libraries/System.Transactions.Local/tests/OleTxTests.cs:line 549\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodInvoker.cs:line 64\r\n ```",
                                           "updatedAt":  "2022-11-15T01:59:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OgZRQ",
                                           "createdAt":  "2022-11-16T14:32:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "The failures reports above are all from jitress on arm64 on Windows, and seems to indicate a timeout from RemoteExecutor (see #74320 for a general discussion on unexplained RemoteExecutor timeouts, mostly on jitstress). I can\u0027t think of a specific reason for the test being hung, so for now I\u0027ll disable the test to avoid further failures, and to check whether the hanging/timeout moves to another test (in case the hanging depends on timing).",
                                           "updatedAt":  "2022-11-16T14:32:04Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Test failure System.Transactions.Tests.OleTxTests.ImplicitDistributedTransactions_cannot_be_changed_after_being_read_as_true",
        "labels":  [
                       "arch-arm64",
                       "area-System.Transactions",
                       "disabled-test",
                       "os-windows",
                       "JitStress"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96881",
        "createdAt":  "2024-01-12T04:57:52Z",
        "number":  96881,
        "author":  "neilzzy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-16T15:26:15Z",
        "body":  "### Description\r\n\r\nWhen performing multiple queries in parallel, and each pair of 2 queries are inside a transaction scope, an unexpected transaction error is thrown (see below).\r\nhttps://github.com/dotnet/SqlClient/issues/1675\r\nThe product team of sqlclient need suggestions to work around this issue. \r\nhttps://github.com/dotnet/runtime/discussions/96067\r\nBased on the transaction documents, subscribing to the [TransactionCompleted](https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fdotnet%2Fapi%2Fsystem.transactions.transaction.transactioncompleted%3Fview%3Dnet-7.0\u0026data=05%7C02%7Cv-deshtehari%40microsoft.com%7Cfe103ff65eba4a8ee9cf08dbfd19e958%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C638382060041617078%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C\u0026sdata=82kaSZciQd7%2FxVBZDFL3Yp3%2F8HneEi7NycdO6rPQ2Uo%3D\u0026reserved=0) event has negative affection on perf. I\u0027d appreciate any thoughts with the following questions:\r\n\r\nIs there any opportunity to improve it or this is the best version of the event driven design?\r\nWhat would be the replacement to receive the transaction completion signal with a promoted transaction to DTC through a [IPromotableSinglePhaseNotification](https://learn.microsoft.com/en-us/dotnet/api/system.transactions.ipromotablesinglephasenotification?view=net-7.0) implementation?\r\nHere is the links to the design on MDS:\r\n\r\n[SqlDelegatedTransaction](https://github.com/dotnet/SqlClient/blob/main/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SqlDelegatedTransaction.cs)\r\n[TransactionCompletedEvent](https://github.com/dotnet/SqlClient/blob/04b531bab5ad5c0bdf204d443b6f3da88c2429b9/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/ProviderBase/DbConnectionInternal.cs#L472)\r\n\r\n\r\n\r\n### Reproduction Steps\r\n\r\nIssue can be reproduced intermittently with below code\r\n\r\n```c#\r\nasync Task Main()\r\n{\r\n\tvar tasks = Enumerable.Range(0, 100_000).Select(PerformWork);\r\n\tawait Task.WhenAll(tasks);\r\n\t\"DONE!\".Dump();\r\n}\r\nconst string connString = \"Server=.\\\\SQL2019;Database=TempDB;Application Name=TestApp;Trusted_Connection=True;TrustServerCertificate=True;Pooling=True;Encrypt=True;Max Pool Size = 5000;\";\r\n\r\nstatic TransactionScope CreateTransactionScope() =\u003e\r\n\tnew TransactionScope(TransactionScopeOption.Required,\r\n\t\tnew TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadCommitted }, TransactionScopeAsyncFlowOption.Enabled);\r\n\r\nstatic async Task PerformWork(int num)\r\n{\r\n\ttry\r\n\t{\r\n\t\tusing (var ts = CreateTransactionScope())\r\n\t\t{\r\n\t\t\tfor (int i = 0; i \u003c 2; ++i)\r\n\t\t\t{\r\n\t\t\t\tawait using (var dbConn = new SqlConnection(connString))\r\n\t\t\t\t{\r\n\t\t\t\t\tawait dbConn.OpenAsync();\r\n\t\t\t\t\tawait Task.Delay(1);\r\n\t\t\t\t} // Connection is disposed (and thus closed)\r\n\t\t\t}//for\r\n\t\t\t//ts.Complete();\r\n\t\t}//ts\r\n\t}//try\r\n\tcatch (Exception e)\r\n\t{\r\n\t\tConsole.WriteLine($\"Failed {num}\");\r\n\t\te.Dump(); Environment.Exit(-1);\r\n\t\tthrow;\r\n\t}\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nno exception at all \r\n\r\n### Actual behavior\r\n\r\nintermittently failed with Unhandled exception. System.Transactions.TransactionAbortedException: The transaction has aborted.\r\n\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjEOOWQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5wjz_H",
                                           "createdAt":  "2024-01-12T04:58:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen performing multiple queries in parallel, and each pair of 2 queries are inside a transaction scope, an unexpected transaction error is thrown (see below).\r\nhttps://github.com/dotnet/SqlClient/issues/1675\r\nThe product team of sqlclient need suggestions to work around this issue. \r\nhttps://github.com/dotnet/runtime/discussions/96067\r\nBased on the transaction documents, subscribing to the [TransactionCompleted](https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fdotnet%2Fapi%2Fsystem.transactions.transaction.transactioncompleted%3Fview%3Dnet-7.0\u0026data=05%7C02%7Cv-deshtehari%40microsoft.com%7Cfe103ff65eba4a8ee9cf08dbfd19e958%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C638382060041617078%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C\u0026sdata=82kaSZciQd7%2FxVBZDFL3Yp3%2F8HneEi7NycdO6rPQ2Uo%3D\u0026reserved=0) event has negative affection on perf. I\u0027d appreciate any thoughts with the following questions:\r\n\r\nIs there any opportunity to improve it or this is the best version of the event driven design?\r\nWhat would be the replacement to receive the transaction completion signal with a promoted transaction to DTC through a [IPromotableSinglePhaseNotification](https://learn.microsoft.com/en-us/dotnet/api/system.transactions.ipromotablesinglephasenotification?view=net-7.0) implementation?\r\nHere is the links to the design on MDS:\r\n\r\n[SqlDelegatedTransaction](https://github.com/dotnet/SqlClient/blob/main/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SqlDelegatedTransaction.cs)\r\n[TransactionCompletedEvent](https://github.com/dotnet/SqlClient/blob/04b531bab5ad5c0bdf204d443b6f3da88c2429b9/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/ProviderBase/DbConnectionInternal.cs#L472)\r\n\r\n\n\n### Reproduction Steps\n\nIssue can be reproduced intermittently with below code\r\n\r\nasync Task Main()\r\n{\r\n\tvar tasks = Enumerable.Range(0, 100_000).Select(PerformWork);\r\n\tawait Task.WhenAll(tasks);\r\n\t\"DONE!\".Dump();\r\n}\r\nconst string connString = \"Server=.\\\\SQL2019;Database=TempDB;Application Name=TestApp;Trusted_Connection=True;TrustServerCertificate=True;Pooling=True;Encrypt=True;Max Pool Size = 5000;\";\r\n\r\nstatic TransactionScope CreateTransactionScope() =\u003e\r\n\tnew TransactionScope(TransactionScopeOption.Required,\r\n\t\tnew TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadCommitted }, TransactionScopeAsyncFlowOption.Enabled);\r\n\r\nstatic async Task PerformWork(int num)\r\n{\r\n\ttry\r\n\t{\r\n\t\tusing (var ts = CreateTransactionScope())\r\n\t\t{\r\n\t\t\tfor (int i = 0; i \u003c 2; ++i)\r\n\t\t\t{\r\n\t\t\t\tawait using (var dbConn = new SqlConnection(connString))\r\n\t\t\t\t{\r\n\t\t\t\t\tawait dbConn.OpenAsync();\r\n\t\t\t\t\tawait Task.Delay(1);\r\n\t\t\t\t} // Connection is disposed (and thus closed)\r\n\t\t\t}//for\r\n\t\t\t//ts.Complete();\r\n\t\t}//ts\r\n\t}//try\r\n\tcatch (Exception e)\r\n\t{\r\n\t\tConsole.WriteLine($\"Failed {num}\");\r\n\t\te.Dump(); Environment.Exit(-1);\r\n\t\tthrow;\r\n\t}\r\n}\n\n### Expected behavior\n\nno exception at all \n\n### Actual behavior\n\nintermitent failed with Unhandled exception. System.Transactions.TransactionAbortedException: The transaction has aborted.\r\n\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eneilzzy\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Transactions`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-12T04:58:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wkKTG",
                                           "createdAt":  "2024-01-12T06:54:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@neilzzy thanks for opening this, I didn\u0027t know that #96067 was opened on this.\r\n\r\nI remember looking into this a while back as part of investigating deadlocks and bugs with SqlClient\u0027s distributed transaction support (https://github.com/dotnet/SqlClient/issues/1675, still unresolved). I\u0027m no expert in SqlClient internals, but I found myself wondering whether SqlClient could simply stop subscribing to the TransactionCompleted event altogether - please see [this comment](https://github.com/dotnet/SqlClient/issues/1675#issuecomment-1334331682) and the discussion around it. In other words, regardless of the perf impact of subscribing to the event, SqlClient\u0027s usage of it seems problematic and may be the cause of actual bugs.\r\n\r\nMore generally, from what I can tell, the TransactionCompleted event was meant more for application consumption - to know when the transaction was completed - and not really for resource managers (database drivers) to use it in order to implement their distributed transaction support. I\u0027d highly recommend a deep analysis on the SqlClient side for how that event is used and why, and whether it\u0027s possible to simplify things and stop doing that. \r\n\r\nBeyond that, I can see the comment about TransactionCompleted having negative perf implications [in the docs](https://learn.microsoft.com/en-us/dotnet/api/system.transactions.transaction.transactioncompleted); I don\u0027t know what that refers to specifically, but I suspect that beyond SqlClient\u0027s internal use of the event, that wouldn\u0027t be an important issue affecting many people. We can certainly keep this open in the backlog to track looking more closely at it, though I doubt that would happen any time soon.\r\n\r\n/cc @DavoudEshtehari",
                                           "updatedAt":  "2024-01-12T06:54:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MQ45Z",
                                           "createdAt":  "2024-09-16T15:26:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "will need to pick up as part of planning for next release.",
                                           "updatedAt":  "2024-09-16T15:26:14Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Solution with IPromotableSinglePhaseNotification and TransactionCompletion against a promoted transaction to MS-DTC",
        "labels":  [
                       "area-System.Transactions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105124",
        "createdAt":  "2024-07-19T03:02:31Z",
        "number":  105124,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-16T14:03:47Z",
        "body":  "**Failed in:** [runtime-coreclr crossgen2 20240717.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=745900\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18853518\u0026resultId=202058\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-x64-TestReadyToRun_Release-(Windows.Nano.1809.Amd64.Open)windows.10.amd64.serverrs5.open@mcr.microsoft.com/dotnet-buildtools/prereqs:nanoserver-1809-helix-amd64\r\n    - System.Transactions.Tests.TransactionManagerTest.DefaultTimeout_MaxTimeout_Set_Get\r\n```\r\n\r\n**Error message:**\r\n```\r\n Assert.Equal() Failure: Values differ\r\nExpected: 00:02:00\r\nActual:   00:01:00\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at System.Transactions.Tests.TransactionManagerTest.DefaultTimeout_MaxTimeout_Set_Get() in /_/src/libraries/System.Transactions.Local/tests/TransactionManagerTest.cs:line 15\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```\r\n\u003c!-- Error message template  --\u003e\r\n### Known Issue Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"at System.Transactions.Tests.TransactionManagerTest.DefaultTimeout_MaxTimeout_Set_Get\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=745900\r\n**Error message validated:** `[at System.Transactions.Tests.TransactionManagerTest.DefaultTimeout_MaxTimeout_Set_Get`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 7/24/2024 6:15:28 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjEO5Zw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6FgnMn",
                                           "createdAt":  "2024-07-19T18:53:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-19T18:53:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GBUSc",
                                           "createdAt":  "2024-07-24T16:56:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "@jkotas I\u0027m perplexed at how this can happen. Any insight?",
                                           "updatedAt":  "2024-07-24T16:56:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GBUvk",
                                           "createdAt":  "2024-07-24T16:57:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "Since this isn\u0027t happening in any current runs, I\u0027m going to close.",
                                           "updatedAt":  "2024-07-24T16:57:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GB2jF",
                                           "createdAt":  "2024-07-24T18:13:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODrY2HQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "steveisok",
                                                                               "createdAt":  "2024-07-24T18:40:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I\u0027m perplexed at how this can happen. Any insight?\r\n\r\nThis is a bug in TransationManager.\r\n\r\n`TransationManager.DefaultTimeOut` is a global static. What can happen is:\r\n- One thread is running this test that is setting the global static to a non-default value using Interlocked.Exchange: https://github.com/dotnet/runtime/blob/dff1d8467845fd93c517f89dc81598e5fd17c270/src/libraries/System.Transactions.Local/src/System/Transactions/TransactionManager.cs#L328\r\n- Some other thread is running a test that tries to read the timeout. The act of reading the timeout initializes the global static using LazyInitializer.EnsureInitialized: https://github.com/dotnet/runtime/blob/dff1d8467845fd93c517f89dc81598e5fd17c270/src/libraries/System.Transactions.Local/src/System/Transactions/TransactionManager.cs#L304\r\n\r\nThis is a product bug. Reading the default timeout value on one thread should not lead to default value set on the on a different thread to be lost.\r\n\r\nThe bug is caused by mixing of lock used by `LazyInitializer.EnsureInitialized` and `Interlocked` operations that does not provide the thread safety desired here. Either both places should use `lock` or both places should use `Interlocked` operations.\r\n\r\nThis does not always repro, but it reproes often enough that we have seen the same issue filled in the past (e.g. https://github.com/dotnet/runtime/issues/90085).",
                                           "updatedAt":  "2024-07-24T18:22:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GB5tU",
                                           "createdAt":  "2024-07-24T18:21:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This bug was introduced in #71703. cc @imcarolwang @HongGit   ",
                                           "updatedAt":  "2024-07-24T18:21:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MQ7ln",
                                           "createdAt":  "2024-09-16T15:30:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@HongGit  - assigning to you for tracking. Please adjust milestone based on your investigation and estimated timeline for the fix. ",
                                           "updatedAt":  "2024-09-16T15:30:50Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Test failure: System.Transactions.Tests.TransactionManagerTest.DefaultTimeout_MaxTimeout_Set_Get",
        "labels":  [
                       "bug",
                       "area-System.Transactions",
                       "os-windows",
                       "blocking-clean-ci-optional",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107239",
        "createdAt":  "2024-09-02T01:40:25Z",
        "number":  107239,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-15T17:40:04Z",
        "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20240831.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=794887\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=20460438\u0026resultId=167326\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-arm64-jitstress_random_2-Windows.11.Arm64.Open\r\n    - System.Transactions.Tests.AsyncTransactionScopeTests.VerifyBYOTAsyncTSNestedAsync\r\n```\r\n\r\n**Error message:**\r\n```\r\n System.InvalidOperationException : The current TransactionScope is already complete.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at System.Transactions.Transaction.get_Current() in /_/src/libraries/System.Transactions.Local/src/System/Transactions/Transaction.cs:line 169\r\n   at System.Transactions.Tests.AsyncTransactionScopeTests.AssertTransactionNull() in /_/src/libraries/System.Transactions.Local/tests/AsyncTransactionScopeTests.cs:line 1674\r\n   at System.Transactions.Tests.AsyncTransactionScopeTests.VerifyBYOTAsyncTSNestedAsync() in /_/src/libraries/System.Transactions.Local/tests/AsyncTransactionScopeTests.cs:line 1158\r\n--- End of stack trace from previous location ---\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjEM9qw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Kf47i",
                                           "createdAt":  "2024-09-02T01:40:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-02T01:40:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MQz2r",
                                           "createdAt":  "2024-09-16T15:17:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "Assigning to myself for tracking, moving to 10.0.0 milestone, don\u0027t see any relevant changes in this area.\r\n\r\n@v-wenyuxu  - Is this a deterministic failure? ",
                                           "updatedAt":  "2024-09-16T15:17:16Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Test failure: System.Transactions.Tests.AsyncTransactionScopeTests.VerifyBYOTAsyncTSNestedAsync",
        "labels":  [
                       "arch-arm64",
                       "area-System.Transactions",
                       "os-windows",
                       "JitStress"
                   ]
    }
]
