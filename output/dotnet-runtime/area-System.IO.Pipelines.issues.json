[
    {
        "url":  "https://github.com/dotnet/runtime/issues/28556",
        "createdAt":  "2019-01-29T13:50:49Z",
        "number":  28556,
        "author":  "fredrikhr",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3YWMQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Code-Grump",
                                            "createdAt":  "2019-05-30T15:44:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raffaeler",
                                            "createdAt":  "2020-01-20T21:20:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlgorithmsAreCool",
                                            "createdAt":  "2020-08-20T04:55:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KiruyaMomochi",
                                            "createdAt":  "2020-10-28T12:37:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "taoyouh",
                                            "createdAt":  "2020-12-10T04:01:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Khitiara",
                                            "createdAt":  "2022-04-06T00:46:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2022-08-15T06:44:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kt81",
                                            "createdAt":  "2023-03-04T13:56:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mmv",
                                            "createdAt":  "2023-03-28T17:59:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MineCake147E",
                                            "createdAt":  "2023-08-17T04:18:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "John0King",
                                            "createdAt":  "2024-01-17T10:13:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PatVax",
                                            "createdAt":  "2024-03-25T07:54:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ProTip",
                                            "createdAt":  "2024-04-22T03:32:11Z"
                                        }
                                    ],
                          "totalCount":  13
                      },
        "updatedAt":  "2024-11-12T16:48:01Z",
        "body":  "# Background\r\n\r\nCurrently, the `System.IO.Pipelines` package only allows for pipelines that operate on raw bytes. With some trickery and the usage of `MemoryMarshal` et.al., the usage of Pipelines can be extended to blittable types.\r\n\r\nThe package description on [NuGet](https://www.nuget.org/packages/System.IO.Pipelines/) states:\r\n\r\n\u003e Single producer single consumer byte buffer management.\r\n\r\nHowever, single producer single consumer scenarios are not necessarily restricted to byte operations, and the techniques described in the [Blog post](https://blogs.msdn.microsoft.com/dotnet/2018/07/09/system-io-pipelines-high-performance-io-in-net/) can apply in other scenarios as well.\r\n\r\nSince `MemoryPool`, `Memory`, and `ReadOnlySequence` are generic `Pipe` does not necessarily need to be restricted to bytes only.\r\n\r\nThis issue proposes to add generic variants of the existing `System.IO.Pipelines` APIs and keep `Pipe` as the default implementation for `byte`-backed operations.\r\n\r\nEven though `System.IO.TextReader.ReadLine` does allocate strings on the heap, a `Pipe\u003cstring\u003e` could still be useful for implementing a line-by-line parser (e.g. a CSV-parser).\r\n\r\nHaving a generic Pipe could also allow for efficient chaining of Pipes whenever the raw data needs to go through several stages of transformation before it reaches its final higher-level data structure.\r\n\r\n# Proposed API\r\n\r\nIn order to support a generic `Pipe\u003cT\u003e` class, several of the related types in `System.IO.Pipelines` will need generic variants. Wherever possible, the existing types should augment the generic APIs.\r\n\r\nAll proposed changes purposefully avoid breaking changes. With this proposal old code should still work without changes.\r\n\r\n### `PipeOptions`\r\n\r\nMove the existing API from `PipeOptions` to a new `PipeOptions\u003cT\u003e` and make `PipeOptions` a derivative of that.\r\n\r\n``` csharp\r\nnamespace System.IO.Pipelines\r\n{\r\n    public partial class PipeOptions\u003cT\u003e\r\n    {\r\n        public PipeOptions(System.Buffers.MemoryPool\u003cT\u003e pool = null, System.IO.Pipelines.PipeScheduler readerScheduler = null, System.IO.Pipelines.PipeScheduler writerScheduler = null, long? pauseWriterThreshold = null, long? resumeWriterThreshold = null, int? minimumSegmentSize = null, bool useSynchronizationContext = true) { }\r\n        public static System.IO.Pipelines.PipeOptions\u003cT\u003e Default { get { throw null; } }\r\n        public int MinimumSegmentSize { get { throw null; } }\r\n        public long PauseWriterThreshold { get { throw null; } }\r\n        public System.Buffers.MemoryPool\u003cT\u003e Pool { get { throw null; } }\r\n        public System.IO.Pipelines.PipeScheduler ReaderScheduler { get { throw null; } }\r\n        public long ResumeWriterThreshold { get { throw null; } }\r\n        public bool UseSynchronizationContext { get { throw null; } }\r\n        public System.IO.Pipelines.PipeScheduler WriterScheduler { get { throw null; } }\r\n    }\r\n    public partial class PipeOptions : System.IO.Pipelines.PipeOptions\u003cbyte\u003e\r\n    {\r\n        public PipeOptions(System.Buffers.MemoryPool\u003cbyte\u003e pool = null, System.IO.Pipelines.PipeScheduler readerScheduler = null, System.IO.Pipelines.PipeScheduler writerScheduler = null, long pauseWriterThreshold = (long)32768, long resumeWriterThreshold = (long)16384, int minimumSegmentSize = 2048, bool useSynchronizationContext = true) { }\r\n        public new static System.IO.Pipelines.PipeOptions Default { get { throw null; } }\r\n    }\r\n}\r\n```\r\n\r\n**Note:** The default values for thresholds and minimum segment size will need to be calculated depending on `\u003cT\u003e`, e.g. by using `sizeof(T)`. Therefore, the constructor of the generic `PipeOptions\u003cT\u003e` takes nullable values instead of using const values. The constructor of the non-generic `PipeOptions` type remains unchanged.\r\n\r\n### `ReadResult`\r\n\r\nIn order to make the `ReadResult` struct generic, a new `ReadResult\u003cT\u003e` needs to be defined that contains the same members as the non-generic type, but which uses a generic `ReadOnlySequence\u003cT\u003e`. For simplicity an implicit conversion between `ReadResult\u003cbyte\u003e`  and `ReadResult` is added.\r\n\r\n``` csharp\r\nnamespace System.IO.Pipelines\r\n{\r\n    public readonly partial struct ReadResult\r\n    {\r\n        public static implicit operator System.IO.Pipelines.ReadResult(System.IO.Pipelines.ReadResult\u003cbyte\u003e byteResult) { throw null; }\r\n    }\r\n    public readonly partial struct ReadResult\u003cT\u003e\r\n    {\r\n        private readonly object _dummy;\r\n        public ReadResult(System.Buffers.ReadOnlySequence\u003cT\u003e buffer, bool isCanceled, bool isCompleted) { throw null; }\r\n        public System.Buffers.ReadOnlySequence\u003cT\u003e Buffer { get { throw null; } }\r\n        public bool IsCanceled { get { throw null; } }\r\n        public bool IsCompleted { get { throw null; } }\r\n    }\r\n}\r\n```\r\n\r\n### `PipeWriter`\r\n\r\nSimilar to `PipeOptions`, the APIs of the original non-generic `PipeWriter` can be moved to a new `PipeWriter\u003cT\u003e` type, and then `PipeWriter` can derive from `PipeWriter\u003cbyte\u003e`.\r\n\r\n``` csharp\r\nnamespace System.IO.Pipelines\r\n{\r\n    public abstract partial class PipeWriter\u003cT\u003e : System.Buffers.IBufferWriter\u003cT\u003e\r\n    {\r\n        protected PipeWriter() { }\r\n        public abstract void Advance(int count);\r\n        public abstract void CancelPendingFlush();\r\n        public abstract void Complete(System.Exception exception = null);\r\n        public abstract System.Threading.Tasks.ValueTask\u003cSystem.IO.Pipelines.FlushResult\u003e FlushAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));\r\n        public abstract System.Memory\u003cT\u003e GetMemory(int sizeHint = 0);\r\n        public abstract System.Span\u003cT\u003e GetSpan(int sizeHint = 0);\r\n        public abstract void OnReaderCompleted(System.Action\u003cSystem.Exception, object\u003e callback, object state);\r\n        public virtual System.Threading.Tasks.ValueTask\u003cSystem.IO.Pipelines.FlushResult\u003e WriteAsync(System.ReadOnlyMemory\u003cT\u003e source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }\r\n    }\r\n    public abstract partial class PipeWriter : System.IO.Pipelines.PipeWriter\u003cbyte\u003e { }\r\n}\r\n```\r\n\r\n### `PipeReader`\r\n\r\nBecause of the use of `ReadResult` in `PipeReader`, the APIs of this type need to be duplicated into a generic variant `PipeReader\u003cT\u003e` which used `ReadResult\u003cT\u003e`. Therefore, the original non-generic `PipeReader` remains unchanged, and the following new APIs are added.\r\n\r\n``` csharp\r\nnamespace System.IO.Pipelines\r\n{\r\n    public abstract partial class PipeReader\u003cT\u003e\r\n    {\r\n        protected PipeReader() { }\r\n        public abstract void AdvanceTo(System.SequencePosition consumed);\r\n        public abstract void AdvanceTo(System.SequencePosition consumed, System.SequencePosition examined);\r\n        public abstract void CancelPendingRead();\r\n        public abstract void Complete(System.Exception exception = null);\r\n        public abstract void OnWriterCompleted(System.Action\u003cSystem.Exception, object\u003e callback, object state);\r\n        public abstract System.Threading.Tasks.ValueTask\u003cSystem.IO.Pipelines.ReadResult\u003cT\u003e\u003e ReadAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));\r\n        public abstract bool TryRead(out System.IO.Pipelines.ReadResult\u003cT\u003e result);\r\n    }\r\n}\r\n```\r\n\r\n### `Pipe`\r\n\r\nThe original non-generic `Pipe` type is a sealed class, therefore the generic `Pipe\u003cT\u003e` should also be sealed. This makes deriving `Pipe` from `Pipe\u003cbyte\u003e` impossible, however, so the APIs of `Pipe` are duplicated and made generic in `Pipe\u003cT\u003e`.\r\n\r\n``` csharp\r\nnamespace System.IO.Pipelines\r\n{\r\n    public sealed partial class Pipe\u003cT\u003e\r\n    {\r\n        public Pipe() { }\r\n        public Pipe(System.IO.Pipelines.PipeOptions\u003cT\u003e options) { }\r\n        public System.IO.Pipelines.PipeReader\u003cT\u003e Reader { get { throw null; } }\r\n        public System.IO.Pipelines.PipeWriter\u003cT\u003e Writer { get { throw null; } }\r\n        public void Reset() { }\r\n    }\r\n}\r\n```\r\n\r\n### `IDuplexPipe`\r\n\r\nIntroduce a generic clone `IDuplexPipe\u003cT\u003e` to the existing `IDuplexPipe` interface.\r\n\r\n``` csharp\r\nnamespace System.IO.Pipelines\r\n{\r\n    public partial interface IDuplexPipe\u003cT\u003e\r\n    {\r\n        System.IO.Pipelines.PipeReader\u003cT\u003e Input { get; }\r\n        System.IO.Pipelines.PipeWriter\u003cT\u003e Output { get; }\r\n    }\r\n}\r\n```\r\n\r\n# Pull Request\r\n\r\nImplementation of the proposed API changes in Pull Request dotnet/corefx#34928",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOk0k9xw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1OTMxOTYwMQ==",
                                           "createdAt":  "2019-01-31T12:02:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I’m having a hard time seeing anything outside of char. Do you have any concrete examples that can help show why this is useful beyond that?",
                                           "updatedAt":  "2019-01-31T12:02:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1OTM5MjUxOQ==",
                                           "createdAt":  "2019-01-31T15:44:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "The pattern I envisioned is using Pipelines to drive to and from the byte stream (as now); then use `System.Threading.Channels` to drive the object stream https://ndportmann.com/system-threading-channels/\r\n\r\nThough AsyncEnumerables could work well here also.\r\n\r\nPipelines is batch (N bytes at once); and you push back to the Pipe if the batch isn\u0027t large enough (either in size or not yet complete, delimited etc)\r\n\r\nNot sure `Pipe\u003cstring\u003e` would work in this regard (need N strings to process the batch) vs here\u0027s a well know quantity of strings (in well formed object; that\u0027s either the `Channel\u003cT\u003e` or AsyncEnumerator `T`).\r\n\r\nHowever, there is a potential gap (like in the csv example given) when parsing encoded data; if you were looking for a comma, return, emoji in encoded data (UTF16, UTF8) where the parser would need to be aware of how to interpret the byte data as in the encoding to do the search; prior to then converting to string or utf8string when found.\r\n\r\nSo something to make that step earlier could be helpful. Not sure going generic would help in this regard though?\r\n\r\ne.g. if you were a stream of `float`s you\u0027d read from the bytes with either the constraint being you need to have 4 bytes (`sizeof(float)`) or a collection (16 bytes for a quaternion = 4 x float); then either release the complete set of data via channel, or as a side-car on another longer lived data type, which then just indicates data is ready via non-generic Task (as its just complete or not complete, with data held elsewhere)",
                                           "updatedAt":  "2019-01-31T15:44:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1OTQwMDU4NQ==",
                                           "createdAt":  "2019-01-31T16:05:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fredrikhr",
                                           "body":  "@benadams, thanks for the link to Channels! I was not aware of these APIs and on first glance I agree that my CSV example and other line-by-line parsing scenarios probably would be better suited for use by a Channel instead of a pipeline...",
                                           "updatedAt":  "2019-01-31T16:05:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1OTQwMTUxMw==",
                                           "createdAt":  "2019-01-31T16:07:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fredrikhr",
                                           "body":  "However, wouldn\u0027t it still be easier (or even more performant) to use a `Pipe\u003cchar\u003e` instead of paying the MemoryMarshal cost for casting the buffer to chars on each read/write?\r\nOr as @benadams points out a `Pipe\u003cfloat\u003e`?",
                                           "updatedAt":  "2019-01-31T16:09:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1OTQzMTA3NQ==",
                                           "createdAt":  "2019-01-31T17:25:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "\u003e  would be better suited for use by a Channel instead of a pipeline...\r\n\r\nHave the Pipeline feed the Channel\r\n\r\nbytes =\u003e `Pipe` =\u003e look for new line =\u003e `string` =\u003e Add to `Channel`\r\n\r\nOr if you are working with push \r\n\r\nbytes =\u003e `Pipe` =\u003e look for new line =\u003e sync parse\r\n\r\n@davidfowl did write an example line parser in the second style in response to a blog post\r\n\r\nhttps://github.com/davidfowl/StringsAreEvil/blob/davidfowl/spanification/StringsAreEvil/Program.cs#L118-L226\r\n\r\n\u003e paying the MemoryMarshal cost for casting the buffer to chars on each read/write?\r\n\r\nIts an in-place cast; but generally the Pipe is a mechanism for extracting data from/to a source that deals in bytes (e.g. network, file, etc) so that conversion would be needed anyway?",
                                           "updatedAt":  "2019-01-31T17:25:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1OTY0ODczOA==",
                                           "createdAt":  "2019-02-01T08:44:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODD4Zxg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2023-08-17T04:27:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fredrikhr",
                                           "body":  "For an AST-Parser a `Pipe\u003cAstToken\u003e` might be useful. Take parsing a C-style `if` for example: After consuming all tokens for the condition and `if`-block, you now want to consume one more token to check whether the next token is an `else`. Channels (as far as I can see) cannot do that kind of peeking without actually consuming the token.\r\n\r\nAn in the AST-parser example it might very well be that `AstToken` is a non-blittable struct or even a class, as an AST-parser probably could get away with just using a loop over `ReadLineAsync`, since an AST-parser in most cases only needs to track the line (and character-position into that line) to be useful for compilers, IDEs, etc. And allocating a string to store the text-representation does not really matter in that example, since you typically end up having the entire AST (and thus the entire code file) in memory anyway.\r\n\r\nHowever, an AST-parser mostly does not need to have the entire code in *contiguous* memory, like you get from `File.ReadAllLines` (or similar).\r\n\r\nBut a Pipe woule give an AST-parser the means to avoid having to traverse the file multiple times, all phases of translation from the raw text to a high level AST-representation could consume the contents the moment the earlier phase of translation has finished processing an item.\r\n\r\n## C-parser example:\r\n\r\nA C-parser parsing the [7 phases of Translation](https://docs.microsoft.com/en-us/cpp/preprocessor/phases-of-translation) could be implemented this way:\r\n\r\nraw-file -\u003e `TextReader` using `ReadLineAsync` -\u003e `Pipe\u003cstring\u003e` converts into spliced lines -\u003e `Pipe\u003cSplicedLine\u003e` is read into a Tokenizer -\u003e `Pipe\u003cPreProcessingToken\u003e` is put through the preprocessor -\u003e `Pipe\u003cPostProcessingToken\u003e` is run through the un-escaper -\u003e `Pipe\u003cUnescapedToken\u003e` is run through the string-concatenator -\u003e `Pipe\u003cCLangToken\u003e` is interpreted by syntactical and semantic analysis.\r\n\r\nThis is obviously not an optimized scenario, but the `Pipe` does help composing each translation phase into its own unit, operating idependently of the others. To avoid double-allocating strings, you\u0027d obviously use ROM pointing into sections of the string produced by the text reader.\r\n\r\nThe point of having such a composed pipeline is that none of the phases (but the last) actually need to see the entire code unit. However, multiple do need the ability to look ahead and after peeking need to make a decision whether the next item should be consumed or not. As I said, this does not really work with Channels, since reading an item consumes it. In essence that is the same problem you with streams and the reason we created the Pipeline in the first place.",
                                           "updatedAt":  "2019-02-01T08:47:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1OTY1MDM3Nw==",
                                           "createdAt":  "2019-02-01T08:51:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fredrikhr",
                                           "body":  "I the C-parser example, the preprocessor would be an example that consumes one token from the input pipe, but may write zero or more items to the output pipe, actually making the number of output items unpredictable (similar to a `NetworkStream`).",
                                           "updatedAt":  "2019-02-01T08:51:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzM3NjQ3OQ==",
                                           "createdAt":  "2019-05-30T15:42:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Code-Grump",
                                           "body":  "This would be supremely useful for text-parsing. A `Pipe\u003cchar\u003e`, fed by a `Pipe\u003cbyte\u003e` lets me work over a set of text without having to deal with extensive buffer management.\r\n\r\nPerhaps restricting it to `unmanaged` types makes the most sense, encouraging switching to `Channels` for higher-level objects and letting us still perform reasonable optimisations?",
                                           "updatedAt":  "2019-05-30T15:42:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NjQzMzM1Nw==",
                                           "createdAt":  "2020-01-20T21:20:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD6hrvw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2023-08-17T04:21:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ODtian",
                                                                               "createdAt":  "2024-11-12T16:29:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "raffaeler",
                                           "body":  "In late 2018 I demoed at #dotnext in Moscow the use of Pipelines in processing audio files.\r\nThe only weirdness was the need of MemoryMarshal to convert blobs into audio chunks as the Pipelines are not able to manage anything out of bytes.\r\n\r\nThe good part of the sample is the ability to compose the blocks chaining multiple Pipes, such as:\r\n- FileSource, FileWriter blocks\r\n- IntToFloat, FloatToint blocks\r\n- Transform block (FFT and inverse)\r\n- Logger block (observe the data, spilling the content and writing it to file)\r\n- OneToMany block  (broadcasting)\r\n- ManyToOne block (merging pipes using a given function)\r\n\r\nI see a lot of cases where you may want to manage chains of blocks based on Pipelines.\r\nSo I totally subscribe this proposal :)",
                                           "updatedAt":  "2020-01-20T21:20:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTE4NTk3Mg==",
                                           "createdAt":  "2020-05-15T11:35:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RamType0",
                                           "body":  "I think this could be implemented so easily by just replacing some `byte` by `T`.\r\nWhat makes this issue neglected so longer?\r\nConstrain of `T`?\r\n",
                                           "updatedAt":  "2020-05-15T11:35:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTM5Mzk0Mg==",
                                           "createdAt":  "2020-05-15T17:47:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODD4aTQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2023-08-17T04:29:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AlgorithmsAreCool",
                                           "body":  "I have just stumbled on a personal need for a generic version of pipelines.\r\n\r\nI have an interpreter that operates a sequence/stream of command objects and emits low level instructions.\r\n\r\nRight now it immediately translates a command into lower level instructions one-by-one with no buffering. \r\nBut I want to add an optimization stage to the interpreter so that redundant or complementary sub-sequences \r\nof commands can be considered together as a unit. The flushing semantics of pipelines aligns with this goal.",
                                           "updatedAt":  "2020-05-15T17:47:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTM5NTU3Mg==",
                                           "createdAt":  "2020-05-15T17:51:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODD4YZg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2023-08-17T04:21:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AlgorithmsAreCool",
                                           "body":  "Also for a weaker anecdote with regards to the comparison to Channel\u003cT\u003e,\r\n\r\nChannels are very easy to use and work extremely well for a broad range of scenarios.\r\n\r\nBut Channel\u003cT\u003e is designs for sending objects one at a time.\r\nPipelines is clearly oriented to bulk/batched data\r\n\r\nSo to gain raw throughput I found myself re-implementing Pipelines on top of Channel\u003cT\u003e to trade latency for raw throughput. Specifically, I wrapped the channel in an object with an ArrayPool and sent buffers over the channel instead of individual objects.\r\n\r\nSince channels are already extremely fast, this is a more niche scenario, but it is one that pipelines already considered because of it\u0027s performance requirements.",
                                           "updatedAt":  "2020-05-15T17:51:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTY1Nzk1Mg==",
                                           "createdAt":  "2020-05-16T14:50:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FiniteReality",
                                           "body":  "While using a `Pipe\u003cfloat\u003e` or similar for audio processing seems like an interesting concept, I personally find that treating audio as opaque bytes would simply work a lot better, particularly when dealing with various codecs where the audio primitive is not an individual sample. (E.g. Opus, MP3 and Vorbis.) Passing around pipes which contain \"opaque\" binary data makes composing a complete pipeline much easier, as the interface is much easier to manage.",
                                           "updatedAt":  "2020-05-16T14:50:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTc2OTgzNg==",
                                           "createdAt":  "2020-05-17T09:35:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODD4avg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2023-08-17T04:30:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "raffaeler",
                                           "body":  "@FiniteReality That\u0027s what I did and everything got more complicated with a lot of additional work and memory allocations althought I used spans to miminize them.\r\nWhen you transform time-based data to frequency-based data using FFT  (and the reverse) having windows/arrays of floats is hugely better and avoids a lot of casting/endianess errors in all the plugins working in frequency.\r\n",
                                           "updatedAt":  "2020-05-17T09:35:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTc3MDQ5MQ==",
                                           "createdAt":  "2020-05-17T09:41:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FiniteReality",
                                           "body":  "@raffaeler For frequency domain operations, wouldn\u0027t a `Channel\u003cFFTSample\u003e` or some such make more sense? You\u0027re performing the transform on a small section of audio, and as it\u0027s audio you\u0027re probably only really interested in 20Hz-20kHz; that seems reasonable enough to me to fit into a structure, and is probably a lot easier to pass around than a `ReadOnlySequence\u003cfloat\u003e` or dealing with the sliced floats.",
                                           "updatedAt":  "2020-05-17T09:41:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTc3MTEwNA==",
                                           "createdAt":  "2020-05-17T09:48:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "raffaeler",
                                           "body":  "@FiniteReality It doesn\u0027t really matter if you prefer a bare float or a structure like the FFTSample. The point is that I would like to push something different than bytes out of the Pipe. Probably a window of samples would be even better as that is the minimum that can be processed from each plugin.\r\nAlso the audio is just an example. I have another app where I would like to push H264 frames and having a Pipe of H264Frame would be a neater solution rather than shooting byte arrays.\r\n\r\nLet\u0027s stay focused on examples that are useful to the team in order to evaluate the opportunity to making the Pipe generic.",
                                           "updatedAt":  "2020-05-17T09:48:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTc3MTM0NQ==",
                                           "createdAt":  "2020-05-17T09:50:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FiniteReality",
                                           "body":  "I am; but the examples being given (in my honest opinion) are better suited for other, existing systems rather than the proposed generic API. ",
                                           "updatedAt":  "2020-05-17T09:50:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTc3NzExNQ==",
                                           "createdAt":  "2020-05-17T10:43:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLiwFw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2023-11-01T09:27:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "raffaeler",
                                           "body":  "Stream-like processing is applicable to a wide number of use-cases and every time you need to transform the data, you will end up in a problem similar to the example I did.\r\nIf you agree on the proposal and don\u0027t like the audio one, just propose other examples.",
                                           "updatedAt":  "2020-05-17T10:43:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qnOKg",
                                           "createdAt":  "2023-11-01T09:34:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MineCake147E",
                                           "body":  "Is there any update on this?\r\nI ran into the same issue.\r\n\r\n`ReadOnlySequence\u003cbyte\u003e` may be scattered in the middle of a certain data (e.g. `Rune`, `Guid` and `Vector512\u003cdouble\u003e`), once or multiple times in the worst case, making `Pipe` impractical to use for anything outside `byte`.\r\n\r\nAdditionally, `Channel\u003cT\u003e` and `ConcurrentQueue\u003cT\u003e` doesn\u0027t provide a way to efficiently insert/extract multiple items at once.",
                                           "updatedAt":  "2023-11-06T04:46:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TST3H",
                                           "createdAt":  "2024-11-12T16:48:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ODtian",
                                           "body":  "For me it will be great at least adding generic for unmanaged pod type",
                                           "updatedAt":  "2024-11-12T16:48:00Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "API Proposal : System.IO.Pipelines generic APIs",
        "labels":  [
                       "area-System.IO.Pipelines"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/28889",
        "createdAt":  "2019-03-06T18:06:30Z",
        "number":  28889,
        "author":  "benaadams",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCx6sfQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Drawaes",
                                            "createdAt":  "2019-03-06T18:07:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tornhoof",
                                            "createdAt":  "2019-03-06T20:14:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ufcpp",
                                            "createdAt":  "2019-03-07T03:06:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wraith2",
                                            "createdAt":  "2019-03-07T10:45:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "samsosa",
                                            "createdAt":  "2019-03-10T23:21:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2019-05-30T15:45:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "khellang",
                                            "createdAt":  "2019-11-20T11:09:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "johncrim",
                                            "createdAt":  "2019-12-04T21:00:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ndobrianskyi-lohika-tix",
                                            "createdAt":  "2020-09-13T10:06:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lucaswalter",
                                            "createdAt":  "2020-09-29T17:03:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Cooksauce",
                                            "createdAt":  "2020-09-29T22:57:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nil4",
                                            "createdAt":  "2021-09-16T08:19:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Daniel-Svensson",
                                            "createdAt":  "2023-08-13T09:28:57Z"
                                        }
                                    ],
                          "totalCount":  13
                      },
        "updatedAt":  "2021-09-15T17:01:22Z",
        "body":  "The TextPipe can encode directly to the PipeWriter and needs no additional encoding buffers (unlike StreamWriter) \r\n\r\n```csharp\r\npublic TextPipe : TextWriter\r\n{\r\n    protected PipeWriter Pipe { get; set; } // to allow pooling as derived type\r\n    public static readonly new TextPipe Null;\r\n        \r\n    public TextPipe (PipeWriter pipe, Encoding encoding);\r\n\r\n    public virtual bool AutoFlush { get; set; }\r\n    public override Encoding Encoding { get; }\r\n    public override void Close();\r\n    protected override void Dispose(bool disposing);\r\n    public override ValueTask DisposeAsync();\r\n    public override void Flush();\r\n    public override Task FlushAsync();\r\n    public override void Write(char value);\r\n    public override void Write(char[] buffer);\r\n    public override void Write(char[] buffer, int index, int count);\r\n    public override void Write(ReadOnlySpan\u003cchar\u003e buffer);\r\n    public override void Write(string value);\r\n    public override Task WriteAsync(char value);\r\n    public override Task WriteAsync(char[] buffer, int index, int count);\r\n    public override Task WriteAsync(ReadOnlyMemory\u003cchar\u003e buffer, CancellationToken cancellationToken = default(CancellationToken));\r\n    public override Task WriteAsync(string value);\r\n    public override void WriteLine(ReadOnlySpan\u003cchar\u003e buffer);\r\n    public override Task WriteLineAsync();\r\n    public override Task WriteLineAsync(char value);\r\n    public override Task WriteLineAsync(char[] buffer, int index, int count);\r\n    public override Task WriteLineAsync(ReadOnlyMemory\u003cchar\u003e buffer, CancellationToken cancellationToken = default(CancellationToken));\r\n    public override Task WriteLineAsync(string value);\r\n  }\r\n}\r\n```\r\n\r\n/cc @davidfowl @stephentoub ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONtkPlA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MjU0NDYzOA==",
                                           "createdAt":  "2019-03-13T18:16:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lobster2012-user",
                                           "body":  "Hello, @benaadams \r\n~~What do you think about using PipeStream inside PipeStreamWriter?~~\r\n~~For example~~\r\nhttps://github.com/AArnott/Nerdbank.Streams/blob/master/src/Nerdbank.Streams/PipeStream.cs\r\nCode writer - your colleague\r\n\r\n~~+Perhaps a bit unsafe code~~",
                                           "updatedAt":  "2019-03-13T19:06:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MjU1MTgxMw==",
                                           "createdAt":  "2019-03-13T18:35:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "@lobster2012-user don\u0027t see how that helps with encoding? Is still writing bytes rather than chars/strings to bytes.\r\n\r\nUsing a StreamWriter to do the string to byte encoding (e.g. utf16 -\u003e utf8) and a wrapper for PipeWriter to convert it to a Stream still has the problem of the StreamWriter needing two arrays internally to do the conversion; whereas a direct TextWriter for PipeWriter would bypass this need.",
                                           "updatedAt":  "2019-03-13T18:35:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MjU2MjMzOA==",
                                           "createdAt":  "2019-03-13T19:03:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lobster2012-user",
                                           "body":  "You are right, I was stupid, I forgot about Encoding.GetDecoder()\r\nA few days ago I was implementing simple\r\n```csharp\r\npublic TextPipeReader (PipeReader reader, Encoding encoding)\r\n```\r\nfor JsonTextReader(TextReader)\r\nPerhaps it should be added too.",
                                           "updatedAt":  "2019-03-15T18:36:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzM3Mjk3MQ==",
                                           "createdAt":  "2019-05-30T15:32:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Code-Grump",
                                           "body":  "A text-oriented read/writer pair seems like a logical extension for Pipes; especially useful as an integration point for many of the existing APIs which work over a `TextReader` or `TextWriter`. I\u0027ve written a basic implementation of both `TextPipeReader` and `TextPipeWriter` in my current project and can see myself implementing them again in future projects.\r\n\r\nMy only question would be whether they should expose more \"Pipe\" methods which expose and work over a managed buffer of `char` values. For example: if trying to build a text-parser (like reading a JSON document from some HTTP content), being able to operate over a buffer is a more attractive API, avoiding the need to manage your own internal text buffers.",
                                           "updatedAt":  "2019-05-30T15:32:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc422Q-U",
                                           "createdAt":  "2021-09-15T16:53:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "koculu",
                                           "body":  "I tried following approach and it works. \r\nIt is easy to create an extension method using similar approach.\r\nEncoding class GetBytes method directly writes to the PipeWriter.\r\n```\r\nvar str = \"test string\";\r\nvar pipeWriter = context.Response.BodyWriter;\r\nEncoding.UTF8.GetBytes(str, pipeWriter);\r\n```\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.text.encodingextensions.getbytes?view=net-5.0",
                                           "updatedAt":  "2021-09-15T17:01:22Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "API: TextPipe : TextWriter",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Pipelines"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30058",
        "createdAt":  "2019-06-27T05:18:04Z",
        "number":  30058,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-08T23:12:41Z",
        "body":  "Today the `StreamPipeWriter` has no synchronization so it\u0027s possible to stomp on the state (linked list) when overlapping calls to `FlushAsync`, not awaiting it and continuing to call `GetSpan`/`GetMemory`/`Advance`. We should detect this and throw where appropriate.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON9xHuA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc433Ee4",
                                           "createdAt":  "2021-10-06T21:34:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "I wonder if it causes https://github.com/dotnet/aspnetcore/issues/37340",
                                           "updatedAt":  "2021-10-08T23:12:41Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "StreamPipeWriter should throw for overlapping calls to GetSpan/GetMemory and FlushAsync",
        "labels":  [
                       "area-System.IO.Pipelines",
                       "tenet-reliability"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30161",
        "createdAt":  "2019-07-05T21:20:59Z",
        "number":  30161,
        "author":  "halter73",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCFPWpA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jzebedee",
                                            "createdAt":  "2021-12-04T16:51:42Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-08-20T15:47:40Z",
        "body":  "Today the StreamPipeReader.TryRead (which overrides PipeReader.TryRead) either never returns any data (when ReadAsync is never called), or is likely to provide corrupted data (when ReadAsync is sometimes called).\r\n\r\nThe only way it\u0027s even a little bit useful today is if you\u0027ve read data calling ReadAsync, partially advance, and already know data is available without any call to InnerStream.ReadAsync in the background. This is extremely limited though, and requires the consumer to know a lot about the implementation and limitations of the PipeWriter they are using.\r\n\r\nSee https://github.com/dotnet/corefx/pull/39228#discussion_r300792703",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZHO6kA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMjIwMjk3Ng==",
                                           "createdAt":  "2020-10-01T15:10:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNZ5mA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "omariom",
                                                                               "createdAt":  "2021-07-26T04:27:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jzebedee",
                                                                               "createdAt":  "2022-01-28T03:09:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gab",
                                                                               "createdAt":  "2023-11-23T02:59:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "waf",
                                           "body":  "If it\u0027s not possible to change the behavior, I\u0027d at least appreciate a mention in the method documentation that `ReadAsync` must be called first. I expected `ReadAsync` and `TryRead` to be asynchronous / synchronous counterparts, when really they\u0027re supposed to be used in tandem.\r\n\r\nI came to this repo to enter a bug about it; luckily found this issue first!",
                                           "updatedAt":  "2020-10-01T15:10:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNTE1NzIyMA==",
                                           "createdAt":  "2021-04-22T20:18:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RayKoopa",
                                           "body":  "\u003e [...] I\u0027d at least appreciate a mention in the method documentation that `ReadAsync` must be called first. I expected `ReadAsync` and `TryRead` to be asynchronous / synchronous counterparts, when really they\u0027re supposed to be used in tandem.\r\n\u003e \r\n\u003e I came to this repo to enter a bug about it; luckily found this issue first!\r\n\r\nI am quoting this because it expresses exactly what I thought. It should be made clear that `TryRead` is - as it currently looks like - not a synchronous alternative to `ReadAsync`. There has been confusion on [StackOverflow](https://stackoverflow.com/questions/64820259/cant-get-pipereader-tryread-to-work-when-reading-from-a-socket/67220208) aswell and I hope I answered correctly.",
                                           "updatedAt":  "2021-04-22T20:18:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTAzNTYyNg==",
                                           "createdAt":  "2021-05-03T05:49:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@waf or @RayKoopa would one of you like to contribute docs here?",
                                           "updatedAt":  "2021-05-03T05:49:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTIxMzM2OQ==",
                                           "createdAt":  "2021-05-03T11:59:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RayKoopa",
                                           "body":  "Thanks for the offer, but I am afraid I did not understand yet whether this a \"bug\" or not.\r\n\r\nFor example, mgravell\u0027s `Pipelines.Sockets.Unofficial` library implements `TryRead` in a way it \"just works\" for synchronous reads, as if that _was_ intended (despite him [not recommending synchronous Pipeline usage when I noticed there\u0027s no synchronous flush](https://github.com/mgravell/Pipelines.Sockets.Unofficial/issues/61)).\r\n\r\nSince I\u0027ve rewritten my code to be asynchronous due to this, I did not investigate further. Thus I am not sure what to add to the documentation from my point of view other than a warning like \"This is _not_ a synchronous counterpart to `ReadAsync`, the Pipelines API is meant to be used asynchronously.\"  🤔",
                                           "updatedAt":  "2021-05-03T11:59:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTc2NDU1OQ==",
                                           "createdAt":  "2021-05-04T08:18:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "waf",
                                           "body":  "I\u0027ve opened PR #52237 to highlight this in the docs. As @RayKoopa said, it\u0027s just a small note that describes this behavior.",
                                           "updatedAt":  "2021-05-04T08:18:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kc7qQ",
                                           "createdAt":  "2023-08-20T15:00:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODrphzg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gab",
                                                                               "createdAt":  "2023-11-23T03:01:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "asvol",
                                                                               "createdAt":  "2024-07-26T05:25:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Gavin-Williams",
                                           "body":  "As someone new to networking, this method still doesn\u0027t do what I expect\r\n```cs\r\nif (reader.TryRead(out ReadResult result))\r\n```\r\nnever return true. And if the context-docs are meant to explain why it doesn\u0027t do what it should do by it\u0027s name, they have failed. It says right at the top\r\n\r\n\u003e Attempts to synchronously read data from the PipeReader\r\n\r\nSo I take it this method has been updated to be the synchronous version of the asynchronous version?\r\n\r\nWhen I read the terribly formatted extra text in the context-docs, I think that\u0027s trying to say that this method is not used for reading the PipeReader, but rather for getting lost messages\r\n\r\n\u003e Any unconsumed data from a previous asynchronous read will be available.\r\n\r\nBut it\u0027s not doing that either, because the method just returns false all the time.\r\n\r\nEdit: Just to expand on how this stuff looks to someone new to networking - I\u0027ve already detected an incoming message with  \r\n```cs\r\nclientSocket = await masterSocket.AcceptAsync();\r\n```\r\nthat\u0027s where the await happens, so the reader is created to read the data from the socket that has already been accepted. There shouldn\u0027t be anything to await at that point. It just needs to be read out. That\u0027s why I look to \u0027reader.TryRead.\r\n\r\nUpdate: As a consquence of reading peoples comments on other people having the issue, my understanding the workings has changed, I can see now that the connection never closes. So ReadAsync is waiting for more data, not AcceptAsync but I still don\u0027t know what reader.TryRead() does.",
                                           "updatedAt":  "2023-08-20T15:47:40Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Make StreamPipeReader.TryRead more usable",
        "labels":  [
                       "enhancement",
                       "area-System.IO.Pipelines"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/849",
        "createdAt":  "2019-12-13T20:38:34Z",
        "number":  849,
        "author":  "AArnott",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-16T12:42:04Z",
        "body":  "I\u0027m puzzled by the fact that `PipeReader.AdvanceTo` accepts a `default(SequencePosition)` but throws `InvalidCastException` when provided a position from an empty sequence. Is that by design?\r\n\r\n```cs\r\nvar pipe = new Pipe();\r\npipe.Reader.AdvanceTo(default); // this works\r\npipe.Reader.AdvanceTo(ReadOnlySequence\u003cbyte\u003e.Empty.Start); // this throws InvalidCastException\r\n```\r\n\r\nShould it throw `ArgumentException` instead given the `SequencePosition` came from an unrelated `ReadOnlySequence\u003cbyte\u003e`?\r\n\r\nI\u0027m a bit puzzled that `PipeReader.AdvanceTo` can be called before reading anyway.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxJx-Ig==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7EnH4i",
                                           "createdAt":  "2025-09-16T12:41:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AArnott",
                                           "body":  "`AdvanceTo(default)` throws something reasonable now:\n\n```\nUnhandled exception. System.InvalidOperationException: NoReadingOperationToComplete\n   at System.IO.Pipelines.ThrowHelper.ThrowInvalidOperationException_NoReadToComplete()\n   at System.IO.Pipelines.Pipe.AdvanceReader(BufferSegment consumedSegment, Int32 consumedIndex, BufferSegment examinedSegment, Int32 examinedIndex)\n   at System.IO.Pipelines.Pipe.AdvanceReader(SequencePosition\u0026 consumed, SequencePosition\u0026 examined)\n   at System.IO.Pipelines.Pipe.AdvanceReader(SequencePosition\u0026 consumed)\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.AdvanceTo(SequencePosition consumed)\n   at Program.Main()\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\n```\n\nBut `AdvanceTo(ReadOnlySequence\u003cbyte\u003e.Empty.Start)` still throws badly (in fact, the exception message looks like it is a token that was meant to be replaced):\n\n```\nUnhandled exception. System.InvalidCastException: Arg_InvalidCastException\n   at System.IO.Pipelines.Pipe.AdvanceReader(SequencePosition\u0026 consumed, SequencePosition\u0026 examined)\n   at System.IO.Pipelines.Pipe.AdvanceReader(SequencePosition\u0026 consumed)\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.AdvanceTo(SequencePosition consumed)\n   at Program.Main()\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\n```",
                                           "updatedAt":  "2025-09-16T12:42:04Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "PipeReader.AdvanceTo throws InvalidCastException",
        "labels":  [
                       "area-System.IO.Pipelines",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/39718",
        "createdAt":  "2020-07-21T16:26:27Z",
        "number":  39718,
        "author":  "AArnott",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-16T22:02:09Z",
        "body":  "While replacing Nerdbank.Streams\u0027 own `PipeStream` class (which adapts a `PipeReader` and/or `PipeWriter` to a `Stream`) with the `PipeReader.AsStream()` and `PipeWriter.AsStream()` methods, my unit tests discovered several behavioral differences:\r\n\r\n1. `PipeWriterStream.Write(byte[], int, int)` does not throw `ArgumentNullException` when passed a null buffer.\r\n1. `PipeReaderStream` and/or `PipeWriterStream` throw `InvalidOperationException` instead of `ObjectDisposedException` from the following APIs after `Stream.Dispose` is called: `Read`, `ReadByte`, `ReadAsync`, `Write, `WriteAsync`.\r\n1. `PipeWriterStream.Write*` methods also flush instead of waiting for a call to `Stream.FlushAsync()`. Generally speaking, folks should always flush streams rather than assuming bytes will be transmitted/persisted and can even improve efficiency by writing several chunks into the stream\u0027s buffers before flushing.\r\nAs a fallout of this, one of my tests timeout due to a hang where we didn\u0027t expect `WriteAsync` to block. We `await WriteAsync` followed by `Task flushTask = FlushAsync()` at which point we start reading on the other side in order to allow `FlushAsync` to finish.\r\n1. `PipeReaderStream.ReadAsync` that cannot complete because no bytes are available to read eventually throws `InvalidOperationException` when the stream is disposed instead of completing with `0` bytes read.\r\nThis is interesting because sometimes (e.g. `Stream.Read(byte[], int, int)`) the *only* way to cancel (and indeed an acceptable one by some standards) is to call `Stream.Dispose`, and at least some stream implementations return 0 after this.\r\n1. When `PipeReaderStream.Read*` methods return 0 bytes, I expect the underling `PipeReader.Complete()` method to be called. This is particularly true when `leaveOpen: false` was specified.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxLlq4Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjcwNzY5MA==",
                                           "createdAt":  "2020-07-22T21:30:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "My thoughts on the listed differences:\r\n\r\n1. 👍 \r\n2. 👍\r\n3. Response body Streams in ASP.NET Core auto flush, so we kept that behavior when creating PipeWriterStream. Changing this now would be breaking. Maybe we could add an AsStream() overload that disables auto flushing, but I doubt we have time to do that for 5.0, and I don\u0027t love the idea of a bunch of AsStream() overloads. I\u0027m starting to wish we had an PipeWriterStreamOptions options similar to what we have for PipeWriter.Create.\r\n4. I\u0027m not sure I completely understand the issue here. Is [this](https://github.com/dotnet/runtime/blob/19e4e451a0eda0d531780f84e7cb0690bf07ba07/src/libraries/System.IO.Pipelines/src/System/IO/Pipelines/PipeReaderStream.cs#L115) the problematic InvalidOperationException? I think the comment above comment above the throw is is right that only a buggy PipeReader would ever return a non-completed, non-canceled and empty ReadResult. DefaultPipeRader or ReadAsyncInternal could never do that AFAIK, and I don\u0027t know why a custom implementation would want to do that.\u003cbr/\u003e\r\nAn alternative to throwing would be to loop and try reading again. Returning 0 would be wrong since ReadResult.IsCompleted being false indicates we haven\u0027t really reached the end of the Stream. I think looping is too risky though. If someone did write a buggy PipeReader that repeatedly returns a a non-completed, non-canceled and empty ReadResult (perhaps because the author incorrectly thought that signified the end of data like Stream), PipeReaderStream.ReadAsync would loop infinitely.\r\n5. If we do this, it could *only* be done when `leaveOpen: false` is specified. While I don\u0027t see any real harm in completing the PipeReader as soon as we consume everything, I think it\u0027s less surprising to the user to complete the PipeReader in Stream.Dispose() like we do today. I could go either way on this.",
                                           "updatedAt":  "2020-07-22T21:30:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzY0NTYyMw==",
                                           "createdAt":  "2020-07-24T17:21:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AArnott",
                                           "body":  "\u003e I\u0027m starting to wish we had an PipeWriterStreamOptions options similar to what we have for PipeWriter.Create.\r\n\r\nSounds like a good idea to me.\r\n\r\n\u003e 4. I\u0027m not sure I completely understand the issue here. Is this the problematic InvalidOperationException? \r\n\r\nNo. The thrown IOE is the same one that would be thrown if `ReadAsync` were called *after* disposal, stating that reading is already completed. I\u0027m suggesting that we treat disposal of the reader the same as completion from the writer: that the ReadAsync would return with whatever it\u0027s got left (0 bytes in my example). It\u0027s not that a subsequent read might return more bytes -- it\u0027s disposed, so it would throw at that point. \r\nIt\u0027s not a *big* deal AFAIK. But if (some implementations of) Stream.Read return 0 bytes when you dispose the Stream from another thread, why shouldn\u0027t the PipeReader-backed Stream.Read method do the same?\r\n\r\n\u003e 5. If we do this, it could only be done when leaveOpen: false is specified. ... I could go either way on this.\r\n\r\nAgreed. It\u0027s not a big deal for me either, but was a difference between our implementations that I wanted to call out for consideration.",
                                           "updatedAt":  "2020-07-24T17:21:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMDgyODUwMw==",
                                           "createdAt":  "2021-03-17T06:21:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBj1YgQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AArnott",
                                                                               "createdAt":  "2021-03-17T17:27:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I\u0027m not a fan of 5. The rest seem reasonable to me.",
                                           "updatedAt":  "2021-03-17T06:21:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMTI3MDk2Nw==",
                                           "createdAt":  "2021-03-17T17:29:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBj1jgA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "halter73",
                                                                               "createdAt":  "2021-03-17T17:42:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AArnott",
                                           "body":  "On no. 3, we might still implicitly flush when the unflushed buffer gets beyond some size, like other I/O streams are likely to do. Otherwise code that uses streams and writes enormous amounts of data to them without a flush till the end may end up storing a large amount in memory. Such a design might bring back my deadlock case, but it\u0027s probably the lesser of two evils.",
                                           "updatedAt":  "2021-03-17T17:29:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMTI3ODYwMg==",
                                           "createdAt":  "2021-03-17T17:40:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBj1tBg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2021-03-17T17:57:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "halter73",
                                           "body":  "3 is still breaking. There should at least be a option (PipeWriterStreamOptions?) to make PipeWriterStream auto-flush without wrapping it.\r\n\r\n4 is also breaking. Oftentimes disposing a stream before you\u0027re done reading is the abortive case. We wouldn\u0027t want that to appear as if the other side gracefully completed the connection. We could also make this opt-in if this is important enough though.",
                                           "updatedAt":  "2021-03-17T17:40:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EuWrh",
                                           "createdAt":  "2025-09-16T22:02:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-16T22:02:07Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "System.IO.Pipelines AsStream() compat issues",
        "labels":  [
                       "area-System.IO.Pipelines",
                       "no-recent-activity",
                       "backlog-cleanup-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43480",
        "createdAt":  "2020-10-16T01:10:58Z",
        "number":  43480,
        "author":  "halter73",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-29T04:43:25Z",
        "body":  "### Description\r\n\r\nCopying data is a lot faster with larger buffers. And copying data is a large use case for System.IO.Pipelines. For example, in ASP.NET Core, we plan to use PipeWriter to write files to response bodies (https://github.com/dotnet/aspnetcore/pull/24851).\r\n\r\n@brporter got us looking at the performance of using Pipes to copy files, and this once again demonstrated how crucial large buffers are. This is why System.IO.Stream\u0027s DefaultCopyBufferSize is 81920 bytes.\r\n\r\nhttps://github.com/dotnet/runtime/blob/c788fe1786ffc9295f1c469e506e26ff2ff4f94c/src/libraries/System.Private.CoreLib/src/System/IO/Stream.cs#L30-L33\r\n\r\nPipeOptions.DefaultMinimumSegmentSize is only 4096 bytes, and this leads to terrible performance when calling something like the default implementation of [WriteAsync](https://github.com/dotnet/runtime/blob/393c1b2067bb67fe8a229dcd3e1ca6602b9b76b4/src/libraries/System.Memory/src/System/Buffers/BuffersExtensions.cs#L118), [CopyToAsync](https://github.com/dotnet/runtime/blob/c788fe1786ffc9295f1c469e506e26ff2ff4f94c/src/libraries/System.IO.Pipelines/src/System/IO/Pipelines/PipeWriter.cs#L117) or anything that calls PipeWriter.GetMemory() or PipeWriter.GetSpan() without a sizeHint.\r\n\r\nhttps://github.com/dotnet/runtime/blob/c788fe1786ffc9295f1c469e506e26ff2ff4f94c/src/libraries/System.IO.Pipelines/src/System/IO/Pipelines/PipeOptions.cs#L14\r\n\r\nIn my testing, copying a 2GB file went from taking [8607ms](https://github.com/halter73/PipeTest/commit/f1ab0bcdd7d06d796edebd710d57b78258b7f7c4) to [1771ms](https://github.com/halter73/PipeTest/commit/ff0aceecf8c37b582ad35234b9369c5ca67bbf4d) by increasing PipeOptions.MinimumSegmentSize from 4096 bytes to 655350 bytes. Even with the in-between  Stream.DefaultCopyBufferSize value of 81920 bytes the copy time dropped to 2458ms.\r\n\r\nYou \r\n\r\n### Configuration\r\n\r\nYou can find the benchmark app at https://github.com/halter73/PipeTest/blob/master/Program.cs.\r\n\r\n```\r\nF:\\dev\\halter73\\PipeTest [master +3 ~1 -0 !]\u003e dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-alpha.1.20472.11\r\n Commit:    e55929c5a5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.20231\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   F:\\dev\\aspnet\\AspNetCore\\.dotnet\\sdk\\6.0.100-alpha.1.20472.11\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-alpha.1.20507.4\r\n  Commit:  4fef87c65e\r\n\r\n.NET SDKs installed:\r\n  6.0.100-alpha.1.20472.11 [F:\\dev\\aspnet\\AspNetCore\\.dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.NETCore.App 6.0.0-alpha.1.20468.7 [F:\\dev\\aspnet\\AspNetCore\\.dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n### Regression?\r\n\r\nNo.\r\n\r\n### Data\r\n\r\n#### [Before (4096)](https://github.com/halter73/PipeTest/commit/f1ab0bcdd7d06d796edebd710d57b78258b7f7c4)\r\n\r\n```\r\nF:\\dev\\halter73\\PipeTest [slice +3 ~1 -0 !]\u003e dotnet run .\\test.in .\\test.out PipelinesSE\r\nCopying .\\test.in to .\\test.out with method PipelinesSE...done!\r\n\r\nGetTotalAllocatedBytes(true): [117,722,376] bytes\r\nGetTotalMemory(false): [3,353,520] bytes\r\nExecuted for 8607ms.\r\n```\r\n\r\n#### [After (655350)](https://github.com/halter73/PipeTest/commit/ff0aceecf8c37b582ad35234b9369c5ca67bbf4d) \r\n\r\n```\r\nF:\\dev\\halter73\\PipeTest [master +3 ~1 -0 !]\u003e dotnet run .\\test.in .\\test.out PipelinesSE\r\nCopying .\\test.in to .\\test.out with method PipelinesSE...done!\r\n\r\nGetTotalAllocatedBytes(true): [1,672,544] bytes\r\nGetTotalMemory(false): [1,718,512] bytes\r\nExecuted for 1771ms.\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeMwFtQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwOTY3MTYwMg==",
                                           "createdAt":  "2020-10-16T01:14:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "+ @davidfowl @pakrym",
                                           "updatedAt":  "2020-10-16T01:14:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMDY0NTE0OQ==",
                                           "createdAt":  "2020-10-16T21:15:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Triage: Alternatively, we can add an API to pass a memory hint to `WriteAsync` and `CopyToAsync`",
                                           "updatedAt":  "2020-10-16T21:15:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMDcwMDgxNw==",
                                           "createdAt":  "2020-10-16T23:52:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "We could do both.",
                                           "updatedAt":  "2020-10-16T23:52:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMDcyNTIyMA==",
                                           "createdAt":  "2020-10-17T01:56:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I don\u0027t really understand what we\u0027d change the default to based on this since it\u0027s scenario specific. I do think we could change the defaults for CopyToAsync and have a way to pass in a sizehint for CopyToAsync and WriteAsync. ",
                                           "updatedAt":  "2020-10-17T01:56:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMTA2MDAxNw==",
                                           "createdAt":  "2020-10-17T18:16:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "\u003e In my testing, copying a 2GB file went from taking 8607ms to 1771ms by increasing PipeOptions.MinimumSegmentSize from 4096 bytes to 655350 bytes. Even with the in-between Stream.DefaultCopyBufferSize value of 81920 bytes the copy time dropped to 2458ms.\r\n\r\nIs that doing multiple smaller async reads from a stream rather than repeated smaller copies?\r\n\r\ne.g. if you read to a large chunk (65k); then copy that to the small 4k blocks what\u0027s the time difference?",
                                           "updatedAt":  "2020-10-17T18:16:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMjQ1OTUyOA==",
                                           "createdAt":  "2020-10-19T21:44:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e Is that doing multiple smaller async reads from a stream rather than repeated smaller copies?\r\n\u003e\r\n\u003e e.g. if you read to a large chunk (65k); then copy that to the small 4k blocks what\u0027s the time difference?\r\n\r\nWhen experimenting with file copying on Windows, I tested that by repeatedly calling GetMemory()/Advance() without flushing every time in my [flush-less branch](https://github.com/halter73/PipeTest/commit/15c57f23e28a4cfeb3d81412a99dcbb864b5226a). That only yielded an ~8% improvement.\r\n\r\nThen I created a [cheat branch](https://github.com/halter73/PipeTest/commit/df35d00ef1116566c1334cb1729d2453d455da48) that went even further and Advanced prior to receiving data so it could do concurrent reads into smaller buffers. This was yielded a ~48% improvement which was equivalent to using a larger buffer (where larger buffer size = concurrent reads * smaller buffer size). But since you can only really read into one buffer at a time with a PipeWriter, that\u0027s not an option unless we add PipeWriter APIs.\r\n\r\nYou can see all the branches I experimented with at https://github.com/halter73/PipeTest/branches. I\u0027ve included my local perf measurements in my commit messages.",
                                           "updatedAt":  "2020-10-19T21:44:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMjQ2NDE0Mw==",
                                           "createdAt":  "2020-10-19T21:55:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "Ah, `DefaultMinimumSegmentSize` is independent of the Memory pool block size; I was thinking it was increasing that.\r\n\r\nThough it would cause by default allocations from the ArrayPool rather than the Memory pool for Kestrel (if the size is not specified)?",
                                           "updatedAt":  "2020-10-19T21:55:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMjQ3MDcxMw==",
                                           "createdAt":  "2020-10-19T22:11:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBT-yVg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "benaadams",
                                                                               "createdAt":  "2020-10-19T22:22:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e Though it would cause by default allocations from the ArrayPool rather than the Memory pool for Kestrel (if the size is not specified)?\r\n\r\nIf we do this, Kestrel likely wouldn\u0027t use the `DefaultMinimumSegmentSize` in order to avoid this.",
                                           "updatedAt":  "2020-10-19T22:11:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54zAW1",
                                           "createdAt":  "2024-03-29T04:43:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Chacoon3",
                                           "body":  "Thank you guys for discussing this issue.",
                                           "updatedAt":  "2024-03-29T04:43:23Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Increase the default value of PipeOptions.MinimumSegmentSize",
        "labels":  [
                       "area-System.IO.Pipelines",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48689",
        "createdAt":  "2021-02-24T07:34:25Z",
        "number":  48689,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCWYlfA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HurricanKai",
                                            "createdAt":  "2021-02-24T11:29:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Khitiara",
                                            "createdAt":  "2022-04-06T00:57:28Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-04-02T04:58:10Z",
        "body":  "## Background and Motivation\r\n\r\nToday the pipe supports custom SynchronizationContext but doesn\u0027t support custom TaskSchedulers. We have an option to toggle if this context should be captured for all pipe operations, we have today for the SynchronizationContext.\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace System.IO.Pipelines\r\n{\r\n    public class PipeOptions\r\n    {\r\n        public PipeOptions(\r\n            MemoryPool\u003cbyte\u003e? pool = null,\r\n            PipeScheduler? readerScheduler = null,\r\n            PipeScheduler? writerScheduler = null,\r\n            long pauseWriterThreshold = -1,\r\n            long resumeWriterThreshold = -1,\r\n            int minimumSegmentSize = -1,\r\n            bool useSynchronizationContext = true,\r\n+           bool useTaskScheduler = true)\r\n\r\n+        public bool UseTaskScheduler { get; }\r\n    }\r\n```\r\n\r\n## Alternative Designs\r\n\r\nTurn capture on by default and people can use the ConfigureAwait pattern to disable capture, don\u0027t add the Pipe wide flag. We already have one for the sync context so it would be inconsistent.\r\n\r\n## Risks\r\n\r\nBehavior change if there was a task scheduler that was being ignored before, it\u0027ll now be picked up for scheduling decisions.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Add support for TaskSchedulers in Pipe",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Pipelines"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49259",
        "createdAt":  "2021-03-06T08:34:01Z",
        "number":  49259,
        "author":  "cobalthex",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-05-10T16:14:07Z",
        "body":  "One of the benefits of `System.IO.Pipelines.Pipe` is its ability to be re-used and otherwise conserve memory through usage of ArrayPools internally.\r\n\r\nPipes create BufferSegments internally to store the memory segments it uses, which are further stored in a ReadOnlySequence.\r\nWhile the buffer segments are re-used through BufferSegmentStack, this is a unique instance on every Pipe and cannot be shared.\r\n\r\nThis creates a potential issue where if using a pool of Pipes. Each pipe can have its stack grow (\"boundlessly\") and maybe end up with many un/under-used segments in a long-lived pool.\r\n\r\nI would propose that having the buffer segments be responsible for owning/renting the contained array/memory and that the Pipe is only responsible for renting segments.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOL4GlIg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MTg5OTY0MA==",
                                           "createdAt":  "2021-03-06T09:06:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e Each pipe can have its stack grow (\"boundlessly\") and maybe end up with many un/under-used segments in a long-lived pool\n\nHow? There\u0027s a maximum amount of segments that are pooled. \n\n\nCan you show how you\u0027re using the pipe and also how you\u0027re measuring the memory usage?",
                                           "updatedAt":  "2021-03-06T09:06:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MTkwMDg1MQ==",
                                           "createdAt":  "2021-03-06T09:16:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cobalthex",
                                           "body":  "hmm, missed the part about restricted growth\r\n\r\nAs for an example, it would be for use in re-usable buffers for handling socket receives:\r\n``` \r\nvar pipe = pipePool.Rent();\r\nwhile (socket is open)\r\n{\r\n  var memory = pipe.Writer.GetMemory();\r\n  await socket.Receive(memory);\r\n  pipe.Writer.Advance(...);\r\n  if (is end of message)\r\n  { \r\n    pipe.Writer.Flush();\r\n    var reader = pipe.Reader;\r\n    // do work here either with reader.ReadAsync() or reader.AsStream()\r\n    pipe.Reader.AdvanceTo(...);\r\n  }\r\n}\r\npipePool.Return(pipe);\r\n```",
                                           "updatedAt":  "2021-03-06T10:26:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MTkwNjkwNA==",
                                           "createdAt":  "2021-03-06T10:11:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "You reset the pipe during the use of the socket? Why? I\u0027m confused on the usage pattern and savings here. What are you seeing and what are you trying to reduce?",
                                           "updatedAt":  "2021-03-06T10:11:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MTkwODA2Ng==",
                                           "createdAt":  "2021-03-06T10:21:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cobalthex",
                                           "body":  "sorry, pseudocoding, I will update the example",
                                           "updatedAt":  "2021-03-06T10:21:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MTkwOTMxOA==",
                                           "createdAt":  "2021-03-06T10:33:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cobalthex",
                                           "body":  "basically, incoming messages can be of varying sizes, so using a pipe to take advantage of its segmenting is useful. However, when re-using these pipes as sockets open/close, it would be nice if they could share internal buffer segments so that after running for a while, all of these re-used pipes don\u0027t each end up holding onto an internal stack of buffers. Especially if most messages only need 1 segment.",
                                           "updatedAt":  "2021-03-06T10:35:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MTk2Nzc0OQ==",
                                           "createdAt":  "2021-03-06T14:59:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I still don\u0027t understand what you\u0027d be saving. Do you have some back of the napkin math? Do you have a memory profile? I\u0027d like to understand how much you think you\u0027d save if the segments were shared across pipes. \n\nPresumably if each pipe rented an array from the array pool. It wouldn\u0027t change how much memory was allocated unless your workload was constantly dropping and adding connections. If you had lots of concurrent connections, there\u0027d be no savings...",
                                           "updatedAt":  "2021-03-06T14:59:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjA1NTk1Mg==",
                                           "createdAt":  "2021-03-06T21:16:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cobalthex",
                                           "body":  "So this would be the case of many constantly dropped/added. I cannot provide specifics unfortunately but I was thinking if there are (tens/hundreds of) thousands of connections coming and going it might end up with 75% of the segments unused most of the time.\r\n\r\nThis may be a case of me wanting to over-optimize, idk",
                                           "updatedAt":  "2021-03-06T21:22:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjA2NjQ3OQ==",
                                           "createdAt":  "2021-03-06T21:40:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I\u0027d like to replicate the scenario so I can measure and play with changes. The more data you can provide the better (and would have a better likelihood of success). How many pipes are you pooling? I\u0027m guessing you don\u0027t pool tens of thousands of pipes (that would be counter productive I think)?\n\nI\u0027ve thought about doing this in the past but haven\u0027t seen the scenario that has convinced me we should optimized for this. I could be convinced with the right evidence.",
                                           "updatedAt":  "2021-03-06T21:40:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjA2Nzg2OA==",
                                           "createdAt":  "2021-03-06T21:46:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cobalthex",
                                           "body":  "Unfortunately I cannot provide too much detail but 10k+ connections at any one time, some short-lived, some long, The size of each socket receive would vary in size from one segment to multiple (but likely usually one segment).\r\n\r\nMaybe pooling all of those pipes is not a good idea? I am not sure, the goal is to avoid re-allocating them if they will likely be needed again (which is obv. dependent on the number of incoming sockets)",
                                           "updatedAt":  "2021-03-06T21:47:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjA3NjQ5Ng==",
                                           "createdAt":  "2021-03-06T22:30:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e Maybe pooling all of those pipes is not a good idea? I am not sure, the goal is to avoid re-allocating them if they will likely be needed again (which is obv. dependent on the number of incoming sockets)\r\n\r\nPooling pipes per request is fine if you were going to pool per request. We pool pipes for HTTP/2 requests (we reuse the request object and reset the pipe on them). We don\u0027t pool pipes at the connection level because the benefits are less clear. You\u0027d need to have a good idea of the socket churn as that\u0027s the only time you\u0027ll get reuse. The pool becomes less effective if there are lots of long lived connections so you only benefit from not allocating, if your pool size matches the churn you expect.\r\n",
                                           "updatedAt":  "2021-03-06T22:30:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjEzOTc3MQ==",
                                           "createdAt":  "2021-03-07T01:06:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cobalthex",
                                           "body":  "In my case, as these are continuous sockets, not one off (http) requests, it makes more sense (imo) to hold the pipe for the duration of the socket and return it to the pool after the socket closes. Holding onto a large array of pools I agree might not make sense, but for a ~10k object pool, overhead seems pretty minor.\r\nThese sockets are probably likely to live a few minutes on average, not sure if you consider that long lived, in which case maybe a pool doesn\u0027t make sense, though I\u0027d prefer holding a pool of pointers rather than having to alloc on demand",
                                           "updatedAt":  "2021-03-07T01:06:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjE1MDA5OQ==",
                                           "createdAt":  "2021-03-07T01:40:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "The Pipe today is around 368 bytes * 2 = 736 bytes per socket (assuming you\u0027re using a duplex pipe and a Pipe implementation for each side of the socket). BufferSegments are each about 80 bytes and one segment maps to 4K of memory (~2% overhead). Memory is returned before the Pipe is reset so the thing you\u0027re focused on in this issue is the BufferSegment itself (that 2% overhead). \r\n\r\nThe amount of space that should be used by the BufferSegments at any one time should be 2% of buffered data stored in the Pipe. That roughly amounts to how you\u0027re using the pipe higher up the stack to parse messages. This currently doesn\u0027t take the minimum segment size into account (it assumes 4K and that\u0027s a gap) but by default, I\u0027d be surprised if you saved much here.\r\n\r\nIf you can, take a memory dump from your running application and spelunk around the object graph to see what kinds of numbers you see in your scenario. That\u0027ll give more me some more data to work off of.\r\n\r\nPS: I\u0027m currently looking at shrinking the size of the Pipe because it\u0027s massive. ",
                                           "updatedAt":  "2021-03-07T01:40:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjYyNjYyNA==",
                                           "createdAt":  "2021-03-08T09:44:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cobalthex",
                                           "body":  "For me, it is more of the perf cost + memory churn/traffic of creating those segment.\r\nAs you say b/c they are samall, just holding on to a lot of them is probably not a huge deal, just seems inefficient (in my use case at least)",
                                           "updatedAt":  "2021-03-08T09:44:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MzA4ODk5Mg==",
                                           "createdAt":  "2021-03-08T21:23:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "\u003eIf you can, take a memory dump from your running application and spelunk around the object graph to see what kinds of numbers you see in your scenario. That\u0027ll give more me some more data to work off of.\r\n\r\nHave you had time to try this?",
                                           "updatedAt":  "2021-03-08T21:23:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MzEyMjg2Ng==",
                                           "createdAt":  "2021-03-08T22:18:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cobalthex",
                                           "body":  "I have not yet, I might have time today or tomorrow",
                                           "updatedAt":  "2021-03-08T22:18:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NjM5NzA0MQ==",
                                           "createdAt":  "2021-03-11T02:54:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cobalthex",
                                           "body":  "So I need to do some further testing, but some quick numbers were probably 1.5x (on the high end) the number of buffers compared to in-use. So for a test where I had 1000 active connections, I had about 1200-1500 allocated buffers.\r\n\r\nFor comparison, I am actually currently working with a custom solution that shares a pool of segments across all sockets, and fetches/links new segments to a sequence per socket as needed.\r\n\r\nIn my use case (unfortunately I cannot give more details at the moment), I had an overhead of about 5-10 buffers for 1000 connections. The times when an extra buffer is needed is very low per concurrent receive, even though all of the clients will perform the same operation, requiring multiple segments.",
                                           "updatedAt":  "2021-03-11T02:55:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NjQwNTc5MA==",
                                           "createdAt":  "2021-03-11T03:13:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Can you give some concrete numbers (MB sizes) or pictures from the dumps of the Pipe types?",
                                           "updatedAt":  "2021-03-11T03:13:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NjQzMzIxNg==",
                                           "createdAt":  "2021-03-11T04:12:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I\u0027ll look into using a per PipeOptions pool for segments ",
                                           "updatedAt":  "2021-03-11T04:12:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5Njg3MjU1MA==",
                                           "createdAt":  "2021-03-11T16:38:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I did a prototype of this an I\u0027m not sure about it as yet. The tricky part about sharing segments across all pipes by default are the following:\r\n- How do we determine the maximum memory this shared pool use as the pool? I chose 5MB based on the size of the segment, this is approximately 50K segments for all pipe instances.\r\n- With the default 4K buffer size, it\u0027s possible for pipes to buffer a large amount of content per pipe and blow through the global pool. For example, consider a connection that explicitly buffers 1MB messages before parsing. That\u0027ll eat 256 segments. If lots of connections do this you may still end up allocating.\r\n- Do we share this poll across `Pipe`, `StreamPipeReader`, and `StreamPipeWriter`? Or do they get their own pool?\r\n\r\nI ran a couple of tests:\r\n- 90K buffers writes every 10 seconds to 10,000 pipes resulted in ~25,000 BufferSegments at steady state.\r\n- 4K writes every 10 seconds, 10,000 pipes resulted in ~800 BufferSegments at steady state.\r\n\r\nIn my changes, I also currently fallback to the per Pipe stack that gets used if you exceed 256 segments in an individual pipe (or if the global pool is empty). I added this because of the scenario above where a single pipe tries to buffer lots of segments (this number could be configurable).\r\n\r\nOf course we don\u0027t need to be perfect here but it\u0027s really hard to pick sizes for global pools like this because they depend so much on usage and also because shrinking them is hard. We could also let you configure the pool size but that\u0027s also tricky especially with a static so this needs more thought.\r\n\r\n@cobalthex  In your scenario, what\u0027s the maximum number of concurrent connections you expect, and how much do they have buffered by default? How big are your message sizes?",
                                           "updatedAt":  "2021-03-11T16:38:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5Njg4ODE0Mg==",
                                           "createdAt":  "2021-03-11T16:59:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "cc @AArnott ",
                                           "updatedAt":  "2021-03-11T16:59:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5Njk3Mzk5MQ==",
                                           "createdAt":  "2021-03-11T19:09:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cobalthex",
                                           "body":  "I am expecting at least 10k ccu with each only holding onto one buffer. Message sizes vary, currently buffers are set to 4k. However that may change in the future (likely to shrink). There is currently a maximum receive size set at 1MB, but that is likely to shrink dramatically (needs more profiling)\r\n",
                                           "updatedAt":  "2021-03-11T19:15:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5Njk5OTQwOA==",
                                           "createdAt":  "2021-03-11T19:41:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cobalthex",
                                           "body":  "For pooling: if it is shared, could it not behave similarly to how ArrayPool.Shared works? (I have not dug into that code) Perhaps growing as much as necessary, and performing trim if memory pressure gets high (or no longer pooling)\r\n\r\nIf the pipe/read/writer had separate pools wouldn\u0027t that just mean after writing to a pipe, it dumps those segments into the reader pool if you read from the pipe (maybe I\u0027m misunderstanding)\r\n\r\nPerhaps this could be like ArrayPool where you can default to Shared or pass in your own via PipeOptions as Brennan suggested? This would allow you to tune the buffer sizes, max growth/other behaviors",
                                           "updatedAt":  "2021-03-11T19:41:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NzAyNTU3MA==",
                                           "createdAt":  "2021-03-11T20:25:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e For pooling: if it is shared, could it not behave similarly to how ArrayPool.Shared works? (I have not dug into that code) Perhaps growing as much as necessary, and performing trim if memory pressure gets high (or no longer pooling)\r\n\r\nIt could, but it\u0027s unclear how much you\u0027re saving. The array pool is pooling big buffers and those usually matter. This pool is saving 96KB of overhead per segment. I\u0027m not sure they are comparable...\r\n\r\n\u003e Perhaps this could be like ArrayPool where you can default to Shared or pass in your own via PipeOptions as Brennan suggested? This would allow you to tune the buffer sizes, max growth/other behaviors\r\n\r\nI think it could be done somewhere for sure but I\u0027m not convinced that the benefit is there for the complexity introduced. ",
                                           "updatedAt":  "2021-03-11T20:25:41Z"
                                       }
                                   ],
                         "totalCount":  23
                     },
        "title":  "Share System.IO.Pipelines.BufferSegments (make BufferSegmentStack static) across instances of Pipe",
        "labels":  [
                       "area-System.IO.Pipelines",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51433",
        "createdAt":  "2021-04-17T10:14:26Z",
        "number":  51433,
        "author":  "scalablecory",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-04-19T20:17:18Z",
        "body":  "`PipeWriter`\u0027s `PipeWriterStream` could reasonably support completing writes, so we should consider making it implement `DuplexStream`. It is not technically a duplex stream and could make things messy if we add more APIs onto `DuplexStream`. That said, anyone using the wrapper is already only using it only for writes, so it wouldn\u0027t be horrible to just have it throw on any future read-specific `DuplexStream` APIs.\r\n\r\nAlternately to avoid any confusion, we could add a new `DuplexStream`-based type for wrapping a `PipeWriter`/`PipeReader`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMPx5CA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMTgxMTk0OQ==",
                                           "createdAt":  "2021-04-17T12:00:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Alternately to avoid any confusion, we could add a new DuplexStream-based type for wrapping a PipeWriter/PipeReader.\r\n\r\nHow about an extension on IDuplexPipe that creates a DuplexStream? Might also want the inverse. ",
                                           "updatedAt":  "2021-04-17T12:00:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMTg1MjQyNA==",
                                           "createdAt":  "2021-04-17T16:49:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBnp_xg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2021-04-19T10:16:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "There are a bunch of types I want to add to the pipelines assembly that are always needed for doing duplex things. We should do them en-masse:\r\n\r\n- https://github.com/dotnet/aspnetcore/blob/main/src/Shared/ServerInfrastructure/DuplexPipeStream.cs\r\n- https://github.com/dotnet/aspnetcore/blob/main/src/Shared/ServerInfrastructure/DuplexPipe.cs\r\n- https://github.com/dotnet/aspnetcore/blob/main/src/Shared/ServerInfrastructure/DuplexPipeStreamAdapter.cs\r\n\r\n",
                                           "updatedAt":  "2021-04-17T16:49:52Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add Pipelines support for DuplexStream",
        "labels":  [
                       "area-System.IO.Pipelines"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55435",
        "createdAt":  "2021-07-09T22:13:30Z",
        "number":  55435,
        "author":  "runfoapp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-13T02:02:51Z",
        "body":  "\u003c!-- runfo report start --\u003e\r\nRunfo Tracking Issue: [system.io.pipelines.tests.flushasynctests.flushasync_throwsifwriterreaderwithexception](https://runfo.azurewebsites.net/tracking/issue/143)\r\n|Build|Definition|Kind|Run Name|\r\n|---|---|---|---|\r\n\r\n\r\n\r\nBuild Result Summary\r\n|Day Hit Count|Week Hit Count|Month Hit Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\r\n\u003c!-- runfo report end --\u003e\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONWBy3g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzQ4MzY0OA==",
                                           "createdAt":  "2021-07-09T22:13:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!-- runfo report start --\u003e\r\nRunfo Creating Tracking Issue (data being generated)\r\n\u003c!-- runfo report end --\u003e\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erunfoapp[bot]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-09T22:13:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41Utbi",
                                           "createdAt":  "2021-08-07T07:56:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@halter73 @jkotalik this is a 6.0 bug. could you either please fix by aug 17 or move to a new milestone",
                                           "updatedAt":  "2021-08-07T07:56:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41YHLe",
                                           "createdAt":  "2021-08-09T20:18:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "@danmoseley I opened #57081 to help investigate. Should I move this to 7.0.0 since it\u0027s not fixed?",
                                           "updatedAt":  "2021-08-09T20:18:36Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "system.io.pipelines.tests.flushasynctests.flushasync_throwsifwriterreaderwithexception",
        "labels":  [
                       "area-System.IO.Pipelines",
                       "disabled-test"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58659",
        "createdAt":  "2021-09-03T20:42:03Z",
        "number":  58659,
        "author":  "mdh1418",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-13T02:02:48Z",
        "body":  "Configuration: `net48-windows-Release-x86-Windows.10.Amd64.Client19H1.Open`\r\n\r\n```\r\nDiscovering: System.IO.Pipelines.Tests (app domain = on [no shadow copy], method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.IO.Pipelines.Tests (found 313 of 314 test cases)\r\n  Starting:    System.IO.Pipelines.Tests (parallel test collections = on, max threads = 2)\r\n   System.IO.Pipelines.Tests: [Long Running Test] \u0027System.IO.Pipelines.Tests.StreamPipeReaderCopyToAsyncTests.CopyToAsyncPipeWriterCopiesRemainderAfterReadingSome\u0027, Elapsed: 00:02:10\r\n[Long Running Test] \u0027System.IO.Pipelines.Tests.CopyToAsyncTests.CopyToAsyncPipeWriterCopiesRemainderAfterReadingSome\u0027, Elapsed: 00:02:12\r\n   System.IO.Pipelines.Tests: [Long Running Test] \u0027System.IO.Pipelines.Tests.StreamPipeReaderCopyToAsyncTests.CopyToAsyncPipeWriterCopiesRemainderAfterReadingSome\u0027, Elapsed: 00:04:10\r\n[Long Running Test] \u0027System.IO.Pipelines.Tests.CopyToAsyncTests.CopyToAsyncPipeWriterCopiesRemainderAfterReadingSome\u0027, Elapsed: 00:04:12\r\n   System.IO.Pipelines.Tests: [Long Running Test] \u0027System.IO.Pipelines.Tests.StreamPipeReaderCopyToAsyncTests.CopyToAsyncPipeWriterCopiesRemainderAfterReadingSome\u0027, Elapsed: 00:06:10\r\n[Long Running Test] \u0027System.IO.Pipelines.Tests.CopyToAsyncTests.CopyToAsyncPipeWriterCopiesRemainderAfterReadingSome\u0027, Elapsed: 00:06:12\r\n   System.IO.Pipelines.Tests: [Long Running Test] \u0027System.IO.Pipelines.Tests.StreamPipeReaderCopyToAsyncTests.CopyToAsyncPipeWriterCopiesRemainderAfterReadingSome\u0027, Elapsed: 00:08:10\r\n[Long Running Test] \u0027System.IO.Pipelines.Tests.CopyToAsyncTests.CopyToAsyncPipeWriterCopiesRemainderAfterReadingSome\u0027, Elapsed: 00:08:12\r\n   System.IO.Pipelines.Tests: [Long Running Test] \u0027System.IO.Pipelines.Tests.StreamPipeReaderCopyToAsyncTests.CopyToAsyncPipeWriterCopiesRemainderAfterReadingSome\u0027, Elapsed: 00:10:10\r\n[Long Running Test] \u0027System.IO.Pipelines.Tests.CopyToAsyncTests.CopyToAsyncPipeWriterCopiesRemainderAfterReadingSome\u0027, Elapsed: 00:10:12\r\n   System.IO.Pipelines.Tests: [Long Running Test] \u0027System.IO.Pipelines.Tests.StreamPipeReaderCopyToAsyncTests.CopyToAsyncPipeWriterCopiesRemainderAfterReadingSome\u0027, Elapsed: 00:12:11\r\n[Long Running Test] \u0027System.IO.Pipelines.Tests.CopyToAsyncTests.CopyToAsyncPipeWriterCopiesRemainderAfterReadingSome\u0027, Elapsed: 00:12:12\r\n   System.IO.Pipelines.Tests: [Long Running Test] \u0027System.IO.Pipelines.Tests.StreamPipeReaderCopyToAsyncTests.CopyToAsyncPipeWriterCopiesRemainderAfterReadingSome\u0027, Elapsed: 00:14:11\r\n[Long Running Test] \u0027System.IO.Pipelines.Tests.CopyToAsyncTests.CopyToAsyncPipeWriterCopiesRemainderAfterReadingSome\u0027, Elapsed: 00:14:12\r\n[\u0027System.IO.Pipelines.Tests\u0027 END OF WORK ITEM LOG: Command timed out, and was killed]\r\n```\r\n\r\nConsole: https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-58562-merge-39d88fcad77245eca1/System.IO.Pipelines.Tests/1/console.e8ede0a2.log?sv=2019-07-07\u0026se=2021-09-23T18%3A10%3A56Z\u0026sr=c\u0026sp=rl\u0026sig=deEqxSCy4iJR%2FES2F7q48l92yujksOrQGl0L7Flsf10%3D\r\n\r\nBuild: https://dev.azure.com/dnceng/public/_build/results?buildId=1341594\u0026view=logs\u0026j=79ebbb2e-07f2-5457-c5e5-132dd7ee4ba8\u0026t=160ce0e3-a8e8-5ac5-8623-55bee3c49b38",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONqtFhA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42kixD",
                                           "createdAt":  "2021-09-08T20:31:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "@ViktorHofer Any chance we have dumps or other info to work with beyond what\u0027s linked above?\r\n\r\nAlso, any idea why this test always seems to take exactly 1 minute to run? That seems suspicious :smile:",
                                           "updatedAt":  "2021-09-08T20:31:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42oquK",
                                           "createdAt":  "2021-09-10T04:55:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB5ylLQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "adityamandaleeka",
                                                                               "createdAt":  "2021-09-10T06:18:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "We have no mechanism to get dumps from test hangs. To do that we need to migrate to the vstest runner - there is an issue tracking it but the work is stalled.\r\n\r\nThe options are -- stare at the code, find local repro, add logging, or hope it goes away magically 😄 ",
                                           "updatedAt":  "2021-09-10T04:55:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42q0WE",
                                           "createdAt":  "2021-09-10T20:33:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Given that this has only failed once and we don\u0027t have anything actionable, let\u0027s come back to investigate this after our 6.0 commitments.",
                                           "updatedAt":  "2021-09-10T20:33:16Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Long running test: System.IO.Pipelines.Tests - CopyToAsyncPipeWriterCopiesRemainderAfterReadingSome",
        "labels":  [
                       "area-System.IO.Pipelines"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86239",
        "createdAt":  "2023-05-15T09:15:53Z",
        "number":  86239,
        "author":  "bentoi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-25T12:40:00Z",
        "body":  "Calling `FlushAsync` after calling `Complete` on a pipe `PipeWriter` doesn\u0027t throw. Shouldn\u0027t it throw? \r\n\r\nMore generally, the documentation of the `System.IO.Pipelines` APIs doesn\u0027t say much about what operations are allowed or not after calling `Complete` on a reader or writer or doesn\u0027t explain that calling again `ReadAsync` without first calling `AdvanceTo` is invalid, etc.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOudNXqQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6501ep",
                                           "createdAt":  "2025-07-25T12:39:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgravell",
                                           "body":  "(if someone could unassign me, that\u0027d be awesome, thx)",
                                           "updatedAt":  "2025-07-25T12:39:23Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Should `PipeWriter.FlushAsync` throw if called after `PipeWriter.Complete`?",
        "labels":  [
                       "area-System.IO.Pipelines",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87984",
        "createdAt":  "2023-06-23T20:58:57Z",
        "number":  87984,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-09-08T15:07:13Z",
        "body":  "### Description\r\n\r\nAn optimization to return already buffered data in the pipe in StreamPipeReader.ReadAsync means that IsCompleted never gets updated to true even though the next read may be at the end of the stream.\r\n\r\n[This](https://github.com/dotnet/runtime/blob/7d2a4d298a3d9bed50089eb79f67e5e8f3b0b190/src/libraries/System.IO.Pipelines/src/System/IO/Pipelines/StreamPipeReader.cs#L223) needs to be removed.\r\n\r\n### Reproduction Steps\r\n\r\n```C#\r\nusing System.Buffers;\r\nusing System.IO.Pipelines;\r\nusing System.Text;\r\nusing System.Text.Json;\r\n\r\nvar url = \"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/8.0/releases.json\";\r\n\r\nvar httpClient = new HttpClient();\r\nusing var releaseMessage = await httpClient.GetAsync(url, HttpCompletionOption.ResponseContentRead);\r\nusing var release = await releaseMessage.Content.ReadAsStreamAsync();\r\nawait ReadStream(release);\r\n\r\nasync Task ReadStream(Stream stream)\r\n{\r\n    var pipeReader = PipeReader.Create(stream);\r\n    JsonReaderState state = default;\r\n\r\n    while (true)\r\n    {\r\n        var result = await pipeReader.ReadAsync();\r\n        var completed = result.IsCompleted;\r\n        \r\n        DoRead(result.Buffer, completed, ref state, out var pos);\r\n\r\n        if (completed)\r\n        {\r\n            break;\r\n        }\r\n\r\n        pipeReader.AdvanceTo(pos);\r\n\r\n    }\r\n\r\n    void DoRead(in ReadOnlySequence\u003cbyte\u003e text, bool isFinalBlock, ref JsonReaderState state, out SequencePosition position)\r\n    {\r\n        // This is for debugging\r\n        // Console.WriteLine(Encoding.UTF8.GetString(text));\r\n\r\n        var reader = new Utf8JsonReader(text, isFinalBlock: isFinalBlock, state);\r\n\r\n        while (reader.Read())\r\n        {\r\n            Console.WriteLine(reader.TokenType);\r\n            Console.WriteLine(reader.BytesConsumed);\r\n        }\r\n\r\n        position = reader.Position;\r\n        state = reader.CurrentState;\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nNo infinite loop\r\n\r\n### Actual behavior\r\n\r\nThe repro has an infinite loop\r\n\r\n### Regression?\r\n\r\nInfinite loop\r\n\r\n### Known Workarounds\r\n\r\nUse a Pipe instead of a StreamPipeReader or know the content length ahead of time.\r\n\r\n### Configuration\r\n\r\nHost:\r\n  Version:      8.0.0-preview.5.23268.8\r\n  Architecture: x64\r\n  Commit:       0f8afd209a\r\n\r\n.NET SDKs installed:\r\n  3.1.426 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.313 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.400-preview.23281.13 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.100-preview.5.23268.17 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.0-preview.5.23268.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0-preview.5.23268.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0-preview.5.23268.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZf0c6Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ftC5B",
                                           "createdAt":  "2023-06-24T16:52:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This is trickier than I thought initially, and I think truly fixing it requires doing out of band reading of the Stream.",
                                           "updatedAt":  "2023-06-24T16:52:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5l_Rzp",
                                           "createdAt":  "2023-09-08T05:15:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "There may be another bug. This code doesn\u0027t work when you switch to the commented version.\r\n\r\nhttps://gist.github.com/richlander/a0edf651a3704c291c6b575f41f228c1\r\n\r\nAlso, check `HasValueSequence` and `reader.GetString()`. They don\u0027t seem to be working correctly.\r\n\r\nhttps://gist.github.com/richlander/a0edf651a3704c291c6b575f41f228c1#file-program-cs-L61",
                                           "updatedAt":  "2023-09-08T15:07:13Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "StreamPipeReader never sets IsCompleted if data is buffered ",
        "labels":  [
                       "area-System.IO.Pipelines",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89281",
        "createdAt":  "2023-07-21T01:00:04Z",
        "number":  89281,
        "author":  "JamesNK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3XqBA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2023-07-21T18:30:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zmj",
                                            "createdAt":  "2023-07-21T22:49:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xor-el",
                                            "createdAt":  "2023-07-22T19:05:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ciosoriog",
                                            "createdAt":  "2023-12-29T06:47:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ProTip",
                                            "createdAt":  "2024-04-21T06:33:57Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2024-07-24T18:34:24Z",
        "body":  "System.IO.Pipelines is _really_ hard to debug. Many bits of useful information about the current state of the pipe are buried deep in private fields.\r\n\r\nCustom debugger type proxies should be added to PipeReader and PipeWriter that expose useful information:\r\n\r\n* Is the `PipeReader` or `PipeWriter` complete?\r\n* Were they completed with exceptions?\r\n* What are the reader\u0027s and writer\u0027s current positions?\r\n* What are the reader\u0027s and writer\u0027s `Pipe`? Including the pipe allows someone to easily navigate between debugging the reader and writer.\r\n* Does a writer have a pending flush? Does a reader have a pending read?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYgpogw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5iCmiD",
                                           "createdAt":  "2023-07-21T01:01:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "Also, `FlushResult` and `ReadResult` should have debugger display attributes.",
                                           "updatedAt":  "2023-07-21T01:01:44Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Improve System.IO.Pipelines debugging",
        "labels":  [
                       "area-System.IO.Pipelines"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101893",
        "createdAt":  "2024-05-05T23:45:00Z",
        "number":  101893,
        "author":  "JamesNK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-25T17:18:42Z",
        "body":  "### Description\r\n\r\nNullReferenceException has been observed from StreamPipeReader. Likely caused by misuse (multiple concurrent calls to `ReadAsync`), however a more useful error should be thrown than NRE.\r\n\r\n---\r\n\r\nFrom investigation:\r\n\r\nThere is a nullref if the internal Stream.ReadAsync call returns and StreamPipeReader is adding a new BufferSegment while at the same time the reader is being completed and unsets BufferSegment state.\r\n\r\nThe specific lines are [BufferSegment.cs](https://github.com/dotnet/runtime/blob/c5c7f0d3d11cc82eddf1747fbdcaec9cb850c3aa/src/libraries/System.IO.Pipelines/src/System/IO/Pipelines/BufferSegment.cs#L119) where segment.NextSegment can be null if [BufferSegment.cs](https://github.com/dotnet/runtime/blob/c5c7f0d3d11cc82eddf1747fbdcaec9cb850c3aa/src/libraries/System.IO.Pipelines/src/System/IO/Pipelines/BufferSegment.cs#L69) sets _next to null right after the while check in SetNext.\r\n\r\nAnother bug in the same scenario is an ArgumentOutOfRange exception when incrementing the End value at [StreamPipeReader.cs](https://github.com/dotnet/runtime/blob/c5c7f0d3d11cc82eddf1747fbdcaec9cb850c3aa/src/libraries/System.IO.Pipelines/src/System/IO/Pipelines/StreamPipeReader.cs#L275) which calls Slice on the AvailableMemory which is now empty from the Complete call.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Reproduction Steps\r\n\r\nPossibly caused by multiple concurrent ReadAsync calls.\r\n\r\n### Expected behavior\r\n\r\nMore informative error. Or no error. Should look at what other pipe readers do in this situation.\r\n\r\n### Actual behavior\r\n\r\nNullReferenceException thrown.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 8\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv_4Ssw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc583y0n",
                                           "createdAt":  "2024-05-05T23:45:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "cc @BrennanConroy @adityamandaleeka ",
                                           "updatedAt":  "2024-05-05T23:45:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6__fmU",
                                           "createdAt":  "2025-08-25T17:16:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "This has already shipped at this point, so not urgent for 10. Moving to 11.\n\n@BrennanConroy I guess this is something we should fix at some point though?",
                                           "updatedAt":  "2025-08-25T17:16:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6__hKz",
                                           "createdAt":  "2025-08-25T17:18:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Right, this is about giving nicer errors and better detection for buggy app code.",
                                           "updatedAt":  "2025-08-25T17:18:42Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "StreamPipeReader NullReferenceException in some multithreading scenarios",
        "labels":  [
                       "area-System.IO.Pipelines"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103586",
        "createdAt":  "2024-06-17T16:03:05Z",
        "number":  103586,
        "author":  "jakobbotsch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:01:38Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=710311\r\nBuild error leg or test failing: System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows\r\nPull request: https://github.com/dotnet/runtime/pull/103576\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows [FAIL]\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=710311\r\n**Error message validated:** `[System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows [FAIL]`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 6/17/2024 4:03:28 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1152733](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152733)|dotnet/runtime|[System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152733\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31843800\u0026resultId=133052)|dotnet/runtime#119879|\r\n|[1148432](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148432)|dotnet/runtime|[System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148432\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31714456\u0026resultId=131367)||\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|2|2|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOue93mQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6CSGcu",
                                           "createdAt":  "2024-06-24T07:16:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-pgo 20240623.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=717422\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=17968886\u0026resultId=118323\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-x86-fullpgo_methodprofiling-Windows.10.Amd64.Open\r\n    - System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows\r\n```\r\n\r\n**Error message:**\r\n```\r\nAssert.Throws() Failure: No exception was thrown\r\nExpected: typeof(System.InvalidOperationException)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n      at System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows() in /_/src/libraries/System.IO.Pipelines/tests/PipeWriterTests.cs:line 311\r\n--- End of stack trace from previous location ---\r\n```\r\n",
                                           "updatedAt":  "2024-06-24T07:16:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DEDzR",
                                           "createdAt":  "2024-07-01T01:37:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20240630.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=725277\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18212088\u0026resultId=122099\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-x86-jitstress2_tiered-Windows.10.Amd64.Open\r\n    - System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows\r\n```\r\n\r\n**Error message:**\r\n```\r\n Assert.Throws() Failure: No exception was thrown\r\nExpected: typeof(System.InvalidOperationException)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows() in /_/src/libraries/System.IO.Pipelines/tests/PipeWriterTests.cs:line 311\r\n--- End of stack trace from previous location ---\r\n```",
                                           "updatedAt":  "2024-07-01T01:37:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EFlPq",
                                           "createdAt":  "2024-07-09T01:30:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20240708.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=732574\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18439392\u0026resultId=131325\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-x86-jitstress2_tiered-Windows.10.Amd64.Open\r\n    - System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows\r\n```\r\n\r\n**Error message:**\r\n```\r\n Assert.Throws() Failure: No exception was thrown\r\nExpected: typeof(System.InvalidOperationException)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows() in /_/src/libraries/System.IO.Pipelines/tests/PipeWriterTests.cs:line 311\r\n--- End of stack trace from previous location ---\r\n```\r\n",
                                           "updatedAt":  "2024-07-09T01:30:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GD70H",
                                           "createdAt":  "2024-07-25T01:16:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20240724.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=753165\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19084944\u0026resultId=133261\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-x64-jitstress2_tiered-Windows.10.Amd64.Open\r\n    - System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows\r\n```\r\n\r\n**Error message:**\r\n```\r\n Assert.Throws() Failure: No exception was thrown\r\nExpected: typeof(System.InvalidOperationException)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows() in /_/src/libraries/System.IO.Pipelines/tests/PipeWriterTests.cs:line 311\r\n--- End of stack trace from previous location ---\r\n```",
                                           "updatedAt":  "2024-07-25T01:16:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HlY4g",
                                           "createdAt":  "2024-08-08T01:24:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20240807.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=768198\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19600986\u0026resultId=115836\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-x64-jitstress2_tiered-Windows.10.Amd64.Open\r\n    - System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows\r\n```\r\n\r\n**Error message:**\r\n```\r\n Assert.Throws() Failure: No exception was thrown\r\nExpected: typeof(System.InvalidOperationException)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows() in /_/src/libraries/System.IO.Pipelines/tests/PipeWriterTests.cs:line 311\r\n--- End of stack trace from previous location ---\r\n```",
                                           "updatedAt":  "2024-08-08T01:24:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6N-CY3",
                                           "createdAt":  "2024-09-30T01:47:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-pgo 20240929.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=821627\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=21328594\u0026resultId=122044\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet10.0-windows-Release-x64-fullpgo_methodprofiling-Windows.10.Amd64.Open\r\n    - System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows\r\n```\r\n\r\n**Error message:**\r\n```\r\n Assert.Throws() Failure: No exception was thrown\r\nExpected: typeof(System.InvalidOperationException)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows() in /_/src/libraries/System.IO.Pipelines/tests/PipeWriterTests.cs:line 311\r\n--- End of stack trace from previous location ---\r\n```",
                                           "updatedAt":  "2024-09-30T01:47:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OFy8Z",
                                           "createdAt":  "2024-09-30T18:24:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "@adityamandaleeka, PTAL. \r\nCC @AndyAyersMS. ",
                                           "updatedAt":  "2024-09-30T18:24:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PbjgX",
                                           "createdAt":  "2024-10-11T01:35:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20241010.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=837632\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=21690164\u0026resultId=133284\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-x86-jitstress1_tiered-Windows.10.Amd64.Open\n    - System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows\n```\n\n**Error message:**\n```\n Assert.Throws() Failure: No exception was thrown\nExpected: typeof(System.InvalidOperationException)\n```\n\n**Stack trace:**\n```\n   at System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows() in /_/src/libraries/System.IO.Pipelines/tests/PipeWriterTests.cs:line 311\n--- End of stack trace from previous location ---\n```",
                                           "updatedAt":  "2024-10-11T01:35:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QkCsy",
                                           "createdAt":  "2024-10-21T01:21:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-pgo 20241020.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=848456\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=22025032\u0026resultId=129571\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-x86-fullpgo_random_gdv_edge-Windows.10.Amd64.Open\n    - System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows\n```\n\n**Error message:**\n```\n Assert.Throws() Failure: No exception was thrown\nExpected: typeof(System.InvalidOperationException)\n```\n\n**Stack trace:**\n```\n   at System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows() in /_/src/libraries/System.IO.Pipelines/tests/PipeWriterTests.cs:line 311\n--- End of stack trace from previous location ---\n```",
                                           "updatedAt":  "2024-10-21T01:21:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SQCeD",
                                           "createdAt":  "2024-11-04T01:22:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-pgo 20241020.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=848456\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=22025032\u0026resultId=129571\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-x86-fullpgo_random_gdv_edge-Windows.10.Amd64.Open\n    - System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows\n```\n\n**Error message:**\n```\n Assert.Throws() Failure: No exception was thrown\nExpected: typeof(System.InvalidOperationException)\n```\n\n**Stack trace:**\n```\n   at System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows() in /_/src/libraries/System.IO.Pipelines/tests/PipeWriterTests.cs:line 311\n--- End of stack trace from previous location ---\n```",
                                           "updatedAt":  "2024-11-04T01:22:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hppHh",
                                           "createdAt":  "2025-03-10T23:09:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Hit this today in 9.0: https://github.com/dotnet/runtime/pull/112628/checks?check_run_id=38523562417\n\n- Queue: Libraries Test Run checked coreclr windows x64 Release\n- Job: https://dev.azure.com/dnceng-public/public/_build/results?buildId=974437\u0026view=logs\u0026j=51e4640a-c078-5be6-cc1b-f971e75d762f\n- Output:\n```\nC:\\h\\w\\AB180980\\w\\B47C0A3C\\e\u003e\"C:\\h\\w\\AB180980\\p\\dotnet.exe\" exec --runtimeconfig System.IO.Pipelines.Tests.runtimeconfig.json --depsfile System.IO.Pipelines.Tests.deps.json xunit.console.dll System.IO.Pipelines.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing  \n  Discovering: System.IO.Pipelines.Tests (method display = ClassAndMethod, method display options = None)\n  Discovered:  System.IO.Pipelines.Tests (found 408 of 413 test cases)\n  Starting:    System.IO.Pipelines.Tests (parallel test collections = on [4 threads], stop on fail = off)\n    System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows [FAIL]\n      Assert.Throws() Failure: No exception was thrown\n      Expected: typeof(System.InvalidOperationException)\n      Stack Trace:\n        /_/src/libraries/System.IO.Pipelines/tests/PipeWriterTests.cs(311,0): at System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows()\n        --- End of stack trace from previous location ---\n  Finished:    System.IO.Pipelines.Tests\n=== TEST EXECUTION SUMMARY ===\n   System.IO.Pipelines.Tests  Total: 572, Errors: 0, Failed: 1, Skipped: 0, Time: 19.769s\n```",
                                           "updatedAt":  "2025-03-10T23:09:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6573eZ",
                                           "createdAt":  "2025-07-25T16:57:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "removing blocking-clean-ci as it has not failed in 30 days\n\n24-Hour Hit Count | 7-Day Hit Count | 1-Month Count\n-- | -- | --\n0 | 0 | 0\n",
                                           "updatedAt":  "2025-07-25T16:57:34Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "System.IO.Pipelines.Tests.PipeWriterTests.CompleteWithLargeWriteThrows fails in CI",
        "labels":  [
                       "area-System.IO.Pipelines",
                       "untriaged",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108075",
        "createdAt":  "2024-09-20T17:46:36Z",
        "number":  108075,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEsGjA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "onionhammer",
                                            "createdAt":  "2024-11-14T21:34:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zmayomarex",
                                            "createdAt":  "2024-11-22T14:35:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "licoto",
                                            "createdAt":  "2024-12-17T01:04:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeisenbach-schulzst",
                                            "createdAt":  "2024-12-20T09:39:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrei-boika",
                                            "createdAt":  "2024-12-23T14:04:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "johnnyreilly",
                                            "createdAt":  "2025-01-10T13:36:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NikaNats",
                                            "createdAt":  "2025-01-12T18:33:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kandaker",
                                            "createdAt":  "2025-02-11T19:09:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkone27",
                                            "createdAt":  "2025-02-23T12:08:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tevariou",
                                            "createdAt":  "2025-04-11T13:58:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "molostovvs",
                                            "createdAt":  "2025-06-20T13:18:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Blaisor",
                                            "createdAt":  "2025-06-25T01:54:54Z"
                                        }
                                    ],
                          "totalCount":  12
                      },
        "updatedAt":  "2025-07-21T10:56:59Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/The-PipeWriter-ResponseBodyPipeWriter-/10746619)._\n\n---\nMicrosoft Visual Studio Enterprise 2022 (64-bit) - Preview  \nVersion 17.12.0 Preview 2.0  \nSolution: Minimal Web Api and Xunit (.NET 9.0.0-rc.1.24431.7)  \n[WebApiXunit3.zip](https://aka.ms/dc/file?name=Ba63ef4c50773477e9231f07edcfa4e32638621167314290518_WebApiXunit3.zip\u0026tid=a63ef4c50773477e9231f07edcfa4e32638621167314290518)  \nThe error:  \nThe PipeWriter ‘ResponseBodyPipeWriter’ does not implement PipeWriter.UnflushedBytes\n\nThe same code works **fine** in .NET 8\n\n---\n### Original Comments\n\n#### Feedback Bot on 9/18/2024, 00:30 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### Feedback Bot on 9/19/2024, 02:55 AM: \n\n\u003cp\u003eThank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: \u003ca target=\u0027_blank\u0027 href=\"https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem#faq\"\u003ehttps://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem#faq\u003c/a\u003e. In case you need answers to common questions or need assisted support, be sure to use \u003ca target=\u0027_blank\u0027 href=\"https://visualstudio.microsoft.com/vs/support/\"\u003ehttps://visualstudio.microsoft.com/vs/support/\u003c/a\u003e. We’ll keep you posted on any updates to this feedback.\u003c/p\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuIxRiQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6M6x0o",
                                           "createdAt":  "2024-09-20T17:47:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "@BrennanConroy FYI",
                                           "updatedAt":  "2024-09-20T17:47:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6M8t87",
                                           "createdAt":  "2024-09-20T22:53:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdSH9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Megasoft2",
                                                                               "createdAt":  "2024-09-21T23:29:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SamDean",
                                                                               "createdAt":  "2024-09-28T15:55:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yudielcurbelo",
                                                                               "createdAt":  "2024-10-11T13:56:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HugoVG",
                                                                               "createdAt":  "2024-10-28T12:35:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikeblakeuk",
                                                                               "createdAt":  "2024-11-14T09:23:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matiasp",
                                                                               "createdAt":  "2024-11-18T13:33:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WalhallaZ",
                                                                               "createdAt":  "2024-11-23T23:29:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oneilsoftware-phutton",
                                                                               "createdAt":  "2024-11-26T18:44:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NikaNats",
                                                                               "createdAt":  "2025-01-12T18:33:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cristiano-bonassina",
                                                                               "createdAt":  "2025-01-25T16:32:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HowdyChad",
                                                                               "createdAt":  "2025-01-30T17:22:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JKamsker",
                                                                               "createdAt":  "2025-02-16T20:32:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "k-i-k-a",
                                                                               "createdAt":  "2025-03-13T09:00:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jonataspc",
                                                                               "createdAt":  "2025-04-24T19:01:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zw1st",
                                                                               "createdAt":  "2025-05-05T09:20:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "olegaya",
                                                                               "createdAt":  "2025-06-25T08:48:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "olegaya",
                                                                               "createdAt":  "2025-06-25T08:48:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colin-delhalle",
                                                                               "createdAt":  "2025-08-06T09:10:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  18
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Update your Microsoft.AspNetCore.Mvc.Testing reference.",
                                           "updatedAt":  "2024-09-20T22:53:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6M_IYG",
                                           "createdAt":  "2024-09-21T23:29:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhLsQA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NRG-Drink",
                                                                               "createdAt":  "2024-10-24T08:58:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HugoVG",
                                                                               "createdAt":  "2024-10-28T12:35:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "licoto",
                                                                               "createdAt":  "2024-12-17T14:57:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NikaNats",
                                                                               "createdAt":  "2025-01-12T18:33:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alicompiler",
                                                                               "createdAt":  "2025-09-06T22:34:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "Megasoft2",
                                           "body":  "Hi @BrennanConroy .\r\n\r\nNow it works! with Microsoft.AspNetCore.Mvc.Testing 9.0.0-rc.1.24452.1\r\n\r\nThank you so much\r\nSincerely\r\nJorge",
                                           "updatedAt":  "2024-09-21T23:29:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OAr8j",
                                           "createdAt":  "2024-09-30T09:02:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WernerMairl",
                                           "body":  "same situation here: got the exception =\u003e update to 9.0.0-rc.1.24452.1 =\u003e solved!\r\nBR\r\nWerner\r\n",
                                           "updatedAt":  "2024-09-30T09:02:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UicIH",
                                           "createdAt":  "2024-11-21T19:12:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "erenken",
                                           "body":  "Unfortunately this didn\u0027t help me.  I have a .NET 8 API project I wanted to convert to 9 and I get this error in my tests.  I have tried the specific version and the release version of 9.0.0 and I still get the error.  I have verified there aren\u0027t any nuget updates for this release or preview.  \n\nI did notice that I had to manually add `Microsoft.Extensions.Caching.Memory` with version `9.0.0` as something was still pointing to the pre-release version of it and it has a known vulnerability.  I also see under *Framework* that it shows `Microsoft.NETCore.App` with version `9.0.0-rc.2.24473.5`.  I figure that should also not be an RC.\n\nI guess for now I will stick with .NET 8.\n\nThis is what my CSPROJ looks like.\n\n```xml\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\n  \u003cPropertyGroup\u003e\n    \u003cTargetFramework\u003enet9.0\u003c/TargetFramework\u003e\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\n    \u003cIsPackable\u003efalse\u003c/IsPackable\u003e\n    \u003cIsTestProject\u003etrue\u003c/IsTestProject\u003e\n  \u003c/PropertyGroup\u003e\n  \u003cItemGroup\u003e\n    \u003cNone Remove=\"appsettings.json\" /\u003e\n  \u003c/ItemGroup\u003e\n  \u003cItemGroup\u003e\n    \u003cContent Include=\"appsettings.json\"\u003e\n      \u003cCopyToOutputDirectory\u003eAlways\u003c/CopyToOutputDirectory\u003e\n      \u003cExcludeFromSingleFile\u003etrue\u003c/ExcludeFromSingleFile\u003e\n      \u003cCopyToPublishDirectory\u003ePreserveNewest\u003c/CopyToPublishDirectory\u003e\n    \u003c/Content\u003e\n  \u003c/ItemGroup\u003e\n  \u003cItemGroup\u003e\n    \u003cPackageReference Include=\"coverlet.collector\" Version=\"6.0.2\"\u003e\n      \u003cPrivateAssets\u003eall\u003c/PrivateAssets\u003e\n      \u003cIncludeAssets\u003eruntime; build; native; contentfiles; analyzers; buildtransitive\u003c/IncludeAssets\u003e\n    \u003c/PackageReference\u003e\n    \u003cPackageReference Include=\"Microsoft.AspNetCore.Mvc.Testing\" Version=\"9.0.0\" /\u003e\n    \u003cPackageReference Include=\"Microsoft.Extensions.Caching.Memory\" Version=\"9.0.0\" /\u003e\n    \u003cPackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.12.0\" /\u003e\n    \u003cPackageReference Include=\"MSTest.TestAdapter\" Version=\"3.6.3\" /\u003e\n    \u003cPackageReference Include=\"MSTest.TestFramework\" Version=\"3.6.3\" /\u003e\n    \u003cPackageReference Include=\"NSubstitute\" Version=\"5.3.0\" /\u003e\n    \u003cPackageReference Include=\"OpenTelemetry.Extensions.Hosting\" Version=\"1.10.0\" /\u003e\n    \u003cPackageReference Include=\"OpenTelemetry.Instrumentation.SqlClient\" Version=\"1.9.0-beta.1\" /\u003e\n  \u003c/ItemGroup\u003e\n  \u003cItemGroup\u003e\n    \u003cProjectReference Include=\"..\\..\\src\\MY.API\\MY.API.csproj\" /\u003e\n  \u003c/ItemGroup\u003e\n  \u003cItemGroup\u003e\n    \u003cUsing Include=\"Microsoft.VisualStudio.TestTools.UnitTesting\" /\u003e\n  \u003c/ItemGroup\u003e\n  \u003cItemGroup\u003e\n    \u003cFolder Include=\"OpenTelemetry\\\" /\u003e\n  \u003c/ItemGroup\u003e\n\u003c/Project\u003e\n```",
                                           "updatedAt":  "2024-11-21T19:12:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VR_S7",
                                           "createdAt":  "2024-11-27T18:08:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "craigb",
                                           "body":  "This seems to be a breaking change when running net6 and net8 test code against the net9 runtime. Is that expected? I didn\u0027t see it called out in the NET9 release notes. I put a repro up at [https://github.com/craigb/pipewriter-repro](https://github.com/craigb/pipewriter-repro) -- when you set RollForward to LatestMajor, it will use the net9 runtime and the code will break.",
                                           "updatedAt":  "2024-11-27T18:08:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VSKRU",
                                           "createdAt":  "2024-11-27T18:38:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbLClA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "craigb",
                                                                               "createdAt":  "2024-11-27T18:44:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkone27",
                                                                               "createdAt":  "2025-02-23T12:08:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "milanjaros",
                                                                               "createdAt":  "2025-07-19T08:00:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "That makes sense. .NET 9\u0027s JSON implementation relies on `PipeWriter.UnflushedBytes`.\u0027s implementation. We should just document this breaking change if we haven\u0027t.\n\ncc @Priya91 @eiriktsarpalis ",
                                           "updatedAt":  "2024-11-27T18:38:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hrLs8",
                                           "createdAt":  "2025-03-11T03:10:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXJ7jw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "Megasoft2",
                                                                               "createdAt":  "2025-03-13T12:09:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "batressc",
                                                                               "createdAt":  "2025-06-19T05:11:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "batressc",
                                           "body":  "If someone else has this problem and is using [Rin](https://github.com/mayuki/Rin), please read this post:\n\n[PR#80 .NET 9 Support](https://github.com/mayuki/Rin/pull/80)\n\n**Workaround: Remove Rin**",
                                           "updatedAt":  "2025-03-11T03:12:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6x8VhU",
                                           "createdAt":  "2025-06-18T18:58:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEaugXQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "milanjaros",
                                                                               "createdAt":  "2025-07-16T04:37:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tomasopye",
                                           "body":  "Is there any update on this? We are running into it in .Net 8 (Sdk 8.0.411) and some combination of Microsoft.NET.Test.Sdk 17.14.x and latest xunit. we do have other pipelines with this combination and no issue.\n\nReverting back to test sdk 17.9.x and lower versions of xunit seemed to fix it, but this is not desirable.",
                                           "updatedAt":  "2025-06-18T19:02:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64TfV4",
                                           "createdAt":  "2025-07-19T08:00:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEis8lA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ignacy130",
                                                                               "createdAt":  "2025-08-08T11:56:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "activtrak-cboyer",
                                                                               "createdAt":  "2025-09-17T18:43:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "milanjaros",
                                           "body":  "Resolved when I added `Microsoft.AspNetCore.Mvc.Testing` version `9.0.7` as a direct dependency in the test project and set `TargetFramework` to `net9.0`",
                                           "updatedAt":  "2025-07-19T08:00:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64jFGJ",
                                           "createdAt":  "2025-07-21T10:56:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEis8pw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephenwsun",
                                                                               "createdAt":  "2025-07-23T14:56:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "activtrak-cboyer",
                                                                               "createdAt":  "2025-09-17T18:43:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "dkattan",
                                           "body":  "\u003e Resolved when I added `Microsoft.AspNetCore.Mvc.Testing` version `9.0.7` as a direct dependency in the test project and set `TargetFramework` to `net9.0`\n\nThis worked for me but only after I cleaned the project in Visual Studio.",
                                           "updatedAt":  "2025-07-21T10:56:58Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "The PipeWriter \u0027ResponseBodyPipeWriter\u0027 does not implement PipeWriter.UnflushedBytes",
        "labels":  [
                       "area-System.IO.Pipelines",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112651",
        "createdAt":  "2025-02-18T13:28:37Z",
        "number":  112651,
        "author":  "gmcchessney",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-18T18:15:56Z",
        "body":  "### Description\n\nDisposing a `StreamPipeWriter` while `StreamPipeWriter.FlushAsyncInternal` is in progress may cause an `AggregateException` to be thrown in .NET code. This exception is thrown from a call stack which is only executing .NET runtime code, which means we can\u0027t catch it and it crashes the application.\n\nThis is the full exception from our crash logs:\n```text\nSystem.AggregateException: One or more errors occurred. (The CancellationTokenSource has been disposed.)\n ---\u003e System.ObjectDisposedException: The CancellationTokenSource has been disposed.\n   at System.Threading.CancellationTokenSource.Cancel()\n   at System.Threading.CancellationTokenSource.CallbackNode.ExecuteCallback()\n   at System.Threading.CancellationTokenSource.ExecuteCallbackHandlers(Boolean throwOnFirstException)\n   --- End of inner exception stack trace ---\n   at System.Threading.CancellationTokenSource.ExecuteCallbackHandlers(Boolean throwOnFirstException)\n   at System.Threading.TimerQueueTimer.Fire(Boolean isThreadPool)\n   at System.Threading.TimerQueue.FireNextTimers()\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\n```\n\n### Reproduction Steps\n\nUsing this repository (ignore \"websocket\" in the name, I narrowed the issue down further after creating the repo): https://github.com/gmcchessney/dotnet-websocket-crash\n\n```cs\n// This is just a stream that has a Thread.Sleep in the overridden Write method.\nusing SlowNullStream myStream = new();\n\n// Concrete type is StreamPipeWriter\nPipeWriter myPipeWriter = PipeWriter.Create(myStream);\nvar pipeWriterStream = myPipeWriter.AsStream();\nvar bytes = Encoding.UTF8.GetBytes(\"Hello, World!\");\n\nCancellationTokenSource myCts = new(TimeSpan.FromSeconds(1));\n\n// This write will take at least ten seconds because of SlowNullStream\nvar writeTask = pipeWriterStream.WriteAsync(bytes, myCts.Token);\n\n// Dispose while a write is in progress, and before the cancellation\n// token is canceled. The application will crash when the\n// CancellationTokenSource is canceled by its cancellation timer.\npipeWriterStream.Dispose();\n\nawait writeTask;\n\nConsole.WriteLine(\"This won\u0027t happen because we\u0027ve crashed!\");\n```\n\n### Expected behavior\n\nAn unhandled exception is not thrown. I would rather expect an exception to be thrown from the call to `WriteAsync` since the `StreamPipeWriter` is now disposed.\n\n### Actual behavior\n\nAn exception is thrown from a `CancellationToken` registration delegate. Since the `CancellationTokenSource` is canceled by an internal timer, the exception is unhandled and crashes the application.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nEnsure no writes to the `StreamPipeWriter` are in progress when Dispose is called.\n\n### Configuration\n\n.NET 8 and .NET 9 (tried both)\nWindows 11 v10.0.26100\nx64\n\nI don\u0027t believe this issue has anything to do with my specific configuration.\n\n### Other information\n\nThe exception is thrown from the `CancellationToken` registration delegate set up in [`StreamPipeWriter.FlushAsyncInternal`](https://github.com/dotnet/runtime/blob/6e06aef86f90cc867ade4be48ed8cddea5a3905d/src/libraries/System.IO.Pipelines/src/System/IO/Pipelines/StreamPipeWriter.cs#L299).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnuh3ug==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6e5VPG",
                                           "createdAt":  "2025-02-18T14:10:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ovska",
                                           "body":  "This seems like intentional misuse to dispose the writer while it\u0027s being used. Can you work around it by calling `CancelPendingFlush` right before disposing?",
                                           "updatedAt":  "2025-02-18T14:10:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e6He6",
                                           "createdAt":  "2025-02-18T15:22:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gmcchessney",
                                           "body":  "`CancelPendingFlush` doesn\u0027t make any difference in this case. The application crashes before `FlushAsyncInternal` reacts to the cancellation, since it\u0027s stuck in `SlowNullStream.Write` for ten seconds.\n\n\u003e This seems like intentional misuse to dispose the writer while it\u0027s being used.\n\nThat is true, but I would expect an exception to be thrown from either `StreamPipeWriter.WriteAsync` or `StreamPipeWriter.Dispose` rather than being unhandled within the runtime. Maybe I didn\u0027t make it clear above, but the exception does not make it into any code in my application; it\u0027s thrown within a call stack that\u0027s entirely runtime code.",
                                           "updatedAt":  "2025-02-18T15:22:33Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Unhandled `AggregateException` caused by `StreamPipeWriter.FlushInternalAsync`",
        "labels":  [
                       "area-System.IO.Pipelines",
                       "untriaged"
                   ]
    }
]
