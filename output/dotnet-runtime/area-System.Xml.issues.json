[
    {
        "url":  "https://github.com/dotnet/runtime/issues/14819",
        "createdAt":  "2015-07-09T23:22:55Z",
        "number":  14819,
        "author":  "am11",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAOxfGQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eerohele",
                                            "createdAt":  "2016-10-29T05:08:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nverwer",
                                            "createdAt":  "2017-04-05T06:09:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ionsphere",
                                            "createdAt":  "2017-04-05T06:29:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DanAtkinson",
                                            "createdAt":  "2017-04-05T08:11:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "devatwork",
                                            "createdAt":  "2017-04-05T19:14:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thomasnordkvist",
                                            "createdAt":  "2017-04-06T07:06:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2017-04-07T14:30:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DaveBrue",
                                            "createdAt":  "2017-04-20T22:23:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BhaaLseN",
                                            "createdAt":  "2017-04-21T15:31:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alphaleonis",
                                            "createdAt":  "2017-04-21T19:06:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Matej-Hlatky",
                                            "createdAt":  "2017-05-27T15:02:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hmobius",
                                            "createdAt":  "2017-05-31T09:56:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tallday",
                                            "createdAt":  "2017-06-02T05:00:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TomGroeneboer",
                                            "createdAt":  "2017-06-02T08:42:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mvanbutselaar",
                                            "createdAt":  "2017-06-02T14:11:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jessehouwing",
                                            "createdAt":  "2017-06-05T13:11:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jwstevens-ii",
                                            "createdAt":  "2017-06-06T15:34:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thorkia",
                                            "createdAt":  "2017-06-09T16:17:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkmyklebust",
                                            "createdAt":  "2017-06-16T08:16:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lilleman12",
                                            "createdAt":  "2017-06-21T12:58:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "orangetoken",
                                            "createdAt":  "2017-06-22T14:14:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alfjorgen",
                                            "createdAt":  "2017-06-23T08:46:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JoenJia",
                                            "createdAt":  "2017-06-28T12:58:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JohnLBevan",
                                            "createdAt":  "2017-06-30T08:16:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Cyanized",
                                            "createdAt":  "2017-06-30T08:24:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pvandenheede",
                                            "createdAt":  "2017-06-30T09:52:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bwscheller",
                                            "createdAt":  "2017-07-07T15:46:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "froschdesign",
                                            "createdAt":  "2017-07-12T07:43:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dokumediacoach",
                                            "createdAt":  "2017-07-12T08:04:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "theRealBaccata",
                                            "createdAt":  "2017-07-13T00:23:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mvxproject",
                                            "createdAt":  "2017-07-15T05:50:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "daviburg",
                                            "createdAt":  "2017-07-20T16:34:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Diverclaim",
                                            "createdAt":  "2017-07-21T11:57:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DannyDannyDan",
                                            "createdAt":  "2017-07-31T16:03:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jbmercha",
                                            "createdAt":  "2017-08-17T18:07:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YoungbloodTheOne",
                                            "createdAt":  "2017-09-06T12:15:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "atpw25",
                                            "createdAt":  "2017-09-11T13:08:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "michaelcoles",
                                            "createdAt":  "2017-09-13T01:28:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevinowen",
                                            "createdAt":  "2017-09-29T06:43:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ThomasBarnekow",
                                            "createdAt":  "2017-10-02T19:13:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JosVerburg",
                                            "createdAt":  "2017-10-03T12:43:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TsengSR",
                                            "createdAt":  "2017-10-12T19:25:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stephen-lim",
                                            "createdAt":  "2017-10-12T20:18:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Darsstar",
                                            "createdAt":  "2017-10-19T09:59:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LokiMidgard",
                                            "createdAt":  "2017-10-23T06:07:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FObermaier",
                                            "createdAt":  "2017-10-24T09:08:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "clawfrank",
                                            "createdAt":  "2017-10-24T18:54:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "v12",
                                            "createdAt":  "2017-10-25T11:49:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lowds",
                                            "createdAt":  "2017-10-26T11:05:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DrInfiniteExplorer",
                                            "createdAt":  "2017-10-27T06:14:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "denispakizh",
                                            "createdAt":  "2017-10-27T12:00:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YuriHoogeweg",
                                            "createdAt":  "2017-11-02T11:55:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrerav",
                                            "createdAt":  "2017-11-10T13:12:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AvremelM",
                                            "createdAt":  "2017-11-20T21:14:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chrisketelaar",
                                            "createdAt":  "2017-11-22T14:00:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shakyjake",
                                            "createdAt":  "2017-12-04T15:46:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "darBis",
                                            "createdAt":  "2017-12-17T15:29:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattmichal",
                                            "createdAt":  "2017-12-18T15:15:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Jmaharman",
                                            "createdAt":  "2017-12-22T00:05:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alirobe",
                                            "createdAt":  "2018-01-19T00:00:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dapathy",
                                            "createdAt":  "2018-01-19T20:39:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "skurdiukov",
                                            "createdAt":  "2018-01-24T09:09:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aeb-dev",
                                            "createdAt":  "2018-01-26T09:57:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "esantisbon",
                                            "createdAt":  "2018-02-08T02:53:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2018-02-20T14:27:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "grzegorz-herman",
                                            "createdAt":  "2018-02-25T01:34:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "codebude",
                                            "createdAt":  "2018-03-08T06:17:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rbrad88",
                                            "createdAt":  "2018-03-30T12:12:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "richardcox13",
                                            "createdAt":  "2018-04-07T07:21:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "asinitson",
                                            "createdAt":  "2018-04-12T08:22:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pmooij",
                                            "createdAt":  "2018-05-15T13:27:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rubenprins",
                                            "createdAt":  "2018-05-15T23:34:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CassOnMars",
                                            "createdAt":  "2018-05-18T18:52:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pantosha",
                                            "createdAt":  "2018-05-22T07:41:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cocowalla",
                                            "createdAt":  "2018-07-31T20:03:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marian-margeta",
                                            "createdAt":  "2018-08-01T19:34:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dhcgn",
                                            "createdAt":  "2018-08-08T12:23:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JDziurlaj",
                                            "createdAt":  "2018-08-17T22:36:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wraith2",
                                            "createdAt":  "2018-09-10T12:37:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "imacovei",
                                            "createdAt":  "2018-09-11T12:28:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joskoanicic",
                                            "createdAt":  "2018-09-11T15:12:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BrunoJuchli",
                                            "createdAt":  "2018-09-28T13:52:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FranklinYu",
                                            "createdAt":  "2018-10-08T23:40:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jawn",
                                            "createdAt":  "2018-10-17T12:59:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LifeIsStrange",
                                            "createdAt":  "2018-10-18T17:06:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gjunge",
                                            "createdAt":  "2018-11-11T18:35:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JBonsink",
                                            "createdAt":  "2018-12-19T16:02:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "remcoros",
                                            "createdAt":  "2018-12-28T16:16:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gnuechtel",
                                            "createdAt":  "2019-01-03T13:36:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "keethburu",
                                            "createdAt":  "2019-02-08T07:41:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pietervp",
                                            "createdAt":  "2019-03-13T15:03:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bjoernax",
                                            "createdAt":  "2019-03-20T10:37:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ErikAnderson3",
                                            "createdAt":  "2019-04-01T18:59:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Erikvl87",
                                            "createdAt":  "2019-04-05T16:54:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CarlosACepeda",
                                            "createdAt":  "2019-04-12T17:27:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SergeyMirvoda",
                                            "createdAt":  "2019-04-22T19:06:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "isolatedThinker",
                                            "createdAt":  "2019-05-02T19:25:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "harwalan",
                                            "createdAt":  "2019-05-02T19:25:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Chase-Dickerson",
                                            "createdAt":  "2019-05-02T19:46:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrewrhancock",
                                            "createdAt":  "2019-05-02T20:01:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "daddyobrown",
                                            "createdAt":  "2019-05-02T21:47:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "QianMoXi",
                                            "createdAt":  "2019-06-05T15:13:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DvdKhl",
                                            "createdAt":  "2019-06-18T17:34:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeffska",
                                            "createdAt":  "2019-07-13T03:24:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "galloglach",
                                            "createdAt":  "2019-08-12T12:54:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "esbenbach",
                                            "createdAt":  "2019-12-19T05:33:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bahaabeih",
                                            "createdAt":  "2019-12-19T11:23:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yamaritta",
                                            "createdAt":  "2020-03-02T07:55:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vzilinas",
                                            "createdAt":  "2020-03-02T12:02:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hma-trimit-com",
                                            "createdAt":  "2020-03-06T08:13:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hmanndk",
                                            "createdAt":  "2020-03-06T08:14:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AndersMad",
                                            "createdAt":  "2020-03-06T08:15:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vladyslav-vasyliev",
                                            "createdAt":  "2020-04-28T12:34:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jmoralesv",
                                            "createdAt":  "2020-10-21T02:28:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mwwhited",
                                            "createdAt":  "2020-11-02T19:19:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rallix",
                                            "createdAt":  "2020-11-18T12:33:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rgroenewoudt",
                                            "createdAt":  "2025-07-25T17:21:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stf-krause",
                                            "createdAt":  "2025-07-29T07:55:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ridercz",
                                            "createdAt":  "2025-07-31T12:42:53Z"
                                        }
                                    ],
                          "totalCount":  119
                      },
        "updatedAt":  "2025-07-25T16:57:17Z",
        "body":  "#### Motivation\r\n\r\n`System.Xml.XPath` currently conforms with XPath 1.0 [\u003csup\u003e[W3C-xpath-1]\u003c/sup\u003e](http://www.w3.org/TR/xpath/) and XSLT 1.0 [\u003csup\u003e[W3C-xslt-1]\u003c/sup\u003e](http://www.w3.org/TR/xslt/) standards, but not XPath 2.0 [\u003csup\u003e[W3C-xpath-2]\u003c/sup\u003e](http://www.w3.org/TR/xpath20/), XPath 3.0 [\u003csup\u003e[W3C-xpath-3]\u003c/sup\u003e](http://www.w3.org/TR/xpath-30/), XPath 3.1 [\u003csup\u003e[W3C-xpath-3.1]\u003c/sup\u003e](http://www.w3.org/TR/xpath-31/), XSLT 2.0 [\u003csup\u003e[W3C-xslt-2]\u003c/sup\u003e](http://www.w3.org/TR/xslt20/) and XSLT 3.0 [\u003csup\u003e[W3C-xslt-3]\u003c/sup\u003e](http://www.w3.org/TR/xslt-30/). \r\n\r\nThe missing standard implementations in BCL are required by many consumer scenarios, for which .NET applications rely on [third party libraries](http://stackoverflow.com/a/1533114/863980). One of the chief scenario is Content Query Web Part (CQWP) in SharePoint, where the users\u0027 XSLT code can be drastically minimized if v2 is supported by `System.Xml.XPath`. As for most parts, there are backward compatibility fallbacks available, that is; the code written in XSLT 2 precisely, can be expressed verbosely in XSLT 1 and since so forth.\r\n### Pitfalls\r\n\r\nUnfortunately, (besides the existing third-party libraries\u0027 APIs) I do not have an off-hand -- concrete -- method list to propose, as it requires further brain-storming on whether to auto-select processor based on the input or to explicitly separate the namespaces (`System.Xml.XPath2` and `System.Xml.XPath3`). \r\n\r\nThe point to ponder being; since the sub-languages XPath 2 and XPath 3 intrinsically facilitates backward compatibility modes, see [XPath 2: J.1.3 Backwards Compatibility Behavior](http://www.w3.org/TR/xslt20/#backwards-compatibility-behavior) and [XPath 3: 3.10 Backwards Compatible Processing](http://www.w3.org/TR/xslt-30/#backwards), should the API be any different than the existing one and let consumers select the standard mode?\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOFC41tQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0Njk0OTQwMw==",
                                           "createdAt":  "2015-10-09T18:03:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joshfree",
                                           "body":  "/cc @krwq @KrzysztofCwalina @piotrpMSFT \n",
                                           "updatedAt":  "2015-10-09T18:03:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE2NzIxMzA0Nw==",
                                           "createdAt":  "2015-12-25T09:19:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Meindert66",
                                           "body":  "Sorry I never hearth of this project and have no idea about the goal but at my search for XPath2 in .NET I also saw this initiative: https://xpath2.codeplex.com/ and https://qm.codeplex.com/ made by the same author. The last one is mentioned in http://dev.w3.org/2006/xquery-test-suite/PublicPagesStagingArea/\n",
                                           "updatedAt":  "2015-12-25T09:21:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE3OTU5NjI3OQ==",
                                           "createdAt":  "2016-02-04T03:24:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEfioUQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nverwer",
                                                                               "createdAt":  "2016-10-04T09:38:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eerohele",
                                                                               "createdAt":  "2016-10-29T05:08:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thorkia",
                                                                               "createdAt":  "2017-06-09T16:17:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alirobe",
                                                                               "createdAt":  "2017-10-26T00:24:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AndrewMorris-2",
                                                                               "createdAt":  "2018-04-25T13:09:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HekiShavik",
                                                                               "createdAt":  "2018-08-21T09:28:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "paulodiogo",
                                                                               "createdAt":  "2019-06-19T21:26:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmoralesv",
                                                                               "createdAt":  "2020-10-21T02:29:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dizzzz",
                                                                               "createdAt":  "2025-08-25T18:43:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "PJungle",
                                           "body":  "+1 \n\nPlease make this happen\n",
                                           "updatedAt":  "2016-02-04T03:24:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1Mjc2MDU3NA==",
                                           "createdAt":  "2016-10-10T22:15:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "We need API proposal. Anyone wants to do that?\n",
                                           "updatedAt":  "2016-10-10T22:15:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MTc0OTgxMg==",
                                           "createdAt":  "2017-04-05T04:18:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBUJTog==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JohnLBevan",
                                                                               "createdAt":  "2017-06-30T10:48:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "daviburg",
                                                                               "createdAt":  "2017-07-20T16:34:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HekiShavik",
                                                                               "createdAt":  "2018-08-21T09:28:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmoralesv",
                                                                               "createdAt":  "2020-10-21T02:29:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "alirobe",
                                           "body":  "Just wanted to add that this is one of the top 5 issues on UserVoice for .net at the moment. I know many devs who **really** need this. Lack of support for v2 has bit me many times in SharePoint and Umbraco. Similarly, I know of developers who have had to use unfamiliar stacks for application integrations (e.g. EDI/BizTalk type projects), simply due to lack of any support here. While I am not really capable of helping, I and many, many others am very keen to see this happen.\r\n\r\nhttps://visualstudio.uservoice.com/forums/121579-visual-studio-ide/category/31481--net\r\nhttps://visualstudio.uservoice.com/forums/121579-visual-studio-ide/suggestions/4450357-implement-xslt-3-0-for-net\r\nhttps://visualstudio.uservoice.com/forums/121579-visual-studio-ide/suggestions/3795831-native-support-for-xpath-2-0-or-xslt-2-0-in-net",
                                           "updatedAt":  "2017-11-15T00:32:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MTc1NDYyMA==",
                                           "createdAt":  "2017-04-05T04:59:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAdkJqQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "alirobe",
                                                                               "createdAt":  "2017-04-06T00:34:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jawn",
                                                                               "createdAt":  "2018-10-17T13:00:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "karelz",
                                           "body":  "@alirobe thanks for the context, that is useful!\r\nTo clarify: the ask on UserVoice is for XSLT 3.0. If we can implement it on top of .NET Standard 2.0, then also Desktop might benefit from it (out-of-band package). If it is not possible or if it is costly, then maybe it is incentive for people to move to .NET Core ;-)\r\n\r\ncc @sepidehMS @krwq \r\n\r\n@danmosemsft maybe something to focus on after 2.0/2.1? You were collecting a list ...",
                                           "updatedAt":  "2017-04-05T04:59:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MTc1NDY1OA==",
                                           "createdAt":  "2017-04-05T04:59:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "cc @terrajobst ",
                                           "updatedAt":  "2017-04-05T04:59:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MjAzNDk1MA==",
                                           "createdAt":  "2017-04-06T00:27:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alirobe",
                                           "body":  "@karelz no problem! I don\u0027t really care where it gets implemented first, I just want a Microsoft API implementation _somewhere..._ I\u0027m sure that there will be enough demand to get that implementation surfaced everywhere. XPath \u0026 XSLT all need updating. XPath alone would be a great start, but they do kind of go together. :)\r\n\r\nShould it be raised as an issue [here](https://github.com/dotnet/standard/issues)? Happy to do that if needed. I\u0027m not familiar with the way MS works on this stuff, but as you\u0027ve said, an a API proposal (followed by test suite) would be an obvious starting point, and actually fairly project-agnostic.\r\n\r\nAlso, thanks so much for taking this seriously! This is something users have been crying for Microsoft to do for over 10 years. Anyone who does this will be a hero to tens of thousands of enterprise developers. I\u0027m smiling just thinking of all the work-around code I will be able to delete! :)",
                                           "updatedAt":  "2017-04-06T04:58:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MjAzNzMzNA==",
                                           "createdAt":  "2017-04-06T00:44:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAdkJsw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AndersMad",
                                                                               "createdAt":  "2017-04-06T10:38:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2017-04-06T14:29:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "timotanner",
                                                                               "createdAt":  "2017-12-11T08:55:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jawn",
                                                                               "createdAt":  "2018-10-17T13:00:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@karelz it\u0027s already on my list. If I understand @krwq it seems it could be done while keeping our XML library netstandard 2.0 compilant. It is just resourcing and it\u0027s great to keep gathering evidence to bubble up the list when 2.0 is out the door.",
                                           "updatedAt":  "2017-04-06T00:44:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MjExNDMzMg==",
                                           "createdAt":  "2017-04-06T09:08:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAIWfHw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2017-04-06T14:29:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karelz",
                                           "body":  "@danmosemsft that\u0027s great news that we already have it on road map!\r\n\r\n@alirobe no need to file issues in .NET Standard -- .NET Standard is basically the common interface/intersection between Desktop (.NET Framework), .NET Core and Xamarin. If this can be implemented on top of .NET Standard, then all platforms will benefit. If it can\u0027t, it will be part of .NET Core future version, waiting for other platforms (Xamarin, Desktop) to catch up or be implemented as out-of-band package for those platforms, before we can add it to .NET Standard.\r\n\r\n\u003e Also, thanks so much for taking this seriously!\r\n\r\nBTW: We always take customer feedback and votes seriously. It sometimes might not look like that due to communication hiccups, or due to technical limitations (e.g. some changes in Desktop are breaking - a big no-no), but rest assured we do take it seriously (I believe it\u0027s true for all Microsoft, but I can at least guarantee it is true on .NET team).\r\nOf course, we can\u0027t in all cases commit to dates when things will be delivered (we have to align work with other priorities and other products, like Desktop - and we prefer to not communicate date when we are not 100% sure to avoid broken promises.\r\nIn some cases we can\u0027t even commit if particular APIs will be delivered ever, especially when they are outside of our team/division ownership -- we have to work with partner teams inside Microsoft to come up with plans, and sometimes that takes time, and requires alignment of business priorities (the reality of large corporations). Nevertheless, in all cases, customers and success of .NET platform are in the center of our mind.",
                                           "updatedAt":  "2017-04-06T09:08:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MjIzNTgzOQ==",
                                           "createdAt":  "2017-04-06T16:51:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@danmosemsft @karelz - If we plan to reuse existing APIs I believe we will need some new switch/enum for tiny behavioral changes around parsing to not break any existing apps. Breaking changes would need to be opt-in. Anything else I believe is currently producing errors and would just start working after work is done. (I\u0027d rather make people be more explicit about which version of XPath they choose)\r\n\r\nAt minimum this will be few new properties (hopefully just one property and perhaps a new XPathExpression constructor). We would need to figure out major breaking changes between XPATH 1.0 \u003c--\u003e 3.0 and figure out advantages and disadvantages of each solution",
                                           "updatedAt":  "2017-04-06T16:51:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MjQ1MjI0Mw==",
                                           "createdAt":  "2017-04-07T06:25:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@krwq this is interesting topic. We hit similar spec incompatibilities in Http space - dotnet/corefx#13036.\r\n\r\nIf you think about this XPath case, can you imagine adding the spec-version choice as argument to constructor? Or is the relevant functionality exposed (also) as static methods?\r\nIf it is via static methods (which is the case of dotnet/corefx#13036), then we either have to add spec-version argument to all of them, or create another class, or something. If that\u0027s the case, I\u0027d like to start some general (in principle) API design discussions for these kinds of spec-versioned APIs -- please let me know where you think it falls. Thanks!",
                                           "updatedAt":  "2017-04-07T06:25:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MjU3OTA4NQ==",
                                           "createdAt":  "2017-04-07T16:08:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@karelz quick look it seems to me that we only have two overloads which take XPath expression: XPathExpression.Compile. I can see couple of options:\r\n- add a static property which would globally change the behavior (I\u0027m not expecting anyone use two different versions of XPath in one project)\r\n- add new overloads - I do not like this approach as many overloads are simply confusing\r\n- a new class which would inherit from XPathExpression (i.e. XPath2Expression; XPath3Expression) which would set the flag per instance and never actually expose it directly\r\n\r\nI don\u0027t think it matters too much which option we choose - most likely people will always want the newest XPath and I\u0027m not actually expecting breaking changes to hit too many people since even spec claims that the breaking changes were made because syntax was confusing.\r\n\r\nNew class approach is probably the most discoverable since intellisense will suggest those options but likely will be a messier implementation with not much benefit.\r\n\r\nIMO static property because it is simplest and you do it once per app with not much downside.",
                                           "updatedAt":  "2017-04-07T16:08:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MjU5NzcyNw==",
                                           "createdAt":  "2017-04-07T17:18:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@krwq \r\n\r\n\u003e  it seems to me that we only have two overloads which take XPath expression: XPathExpression.Compile\r\n\r\nThere are other methods that take XPath, for example `XmlNode.SelectSingleNode` or `System.Xml.XPath.Extensions.XPathSelectElement`.\r\n\r\n\u003e add a static property which would globally change the behavior (I\u0027m not expecting anyone use two different versions of XPath in one project)\r\n\r\nWhat if I use two libraries, one wants to use one version of XPath, the other one another version? I can imagine that happening quite easily, so I don\u0027t think static property would be a good option. (Or will libraries have to set the property before every XPath operation? That could work if the property was thread-static, but would be annoying.)\r\n\r\n\u003e a new class which would inherit from XPathExpression\r\n\r\nHow would that work for other XPath methods? Considering my two examples, `System.Xml.XPath.Extensions.XPathSelectElement` could probably work by creating e.g. `System.Xml.XPath2.Extensions.XPathSelectElement`, since it\u0027s an extension method. But I don\u0027t see how would something similar work for `XmlNode.SelectSingleNode`.",
                                           "updatedAt":  "2017-04-07T17:18:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MjYwMjUxNw==",
                                           "createdAt":  "2017-04-07T17:37:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Agreed with @svick that we need options per library, that\u0027s why we need to design the static APIs carefully ... I\u0027ll dig deeper into this case and will try to start the general API design pattern discussion.\r\n@svick do you have any recommendations? (you seem to be quite familiar with the API surface)",
                                           "updatedAt":  "2017-04-07T17:37:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MjYxNzAyMQ==",
                                           "createdAt":  "2017-04-07T18:33:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@svick - you\u0027re right, those APIs all call XPathExpression.Compile in the end but your point about two different dependencies using different version is basically killing static property option.\r\n\r\nPossibly we could add overloads which take XPathExpression instead of string although I believe that would become quite annoying to use but maybe it wouldn\u0027t be too bad - what do you think?",
                                           "updatedAt":  "2017-04-07T18:33:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5Mzk5NDcwNg==",
                                           "createdAt":  "2017-04-13T19:10:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAQ9Bsw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2018-01-01T14:50:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "svick",
                                           "body":  "\u003e you seem to be quite familiar with the API surface\r\n\r\nNot really, I just googled for XPath on `XmlDocument` and `XDocument` and found the two methods. But I do have some ideas on how the API could look.\r\n\r\nThe current state is:\r\n\r\n```c#\r\nnamespace System.Xml {\r\n    public abstract class XmlNode {\r\n        public XmlNode SelectSingleNode(string xpath);\r\n    }\r\n}\r\n\r\nnamespace System.Xml.XPath {\r\n    public static class Extensions {\r\n        public static XElement XPathSelectElement(this XNode node, string expression);\r\n    }\r\n\r\n    public abstract class XPathExpression {\r\n        public static XPathExpression Compile(string xpath);\r\n    }\r\n}\r\n```\r\n\r\nThere are other methods (like `XPathNavigator.Compile`) and overloads that use XPath; the three methods above should be sufficiently representative, considering it\u0027s an instance method, an extension method and a static method.\r\n\r\n## Option 1: namespaces\r\n\r\nEach version of XPath gets its own namespace:\r\n\r\n```c#\r\nnamespace System.Xml.XPath2 {\r\n    public static class Extensions {\r\n        public static XElement XPathSelectElement(this XNode node, string expression);\r\n        public static XmlNode XPathSelectNode(this XmlNode node, string expression);\r\n    }\r\n\r\n    public abstract class XPathExpression {\r\n        public static XPathExpression Compile(string xpath);\r\n    }\r\n}\r\nnamespace System.Xml.XPath3 {\r\n    …\r\n}\r\n…\r\n```\r\n\r\nAdvantages:\r\n\r\n1. The code using these methods would be very clean.\r\n2. Switching a version of XPath could be mostly done very easily one file at a time just by changing a `using`.\r\n\r\nDisadvantages:\r\n\r\n1. It\u0027s not discoverable: if I have code using XPath 1.0, the IDE is not going to be helpful with figuring out how to switch to XPath 2.0 or that it\u0027s even possible.\r\n2. Instance methods (like `XmlNode.SelectSingleNode`) have to be changed to extension methods and renamed.\r\n3. This approach bloats the API by quite a lot (each version of XPath requires one new namespace, several new classes and many new methods).\r\n\r\n## Option 2: version parameter\r\n\r\nEach XPath method gets new overloads taking `XPathVersion`:\r\n\r\n```c#\r\nnamespace System.Xml {\r\n    public abstract class XmlNode {\r\n        public XmlNode SelectSingleNode(string xpath, XPathVersion version);\r\n    }\r\n}\r\n\r\nnamespace System.Xml.XPath {\r\n    public static class Extensions {\r\n        public static XElement XPathSelectElement(this XNode node, string expression, XPathVersion version);\r\n    }\r\n\r\n    public abstract class XPathExpression {\r\n        public static XPathExpression Compile(string xpath, XPathVersion version);\r\n    }\r\n\r\n    public enum XPathVersion {\r\n        XPath10,\r\n        XPath20,\r\n        …\r\n    }\r\n}\r\n```\r\n\r\nAdvantages:\r\n\r\n1. It\u0027s discoverable: you can find out how to switch from XPath 1.0 to XPath 2.0 by looking at the overloads of the method in the IDE.\r\n2. Adding a new version of XPath requires minimal API surface changes (adding a single `enum` member).\r\n\r\nDisadvantages:\r\n\r\n1. The code using these methods has to specify the version of XPath over and over.\r\n\r\n## Conclusion\r\n\r\nFrom the usage standpoint, I think I prefer option 1, even though it has its issues. I don\u0027t like the option of passing `XPathExpression` around (suggested by @krwq) much: it results in very verbose code and I don\u0027t see how is it better than option 2, since it still means adding new overloads to all XPath methods.",
                                           "updatedAt":  "2017-04-13T19:10:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5NDAxNDI3Ng==",
                                           "createdAt":  "2017-04-13T20:33:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@svick - thanks for the input\r\n\r\nOption 1. Adding a namespace per version - you always need to create new namespace - I do not like that as any changes to XPath standard will make us add new namespace and types.\r\n\r\nI\u0027m not a fan of XPathExpression overload because the syntax will get quite annoying.\r\nAdvantage is that after you add that overload the advantage is that you only add it once per version and no need to further add any overloads. The disadvantage is that string overload would always use XPath1 which will get confusing.\r\n\r\nOption 2. I think it is as good as we can get. - my vote goes for that. Easy to add to any existing places - new version is just a new enum. For future updates we can use existing overload\r\n\r\nNote that this is likely not only that 2 things built on top of XPathExpression.Compile - I\u0027m expecting we will need to add something to XSLT and other places we likely missed although considering that is just adding an overload which takes an enum it doesn\u0027t matter too much if we miss it - anyone can easily contribute and fix any gaps",
                                           "updatedAt":  "2017-04-13T20:35:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5NDM1MDQ2Mw==",
                                           "createdAt":  "2017-04-16T12:57:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAdkKGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jawn",
                                                                               "createdAt":  "2018-10-17T13:02:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "nverwer",
                                           "body":  "I have been using [XPath2.Net](https://github.com/StefH/XPath2.Net) by StefH for a while now. It works very well, although it has some minor disadvantages; the main one (for me) being that it keeps the compiled XPath2 expression and the runtime environment in one object, which is not thread-safe.\r\n\r\nIt (obviously) uses a separate namespace, and I have never experienced that as a problem. I would think that those who know XPath2 (or 3) have no problem using that exclusively. It is almost completely compatible with XPath1. Therefore, I would favor option 1 (adding a namespace). Once you get used to it, you will never want to look back (which a version parameter forces you to do).\r\n\r\nOption 3 could be what XPath2.Net does, add a `XPath2Expression` class, and `XNode.XPath2Select()` etcetera (see the [XPath2.Net documentation](https://github.com/StefH/XPath2.Net)).\r\n\r\nWhat I would very much like to see is the possibility to define variables that can be used in the XPath expression. For example ([XPath2.Net](https://github.com/StefH/XPath2.Net/blob/master/src/XPath2/XPath2Expression.cs)):\r\n`public object Evaluate(IContextProvider provider, IDictionary\u003cXmlQualifiedName, object\u003e vars)`\r\n\r\nAnother feature that I like a lot is the ability to have user-defined functions. In XPath2, these are added to a function table, like\r\n`functionTable.Add(XmlReservedNs.NsXQueryFunc, \"generate-id\", 0, XPath2ResultType.String, (context, provider, args) =\u003e ...);`\r\n\r\nIn my application, I repeat a set of XPath computations often (as in 100,000 times or more), and being able to compile the XPath expression is important for efficiency and performance.",
                                           "updatedAt":  "2017-04-16T12:57:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5Njg0NjQ3MQ==",
                                           "createdAt":  "2017-04-24T23:07:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@svick @nverwer I think we should get to some conclusions with these.\r\n\r\nIMO here is what we should do:\r\n- Create enum XPathVersion as suggested by @svick in one of the options\r\n- Create XPathExpression.Compile which takes new enum\r\n- Any place which takes XPath string as an input we should add more overloads i.e. XPath2Select; XPath2SelectSingleNode etc.\r\n\r\nthat should give us combination which is easy to manage (no new namespace) and easily discoverable (and no need to pass additional arg each time).\r\n\r\nPlease let me know if you like/dislike this. Once we agree on this we should be able to officially propose new APIs and make a plan for doing the feature work.\r\n\r\nPS. @nverwer AFAIK you can define variables for current implementation in .NET too: https://weblogs.asp.net/cazzu/30888 - not super intuitive but definitely possible",
                                           "updatedAt":  "2017-04-24T23:07:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5Njg1OTI0NQ==",
                                           "createdAt":  "2017-04-25T00:39:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@krwq \r\n\r\n\u003e Any place which takes XPath string as an input we should add more overloads i.e. XPath2Select; XPath2SelectSingleNode etc.\r\n\r\nSo, to add a new version of XPath, you would need to add a new overload to all these methods? I\u0027m not sure that\u0027s better than having each set of overloads as extension methods in a separate namespace when it comes to managing it.\r\n\r\nIt would also pollute your completion lists with all these methods you\u0027re never going to use (since most people are likely going to stick with a single version of XPath).",
                                           "updatedAt":  "2017-04-25T00:39:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5Njg2Mzk0MQ==",
                                           "createdAt":  "2017-04-25T01:14:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@svick we would have to create namespace per each class using XPath - if we put extension methods in the xpath itself you would get circular dependency. One option would be to reuse XPathNavigator or IXPathNavigable (I believe those should be independent of XPath version - possibly except what I wrote below) and add extension methods to them instead of each class using XPath and do not touch any of the existing methods - the downside of that would be that in some cases you would need to call CreateNavigator in some cases.\r\n\r\nOther thing we also need to think about is that XPathNavigator.Select(string) is virtual which I\u0027m not sure how it would work once we add more versions. I think I\u0027ll need to experiment with these a little bit and see what can be done and what can\u0027t.",
                                           "updatedAt":  "2017-04-25T01:15:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5NzYwNDI4OA==",
                                           "createdAt":  "2017-04-27T03:51:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alirobe",
                                           "body":  "Can something like this pattern help?\r\nhttps://githubengineering.com/scientist/\r\n",
                                           "updatedAt":  "2017-04-27T03:51:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5NzYwNjgyOA==",
                                           "createdAt":  "2017-04-27T04:13:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAI7wYg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alirobe",
                                                                               "createdAt":  "2017-04-27T04:25:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "krwq",
                                           "body":  "@alirobe we already use similar pattern to compare different XPathNavigator implementations - this is generally a convenient approach when you need to test something really quickly when having two or more similar implementations (in XPathNavigator case it was XPathDocument vs XPath.XDocument vs XPath.XmlDocument - one of them was considered more mature and less likely to have bugs). In this case I believe the risk is much lower since XPath2 and 3 mostly extend existing standard and there is very little which actually changes",
                                           "updatedAt":  "2017-04-27T04:13:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5NzYwNzcyMQ==",
                                           "createdAt":  "2017-04-27T04:20:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alirobe",
                                           "body":  "Cool. Good to know it\u0027s just a \"naming things\" problem. ",
                                           "updatedAt":  "2017-04-27T04:25:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjg4MzI0Mg==",
                                           "createdAt":  "2017-05-20T16:22:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAJpupA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krwq",
                                                                               "createdAt":  "2017-05-22T17:19:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I think we should also consider the impact of adding new code to the size of the applications. AOT toolchains (.NET Native, CoreRT, Xamarin) all use tree shakers to avoid including code which the app won\u0027t use. But in order for these to work, the dependency on the new code has to be discoverable at compile time. This typically means that if the only difference is a value of a parameter the tree shaker will not figure it out. For the most part the tree shakers can\u0027t figure out actual values for parameters. So having the new functionality in either a new namespace or type would be preferable from this point of view.\r\nThis would only apply if we were to implement the new functionality as a separate code base internally. If it would simply extend the existing XPath internals to support the new features it might be next to impossible to avoid the size increase in the apps.",
                                           "updatedAt":  "2017-05-20T16:22:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMzE2NDMxOA==",
                                           "createdAt":  "2017-05-22T17:18:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@vitek-karas would treeshaker be able to figure out those kind of patterns?\r\n```csharp\r\n    enum Foo { a, b }\r\n\r\n    static void Bar(Foo foo)\r\n    {\r\n        if (foo == Foo.a)\r\n        {\r\n            // something pulling deps\r\n        }\r\n        else\r\n        {\r\n            // something pulling more deps\r\n        }\r\n    }\r\n\r\n    static void Main()\r\n    {\r\n        Bar(Foo.a);\r\n    }\r\n```\r\n\r\nIf not could you provide how would you write simple branching so that treeshaker will remove unused path?",
                                           "updatedAt":  "2017-05-22T17:18:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMzE2NzgzNA==",
                                           "createdAt":  "2017-05-22T17:32:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Unfortunately our tree shakers can\u0027t figure out branching like that currently (not 100% for ILLinker, but .NET Native will not for sure). We can obviously tweak the tools, but it gets complicated really fast. Usually the code is not as simple as above, and if the value if passed through a field and so on... we run into trouble.\r\nWhat seems to work is things like:\r\n- The feature is enabled only if the app calls into a specific method, so something like EnableXPath3. Or similarly for a property setter.\r\n- The feature is enabled only if the app uses a specific type, so new XPath3Settings or new XPath3Expression...\r\n\r\nIn all these cases the tree shaker would not include the method/property/type if the app didn\u0027t use the feature. With that we could refactor the framework to then only pull the expensive pieces of code from those methods/properties/types, and let the rest go through a simple interface or something similar.\r\n\r\nThat said, if we plan to build XPath3 as just an extension of the existing XPath engine, this whole tree shaking idea is probably moot, since there would only be one large piece of code (the one XPath engine) and we would need it for all XPath queries regardless of which version they would use.\r\n",
                                           "updatedAt":  "2017-05-22T17:32:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDMzNjgxNA==",
                                           "createdAt":  "2017-05-26T17:07:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "If anyone else would value and use this support, please thumb up the top post to help us prioritize vs. other ports.",
                                           "updatedAt":  "2017-05-26T17:07:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNjE4MzUwOA==",
                                           "createdAt":  "2017-06-05T13:10:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jessehouwing",
                                           "body":  "I\u0027m wondering  whether an assembly level attribute could set the desired version in case none is specified in the apps in case it\u0027s implemented in the current namespaces. If nine is specified, use the 1.0 standard. If your assembly specifies one then for all code executing directly from your assembly will use the version that\u0027s specified. When calling into another assembly which she if it\u0027s a different version, it will use those for methods and types constructed from that context... \r\n\r\nA similar construct could used with a using statement, akin to a Transaction context. That would at least alleviate the need for 100 extra enumerated parameters all over your code to opt into a higher version. \r\n\r\nAs to the discoverability of the extra namespaces / assemblies, a Roslyn rule+fix could solve that. It could also help resolve minor api incompatibilities when going to a higher version. ",
                                           "updatedAt":  "2017-06-05T13:10:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjI1Mjg1OA==",
                                           "createdAt":  "2017-06-30T12:20:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JohnLBevan",
                                           "body":  "Looking at Saxon, they use `setLanguageVersion(\"3.0\")` to determine version.  Assuming there are no copyright / IP issues, it would make sense to keep consistent with their approach, since many will have been using the Saxon engine in lieu of the .Net support, so this makes the switch simpler.\r\n\r\nhttp://www.saxonica.com/documentation9.5/expressions/",
                                           "updatedAt":  "2017-06-30T12:20:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjUyMDcxMw==",
                                           "createdAt":  "2017-07-02T22:24:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndersMad",
                                           "body":  "Please consider making `async` methods - for custom XPath/XSLT functions doing IO etc.",
                                           "updatedAt":  "2017-07-02T22:24:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTYxOTc2Ng==",
                                           "createdAt":  "2017-07-16T16:18:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaelhkay",
                                           "body":  "Great to see that this is on the agenda.\r\n\r\nWhen thinking about an API for XPath 2.0 or XPath 3.1, do bear in mind that the type system is much richer than XPath 1.0. For example, an XPath 2.0 expression can return a sequence of strings, or a sequence of integers; an XPath 3.1 expression can also return a map or an array (or even a function!).  (So an API that\u0027s conceived entirely around the idea of navigating a tree of nodes may be conceptually misaligned.) This applies to input values as much as return values: it\u0027s important to make it easy to supply parameters for XPath expressions (you want to discourage people from building XPath expressions by string concatenation because of the code injection risk).",
                                           "updatedAt":  "2017-07-16T16:18:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNjc2MDc3NA==",
                                           "createdAt":  "2017-07-20T16:37:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAdkKLg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alirobe",
                                                                               "createdAt":  "2017-10-19T20:30:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jawn",
                                                                               "createdAt":  "2018-10-17T13:02:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "daviburg",
                                           "body":  "Newer version support of XSLT would also benefit BizTalk Server and Azure Logic App XML transform, both which build upon .NET\u0027s support of XSLT.",
                                           "updatedAt":  "2017-07-20T16:37:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNjAwNjE0NA==",
                                           "createdAt":  "2017-10-12T02:54:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAOf8hA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alirobe",
                                                                               "createdAt":  "2017-10-19T20:30:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephen-lim",
                                           "body":  "Is this being worked on?",
                                           "updatedAt":  "2017-10-12T02:54:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNjAwODIyNw==",
                                           "createdAt":  "2017-10-12T03:09:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAO-6MA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "AndersMad",
                                                                               "createdAt":  "2017-10-12T06:06:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "alirobe",
                                                                               "createdAt":  "2017-10-18T21:37:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "YuriHoogeweg",
                                                                               "createdAt":  "2017-11-02T11:54:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@stephen-lim not currently being worked on. This seems like a gap that is relatively easy for 3rd party libraries to fill. We would be open to community contributions, if we could agree on an API proposal.\r\n@karelz ",
                                           "updatedAt":  "2017-10-12T03:09:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNjE5MzYxNw==",
                                           "createdAt":  "2017-10-12T16:36:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Here are some facts I collected from XML area experts in June:\r\n* The overall XPath2+XPath3 (+XPath3.1) work was costed as 3y investment. Security will be a big deal (all input is untrusted).\r\n    * There is option to add incrementally useful parts (e.g. DateTime as first-class type, ~100 DateTime functions, RegEx function, built-in functions, primitive types, new data model and versioning), without covering corner cases -- 1y cost.\r\n* XSLT2 support was costed as another 1y.\r\n\r\nGiven all these fairly high costs and the fact 3rd party solutions exist (which seems to be more than reasonable workaround), I think it is more valuable for BCL team to invest into areas which do not have any existing alternatives yet. At least for now.\r\nThat said, if anyone from community is motivated to contribute towards the effort, we could come up with iterative plan how to enable parts of the work in waves in an experimental package, or something like that.",
                                           "updatedAt":  "2017-10-12T16:36:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNjIxMTAzMw==",
                                           "createdAt":  "2017-10-12T17:36:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAdkKSg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TsengSR",
                                                                               "createdAt":  "2017-10-12T19:25:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alirobe",
                                                                               "createdAt":  "2017-10-19T12:52:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kicsiede",
                                                                               "createdAt":  "2017-10-26T02:19:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2018-01-01T14:50:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jawn",
                                                                               "createdAt":  "2018-10-17T13:03:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "stephen-lim",
                                           "body":  "I believe currently there are no 3rd party options available for .NET Core and won\u0027t be for the forseeable future. The most popular one being Saxonica.com for .NET will not work because it relies on IKVM.NET (Java) and IKVM already announced will not be supporting .NET Core. The developer lost faith in .NET and no longer wants to pursue IKVM. [Read his weblog here](http://weblog.ikvm.net/). The other one is Altova.com but it runs on COM so that won\u0027t work.\r\n\r\nXSLT support is one of the most requested [feature (1857 votes) in UserVoice](https://visualstudio.uservoice.com/forums/121579-visual-studio-ide/suggestions/4450357-implement-xslt-3-0-for-net) but it\u0027s disappointing to hear no one is willing to invest in it.\r\n\r\nPlease reconsider.",
                                           "updatedAt":  "2017-10-12T17:36:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNjI0NjE1Nw==",
                                           "createdAt":  "2017-10-12T19:48:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAPuGdw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "alirobe",
                                                                               "createdAt":  "2017-10-18T21:38:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "chrisketelaar",
                                                                               "createdAt":  "2017-11-22T14:09:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "karelz",
                                           "body":  "@stephen-lim thanks for your info and link to UserVoice (I was not aware of that). It is definitely valuable information for us and we take it into account during planning.\r\n\r\nI want to point out that while Jeroen stopped working on IKVM.NET, it does not preclude its port to .NET Core under different name.\r\n\r\nOverall, I think it would be good to find out if any of the 3rd party libraries have intentions to move either to .NET Standard or .NET Core (incl. Saxonica.com).\r\n\r\nRegarding XSLT upvotes - let\u0027s not forget the upvotes started piling up before .NET Core existed, therefore were targeted at .NET Framework, where the workaround exists in the form of 3rd party libraries.\r\nBetter indicator is IMO the number of upvotes on this issue - currently 47, which is pretty high up in CoreFX repo at ([position 4](https://github.com/dotnet/corefx/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc)). Although, I bet that some of those upvotes are not about .NET Core, but about general availability of the APIs also on .NET Framework, but we can ignore that for now.\r\n\r\nWe face a tough decision: The investment is pretty high and therefore it needs to be either deprioritized (as it is now), or it has to come at the cost of investments elsewhere, e.g. DirectoryServices, logging, fast consistent networking stack, CollectibleAssemblies, general performance improvements, just to mention a few.\r\n\r\nJust to clarify: It is still on our backlog (as I hinted in previous reply), it is just not something we plan to prioritize right now. We are open to further feedback and information, and we are open to change our prioritization based on more data.",
                                           "updatedAt":  "2017-10-12T19:48:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNjI1MDg2Nw==",
                                           "createdAt":  "2017-10-12T20:06:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAdkKpQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2017-10-12T20:19:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jawn",
                                                                               "createdAt":  "2018-10-17T13:04:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@stephen-lim are there other options out of the [list posted above](https://stackoverflow.com/questions/1525299/xpath-and-xslt-2-0-for-net/1533114#1533114)?\r\n\r\nFor example, I grabbed the first one, saxon9he-api, and ran [apiport](https://github.com/Microsoft/dotnet-apiport) and it shows as 100% compatible.  I didn\u0027t try using it.\r\n\r\nIn Visual Studio 2017 from August onwards, .NET Core apps will accept nuget packages even if they only claim to support desktop. In such a case it will warn and the onus is on the developer to run apiport and to test their scenarios, but in many cases we\u0027ve found the libraries work fine and just aren\u0027t packaged explicitly for .NET Core 2.0 or .NET Standard 2.0 yet. If and when we find such libraries, we can reach out to help their owners repackage them.",
                                           "updatedAt":  "2017-10-12T20:06:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNjI1MzI0OQ==",
                                           "createdAt":  "2017-10-12T20:16:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephen-lim",
                                           "body":  "@danmosemsft thanks for sharing the list. A few of them are not XSLT processors. If you read the comments posted in that link, you\u0027ll see others have evaluated and none of them will work for .NET Core. ",
                                           "updatedAt":  "2017-10-12T20:16:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNjI1NDgzNQ==",
                                           "createdAt":  "2017-10-12T20:22:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAdkKsg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alirobe",
                                                                               "createdAt":  "2017-10-19T08:19:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aeb-dev",
                                                                               "createdAt":  "2018-01-26T11:42:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jawn",
                                                                               "createdAt":  "2018-10-17T13:04:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "stephen-lim",
                                           "body":  "We don\u0027t necessarily need XSLT 3.0. Is there a possibility to implement XSLT 2.0 as a start? That should reduce the amount of work needed and still bring a lot of improvements. XSLT 1.0, being the first release, is lacking a lot of features that is specifically addressed in 2.0",
                                           "updatedAt":  "2017-10-12T20:22:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNjI1NTQ5NA==",
                                           "createdAt":  "2017-10-12T20:25:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@stephen-lim I see only comments which tried to run it on .NET Core 1.x. .NET Core 2.0 has much larger area surface. I think it is fair to expect they may just work on .NET Core 2.0.\r\n\r\nXSLT2 has the cost of 1y (not sure what the diff of XSLT3 is). And it depends on XPath2, so implementing \"just that\" doesn\u0027t make it suddenly cheaper/easier :(.",
                                           "updatedAt":  "2017-10-12T20:25:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNjI2MTQzMQ==",
                                           "createdAt":  "2017-10-12T20:44:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAOdohA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "alirobe",
                                                                               "createdAt":  "2017-10-18T21:39:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephen-lim",
                                           "body":  "@karelz One of the problems with Saxonica (the only one that is open source) is it relies on IKVM, which is a huge binary because it\u0027s trying to bridge between the Java and .NET world. A lot of folks are hoping for a native implementation in pure .NET for a very long time. Some of the postings go as far back as 2013. This is the [original User Voice request with 802 votes for XSLT 2.0](https://visualstudio.uservoice.com/forums/121579-visual-studio-ide/suggestions/3795831-native-support-for-xpath-2-0-or-xslt-2-0-in-net). Later when XSLT 3.0 came out and MS still haven\u0027t implemented it, a new request was started to push for [XSLT 3.0 (the one with 1857 votes)](https://visualstudio.uservoice.com/forums/121579-visual-studio-ide/suggestions/4450357-implement-xslt-3-0-for-net) going into .NET Core by that time.",
                                           "updatedAt":  "2017-10-12T20:44:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNjMxMDM2NQ==",
                                           "createdAt":  "2017-10-12T23:38:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@stephen-lim does Saxonica rely on all of IKVM, or maybe just on its sub-components? (lightweight RefEmit maybe)",
                                           "updatedAt":  "2017-10-12T23:38:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNjMxMTUzOA==",
                                           "createdAt":  "2017-10-12T23:47:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephen-lim",
                                           "body":  "@karelz  I\u0027m not sure. Here is the published [Saxon API](http://www.saxonica.com/html/documentation/dotnetdoc/) that may shed some light and can provide a basis for future implementation.",
                                           "updatedAt":  "2017-10-12T23:47:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNzc0MTA4Mw==",
                                           "createdAt":  "2017-10-18T22:01:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAsY73A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ErikAnderson3",
                                                                               "createdAt":  "2019-04-01T18:51:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffska",
                                                                               "createdAt":  "2019-07-13T03:24:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "alirobe",
                                           "body":  "@karelz Unforunately, the sort of developers who need XSLT 3.0 and XML stuff done are simply not the sort of people who are typically found on Github giving thumbs to a .NET core issue. \r\nDevelopers use whatever documentation they\u0027re given with regards to XML. I appreciate that almost nobody is an XML enthusiast. It\u0027s not a hobby tech. Despite that, this **issue is the [no. 4](https://github.com/dotnet/corefx/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc) most voted/commented issue here**. \r\n\r\nThis work would be extremely significant. It would unleash _all sorts_ of business application developers to achieve significantly more with their data and processes, and it would have flow-on effects all over Microsoft\u0027s own code-bases. For instance; doing more interesting things with WCF configs, web.configs, XAML, Office OOXML  (docx xslx pptx et al), various web services, and much more. Microsoft should be pushing forward XML \u0026 data interoperability standards with .NET. \r\n\r\nWhen .NET was introduced, XML was most of what drove the application architecture and the vision that came along with it. XML is not just \u0027some library in .NET\u0027. The idea that we would use a third party library for the parsing the piece of connecting infrastructure that symbolizes the entire original intent of .NET doesn\u0027t pass the smell test, at least to me. There\u0027s a reason this is a top UserVoice issue. It\u0027s painful for everyone. This is an opportunity to address that pain, and justify the shift to core.\r\n\r\nThis whole discussion around API versioning, to me, just reflects fear. The entire point of .NET core is surely to _move past the fear_, and fix core issues. I’m not sure one could really get much more core to the vision of .NET than XML. Perhaps I’m wrong, but that’s how I remember .net starting out.\r\n\r\nPlease, get the edge/whatwg team involved, get the spec guys involved, sort the issues out. The failure to deal with this causes fragmentation, and worst of all, it causes Java projects. This is why hundreds and thousands of enterprise integration developers who are living on a burning Oracle/J2EE platform simply can\u0027t use Microsoft. These are surely a prime audience for core. I would love to see Microsoft be a leader in this space, rather than a drag on the industry. Let\u0027s get up to date with standards, and let\u0027s start pushing them forward.",
                                           "updatedAt":  "2017-10-26T00:15:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNzc4ODc2OQ==",
                                           "createdAt":  "2017-10-19T03:22:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAmFnRA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "alirobe",
                                                                               "createdAt":  "2017-10-19T07:33:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "kicsiede",
                                                                               "createdAt":  "2017-10-26T02:32:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "chrisketelaar",
                                                                               "createdAt":  "2017-11-22T14:10:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "congzhangzh",
                                                                               "createdAt":  "2018-03-30T17:55:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jawn",
                                                                               "createdAt":  "2018-10-17T13:05:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ErikAnderson3",
                                                                               "createdAt":  "2019-04-01T18:51:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "stephen-lim",
                                           "body":  "When I glance through the Github and UserVoice, I feel the roadmap decisions are almost arbitrarily based on what\u0027s easy and what\u0027s cool, and not necessarily what\u0027s needed for business. In this case, the people have voted loudly for XSL 2/3 only to be shot down. Why even have a vote in the first place? \r\n\r\nIt reminds me of users asking Microsoft to build a Web standard compliant IE. It took years to arrive and is now too little, too late. Our team has seriously considered moving the development to Java. Only .NET will continue to bleed developers for as long we still have big gaps like this that cannot be ignored.",
                                           "updatedAt":  "2017-10-19T03:22:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNzg0MjUwMQ==",
                                           "createdAt":  "2017-10-19T08:50:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alirobe",
                                           "body":  "@stephen-lim, I have seen a start-up adopt Java + IaaS over Azure as a platform for this reason alone. They created an entire custom crafted stack that basically replicates BizTalk Services. BizTalk would have done everything they wanted, except that the MS stack (admittedly non-core) couldn\u0027t handle XML transform (schematron) requirements, which were built into third party systems backed by legislation. This has been the deciding factor in canning or scaling back so many projects that I know would could have moved the world forward (and netted in licensing profit for MS). Large data interchange contracts are the most heart-breaking point for the stack to let you down. It indicates a proprietary mindset which is surely a thing of the \u002790s at this point.",
                                           "updatedAt":  "2018-01-19T00:01:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzODU3MjcyNQ==",
                                           "createdAt":  "2017-10-23T07:37:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LokiMidgard",
                                           "body":  "A project I was using (Wyamio/Wyam#340) prepares for a shift to netstandard. This is why the discarded saxon and no longer support xslt 2.0. Unfortunatly I need this and for now I can\u0027t update to newer Versions of the project untill I refactored the saxon part out of there code. Fortunatly there code is very modular.\r\n\r\nBut I will still miss the step into netstandard wich I find sad 😢 \r\n",
                                           "updatedAt":  "2017-10-23T07:37:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0MDQ3MjIyMw==",
                                           "createdAt":  "2017-10-30T15:03:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maxtoroq",
                                           "body":  "FYI, I\u0027ve created a [list of XML libraries, frameworks and tools for .NET](https://github.com/maxtoroq/dotnet-xml)",
                                           "updatedAt":  "2017-10-30T15:03:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0MDQ4MDk3NA==",
                                           "createdAt":  "2017-10-30T15:29:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephen-lim",
                                           "body":  "@maxtoroq Thanks for sharing. Exselt is likely dead because it\u0027s been kept in Beta since 2013. I tried contacting them several times and they never replied. XmlPrime is probably out of reach for many because their redistribution license is around USD $6000 per annum. As of now, none of them in the list have announced .NET Core compatibility or have a clear path to do so.",
                                           "updatedAt":  "2017-10-30T15:29:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0MDQ5NjI2OA==",
                                           "createdAt":  "2017-10-30T16:13:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nverwer",
                                           "body":  "In the beginning of 2016, Exselt was still alive. I used it and spoke with its creator, Abel Braaksma at [XML Prague](http://www.xmlprague.cz/day3-2016/). However, I think that the lack of (paid) interest has lowered its priority for Abel. Exselt was used in a workshop at XML Prague, and I thought it was pretty good.",
                                           "updatedAt":  "2017-10-30T16:13:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NDQ0NjU0Ng==",
                                           "createdAt":  "2017-11-15T00:30:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAmFnBQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ErikAnderson3",
                                                                               "createdAt":  "2019-04-01T18:51:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alirobe",
                                           "body":  "@karelz Silverlight/XAML issues, InfoPath issues, Classic -\u003e Modern SharePoint issues, and BizTalk issues, can all be tracked back to lack of this functionality. Again, all Office documents are XML-based. Think of the developer hours wasted creating new experiences and not updating old ones, because of inadequate transformation tooling. The lack of this functionality is not just bad for third party developers. It\u0027s fundamentally hampering the competitiveness of existing Microsoft products.",
                                           "updatedAt":  "2017-11-15T00:33:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDYxMzQ2Nw==",
                                           "createdAt":  "2017-12-31T16:40:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAmFm2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jawn",
                                                                               "createdAt":  "2018-10-17T13:06:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ErikAnderson3",
                                                                               "createdAt":  "2019-04-01T18:50:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  null,
                                           "body":  "Interesting part is: product-wise, Microsoft is the largest consumer of XML serialization in the world, just search how many `*proj` and `*.config` files alone are in existence for MSBuild execution.. then every enterprise product by Microsoft relies on or primarily supports XML data. If IBM and Oracle have heavily invested in XML techs in past two decades to continuously implement new standards, Microsoft should too.\r\n\r\nVS validates every single project file against XML schema, yet .NET doesn\u0027t support six years old XSD Schema 1.1 standard and all the rest of `X`-technologies beyond 1.0 standard. If you are curious what XSD 1.1 + XPath 3 can achieve that 1.0 can\u0027t, take a look at the biggest feature we miss every day and night in .NET -\u003e \"Assertions\": https://blogs.infosupport.com/exploring-cool-new-features-of-xsd-1-1/.\r\n\r\n\u003e The investment is pretty high\r\n\r\nWouldn\u0027t it always be the case? Either it will never happen, or it has to start at some point. And if it has to happen at some point, then I think every team in Microsoft that uses XML-based techs can contribute / share the cost for the effort to implement latest recommendations in CoreFX:\r\n\r\nhttps://www.w3.org/standards/techs/xpath\r\nhttps://www.w3.org/standards/techs/xmlschema",
                                           "updatedAt":  "2017-12-31T16:40:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODY5ODEzNg==",
                                           "createdAt":  "2018-01-18T16:19:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephen-lim",
                                           "body":  "@karelz can you reconsider this request? You got a large number of people requesting for this feature. Please help us push this through.",
                                           "updatedAt":  "2018-01-18T16:19:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODcxMDMwOQ==",
                                           "createdAt":  "2018-01-18T16:57:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOARmn2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "alirobe",
                                                                               "createdAt":  "2018-01-18T23:56:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karelz",
                                           "body":  "@stephen-lim we are aware that this is in top 2-3 most upvoted issues on CoreFX repo and we repeatedly take it into consideration when planning. If/when we decide to invest in the space, we will update the issue.",
                                           "updatedAt":  "2018-01-18T16:57:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODczMTg2Ng==",
                                           "createdAt":  "2018-01-18T18:07:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA3n6TQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alirobe",
                                                                               "createdAt":  "2018-01-18T23:57:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aeb-dev",
                                                                               "createdAt":  "2018-01-26T07:43:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlexejTimonin",
                                                                               "createdAt":  "2018-04-24T12:38:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dhcgn",
                                                                               "createdAt":  "2018-08-08T12:24:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JDziurlaj",
                                                                               "createdAt":  "2019-04-01T20:48:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "esbenbach",
                                                                               "createdAt":  "2019-12-19T05:34:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "remcoros",
                                           "body":  "Another use-case I didn\u0027t found mentioned in this issue, is, with XPath 2 / XSL 2 support, we are able to use schematron (http://schematron.com/) for xml data / business rules validation. \r\n\r\nThere\u0027s a few .net projects who try to fill this gap, but they lack full schematron support or are outdated and no longer maintained.\r\n\r\nWith X* 2+ support, we automatically get support for schematron file transformations.\r\n\r\nXML / XSD / Schematron is heavily used by standards like UBL (Universal Business Language) and derivatives. \r\n\r\nUnderstandably, implementing this is a major undertaking, but having native support in .NET would be a major win in this space for businesses, who now need to rely on something like Saxion, and/or create a bridge between java tools and libs.\r\n",
                                           "updatedAt":  "2018-01-18T18:09:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MDM1ODEwOQ==",
                                           "createdAt":  "2018-12-28T13:19:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hmobius",
                                           "body":  "Adding another comment here because there is still no sign of XPath 3 \\ XSLT 3 implementation post .NET Standard 2.0 release. Any further progress @karelz @danmosemsft ",
                                           "updatedAt":  "2018-12-28T13:19:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MDM4NTM1Ng==",
                                           "createdAt":  "2018-12-28T16:19:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@hmobius we have no work planned here at this time. The libraries team are working on other things this release such as support for winforms/WPF apps, IoT, ML, JSON, UTF8, updated networking stack, lower allocations, etc. I realize this isn\u0027t what you want to hear but we are being transparent about priorities.",
                                           "updatedAt":  "2018-12-28T16:19:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDMyNDA4Mg==",
                                           "createdAt":  "2019-04-05T15:43:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarlosACepeda",
                                           "body":  "Any updates on this implementation of XPath 3.0?",
                                           "updatedAt":  "2019-04-05T15:43:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDMyODEwNw==",
                                           "createdAt":  "2019-04-05T15:55:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAmZsbQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CarlosACepeda",
                                                                               "createdAt":  "2019-04-05T16:07:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karelz",
                                           "body":  "Nope, the above still holds. We currently do not have any plans to invets in this area. It may change post-3.0 or later.",
                                           "updatedAt":  "2019-04-05T15:55:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzM0MTg0Nw==",
                                           "createdAt":  "2019-12-19T05:37:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "esbenbach",
                                           "body":  "\u003e @stephen-lim we are aware that this is in top 2-3 most upvoted issues on CoreFX repo and we repeatedly take it into consideration when planning. If/when we decide to invest in the space, we will update the issue.\r\n\r\nIf this is the top 2-3 most upvoted issues in the corefx repo, then why is it not being prioritized before some of all the other stuff that is OUTSIDE the top voted items. Its a bit weird to say the least. We have been asking for this for year - and I guess we all manage without it (we resort to specific java apps to solve our needs most of the time), but it is a bit annoying to have to work around.",
                                           "updatedAt":  "2019-12-19T05:37:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzM0NjcyMA==",
                                           "createdAt":  "2019-12-19T05:57:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA6806Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "AndersMad",
                                                                               "createdAt":  "2019-12-19T09:56:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LokiMidgard",
                                                                               "createdAt":  "2019-12-19T09:58:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bahaabeih",
                                                                               "createdAt":  "2019-12-19T11:23:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TsengSR",
                                                                               "createdAt":  "2019-12-20T14:15:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CarlosACepeda",
                                                                               "createdAt":  "2019-12-22T05:42:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JDziurlaj",
                                                                               "createdAt":  "2019-12-29T14:50:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alirobe",
                                                                               "createdAt":  "2019-12-30T08:06:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "alirobe",
                                                                               "createdAt":  "2019-12-30T08:06:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DanAtkinson",
                                                                               "createdAt":  "2019-12-30T13:53:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "satrapu",
                                                                               "createdAt":  "2020-02-05T17:29:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "reflectronic",
                                                                               "createdAt":  "2020-02-06T20:28:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  11
                                                         },
                                           "author":  "karelz",
                                           "body":  "Being top voted != guarantee it will be invested into. SW development is more complicated than that and votes are just one angle how to get info about customer needs and prioritize them.\r\nAlso look above for my explanation of associated costs (super high), security risks and ongoing security maintenance cost - in https://github.com/dotnet/corefx/issues/2295#issuecomment-336193617\r\n\r\nIt shouldn\u0027t be a surprise that similar passion and frustration \"why is it not fixed yet\" is expressed on almost every high profile issue and on quite a few 2-3 upvoted issues.\r\n\r\nIncidentally, we reopened the funding discussion again couple of days ago internally (no guarantee how it will end!) ... just demonstrating we are not ingoring feedback/upvotes, it is just sometimes more involved than one would think.",
                                           "updatedAt":  "2019-12-19T05:57:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2OTY2NDU3MA==",
                                           "createdAt":  "2019-12-30T12:23:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AbhishekTripathi",
                                           "body":  "\u003e Given all these fairly high costs and the fact 3rd party solutions exist (which seems to be more than reasonable workaround), I think it is more valuable for BCL team to invest into areas which do not have any existing alternatives yet. At least for now.\r\n\r\nThe only alternative we could use was [Saxon](https://www.saxonica.com/welcome/welcome.xml). It is built in Java and [uses IKVM](https://saxonica.plan.io/issues/2871) to interop with the .net library. Not just it is slow but also that I can\u0027t use the dotnet standard/core for my applications. It is not a show stopper but certainly not the desired state to be in.\r\n",
                                           "updatedAt":  "2019-12-30T12:23:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MjQ4MjYzMw==",
                                           "createdAt":  "2020-02-05T16:10:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RobK410",
                                           "body":  "Seriously this got booted to next year/release? SMH",
                                           "updatedAt":  "2020-02-05T16:10:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MjUxNTUxNw==",
                                           "createdAt":  "2020-02-05T17:17:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I reached out to XmlPrime (https://www.xmlprime.com/xmlprime/) and they confirmed that they have completed .NET Core support now. This is a commercial offering, so this isn\u0027t a solution for everyone. If you try this - it would be great to post your results back here to help others in the community.",
                                           "updatedAt":  "2020-02-05T17:17:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4Mjc3NTMyNA==",
                                           "createdAt":  "2020-02-06T07:37:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TsengSR",
                                           "body":  "\u003e I reached out to XmlPrime (https://www.xmlprime.com/xmlprime/) and they confirmed that they have completed .NET Core support now. This is a commercial offering, so this isn\u0027t a solution for everyone. If you try this - it would be great to post your results back here to help others in the community.\r\n\r\nSlightly off-topic, but now I\u0027m curious (since we\u0027re in urge need of such a thing).\r\n\r\nThe website doesn\u0027t seem updated yet with any new information (or downloads) about that one, but I\u0027d be also interested in information on it, if it has async API what the performance is and if it utilize the new .NET Core APIs such as `Span\u003cT\u003e`/`Memory\u003cT\u003e` and/or pipelines? Especially compared to Saxon.NET (via IKVM on the full .NET Framework) and the .NET XSLT Processor ?\r\n\r\nAnd whens that one supposed to get released to the public?\r\n\r\nP.S. How about a proposal to acquire this guys? :P",
                                           "updatedAt":  "2020-02-06T07:37:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4Mjg3NDAzMg==",
                                           "createdAt":  "2020-02-06T12:03:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JDziurlaj",
                                           "body":  "It seems Microsoft does not invest in APIs where third parties are already providing products in (see SFTP). However I think this is different. XML is a core component used throughout the Microsoft ecosystem, and should be treated as such.",
                                           "updatedAt":  "2020-02-06T12:03:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MjkwMzkyOA==",
                                           "createdAt":  "2020-02-06T13:24:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LokiMidgard",
                                           "body":  "I think XPath 3 also support JSON which would be a good addition to the new JSON API\u0027s.\r\n\r\n---------\r\n\r\nI would also like to see Visual Studio tools supporting higher versions of XSLT.\r\nIn the past I had used a 3rd party library for .NetFramework. But for Visual studio constantly complained about the XSLT files in my project since it only understood XSLT 1.1 *(I think)*.",
                                           "updatedAt":  "2020-02-06T13:24:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4Mjk2NzAzNQ==",
                                           "createdAt":  "2020-02-06T15:45:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA66_8Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DanAtkinson",
                                                                               "createdAt":  "2020-02-06T15:55:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephen-lim",
                                           "body":  "XmlPrime is not usable for many projects. Their licensing is very restrictive and expensive that is unreasonable for many open source projects and small businesses. \r\n\r\nPlease consider adding support for XSL 3 in .NET core. This is a much requested feature. It\u0027s long overdue.",
                                           "updatedAt":  "2020-02-06T15:45:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4Mjk3MTgyNQ==",
                                           "createdAt":  "2020-02-06T15:54:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RobK410",
                                           "body":  "My concern with XmlPrime is their website has not been updated since what appears to be 2018 🤷‍♂ and direct email to their sales email address has gone unanswered so far. If their responsiveness to a potential sale and their attention to detail in regard to their website content is any indication of their product quality, we should all have some reservations about paying for that product.",
                                           "updatedAt":  "2020-02-06T15:54:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4Mjk3MjA5NA==",
                                           "createdAt":  "2020-02-06T15:55:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA68-Ew==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TsengSR",
                                                                               "createdAt":  "2020-02-06T20:54:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "michaelhkay",
                                           "body":  "Actually, XmlPrime\u0027s pricing reflects the cost of producing an advanced piece of technology. Be careful what you ask for: Microsoft\u0027s reluctance to implement these standards is strongly affected by (some) users\u0027 reluctance to pay for them.",
                                           "updatedAt":  "2020-02-06T15:55:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4Mjk3MzA3MQ==",
                                           "createdAt":  "2020-02-06T15:57:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RobK410",
                                           "body":  "What about a cost proposal to work out the code and a \"gofundme\" campaign to pay for it? I think there\u0027s enough demand for it, we all could throw in $100 and this would get done within the year.",
                                           "updatedAt":  "2020-02-06T15:57:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4Mjk3NjU5Nw==",
                                           "createdAt":  "2020-02-06T16:04:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JDziurlaj",
                                           "body":  "All the XML specifications (save for a few by OASIS) were developed by the W3C and were meant to be part of modern web infrastructure such as web browsers. The shift from XHTML probably hampered that effort, but nonetheless people expected this to be core infrastructure (i.e. part of platforms). ",
                                           "updatedAt":  "2020-02-06T16:04:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzA0MjUxMw==",
                                           "createdAt":  "2020-02-06T18:23:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephen-lim",
                                           "body":  "\u003e What about a cost proposal to work out the code and a \"gofundme\" campaign to pay for it? I think there\u0027s enough demand for it, we all could throw in $100 and this would get done within the year.\r\n\r\nI\u0027m happy to fund the $100 but how do you know it\u0027s enough to get developed? I think XSL is not a simple implementation. It takes a lot of hard work to build.",
                                           "updatedAt":  "2020-02-06T18:23:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzEwOTI0Mw==",
                                           "createdAt":  "2020-02-06T21:03:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBUJT-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2020-02-06T21:31:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RobK410",
                                                                               "createdAt":  "2020-02-06T22:11:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmoralesv",
                                                                               "createdAt":  "2020-10-21T02:31:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "hmobius",
                                           "body":  "It seems pretty clear given how long this issue has been around that it really isn\u0027t a priority for Microsoft, and that this needs to be an open source effort. It\u0027s also clear that implementing XSLT is not a trivial thing. There is a list of projects [here](https://github.com/maxtoroq/dotnet-xml#xpath-xquery-and-xslt) but the only one we might be interested in is a form of [XPath2.net](https://github.com/StefH/XPath2.Net). Saxon is open source but only in Java so maybe there is scope for a port to .NET rather than the transpiled .NET version currently available. The plus side at least is that the test suite is available as XSLT, XPath (and XQuery) are clearly defined standards.",
                                           "updatedAt":  "2020-02-06T21:03:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzEzNjcxOA==",
                                           "createdAt":  "2020-02-06T22:13:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RobK410",
                                           "body":  "\u003e \u003e What about a cost proposal to work out the code and a \"gofundme\" campaign to pay for it? I think there\u0027s enough demand for it, we all could throw in $100 and this would get done within the year.\r\n\u003e \r\n\u003e I\u0027m happy to fund the $100 but how do you know it\u0027s enough to get developed? I think XSL is not a simple implementation. It takes a lot of hard work to build.\r\n\r\nIt most certainly would be an effort to get public support for this. I would think you would start with the individuals who up-voted this issue on Microsoft\u0027s user voice site. From there, spreading the initiative among .NET user groups, etc. I would think 1,000 devs/companies offering $100 each would do the trick to get the effort underway and to a working beta release. 🤷‍♂ ",
                                           "updatedAt":  "2020-02-06T22:13:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzEzODQyMg==",
                                           "createdAt":  "2020-02-06T22:17:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBUJUOg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "vladyslav-vasyliev",
                                                                               "createdAt":  "2020-04-28T12:53:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Dennis-Petrov",
                                                                               "createdAt":  "2020-04-28T13:39:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "shakyjake",
                                                                               "createdAt":  "2020-06-02T11:14:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "ehsan-keshavarzian",
                                                                               "createdAt":  "2020-06-25T10:06:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "JDziurlaj",
                                                                               "createdAt":  "2020-09-09T11:28:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "TWolverson",
                                                                               "createdAt":  "2020-10-10T17:21:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmoralesv",
                                                                               "createdAt":  "2020-10-21T02:32:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "@michaelhkay \r\n\r\n\u003e Be careful what you ask for: Microsoft\u0027s reluctance to implement these standards is strongly affected by (some) users\u0027 reluctance to pay for them.\r\n\r\nI don\u0027t think that\u0027s true. Our primary motivations for doing platform features are:\r\n\r\n1. Is this a core concern for many users?\r\n2. Would adding it to the platform benefit the feature?\r\n3. Is this a feature that we likely need as a building block for other platform features?\r\n\r\nI\u0027m not aware of cases where pricing of external components have influenced our decision; however, the availability of widely used external libraries (commercial or not) does influence our assessment of how beneficial/harmful our involvement would be.\r\n\r\nIn the case of XSLT 3, I think our interest (or lack of thereof) is informed by the direction of the web/client industry as a whole. Right now, I can\u0027t see a world where supporting it would likely become a priority for us.",
                                           "updatedAt":  "2020-02-06T23:35:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzE1NDUyMA==",
                                           "createdAt":  "2020-02-06T23:04:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RobK410",
                                           "body":  "Thanks Immo. So that sums it up gang that\u0027s it\u0027s likely not going to happen. OSS initiative will be the only solution here. Getting technical expertise and developers to dedicate the effort to implement something similar to Saxon or XmlPrime is a relatively large undertaking.",
                                           "updatedAt":  "2020-02-06T23:04:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzE4NDYwMg==",
                                           "createdAt":  "2020-02-07T00:58:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBUJUSg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmoralesv",
                                                                               "createdAt":  "2020-10-21T02:32:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "Pretty much, which is why I\u0027m closing this.",
                                           "updatedAt":  "2020-02-07T00:58:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzE4NDY0OA==",
                                           "createdAt":  "2020-02-07T00:59:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBUJUZA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TsengSR",
                                                                               "createdAt":  "2020-02-07T06:44:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HekiShavik",
                                                                               "createdAt":  "2020-02-07T08:32:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmoralesv",
                                                                               "createdAt":  "2020-10-21T02:33:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "jeffska",
                                           "body":  "@terrajobst \r\n\u003e In the case of XSLT 3, I think our interest (or lack of thereof) is informed by the direction of the web/client industry as a whole. Right now, I can\u0027t see a world where supporting it would likely become a priority for us.\r\n\r\nI think that\u0027s been my frustrations for a long time. In my view XSLT is much less useful for the \"traditional\" web/client activities than it is for a more generalized standard data transformation framework. I\u0027ve used XSLT in several project for that type of role, to good effect. However, the restriction of only having  XSLT 1.0 as part of the standard environment limits capabilities and further adoption for those other applications. It\u0027s a catch-22.\r\n\r\nI\u0027ve been waiting for XSLT \u003e 1.0 for over 10 years now. Sounds like it\u0027s still not going to happen in standard libraries.",
                                           "updatedAt":  "2020-02-07T00:59:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzE5NzE1Nw==",
                                           "createdAt":  "2020-02-07T01:51:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBUJUmw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ridercz",
                                                                               "createdAt":  "2020-02-10T22:23:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vladyslav-vasyliev",
                                                                               "createdAt":  "2020-04-28T12:37:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Dennis-Petrov",
                                                                               "createdAt":  "2020-04-28T13:39:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ehsan-keshavarzian",
                                                                               "createdAt":  "2020-06-25T10:08:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmoralesv",
                                                                               "createdAt":  "2020-10-21T02:34:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "stephen-lim",
                                           "body":  "\u003e @michaelhkay\r\n\u003e \r\n\u003e \u003e Be careful what you ask for: Microsoft\u0027s reluctance to implement these standards is strongly affected by (some) users\u0027 reluctance to pay for them.\r\n\u003e \r\n\u003e I don\u0027t think that\u0027s true. Our primary motivations for doing platform features are:\r\n\u003e \r\n\u003e 1. Is this a core concern for many users?\r\n\u003e 2. Would adding it to the platform benefit the feature?\r\n\u003e 3. Is this a feature that we likely need as a building block for other platform features?\r\n\u003e \r\n\u003e I\u0027m not aware of cases where pricing of external components have influenced our decision; however, the availability of widely used external libraries (commercial or not) does influence our assessment of how beneficial/harmful our involvement would be.\r\n\u003e \r\n\u003e In the case of XSLT 3, I think our interest (or lack of thereof) is informed by the direction of the web/client industry as a whole. Right now, I can\u0027t see a world where supporting it would likely become a priority for us.\r\n\r\n\r\nIf this is the determining factor, then we can argue the case:\r\n\r\n1. Is this a core concern for many users? \r\nYes, XSLT 2+ was one of the top 3 most requested feature back when it was voted through the VisualStudio UserVoice. See [archive link has 2817 votes \"Implement XSLT 3.0 for .NET\"](https://web.archive.org/web/20190321120101/https://visualstudio.uservoice.com/forums/121579-visual-studio-ide/category/31481--net)\r\n\r\n2. Would adding it to the platform benefit the feature? \r\nAbsolutely, there are no available 3rd party open source, free or otherwise affordable solution for open source projects and small businesses. XSLT 2 or 3 brings a wealth of improvement that fixes the shortcomings of XSLT 1.0 increasing productivity.\r\n\r\n3. Is this a feature that we likely need as a building block for other platform features? \r\nYes, XSLT is a standard.  It is widely used in:\r\n\r\n- [Sharepoint](http://mundrisoft.com/tech-bytes/how-to-customize-list-view-web-part-using-custom-xslt-in-sharepoint-2013/)\r\n- SQL Server has native support for XML column and XPath query. One can even write managed code to return transformed XML using XSL.\r\n- Many popular CMS like Umbraco, DNN still use XSLT to transform XML data for display\r\n- Many large enterprise still use XML (probably more than JSON) and need ability to manipulate the XML easily.\r\n\r\n\r\n",
                                           "updatedAt":  "2020-02-07T01:51:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzIxNzUxNg==",
                                           "createdAt":  "2020-02-07T03:28:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@stephen-lim  your examples show that XML and XSLT are widely used but not v3 specifically.",
                                           "updatedAt":  "2020-02-07T03:28:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzIyMjUxNA==",
                                           "createdAt":  "2020-02-07T03:53:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBUJU0w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HekiShavik",
                                                                               "createdAt":  "2020-02-07T08:34:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ridercz",
                                                                               "createdAt":  "2020-02-10T22:23:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Dennis-Petrov",
                                                                               "createdAt":  "2020-04-28T13:39:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ehsan-keshavarzian",
                                                                               "createdAt":  "2020-06-25T10:10:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmoralesv",
                                                                               "createdAt":  "2020-10-21T02:34:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "stephen-lim",
                                           "body":  "\u003e @stephen-lim your examples show that XML and XSLT are widely used but not v3 specifically.\r\n\r\nSQL server partially supports Xpath v2. There isn\u0027t wide support for v3 because Windows/ASP.NET software like Sharepoint, DNN, Umbraco ultimately rely on the .NET libraries, which only supports XSLT v1. On the other hand, you can find many more examples of v2 and v3 support in Java apps.\r\n\r\nThe short story is thousands of developers have been asking Microsoft to support v2 for the last 10 years. At one point, Microsoft said they would strongly consider implementing XSLT 2, but that stopped as soon as they started working on LINQ and XQuery. Fast forward today, the v3 spec is out and the hope is that Microsoft should add support for v3, if not v2.\r\n",
                                           "updatedAt":  "2020-02-07T03:53:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzI2NzczMg==",
                                           "createdAt":  "2020-02-07T07:26:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBUJVCw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "satrapu",
                                                                               "createdAt":  "2020-02-07T07:31:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HekiShavik",
                                                                               "createdAt":  "2020-02-07T08:33:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JDziurlaj",
                                                                               "createdAt":  "2020-02-07T11:54:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffska",
                                                                               "createdAt":  "2020-02-07T13:59:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ehsan-keshavarzian",
                                                                               "createdAt":  "2020-06-25T10:12:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmoralesv",
                                                                               "createdAt":  "2020-10-21T02:35:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "TsengSR",
                                           "body":  "\u003e @stephen-lim your examples show that XML and XSLT are widely used but not v3 specifically.\r\n\r\nWell, to be honest, XSLT 2.0 and XPath 2.0 would be a **huge** improvement already. XSLT 1.0 is very very limiting  (major blockers being lack of user defined functions - You just have templates, but these can\u0027t be used as part of XPath Expressions), same applies for XPath 2.0 (Lot of functions missing, no wildcard for Namespaces (i.e. no `/*:elementName``)l\r\n\r\nSure, XPath 3.0 and XSTL 3 would be awesome (i.e. exception throwing and try/catch from XSLT). But XSTL 1.0 is just seriously lacking to much features to really consider it. \r\n\r\nI\u0027m rather tempted to extract the whole XSLT processor as an Java-based Microservice, rather than falling back to XSLT 1.0/XPath 1.0 (Saxon.NET via IKVM.NET on .NET Framework is not an option)",
                                           "updatedAt":  "2020-02-07T07:27:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzI5ODk2NQ==",
                                           "createdAt":  "2020-02-07T09:08:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaelhkay",
                                           "body":  "As far as Saxonica is concerned, we are eagerly awaiting technical details of what Microsoft is proposing to offer under the \"Java interoperability\" feature promised in the .NET 5 announcement; that will determine our forwards path for Saxon on .NET. If anyone knows of any details that have been published since the May 2019 announcement, please share!",
                                           "updatedAt":  "2020-02-07T09:08:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzQ4MzE0OA==",
                                           "createdAt":  "2020-02-07T16:26:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RobK410",
                                           "body":  "Regarding Saxon and .NET Core, IKVM is obviously shelved. Why not take the runtimes, decomiple using something like DotPeek to C#, and refactor to .NET Core, then implement Saxon to use those libs? I\u0027m sure the IKVM folk wouldn\u0027t mind considering they\u0027ve abandoned ship?",
                                           "updatedAt":  "2020-02-07T16:27:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzUxNjYxMg==",
                                           "createdAt":  "2020-02-07T17:30:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaelhkay",
                                           "body":  "We\u0027re looking at a number of options (which is why we really want to know what .NET 5 will offer), but obviously we\u0027re very keen to avoid forking the source code.",
                                           "updatedAt":  "2020-02-07T17:30:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzY2NjE2NQ==",
                                           "createdAt":  "2020-02-08T00:00:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TsengSR",
                                           "body":  "\u003e Regarding Saxon and .NET Core, IKVM is obviously shelved. Why not take the runtimes, decomiple using something like DotPeek to C#, and refactor to .NET Core\r\n\r\nNot sure what you mean. IKVM.NET is open source... there is just no one to take it over. IKVM.NET author already [offered](http://weblog.ikvm.net/2017/04/21/TheEndOfIKVMNET.aspx) others to take over the project under the condition it\u0027s renamed to something else. \r\n\r\nBut not sure how much sense that makes anyways, since (as far as I know) it required a lot of changes for each new JRE version, which now ship bi-annually rather than once every 3-5 years",
                                           "updatedAt":  "2020-02-08T00:00:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4Mzg4MTMzNQ==",
                                           "createdAt":  "2020-02-09T19:09:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hmobius",
                                           "body":  "@michaelhkay Completely understand about forking the source code but I for one would be very interested in working on a port around XSLT\\XPath in .NET using the new features we have in C#. I\u0027m curious if rather than forking the source code, we could fork \\ port the code for the test suite and work from there. ",
                                           "updatedAt":  "2020-02-09T19:09:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4Mzg4NTUzNA==",
                                           "createdAt":  "2020-02-09T19:50:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA7KrJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hmobius",
                                                                               "createdAt":  "2020-02-09T21:06:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RobK410",
                                                                               "createdAt":  "2020-02-10T14:36:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "michaelhkay",
                                           "body":  "There are good test suites for XSLT 3.0, XPath 3.1, and XQuery 3.1 on GitHub, and we\u0027re happy to share our test drivers. The bulk of the test material is in XML files and is 100% portable; creating a test driver to run the tests on a particular platform is a fairly trivial exercise. The only other requirement is API testing, which is specific to each platform/API/language-binding. But the source code for the product itself is 600K lines of Java so that\u0027s a major undertaking.",
                                           "updatedAt":  "2020-02-09T19:50:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NDEwNDcxNw==",
                                           "createdAt":  "2020-02-10T12:44:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JDziurlaj",
                                           "body":  "I would assume the problem with SAXON isn\u0027t so much the source code being in Java, as it having dependencies on third party Java libraries, which may be hard to decouple.",
                                           "updatedAt":  "2020-02-10T12:44:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NDExODcyOA==",
                                           "createdAt":  "2020-02-10T13:20:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaelhkay",
                                           "body":  "No, that\u0027s not the case. Saxon\u0027s dependencies on third party (non-JDK) libraries are very easily isolated and decoupled. Where such dependencies exist (e.g on the ICU-J library) you can either port the third party code as if it were part of Saxon, or you can make do without it.",
                                           "updatedAt":  "2020-02-10T13:20:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NDIyNjIyMw==",
                                           "createdAt":  "2020-02-10T17:04:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kant2002",
                                           "body":  "\u003e There are good test suites for XSLT 3.0, XPath 3.1, and XQuery 3.1 on GitHub, and we\u0027re happy to share our test drivers. The bulk of the test material is in XML files and is 100% portable; creating a test driver to run the tests on a particular platform is a fairly trivial exercise. The only other requirement is API testing, which is specific to each platform/API/language-binding. But the source code for the product itself is 600K lines of Java so that\u0027s a major undertaking.\r\n\r\nWhere the test cases? Can you give a link? ",
                                           "updatedAt":  "2020-02-10T17:04:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NDIyODk1Nw==",
                                           "createdAt":  "2020-02-10T17:09:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaelhkay",
                                           "body":  "https://github.com/w3c/xslt30-test (XSLT 3.0)\r\nhttps://github.com/w3c/qt3tests (XQuery 3.1, XPath 3.1)\r\nhttps://github.com/w3c/xsdtests (XSD 1.1)\r\n\r\nIn each case the test suites also include tests for earlier versions, labelled as such in the test metadata.",
                                           "updatedAt":  "2020-02-10T17:09:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NjcwNTg5MA==",
                                           "createdAt":  "2020-02-16T13:24:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "+1, spec suites are the way to go for realistic and reliable conformance testing. I have some experience with writing spec suite adapter for Sass\u0027 and YAML\u0027s .NET implementations. If the porting effort transpires out in open, I am willing to contribute. :)",
                                           "updatedAt":  "2020-02-16T13:24:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NDQ4NTk2Ng==",
                                           "createdAt":  "2020-03-04T12:14:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MicahEdwards",
                                           "body":  "\u003e I reached out to XmlPrime (https://www.xmlprime.com/xmlprime/) and they confirmed that they have completed .NET Core support now. This is a commercial offering, so this isn\u0027t a solution for everyone. If you try this - it would be great to post your results back here to help others in the community.\r\n\r\nA .Net Core trial version of XmlPrime 4.1.3 is now available as a signed NuGet package. \r\n\r\nJust send me a message or drop us an email ( info@xmlprime.com ) saying what area you would like to test it in and we will send you a download link.\r\n\r\nMicah Edwards.\r\nXmlPrime.\r\n\r\n  ",
                                           "updatedAt":  "2020-03-04T12:14:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NDQ5NjA5OQ==",
                                           "createdAt":  "2020-03-04T12:37:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBUJVeQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ridercz",
                                                                               "createdAt":  "2020-03-04T21:13:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Dennis-Petrov",
                                                                               "createdAt":  "2020-04-28T13:41:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rkajbaf",
                                                                               "createdAt":  "2020-09-16T01:29:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmoralesv",
                                                                               "createdAt":  "2020-10-21T02:37:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "DanAtkinson",
                                           "body":  "@MicahEdwards What are the costs for the full product? You don\u0027t display them online. Some pages say that I can purchase licenses online but then when I go to those pages, I\u0027m told that I can\u0027t purchase it online.\r\n\r\nSo I guess the simple question is where can I see a breakdown of your prices? I shouldn\u0027t need to contact you to get these - they should just be available on your website.",
                                           "updatedAt":  "2020-03-04T12:38:36Z"
                                       }
                                   ],
                         "totalCount":  99
                     },
        "title":  "System.Xml.XPath to support XPath 2, XPath 3 and their XSLT variants",
        "labels":  [
                       "api-suggestion",
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/27100",
        "createdAt":  "2018-08-09T13:22:32Z",
        "number":  27100,
        "author":  "jgilbert2017",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCuNWTg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stevendarby",
                                            "createdAt":  "2023-02-02T22:11:44Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-02-06T13:21:14Z",
        "body":  "`XPathNavigator.SelectSingleNode()` calls `Evaluate()` under the hood which computes the entire node set that matches the xpath specifier only to return the first item.\r\n\r\nFor example, if I\u0027m parsing html and do `SelectSingleNode(\".//table\")` to get the first table element, it winds up traversing and selecting ALL the `table` elements in the document only to return the first item.\r\n\r\nThis is obviously really, really bad from both a memory and cpu performance perspective.  The current design does a LOT of extra work to build the matching node set subsequent to the first match being found.\r\n\r\nA better design could make use of a lazy iterator or add `*First()` methods that short circuit after a match is found.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVJVL3Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxODUyMjM3MA==",
                                           "createdAt":  "2018-09-04T21:22:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@jgilbert2017 this is an interesting issue, would you be interested in fixing this? Do you perhaps have some numbers on how much we could gain by fixing it?\r\n\r\nbtw. does this affect all XPathNavigator implementations or a specific one? (we got navigators for following implementations: XPathDocument, XDocument, XmlDocument)",
                                           "updatedAt":  "2018-09-04T21:23:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxODUyODYwMw==",
                                           "createdAt":  "2018-09-04T21:46:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jgilbert2017",
                                           "body":  "@krwq the performance gains depend on what kind of xpath specifiers are used.  i\u0027ve avoided calls like above and easily seen an order of magnitude or more speed improvement on a single search equating to overall parsing speedups of ~4x.  but that\u0027s for my application.\r\n\r\nbased on looking at the code it would seem this is a universal issue for all navigators.\r\n\r\nit would be great if this could be fixed in .net.  i\u0027ve invested a lot of time on performance and the navigator is a sore spot.\r\n\r\nultimately, the best solution i\u0027ve found is to avoid xpath altogether and i\u0027ve built an iterator based solution where i can do things like \r\n\r\n```\r\nvar node = nav.Descendants(\"h4\").FirstOrDefault(e =\u003e e.Value == \"Section Name\")\r\n\t?.Siblings(\"b\").FirstOrDefault(e =\u003e e.Value == \"Field:\").TextSiblings().FirstOrDefault();\r\n```\r\n\r\ni\u0027m not sure if this has been done before and i am reinventing the wheel but it got the job done and performs pretty well.\r\n\r\nit would be nice if there were some LINQ to XPATH thing-a-majig to take the above and make it a lot less wordy.",
                                           "updatedAt":  "2018-09-04T21:46:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxODUzNTM4OQ==",
                                           "createdAt":  "2018-09-04T22:14:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "Thank you @jgilbert2017, 4x sound really nice. I think short-circuiting simple paths or converting list to an iterator sounds reasonable to me (iterator probably would mean better improvement overall).\r\nI currently don\u0027t have cycles to pick this up but can help moving this forward if you\u0027re interested in doing the work. Is this something you would be interested in (and got time for)?",
                                           "updatedAt":  "2018-09-04T22:14:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxODg3MDUwMg==",
                                           "createdAt":  "2018-09-05T20:29:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jgilbert2017",
                                           "body":  "@krwq it\u0027s possible.  what kind of financial support is available for contributors?",
                                           "updatedAt":  "2018-09-05T20:29:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxODg3Mzg1Nw==",
                                           "createdAt":  "2018-09-05T20:40:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@jgilbert2017 I don\u0027t know if we do that since no one has ever asked me about that 😄 cc: @karelz @danmosemsft",
                                           "updatedAt":  "2018-09-05T20:41:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxODg3NDc4OA==",
                                           "createdAt":  "2018-09-05T20:43:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jgilbert2017",
                                           "body":  "you\u0027re not telling me you work for free?  if so, i\u0027d like to hire you!!! :grin:",
                                           "updatedAt":  "2018-09-05T20:44:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxODg3NzQ2Mg==",
                                           "createdAt":  "2018-09-05T20:52:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "I\u0027m an employee, we prioritize issues to meet employer\u0027s business goals :-) In open source world you usually get product for free and contribute for free - I\u0027ll ask if there is any SWAG/bounty for contributions. I currently know only about security bug bounties reported through secure@microsoft.com if that is something you\u0027d be interested in",
                                           "updatedAt":  "2018-09-05T20:52:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxODg3ODY1Nw==",
                                           "createdAt":  "2018-09-05T20:56:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jgilbert2017",
                                           "body":  "MS is pulling all this code back into .NET framework right?",
                                           "updatedAt":  "2018-09-05T20:56:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxODg3OTI1Mg==",
                                           "createdAt":  "2018-09-05T20:58:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@jgilbert2017 we periodically pass through changes to .NET Core and consider them for .NET Framework port. When we consider whether to port we look at various factors including cost, risk, and customer benefit. So, it is not guaranteed.",
                                           "updatedAt":  "2018-09-05T20:58:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxODg3OTkzOA==",
                                           "createdAt":  "2018-09-05T21:00:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jgilbert2017",
                                           "body":  "hi dan.  are you able to guage whether this issue is important to fix for MS?   thanks for your time.",
                                           "updatedAt":  "2018-09-05T21:00:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxODkwMjU3OQ==",
                                           "createdAt":  "2018-09-05T22:31:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@jgilbert2017 I can\u0027t say whether a fix for this would get ported. ",
                                           "updatedAt":  "2018-09-05T22:31:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxODkwMzExNg==",
                                           "createdAt":  "2018-09-05T22:33:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jgilbert2017",
                                           "body":  "@danmosemsft ok.  my interest is in .net framework rather than core so if at some point MS determines it\u0027s a worthwhile thing to work on i guess we can pick it back up.  until then i\u0027ve got my own work around.",
                                           "updatedAt":  "2018-09-05T22:33:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UTr6b",
                                           "createdAt":  "2023-02-02T22:15:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stevendarby",
                                           "body":  "Is there any appetite for fixing this? I think this may be contributing to this issue: https://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/2164\r\n\r\nI\u0027ve had a look at the code and not sure where to start. So really hoping this is considered by the .NET team :)",
                                           "updatedAt":  "2023-02-02T22:15:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UlTG3",
                                           "createdAt":  "2023-02-06T13:16:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "We currently haven\u0027t considered fixing this. @stevendarby you can start by writing/finding test and start debugging likely somewhere here: https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.Xml/src/System/Xml/XPath/XPathNavigator.cs#L1129\r\n\r\nI\u0027m not sure what the fix will be but guessing it will need to tell XPath compiler to generate slightly better code: possibly there is already existing utility which does that or if not to make it generate some sort of lazy enumerator rather than producing a list. You\u0027ll need to debug and see what it\u0027s currently doing and figure out what\u0027s easiest/best approach. Might be worth looking also at the Evaluate code path - possibly there is some low-hanging fruit in there...",
                                           "updatedAt":  "2023-02-06T13:16:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UlUvd",
                                           "createdAt":  "2023-02-06T13:19:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "Also I\u0027d play around with searching for workaround (i.e. changing your XPath expression to pick just first element - I\u0027m not sure if that will help but might be worth to play around) - also if that workaround works it might hint you in how to change the code for permanent solution.\r\n\r\nAnother thing is that you should check if it\u0027s selecting which is actually slow - it might be that compiling expression is slow and you might be able to use directly API which takes compiled expression: https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.Xml/src/System/Xml/XPath/XPathNavigator.cs#L1129",
                                           "updatedAt":  "2023-02-06T13:21:14Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "XPathNavigator.SelectSingleNode() is non-performant.  Need to short circuit after match found.",
        "labels":  [
                       "enhancement",
                       "area-System.Xml",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/28218",
        "createdAt":  "2018-12-16T21:17:55Z",
        "number":  28218,
        "author":  "mklement0",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-30T00:44:33Z",
        "body":  "`System.Xml.XmlDocument.Save()`, when given a file path to write to, unexpectedly creates UTF-8 encoded files _with BOM_ if the document\u0027s XML declaration has an `encoding=\"UTF-8\"` attribute.\r\n\r\n(By contrast, the absence of the `encoding` attribute or absence of an XML declaration altogether causes a BOM-_less_ UTF-8 file to be created, as expected.)\r\n\r\nRepro in PowerShell Core (on any supported platform; PowerShell\u0027s `[xml]` cast instantiates a `System.Xml.XmlDocument` from the specified XML string):\r\n\r\n```powershell\r\n([xml] \u0027\u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e\u003cfoo /\u003e\u0027).Save(\"$HOME/t.xml\")\r\nGet-Content -AsByteStream $HOME/t.xml | Select-Object -First 3\r\n```\r\n\r\nThe above yields:\r\n\r\n```none\r\n239\r\n187\r\n191\r\n```\r\n\r\nwhich are the byte values of the UTF-8 BOM (`0xef 0xbb 0xbf`)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSD_02g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NzY4ODM2OA==",
                                           "createdAt":  "2018-12-16T23:57:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Whta does it do in .NET Framework?",
                                           "updatedAt":  "2018-12-16T23:57:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NzcwMTA1NA==",
                                           "createdAt":  "2018-12-17T02:05:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mklement0",
                                           "body":  "@danmosemsft: \r\n\r\nIt does the **same as in .NET Core;** you can verify that by running the equivalent command in _Windows PowerShell_ (which requires substituting `-Encoding Byte` for `-AsByteStream`):\r\n\r\n```powershell\r\n([xml] \u0027\u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e\u003cfoo /\u003e\u0027).Save(\"$HOME/t.xml\")\r\n# Same output as in .NET Core.\r\nGet-Content -Encoding Byte $HOME/t.xml | Select-Object -First 3\r\n```\r\n\r\n**which it should never have done**, given that .NET\u0027s (sensible) default since v1 has  been BOM-_less_ UTF-8, and given that other platforms do _not_ expect UTF-8-encoded files to have a (pseudo-)BOM.\r\n\r\n(Related: dotnet/runtime#27258)\r\n",
                                           "updatedAt":  "2018-12-17T02:10:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NzcxMjkzNg==",
                                           "createdAt":  "2018-12-17T03:35:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Question is how breaking it would be to change.",
                                           "updatedAt":  "2018-12-17T03:35:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NzcxNDI1Nw==",
                                           "createdAt":  "2018-12-17T03:45:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mklement0",
                                           "body":  "@danmosemsft:\r\n\r\nIn the abstract:\r\n\r\nAny code that later consumes `.Save()`-created files and assumes that the _absence_ of a BOM implies something _other_ than UTF-8 is hypothetically affected.\r\n\r\n.NET code (that doesn\u0027t specify an encoding explicitly anyway) when reading such files is _not_ affected.\r\n\r\nI can\u0027t tell you what that means in terms of real-world impact.\r\n\r\nIf, sadly, it turns out that changing this would be too much of a breaking change, this historical wart _must be documented_.",
                                           "updatedAt":  "2018-12-17T16:56:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NzkxNzU4Mg==",
                                           "createdAt":  "2018-12-17T16:56:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mklement0",
                                           "body":  "@danmosemsft: \r\n\r\nRe real-world impact with respect to _PowerShell_: \r\n\r\nPowerShell _Core_ now defaults to UTF-8 when reading a file without a BOM, so it wouldn\u0027t be affected.\r\n\r\nWindows PowerShell defaults to the legacy \"ANSI\" code page, so code reading a BOM-less UTF-8 file _as a text file_ with `Get-Content` without also specifying `-Encoding Utf8` _is_ affected; however, loading the file via `($xml = New-Object System.Xml.XmlDocument).Load(\"/path/to/file.xml\")`is again not affected.",
                                           "updatedAt":  "2018-12-17T16:56:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NzkyMzQ3Nw==",
                                           "createdAt":  "2018-12-17T17:13:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "It looks like it was this way in v2.0 of .NET Framework. I guess XML area owners should make a call on this one.",
                                           "updatedAt":  "2018-12-17T17:13:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NDE5MzY4MQ==",
                                           "createdAt":  "2019-01-14T22:58:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB_QBIw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "torbenj",
                                                                               "createdAt":  "2021-10-21T10:34:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "krwq",
                                           "body":  "I do not know the Powershell syntax for this but from Xml perspective this behavior looks correct and expected. If you are able to specify the encoding as: `new UTF8Encoding(false)` (see: https://docs.microsoft.com/en-us/dotnet/api/system.text.utf8encoding.-ctor?view=netframework-4.7.2#System_Text_UTF8Encoding__ctor_System_Boolean_ for more details) then I believe the BOM should disappear. Here is the example in C#:\r\n\r\n```csharp\r\n    XmlDocument doc = ...; // construct your doc here\r\n    XmlWriterSettings settings = new XmlWriterSettings();\r\n    settings.Encoding = new UTF8Encoding(false);\r\n    XmlWriter writer = XmlWriter.Create(stream, settings);\r\n    doc.Save(writer);\r\n```\r\n\r\nI\u0027m closing this as by design, if you can still see BOM after setting the encoding like this please reopen.",
                                           "updatedAt":  "2019-01-14T22:58:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NDI1MjY0NQ==",
                                           "createdAt":  "2019-01-15T03:14:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mklement0",
                                           "body":  "@krwq: \r\n\r\nPowerShell is incidental to this issue; I merely used it to demonstrate the problem succinctly.\r\n\r\nTo demonstrate the issue using C#:\r\n\r\n```csharp\r\nusing System.IO;\r\n\r\nvar xmlDom = new System.Xml.XmlDocument();\r\nxmlDom.LoadXml(\"\u003c?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?\u003e\u003cfoo\u003ebär\u003c/foo\u003e\");\r\nxmlDom.Save($@\"{Environment.GetFolderPath(Environment.SpecialFolder.UserProfile)}/t.xml\");\r\n```\r\n\r\nIf you inspect the resulting `t.xml` file in the user\u0027s profile (home) folder, you\u0027ll see that it - unexpectedly - has a UTF-8 \"BOM\" (Unicode signature).\r\n\r\nThat you can _work around_ the issue by using an explicit BOM-less encoding, as in your code, is beside the point.\r\n\r\nThe point is that .NET, since v1, has defaulted to BOM-less UTF-8.\r\n\r\n_Explicitly_ opting to use UTF-8 _as part of the XML declaration_ shouldn\u0027t change that behavior, yet it currently does: if you omit the `encoding=\"UTF-8\"` part of the declaration, you _do_ get a BOM-less UTF-8 file. There is no reason to act differently with `encoding=\"UTF-8\"` present, and doing so hurts portability.\r\n\r\nTherefore, please reopen this issue.\r\n\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2019-01-15T03:18:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NDYxMjQ5MA==",
                                           "createdAt":  "2019-01-16T01:09:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@mklement0 if you do not specify declaration then you are not intentional in how do you want the xml writer to behave.\r\nLong time ago we chose that the default will be utf-8 without BOM. Since we have behaved like that for a very long time it would be very breaking to change it right now.\r\n\r\nIf you use encoding in the declaration then you are intentional and asking XML writer to write utf-8. The most portable way to write text to a file is to add BOM.\r\n\r\nImagine you write declaration which suggests UTF-16 encoding. Should we write BOM now or not? Should we specially treat UTF-8? If you don\u0027t write encoding you maybe have meant ASCII with some old code page? Note that the declaration itself is also encoded in the encoding it talks about so parser have to have some idea about encoding earlier so writing BOM is the right thing.",
                                           "updatedAt":  "2019-01-16T01:09:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NDYyNDQwOQ==",
                                           "createdAt":  "2019-01-16T02:09:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mklement0",
                                           "body":  "@krwq:\r\n\r\n\u003e Long time ago we chose that the default will be utf-8 without BOM.\r\n\r\nIndeed. Thank {supreme being of your choice}. There is absolutely no reason to change that, and it certainly isn\u0027t what this issue is proposing.\r\n\r\n\u003e The most portable way to write text to a file is to add BOM.\r\n\r\n**Not at all: on Unix-like platforms, native utilities neither expect nor know how to handle a UTF-8 \"BOM\"** - they treat the BOM as _data_, which obviously causes problems: see https://en.wikipedia.org/wiki/UTF-8#Byte_order_mark\r\n\r\n.NET wisely chose UTF-8 as the _default_, in the _absence_ of a BOM (Unicode signature); in effect, it is what the Unix world has done as well, while not even recognizing the UTF-8 pseudo-BOM.\r\n\r\nTo summarize:\r\n\r\n* From a cross-platform perspective, writing a \"BOM\" for UTF-8-encoded data should be avoided.\r\n\r\n* From an internal-consistency perspective, exhibiting different behavior if what is the implied default is specified explicitly should be avoided.\r\n\r\nTherefore, please reopen this issue.",
                                           "updatedAt":  "2019-01-16T02:10:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NjUxOTY2NQ==",
                                           "createdAt":  "2019-01-22T18:56:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mklement0",
                                           "body":  "@krwq: Please don\u0027t ignore this issue: **Writing  UTF-8 files _with BOM_ is a serious impediment to portability and at odds with .NET\u0027s default**.\r\nIn the Windows-only days this may have been less of a concern, but in .NET Core it matters.\r\n\r\nThere is no reason for the implied and explicit use of UTF-8 to act differently; specifically, there should be no difference in behavior between these two declarations, and they both should result in BOM-_less_ UTF-8.\r\n\r\n```\r\n\u003c?xml version=\"1.0\"?\u003e\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n```\r\n\r\nUTF-8 is the effective _default_ character encoding for XML, and \r\nwhile the [W3C XML Recommendation _allows_ a BOM with UTF-8](https://www.w3.org/TR/xml/#charencoding) (and every compliant XML parser should therefore support it):\r\n\r\n* a UTF-8 BOM is never _needed_.\r\n\r\n* there a good reasons _not_ to write one (as stated):\r\n   * Portability: Unix[-heritage] utilities won\u0027t process the BOM correctly - note that while, ideally, XML files should always be handled by an XML _parser_, in practice they are often read as _text files_.\r\n  * Internal consistency: Merely making what is the default encoding explicit should not change the behavior.\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2019-01-22T18:56:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NjU5NzkzNA==",
                                           "createdAt":  "2019-01-22T23:05:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@mklement0 I understand your frustration here but this is one of the changes which is fairly risky: there is very little to gain by changing this - if we shipped 1st version of .NET now I\u0027d probably use UTF-8 without BOM as well - but we have already shipped like that for many years - people start moving from full framework and this would be another difference in behavior which is not needed and might possibly be a blocker for someone. I\u0027ve seen tinier changes to break people than that - the most stupid example is that hash code will be different. The worst case scenario is that some other tool has bad heuristics for detecting encoding and causing xml parser to think the file is incorrect.\r\n\r\nBOM is needed for parsers which support encodings such as UTF-16 so that implementation can distinguish between little and big endian, UTF-8 or other encoding without guessing. Linux is UTF-8 oriented so UTF-16 or other encoding do not matter in that world (and that is really good and I like it as well) and arguably we should not care about them as well. In .NET world both UTF-8 and UTF-16 matter equally (especially string is UTF-16 by default which even maybe puts us slightly toward UTF-16) - we really care about back compat here and considering as you said w3c recommendation is that every xml parser should support BOM there is simply no reason for us to risk breaking someone\u0027s app during upgrade/migration.\r\n\r\nI.e.: `\u003c` is 3C in hex and same for UTF-8 representation. For UTF-16LE the hex representation is `3C 00` so now you can imagine that parser sees `\u003c` after which it may assume i.e. ASCII/UTF8, then instead of expected `?` it sees null character and reports error while previously it saw BOM and detected encoding correctly.",
                                           "updatedAt":  "2019-01-22T23:07:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NjYwNTk1NA==",
                                           "createdAt":  "2019-01-22T23:29:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mklement0",
                                           "body":  "@krwq:\r\n\r\nIf your decision is to live with this historical wart for fear of breaking existing code, please at least _document_ it.\r\n\r\nThis decision makes the following points moot, but just to clarify:\r\n\r\n---\r\n\r\n\r\n\u003e BOM is needed for parsers which support encodings such as UTF-16 so that implementation can distinguish between little and big endian, UTF-8 or other encoding without guessing.\r\n\r\nThe XML standard specifies that a UTF-8 BOM _may_ be present, whereas a UTF-16 BOM _must_ be present.\r\n\r\nThis means that in the absence of a BOM UTF-8 is _implied_ - no guessing needed.\r\n\r\n\u003e In .NET world both UTF-8 and UTF-16 matter equally (especially string is UTF-16 by default which even maybe puts us slightly toward UTF-16)\r\n\r\nFor _file_ I/O, .NET has always defaulted to _BOM-less_ UTF-8; the in-memory representation of strings is irrelevant.\r\n\r\n",
                                           "updatedAt":  "2019-01-22T23:29:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MDczMzU4MQ==",
                                           "createdAt":  "2019-02-05T17:43:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAi3uow==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krwq",
                                                                               "createdAt":  "2019-02-06T21:42:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mklement0",
                                           "body":  "I\u0027ve created a docs issue: https://github.com/dotnet/docs/issues/10326",
                                           "updatedAt":  "2019-02-05T17:43:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MTE5OTIyMg==",
                                           "createdAt":  "2019-02-06T21:42:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "Thanks @mklement0 ",
                                           "updatedAt":  "2019-02-06T21:42:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MDUwMDMyNA==",
                                           "createdAt":  "2021-03-04T10:14:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "Per conversation in https://github.com/dotnet/dotnet-api-docs/issues/2377 I\u0027m reopening this issue",
                                           "updatedAt":  "2021-03-04T10:14:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MTc0Mjc0NQ==",
                                           "createdAt":  "2021-03-05T22:08:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mklement0",
                                           "body":  "Taking a look at: \r\n\r\nhttps://github.com/dotnet/runtime/blob/79ae74f5ca5c8a6fe3a48935e85bd7374959c570/src/libraries/System.Private.Xml/src/System/Xml/Dom/XmlDocument.cs#L1372-L1390\r\n\r\nThe behavior comes down to `System.Text.Encoding.GetEncoding(\"utf-8\")` (or case variants therefore) returning an UTF-8 encoding instance _with BOM_, just like `System.Text.Encoding.UTF8` does.\r\n\r\nIdeally, `System.Text.Encoding.GetEncoding(\"utf-8\")` would return a _BOM-less_ encoding, which would implicitly fix the problem at hand.\r\n\r\nI\u0027m mentioning this on the off chance that such a change would be considered - it certainly has the potential to break existing code.\r\n\r\nOtherwise, the plan is to simply do:\r\n\r\n```csharp\r\nreturn String.Equals(value, \"utf-8\", StringComparison.OrdinalIgnoreCase) ? \r\n            new System.Text.UTF8Encoding(encoderShouldEmitUTF8Identifier: false) : \r\n            System.Text.Encoding.GetEncoding(value);\r\n```",
                                           "updatedAt":  "2021-03-05T22:08:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjU2MDQ0Ng==",
                                           "createdAt":  "2021-03-08T08:08:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBiwM7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mklement0",
                                                                               "createdAt":  "2021-03-09T12:33:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "krwq",
                                           "body":  "@mklement0 I\u0027d move the \"utf-8\" check to the inner `if` and that\u0027s a fine fix as long as:\r\n\r\n```csharp\r\n    XmlDocument doc = ...; // construct your doc here\r\n    XmlWriterSettings settings = new XmlWriterSettings();\r\n    settings.Encoding = Encoding.UTF8;\r\n    XmlWriter writer = XmlWriter.Create(stream, settings);\r\n    doc.Save(writer);\r\n```\r\n\r\nwill cause the BOM to show up.\r\n\r\nPlease make sure to add test case with both of those when creating a fix",
                                           "updatedAt":  "2021-03-08T08:08:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NDUxNjc4Mw==",
                                           "createdAt":  "2021-03-09T22:02:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sharwell",
                                           "body":  "\u003e The most portable way to write text to a file is to add BOM.\r\n\r\nI agree with this. Many times I\u0027ve had to fix documents that ended up with replacement characters due to the lack of a BOM. I\u0027ve never had to fix replacement characters in a document that was written with a BOM.\r\n\r\nThe W3C guidance for BOM was written with the assumption that all systems are defaulting to Unicode encodings. When this is true, the BOM does not help. However, this is _not_ the case worldwide, and the BOM provides the best available approach to avoiding misinterpretation of file contents. If we have an API that historically wrote a BOM, we should preserve that API in that form.\r\n\r\n/cc @buyaa-n my recommendation is to not change the behavior of this API",
                                           "updatedAt":  "2021-03-09T22:03:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NDU0NjI4Nw==",
                                           "createdAt":  "2021-03-09T22:33:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mklement0",
                                           "body":  "@sharwell, the default behavior of `.Save()` in the _absence_ of a `charset` attribute - _BOM-less_ UTF-8 - contradicts your premise. As argued before, there is no justification for modifying this behavior based on the _incidental_ aspect of making that _default_ behavior _explicit_ via `charset=\"UTF-8\"`. Any compliant XML parser should assume UTF-8 _by default_ and, certainly, also if `charset=\"UTF-8\"` is present - there is _no_ need for a BOM.",
                                           "updatedAt":  "2021-03-09T22:33:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NDU4MTI5OQ==",
                                           "createdAt":  "2021-03-09T23:07:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBlSTqg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mklement0",
                                                                               "createdAt":  "2021-03-09T23:08:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "buyaa-n",
                                                                               "createdAt":  "2021-03-29T23:12:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "krwq",
                                           "body":  "@sharwell I initially felt similar push back and I\u0027ve also had to deal with weird encoding issues in the past but at the same time:\r\n- I do not expect any reasonable XML parser to break on a UTF-8 document with explicit charset set to UTF-8\r\n- The proposed behavior feels more consistent\r\n- It does in fact make integrating with Unix tools better\r\n- Suggested solution has a workaround if someone needs old behavior back\r\n\r\non the other hand there is:\r\n- possibility of people porting older code to newer version of the framework which could possibly break on some odd XML parser\r\n\r\nHaving said that I do not feel super strongly about fixing this issue but it feels better to me to fix it than to document the inconsistency as normal behavior.",
                                           "updatedAt":  "2021-03-09T23:07:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NDYwNTcxNQ==",
                                           "createdAt":  "2021-03-09T23:33:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sharwell",
                                           "body":  "\u003e I do not expect any reasonable XML parser to break on a UTF-8 document with explicit charset set to UTF-8\r\n\r\nNote that my concerns are generally not related to XML parsers. They are related to text editors used for opening XML files for editing.",
                                           "updatedAt":  "2021-03-09T23:33:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NDYwNzYwOA==",
                                           "createdAt":  "2021-03-09T23:35:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mklement0",
                                           "body":  "@sharwell, text editors that do _not_ default to UTF-8 are going the way of the dodo, for good reasons.",
                                           "updatedAt":  "2021-03-09T23:35:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NTA4MjEyOA==",
                                           "createdAt":  "2021-03-10T08:31:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBlSerw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mklement0",
                                                                               "createdAt":  "2021-03-10T09:25:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "buyaa-n",
                                                                               "createdAt":  "2021-03-29T23:52:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "krwq",
                                           "body":  "@sharwell I\u0027ve personally have seen more people having issues with BOM than lack of it because they didn\u0027t understand it. IMO there is currently more tools/editors which will default to UTF-8 than than tools which default to different encoding than UTF-8 and will have issues displaying it but I do not have specific metrics. Unix tools are good example - they all assume UTF-8 without BOM.\r\n\r\nLooking at the stats: https://w3techs.com/technologies/history_overview/character_encoding/ms/y it made more sense to not fix this issue couple years ago than now. IMO we should try to unify encoding on the internet and UTF-8 seems most dominant at the moment. If any tool can\u0027t open it or doesn\u0027t default to UTF-8 it\u0027s probably a misdesign as per stats it won\u0027t be able to correctly handle majority of the documents on the web.",
                                           "updatedAt":  "2021-03-10T08:31:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NTkyNTYzNA==",
                                           "createdAt":  "2021-03-10T19:07:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBlSevA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "buyaa-n",
                                                                               "createdAt":  "2021-03-29T23:52:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mklement0",
                                           "body":  "@sharwell, to add to @krwq\u0027s comments:\r\n\r\nConcern about Unix tools choking on a UTF-8 BOM was indeed what motivated me to create this issue in the first place.\r\n\r\nAs for your text-editor concerns: I\u0027ve looked at the behavior of popular editors available on Windows with respect to BOM-less UTF-8:\r\n\r\nAtom, Sublime Text 3,  Visual Studio Code, Notepad++, Notepad:\r\n* Correctly read BOM-less UTF-8-encoded files.\r\n* Create BOM-less UTF-8 files by default (for Notepad, this was different up to at least Windows 7; not sure about Windows 8.1).\r\n\r\n(When reading a BOM-less file:\r\n* Atom and Visual Studio Code blindly assume UTF-8 and therefore potentially misread files.\r\n* Notepad, Notepad++, and Sublime Text 3 fall back to ANSI encoding, presumably on encountering invalid-as-UTF-8 bytes in the input.)\r\n\r\n",
                                           "updatedAt":  "2021-03-10T19:07:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTgyODc3Mw==",
                                           "createdAt":  "2021-03-30T01:10:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBlS3gw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mklement0",
                                                                               "createdAt":  "2021-03-30T01:25:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "\u003e /cc @buyaa-n my recommendation is to not change the behavior of this API\r\n\r\nI was convinced to update this when we were [triaging this in the doc repo](https://github.com/dotnet/dotnet-api-docs/issues/2377#issuecomment-789952254), with the above comments, I convinced even more that we need this 😄 \r\n\r\ntagging @GrabYourPitchforks if he has any concerns\r\n\r\n",
                                           "updatedAt":  "2021-03-30T01:10:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTk2MTk4NA==",
                                           "createdAt":  "2021-03-30T06:52:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCfjSKg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "buyaa-n",
                                                                               "createdAt":  "2021-03-30T17:38:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mklement0",
                                                                               "createdAt":  "2022-05-31T21:56:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "I agree with the comment at https://github.com/dotnet/runtime/issues/28218#issuecomment-791742745. The default `Encoding.UTF8` singleton should be no-BOM, which would the behavior of creating a fresh `new UTF8Encoding()` instance. The BOM is a crutch that may have had a purpose 20 years ago when .NET was first introduced, but nowadays it doesn\u0027t serve a legitimate purpose.\r\n\r\nNote: _readers_ may still want to honor BOM if present. Changing `Encoding.UTF8` to be no-BOM by default should only affect _writers_, telling them not to emit the BOM when generating new documents.\r\n\r\nOf course, changing `Encoding.UTF8` to be no-BOM may ripple throughout the .NET ecosystem, so a change of that magnitude would need to go through some kind of compat review. But I\u0027d be strongly supportive of it under \"standards-compliant\" pillar that we have set for ourselves.",
                                           "updatedAt":  "2021-03-30T06:52:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EFfAe",
                                           "createdAt":  "2022-05-31T15:29:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sksk571",
                                           "body":  "When switching from .NET5 to .NET6 the following code starts emitting BOM together with encoding in XML declaration. I assume this happens because XmlSerializer defaults to Encoding.UTF8 which has BOM.\r\n\r\n```\r\nusing System.Text;\r\nusing System.Xml.Serialization;\r\n\r\nvar obj = new object();\r\nXmlSerializer serializer = new XmlSerializer(obj.GetType());\r\n\r\nvar stream = new MemoryStream();\r\nserializer.Serialize(stream, obj);\r\n```",
                                           "updatedAt":  "2022-05-31T15:29:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ggtfu",
                                           "createdAt":  "2022-07-13T09:20:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eOkadas",
                                           "body":  "Hi, when switching to NET 6 (from net 5 and netcore 3.1) we get the BOM for UTF8 added to our XML outputs.\r\n\r\nSetting the UTF8Encoding to `encoderShouldEmitUTF8Identifier=false`, using the XmlWriterSettings or otherwise doesn\u0027t work.\r\n[see fiddle with the workaround working in 4.7.2](https://dotnetfiddle.net/A3GYfv)\r\n```XML\r\n\u003c?xml version=\"1.0\"?\u003e\r\n\u003cTest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" /\u003e\r\n```\r\n  [see fiddle with the workaround NOT working in Net6]( https://dotnetfiddle.net/g1hS06)\r\n\r\n```XML\r\n﻿\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\u003cTest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" /\u003e\r\n```",
                                           "updatedAt":  "2022-07-13T09:30:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IP_Ta",
                                           "createdAt":  "2022-08-11T15:32:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEiXaw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "benmountain",
                                                                               "createdAt":  "2023-09-05T10:19:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yieldOnly",
                                                                               "createdAt":  "2024-02-28T16:38:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mklement0",
                                                                               "createdAt":  "2025-01-30T01:57:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "krwq",
                                           "body":  "I think we should remove BOM and default to UTF-8 for all XML APIs. I think these days BOM is rather unexpected and UTF-8 is what most of the web uses",
                                           "updatedAt":  "2022-08-11T15:32:14Z"
                                       }
                                   ],
                         "totalCount":  30
                     },
        "title":  "System.Xml.XmlDocument.Save() unexpectedly creates UTF-8 files *with BOM*",
        "labels":  [
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1409",
        "createdAt":  "2019-02-09T10:10:39Z",
        "number":  1409,
        "author":  "Metalnem",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-12T03:24:01Z",
        "body":  "**DataContractSerializer.ReadObject** sometimes throws **ArgumentNullException**. Here\u0027s the full program that reproduces this:\r\n\r\n```csharp\r\nusing System.IO;\r\nusing System.Runtime.Serialization;\r\nusing System.Text;\r\n\r\nnamespace CoreFX.Fuzz\r\n{\r\n  public class Program\r\n  {\r\n    [DataContract]\r\n    private class Obj { }\r\n\r\n    public static void Main(string[] args)\r\n    {\r\n      var xml = @\"\u003cProgram.Obj xmlns=\"\"http://schemas.datacontract.org/2004/07/CoreFX.Fuzz\"\"\u003e\u003cs:\";\r\n      var bytes = Encoding.UTF8.GetBytes(xml);\r\n      var stream = new MemoryStream(bytes);\r\n      var serializer = new DataContractSerializer(typeof(Obj));\r\n\r\n      serializer.ReadObject(stream);\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe stack trace:\r\n\r\n```\r\nException has occurred: CLR/System.ArgumentNullException\r\nAn unhandled exception of type \u0027System.ArgumentNullException\u0027 occurred in System.Private.Xml.dll: \u0027The empty string \u0027\u0027 is not a valid local name.\u0027\r\n   at System.Xml.XmlConvert.VerifyNCName(String name, ExceptionType exceptionType)\r\n   at System.Xml.XmlConvert.VerifyNCName(String name)\r\n   at System.Xml.XmlUTF8TextReader.VerifyNCName(String s)\r\n   at System.Xml.XmlUTF8TextReader.ReadQualifiedName(PrefixHandle prefix, StringHandle localName)\r\n   at System.Xml.XmlUTF8TextReader.ReadStartElement()\r\n   at System.Xml.XmlUTF8TextReader.Read()\r\n   at System.Runtime.Serialization.XmlReaderDelegator.Read()\r\n   at System.Runtime.Serialization.ClassDataContract.ReadXmlValue(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context)\r\n   at System.Runtime.Serialization.XmlObjectSerializerReadContext.ReadDataContractValue(DataContract dataContract, XmlReaderDelegator reader)\r\n   at System.Runtime.Serialization.XmlObjectSerializerReadContext.InternalDeserialize(XmlReaderDelegator reader, String name, String ns, DataContract\u0026 dataContract)\r\n   at System.Runtime.Serialization.XmlObjectSerializerReadContext.InternalDeserialize(XmlReaderDelegator xmlReader, Type declaredType, DataContract dataContract, String name, String ns)\r\n   at System.Runtime.Serialization.DataContractSerializer.InternalReadObject(XmlReaderDelegator xmlReader, Boolean verifyObjectName, DataContractResolver dataContractResolver)\r\n   at System.Runtime.Serialization.XmlObjectSerializer.ReadObjectHandleExceptions(XmlReaderDelegator reader, Boolean verifyObjectName, DataContractResolver dataContractResolver)\r\n   at System.Runtime.Serialization.XmlObjectSerializer.ReadObject(XmlDictionaryReader reader)\r\n   at System.Runtime.Serialization.XmlObjectSerializer.ReadObject(Stream stream)\r\n```\r\n\r\nThe environment:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.103\r\n Commit:    8edbc2570a\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.103/\r\n```\r\n\r\nFound via [SharpFuzz](https://github.com/Metalnem/sharpfuzz).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvOMqtQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MjA1MjI0MA==",
                                           "createdAt":  "2019-02-09T15:13:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Questionable choice of exception for XML to throw on malformed XML.",
                                           "updatedAt":  "2019-02-09T15:13:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2OTA5MDY1OQ==",
                                           "createdAt":  "2019-03-04T01:43:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "This type is actually internal to DCS.",
                                           "updatedAt":  "2019-03-04T01:43:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3OTY2NzI0OA==",
                                           "createdAt":  "2019-04-03T21:33:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Lxiamail",
                                           "body":  "We should throw a different exception other than ArgumentNullException. However, due to the issue is not reported by real world scenario, this is lower priority issue.",
                                           "updatedAt":  "2019-04-03T21:33:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5Mjc1NzAyNw==",
                                           "createdAt":  "2020-02-28T22:24:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenBonikowsky",
                                           "body":  "Simple fix, low priority scenario.\r\n@imcarolwang Could you add this as something for your team to try fixing.",
                                           "updatedAt":  "2020-02-28T22:24:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MjY3NTcwMw==",
                                           "createdAt":  "2020-07-01T22:24:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HongGit",
                                           "body":  "@imcarolwang is this still on your radar?",
                                           "updatedAt":  "2020-07-01T22:24:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzMxNDMwNQ==",
                                           "createdAt":  "2020-07-03T03:07:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "imcarolwang",
                                           "body":  "I\u0027ve checked this one but my \"repro\" only get part of the exception stack which doesn\u0027t throw ArgumentException, it\u0027s like below.  I\u0027ve run the repro project targeting .NETCore2.1, 2.2, 3.1, all get the same result.\r\n\r\n\u003e System.Runtime.Serialization.SerializationException\r\n\u003e   HResult=0x8013150C\r\n\u003e   Message=Error in line 1 position 74. Expecting element \u0027Program.Obj\u0027 from namespace \u0027http://schemas.datacontract.org/2004/07/NetCoreApp1\u0027.. Encountered \u0027Element\u0027  with name \u0027Program.Obj\u0027, namespace \u0027http://schemas.datacontract.org/2004/07/CoreFX.Fuzz\u0027.\r\n\u003e   Source=System.Private.DataContractSerialization\r\n\u003e   StackTrace:\r\n\u003e    at System.Runtime.Serialization.DataContractSerializer.InternalReadObject(XmlReaderDelegator xmlReader, Boolean verifyObjectName, DataContractResolver dataContractResolver)\r\n\u003e    at System.Runtime.Serialization.XmlObjectSerializer.ReadObjectHandleExceptions(XmlReaderDelegator reader, Boolean verifyObjectName, DataContractResolver dataContractResolver)\r\n\u003e    at System.Runtime.Serialization.XmlObjectSerializer.ReadObject(XmlDictionaryReader reader)\r\n\u003e    at System.Runtime.Serialization.XmlObjectSerializer.ReadObject(Stream stream)\r\n",
                                           "updatedAt":  "2020-07-03T03:07:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNTg2MzIyNQ==",
                                           "createdAt":  "2020-10-08T22:50:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HongGit",
                                           "body":  "@Metalnem  is this still an issue with you?",
                                           "updatedAt":  "2020-10-08T22:50:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43_Qp2",
                                           "createdAt":  "2021-10-09T17:16:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@imcarolwang I just pasted this code in and ran it against latest 6.0 bits:\r\n```\r\ndan@danmose3:~/1$ ../dotnet/dotnet run\r\nUnhandled exception. System.ArgumentNullException: The empty string \u0027\u0027 is not a valid local name. (Parameter \u0027name\u0027)\r\n   at System.Xml.XmlConvert.VerifyNCName(String name, ExceptionType exceptionType)\r\n   at System.Xml.XmlConvert.VerifyNCName(String name)\r\n   at System.Xml.XmlUTF8TextReader.VerifyNCName(String s)\r\n   at System.Xml.XmlUTF8TextReader.ReadQualifiedName(PrefixHandle prefix, StringHandle localName)\r\n   at System.Xml.XmlUTF8TextReader.ReadStartElement()\r\n   at System.Xml.XmlUTF8TextReader.Read()\r\n   at System.Runtime.Serialization.XmlReaderDelegator.Read()\r\n   at System.Runtime.Serialization.ClassDataContract.ReadXmlValue(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context)\r\n   at System.Runtime.Serialization.XmlObjectSerializerReadContext.ReadDataContractValue(DataContract dataContract, XmlReaderDelegator reader)\r\n   at System.Runtime.Serialization.XmlObjectSerializerReadContext.InternalDeserialize(XmlReaderDelegator reader, String name, String ns, Type declaredType, DataContract\u0026 dataContract)\r\n   at System.Runtime.Serialization.XmlObjectSerializerReadContext.InternalDeserialize(XmlReaderDelegator xmlReader, Type declaredType, DataContract dataContract, String name, String ns)\r\n   at System.Runtime.Serialization.DataContractSerializer.InternalReadObject(XmlReaderDelegator xmlReader, Boolean verifyObjectName, DataContractResolver dataContractResolver)\r\n   at System.Runtime.Serialization.XmlObjectSerializer.ReadObjectHandleExceptions(XmlReaderDelegator reader, Boolean verifyObjectName, DataContractResolver dataContractResolver)\r\n   at System.Runtime.Serialization.XmlObjectSerializer.ReadObject(XmlDictionaryReader reader)\r\n   at System.Runtime.Serialization.XmlObjectSerializer.ReadObject(Stream stream)\r\n   at CoreFX.Fuzz.Program.Main(String[] args) in /home/dan/1/Program.cs:line 19\r\n```\r\n it is not fixed.",
                                           "updatedAt":  "2021-10-09T17:16:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43_Qtc",
                                           "createdAt":  "2021-10-09T17:17:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "XmlTextReader.Read() is only documented to throw XmlException. Moving to Xml path.",
                                           "updatedAt":  "2021-10-09T17:17:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43_QuP",
                                           "createdAt":  "2021-10-09T17:18:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n**DataContractSerializer.ReadObject** sometimes throws **ArgumentNullException**. Here\u0027s the full program that reproduces this:\r\n\r\n```csharp\r\nusing System.IO;\r\nusing System.Runtime.Serialization;\r\nusing System.Text;\r\n\r\nnamespace CoreFX.Fuzz\r\n{\r\n  public class Program\r\n  {\r\n    [DataContract]\r\n    private class Obj { }\r\n\r\n    public static void Main(string[] args)\r\n    {\r\n      var xml = @\"\u003cProgram.Obj xmlns=\"\"http://schemas.datacontract.org/2004/07/CoreFX.Fuzz\"\"\u003e\u003cs:\";\r\n      var bytes = Encoding.UTF8.GetBytes(xml);\r\n      var stream = new MemoryStream(bytes);\r\n      var serializer = new DataContractSerializer(typeof(Obj));\r\n\r\n      serializer.ReadObject(stream);\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe stack trace:\r\n\r\n```\r\nException has occurred: CLR/System.ArgumentNullException\r\nAn unhandled exception of type \u0027System.ArgumentNullException\u0027 occurred in System.Private.Xml.dll: \u0027The empty string \u0027\u0027 is not a valid local name.\u0027\r\n   at System.Xml.XmlConvert.VerifyNCName(String name, ExceptionType exceptionType)\r\n   at System.Xml.XmlConvert.VerifyNCName(String name)\r\n   at System.Xml.XmlUTF8TextReader.VerifyNCName(String s)\r\n   at System.Xml.XmlUTF8TextReader.ReadQualifiedName(PrefixHandle prefix, StringHandle localName)\r\n   at System.Xml.XmlUTF8TextReader.ReadStartElement()\r\n   at System.Xml.XmlUTF8TextReader.Read()\r\n   at System.Runtime.Serialization.XmlReaderDelegator.Read()\r\n   at System.Runtime.Serialization.ClassDataContract.ReadXmlValue(XmlReaderDelegator xmlReader, XmlObjectSerializerReadContext context)\r\n   at System.Runtime.Serialization.XmlObjectSerializerReadContext.ReadDataContractValue(DataContract dataContract, XmlReaderDelegator reader)\r\n   at System.Runtime.Serialization.XmlObjectSerializerReadContext.InternalDeserialize(XmlReaderDelegator reader, String name, String ns, DataContract\u0026 dataContract)\r\n   at System.Runtime.Serialization.XmlObjectSerializerReadContext.InternalDeserialize(XmlReaderDelegator xmlReader, Type declaredType, DataContract dataContract, String name, String ns)\r\n   at System.Runtime.Serialization.DataContractSerializer.InternalReadObject(XmlReaderDelegator xmlReader, Boolean verifyObjectName, DataContractResolver dataContractResolver)\r\n   at System.Runtime.Serialization.XmlObjectSerializer.ReadObjectHandleExceptions(XmlReaderDelegator reader, Boolean verifyObjectName, DataContractResolver dataContractResolver)\r\n   at System.Runtime.Serialization.XmlObjectSerializer.ReadObject(XmlDictionaryReader reader)\r\n   at System.Runtime.Serialization.XmlObjectSerializer.ReadObject(Stream stream)\r\n```\r\n\r\nThe environment:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.103\r\n Commit:    8edbc2570a\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.103/\r\n```\r\n\r\nFound via [SharpFuzz](https://github.com/Metalnem/sharpfuzz).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMetalnem\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`bug`, `area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-09T17:18:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44Fj1W",
                                           "createdAt":  "2021-10-12T12:49:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@Metalnem do you feel like sending PR with a tiny test? I can help with that if needed",
                                           "updatedAt":  "2021-10-12T12:49:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5g0ZjS",
                                           "createdAt":  "2023-07-06T21:46:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "@imcarolwang - If this still repros, `System.Xml.XmlUTF8TextReader.VerifyNCName` should be null-checking before going forward and throwing an XmlException instead.",
                                           "updatedAt":  "2023-07-06T21:46:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5g1Q0x",
                                           "createdAt":  "2023-07-07T02:50:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "imcarolwang",
                                           "body":  "@StephenMolloy, I haven\u0027t been able to reproduce this issue, on my repro environment, the stack trace seems missing some details than reported in issue, the exception is `System.Runtime.Serialization.SerializationException`, not `ArgumentNullException`, like I pasted [before ](https://github.com/dotnet/runtime/issues/1409#issuecomment-653314305) even on net6.0, do I miss something in repro the bug? I tried to run the code on both Windows and Ubuntu OS, I am not sure if it has difference than on Mac OS ...\n\n**Update:** I just realized I made a silly mistake when reproducing the issue—it was because I used mismatched namespace in the demo code. The issue is still reproducible on both .NET Framework and .NET platforms.",
                                           "updatedAt":  "2025-08-11T01:08:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc684yq1",
                                           "createdAt":  "2025-08-08T18:51:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "Looks like this is still reproducible. But I will say this... it also reproduces on 4.8. And of course the Xml being processed here is malformed. I misspoke earlier about VerifyNCName. It\u0027s doing the same thing it has always done since 4.8. I suppose the question is whether a frame further up the stack should be wrapping the `ArgumentNullException` in something higher-level like `SerializationException`.",
                                           "updatedAt":  "2025-08-08T18:51:32Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "XmlTextReader.Read throws ArgumentNullException",
        "labels":  [
                       "bug",
                       "area-System.Xml",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/944",
        "createdAt":  "2019-02-22T13:58:43Z",
        "number":  944,
        "author":  "marek-safar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-05-11T18:44:18Z",
        "body":  "System.Xml.XmlCharType has dependency on 64K big binary blob `XmlCharType.bin` to do xml characters type detection. This dependency is hard for illinker to remove and also looks like something what could be implement differently.\r\n\r\nThere are also static methods like `IsSurrogate` which are just duplicates of `char` methods implementation and could probably be removed completely.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMgHfgg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NjQ5Njk5Nw==",
                                           "createdAt":  "2019-02-22T18:26:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@marek-safar I imagine there will be many more issues over the next few months relating to linker optimization. How about I create a github project to collect them all.",
                                           "updatedAt":  "2019-02-22T18:26:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NjUzMjIyNA==",
                                           "createdAt":  "2019-02-22T20:15:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "@danmosemsft yes, that\u0027s very likely. I don\u0027t know how you usually do it if via Projects, umbrella issue or something else",
                                           "updatedAt":  "2019-02-22T20:15:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NjUzMjkzMQ==",
                                           "createdAt":  "2019-02-22T20:17:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "OK, added this to a new project. Feel free to put any others there.",
                                           "updatedAt":  "2019-02-22T20:17:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTU2ODA1OA==",
                                           "createdAt":  "2020-05-20T16:00:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Seems like a good case for using this feature: https://github.com/dotnet/roslyn/pull/24621\r\n\r\nEG: https://github.com/dotnet/coreclr/pull/26138\r\n\r\n/cc @eerhardt ",
                                           "updatedAt":  "2020-05-20T16:00:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjI1OTExOA==",
                                           "createdAt":  "2020-06-10T21:02:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I vaguely remember that in the early days of System.Xml we used to generate this table into memory on init. But it turned out to be faster to simply map it from disk.\r\nAnyway, the code to generate it is still there: https://github.com/dotnet/runtime/blob/fe35942e61742bb9ed2291b50fa496c9ad487c91/src/libraries/System.Private.Xml/src/System/Xml/XmlCharType.cs#L288\r\n\r\nThe mapping of constants into memory won\u0027t help with the size, since we would still need the 64KB array as a constant value in the assembly - basically it would be a nicer way to do the resource thing we\u0027re doing today.\r\n\r\nFor linker we would need to do this via a feature switch and in that case drop the resource and instead use the CPU to generate it on init. Would mean to include the generation code always, but it\u0027s really small.\r\n\r\nTechnically it\u0027s possible to not have the 64KB table at all, but it REALLY helps with XML parser perf, so I think we should keep it.",
                                           "updatedAt":  "2020-06-10T21:02:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTU3OTU1NQ==",
                                           "createdAt":  "2020-07-08T15:09:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "It doesn\u0027t seem to we could get it done within 5.0, moving to 6.0",
                                           "updatedAt":  "2020-07-08T15:09:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTgzNzAxMA==",
                                           "createdAt":  "2020-07-09T01:11:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@eerhardt is it OK to move this or do we need it for 5.0 browser scenarios?\r\n\r\n@vitek-karas I wasn\u0027t suggesting a constant:  I was suggesting a field that could be trimmed if it wasn\u0027t used.  My understanding of the issue was that the linker doesn\u0027t know how to trim a resource, but it would know how to trim a field.  The fact that we can have spans of this gives us good perf on access.  Do you think it\u0027s ok for perf to regress perf of XML to save 64 KB in this case?  I guess it depends on how bad the perf is to generate the table in browser.",
                                           "updatedAt":  "2020-07-09T01:11:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTgzOTI1MA==",
                                           "createdAt":  "2020-07-09T01:18:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e is it OK to move this or do we need it for 5.0 browser scenarios?\r\n\r\nAs of right now, System.Xml isn\u0027t brought into a Blazor WASM app by default and I don\u0027t know of important scenarios that would require XML in Blazor WASM. So I don\u0027t feel it is strictly necessary for 5.0, unless someone makes a case for why XML is critical in Blazor WASM. I think it is fine to address this in 6.0.",
                                           "updatedAt":  "2020-07-09T01:18:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjE2ODEzOA==",
                                           "createdAt":  "2020-07-09T14:40:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBJ35yA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2020-07-09T14:49:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@ericstj currently linker can only trim resources \"unconditionally\" (behind a feature switch), so you\u0027re right about that. If it\u0027s a field which linker can trim along with its large value that would be much better. Ultimately though (as far as I remember my XML days), pretty much everything in `System.Xml` will end up accessing this field anyway. So if we want to reduce size of apps using XML generating the table on init would be the ideal solution for size. Performance is obviously a concern - we would have to measure that.",
                                           "updatedAt":  "2020-07-09T14:40:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzODk4MzU1NA==",
                                           "createdAt":  "2021-05-11T18:44:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Moving to \u0027Future\u0027 as this isn\u0027t a high priority for 6.",
                                           "updatedAt":  "2021-05-11T18:44:18Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "System.Xml.XmlCharType size improvements",
        "labels":  [
                       "enhancement",
                       "area-System.Xml",
                       "tenet-performance",
                       "size-reduction"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/29005",
        "createdAt":  "2019-03-19T09:10:36Z",
        "number":  29005,
        "author":  "simendsjo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-17T20:20:03Z",
        "body":  "According to the specification, `endOfDayFrag` allows a dateTime to have\r\nthe timestamp `24:00:00` \\[1\\]. This is oddly enough defined as\r\n\r\n\u003e Alternatively, endOfDayFrag combines the hourFrag, minuteFrag,\r\n\u003e minuteFrag, and their separators to represent midnight of the day,\r\n\u003e which is the first moment of the next day.\r\n\r\nWhich doesn\u0027t make a lot of sense as a time cannot exist in two dates at\r\nthe same time. `libxml2` has support for this \\[2\\].\r\n\r\nMy first assumption of this would be that the value should be allowed,\r\nand that it should return the implementation defined latest possible\r\ntime for a given date. My ~~google-fu~~ bing-fu doesn\u0027t show how others\r\nare handling `endOfDayFrag`, but as the spec allows it, people are\r\nreporting it, which breaks validation.\r\n\r\nI notice an existing issue related ISO8601 parsing\\[3\\], which is\r\nprobably related to the parsing step.\r\n\r\n1.  \u003chttps://www.w3.org/TR/xmlschema11-2/#nt-eodFrag\u003e\r\n\r\n2.  \u003chttps://gitlab.gnome.org/GNOME/libxml2/commit/a1dca81df7c352cd9a14ab678750b1623f8f8ed7\u003e\r\n\r\n3.  \u003chttps://github.com/dotnet/coreclr/issues/23064\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsbl3AQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NDI1ODE2Mw==",
                                           "createdAt":  "2019-03-19T09:13:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simendsjo",
                                           "body":  "Btw, here\u0027s a small testcase:\r\n\r\n``` csharp\r\n    class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            var s = new XmlReaderSettings\r\n            {\r\n                ValidationType = ValidationType.Schema,\r\n            };\r\n            s.Schemas.Add(\"endOfDate\", XmlReader.Create(\"c:/tmp/endOfDate.xsd\"));\r\n\r\n            var r = XmlReader.Create(\"c:/tmp/endOfDate.xml\", s);\r\n            var d = new XmlDocument();\r\n            d.Load(r);\r\n        }\r\n    }\r\n```\r\n\r\nendOfDate.xsd:\r\n``` xsd\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003cxs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" targetNamespace=\"endOfDate\"\u003e\r\n  \u003cxs:element name=\"endofdate\" type=\"xs:dateTime\"/\u003e\r\n\u003c/xs:schema\u003e\r\n```\r\n\r\nendOfDate.xml:\r\n``` xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003ctmp xmlns:eod=\"endOfDate\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\u003e\r\n  \u003ceod:endofdate\u003e2019-03-19T24:00:00\u003c/eod:endofdate\u003e\r\n\u003c/tmp\u003e\r\n```",
                                           "updatedAt":  "2019-03-19T09:13:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NjQ2MjMyMw==",
                                           "createdAt":  "2019-04-24T23:20:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@simendsjo I\u0027m moving this to future because we are far in the current release cycle and this is potentially risky change and we have already shipped like that for many years. Please let me know if you are interested in sending a patch. I agree we should comply to the spec but at the same time number of affected customers is very small (this is first report I\u0027ve heard about this).",
                                           "updatedAt":  "2019-04-24T23:20:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NjUzOTczNw==",
                                           "createdAt":  "2019-04-25T06:41:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simendsjo",
                                           "body":  "\u003e I\u0027m moving this to future because we are far in the current release\r\n\u003e cycle and this is potentially risky change and we have already shipped like that\r\n\u003e for many years.\r\n\r\nAgree it might be risky. Hopefully someone with knowledge of the existing code\r\nmight find some way to reduce this, but it is a breaking change (even if just\r\nallowing more data). As it seems quite obscure, and in little use, this fix\r\nshouldn\u0027t affect people not using the end-of-day feature much.\r\n\r\n\r\n\u003e Please let me know if you are interested in sending a patch.\r\n\r\nNot sure I\u0027m qualified as I don\u0027t know much about date/time. The issue for\r\nvalidation might be solved by just fixing the DateTime, ref\r\nhttps://github.com/dotnet/coreclr/issues/23064.\r\n\r\n\r\n\u003e I agree we should comply to the spec but at the same time number of affected\r\n\u003e customers is very small (this is first report I\u0027ve heard about this).\r\n\r\nI had no idea ISO-8601 defined 24 as a valid time until it blew up either.",
                                           "updatedAt":  "2019-04-25T06:41:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NjcyNDQzNQ==",
                                           "createdAt":  "2019-04-25T15:34:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@simendsjo I own both XML and globalization but I think everyone on our team will have to spend some time digging where to make the fix to make it least risky. I agree https://github.com/dotnet/coreclr/issues/23064 should be addressed first, very likely XML is using that code already (if not then it possibly this can be unified).",
                                           "updatedAt":  "2019-04-25T15:34:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Y5ozu",
                                           "createdAt":  "2024-12-30T09:40:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simendsjo",
                                           "body":  "I think this bug should be kept open. Commenting to avoid closing the issue.",
                                           "updatedAt":  "2025-06-17T20:16:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xuXcB",
                                           "createdAt":  "2025-06-17T20:20:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simendsjo",
                                           "body":  "Looks like end of day is supported by iso8601 again, ref https://github.com/dotnet/runtime/issues/12197#issuecomment-1430579980",
                                           "updatedAt":  "2025-06-17T20:20:03Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "XML validation doesn\u0027t support endOfDayFrag (24:00:00)",
        "labels":  [
                       "bug",
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30107",
        "createdAt":  "2019-07-02T10:52:16Z",
        "number":  30107,
        "author":  "ViktorHofer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-22T16:32:31Z",
        "body":  "on all configurations.\r\n\r\nv5(param0: \\\"bug356711.xsd\\\", param1: 0)\r\nv6(param0: \\\"bug356711.xsd\\\")\r\n\r\nhttps://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F38676~2Fmerge/test~2Ffunctional~2Fcli~2Finnerloop~2F/20190701.40/workItem/System.Xml.XmlSchemaSet.Tests",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONMDN8Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNzY2NTU0Ng==",
                                           "createdAt":  "2019-07-02T12:58:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Missing piece of data here: test has existed in codebase for some time but was missing Theory attribute.  When Theory was added it started running \u0026 failing. dotnet/corefx#38676",
                                           "updatedAt":  "2019-07-02T13:06:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNjI2MDc4NQ==",
                                           "createdAt":  "2019-07-30T04:54:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gnbrkm41",
                                           "body":  "https://github.com/dotnet/corefx/blob/master/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_ProhibitDTD.cs#L231\r\n```\r\nAssert.Equal() Failure\r\n    Expected: 0\r\n    Actual:   2\r\n```\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_ProhibitDTD.cs#L257\r\n```\r\nAssert.Equal() Failure\r\n    Expected: 0\r\n    Actual:   1\r\n```\r\n\r\nI have no idea why this is running on my local machine if this is disabled; maybe VS test explorer ignores it? 😅 seems like it\u0027s not on the list when ran using `build -test` though.",
                                           "updatedAt":  "2019-07-30T04:54:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxODg4MjAxNg==",
                                           "createdAt":  "2019-08-06T23:36:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAt_6VA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gnbrkm41",
                                                                               "createdAt":  "2019-08-07T01:02:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "\u003e VS test explorer ignores it?\r\n\r\nVS Test Explorer currently discovers all the tests. I will talk to the VSTest team to find out if there\u0027s a way to disable tests being shown depending on the trait.",
                                           "updatedAt":  "2019-08-06T23:36:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40wM3x",
                                           "createdAt":  "2021-07-22T16:32:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "this is most likely test bug so marking as such",
                                           "updatedAt":  "2021-07-22T16:32:22Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "System.Xml.Tests.TC_SchemaSet_ProhibitDTD/v5 \u0026 v6 failing on CI",
        "labels":  [
                       "area-System.Xml",
                       "disabled-test",
                       "test-bug"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30398",
        "createdAt":  "2019-07-27T14:25:17Z",
        "number":  30398,
        "author":  "bigboy-pdb-spam",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-19T11:27:35Z",
        "body":  "# Steps to reproduce\r\n\r\n```csharp\r\nXmlDocument doc = new XmlDocument();\r\ndoc.LoadXml(\"\u003c?xml version=\\\"1.0\\\"?\u003e \\n\" +\r\n    \"\u003cr\u003e\u003ce\u003e1\u003c/e\u003e2\u003c/r\u003e\"\r\n);\r\n\r\nXmlElement r = doc.DocumentElement;\r\n\r\nforeach (string s in new [] {\"a\",\"b\"}) {\r\n    r.FirstChild.AppendChild(doc.CreateTextNode(s));\r\n}\r\nforeach (string s in new [] {\"c\",\"d\"}) {\r\n    r.AppendChild(doc.CreateTextNode(s));\r\n}\r\n\r\nforeach (XmlNode n in r.SelectNodes(\"//text()\")) {\r\n    Console.WriteLine(n.Value);\r\n}\r\n```\r\n\r\n# Expected behavior\r\n\r\n```none\r\n1\r\na\r\nb\r\n2\r\nc\r\nd\r\n```\r\n\r\n# Actual behavior\r\n\r\n```none\r\n1\r\n2\r\n```\r\n\r\n# Environment data\r\n\r\n```none\r\ndotnet --version\r\n2.2.401\r\n```\r\n\r\nEDIT by @krwq:\r\n\r\nSee:\r\nhttps://github.com/dotnet/corefx/issues/39831#issuecomment-516533280\r\nhttps://github.com/dotnet/corefx/issues/39831#issuecomment-516535014",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHsmy5g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNTcyNzA5MA==",
                                           "createdAt":  "2019-07-28T02:17:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "```xml\r\n\u003cr\u003e\r\n   \u003ce\u003e1ab\u003c/e\u003e\r\n2cd\r\n\u003c/r\u003e\r\n```\r\nif I plug this into an XPath tester, `//text()` will give `1ab` and `2cd`. However in this case, 1, a, b, 2, c, d were created as separate text nodes. Whether in those circumstances `//text()` should return `1`, `2`, or `1ab`, `2cd`, or each one individually, I do not know. I tried it on .NET 2.0 and it gives the same result, so it has not changed in 14 years at least.\r\n\r\n@krwq do you know?",
                                           "updatedAt":  "2019-07-28T02:17:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNTc4NjI0Ng==",
                                           "createdAt":  "2019-07-28T18:56:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENhFEA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2019-07-29T18:39:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "greek1979",
                                                                               "createdAt":  "2025-04-09T10:10:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "krwq",
                                           "body":  "@bigboy-pdb-spam I think `SelectNodes` might have implied that it only selects in the first layer of the xml tree (`descendants` usually refers to tree where `nodes` means just first layer).\r\n\r\nTry this instead:\r\n\r\n```csharp\r\nXmlDocument doc = new XmlDocument();\r\ndoc.LoadXml(\"\u003c?xml version=\\\"1.0\\\"?\u003e \\n\" +\r\n    \"\u003cr\u003e\u003ce\u003e1\u003c/e\u003e2\u003c/r\u003e\"\r\n);\r\n\r\nXmlElement r = doc.DocumentElement;\r\n\r\nforeach (string s in new [] {\"a\",\"b\"}) {\r\n    r.FirstChild.AppendChild(doc.CreateTextNode(s));\r\n}\r\nforeach (string s in new [] {\"c\",\"d\"}) {\r\n    r.AppendChild(doc.CreateTextNode(s));\r\n}\r\n\r\nvar xp = r.CreateNavigator();\r\nforeach (var n in xp.Select(\"//text()\")) {\r\n    Console.WriteLine(n);\r\n}\r\n```\r\n\r\nOutput:\r\n```\r\n1ab\r\n2cd\r\n```",
                                           "updatedAt":  "2019-07-28T18:58:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNjQzOTYyOQ==",
                                           "createdAt":  "2019-07-30T14:18:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bigboy-pdb-spam",
                                           "body":  "The documentation for [XmlNode.SelectNodes](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmlnode.selectnodes?view=netframework-4.8) only states: \"Selects a list of nodes matching the XPath expression\". I\u0027ve always heard the word \"descendant\" used to mean an element\u0027s (or person\u0027s) children, grand children, great grand children, and so forth.\r\n\r\nThe following code shows that the descendant-or-self axis works as expected when searching for elements and text nodes separated by elements (that weren\u0027t added programatically).\r\n\r\n# Test code\r\n\r\n```csharp\r\nXmlDocument doc = new XmlDocument();\r\ndoc.LoadXml(\"\u003c?xml version=\\\"1.0\\\"?\u003e \\n\" +\r\n \"\u003cbody\u003e\u003cp\u003e1\u003c/p\u003e2\u003cp\u003e3\u003cspan\u003e4\u003c/span\u003e5\u003c/p\u003e6\u003c/body\u003e\"\r\n);\r\n\r\n// Not the root element\r\nXmlNode pFirst = doc.DocumentElement.FirstChild;\r\n\r\n// Search starts from the root element and returns all descendants\r\n//  (Prepending a dot character would start from the selected element)\r\nforeach (XmlNode n in pFirst.SelectNodes(\"//*\")) {\r\n    Console.WriteLine(n.Name);\r\n}\r\n\r\nConsole.WriteLine(\" \");\r\n\r\n// Search starts from the root element and returns all descendants\r\n//  (Prepending a dot character would start from the selected element)\r\nforeach (XmlNode n in pFirst.SelectNodes(\"//text()\")) {\r\n    Console.WriteLine(n.Value);\r\n}\r\n```\r\n\r\n# Output\r\n\r\n```none\r\nbody\r\np\r\np\r\nspan\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n```\r\n\r\nAlso, in Firefox\u0027s Console (F12), I tested similar code to the C Sharp code that I provided when opening the issue:\r\n\r\n```javascript\r\nvar xmlDoc = (new DOMParser()).parseFromString(\"\u003cr\u003e\u003ce\u003e1\u003c/e\u003e2\u003c/r\u003e\", \"text/xml\");\r\n\r\nvar letters1 = [\"a\",\"b\"];\r\nvar letters2 = [\"c\",\"d\"];\r\n\r\nfor( var i=0; i \u003c letters1.length; i++) {\r\n    xmlDoc.documentElement.firstChild.appendChild(xmlDoc.createTextNode(letters1[i]));\r\n}\r\n\r\nfor( var i=0; i \u003c letters2.length; i++) {\r\n    xmlDoc.documentElement.appendChild(xmlDoc.createTextNode(letters2[i]));\r\n}\r\n\r\nvar iterator = xmlDoc.evaluate(\u0027//text()\u0027, xmlDoc.documentElement, null, XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null);\r\nvar thisNode = iterator.iterateNext();\r\n  \r\nwhile (thisNode) {\r\n    console.log( thisNode.textContent );\r\n    thisNode = iterator.iterateNext();\r\n}\r\n```\r\n\r\nThe output was what I had expected it to be:\r\n\r\n```none\r\n1\r\na\r\nb\r\n2\r\nc\r\nd\r\n```",
                                           "updatedAt":  "2019-07-30T14:41:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNjUzMzI4MA==",
                                           "createdAt":  "2019-07-30T18:16:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "ok, seems like you\u0027re right. The problem seems to be happening when internal representation has more than 1 text nodes one after another (that can only happen when document is modified).\r\n\r\ni.e.:\r\n\r\n```csharp\r\n            XmlDocument doc = new XmlDocument();\r\n            string xml= @\"\u003c?xml version=\"\"1.0\"\"?\u003e\u003cr\u003etest\u003c/r\u003e\";\r\n            doc.LoadXml(xml);\r\n\r\n            XmlElement r = doc.DocumentElement;\r\n\r\n            var el = doc.CreateElement(\"test\");\r\n            foreach (string s in new[] { \"a\", \"b\" })\r\n            {\r\n                el.AppendChild(doc.CreateTextNode(s));\r\n            }\r\n\r\n            r.AppendChild(el);\r\n\r\n            Console.WriteLine(doc.OuterXml);\r\n            Console.WriteLine();\r\n\r\n            // Search starts from the root element and returns all descendants\r\n            //  (Prepending a dot character would start from the selected element)\r\n            foreach (XmlNode n in r.SelectNodes(\"//text()\"))\r\n            {\r\n                Console.WriteLine(n.Value);\r\n            }\r\n\r\n            // workaround\r\n            Console.WriteLine();\r\n\r\n            XPathNavigator xp = r.CreateNavigator();\r\n            foreach (var n in xp.Select(\"//text()\"))\r\n            {\r\n                Console.WriteLine(n);\r\n            }\r\n```\r\n\r\nPrints:\r\n\r\n```\r\n\u003c?xml version=\"1.0\"?\u003e\u003cr\u003etest\u003ctest\u003eab\u003c/test\u003e\u003c/r\u003e\r\n\r\ntest\r\na\r\n\r\ntest\r\nab\r\n```\r\n\r\nas you can see text node \"b\" is omitted while \"a\" is visible.",
                                           "updatedAt":  "2019-07-30T18:26:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNjUzNTAxNA==",
                                           "createdAt":  "2019-07-30T18:20:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "Interestingly https://github.com/dotnet/corefx/blob/master/src/System.Private.Xml/src/System/Xml/Dom/XmlNode.cs#L68 is actually doing almost what the workaround does so presumably problem is with XPathNodeList - likely the fix is just connecting text nodes which are next to each other but this will need adding more tests for all similar scenarios to make sure this didn\u0027t cause any regressions.\r\n\r\nI won\u0027t have cycles to pick this up anytime soon but considering this is rather isolated I wouldn\u0027t expect this to be hard to fix (although there might be some tricky edge cases) - please let me know if you\u0027d be interested in sending a patch",
                                           "updatedAt":  "2019-07-30T18:29:36Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "XPath text() Function in SelectNode Returns First Text Node For Each Element Matched",
        "labels":  [
                       "bug",
                       "area-System.Xml",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30442",
        "createdAt":  "2019-07-31T21:34:16Z",
        "number":  30442,
        "author":  "JoeRobich",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5YJ5g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JeroenBos",
                                            "createdAt":  "2020-07-15T13:54:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "meziantou",
                                            "createdAt":  "2020-12-26T18:32:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OctumSven",
                                            "createdAt":  "2024-07-15T11:54:11Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2022-06-28T02:58:52Z",
        "body":  "XDocument.Load using LoadOptions.PreserveWhitespace does not preserve NewLine characters when paired with XDocument.Save using LoadOptions.SaveOptions.DisableFormatting.\r\n\r\n**Steps to test**\r\n\r\n1. Create a new Console Application project.\r\n2. Replace the code in Program.cs with the code below\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.Text;\r\nusing System.Xml.Linq;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            // Windows LineEndings\r\n            var windowsXml = \"\u003c?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?\u003e\\r\\n\u003cRoot\u003e\\r\\n    \u003cChild\u003eContent\u003c/Child\u003e\\r\\n\u003c/Root\u003e\";\r\n\r\n            // Linux LineEndings\r\n            var linuxXml = \"\u003c?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?\u003e\\n\u003cRoot\u003e\\n    \u003cChild\u003eContent\u003c/Child\u003e\\n\u003c/Root\u003e\";\r\n\r\n            Console.WriteLine(\"Testing with Windows line endings:\");\r\n            TestXml(windowsXml);\r\n\r\n            Console.WriteLine(\"Testing with Linux line endings:\");\r\n            TestXml(linuxXml);\r\n\r\n            Console.WriteLine(\"Press enter to exit.\");\r\n            Console.ReadLine();\r\n        }\r\n\r\n        static void TestXml(string inputXml)\r\n        {\r\n            var outputXml = RoundtripXml(inputXml);\r\n            var isMatch = inputXml == outputXml;\r\n\r\n            Console.WriteLine($\"Xml is {(isMatch ? string.Empty : \"not \")}a match\");\r\n        }\r\n\r\n        static string RoundtripXml(string inputXml)\r\n        {\r\n            var textReader = new StringReader(inputXml);\r\n            var xmlDocument = XDocument.Load(textReader, LoadOptions.PreserveWhitespace);\r\n\r\n            var xmlBuilder = new StringBuilder();\r\n            var textWriter = new StringWriter(xmlBuilder);\r\n            xmlDocument.Save(textWriter, SaveOptions.DisableFormatting);\r\n            return xmlBuilder.ToString();\r\n        }\r\n    }\r\n}\r\n```\r\n3. Build and run the console application.\r\n\r\n**Expected Outcome**\r\nBoth sets of XML roundtrip and match.\r\n\r\n**Actual Outcome**\r\nOne set of XML fails to roundtrip. The line endings used in the input xml are replaced with the NewLine characters for the current Environment.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORaC13w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNzgzMTQzOQ==",
                                           "createdAt":  "2019-08-02T20:17:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCkAQpw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bill2004158",
                                                                               "createdAt":  "2022-06-28T02:59:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "krwq",
                                           "body":  "@JoeRobich XML parsers are allowed to normalize line endings. Did you try to use XDocument.Load with XmlTextReader? XmlTextReader has some extra options which handle line endings and whitespaces slightly more user friendly than other readers",
                                           "updatedAt":  "2019-08-02T20:17:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNzgzNDk1MQ==",
                                           "createdAt":  "2019-08-02T20:30:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBg3JeQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2021-02-22T10:57:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JoeRobich",
                                           "body":  "\u003e XML parsers are allowed to normalize line endings.\r\n\r\n@krwq I guess my expectation was that line endings were whitespace and they would be preserved. I think one issue with round tripping them is that when `XDocument.Save` is invoked it creates a new `XmlWriterSettings` which defaults `_newLineChars` to `Environment.NewLine`.",
                                           "updatedAt":  "2019-08-02T20:30:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNzgzNjgyNQ==",
                                           "createdAt":  "2019-08-02T20:36:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@JoeRobich my first try would be to use XmlTextReader/Writer to Load/Save (+ settings right options there) - if that doesn\u0027t work you can only force line endings to specifc (but not preserve) using XmlWriterSettings:\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.xml.xmlwritersettings.newlinechars?view=netcore-3.0",
                                           "updatedAt":  "2019-08-02T20:36:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NzEwMzkyMQ==",
                                           "createdAt":  "2021-02-10T23:23:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ndrwrbgs",
                                           "body":  "+1",
                                           "updatedAt":  "2021-02-10T23:23:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FoLXf",
                                           "createdAt":  "2022-06-28T02:58:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpw6Pw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krwq",
                                                                               "createdAt":  "2022-06-28T08:19:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wangyoutian",
                                                                               "createdAt":  "2022-10-15T12:20:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "OctumSven",
                                                                               "createdAt":  "2024-07-15T12:14:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "bill2004158",
                                           "body":  "we can config xmlWriter directly.\r\n```\r\nstatic string RoundtripXml(string inputXml)\r\n{\r\n    using var textReader = new StringReader(inputXml);\r\n    using var reader = new XmlTextReader(textReader);\r\n    var xmlDocument = XDocument.Load(reader);\r\n\r\n    var xmlBuilder = new StringBuilder();\r\n    using (var textWriter = new StringWriter(xmlBuilder))\r\n    using (var xmlWriter = XmlWriter.Create(textWriter, new XmlWriterSettings\r\n           {\r\n               NewLineHandling = NewLineHandling.None\r\n           }))\r\n    {\r\n        xmlDocument.Save(xmlWriter);\r\n    }\r\n    return xmlBuilder.ToString();\r\n}\r\n```",
                                           "updatedAt":  "2022-06-28T02:58:52Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "XDocument.Load with LoadOptions.PreserveWhitespace does not preserve NewLine characters",
        "labels":  [
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/498",
        "createdAt":  "2019-11-22T15:27:20Z",
        "number":  498,
        "author":  "304NotModified",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-22T16:34:14Z",
        "body":  "Hi,\r\n\r\nI noticed that using `XElement.Load(stream, LoadOptions.SetLineInfo)` is very slow and memory consuming is times 2 compared to `XElement.Load(stream, LoadOptions.None)`\r\n\r\nSee table. For the completeness, I also added the results for the generated for class (XSD to C#) - which is very fast and not using much memory but is lacking the lineinfo. \r\n\r\nTested it with a XML file of 914MB\r\n\r\n| Method\t\t\t\t\t\t\t|      Memory\t\t\t\t\t\t| Time\t\t\t\t\t\r\n|-----------------------------------|----------------------------------:|----------------------:\t\r\n| XElement without lineinfo (`LoadOptions.None`)| 2.213.541 Mb (2.271.092.736 bytes)| 27 Sec (26.502 ms)\t\r\n| XElement with lineinfo (`LoadOptions.SetLineInfo`)| 5.523.492 Mb (5.667.102.720 bytes)| 46 Sec (45.781 ms)\t\r\n| Own \"XElement\" without lineinfo| 2.825.026 Mb (2.898.477.056 bytes)| 25 Sec (24.584 ms)\r\n| Own \"XElement\" with lineinfo| 2.825.226 Mb (2.898.681.856 bytes)| 26 Sec (25.969 ms)\t\r\n| XSD generated classes\t\t\t\t| 845.057 Mb (867.028.992 bytes)\t| 27 Sec (26.966 ms)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/5808377/69438621-a75cc200-0d45-11ea-81a1-a3133f227d1a.png)\r\n\r\n![image](https://user-images.githubusercontent.com/5808377/69438634-aa57b280-0d45-11ea-9edf-948e2749823a.png)\r\n\r\n\r\n##  Own \"XElement\"\r\nThe funny part is that I wrote my own \"XElement\" in the past, and there is nearly no difference in capturing the lineInfo compared to non-capure. I\u0027m doing for *all* element and *all* attributes `XmlPosition.Create(reader)`:\r\n\r\n```c#\r\npublic struct XmlPosition\r\n{\r\n    public XmlPosition(int lineNumber, int columnNumber)\r\n    {\r\n        if (lineNumber \u003c 0)\r\n        {\r\n            throw new ArgumentOutOfRangeException(nameof(lineNumber));\r\n        }\r\n\r\n        if (columnNumber \u003c 0)\r\n        {\r\n            throw new ArgumentOutOfRangeException(nameof(columnNumber));\r\n        }\r\n\r\n        LineNumber = lineNumber;\r\n        ColumnNumber = columnNumber;\r\n    }\r\n    \r\n    public int LineNumber { get; }\r\n\r\n    public int ColumnNumber { get;  }\r\n\r\n    public static XmlPosition Create(System.Xml.XmlReader reader)\r\n    {\r\n        if(reader is IXmlLineInfo lineInfo)\r\n        {\r\n            return new XmlPosition(lineInfo.LineNumber, lineInfo.LinePosition);\r\n        }\r\n        \r\n        throw new NotImplementedException(\"ow noos\");\r\n    }\r\n}\r\n```\r\n\r\nSo I can\u0027t understand why the XElement is using so much memory/time for SetLineInfo!\r\n\r\n## XmlReaderSettings\r\n\r\nPS: also tried, but no significant change.\r\n\r\n\r\n```c#\r\nvar options = new XmlReaderSettings();\r\noptions.IgnoreWhitespace = true;\r\noptions.DtdProcessing = DtdProcessing.Ignore;\r\noptions.MaxCharactersFromEntities = 10000000L;\r\noptions.Async = true;\r\noptions.CloseInput = true;\r\n\r\n\r\nXElement xml;\r\nusing (XmlReader reader = XmlReader.Create(s, options))\r\n{\r\n    xml = XElement.Load(reader, LoadOptions.SetLineInfo);\r\n}\r\n\r\n```\r\n\r\n## Test\r\n\r\n- using ` Process.GetCurrentProcess().WorkingSet64` for memory \r\n- using System.Diagnostics.StopWatch for timings\r\n\r\n## Env\r\n\r\nTested with .NET Core 2.2, Windows Server 2016 datacenter",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOIai4gw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MTM4NDA2NQ==",
                                           "createdAt":  "2019-12-03T22:21:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@304NotModified this is something we would have to investigate. Do you have your xml file somewhere permanently available? Do you perhaps have perf logs with and without line info available to compare?\r\n\r\nWould you be interested in doing the investigation/fixes?\r\n\r\nPS. We have merged corefx and coreclr into dotnet/runtime repo so that\u0027s where the issue should be filed (it will get moved there eventually)",
                                           "updatedAt":  "2019-12-03T22:21:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NDcwNTQxMQ==",
                                           "createdAt":  "2019-12-11T19:52:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@304NotModified as an aside, we recommend using Benchmark.NET for profiling. This is what we [use ourselves](https://github.com/dotnet/performance). Although, in this case the difference seems to be large enough that it doesn\u0027t matter...",
                                           "updatedAt":  "2019-12-11T19:52:41Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "XElement - LoadOptions.SetLineInfo - very slow \u0026 memory times 2",
        "labels":  [
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/366",
        "createdAt":  "2019-11-27T21:28:41Z",
        "number":  366,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOA2EESw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "binki",
                                            "createdAt":  "2019-11-27T21:48:54Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-02-09T12:37:13Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/412532/introduce-new-xdocumentsavesaveoptionsroundtrip-to.html)._\n\n---\n\u003cp\u003eSee https://stackoverflow.com/q/45284814 .\u003c/p\u003e\u003cp\u003eThe following expression is true: \u003c/p\u003e\u003cp\u003ehttps://gist.github.com/binki/913386389596f21d36da0586095ded8d\u003c/p\u003e\u003cp\u003eI give up on the code formatter. It won’t let me input a literal sequence of the following named charactders: ampsersand, hash, lowercase X, lowercase D, semicolon.\u003c/p\u003e\u003cpre\u003ePlease see gist instead\nXDocument.Parse(\u0026quot;\u0026lt;x xml:space=\\\u0026quot;preserve\\\u0026quot;\u0026gt;\r\\n\u0026lt;/x\u0026gt;\u0026quot;).Root.Value == \u0026quot;\\r\\n\u0026quot;\u003c/pre\u003e\u003cp\u003eThe following expression looks equivalent but actually evaluates to false: \u003c/p\u003e\u003cp\u003ehttps://gist.github.com/binki/4edb03240b3cda0c53cf0d76cdb3dbc5\u003c/p\u003e\u003cpre\u003ePlease see gist instead\nXDocument.Parse(XDocument.Parse(\u0026quot;\u0026lt;x xml:space=\\\u0026quot;preserve\\\u0026quot;\u0026gt;\r\\n\u0026lt;/x\u0026gt;\u0026quot;).ToString(SaveOptions.DisableFormatting)).Root.Value == \u0026quot;\\r\\n\u0026quot;\u003c/pre\u003e\u003cp\u003eI think support for round tripping parsed XML be added as a feature of LINQ to XML so that I don’t have to resort to using XmlWriter. This could be added as a new SaveOptions.RoundTrip which could also turn on DisableFormatting. The goal would be to make it possible to replace usage of XmlWriter/XmlDocument in code which is otherwise purely LINQ to XML.\u003c/p\u003e\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 12/19/2018, 08:24 PM: \n\n\u003cp\u003eThank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.\u0026nbsp;You will hear from us in about a week on our next steps.\u003c/p\u003e\n#### Dinakar Nethi [MSFT] on 1/4/2019, 02:52 PM: \n\n\u003cp\u003eYour suggestion has been queued up for prioritization.  Feature suggestions are prioritized based on the value to our broader developer community and the product roadmap. We may not be able to pursue this one immediately, but we will continue to monitor it up to 90 days for community input\u003c/p\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbn7ow==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1OTI2MjkzMw==",
                                           "createdAt":  "2019-11-27T21:51:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "binki",
                                           "body":  "Rewritten with inline code:\r\n\r\nSee https://stackoverflow.com/q/45284814 .\r\n\r\nThe following expression is true:\r\n\r\n```csharp\r\nXDocument.Parse(\"\u003cx xml:space=\\\"preserve\\\"\u003e\u0026#xd;\\n\u003c/x\u003e\").Root.Value == \"\\r\\n\"\r\n```\r\n\r\nThe following expression looks equivalent but actually evaluates to false:\r\n\r\n```csharp\r\nXDocument.Parse(XDocument.Parse(\"\u003cx xml:space=\\\"preserve\\\"\u003e\u0026#xd;\\n\u003c/x\u003e\").ToString(SaveOptions.DisableFormatting)).Root.Value == \"\\r\\n\"\r\n```\r\n\r\nI think support for round tripping parsed XML should be added as a feature of LINQ to XML so that I don’t have to resort to using `XmlWriter`. This could be added as a new `SaveOptions.RoundTrip` which could also turn on `SaveOptions.DisableFormatting`. The goal would be to make it possible to replace usage of `XmlWriter`/`XmlDocument` in code which is otherwise purely LINQ to XML.\r\n\r\nThe idea is that the following could be made to evaluate to true:\r\n\r\n```csharp\r\nXDocument.Parse(XDocument.Parse(\"\u003cx xml:space=\\\"preserve\\\"\u003e\u0026#xd;\\n\u003c/x\u003e\").ToString(SaveOptions.RoundTrip)).Root.Value == \"\\r\\n\"\r\n```",
                                           "updatedAt":  "2019-11-27T22:26:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MTMxNDc5Mw==",
                                           "createdAt":  "2020-06-29T19:29:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBI2_kQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "binki",
                                                                               "createdAt":  "2020-06-29T19:45:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "Thank you @binki for submitting the issue, this API suggestion need some detailed investigations which cannot be done within .Net 5, we will look into it after .Net 5.0 ",
                                           "updatedAt":  "2020-06-29T19:29:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45WXvy",
                                           "createdAt":  "2021-11-05T19:34:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of the experimental [issue cleanup initiative](https://github.com/dotnet/runtime/issues/60288) we are currently trialing in a limited number of areas. Please share any feedback you might have in the linked issue.",
                                           "updatedAt":  "2021-11-05T19:34:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45Wl6X",
                                           "createdAt":  "2021-11-05T21:13:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "binki",
                                           "body":  ".",
                                           "updatedAt":  "2021-11-05T21:13:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dufuj",
                                           "createdAt":  "2025-02-09T12:37:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "To pursue this and move it toward API Review, we would need someone to implement a prototype implementation showing the feasibility of this. Marking as https://github.com/dotnet/runtime/labels/help%20wanted in case a community member is interested in prototyping it.",
                                           "updatedAt":  "2025-02-09T12:37:03Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Introduce new XDocument.Save(SaveOptions.RoundTrip) to support round tripping parsed documents, entitizing carriage returns",
        "labels":  [
                       "api-suggestion",
                       "area-System.Xml",
                       "help wanted",
                       "backlog-cleanup-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1029",
        "createdAt":  "2019-12-18T21:04:10Z",
        "number":  1029,
        "author":  "iUnknwn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-09T06:32:43Z",
        "body":  "Given the following XML sent over a network stream:\r\n`\u003c?xml version=\"1.0\" encoding=\"utf-16\"?\u003e\u003cDeviceCommand\u003ePlayTone\u003c/DeviceCommand\u003e`\r\n\r\nWhich is generated by the XmlWriter command:\r\n```\r\nvar writer = XmlWriter.Create(namedPipeClientStream)\r\nwriter.WriteElementString(\"DeviceCommand\", \"PlayTone\")\r\nwriter.Flush()\r\n```\r\nThis reader command will cause an XML reader on the server to hang until the network stream is closed:\r\n```\r\nvar reader = XmlReader.Create(namedPipeServerStream)\r\nreader.MoveToContent()\r\nvar txt = reader.ReadElementContentAsString()\r\n```\r\nThe command fails even though the entire element was sent. This alternative command works as expected:\r\n```\r\nreader.MoveToContent()\r\nreader.Read()\r\nvar txt = reader.Value;\r\n```\r\nHowever, if the stream is closed, then the XmlReader is able to read the node without issue and the call to ReadElementContentAsString works as expected.\r\n\r\nIt looks like XmlReader is waiting until it gets the node after the EndElement before it returns the string, but it doesn\u0027t properly recognize the end of the root node. This appears to be undocumented behavior.\r\n\r\nThis was tested on .NET Core 3.0 on Windows.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONHuxDQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MTMyMzMwNw==",
                                           "createdAt":  "2020-06-29T19:48:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "@iUnknwn thank you for reporting the issue, this issue needs some detailed investigations which cannot be done within .Net 5. \r\nIt would be great if you would be interested in doing the investigation/fixes.",
                                           "updatedAt":  "2020-06-29T19:48:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MTQzNzM1MQ==",
                                           "createdAt":  "2020-06-30T00:18:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iUnknwn",
                                           "body":  "@buyaa-n I\u0027d be potentially interested, what are you asking for? \r\n\r\nI could probably write up an MSUnit/xUnit test to test for this behavior, if you\u0027re looking for something basic to demo the problem. \r\n\r\nIf you\u0027re looking for a patch/PR to fix the issue, that might be a bit trickier. ",
                                           "updatedAt":  "2020-06-30T00:18:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MTQ1ODY3Ng==",
                                           "createdAt":  "2020-06-30T01:16:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "\u003e I could probably write up an MSUnit/xUnit test to test for this behavior, if you\u0027re looking for something basic to demo the problem.\r\n\r\nThat would be very helpful for whoever would investigate it\r\n\r\n\u003e If you\u0027re looking for a patch/PR to fix the issue, that might be a bit trickier.\r\n\r\nSure it is not easy, and it is optional/voluntary. If you are willing to contribute for test repro, finding the root cause, propose a fix or raise a PR etc., whichever level it was that would be very helpful. Thanks again!\r\n\r\n",
                                           "updatedAt":  "2020-06-30T01:16:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MDI0NTMyOQ==",
                                           "createdAt":  "2020-08-06T23:47:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iUnknwn",
                                           "body":  "@buyaa-n Sorry this took so long, but I have a repo setup with test cases for this issue. It shows the issue only happens on open streams, and it specifically occurs on single-element html items. \r\n\r\nhttps://github.com/iUnknwn/XmlReaderBugDemo\r\n\r\nPlease let me know if you need more info. ",
                                           "updatedAt":  "2020-08-06T23:47:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MDUyMTQ4NQ==",
                                           "createdAt":  "2021-07-15T08:55:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "For now I believe you should be able to use `ReadContentAsString` which `ReadElementContentAsString` calls internally except `ReadElementContentAsString` also tries to move to the next element.\r\n\r\nI think the fix for this should be somewhere here https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Private.Xml/src/System/Xml/Core/XmlReader.cs#L1607\r\n\r\nbut this will likely require more investigation as there are more than one XmlReader implementation in the framework.\r\n\r\nI\u0027m moved this to 7.0 for now since we do not plan to do this investigation in 6.0",
                                           "updatedAt":  "2021-07-15T08:55:27Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "XmlReader ReadElementContentAsString Hangs if End of Document Tag Reached in Stream ",
        "labels":  [
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/34443",
        "createdAt":  "2020-04-02T09:20:02Z",
        "number":  34443,
        "author":  "weltkante",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-09T06:36:42Z",
        "body":  "When using `XmlNodeReader.MoveToAttribute` returns false it leaves the XmlReader in an inconsistent state which can lead to follow-up exceptions.\r\n\r\nUse-case: we are calling some deserialization API not owned by us which only accepts XmlReader. We already have an in-memory XmlDocument and need to call the deserialization method on a lot of nodes, so we want to use XmlNodeReader instead of doing an unnecessary format/parse roundtrip through an intermediate string for every node we have to deserialize.\r\n\r\nIn some cases the code calls `MoveToAttribute` to detect whether an optional attribute is present. This part works, but when it then subsequently calls `ReadStartElement` this leads to an exception. See attached example which reduces the call sequence to present the problem.\r\n\r\nThe error happens on both Desktop Framework and .NET Core.\r\n\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.Xml;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var doc = new XmlDocument();\r\n        doc.LoadXml(\"\u003croot\u003e\u003cchild attr1=\u0027value1\u0027\u003e\u003cother /\u003e\u003c/child\u003e\u003c/root\u003e\");\r\n\r\n        Console.WriteLine(\"Testing XmlReader.Create\");\r\n        using (var rd = XmlReader.Create(new StringReader(doc.DocumentElement.FirstChild.OuterXml)))\r\n            RunTest(rd);\r\n        Console.WriteLine();\r\n\r\n        Console.WriteLine(\"Testing XmlTextReader\");\r\n        using (var rd = new XmlTextReader(new StringReader(doc.DocumentElement.FirstChild.OuterXml)))\r\n            RunTest(rd);\r\n        Console.WriteLine();\r\n\r\n        Console.WriteLine(\"Testing XmlNodeReader\");\r\n        using (var rd = new XmlNodeReader(doc.DocumentElement.FirstChild))\r\n            RunTest(rd);\r\n        Console.WriteLine();\r\n    }\r\n\r\n    static void RunTest(XmlReader rd)\r\n    {\r\n        Console.WriteLine($\"  reader state: {rd.NodeType} {rd.Name}\");\r\n        Console.WriteLine($\"IsStartElement(child) = {rd.IsStartElement(\"child\")}\");\r\n        Console.WriteLine($\"  reader state: {rd.NodeType} {rd.Name}\");\r\n        Console.WriteLine($\"MoveToAttribute(attr1) = {rd.MoveToAttribute(\"attr1\")}\");\r\n        Console.WriteLine($\"  reader state: {rd.NodeType} {rd.Name}\");\r\n        Console.WriteLine($\"MoveToAttribute(attr2) = {rd.MoveToAttribute(\"attr2\")}\");\r\n        Console.WriteLine($\"  reader state: {rd.NodeType} {rd.Name}\");\r\n        try\r\n        {\r\n            rd.ReadStartElement(\"child\");\r\n            Console.WriteLine($\"ReadStartElement succeeded\");\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine($\"ReadStartElement failed: {ex.Message}\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```text\r\nTesting XmlReader.Create\r\n  reader state: None\r\nIsStartElement(child) = True\r\n  reader state: Element child\r\nMoveToAttribute(attr1) = True\r\n  reader state: Attribute attr1\r\nMoveToAttribute(attr2) = False\r\n  reader state: Attribute attr1\r\nReadStartElement succeeded\r\n\r\nTesting XmlTextReader\r\n  reader state: None\r\nIsStartElement(child) = True\r\n  reader state: Element child\r\nMoveToAttribute(attr1) = True\r\n  reader state: Attribute attr1\r\nMoveToAttribute(attr2) = False\r\n  reader state: Attribute attr1\r\nReadStartElement succeeded\r\n\r\nTesting XmlNodeReader\r\n  reader state: None\r\nIsStartElement(child) = True\r\n  reader state: Element child\r\nMoveToAttribute(attr1) = True\r\n  reader state: Attribute attr1\r\nMoveToAttribute(attr2) = False\r\n  reader state: Element attr1\r\nReadStartElement failed: Element \u0027child\u0027 was not found.\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJDkqsg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNzcyNjI1OA==",
                                           "createdAt":  "2020-04-02T09:20:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-04-02T09:20:05Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "XmlNodeReader MoveToAttribute bug, leaves XmlReader in inconsistent state",
        "labels":  [
                       "bug",
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/35213",
        "createdAt":  "2020-04-20T18:43:02Z",
        "number":  35213,
        "author":  "krwq",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBi8x9g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "buyaa-n",
                                            "createdAt":  "2020-04-20T20:37:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2021-03-10T16:08:21Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-07-26T19:49:12Z",
        "body":  "Found while annotating XML for nullable.\r\n\r\nhttps://github.com/dotnet/runtime/blob/7012768294a103e21436864e061047e5f4925e9c/src/libraries/System.Private.Xml/src/System/Xml/Core/XmlTextReaderImpl.cs#L8855\r\n\r\nis using NameTable.Add but I believe it should use .Get instead similarly as the other almost identical method above:\r\nhttps://github.com/dotnet/runtime/blob/7012768294a103e21436864e061047e5f4925e9c/src/libraries/System.Private.Xml/src/System/Xml/Core/XmlTextReaderImpl.cs#L8838\r\n\r\nAdd method never returns null but there is a null check below which suggest whoever wrote this piece of code probably meant Get.\r\n\r\nI\u0027m not 100% sure this is safe in all cases (I think yes).\r\n\r\nUsing Add might be adding extra values to the dictionary when querying so perf improvement might not be obvious.\r\n\r\nIf Add is in fact correct then null check below does not have to be checked.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJMNhdw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNjc0Mjk2MA==",
                                           "createdAt":  "2020-04-20T18:51:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @buyaa-n\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-04-20T18:51:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNjc4MDQ2MQ==",
                                           "createdAt":  "2020-04-20T20:07:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@danmosemsft can you subscribe me to everywhere I\u0027m mentioned as owner/backup in here: https://github.com/dotnet/runtime/blob/master/docs/area-owners.md?",
                                           "updatedAt":  "2020-04-20T20:07:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNjc4NDI0Nw==",
                                           "createdAt":  "2020-04-20T20:15:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBBqtKA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "krwq",
                                                                               "createdAt":  "2020-04-20T20:49:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "sure, done.",
                                           "updatedAt":  "2020-04-20T20:15:44Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Possible perf improvement in XML",
        "labels":  [
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42748",
        "createdAt":  "2020-09-25T18:44:05Z",
        "number":  42748,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODE16Ww==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Godfather95",
                                            "createdAt":  "2025-06-26T09:50:42Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-12-11T09:08:57Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/889506/systemxmlschemaxmlschemavalidationexception-type-i.html)._\n\n---\n\n```\nXmlDocument xmlDoc = new XmlDocument();\n            xmlDoc.Load(NazivDatoteke);\n\nvar shema = $\"{cfgUrl.ValueText}PDVS/PDVS2016_v1/ObrazacPDVS-v1-0.xsd\";\n\nxmlDoc.Schemas.Add(null, shema);\n            var wasValidationProblem = false;\n            xmlDoc.Validate(\n                (s, ve) =\u003e\n                {\n                    wasValidationProblem = true;\n                    ValidacijaXmlDokumenta(s, ve);\n                });\n```\n\nSame code works in .NET Framework but it does not work in .NET Core 3.1.\n\n---\n### Original Comments\n\n#### Feedback Bot on 1/19/2020, 00:29 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### Feedback Bot on 2/27/2020, 05:40 PM: \n\nI have detected that for the last 35 days, this issue didn\u0027t have much product team activity and a very small amount of new votes or comments. Based on this, its severity, and affected area, it’s my experience that this issue is very unlikely to be fixed.\n#### Feedback Bot on 3/17/2020, 03:17 AM: \n\n\u003cp\u003eThis issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlxzqMA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5OTA5MjE0OA==",
                                           "createdAt":  "2020-09-25T18:44:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @buyaa-n, @krwq, @jeffhandley\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-25T18:44:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5OTE1NDgyNA==",
                                           "createdAt":  "2020-09-25T21:05:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-h9ow==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zhaobin1021",
                                                                               "createdAt":  "2024-12-11T09:07:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "I am not sure what exactly not working form the code example, but i guess it is related to the schema URI, if that is an external URI .NET Core does not allow resolving external URIs for XML by default. If you believe using the external URIs is safe you can enable it by setting the following AppContext switch on top of your code:\r\n\r\n```csharp\r\nAppContext.SetSwitch(\"Switch.System.Xml.AllowDefaultResolver\", true);\r\n```\r\n\r\nFor more information https://github.com/dotnet/runtime/issues/29346#issuecomment-485798826",
                                           "updatedAt":  "2020-09-25T21:05:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XHOow",
                                           "createdAt":  "2024-12-11T09:08:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zhaobin1021",
                                           "body":  "\u003e I am not sure what exactly not working form the code example, but i guess it is related to the schema URI, if that is an external URI .NET Core does not allow resolving external URIs for XML by default. If you believe using the external URIs is safe you can enable it by setting the following AppContext switch on top of your code:\n\u003e \n\u003e AppContext.SetSwitch(\"Switch.System.Xml.AllowDefaultResolver\", true);\n\u003e For more information [#29346 (comment)](https://github.com/dotnet/runtime/issues/29346#issuecomment-485798826)\n\nThank you. It\u0027s not good to report an error after adding this setting.",
                                           "updatedAt":  "2024-12-11T09:08:56Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "System.Xml.Schema.XmlSchemaValidationException Type is not declared",
        "labels":  [
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44866",
        "createdAt":  "2020-11-18T12:42:16Z",
        "number":  44866,
        "author":  "krwq",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-23T11:16:38Z",
        "body":  "As can be seen below when manually passing null to the constructor/CreateDocumentType as internal subset it prints nothing when serializing and reports null in the property but when parsing it prints extra when serialized `[]` (empty internal subset) and doesn\u0027t serialize to the same as input and property reports string.Empty.\r\n\r\nSee following example:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Xml.Linq;\r\n\r\nXDocumentType dtd1 = new XDocumentType(\"foo\", null, null, null);\r\nConsole.WriteLine(dtd1); // Prints: \u003c!DOCTYPE foo \u003e\r\nConsole.WriteLine(dtd1.InternalSubset ?? \"\u003cnull\u003e\"); // Prints: \"\u003cnull\u003e\"\r\n\r\nXDocumentType dtd2 = new XDocumentType(\"foo\", null, null, string.Empty);\r\nConsole.WriteLine(dtd2); // Prints: \u003c!DOCTYPE foo []\u003e\r\nConsole.WriteLine(dtd2.InternalSubset ?? \"\u003cnull\u003e\"); // Prints nothing (string.Empty)\r\n\r\nXDocument xd1 = XDocument.Parse(\"\u003c!DOCTYPE foo \u003e\u003cfoo/\u003e\");\r\nConsole.WriteLine(xd1.DocumentType.InternalSubset ?? \"\u003cnull\u003e\"); // Prints nothing (string.Empty)\r\nConsole.WriteLine(xd1.DocumentType.ToString()); // Prints: \u003c!DOCTYPE foo []\u003e (differs from input)\r\n\r\nXDocument xd2 = XDocument.Parse(\"\u003c!DOCTYPE foo []\u003e\u003cfoo/\u003e\");\r\nConsole.WriteLine(xd2.DocumentType.InternalSubset ?? \"\u003cnull\u003e\"); // Prints nothing (string.Empty)\r\nConsole.WriteLine(xd2.DocumentType.ToString()); // Prints: \u003c!DOCTYPE foo []\u003e\r\n```\r\n\r\nand similar for XmlDocument\r\n\r\n```csharp\r\nusing System;\r\nusing System.Xml;\r\n\r\nXmlDocument xmldoc3 = new XmlDocument();\r\nXmlDocumentType xdocType1 = xmldoc3.CreateDocumentType(\"foo\", null, null, null);\r\nConsole.WriteLine(xdocType1.OuterXml); // Prints: \u003c!DOCTYPE foo\u003e\r\nConsole.WriteLine(xdocType1.InternalSubset ?? \"\u003cnull\u003e\"); // Prints: \"\u003cnull\u003e\"\r\n\r\nXmlDocumentType xdocType2 = xmldoc3.CreateDocumentType(\"foo\", null, null, string.Empty);\r\nConsole.WriteLine(xdocType2.OuterXml); // Prints: \u003c!DOCTYPE foo[]\u003e\r\nConsole.WriteLine(xdocType2.InternalSubset ?? \"\u003cnull\u003e\"); // Prints nothing (string.Empty)\r\n\r\nXmlDocument xmldoc1 = new XmlDocument();\r\nxmldoc1.LoadXml(\"\u003c!DOCTYPE foo \u003e\u003cfoo/\u003e\");\r\nConsole.WriteLine(xmldoc1.DocumentType.OuterXml); // Prints: \u003c!DOCTYPE foo[]\u003e\r\nConsole.WriteLine(xmldoc1.DocumentType.InternalSubset ?? \"\u003cnull\u003e\"); // Prints nothing (string.Empty)\r\n\r\nXmlDocument xmldoc2 = new XmlDocument();\r\nxmldoc2.LoadXml(\"\u003c!DOCTYPE foo []\u003e\u003cfoo/\u003e\");\r\nConsole.WriteLine(xmldoc2.DocumentType.OuterXml); // Prints: \u003c!DOCTYPE foo[]\u003e\r\nConsole.WriteLine(xmldoc2.DocumentType.InternalSubset ?? \"\u003cnull\u003e\"); // Prints nothing (string.Empty)\r\n```\r\n\r\nFor XmlDocument [the docs](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocumenttype.internalsubset?view=net-5.0#System_Xml_XmlDocumentType_InternalSubset) mention that \"The DTD internal subset on the DOCTYPE. If there is no DTD internal subset, String.Empty is returned.\". But that does not seem to be true as seen in the first example.\r\n\r\nGood thing they\u0027re at least consistent between each other.\r\n\r\nAdditionally [recently](https://github.com/dotnet/runtime/pull/44300/files#diff-6dcf882a73b2db05168fe9308ac11aca79bad7100caaabdefdbbedec9f3e25f0R23) suggested by the docs telling that XmlDocument.InternalSubset doesn\u0027t return null I changed XDocumentType to treat null and string.Empty the same (if passed null you would get same output as for the second example rather than null). I plan to revert this change as part of fix for https://github.com/dotnet/runtime/issues/44489 - we can re-think the behavior in this issue.\r\n\r\nMy suggestion is to do one of the following (first and last option would fix consistency):\r\n- change both parsers and update doc to distinguish between null and string.Empty (third example would show null) - this would be a bit breaking (when parsing you might get null where you wouldn\u0027t expect it although rather rare scenario) but probably match with what people would expect - there is a clear distinction what null and empty means here\r\n- do not change anything (state before my change to XDocumentType), update the docs to reflect reality - not breaking but docs currently document something else and expectations might differ\r\n- make it treat null and string.Empty the same and always produce `\u003c!DOCTYPE foo[]\u003e` when serializing and return string.Empty - assuming users do not care about having extra `[]` in the doctype (cosmetic difference as they have no semantic meaning) this would make it slightly easier to use and at least be consistent between parsing and manually passing subset\r\n\r\ncc: @buyaa-n @Jozkee @stephentoub ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOK32jHw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyOTY1MjQwOQ==",
                                           "createdAt":  "2020-11-18T12:42:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @buyaa-n, @krwq, @jeffhandley\nSee info in area-owners.md if you want to be subscribed.\u003cdetails\u003e\n  \u003csummary\u003eIssue Details\u003c/summary\u003e\n  \u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eDescription:\u003c/th\u003e\n    \u003ctd\u003e\n\nAs can be seen below when manually passing null to the constructor/CreateDocumentType as internal subset it prints nothing when serializing and reports null in the property but when parsing it prints extra when serialized `[]` (empty internal subset) and doesn\u0027t serialize to the same as input and property reports string.Empty.\r\n\r\nSee following example:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Xml.Linq;\r\n\r\nXDocumentType dtd1 = new XDocumentType(\"foo\", null, null, null);\r\nConsole.WriteLine(dtd1); // Prints: \u003c!DOCTYPE foo \u003e\r\nConsole.WriteLine(dtd1.InternalSubset ?? \"\u003cnull\u003e\"); // Prints: \"\u003cnull\u003e\"\r\n\r\nXDocumentType dtd2 = new XDocumentType(\"foo\", null, null, string.Empty);\r\nConsole.WriteLine(dtd2); // Prints: \u003c!DOCTYPE foo []\u003e\r\nConsole.WriteLine(dtd2.InternalSubset ?? \"\u003cnull\u003e\"); // Prints nothing (string.Empty)\r\n\r\nXDocument xd1 = XDocument.Parse(\"\u003c!DOCTYPE foo \u003e\u003cfoo/\u003e\");\r\nConsole.WriteLine(xd1.DocumentType.InternalSubset ?? \"\u003cnull\u003e\"); // Prints nothing (string.Empty)\r\nConsole.WriteLine(xd1.DocumentType.ToString()); // Prints: \u003c!DOCTYPE foo []\u003e (differs from input)\r\n\r\nXDocument xd2 = XDocument.Parse(\"\u003c!DOCTYPE foo []\u003e\u003cfoo/\u003e\");\r\nConsole.WriteLine(xd2.DocumentType.InternalSubset ?? \"\u003cnull\u003e\"); // Prints nothing (string.Empty)\r\nConsole.WriteLine(xd2.DocumentType.ToString()); // Prints: \u003c!DOCTYPE foo []\u003e\r\n```\r\n\r\nand similar for XmlDocument\r\n\r\n```csharp\r\nusing System;\r\nusing System.Xml;\r\n\r\nXmlDocument xmldoc3 = new XmlDocument();\r\nXmlDocumentType xdocType1 = xmldoc3.CreateDocumentType(\"foo\", null, null, null);\r\nConsole.WriteLine(xdocType1.OuterXml); // Prints: \u003c!DOCTYPE foo\u003e\r\nConsole.WriteLine(xdocType1.InternalSubset ?? \"\u003cnull\u003e\"); // Prints: \"\u003cnull\u003e\"\r\n\r\nXmlDocumentType xdocType2 = xmldoc3.CreateDocumentType(\"foo\", null, null, string.Empty);\r\nConsole.WriteLine(xdocType2.OuterXml); // Prints: \u003c!DOCTYPE foo[]\u003e\r\nConsole.WriteLine(xdocType2.InternalSubset ?? \"\u003cnull\u003e\"); // Prints nothing (string.Empty)\r\n\r\nXmlDocument xmldoc1 = new XmlDocument();\r\nxmldoc1.LoadXml(\"\u003c!DOCTYPE foo \u003e\u003cfoo/\u003e\");\r\nConsole.WriteLine(xmldoc1.DocumentType.OuterXml); // Prints: \u003c!DOCTYPE foo[]\u003e\r\nConsole.WriteLine(xmldoc1.DocumentType.InternalSubset ?? \"\u003cnull\u003e\"); // Prints nothing (string.Empty)\r\n\r\nXmlDocument xmldoc2 = new XmlDocument();\r\nxmldoc2.LoadXml(\"\u003c!DOCTYPE foo []\u003e\u003cfoo/\u003e\");\r\nConsole.WriteLine(xmldoc2.DocumentType.OuterXml); // Prints: \u003c!DOCTYPE foo[]\u003e\r\nConsole.WriteLine(xmldoc2.DocumentType.InternalSubset ?? \"\u003cnull\u003e\"); // Prints nothing (string.Empty)\r\n```\r\n\r\nFor XmlDocument [the docs](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocumenttype.internalsubset?view=net-5.0#System_Xml_XmlDocumentType_InternalSubset) mention that \"The DTD internal subset on the DOCTYPE. If there is no DTD internal subset, String.Empty is returned.\". But that does not seem to be true as seen in the first example.\r\n\r\nGood thing they\u0027re at least consistent between each other.\r\n\r\nAdditionally [recently](https://github.com/dotnet/runtime/pull/44300/files#diff-6dcf882a73b2db05168fe9308ac11aca79bad7100caaabdefdbbedec9f3e25f0R23) suggested by the docs telling that XmlDocument.InternalSubset doesn\u0027t return null I changed XDocumentType to treat null and string.Empty the same (if passed null you would get same output as for the second example rather than null). I plan to revert this change as part of fix for https://github.com/dotnet/runtime/issues/44489 - we can re-think the behavior in this issue.\r\n\r\nMy suggestion is to do one of the following (first and last option would fix consistency):\r\n- change both parsers and update doc to distinguish between null and string.Empty (third example would show null) - this would be a bit breaking (when parsing you might get null where you wouldn\u0027t expect it although rather rare scenario) but probably match with what people would expect - there is a clear distinction what null and empty means here\r\n- do not change anything (state before my change to XDocumentType), update the docs to reflect reality - not breaking but docs currently document something else and expectations might differ\r\n- make it treat null and string.Empty the same and always produce `\u003c!DOCTYPE foo[]\u003e` when serializing and return string.Empty - assuming users do not care about having extra `[]` in the doctype (cosmetic difference as they have no semantic meaning) this would make it slightly easier to use and at least be consistent between parsing and manually passing subset\r\n\r\ncc: @buyaa-n @Jozkee @stephentoub \n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekrwq\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003c/details\u003e",
                                           "updatedAt":  "2020-11-18T12:42:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyOTY1NDA0Nw==",
                                           "createdAt":  "2020-11-18T12:45:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "We should fix this in 6.0 timeline. If we do not plan to make product change we should update the docs to reflect reality.",
                                           "updatedAt":  "2020-11-18T12:45:40Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Behavior of XDocumentType/XmlDocumentType.InternalSubset parsing is inconsistent to manual creation",
        "labels":  [
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48400",
        "createdAt":  "2021-02-17T11:25:59Z",
        "number":  48400,
        "author":  "philippdolder",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODIoN6w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "udlose",
                                            "createdAt":  "2025-07-26T18:26:03Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-26T18:28:23Z",
        "body":  "### Description\r\n\r\n*Note:* this post has been edited to summarize the whole discussion.\r\n\r\nI\u0027m experiencing inconsistent behavior regarding XML namespace prefixing. When I create an XElement via `new XElement()` the code behaves differently from when I use `XElement.Parse()` to parse the equivalent XML structure.\r\nSee code sample below. The first assert succeeds. The second assert fails.\r\nThe `root` element knows about the namespace prefixing. After adding both elements to it, only the one created with the constructor gets prefixed properly. See string representations of each object as they are at the end of the `Fact` method.\r\n\r\noriginal: `\u003cmn:p xmlns:mn=\"http://my-namespace.com/\"\u003etext\u003c/mn:p\u003e` \r\ndeserialized: `\u003cp xmlns=\"http://my-namespace.com/\"\u003etext\u003c/p\u003e`\r\nroot: \r\n```xml\r\n\u003chtml xmlns:mn=\"http://my-namespace.com/\"\u003e\r\n  \u003cmn:p\u003etext\u003c/mn:p\u003e\r\n  \u003cp xmlns=\"http://my-namespace.com/\"\u003etext\u003c/p\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n```csharp\r\nnamespace MyNamespace\r\n{\r\n    using System.Xml.Linq;\r\n    using Xunit;\r\n\r\n    public class XmlParsing\r\n    {\r\n        private const string Prefix = \"mn\";\r\n        private static readonly XNamespace Namespace = \"http://my-namespace.com/\";\r\n\r\n        [Fact]\r\n        public void Fact()\r\n        {\r\n            var root = new XElement(\"html\", new XAttribute(XNamespace.Xmlns + Prefix, Namespace));\r\n            var original = new XElement(Namespace + \"p\", \"text\");\r\n\r\n            var deserialized = XElement.Parse(original.ToString());\r\n\r\n            // original: [\u003cp xmlns=\"http://my-namespace.com/\"\u003etext\u003c/p\u003e]\r\n            // deserialized: [\u003cp xmlns=\"http://my-namespace.com/\"\u003etext\u003c/p\u003e]\r\n            Assert.Equal(original.ToString(), deserialized.ToString()); // succeeds\r\n\r\n            root.Add(original);\r\n            root.Add(deserialized);\r\n\r\n            // original: [\u003cmn:p xmlns:mn=\"http://my-namespace.com/\"\u003etext\u003c/mn:p\u003e]\r\n            // deserialized: [\u003cp xmlns=\"http://my-namespace.com/\"\u003etext\u003c/p\u003e]\r\n            Assert.Equal(original.ToString(), deserialized.ToString()); // fails\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI would expect the namespace prefixing to work identical no matter how the `XElement` is created.\r\n\r\nUsing `XDocument` instead, leads to the same error.\r\n```\r\n        public class XmlParsing\r\n        {\r\n            private const string Prefix = \"mn\";\r\n            private static readonly XNamespace Namespace = \"http://my-namespace.com/\";\r\n\r\n            [Fact]\r\n            public void Fact()\r\n            {\r\n                var root = new XElement(\"html\", new XAttribute(XNamespace.Xmlns + Prefix, Namespace));\r\n                var document = new XDocument();\r\n                document.Add(root);\r\n                var original = new XElement(Namespace + \"p\", \"text\");\r\n\r\n                var deserialized = XDocument.Parse(original.ToString()).Root;\r\n\r\n                // original: [\u003cp xmlns=\"http://my-namespace.com/\"\u003etext\u003c/p\u003e]\r\n                // deserialized: [\u003cp xmlns=\"http://my-namespace.com/\"\u003etext\u003c/p\u003e]\r\n                Assert.Equal(original.ToString(), deserialized.ToString()); // succeeds\r\n\r\n                root.Add(original);\r\n                root.Add(deserialized);\r\n\r\n                // original: [\u003cmn:p xmlns:mn=\"http://my-namespace.com/\"\u003etext\u003c/mn:p\u003e]\r\n                // deserialized: [\u003cp xmlns=\"http://my-namespace.com/\"\u003etext\u003c/p\u003e]\r\n                Assert.Equal(original.ToString(), deserialized.ToString()); // fails\r\n            }\r\n        }\r\n```\r\n\r\n\u003e Would be nice to add some justification why do you think this behavior is better and comments with what are the values on each assert\r\nMy expectation would be that the `XElement` implementation behaves exactly the same. Independent of how the `XElement` is created. Be it using the constructor or the `XElement.Parse()` method.\r\n\r\nI also created a [gist](https://gist.github.com/philippdolder/fa4b2d17d5a0c438db4f55decfd70fa3) containing above code to demonstrate the issue.\r\n\r\n### Configuration\r\n\r\nAbove code is running in a netcoreappe3.1 with C# 8.0 nullable enabled on a Windows 10 Pro x64\r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\n* Do you know of any workarounds?\r\n~The only work around I found is to explicitly add the `new XAttribute(XNamespace.Xmlns + Prefix, Namespace)` attribute to the original XElement. Since the xml I\u0027m trying to parse is not 100% under our control, this will not work in the real world scenario.~ \r\nDoesn\u0027t really work, as the resulting xml will contain unnecessary namespace prefix declarations",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOug-ujw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDQ5MTk3OA==",
                                           "createdAt":  "2021-02-17T11:26:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @buyaa-n, @krwq\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI\u0027m experiencing inconsistent behavior regarding XML namespace prefixing. When I create an XElement via `new XElement()` the code behaves differently from when I use `XElement.Parse()` to parse the equivalent XML structure.\r\nSee code sample below. The first assert succeeds. \r\nThe `root` element knows about the namespace prefixing. After adding both elements to it, only the one create with the constructor gets prefixed properly. See string representations of each object at the end of the method.\r\n\r\noriginal: `\u003cmn:p xmlns:mn=\"http://my-namespace.com/\"\u003etext\u003c/mn:p\u003e` \r\ndeserialized: `\u003cp xmlns=\"http://my-namespace.com/\"\u003etext\u003c/p\u003e`\r\nroot: \r\n```xml\r\n\u003chtml xmlns:mn=\"http://my-namespace.com/\"\u003e\r\n  \u003cmn:p\u003etext\u003c/mn:p\u003e\r\n  \u003cp xmlns=\"http://my-namespace.com/\"\u003etext\u003c/p\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n```csharp\r\nnamespace MyNamespace\r\n{\r\n    using System.Xml.Linq;\r\n    using Xunit;\r\n\r\n    public class XmlParsing\r\n    {\r\n        private const string Prefix = \"mn\";\r\n        private static readonly XNamespace Namespace = \"http://my-namespace.com/\";\r\n\r\n        [Fact]\r\n        public void Fact()\r\n        {\r\n            var root = new XElement(\"html\", new XAttribute(XNamespace.Xmlns + Prefix, Namespace));\r\n            var original = new XElement(Namespace + \"p\", \"text\");\r\n\r\n            var deserialized = XElement.Parse(original.ToString());\r\n\r\n            Assert.Equal(original.ToString(), deserialized.ToString());\r\n\r\n            root.Add(original);\r\n            root.Add(deserialized);\r\n\r\n            Assert.Equal(original.ToString(), deserialized.ToString());\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI would expect the namespace prefixing to work identical no matter how the `XElement` is created.\r\n\r\nI also created a [gist](https://gist.github.com/philippdolder/fa4b2d17d5a0c438db4f55decfd70fa3) containing above code to demonstrate the issue.\r\n\r\n### Configuration\r\n\r\nAbove code is running in a netcoreappe3.1 with C# 8.0 nullable enabled on a Windows 10 Pro x64\r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\n* Do you know of any workarounds?\r\nThe only work around I found is to explicitly add the `new XAttribute(XNamespace.Xmlns + Prefix, Namespace)` attribute to the original XElement. Since the xml I\u0027m trying to parse is not 100% under our control, this will not work in the real world scenario.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ephilippdolder\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-17T11:26:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDU3NjE3OQ==",
                                           "createdAt":  "2021-02-17T14:01:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "watfordgnf",
                                           "body":  "The order of operation appears to matters here. If `original` is detached from `root` when you create `deserialized` then you receive the behavior you see.\r\n\r\nIf you change your source like so you receive the intended behavior:\r\n```\r\n\u003e var root = new XElement(\"html\", new XAttribute(XNamespace.Xmlns + Prefix, Namespace));\r\n\u003e var original = new XElement(Namespace + \"p\", \"text\");\r\n\u003e root.Add(original);\r\n\u003e var deserialized = XElement.Parse(original.ToString());\r\n\u003e original\r\n[\u003cmn:p xmlns:mn=\"http://my-namespace.com/\"\u003etext\u003c/mn:p\u003e]\r\n\u003e deserialized\r\n[\u003cmn:p xmlns:mn=\"http://my-namespace.com/\"\u003etext\u003c/mn:p\u003e]\r\n```\r\nNot sure if this helps in the interim.",
                                           "updatedAt":  "2021-02-17T14:01:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDU4MTA2OQ==",
                                           "createdAt":  "2021-02-17T14:09:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "philippdolder",
                                           "body":  "@watfordgnf thanks for the suggestion.\r\n\r\nUnfortunately in the real use case, I don\u0027t have access to the root element at this level. Only later will it be composed from all the different parts making up the complete XML.",
                                           "updatedAt":  "2021-02-17T14:09:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDYxNTY1MA==",
                                           "createdAt":  "2021-02-17T15:01:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "watfordgnf",
                                           "body":  "In both cases `original.Name == deserialized.Name` so functionally they\u0027re identical and this matches the XML spec. From [\"Namespaces in XML 1.0\"](https://www.w3.org/TR/xml-names/#sec-namespaces):\r\n\u003e Applications SHOULD use the namespace name, not the prefix, in constructing names whose scope extends beyond the containing document.\r\n\r\nIt appears `XElement.ToString` is the behavioral difference based on the presence or absence of a parent element containing the namespace binding to a prefix. Delving into `XElement.ToString`, you end up in `XNode.ToString` which sets up an `XmlWriter` that gets passed to `XElement.WriteTo`, eventually making it to `ElementWriter.WriteElement`:\r\nhttps://github.com/dotnet/runtime/blob/247212f65966e43bea8d53dcf551137ea247ef0a/src/libraries/System.Private.Xml.Linq/src/System/Xml/Linq/XLinq.cs#L206-L209\r\n\r\nThat call to `PushAncestors` grabs any namespace declarations (and bindings) from its ancestor elements and puts them in the resolver to use when writing the qualified name of an element or attribute (line 320):\r\nhttps://github.com/dotnet/runtime/blob/247212f65966e43bea8d53dcf551137ea247ef0a/src/libraries/System.Private.Xml.Linq/src/System/Xml/Linq/XLinq.cs#L306-L325\r\n\r\nWithout any ancestors `ElementWriter.WriteStartElement` will use [`NameSpaceResolver.GetPrefixOfNamespace` passing `allowDefaultNamespace = true`](https://github.com/dotnet/runtime/blob/247212f65966e43bea8d53dcf551137ea247ef0a/src/libraries/System.Private.Xml.Linq/src/System/Xml/Linq/XLinq.cs#L490). This selects the elements\u0027 namespace as the default rather than using any binding, because there are none setup at this point.\r\n\r\nThat was also a long way of saying that the specific binding is being lost when reading it in (lines 907 and 912):\r\nhttps://github.com/dotnet/runtime/blob/9195df699fe25d2e752c2bc350c16dc199f02f7a/src/libraries/System.Private.Xml.Linq/src/System/Xml/Linq/XContainer.cs#L902-L916\r\n\r\nI\u0027m not _quite_ sure how you could change `ContentReader` to do that without making things weird when you attached an XML fragment to a document or other element.",
                                           "updatedAt":  "2021-02-17T15:01:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MTI0MjI4MQ==",
                                           "createdAt":  "2021-02-18T10:25:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "philippdolder",
                                           "body":  "I was hoping that I could work around this by using `XElement.Load` with custom `XmlReaderSettings` but from what I understand it\u0027s how XElement and friends are implemented",
                                           "updatedAt":  "2021-02-18T10:25:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MTQzODA5OA==",
                                           "createdAt":  "2021-02-18T15:47:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mayorovp",
                                           "body":  "@philippdolder you can workaround this by cleaning all namespace declarations after deserialization:\r\n\r\n```cs\r\ndeserialized.DescendantsAndSelf().Attributes().Where(a =\u003e a.IsNamespaceDeclaration).Remove();\r\n```\r\n\r\nor by adding all required prefixes before serialization:\r\n\r\n```cs\r\noriginal.SetAttributeValue(XNamespace.Xmlns + Prefix, Namespace.NamespaceName);\r\n```\r\n\r\n\u003e but from what I understand it\u0027s how XElement and friends are implemented\r\n\r\nNo, it\u0027s how XML designed. The isolated string `\"\u003cmn:p\u003etext\u003c/mn:p\u003e\"` is an invalid XML.\r\n",
                                           "updatedAt":  "2021-02-18T15:51:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MTUwNTM2Ng==",
                                           "createdAt":  "2021-02-18T17:22:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEBPgg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2025-01-25T23:10:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "philippdolder",
                                           "body":  "@mayorovp Thanks for the hints\r\n\r\n\u003e No, it\u0027s how XML designed. The isolated string `\"\u003cmn:p\u003etext\u003c/mn:p\u003e\"` is an invalid XML.\r\n\r\nI\u0027m not claiming this string in isolation is valid xml though. I\u0027m totally aware that in isolation it needs to have the namespace prefix declaration inside the tag itself.\r\n\r\n",
                                           "updatedAt":  "2021-02-19T07:47:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3ODQ1ODgwMg==",
                                           "createdAt":  "2021-07-12T17:26:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "Can you repro this with XDocument rather than XElement? If not I\u0027m leaning to close this as \"by design\"",
                                           "updatedAt":  "2021-07-12T17:26:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTExMzkwNw==",
                                           "createdAt":  "2021-07-13T14:00:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcCKrw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krwq",
                                                                               "createdAt":  "2021-07-20T16:25:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2025-07-26T18:26:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "philippdolder",
                                           "body":  "\u003e Can you repro this with XDocument rather than XElement? If not I\u0027m leaning to close this as \"by design\"\r\n\r\nThis test still fails with the same error.\r\n```\r\n        public class XmlParsing\r\n        {\r\n            private const string Prefix = \"mn\";\r\n            private static readonly XNamespace Namespace = \"http://my-namespace.com/\";\r\n\r\n            [Fact]\r\n            public void Fact()\r\n            {\r\n                var root = new XElement(\"html\", new XAttribute(XNamespace.Xmlns + Prefix, Namespace));\r\n                var document = new XDocument();\r\n                document.Add(root);\r\n                var original = new XElement(Namespace + \"p\", \"text\");\r\n\r\n                var deserialized = XDocument.Parse(original.ToString()).Root;\r\n\r\n                Assert.Equal(original.ToString(), deserialized.ToString());\r\n\r\n                root.Add(original);\r\n                root.Add(deserialized);\r\n\r\n                Assert.Equal(original.ToString(), deserialized.ToString());\r\n            }\r\n        }\r\n```",
                                           "updatedAt":  "2021-07-13T14:00:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40qZdR",
                                           "createdAt":  "2021-07-20T16:29:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0YrIQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "philippdolder",
                                                                               "createdAt":  "2021-07-29T14:42:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "krwq",
                                           "body":  "@philippdolder can you edit the first post here to summarize this thread with latest info to make it easier for anyone to pick this up? Would be nice to add some justification why do you think this behavior is better and comments with what are the values on each assert",
                                           "updatedAt":  "2021-07-20T16:31:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41F4k2",
                                           "createdAt":  "2021-08-02T05:48:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "philippdolder",
                                           "body":  "\u003e @philippdolder can you edit the first post here to summarize this thread with latest info to make it easier for anyone to pick this up? \r\n\r\n@krwq done. and it seems the bot changed labels and moved the issue around again",
                                           "updatedAt":  "2021-08-02T05:48:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41TVJm",
                                           "createdAt":  "2021-08-06T13:26:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@philippdolder thanks! No worries about the bot. As for this issue to set the expectations: I\u0027m not sure this will get fixed - currently even though it doesn\u0027t roundtrip with serialization both XMLs are equivalent - all elements have the same local name and the namespace and the content and the difference is just the prefix which doesn\u0027t have any meaning and just improves readability. Perhaps some knobs in the serialization which would allow roundtripping might be a better solution than a re-design...",
                                           "updatedAt":  "2021-08-06T13:26:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6b0ITI",
                                           "createdAt":  "2025-01-25T23:28:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "udlose",
                                           "body":  "Unfortunately, I think this is a design flaw in LINQ to XML. The .NET traditional XML DOM implementation maintains the original element and attribute prefixes: [XmlElement.Prefix](https://learn.microsoft.com/en-us/dotnet/api/system.xml.xmlelement.prefix?view=net-9.0) and [XmlAttribute.Prefix](https://learn.microsoft.com/en-us/dotnet/api/system.xml.xmlattribute.prefix?view=net-9.0). While you can call `XElement.GetPrefixOfNamespace()`, it doesn\u0027t maintain the correct mappings.\n\nI\u0027m writing an application to implement semantic equality using LINQ to XML and this shortcoming has caused some pain points. For example, if I have superfluous namespace declarations (which is perfectly valid xml), LINQ to XML only picks up the first one doesn\u0027t maintain records of all of the superfluous/duplicates.\n\nFor example (from [W3C - Test cases for Canonical XML 2.0: 3.5 Superfluous Namespace declarations](https://www.w3.org/TR/xml-c14n2-testcases/#sec-Superfluous)), the following is possible and legal/valid xml but it is impossible to canonicalize according to the spec using LINQ to XML because of this \"namespace aggregation\". Note that all namespace declarations point to the same namespace but just use different prefixes:\n```\n\u003cfoo xmlns:a=\"http://z0\" xmlns:b=\"http://z0\" a:att1=\"val1\" b:att2=\"val2\" xmlns=\"http://z0\"\u003e \n \u003cc:bar xmlns:a=\"http://z0\" xmlns:c=\"http://z0\" c:att3=\"val3\"/\u003e\n \u003cd:bar xmlns:d=\"http://z0\"/\u003e\n\u003c/foo\u003e\n```\nI\u0027d love to see a fix here!",
                                           "updatedAt":  "2025-07-26T18:28:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6duhLg",
                                           "createdAt":  "2025-02-09T12:39:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Assigned to @krwq for further triage.",
                                           "updatedAt":  "2025-02-09T12:39:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dvyFt",
                                           "createdAt":  "2025-02-09T19:22:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "udlose",
                                           "body":  "Using an example with Superfluous Namespaces provides additional context to the inconsistencies and how they manifest.\n\n`GetPrefixOfNamespace` not returning the correct value, but the xml is serialized correctly:\n\n```\n//default namespace declared last\nvar xml =\n  \"\"\"\n  \u003cfoo xmlns:a=\"http://z0\" xmlns:b=\"http://z0\" a:att1=\"val1\" b:att2=\"val2\" xmlns=\"http://z0\"\u003e \n    \u003cc:bar xmlns:a=\"http://z0\" xmlns:c=\"http://z0\" c:att3=\"val3\"/\u003e\n    \u003cd:bar xmlns:d=\"http://z0\"/\u003e\n  \u003c/foo\u003e\n  \"\"\";\n\n//using XDocument.Parse\nvar document = XDocument.Parse(xml);\nConsole.WriteLine(document);\nvar rootPrefix = document.Root.GetPrefixOfNamespace(document.Root.Name.Namespace);\nConsole.WriteLine($\"Using XDocument.Parse: prefix of root element \u0027{document.Root.Name}\u0027 is \u0027{rootPrefix}\u0027\");\n\n//using XElement.Parse\nvar element = XElement.Parse(xml);\nvar elementPrefix = element.GetPrefixOfNamespace(element.Name.Namespace);\nConsole.WriteLine($\"Using XElement.Parse: prefix of root element \u0027{element.Name}\u0027 is \u0027{elementPrefix}\u0027\");\n```\n\nThe output is:\n```\n\u003cfoo xmlns:a=\"http://z0\" xmlns:b=\"http://z0\" b:att1=\"val1\" b:att2=\"val2\" xmlns=\"http://z0\"\u003e\n  \u003cc:bar xmlns:a=\"http://z0\" xmlns:c=\"http://z0\" c:att3=\"val3\" /\u003e\n  \u003cd:bar xmlns:d=\"http://z0\" /\u003e\n\u003c/foo\u003e\nUsing XDocument.Parse: prefix of root element \u0027{http://z0}foo\u0027 is \u0027a\u0027\nUsing XElement.Parse: prefix of root element \u0027{http://z0}foo\u0027 is \u0027a\u0027\n```\n\n`foo` is serialized without any prefix as would be expected, but the prefix is somehow `a`. This is clearly wrong. I would expect `GetPrefixOfNamespace` to return `null` since `foo` doesn\u0027t have a prefix. However, it returns the prefix of the first declared namespace that matches the namespace of the given element which in this case is `a`. If you were to swap order of `xmlns:a` and `xmlns:b` so `xmlns:b` is declared first, the prefix of `foo` would be `b` which is also clearly wrong. \n\nEven more misleading/counter-intuitive is the following:\n`GetPrefixOfNamespace` not returning the correct value, and the xml is NOT serialized correctly:\n```\n//default namespace declared first\nvar xml =\n    \"\"\"\n    \u003cfoo xmlns=\"http://z0\" xmlns:a=\"http://z0\" a:att1=\"val1\" b:att2=\"val2\" xmlns:b=\"http://z0\"\u003e \n      \u003cc:bar xmlns:a=\"http://z0\" xmlns:c=\"http://z0\" c:att3=\"val3\"/\u003e\n      \u003cd:bar xmlns:d=\"http://z0\"/\u003e\n    \u003c/foo\u003e\n    \"\"\";\n\n//using XDocument.Parse\nvar document = XDocument.Parse(xml);\nConsole.WriteLine(document);\nvar rootPrefix = document.Root.GetPrefixOfNamespace(document.Root.Name.Namespace);\nConsole.WriteLine($\"Using XDocument.Parse: prefix of root element \u0027{document.Root.Name}\u0027 is \u0027{rootPrefix}\u0027\");\n\n//using XElement.Parse\nvar element = XElement.Parse(xml);\nvar elementPrefix = element.GetPrefixOfNamespace(element.Name.Namespace);\nConsole.WriteLine($\"Using XElement.Parse: prefix of root element \u0027{element.Name}\u0027 is \u0027{elementPrefix}\u0027\");\n```\n\nThe output is:\n```\n\u003cb:foo xmlns=\"http://z0\" xmlns:a=\"http://z0\" b:att1=\"val1\" b:att2=\"val2\" xmlns:b=\"http://z0\"\u003e\n  \u003cc:bar xmlns:a=\"http://z0\" xmlns:c=\"http://z0\" c:att3=\"val3\" /\u003e\n  \u003cd:bar xmlns:d=\"http://z0\" /\u003e\n\u003c/b:foo\u003e\nUsing XDocument.Parse: prefix of root element \u0027{http://z0}foo\u0027 is \u0027a\u0027\nUsing XElement.Parse: prefix of root element \u0027{http://z0}foo\u0027 is \u0027a\u0027\n```\n\nNow `foo` is serialized with a prefix of `b` (incorrect) but even more confusing is `GetPrefixOfNamespace` returns `a` so it doesn\u0027t match what is being serialized, nor does it match the original xml where `foo` has no prefix.",
                                           "updatedAt":  "2025-02-09T19:22:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fIrp1",
                                           "createdAt":  "2025-02-19T21:58:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "udlose",
                                           "body":  "Hi @krwq , @jeffhandley \nI was wondering what the timeframe is for working on this issue. Thanks!",
                                           "updatedAt":  "2025-02-19T21:58:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66D66P",
                                           "createdAt":  "2025-07-26T10:14:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "We are unlikely to make a fix for this. Putting it into Future for others affected to be able to comment or upvote.",
                                           "updatedAt":  "2025-07-26T10:14:33Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "LINQ to XML: Inconsistent namespace prefix handling",
        "labels":  [
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49308",
        "createdAt":  "2021-03-05T21:38:54Z",
        "number":  49308,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-05-20T16:19:55Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/With-Blazor-WebAssembly-XML-validation-/1356252)._\n\n---\n[severity:I\u0027m unable to use this version]\r\nThe following code works fine on localhost, but produces limited error messages when deployed to an Azure Static Web App through GitHub.\n\n```\n    string ValidationResult=\"All good\";\n    protected override async Task OnInitializedAsync()\n    {\n        string path = \"sample-data/Books.xml\";\n        byte[] byteArrayS = await _client. GetByteArrayAsync(path);\n        Console.WriteLine($\"{path}: {byteArrayS.Length}\");\n        MemoryStream streamS = new MemoryStream(byteArrayS);\n        XmlReader xmlReader = XmlReader.Create(streamS);\n\nXmlDocument document = new XmlDocument();\n        //document. Validate();\n        try\n        {\n            document. Load(xmlReader);\n        }\n        catch (Exception e)\n        {\n\nConsole.WriteLine($\"Validation Error: {e.Message} on line \");\n            ValidationResult = e.Message;\n        }\n    }\n```\nWhen loading the badly formed XML file books.html (attached), the line `document. Load(xmlReader);` fires an error.  The problem is that while on localhost this error has a meaningful message, such as:\n```\n\u0027\u003c\u0027 is an unexpected token. The expected token is \u0027\u003e\u0027. Line 6, position 5.\n```\nThe deployed version produces a meaningless error message:\n```\nXml_MessageWithErrorPosition, Xml_UnexpectedTokenEx, 6, 5\n```\nAm I doing something wrong?  Is this a bug?\n\nI have created a public repo at https://github.com/GilShalit/XMLValidation\n\n[Books.xml] (https://aka.ms/dc/file?name=B46c6ab30f4824fb888ce490ae7655355637503790903832654_Books.xml\u0026tid=46c6ab30f4824fb888ce490ae7655355637503790903832654)\n\n---\n### Original Comments\n\n#### Feedback Bot on 3/3/2021, 11:00 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMizK2A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjkzMTYyMQ==",
                                           "createdAt":  "2021-03-08T17:33:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @buyaa-n, @krwq\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/With-Blazor-WebAssembly-XML-validation-/1356252)._\n\n---\n[severity:I\u0027m unable to use this version]\r\nThe following code works fine on localhost, but produces limited error messages when deployed to an Azure Static Web App through GitHub.\n\n```\n    string ValidationResult=\"All good\";\n    protected override async Task OnInitializedAsync()\n    {\n        string path = \"sample-data/Books.xml\";\n        byte[] byteArrayS = await _client. GetByteArrayAsync(path);\n        Console.WriteLine($\"{path}: {byteArrayS.Length}\");\n        MemoryStream streamS = new MemoryStream(byteArrayS);\n        XmlReader xmlReader = XmlReader.Create(streamS);\n\nXmlDocument document = new XmlDocument();\n        //document. Validate();\n        try\n        {\n            document. Load(xmlReader);\n        }\n        catch (Exception e)\n        {\n\nConsole.WriteLine($\"Validation Error: {e.Message} on line \");\n            ValidationResult = e.Message;\n        }\n    }\n```\nWhen loading the badly formed XML file books.html (attached), the line `document. Load(xmlReader);` fires an error.  The problem is that while on localhost this error has a meaningful message, such as:\n```\n\u0027\u003c\u0027 is an unexpected token. The expected token is \u0027\u003e\u0027. Line 6, position 5.\n```\nThe deployed version produces a meaningless error message:\n```\nXml_MessageWithErrorPosition, Xml_UnexpectedTokenEx, 6, 5\n```\nAm I doing something wrong?  Is this a bug?\n\nI have created a public repo at https://github.com/GilShalit/XMLValidation\n\n[Books.xml] (https://aka.ms/dc/file?name=B46c6ab30f4824fb888ce490ae7655355637503790903832654_Books.xml\u0026tid=46c6ab30f4824fb888ce490ae7655355637503790903832654)\n\n---\n### Original Comments\n\n#### Feedback Bot on 3/3/2021, 11:00 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-08T17:33:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjkzMTgyMA==",
                                           "createdAt":  "2021-03-08T17:33:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "@eerhardt this seems to be linker related.",
                                           "updatedAt":  "2021-03-08T17:33:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjkzMjQ4NA==",
                                           "createdAt":  "2021-03-08T17:34:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "Thanks for contacting us.\r\nTo work around this probably for now you can disable the linker as described in https://docs.microsoft.com/en-us/aspnet/core/blazor/host-and-deploy/configure-linker?view=aspnetcore-3.1",
                                           "updatedAt":  "2021-03-08T17:34:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjkzNjE2Ng==",
                                           "createdAt":  "2021-03-08T17:36:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027linkable-framework\u0027: @eerhardt, @vitek-karas, @LakshanF, @tannergooding, @sbomer\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/With-Blazor-WebAssembly-XML-validation-/1356252)._\n\n---\n[severity:I\u0027m unable to use this version]\r\nThe following code works fine on localhost, but produces limited error messages when deployed to an Azure Static Web App through GitHub.\n\n```\n    string ValidationResult=\"All good\";\n    protected override async Task OnInitializedAsync()\n    {\n        string path = \"sample-data/Books.xml\";\n        byte[] byteArrayS = await _client. GetByteArrayAsync(path);\n        Console.WriteLine($\"{path}: {byteArrayS.Length}\");\n        MemoryStream streamS = new MemoryStream(byteArrayS);\n        XmlReader xmlReader = XmlReader.Create(streamS);\n\nXmlDocument document = new XmlDocument();\n        //document. Validate();\n        try\n        {\n            document. Load(xmlReader);\n        }\n        catch (Exception e)\n        {\n\nConsole.WriteLine($\"Validation Error: {e.Message} on line \");\n            ValidationResult = e.Message;\n        }\n    }\n```\nWhen loading the badly formed XML file books.html (attached), the line `document. Load(xmlReader);` fires an error.  The problem is that while on localhost this error has a meaningful message, such as:\n```\n\u0027\u003c\u0027 is an unexpected token. The expected token is \u0027\u003e\u0027. Line 6, position 5.\n```\nThe deployed version produces a meaningless error message:\n```\nXml_MessageWithErrorPosition, Xml_UnexpectedTokenEx, 6, 5\n```\nAm I doing something wrong?  Is this a bug?\n\nI have created a public repo at https://github.com/GilShalit/XMLValidation\n\n[Books.xml] (https://aka.ms/dc/file?name=B46c6ab30f4824fb888ce490ae7655355637503790903832654_Books.xml\u0026tid=46c6ab30f4824fb888ce490ae7655355637503790903832654)\n\n---\n### Original Comments\n\n#### Feedback Bot on 3/3/2021, 11:00 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `linkable-framework`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-08T17:36:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjkzNjczMQ==",
                                           "createdAt":  "2021-03-08T17:36:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBip3Gw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mkArtakMSFT",
                                                                               "createdAt":  "2021-03-08T19:24:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@joperezr is currently working on annotating System.Xml to make it linker safe.",
                                           "updatedAt":  "2021-03-08T17:36:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MzY1OTE3OA==",
                                           "createdAt":  "2021-03-09T10:08:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GilShalit",
                                           "body":  "\u003e Thanks for contacting us.\r\n\u003e To work around this probably for now you can disable the linker as described in https://docs.microsoft.com/en-us/aspnet/core/blazor/host-and-deploy/configure-linker?view=aspnetcore-3.1\r\n\r\nI am the original poster from the dev community. \r\n\r\nI have tried this work around and had no success.  This can be tested on the sample repo at https://github.com/GilShalit/XMLValidation.  \r\n\r\nWhen loading a malformed XML, the message is \r\n`Xml_MessageWithErrorPosition, Xml_UnexpectedTokenEx, 6, 5` \r\nwhile when running locally I get\r\n`\u0027\u003c\u0027 is an unexpected token. The expected token is \u0027\u003e\u0027. Line 6, position 5.`",
                                           "updatedAt":  "2021-03-09T10:09:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MzY2NTYzMQ==",
                                           "createdAt":  "2021-03-09T10:14:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "This is expected - to reduce the size of the app all exception messages in the framework are removed. If you need to enable them, set `UseSystemResourceKeys` property to false and rebuild.",
                                           "updatedAt":  "2021-03-09T10:14:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NDEzNzQ0NQ==",
                                           "createdAt":  "2021-03-09T16:39:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GilShalit",
                                           "body":  "\u003e This is expected - to reduce the size of the app all exception messages in the framework are removed. If you need to enable them, set `UseSystemResourceKeys` property to false and rebuild.\r\n\r\nYes! This works! So will use this as a work around until @joperezr makes System.Xml linker safe...\r\n\r\nBut this raises a question - how can XML validation be performed if all exception messages are removed?  Is this temporary?",
                                           "updatedAt":  "2021-03-09T16:47:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NDE0NzQ5Mw==",
                                           "createdAt":  "2021-03-09T16:47:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I just want to point out that the removal of exception messages will remain - even once the assembly is trim compatible. it actually saves quite a bit of size for Blazor.",
                                           "updatedAt":  "2021-03-09T16:47:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NDE1MDE4Nw==",
                                           "createdAt":  "2021-03-09T16:49:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GilShalit",
                                           "body":  "\u003e I just want to point out that the removal of exception messages will remain - even once the assembly is trim compatible. it actually saves quite a bit of size for Blazor.\r\n\r\nSorry, edited my response while you were pointing out... So will we not be able to perform XML validation without setting UseSystemResourceKeys  to true?",
                                           "updatedAt":  "2021-03-09T16:49:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NDM4NzY2MQ==",
                                           "createdAt":  "2021-03-09T20:06:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The validation will work in that you will get the same exceptions at the same time - it\u0027s just the exception messages which will be different. If you need the existing exception messages then using the `UseSystemResourceKeys=false` is the way to go - but be aware of the size penalty for it. Currently we don\u0027t have a way to set this per-assembly, so it will apply to the entire framework.",
                                           "updatedAt":  "2021-03-09T20:06:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NDM4ODg4Mg==",
                                           "createdAt":  "2021-03-09T20:07:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Finally read the actual issue posted above - the planned work to make System.Xml trim compatible will have no effect on this issue.",
                                           "updatedAt":  "2021-03-09T20:07:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NDUzNzUzNA==",
                                           "createdAt":  "2021-03-09T22:24:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e the planned work to make System.Xml trim compatible will have no effect on this issue.\r\n\r\nSorry 😊 that was me reading the issue too fast and not fully grasping the issue.",
                                           "updatedAt":  "2021-03-09T22:24:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NTAzNTA2NA==",
                                           "createdAt":  "2021-03-10T07:45:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GilShalit",
                                           "body":  "\u003e The validation will work in that you will get the same exceptions at the same time - it\u0027s just the exception messages which will be different. If you need the existing exception messages then using the `UseSystemResourceKeys=false` is the way to go - but be aware of the size penalty for it. Currently we don\u0027t have a way to set this per-assembly, so it will apply to the entire framework.\r\n\r\nI wander if having a per assembly setting does not make sense in a future version. There are business processes that depend on event processing and stripping out the event messages is crippling.  XML validation is a case in point - the [Microsoft documentation](https://docs.microsoft.com/en-us/dotnet/api/system.xml.schema.xmlschemavalidator?view=net-5.0) calls for creating a `ValidationEventHandler` and processing it\u0027s messages.  The promise of Blazor as allowing the power of .Net in the browser is not fulfilled here...\r\n",
                                           "updatedAt":  "2021-03-10T07:45:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NTE4MjYwOA==",
                                           "createdAt":  "2021-03-10T10:01:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Maybe a better solution would be to have a set of specific features which allow per-feature inclusion of exception messages. For example the XML schema validation lives in the same assembly as pretty much everything else from XML, and you\u0027re probably not interested in exception messages for XmlWriter and so on.\r\n\r\nI\u0027m just curious - what is the scenario of XML schema validation on the Blazor client side? (Also please note that the perf is probably going to be another issue with such setup - processing even medium size XMLs this way will probably be VERY slow in the browser. We\u0027re working on it, but right now from what I\u0027ve tried, it\u0027s pretty slow).",
                                           "updatedAt":  "2021-03-10T10:01:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NTQ3NDU5NA==",
                                           "createdAt":  "2021-03-10T14:18:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GilShalit",
                                           "body":  "Your solution makes a lot of sense.\r\n\r\nThe scenario is creating a [Tei XML](https://tei-c.org/) editor for preparing annotated Tei editions in Digital Humanities research projects. Validating a 300kb XML file takes a second or two which is acceptable.\r\n\r\nI\u0027m using Blazor WebAssembly because I want to create a browser-only solution to be served as static files to reduce costs to a minimum.  And because I wanted to learn this new framework after not enjoying Angular/React at all...",
                                           "updatedAt":  "2021-03-10T14:30:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NTUwMTQ1MQ==",
                                           "createdAt":  "2021-03-10T14:32:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Thanks a lot for the scenario description. Makes sense.",
                                           "updatedAt":  "2021-03-10T14:32:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MDcyNjUyMg==",
                                           "createdAt":  "2021-05-13T17:53:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "@GilShalit as explained above unfortunately today the only way to workaround this is by setting that property to false and rebuilding. The exception messages that you will get aren\u0027t really \"meaningless\", and technically you could still map the key with the actual message that would have been printed, for example:\r\nYour particular message is created in this line:\r\n\r\nhttps://github.com/dotnet/runtime/blob/01b7e73cd378145264a7cb7a09365b41ed42b240/src/libraries/System.Private.Xml/src/System/Xml/XmlException.cs#L205\r\n\r\nwhich maps to \r\n\r\nhttps://github.com/dotnet/runtime/blob/01b7e73cd378145264a7cb7a09365b41ed42b240/src/libraries/System.Private.Xml/src/Resources/Strings.resx#L189-L191\r\n\r\nAnd Xml_UnexpectedTokenEx maps to \r\n\r\nhttps://github.com/dotnet/runtime/blob/01b7e73cd378145264a7cb7a09365b41ed42b240/src/libraries/System.Private.Xml/src/Resources/Strings.resx#L192-L194\r\n\r\nAll that said, is it ok from your side to set the property to false as a solution taking into account that this will cause an increase size in your application? (Given that by setting that to false, now all framework string resources from the framework like exception messages will not be trimmed from your application) In case the answer to that question is no, then we can have a feature request to have a control knob when trimming resources based on specific feature areas like @vitek-karas suggests.",
                                           "updatedAt":  "2021-05-13T17:53:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MTc5NjMxMg==",
                                           "createdAt":  "2021-05-16T10:14:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GilShalit",
                                           "body":  "@joperezr I am currently setting the property to false in my shipping tool and living with the increased application size.  But I think of it as a sub-optimal solution and I think a (not extremely urgent) feature request should be added for the control knob to trim resources selectively as per @vitek-karas \u0027s suggestion.\r\n\r\nAnother point is that I was floored by the different behavior in development and running on the localhost, where nothing was trimmed to the behavior in production.  Not sure what the solution should be but I thing this should either be changed or better highlighted somewhere.\r\n ",
                                           "updatedAt":  "2021-05-16T10:14:32Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "With Blazor WebAssembly, XML validation errors are not reported correctly ONLY when deployed",
        "labels":  [
                       "area-System.Xml",
                       "linkable-framework"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49418",
        "createdAt":  "2021-03-10T06:04:36Z",
        "number":  49418,
        "author":  "ladipro",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_Q8tA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "udlose",
                                            "createdAt":  "2025-02-20T00:41:50Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-03-08T00:22:55Z",
        "body":  "## Background and Motivation\r\n\r\n`XmlTextReader` exposes the `Normalization` property, by default false, which affects whitespace and attribute value handling. No such property is exposed on `XmlReader` even though it is internally available on `XmlTextReaderImpl` where it is effectively hard-coded to true. If the developer wishes to move to the newer API, to be able to specify `XmlReaderSettings` for example, they have no choice but also change whitespace and attribute value handling, which may not be desirable.\r\n\r\n## Proposed API\r\n\r\nTechnically the following should work but it may as well be a new property on `XmlReaderSettings`.\r\n\r\n```diff\r\nnamespace System.Xml\r\n{\r\n    public abstract class XmlReader : IDisposable {\r\n+        public virtual bool Normalization { get; set; }\r\n     }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\nSee https://github.com/dotnet/msbuild/pull/6232 for an example. The change would make XML parsing in MSBuild significantly faster if the property proposed here was available. In the PR `XmlTextReaderImpl.Normalization` is called via reflection as a proof of the concept.\r\n\r\n## Alternative Designs\r\n\r\nUnaware of alternative approaches other than implementing our own XML parser.\r\n\r\n## Risks\r\n\r\nN/A",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoWVXuQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NDkzNzM3NA==",
                                           "createdAt":  "2021-03-10T06:04:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @buyaa-n, @krwq\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\n`XmlTextReader` exposes the `Normalization` property, by default false, which affects whitespace and attribute value handling. No such property is exposed on `XmlReader` even though it is internally available on `XmlTextReaderImpl` where it is effectively hard-coded to true. If the developer wishes to move to the newer API, to be able to specify `XmlReaderSettings` for example, they have no choice but also change whitespace and attribute value handling, which may not be desirable.\r\n\r\n## Proposed API\r\n\r\nTechnically the following should work but it may as well be a new property on `XmlReaderSettings`.\r\n\r\n```diff\r\nnamespace System.Xml\r\n{\r\n    public abstract class XmlReader : IDisposable {\r\n+        public virtual bool Normalization { get; set; }\r\n     }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\nSee https://github.com/dotnet/msbuild/pull/6232 for an example. The change would make XML parsing in MSBuild significantly faster if the property proposed here was available. In the PR `XmlTextReaderImpl.Normalization` is called via reflection as a proof of the concept.\r\n\r\n## Alternative Designs\r\n\r\nUnaware of alternative approaches other than implementing our own XML parser.\r\n\r\n## Risks\r\n\r\nN/A\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eladipro\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-10T06:04:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NzUzOTg4NA==",
                                           "createdAt":  "2021-03-12T14:54:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@ladipro can you provide code samples and output for reference with what\u0027s currently not possible and what Normalization allows you to do?",
                                           "updatedAt":  "2021-03-12T14:54:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5Nzc0NzQxNw==",
                                           "createdAt":  "2021-03-12T20:50:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBjtO-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "buyaa-n",
                                                                               "createdAt":  "2021-03-16T22:54:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ladipro",
                                           "body":  "@krwq here\u0027s an example, the XML is copied from an MSBuild unit test:\r\n\r\n```C#\r\nstring xml = @\"\u003cProject\u003e\r\n  \u003cTarget Name=\"\"MultilineExec\"\"\u003e\r\n    \u003cExec Command=\"\"echo line 1\r\necho line 2\r\necho line 3\"\" /\u003e\r\n  \u003c/Target\u003e\r\n\u003c/Project\u003e\";\r\n\r\nXmlReader reader = XmlReader.Create(new StringReader(xml));\r\n\r\n// HACK: Set Normalization to false to behave the same as XmlTextReader.\r\nBindingFlags bindingFlags = BindingFlags.NonPublic | BindingFlags.SetProperty | BindingFlags.Instance;\r\nreader.GetType().GetProperty(\"Normalization\", bindingFlags).SetValue(reader, false);\r\n\r\nXmlDocument document = new XmlDocument();\r\ndocument.Load(reader);\r\n\r\nConsole.WriteLine(document.DocumentElement.FirstChild.FirstChild.Attributes[\"Command\"].Value);\r\n```\r\n\r\nWithout setting `Normalization` to false, newlines in the attribute value are converted to spaces and the code prints \"echo line 1 echo line 2 echo line 3\". We must be backward compatible and there really are scenarios where developers put newlines in attribute values which we have to preserve.\r\n\r\nThe switch from `XmlTextReader` to `XmlReader` is motivated by performance. Specifically, in many cases we can use `XmlReaderSettings` with `IgnoreComments` and `IgnoreWhitespace` which speeds up parsing.",
                                           "updatedAt":  "2021-03-12T20:50:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTMwMTg5NQ==",
                                           "createdAt":  "2021-03-15T10:22:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBjtOgA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "buyaa-n",
                                                                               "createdAt":  "2021-03-16T22:53:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "krwq",
                                           "body":  "@ladipro couple of questions:\r\n\r\n- would it make sense to add property on the XmlReaderSettings instead?\r\n- would it make sense to make it an enum instead?\r\n- will allow implementations of XmlReader be able to respect it?\r\n- `Normalization` is fairly vague word, how would you define the behavior? Would it be only scoped to behavior in attribute values or also some other places?\r\n- assuming we go ahead with API review process and it is approved would you be interested in implementing it?\r\n\r\nThe reason I\u0027m asking is in order to add this property we need to:\r\n- prepare API review request (i.e. needs to be consistent with other APIs in the area)\r\n- have a good justification for this API\r\n- API has to be well defined in what it\u0027s doing\r\n- we need to understand how much work would it be to fully support it",
                                           "updatedAt":  "2021-03-15T10:22:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTM4MDg0MQ==",
                                           "createdAt":  "2021-03-15T12:30:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEG9SYA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2025-02-20T00:43:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ladipro",
                                           "body":  "@krwq thank you, I can try answering some of these but an area owner would probably be in better position to, for example, come up with a fitting name.\r\n\r\n\u003e would it make sense to add property on the XmlReaderSettings instead?\r\n\r\nAs long as it allows me to enable the behavior behind the (vaguely named for sure!) `Normalization` property, as [already exposed](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmltextreader.normalization?view=net-5.0) on `XmlTextReader` and internally available on `XmlTextReaderImpl`, I don\u0027t care if it\u0027s through `XmlReaderSettings` or `XmlReader` itself. I don\u0027t need to change it after the reader has been created, although it is possible that someone else might have such a requirement.\r\n\r\n\u003e would it make sense to make it an enum instead?\r\n\r\nI guess it wouldn\u0027t hurt but I don\u0027t know how likely it is that we\u0027ll have a need for more than two options in the future.\r\n\r\n\u003e will all implementations of XmlReader be able to respect it?\r\n\r\nMy guess would be that if we expose it on `XmlReaderSettings`, it would be fine to respect it only on those System.Xml implementations where it makes sense, and ignore it in the rest.\r\n\r\n\u003e `Normalization` is fairly vague word, how would you define the behavior? Would it be only scoped to behavior in attribute values or also some other places?\r\n\r\nFor what it\u0027s worth, the behavior is defined here: https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmltextreader.normalization?view=net-5.0.\r\n\r\n\u003e assuming we go ahead with API review process and it is approved would you be interested in implementing it?\r\n\r\nYes, I can donate some time towards it. The implementation should be trivial. Again, all I\u0027m asking is for a public surface hole to be plugged. Currently developers who need to parse XML with \"Normalization\" disabled cannot migrate to `XmlReader.Create`.",
                                           "updatedAt":  "2021-03-15T12:30:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTM4OTU5MA==",
                                           "createdAt":  "2021-03-15T12:44:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "Thanks @ladipro we\u0027ll talk about it during our next triage meeting and will decide if/how we will go forward with this.",
                                           "updatedAt":  "2021-03-15T12:44:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjUwNjM2NA==",
                                           "createdAt":  "2021-03-25T09:40:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "Sorry for the wait, just wanted to let you know this is still on our radar.",
                                           "updatedAt":  "2021-03-25T09:40:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNzE4MDU3OA==",
                                           "createdAt":  "2021-03-25T17:51:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "For me, it makes sense to add the property on the `XmlReaderSettings` instead and keep the name `Normalization` ",
                                           "updatedAt":  "2021-03-25T17:52:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNzUyNzIxNg==",
                                           "createdAt":  "2021-03-25T21:30:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@krwq, do you have an estimate for when you\u0027ll review this?",
                                           "updatedAt":  "2021-03-25T21:30:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMTI2NjE5OQ==",
                                           "createdAt":  "2021-03-31T17:18:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "\u003e The switch from XmlTextReader to XmlReader is motivated by performance. Specifically, in many cases we can use XmlReaderSettings with IgnoreComments and IgnoreWhitespace which speeds up parsing.\r\n\r\n[Triage]: Can you expand a bit more on why you think XmlReader is faster than XmlTextReader? XmlReader is an abstract class and the implementation you are getting underneath is XmlTextReader anyway, so in theory you should be abel to just use XmlTextReader and use the Normalization property it already has exposed. If the problem here is that XmlTextReader doesn\u0027t take XmlReaderSettings, then I think that should be what this proposal is about, so that you could still get the perf benefits that provides while still using XmlTextReader directly.\r\n\r\nMain reason why we think this would be a better approach is due to the many different implementations of XmlReaders and the fact that maybe it would not be so easy to implement Normalization on all of them, and it seems like the one that you want already does support it.",
                                           "updatedAt":  "2021-03-31T17:18:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMTQwMzIzNg==",
                                           "createdAt":  "2021-03-31T19:56:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ladipro",
                                           "body":  "@joperezr yes, what you wrote is correct, making `XmlTextReader` take `XmlReaderSettings` would also do. It is a combination of the two - `XmlReaderSettings` (`IgnoreComments` and `IgnoreWhitespace` in particular) and `Normalization` - that we need, and if it\u0027s easier to make `XmlTextReader` accept `XmlReaderSettings` rather than make the newer API expose `Normalization`, then let\u0027s go for it.",
                                           "updatedAt":  "2021-03-31T19:56:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMTgwMTI2Ng==",
                                           "createdAt":  "2021-04-01T10:03:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "It\u0027s definitely less work and is also useful for completeness. For new option in XmlReaderSettings we would need to investigate all XmlReader implementations to respect it and also potentially making a not supported option for people who implemented their own XmlReader. Scoping this to just XmlTextReader is much simpler and won\u0027t cause even more weird discrepancies related to whitespaces across all implementations",
                                           "updatedAt":  "2021-04-01T10:03:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMTgwMjc3Nw==",
                                           "createdAt":  "2021-04-01T10:06:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "Next steps:\r\n- prepare final API shape, so likely just XmlTextReader having new ctor\r\n- investigate what is supported and if there are any limitation (ideally prototype implementation) an update the issue with finding\r\n- submit API review (simply replace label in this issue and wait)\r\n- prepare PR with tests\r\n\r\nand of course we need a volunteer for this work 😄 ",
                                           "updatedAt":  "2021-04-01T10:06:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fJrEB",
                                           "createdAt":  "2025-02-20T00:49:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "udlose",
                                           "body":  "Almost 4 years on now..... Is there any movement on this? I\u0027m using .NET 9 and it looks like I have currently only have two choices:\n\n1. use `new XmlTextReader` which allows me to set `Normalization = true` BUT lose the performance benefits of the newer `XmlReader`\n2.  use the newer `XmlReader.Create()` providing performance benefits BUT I have to implement my own normalization\n\nNeither of these are really desirable. cc @krwq @joperezr @stephentoub ",
                                           "updatedAt":  "2025-02-20T17:07:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hZVe5",
                                           "createdAt":  "2025-03-08T00:22:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJANUw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2025-03-08T04:09:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "joperezr",
                                           "body":  "Adding @dotnet/area-system-xml so they can help move this forward.",
                                           "updatedAt":  "2025-03-08T00:22:54Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Expose XmlTextReaderImpl.Normalization",
        "labels":  [
                       "api-suggestion",
                       "area-System.Xml",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50170",
        "createdAt":  "2021-03-24T13:02:25Z",
        "number":  50170,
        "author":  "kronic",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOB0iEAw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2021-07-30T13:33:53Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-07-29T11:26:34Z",
        "body":  "## Background and Motivation\r\n\r\nThere are very long transformations of 5-10 minutes. I would like to be able to cancel them.\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace System.Xml.Xsl\r\n{\r\n    public sealed class XslCompiledTransform\r\n    {\r\n+ public Task TransformAsync(XmlReader input, XsltArgumentList? arguments, XmlWriter results, XmlResolver? documentResolver, CancellationToken cancellationToken);\r\n     }\r\n```\r\n\r\n## Usage Examples\r\n\r\n``` C#\r\nusing System.IO;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Xml;\r\nusing System.Xml.Xsl;\r\n\r\npublic class XslHelper\r\n{\r\n\tpublic static Task TransformAsync\r\n\t(\r\n\t\tXslCompiledTransform xslCompiledTransform,\r\n\t\tstring fileNameIn,\r\n\t\tstring fileNameOut,\r\n\t\tCancellationToken cancellationToken\r\n\t)\r\n\t{\r\n\t\tusing var xmlReader = XmlReader.Create\r\n\t\t(\r\n\t\t\tnew FileStream\r\n\t\t\t(\r\n\t\t\t\tfileNameIn,\r\n\t\t\t\tFileMode.Open,\r\n\t\t\t\tFileAccess.Read,\r\n\t\t\t\tFileShare.None,\r\n\t\t\t\t4096,\r\n\t\t\t\tFileOptions.SequentialScan | FileOptions.Asynchronous\r\n\t\t\t),\r\n\t\t\tnew XmlReaderSettings {Async = true, CloseInput = true}\r\n\t\t);\r\n\r\n\t\tusing var xmlWriter = XmlWriter.Create\r\n\t\t(\r\n\t\t\tnew FileStream\r\n\t\t\t(\r\n\t\t\t\tfileNameOut,\r\n\t\t\t\tFileMode.Open,\r\n\t\t\t\tFileAccess.Write,\r\n\t\t\t\tFileShare.None,\r\n\t\t\t\t4096,\r\n\t\t\t\tFileOptions.SequentialScan | FileOptions.Asynchronous\r\n\t\t\t),\r\n\t\t\tnew XmlWriterSettings {Async = true, CloseOutput = true}\r\n\t\t);\r\n\r\n\t\tawait xslCompiledTransform.TransformAsync\r\n\t\t(\r\n\t\t\txmlReader,\r\n\t\t\tnull,\r\n\t\t\txmlWriter,\r\n\t\t\tnull,\r\n\t\t\tcancellationToken\r\n\t\t);\r\n\t}\r\n}\r\n```\r\n\r\n## Alternative Designs\r\n\r\nNo\r\n\r\n## Risks\r\n\r\nNo",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONP2jqA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTgwMTQwOA==",
                                           "createdAt":  "2021-03-24T13:02:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @buyaa-n, @krwq\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nthere are very long transformations of 5-10 minutes. I would like to be able to cancel them.\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace System.Xml.Xsl\r\n{\r\n    public sealed class XslCompiledTransform\u003cT\u003e : ICollection\u003cT\u003e, ISet\u003cT\u003e, IReadOnlySet\u003cT\u003e \r\n    {\r\n+ public Task TransformAsync(XmlReader input, XsltArgumentList? arguments, XmlWriter results, XmlResolver? documentResolver, CancellationToken cancellationToken);\r\n     }\r\n```\r\n\r\n## Usage Examples\r\n\r\n``` C#\r\n#region\r\n\r\nusing System.IO;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Xml;\r\nusing System.Xml.Xsl;\r\n\r\n#endregion\r\n\r\npublic class XslHelper\r\n{\r\n\tpublic static Task TransformAsync(XslCompiledTransform xslCompiledTransform, string fileNameIn, string fileNameOut, CancellationToken cancellationToken)\r\n\t{\r\n\t\tusing var xmlReader = XmlReader.Create\r\n\t\t(\r\n\t\t\tnew FileStream\r\n\t\t\t(\r\n\t\t\t\tfileNameIn,\r\n\t\t\t\tFileMode.Open,\r\n\t\t\t\tFileAccess.Read,\r\n\t\t\t\tFileShare.None,\r\n\t\t\t\t4096,\r\n\t\t\t\tFileOptions.SequentialScan | FileOptions.Asynchronous\r\n\t\t\t),\r\n\t\t\tnew XmlReaderSettings {Async = true, CloseInput = true}\r\n\t\t);\r\n\r\n\t\tusing var xmlWriter = XmlWriter.Create(new FileStream\r\n\t\t(\r\n\t\t\tfileNameOut,\r\n\t\t\tFileMode.Open,\r\n\t\t\tFileAccess.Write,\r\n\t\t\tFileShare.None,\r\n\t\t\t4096,\r\n\t\t\tFileOptions.SequentialScan | FileOptions.Asynchronous\r\n\t\t), new XmlWriterSettings {Async = true, CloseOutput = true});\r\n\r\n\t\tawait xslCompiledTransform.TransformAsync\r\n\t\t(\r\n\t\t\txmlReader,\r\n\t\t\tnull,\r\n\t\t\txmlWriter,\r\n\t\t\tnull,\r\n\t\t\tcancellationToken\r\n\t\t);\r\n\t}\r\n}\r\n```\r\n\r\n## Alternative Designs\r\n\r\nNo\r\n\r\n## Risks\r\n\r\nNo\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekronic\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-24T13:02:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjAyOTc1NQ==",
                                           "createdAt":  "2021-03-24T17:44:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "Hello @kronic thanks for logging the issue.I have one question regarding hour scenario: How big are the xsl and xml files in your scenario? I ask since the only thing that could be done truly async would be the reading of those two files, but most of the transform work (Compile stylesheet, generate QIL, generate IL from QIL, and execute the emitted code) doesn\u0027t really depend on I/O so would not really benefit from being async so unless you are using very big files, I\u0027m not sure what could be making the transform take 5-10 minutes that could be better if we made it async. Assuming your problem is not with reading the files I would just suggest for you to add a `Task.Run` on your app so that the Transform operation happens on a separate thread and you can continue your work on the main thread.",
                                           "updatedAt":  "2021-03-24T17:44:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjA4MDAzMw==",
                                           "createdAt":  "2021-03-24T19:03:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kronic",
                                           "body":  "@joperezr hello.\r\nThe XML file is about 15 mb in size. xslt is about 180 Kb. the problem in the next xslt transformation takes about 10 minutes even in memory. xslt is not written optimally, but I cannot change that. I would like to be able to interrupt the process. if necessary, I can provide test data.",
                                           "updatedAt":  "2021-03-25T08:17:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjEzODczNQ==",
                                           "createdAt":  "2021-03-24T19:54:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "I see. Right, what I\u0027m saying is that most of the process of performing the transformation could not be made asynchronously (apart from the reading of the input files) so having a cancellation token overload would really only be able to cancel the reading of the input files, but after that, all operations (which are likely the costly ones) still will be performed synchronously without you being able to cancel. My advise for your scenario would be to add an Async method in your layer that will run the Transform in a separate thread using `Task.Run` and then will call Abort() on that thread in case you recieve a cancel request or if some timeout expires.",
                                           "updatedAt":  "2021-03-24T19:54:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjE0MDA5OA==",
                                           "createdAt":  "2021-03-24T19:55:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "sure, if you have test data it would be great to try to find places to optimize.",
                                           "updatedAt":  "2021-03-24T19:55:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjM4Mzg5NQ==",
                                           "createdAt":  "2021-03-25T05:52:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kronic",
                                           "body":  "@joperezr \r\nI thought the data are read as they are processed, or are the data read into memory beforehand?",
                                           "updatedAt":  "2021-03-25T05:52:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjQ1MzM0OA==",
                                           "createdAt":  "2021-03-25T08:12:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kronic",
                                           "body":  "@joperezr If you run a project with a parameter **а**, i get **System.PlatFormNotSupportedException: Thread ABORT IS Not Supported On This Platform.  AT System.Threading.Thread.Abort (Object Stateinfo)**\r\ntest project\r\n[XsltLong.zip](https://github.com/dotnet/runtime/files/6202971/XsltLong.zip)\r\n",
                                           "updatedAt":  "2021-03-25T08:13:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjUxNDA5NQ==",
                                           "createdAt":  "2021-03-25T09:54:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kronic",
                                           "body":  "Example XDocument.LoadAsync, xml parsing is also a synchronous operation, but it supports cancellation",
                                           "updatedAt":  "2021-03-25T14:51:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzYwMDkyOA==",
                                           "createdAt":  "2021-04-12T08:24:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@kronic, have you tried reading in a thread and aborting or closing the backing file and handling the error? This would be quite a bit of work to add this API with relatively little benefit",
                                           "updatedAt":  "2021-04-12T08:24:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxODYyOTA5OA==",
                                           "createdAt":  "2021-04-13T10:26:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kronic",
                                           "body":  "@krwq Please show me an example code, I don\u0027t understand how this can be done",
                                           "updatedAt":  "2021-04-13T10:26:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxODYzMDQyNw==",
                                           "createdAt":  "2021-04-13T10:29:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kronic",
                                           "body":  "And I don\u0027t understand why the API approval process depends on the complexity of the implementation.",
                                           "updatedAt":  "2021-04-13T10:29:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxODkxNjY0MQ==",
                                           "createdAt":  "2021-04-13T17:32:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "\u003e And I don\u0027t understand why the API approval process depends on the complexity of the implementation.\r\n\r\nIn general, in order to approve an API we first analyze both that the API will be useful, but also on how will the implementation look like. The reason for the latter, is that after adding it we will have to service/maintain it going forward as well as we need to make sure that the implementation is feasible. One more reason is that during API review we usually talk about the cost/benefit ratio, so implementation takes a part in there as well. In this particular case, sounds like adding an async overload pretty much means that we would have to add support of async all over Xml, which is kind of why cost is important. @krwq do you mind adding an example with the workaround you proposed?",
                                           "updatedAt":  "2021-04-13T17:32:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMjI2MDgxNw==",
                                           "createdAt":  "2021-04-19T08:00:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarekPokornyOva",
                                           "body":  "Let me put an PoV here. I created an HTML rendering engine using XslCompiledTransform implemented in .NET FW 2.0 long time ago.\r\n\r\nThe datasource was just a \"\u0026lt;root/\u003e\" node, while the real data was provided as a virtually built node tree (implements IXPathNavigable) based on DB/WCF/... data via XSLT Extension Objects. The template was more like a script - XSLT as a language is nice for non-developer people I would say. As you can see, an XML file is not the only source for XPathNodeIterator/XSLT so having IXPathNavigable/XPathNodeIteratorAsync/XSLT async make sense in some cases.\r\n\r\nI also needed to \"protect\" the application from long time/endless (never ending loops) transformations. The long time was caused by bad data-providers performance and never ending loops by badly written templates - definitely nothing MS can help with.\r\nThe protection 1:\r\n```\r\nThread thread=new Thread(new ThreadStart(RunTransform));\r\nthread.Start();\r\nif (!thread.Join(new TimeSpan(0,0,10)))\r\n{\r\n\tthread.Abort();\r\n\tTransformException=new Exception(\"Transform thread timeout\");\r\n}\r\n```\r\n\r\nThe protection 2:\r\n```\r\nwh=new ManualResetEvent(false);\r\nnew Thread(new ThreadStart(RunTransform)).Start();\r\nif (!ManualResetEvent.WaitAll(new WaitHandle[1] { wh },10000,true))\r\n\tTransformException=new Exception(\"Transform thread timeout\");\r\n```\r\nOf course, the protectors can be wrapped in Task nowadays - as @joperezr offered.\r\n\r\nWrapping:\r\nI don\u0027t want to judge the async overload necessarity however some (2+) developers might appreciate it.",
                                           "updatedAt":  "2021-04-19T08:03:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMjI4NzY0MA==",
                                           "createdAt":  "2021-04-19T08:41:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kronic",
                                           "body":  "@MarekPokornyOva thread.Abort() Not supported in .net core.",
                                           "updatedAt":  "2021-04-19T08:41:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMzUwMjIzNw==",
                                           "createdAt":  "2021-05-06T12:59:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarekPokornyOva",
                                           "body":  "I\u0027ve been playing with this topic a bit.\r\n@kronic, maybe you would be interested in https://github.com/MarekPokornyOva/XsltAsyncExperiment/tree/Cancellation.\r\n@joperezr, @krwq, maybe you would be interested in https://github.com/MarekPokornyOva/XsltAsyncExperiment/tree/Async.",
                                           "updatedAt":  "2021-05-06T12:59:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNTA5MTk4Nw==",
                                           "createdAt":  "2021-05-08T04:46:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kronic",
                                           "body":  "@MarekPokornyOva Thanks",
                                           "updatedAt":  "2021-05-08T04:46:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNTA5MjQ1OA==",
                                           "createdAt":  "2021-05-08T04:48:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kronic",
                                           "body":  "@joperezr , @krwq If there is already an implementation, only API approval is required.",
                                           "updatedAt":  "2021-05-08T04:48:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3ODM2NTAyMQ==",
                                           "createdAt":  "2021-07-12T15:16:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@kronic I might be missing something but isn\u0027t https://github.com/MarekPokornyOva/XsltAsyncExperiment/tree/Async saying that experiment has failed and https://github.com/MarekPokornyOva/XsltAsyncExperiment/tree/Cancellation provides a sane workaround? Do you suggest to use CancellableWriter in the new overload which takes cancellation token? It still wouldn\u0027t make it async though",
                                           "updatedAt":  "2021-07-12T15:16:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc408h1I",
                                           "createdAt":  "2021-07-28T12:50:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarekPokornyOva",
                                           "body":  "If there\u0027s anybody interested in async XSLT, consider to look at https://github.com/MarekPokornyOva/XsltAsyncExperiment/tree/Async02.\r\n\r\nDoes anybody know if MS would mind to add such functionality as part of a future .NET release? Or was the topic discussed and dropped/postponed?",
                                           "updatedAt":  "2021-07-28T12:50:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40_aOo",
                                           "createdAt":  "2021-07-29T11:26:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@MarekPokornyOva we do not currently have any strong reasons to prioritize this over other work especially since now many developers have moved to using JSON. If we find enough people upvoting this issue or some strong motivation then we\u0027ll reconsider. We\u0027re open for contributions though. I think the main scenario here is cancellation rather than async though",
                                           "updatedAt":  "2021-07-29T11:26:03Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "XslCompiledTransform add TransformAsync",
        "labels":  [
                       "api-suggestion",
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54331",
        "createdAt":  "2021-06-17T13:28:57Z",
        "number":  54331,
        "author":  "SilverDragonKLS",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-06-17T17:11:57Z",
        "body":  "When using the XmlReader to import an xml file with a length of more than 2^31 bytes and no formatting in it (that is, there is one line longer than 2^31 bytes), at some point, the value of IXmlLineInfo.LinePosition becomes negative.\r\n\r\nTo get the correct value, you need to change the IXmlLineInfo.LinePosition type from int to long",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM3arSg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzIzOTk5MA==",
                                           "createdAt":  "2021-06-17T13:29:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @buyaa-n, @krwq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen using the XmlReader to import an xml file with a length of more than 2^31 bytes and no formatting in it (that is, there is one line longer than 2^31 bytes), at some point, the value of IXmlLineInfo.LinePosition becomes negative.\r\n\r\nTo get the correct value, you need to change the IXmlLineInfo.LinePosition type from int to long\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eSilverDragonKLS\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-17T13:29:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzQxNTExNA==",
                                           "createdAt":  "2021-06-17T17:11:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "[Triage] We cannot change the type of the public API as that would be a breaking change. Honestly I\u0027m not convinced turning on line information for non-formatted files makes much sense. I think if you\u0027re just debugging it will be hard to find what\u0027s wrong anyway. If you feel strongly about it we could consider creating a second property with different type but with all honesty I\u0027m not sure this is worth the effort",
                                           "updatedAt":  "2021-06-17T17:11:47Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "XmlReader error when importing a large unformatted file (IXmlLineInfo.LinePosition incorrect)",
        "labels":  [
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55023",
        "createdAt":  "2021-07-01T16:14:59Z",
        "number":  55023,
        "author":  "michaelstum",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCpQ54w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mukunku",
                                            "createdAt":  "2021-07-01T16:19:01Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "deanward81",
                                            "createdAt":  "2021-07-01T16:32:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WouterDeKort",
                                            "createdAt":  "2021-07-01T17:13:34Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "WouterDeKort",
                                            "createdAt":  "2021-07-01T17:13:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2021-08-17T23:12:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "idilshod87",
                                            "createdAt":  "2022-07-29T15:44:33Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2021-07-08T17:29:16Z",
        "body":  "### Description\r\n\r\nI am using the [XmlElement.SetAttribute](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmlelement.setattribute?view=net-5.0) method to add an Attribute with a namespace.\r\n\r\nHowever, the resulting [XmlAttribute.Prefix](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmlattribute.prefix?view=net-5.0) property is an empty string, instead of the namespace prefix.\r\n\r\nThis causes an issue when XML Canonicalization is used, because the namespace prefix on the attribute is lost upon transform.\r\n\r\nHere\u0027s an example that illustrates the issue:\r\n\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.Security.Cryptography.Xml;\r\nusing System.Xml;\r\n\r\n// The XML Namespace and prefix for my attribute namespace\r\nconst string attrNs = \"attrns\";\r\nconst string attrPrefix = \"a\";\r\n\r\nvar xdoc = new XmlDocument();\r\nxdoc.LoadXml(\"\u003ctest\u003e\u003c/test\u003e\");\r\n// Declare the xmlns:a=\"attrns\" namespace\r\nxdoc.DocumentElement.SetAttribute(\"xmlns:\" + attrPrefix, attrNs);\r\n\r\n// Use SetAttribute to add a new Attribute in my Attribute Namespace\r\n// The XmlDocument\u0027s Namespace Manager will figure out itself\r\n// that the attribute should be prefixed with the attrPrefix\r\nxdoc.DocumentElement.SetAttribute(\"localName\", attrNs, \"value\");\r\n\r\n// Create an XmlAttribute explicitly with the attrPrefix\r\nvar attrWithPrefix = xdoc.CreateAttribute(attrPrefix, \"localNameWithPrefix\", attrNs);\r\nattrWithPrefix.Value = \"value\";\r\nxdoc.DocumentElement.Attributes.Append(attrWithPrefix);\r\n\r\nConsole.WriteLine(xdoc.OuterXml);\r\n// \u003ctest xmlns:a=\"attrns\" a:localname=\"value\" a:localNameWithPrefix=\"value\"\u003e\u003c/test\u003e\r\n// Note that both localName and localNameWithPrefix are prefixed with a:, to indicate that they\r\n// are in the \"attrns\" namespace\r\n\r\n// Looking at the actual XmlAttribute.Prefix property:\r\nConsole.WriteLine(\"Prefix for localName: \" + xdoc.DocumentElement.GetAttributeNode(\"localName\", attrNs).Prefix);\r\n// =\u003e \"\"\r\nConsole.WriteLine(\"Prefix for localNameWithPrefix: \" + xdoc.DocumentElement.GetAttributeNode(\"localNameWithPrefix\", attrNs).Prefix);\r\n// =\u003e \"a\"\r\n\r\n// Why does it matter? Because it breaks upon XML Canonicalization (used e.g., when Signing):\r\n// Note that other canonicalizing transforms (e.g., XmlDsigC14NTransform) are also affected\r\nvar transform = new System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform();\r\ntransform.LoadInput(xdoc);\r\nusing (var s = (Stream)transform.GetOutput())\r\n{\r\n\tvar transformedDoc = new XmlDocument();\r\n\ttransformedDoc.Load(s);\r\n\tConsole.WriteLine(transformedDoc.OuterXml);\r\n\t// \u003ctest xmlns:a=\"attrns\" localName=\"value\" a:localNameWithPrefix=\"value\"\u003e\u003c/test\u003e\r\n\t// Note how \"localName\" lost its a: prefix, and is now part of the default namespace\r\n}\r\n```\r\n\r\n\r\n\r\n### Configuration\r\n\r\n* .NET Core 3.1, 5.0 on Windows 10 21H1 and WSL2 Ubuntu 20.04\r\n* .NET Framework 4.8 on Windows 10 21H1\r\n\r\n### Regression?\r\n\r\nNo regression from .NET Framework to .NET Core, I haven\u0027t tried really old .NET Framework versions\r\n\r\n### Other information\r\n\r\nThe description of XmlAttribute.Prefix says \r\n\r\n\u003e The namespace prefix of this node. If there is no prefix, this property returns String.Empty.\r\n\r\nWhich indicates that any prefixed XmlAttribute should have the Prefix property set.\r\n\r\nThe documentation of XmlElement.SetAttribute is ambiguous: The SetAttribute(String, String, String)  mentions only setting a local name and will in fact throw an Exception if I try to prefix it myself:\r\n\r\n```csharp\r\nxdoc.DocumentElement.SetAttribute(attrPrefix + \":localName\", attrNs, \"value\");\r\n// -\u003e XmlException: The \u0027:\u0027 character, hexadecimal value 0x3A, cannot be included in a name.\r\n```\r\n\r\nThe SetAttribute(String, String) accepts a prefix, but doesn\u0027t handle it properly:\r\n\r\n```csharp\r\nxdoc.DocumentElement.SetAttribute(attrPrefix + \":localName\", \"value\");\r\nConsole.WriteLine(xdoc.OuterXml);\r\n// -\u003e \u003ctest xmlns:a=\"attrns\" localName=\"value\" a:localNameWithPrefix=\"value\"\u003e\u003c/test\u003e\r\n// Note that localName does NOT have the a: prefix, even though I explicitly specified it\r\n```\r\n\r\nThis makes it seem that the SetAttribute method is at best very unintuitive, and at worst actually misbehaving.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONAYaRw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MjM3Njg3Mg==",
                                           "createdAt":  "2021-07-01T16:15:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @buyaa-n, @krwq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI am using the [XmlElement.SetAttribute](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmlelement.setattribute?view=net-5.0) method to add an Attribute with a namespace.\r\n\r\nHowever, the resulting [XmlAttribute.Prefix](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmlattribute.prefix?view=net-5.0) property is an empty string, instead of the namespace prefix.\r\n\r\nThis causes an issue when XML Canonicalization is used, because the namespace prefix on the attribute is lost upon transform.\r\n\r\nHere\u0027s an example that illustrates the issue:\r\n\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.Security.Cryptography.Xml;\r\nusing System.Xml;\r\n\r\n// The XML Namespace and prefix for my attribute namespace\r\nconst string attrNs = \"attrns\";\r\nconst string attrPrefix = \"a\";\r\n\r\nvar xdoc = new XmlDocument();\r\nxdoc.LoadXml(\"\u003ctest\u003e\u003c/test\u003e\");\r\n// Declare the xmlns:a=\"attrns\" namespace\r\nxdoc.DocumentElement.SetAttribute(\"xmlns:\" + attrPrefix, attrNs);\r\n\r\n// Use SetAttribute to add a new Attribute in my Attribute Namespace\r\n// The XmlDocument\u0027s Namespace Manager will figure out itself\r\n// that the attribute should be prefixed with the attrPrefix\r\nxdoc.DocumentElement.SetAttribute(\"localName\", attrNs, \"value\");\r\n\r\n// Create an XmlAttribute explicitly with the attrPrefix\r\nvar attrWithPrefix = xdoc.CreateAttribute(attrPrefix, \"localNameWithPrefix\", attrNs);\r\nattrWithPrefix.Value = \"value\";\r\nxdoc.DocumentElement.Attributes.Append(attrWithPrefix);\r\n\r\nConsole.WriteLine(xdoc.OuterXml);\r\n// \u003ctest xmlns:a=\"attrns\" a:localname=\"value\" a:localNameWithPrefix=\"value\"\u003e\u003c/test\u003e\r\n// Note that both localName and localNameWithPrefix are prefixed with a:, to indicate that they\r\n// are in the \"attrns\" namespace\r\n\r\n// Looking at the actual XmlAttribute.Prefix property:\r\nConsole.WriteLine(\"Prefix for localName: \" + xdoc.DocumentElement.GetAttributeNode(\"localName\", attrNs).Prefix);\r\n// =\u003e \"\"\r\nConsole.WriteLine(\"Prefix for localNameWithPrefix: \" + xdoc.DocumentElement.GetAttributeNode(\"localNameWithPrefix\", attrNs).Prefix);\r\n// =\u003e \"a\"\r\n\r\n// Why does it matter? Because it breaks upon XML Canonicalization (used e.g., when Signing):\r\n// Note that other canonicalizing transforms (e.g., XmlDsigC14NTransform) are also affected\r\nvar transform = new System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform();\r\ntransform.LoadInput(xdoc);\r\nusing (var s = (Stream)transform.GetOutput())\r\n{\r\n\tvar transformedDoc = new XmlDocument();\r\n\ttransformedDoc.Load(s);\r\n\tConsole.WriteLine(transformedDoc.OuterXml);\r\n\t// \u003ctest xmlns:a=\"attrns\" localName=\"value\" a:localNameWithPrefix=\"value\"\u003e\u003c/test\u003e\r\n\t// Note how \"localName\" lost its a: prefix, and is now part of the default namespace\r\n}\r\n```\r\n\r\n\r\n\r\n### Configuration\r\n\r\n* .NET Core 3.1, 5.0 on Windows 10 21H1 and WSL2 Ubuntu 20.04\r\n* .NET Framework 4.8 on Windows 10 21H1\r\n\r\n### Regression?\r\n\r\nNo regression from .NET Framework to .NET Core, I haven\u0027t tried really old .NET Framework versions\r\n\r\n### Other information\r\n\r\nThe description of XmlAttribute.Prefix says \r\n\r\n\u003e The namespace prefix of this node. If there is no prefix, this property returns String.Empty.\r\n\r\nWhich indicates that any prefixed XmlAttribute should have the Prefix property set.\r\n\r\nThe documentation of XmlElement.SetAttribute is ambiguous: The SetAttribute(String, String, String)  mentions only setting a local name and will in fact throw an Exception if I try to prefix it myself:\r\n\r\n```csharp\r\nxdoc.DocumentElement.SetAttribute(attrPrefix + \":localName\", attrNs, \"value\");\r\n// -\u003e XmlException: The \u0027:\u0027 character, hexadecimal value 0x3A, cannot be included in a name.\r\n```\r\n\r\nThe SetAttribute(String, String) accepts a prefix, but doesn\u0027t handle it properly:\r\n\r\n```csharp\r\nxdoc.DocumentElement.SetAttribute(attrPrefix + \":localName\", \"value\");\r\nConsole.WriteLine(xdoc.OuterXml);\r\n// -\u003e \u003ctest xmlns:a=\"attrns\" localName=\"value\" a:localNameWithPrefix=\"value\"\u003e\u003c/test\u003e\r\n// Note that localName does NOT have the a: prefix, even though I explicitly specified it\r\n```\r\n\r\nThis makes it seem that the SetAttribute method is at best very unintuitive, and at worst actually misbehaving.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emichaelstum\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-01T16:15:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MjM4Mjg2MA==",
                                           "createdAt":  "2021-07-01T16:22:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaelstum",
                                           "body":  "One workaround: Reload the XmlDocument before transforming:\r\n\r\n```csharp\r\nxdoc.LoadXml(xdoc.OuterXml); // \u003c--\r\nvar transform = new System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform();\r\ntransform.LoadInput(xdoc);\r\nusing (var s = (Stream)transform.GetOutput())\r\n{\r\n\tvar transformedDoc = new XmlDocument();\r\n\ttransformedDoc.Load(s);\r\n\tConsole.WriteLine(transformedDoc.OuterXml);\r\n\t// \u003ctest xmlns:a=\"attrns\" a:localName=\"value\" a:localNameWithPrefix=\"value\"\u003e\u003c/test\u003e\r\n\t// Now the a: Prefix is preserved on localName\r\n}\r\n```",
                                           "updatedAt":  "2021-07-01T16:22:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MjQ5MTg3Nw==",
                                           "createdAt":  "2021-07-01T19:20:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaelstum",
                                           "body":  "Looking at the source, I can see that it explicitly uses an empty prefix in both places where relevant:\r\n\r\nhttps://github.com/dotnet/runtime/blob/09785ef78f8c758350ec1ded604484bbbed0ce99/src/libraries/System.Private.Xml/src/System/Xml/Dom/XmlElement.cs#L357\r\n\r\nhttps://github.com/dotnet/runtime/blob/09785ef78f8c758350ec1ded604484bbbed0ce99/src/libraries/System.Private.Xml/src/System/Xml/Dom/XmlElement.cs#L389\r\n\r\nAfter testing, I noted that OwnerDocument.GetPrefixOfNamespace(namespaceURI) may not return the proper prefix - if the element hasn\u0027t been added to the Document yet (only created through XmlDocument.CreateElement, but not appended through AppendChild), then GetPrefixOfNamespace might not return the proper prefix. I\u0027m not sure what the best/proper way to resolve this is (assuming it\u0027s not a PEBCAK and the method works exactly as intended), for now I\u0027ll reload the XmlDocument after I\u0027m done creating it and before processing it further.",
                                           "updatedAt":  "2021-07-01T19:42:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MjgxNTE3NQ==",
                                           "createdAt":  "2021-07-02T08:22:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "This is because it actually doesn\u0027t have a prefix in the DOM. The prefix is generated or re-used when you write the document. I.e. try removing the line which declares the namespace and see what happens.",
                                           "updatedAt":  "2021-07-02T08:22:02Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "XmlElement.SetAttribute does not set the Prefix property of the resulting XmlAttribute",
        "labels":  [
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59353",
        "createdAt":  "2021-09-20T16:30:02Z",
        "number":  59353,
        "author":  "benvillalobos",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-10T00:13:13Z",
        "body":  "### Description\r\n\r\nOriginal issue: https://github.com/dotnet/msbuild/issues/6847\r\nMSBuild\u0027s PR: https://github.com/dotnet/msbuild/pull/6863\r\n\r\n~~Initializing an XmlReader using `XmlReader.Create(\u003cpath-to-file\u003e)` where the path contains characters from the unicode private use area causes issues at file load. Part of the path that\u0027s the culprit: `Ⅻㄨㄩ 啊阿鼾齄丂丄狚狛狜狝﨨﨩ˊˋ˙–⿻〇㐀㐁䶴䶵U1[]U2[]U3[]`~~\r\n\r\n~~The workaround is to call XmlReader.Create using a StreamReader. However, when MSBuild is calling its `XslTransform` task on a file in this type of path, and in the xsl file it calls the `Document` function on a file that also exists in a path like this, it will break. See details here: https://github.com/dotnet/msbuild/pull/6863#issuecomment-922089397~~\r\n\r\n[This comment explains the issue](https://github.com/dotnet/msbuild/pull/6863#issuecomment-922089397). You hit an exception when calling the [document function](https://www.ibm.com/docs/en/db2/11.1?topic=stylesheets-example-using-document-function-xslt) in an xslt file when that xslt file is under a path that contains private area unicode characters.\r\n\r\nXslt file example:\r\n\r\n```\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n\r\n\u003cxsl:stylesheet version=\"1.0\"\r\n\r\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\u003e\r\n\r\n\u003cxsl:template match=\"/\"\u003e\r\n\r\n\u003cxsl:value-of select=\"document(\u0027b.xml\u0027)\"/\u003e\r\n\u003c/xsl:template\u003e\r\n\r\n\u003c/xsl:stylesheet\u003e\r\n```\r\nPlace that next to a `b.xml` in a path that contains `Ⅻㄨㄩ 啊阿鼾齄丂丄狚狛狜狝﨨﨩ˊˋ˙–⿻〇㐀㐁䶴䶵U1[]U2[]U3[]`. \r\n\r\n### Configuration\r\n\r\nFull framework  \u0026 net core 6.0.100-preview.7.21379.14\r\n\r\n### Regression?\r\nNo\r\n\r\n### Other information\r\nSee original issue / MSBuild PR for in-depth notes.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOu85RQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43BSwd",
                                           "createdAt":  "2021-09-20T16:30:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @buyaa-n, @krwq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nOriginal issue: https://github.com/dotnet/msbuild/issues/6847\r\nMSBuild\u0027s PR: https://github.com/dotnet/msbuild/pull/6863\r\n\r\nInitializing an XmlReader using `XmlReader.Create(\u003cpath-to-file\u003e)` where the path contains characters from the unicode private use area causes issues at file load. Part of the path that\u0027s the culprit: `Ⅻㄨㄩ 啊阿鼾齄丂丄狚狛狜狝﨨﨩ˊˋ˙–⿻〇㐀㐁䶴䶵U1[]U2[]U3[]`\r\n\r\nThe workaround is to call XmlReader.Create using a StreamReader. However, when MSBuild is calling its `XslTransform` task on a file in this type of path, and in the xsl file it calls the `Document` function on a file that also exists in a path like this, it will break. See details here: https://github.com/dotnet/msbuild/pull/6863#issuecomment-922089397\r\n\r\n### Configuration\r\n\r\nFull framework  \u0026 net core 6.0.100-preview.7.21379.14\r\n\r\n### Regression?\r\nNo\r\n\r\n### Other information\r\nSee original issue / MSBuild PR for in-depth notes.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eBenVillalobos\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-20T16:30:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43kYnV",
                                           "createdAt":  "2021-10-01T14:34:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@BenVillalobos can you provide a minimal repro? Ideally something which creates a file on the fly and uses `\\uXYZV` notation for non-english characters\r\n\r\n```csharp\r\nstring path = @\"Ⅻㄨㄩ 啊阿鼾齄丂丄狚狛狜狝﨨﨩ˊˋ˙–⿻〇㐀㐁䶴䶵.xml\";\r\nstring content = @\"\u003croot\u003e\u003c/root\u003e\";\r\nFile.WriteAllText(path, content);\r\nusing XmlReader reader = XmlReader.Create(path);\r\n```\r\n\r\nand getting no exception.\r\n\r\nWhat\u0027s the exception you\u0027re getting?",
                                           "updatedAt":  "2021-10-01T14:35:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43k_Wr",
                                           "createdAt":  "2021-10-01T18:02:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benvillalobos",
                                           "body":  "You\u0027ll need to include `U1[]U2[]U3[]` as part of the path. Adding that and using your code in an empty console proj caused the repro for me.",
                                           "updatedAt":  "2021-10-01T18:02:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43s6Uz",
                                           "createdAt":  "2021-10-05T15:35:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@BenVillalobos what is the exception you\u0027re seeing?",
                                           "updatedAt":  "2021-10-05T15:35:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43s6un",
                                           "createdAt":  "2021-10-05T15:37:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "from the e-mail conversation this might be blocking msbuild team so changing milestone",
                                           "updatedAt":  "2021-10-05T15:37:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43tRzB",
                                           "createdAt":  "2021-10-05T17:30:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benvillalobos",
                                           "body":  "OH, apologies. The title for this issue was incorrect. See this comment for details: https://github.com/dotnet/msbuild/pull/6863#issuecomment-922089397\r\n\r\nException gets thrown on this line https://github.com/dotnet/msbuild/blob/main/src/Tasks/XslTransformation.cs#L176\r\n\r\nIn summary, when transforming an xslt doc who\u0027s path contains the unicode mess (`Ⅻㄨㄩ 啊阿鼾齄丂丄狚狛狜狝﨨﨩ˊˋ˙–⿻〇㐀㐁䶴䶵U1[]U2[]U3[]`), you\u0027ll hit an XslTransformException if that xslt calls the `document` function to find another xml file next to it.",
                                           "updatedAt":  "2021-10-05T17:30:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43tSv0",
                                           "createdAt":  "2021-10-05T17:36:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benvillalobos",
                                           "body":  "Also this isn\u0027t a blocking issue. We worked around one aspect of the issue which was loading the xslt doc in the first place. But we also see the error when trying to load another document while transforming the first.",
                                           "updatedAt":  "2021-10-05T17:36:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43vIF6",
                                           "createdAt":  "2021-10-05T23:54:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@BenVillalobos any chance you could create a project with a tiny repro?",
                                           "updatedAt":  "2021-10-05T23:54:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc431wie",
                                           "createdAt":  "2021-10-06T18:20:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB9ZCIg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krwq",
                                                                               "createdAt":  "2021-10-07T13:54:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "benvillalobos",
                                           "body":  "[proj1.zip](https://github.com/dotnet/runtime/files/7296265/proj1.zip)\r\n\r\nSteps to reproduce:\r\nDownload zip, create a folder next to proj1.csproj called `Ⅻㄨㄩ 啊阿鼾齄丂丄狚狛狜狝﨨﨩ˊˋ˙–⿻〇㐀㐁䶴䶵U1[]U2[]U3[]`. Drag transform.xslt and b.xml into it.\r\n\r\nNote: If you have the latest and greatest VS, it probably already has this change. So `msbuild \u003cpathtoproj1\u003e.csproj` on a dev command prompt should suffice. If not, do the steps below:\r\n```\r\ngit clone https://github.com/dotnet/msbuild\r\ncd msbuild\r\nbuild.cmd /p:CreateBootstrap=true\r\ncd artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\r\nmsbuild.exe \u003cpathtoproj1.csproj\u003e\r\n```\r\nYou should get the error `error MSB3703: Unable to execute transformation. An error occurred while loading document \u0027b.xml\u0027. See InnerException for a complete description of the error.`. After you\u0027ve confirmed the repro, debug into it to see the inner exception.\r\n\r\nOpen up MSBuild.Dev.slnf in VS.\r\n\r\nOn same command line:\r\n`set MSBUILDDEBUGONSTART=1`\r\nmsbuild.exe \u003cpathtoproj1.csproj\u003e\r\n\r\nPlace a breakpoint in the line I mentioned the exception gets thrown (2 comments above)",
                                           "updatedAt":  "2021-10-06T18:21:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46an4g",
                                           "createdAt":  "2021-11-26T15:26:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bgrainger",
                                           "body":  "IMO this seems to be caused by unexpected behaviour in `System.Uri`: specifically, a PUA character is _not_ roundtripped through a `file:///` URI for `new Uri(x).LocalPath`.\r\n\r\nThis test program tests the `Uri` constructor with various characters that have different UTF-8 encoded lengths; the last is a PUA character:\r\n\r\n```csharp\r\nforeach (var name in new[] { \"a\", \"\\u00A1\", \"\\u0800\", \"\\U00010000\", \"\\uE000\" })\r\n{\r\n    var filePath = $@\"C:\\Temp\\{name}.txt\";\r\n    var uri = new Uri(filePath);\r\n    Console.WriteLine(\"{0}\\t{1}\\t{2}\\t{3}\", uri.LocalPath == filePath, filePath, uri.AbsoluteUri, uri.LocalPath);\r\n}\r\n```\r\n\r\nThe output shows that the file path does round-trip for everything except the PUA character, which is double-encoded in the URI.\r\n\r\n```\r\nTrue   C:\\Temp\\a.txt  file:///C:/Temp/a.txt  C:\\Temp\\a.txt\r\nTrue   C:\\Temp\\¡.txt  file:///C:/Temp/%C2%A1.txt  C:\\Temp\\¡.txt\r\nTrue   C:\\Temp\\ࠀ.txt  file:///C:/Temp/%E0%A0%80.txt  C:\\Temp\\ࠀ.txt\r\nTrue   C:\\Temp\\𐀀.txt  file:///C:/Temp/%F0%90%80%80.txt  C:\\Temp\\𐀀.txt\r\nFalse  C:\\Temp\\.txt  file:///C:/Temp/%25EE%2580%2580.txt  C:\\Temp\\%EE%80%80.txt\r\n```\r\n\r\nI haven\u0027t consulted the URI RFC to determine whether this would be considered correct. You don\u0027t get the same failure to round-trip for `$@\"https://example.com/{name}.txt\"` so I suspect not.\r\n\r\nIf `System.Uri` can\u0027t be changed in this instance (for back-compat concerns), then `XmlUriResolver` and/or `XmlDownloadManager` might need to work around the double-encoding?",
                                           "updatedAt":  "2021-11-26T15:27:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46aqlp",
                                           "createdAt":  "2021-11-26T15:46:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bgrainger",
                                           "body":  "I wonder if `System.Uri` parsing for file paths goes through the IRI code path, which explicitly excludes PUA characters (as per https://datatracker.ietf.org/doc/html/rfc3987#section-2.2): https://github.com/dotnet/runtime/blob/c00b06826ca4d333ef69d51e523ef7bd309b8631/src/libraries/System.Private.Uri/src/System/IriHelper.cs#L16-L22\r\n\r\nA fix would be to change this line of code as follows: https://github.com/dotnet/runtime/blob/c00b06826ca4d333ef69d51e523ef7bd309b8631/src/libraries/System.Private.Xml/src/System/Xml/XmlResolver.cs#L43\r\n\r\n```csharp\r\n                        uri = new Uri(Path.GetFullPath(relativeUri!), new UriCreationOptions { DangerousDisablePathAndQueryCanonicalization = true });\r\n```\r\n\r\nHowever, I don\u0027t know the security implications of this, given the property name.",
                                           "updatedAt":  "2021-11-26T15:46:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc467zlF",
                                           "createdAt":  "2021-12-08T12:08:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "I guess, since you can pass your own XmlResolver possibly you can just derive and apply workaround in the new type. We should still figure out if this is XML or Uri issue. The `Dangerous*` setting doesn\u0027t sound like a good idea but I\u0027m not sure what are the exact implications of that or why it was created.\r\n\r\n@karelz do we have any Uri experts who could help with the questions above?\r\n",
                                           "updatedAt":  "2021-12-08T12:14:59Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Xslt document function fails when path Contains Private Area Unicode Characters",
        "labels":  [
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59829",
        "createdAt":  "2021-09-30T21:25:31Z",
        "number":  59829,
        "author":  "johnthcall",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-01T08:33:02Z",
        "body":  "### Description\r\n\r\nIn the Azure SDK ecosystem errors are serialized by the server as XML and parsed into XDocument, In the stack trace below the string message is wrapped into a TextReader which is then passed down to the XmlTextReaderImpl where a buffer is allocated. Even in the case when InitTextReaderInput is called with a string source instead of a TextReader the entire string is copied to a new char[] with a (char)0 ending.\r\n\r\nIt seems that if span can be leveraged that significant performance could be gained. If no one sees a clear path for this, no worries just want to make sure there isn\u0027t any low hanging fruit here.\r\n\r\n### Configuration\r\n\r\n* Which version of .NET is the code running on? 5.0.9\r\n* What OS version, and what distro if applicable? Windows Server 2019\r\n* What is the architecture (x64, x86, ARM, ARM64)? x64\r\n\r\n### Data\r\n\r\nclr.dll!JIT_NewArr1\r\nSystem.Xml.ni.dll!System.Xml.XmlTextReaderImpl.InitTextReaderInput(System.String, System.Uri, System.IO.TextReader)$##6000B97\r\nSystem.Xml.ni.dll!System.Xml.XmlTextReaderImpl.FinishInitTextReader()$##6000B10\r\nSystem.Xml.ni.dll!System.Xml.XmlReaderSettings.CreateReader(System.IO.TextReader, System.String, System.Xml.XmlParserContext)$##6000A31\r\nSystem.Xml.Linq.ni.dll!System.Xml.Linq.XDocument.Parse(System.String, System.Xml.Linq.LoadOptions)$##60001A0\r\nAzure.Core.Pipeline.StorageClientDiagnostics!ExtractFailureContent\r\n\r\n### Analysis\r\n\r\nI initially tried altering the following by verifying that 0 ending array is required and making it a direct copy of the string does cause two unit tests to break.\r\nhttps://github.com/dotnet/runtime/blob/918aaec1d94cb5f80e4ed00493fbc2940c7fa132/src/libraries/System.Private.Xml/src/System/Xml/Core/XmlTextReaderImpl.cs#L3058-L3061\r\n\r\nIf the 0 ending array is strictly required then a copy of the full array will always be required.\r\n\r\nI\u0027m happy to contribute changes here but don\u0027t know if it is feasible or the best place to start.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON42wnQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43iNxz",
                                           "createdAt":  "2021-09-30T21:25:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nIn the Azure SDK ecosystem errors are serialized by the server as XML and parsed into XDocument, In the stack trace below the string message is wrapped into a TextReader which is then passed down to the XmlTextReaderImpl where a buffer is allocated. Even in the case when InitTextReaderInput is called with a string source instead of a TextReader the entire string is copied to a new char[] with a (char)0 ending.\r\n\r\nIt seems that if span can be leveraged that significant performance could be gained. If no one sees a clear path for this, no worries just want to make sure there isn\u0027t any low hanging fruit here.\r\n\r\n### Configuration\r\n\r\n* Which version of .NET is the code running on? 5.0.9\r\n* What OS version, and what distro if applicable? Windows Server 2019\r\n* What is the architecture (x64, x86, ARM, ARM64)? x64\r\n\r\n### Data\r\n\r\nclr.dll!JIT_NewArr1\r\nSystem.Xml.ni.dll!System.Xml.XmlTextReaderImpl.InitTextReaderInput(System.String, System.Uri, System.IO.TextReader)$##6000B97\r\nSystem.Xml.ni.dll!System.Xml.XmlTextReaderImpl.FinishInitTextReader()$##6000B10\r\nSystem.Xml.ni.dll!System.Xml.XmlReaderSettings.CreateReader(System.IO.TextReader, System.String, System.Xml.XmlParserContext)$##6000A31\r\nSystem.Xml.Linq.ni.dll!System.Xml.Linq.XDocument.Parse(System.String, System.Xml.Linq.LoadOptions)$##60001A0\r\nAzure.Core.Pipeline.StorageClientDiagnostics!ExtractFailureContent\r\n\r\n### Analysis\r\n\r\nI initially tried altering the following by verifying that 0 ending array is required and making it a direct copy of the string does cause two unit tests to break.\r\nhttps://github.com/dotnet/runtime/blob/918aaec1d94cb5f80e4ed00493fbc2940c7fa132/src/libraries/System.Private.Xml/src/System/Xml/Core/XmlTextReaderImpl.cs#L3058-L3061\r\n\r\nIf the 0 ending array is strictly required then a copy of the full array will always be required.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejohnthcall\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-30T21:25:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43jbCd",
                                           "createdAt":  "2021-10-01T08:32:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Hi @johnthcall, we\u0027d be happy to consider a PR that adds spanification improvements to the XmlTextReader implementation. Would it be possible to also share benchmarks that demonstrate the perf improvements?",
                                           "updatedAt":  "2021-10-01T08:32:33Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "System.Xml.XmlTextReaderImpl could possibly benefit from Span",
        "labels":  [
                       "area-System.Xml",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60543",
        "createdAt":  "2021-10-18T08:50:42Z",
        "number":  60543,
        "author":  "semyonc",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-12-08T12:05:10Z",
        "body":  "### Description\r\n\r\nThe XmlSchema reports the error _\"The value \u0027xxxx\u0027 is invalid according to its schema type \u0027List of NmToken\u0027 - The Enumeration constraint failed.\"_ in any case if attribute value contains more than one value.\r\n\r\nThe example XSD schema fragment will produce this error because default attribute contains a list \r\nwith two elements from enumeration:\r\n\r\n```xml\r\n\u003cxs:attribute name=\"aria-relevant\" default=\"additions text\"\u003e\r\n   \u003cxs:simpleType\u003e\r\n      \u003cxs:restriction base=\"xs:NMTOKENS\"\u003e\r\n         \u003cxs:enumeration value=\"additions\"/\u003e\r\n         \u003cxs:enumeration value=\"removals\"/\u003e\r\n         \u003cxs:enumeration value=\"text\"/\u003e\r\n         \u003cxs:enumeration value=\"all\"/\u003e\r\n      \u003c/xs:restriction\u003e\r\n   \u003c/xs:simpleType\u003e\r\n\u003c/xs:attribute\u003e\r\n```\r\n\r\n### Reproduction Steps\r\n\r\nA simple code snippet can be used for reproducing:\r\n\r\n```csharp\r\nXmlSchema schema; // Official W3C ARIA schema\r\nusing (XmlReader reader = XmlReader.Create(\"https://www.w3.org/MarkUp/SCHEMA/aria-attributes-1.xsd\")) \r\n{\r\n      schema = XmlSchema.Read(reader, null);\r\n      schema.Compile((sender, e) =\u003e \r\n      {\r\n          Console.WriteLine($\"{e.Message}\");\r\n      });\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nNo errors\r\n\r\n### Actual behavior\r\n\r\nWrong error message\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nAll existing NET frameworks from the 4th to the 7th\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOGOyUw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44W9-p",
                                           "createdAt":  "2021-10-18T08:50:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe XmlSchema reports the error _\"The value \u0027xxxx\u0027 is invalid according to its schema type \u0027List of NmToken\u0027 - The Enumeration constraint failed.\"_ in any case if attribute value contains more than one value.\r\n\r\nThe example XSD schema fragment will produce this error because default attribute contains a list \r\nwith two elements from enumeration:\r\n\r\n```xml\r\n\u003cxs:attribute name=\"aria-relevant\" default=\"additions text\"\u003e\r\n   \u003cxs:simpleType\u003e\r\n      \u003cxs:restriction base=\"xs:NMTOKENS\"\u003e\r\n         \u003cxs:enumeration value=\"additions\"/\u003e\r\n         \u003cxs:enumeration value=\"removals\"/\u003e\r\n         \u003cxs:enumeration value=\"text\"/\u003e\r\n         \u003cxs:enumeration value=\"all\"/\u003e\r\n      \u003c/xs:restriction\u003e\r\n   \u003c/xs:simpleType\u003e\r\n\u003c/xs:attribute\u003e\r\n```\n\n### Reproduction Steps\n\nA simple code snippet can be used for reproducing:\r\n\r\n```csharp\r\nXmlSchema schema; // Official W3C ARIA schema\r\nusing (XmlReader reader = XmlReader.Create(\"https://www.w3.org/MarkUp/SCHEMA/aria-attributes-1.xsd\")) \r\n{\r\n      schema = XmlSchema.Read(reader, null);\r\n      schema.Compile((sender, e) =\u003e \r\n      {\r\n          Console.WriteLine($\"{e.Message}\");\r\n      });\r\n}\r\n```A\n\n### Expected behavior\n\nNo errors\n\n### Actual behavior\n\nWrong error message\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nAll existing NET frameworks from the 4th to the 7th\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esemyonc\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-18T08:50:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44YeI8",
                                           "createdAt":  "2021-10-18T16:15:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@semyonc does this repro on .NET Framework? Or on .NET 5 or earlier?",
                                           "updatedAt":  "2021-10-18T16:15:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44Y7JT",
                                           "createdAt":  "2021-10-18T18:40:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "semyonc",
                                           "body":  "All frameworks I am aware of: net 4 and net 5",
                                           "updatedAt":  "2021-10-18T18:40:03Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "The XmlSchema does not correctly validate xs:NMTOKENS type restrictions with enumeration",
        "labels":  [
                       "bug",
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61963",
        "createdAt":  "2021-11-23T12:51:31Z",
        "number":  61963,
        "author":  "epatrick",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-17T11:55:43Z",
        "body":  "### Description\r\n\r\nWhen pairing an XSLT with an `XmlWriter` using `XmlWriterSettings.Async = true`, async operations throw a `NotImplementedException`.  Details founds in [this SO post](https://stackoverflow.com/a/70075455/1088293), with [this fiddle](https://dotnetfiddle.net/COrx9M).\r\n\r\nThis **looks** unintentional, just an edge case not covered?\r\n\r\nThe use case is leveraging XSLT in an ASP.NET core pipeline using the recommend async IO.\r\n\r\n### Reproduction Steps\r\n\r\n```csharp\r\nusing System.IO;\r\nusing System.Threading.Tasks;\r\nusing System.Xml;\r\nusing System.Xml.Xsl;\r\n\t\t\t\t\t\r\npublic class Program\r\n{\r\n\tpublic static void Main()\r\n\t{\r\n\t\tTest().GetAwaiter().GetResult();\r\n\t}\r\n\t\r\n\tpublic static async Task Test()\r\n\t{\r\n\t\t\r\n\t\tvar transform = new XslCompiledTransform();\r\n\t\tusing var reader = XmlReader.Create(new StringReader(@\"\r\n\u003cxsl:stylesheet version=\"\"1.0\"\" xmlns:xsl=\"\"http://www.w3.org/1999/XSL/Transform\"\"\u003e\r\n    \u003cxsl:output method=\"\"html\"\" indent=\"\"yes\"\" doctype-system=\"\"html\"\"/\u003e\r\n    \u003cxsl:template match=\"\"/\"\"\u003e\r\n        \u003cbar/\u003e\r\n    \u003c/xsl:template\u003e\r\n\u003c/xsl:stylesheet\u003e\"));\r\n\t\ttransform.Load(reader);\r\n\r\n\t\tvar settings = transform.OutputSettings.Clone();\r\n\t\tsettings.CloseOutput = false;\r\n\t\tsettings.Async = true;\r\n\r\n\t\tvar method = settings.OutputMethod;\r\n\r\n\t\tusing var stream = new MemoryStream();\r\n\t\tusing (var writer = XmlWriter.Create(stream, settings))\r\n\t\t{\r\n\t\t\tawait writer.WriteStartDocumentAsync();\r\n\t\t\tawait writer.WriteStartElementAsync(null, \"foo\", null);\r\n\t\t\tawait writer.WriteEndElementAsync();\r\n\t\t\tawait writer.WriteEndDocumentAsync();\r\n\t\t}\r\n\t\tstream.Position = 0;\r\n\t\tvar content = new StreamReader(stream).ReadToEnd();\r\n\t}\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nXmlWriter.Write*Async methods are supported.\r\n\r\n### Actual behavior\r\n\r\n`System.NotImplementedException` is thrown.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nAvoid the combination of XmlWriterSettings.OutputMethod = OutputMethod.Html and emitting a doctype of \"html\".\r\n\r\nWorking XSLT:\r\n\r\n```xml\r\n\u003cxsl:stylesheet version=\"1.0\"\" xmlns:xsl=\"\"http://www.w3.org/1999/XSL/Transform\"\u003e\r\n    \u003cxsl:output method=\"html\" indent=\"yes\"/\u003e\r\n    \u003cxsl:template match=\"/\"\u003e\r\n        \u003cbar/\u003e\r\n    \u003c/xsl:template\u003e\r\n\u003c/xsl:stylesheet\u003e\r\n```\r\n\r\nFailing XSLT:\r\n\r\n```xml\r\n\u003cxsl:stylesheet version=\"1.0\"\" xmlns:xsl=\"\"http://www.w3.org/1999/XSL/Transform\"\u003e\r\n    \u003cxsl:output method=\"html\" indent=\"yes\" doctype-system=\"html\"/\u003e\r\n    \u003cxsl:template match=\"/\"\u003e\r\n        \u003cbar/\u003e\r\n    \u003c/xsl:template\u003e\r\n\u003c/xsl:stylesheet\u003e\r\n```\r\n\r\n\r\n### Configuration\r\n\r\n.net5.0, .net6 rc2.\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaUcT-Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc46M_9G",
                                           "createdAt":  "2021-11-23T12:51:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen pairing an XSLT with an `XmlWriter` using `XmlWriterSettings.Async = true`, async operations throw a `NotImplementedException`.  Details founds in [this SO post](https://stackoverflow.com/a/70075455/1088293), with [this fiddle](https://dotnetfiddle.net/COrx9M).\r\n\r\nThis look unintentional, just an edge case not covered?\r\n\r\nThe use case is leveraging XSLT in an ASP.NET core pipeline using the recommend async IO.\n\n### Reproduction Steps\n\n```csharp\r\nusing System.IO;\r\nusing System.Threading.Tasks;\r\nusing System.Xml;\r\nusing System.Xml.Xsl;\r\n\t\t\t\t\t\r\npublic class Program\r\n{\r\n\tpublic static void Main()\r\n\t{\r\n\t\tTest().GetAwaiter().GetResult();\r\n\t}\r\n\t\r\n\tpublic static async Task Test()\r\n\t{\r\n\t\t\r\n\t\tvar transform = new XslCompiledTransform();\r\n\t\tusing var reader = XmlReader.Create(new StringReader(@\"\r\n\u003cxsl:stylesheet version=\"\"1.0\"\" xmlns:xsl=\"\"http://www.w3.org/1999/XSL/Transform\"\"\u003e\r\n    \u003cxsl:output method=\"\"html\"\" indent=\"\"yes\"\" doctype-system=\"\"html\"\"/\u003e\r\n    \u003cxsl:template match=\"\"/\"\"\u003e\r\n        \u003cbar/\u003e\r\n    \u003c/xsl:template\u003e\r\n\u003c/xsl:stylesheet\u003e\"));\r\n\t\ttransform.Load(reader);\r\n\r\n\t\tvar settings = transform.OutputSettings.Clone();\r\n\t\tsettings.CloseOutput = false;\r\n\t\tsettings.Async = true;\r\n\r\n\t\tvar method = settings.OutputMethod;\r\n\r\n\t\tusing var stream = new MemoryStream();\r\n\t\tusing (var writer = XmlWriter.Create(stream, settings))\r\n\t\t{\r\n\t\t\tawait writer.WriteStartDocumentAsync();\r\n\t\t\tawait writer.WriteStartElementAsync(null, \"foo\", null);\r\n\t\t\tawait writer.WriteEndElementAsync();\r\n\t\t\tawait writer.WriteEndDocumentAsync();\r\n\t\t}\r\n\t\tstream.Position = 0;\r\n\t\tvar content = new StreamReader(stream).ReadToEnd();\r\n\t}\r\n}\r\n```\n\n### Expected behavior\n\nXmlWriter.Write*Async methods are supported.\n\n### Actual behavior\n\n`System.NotImplementedException` is thrown.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nAvoid the combination of XmlWriterSettings.OutputMethod = OutputMethod.Html and emitting a doctype of \"html\".\r\n\r\nWorking XSLT:\r\n\r\n```xml\r\n\u003cxsl:stylesheet version=\"1.0\"\" xmlns:xsl=\"\"http://www.w3.org/1999/XSL/Transform\"\u003e\r\n    \u003cxsl:output method=\"html\" indent=\"yes\"/\u003e\r\n    \u003cxsl:template match=\"/\"\u003e\r\n        \u003cbar/\u003e\r\n    \u003c/xsl:template\u003e\r\n\u003c/xsl:stylesheet\u003e\r\n```\r\n\r\nFailing XSLT:\r\n\r\n```xml\r\n\u003cxsl:stylesheet version=\"1.0\"\" xmlns:xsl=\"\"http://www.w3.org/1999/XSL/Transform\"\u003e\r\n    \u003cxsl:output method=\"html\" indent=\"yes\" doctype-system=\"html\"/\u003e\r\n    \u003cxsl:template match=\"/\"\u003e\r\n        \u003cbar/\u003e\r\n    \u003c/xsl:template\u003e\r\n\u003c/xsl:stylesheet\u003e\r\n```\r\n\n\n### Configuration\n\n.net5.0, .net6 rc2.\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eepatrick\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-23T12:51:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46NLXL",
                                           "createdAt":  "2021-11-23T13:27:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kronic",
                                           "body":  "[see](https://github.com/dotnet/runtime/issues/50170)",
                                           "updatedAt":  "2021-11-23T13:27:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46NOOJ",
                                           "createdAt":  "2021-11-23T13:36:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCDvuQA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nanangp",
                                                                               "createdAt":  "2021-11-23T16:50:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "epatrick",
                                           "body":  "@kronic I think this case is different; it\u0027s really about the `XmlWriter` rather than the `XslCompiledTransform`. The transform is quick, but the results are being written to the `HttpResponse`. My goal is to avoiding having to re-enable SyncIO in the `ASP.NET core` pipeline.",
                                           "updatedAt":  "2021-11-24T13:17:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc467x_o",
                                           "createdAt":  "2021-12-08T11:58:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@epatrick assuming this is a small change would you be interested in sending a patch? We currently don\u0027t have cycles to actively look into non-regression bugs in XML. If it\u0027s a larger change it would be nice to get some initial idea on how much and types of changes are required to get us to this scenario to work",
                                           "updatedAt":  "2021-12-08T11:58:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pQuCG",
                                           "createdAt":  "2023-10-17T09:05:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Misiu",
                                           "body":  "I\u0027ve found this when trying to add async to DataverseClient: https://github.com/Data8/DataverseClient/pull/36#issuecomment-1701021824\r\nAny plans to add those missing methods?\r\nIn my case `WriteEndDocumentAsync` and `FlushAsync`",
                                           "updatedAt":  "2023-10-17T09:05:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pRxP5",
                                           "createdAt":  "2023-10-17T11:55:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "epatrick",
                                           "body":  "@Misiu apologies, but I\u0027ve not had time to test a fix and submit a pull request.  The [SO post](https://stackoverflow.com/a/70075455/1088293) has pretty good detail around the need to override `QueryOutputWriter`, if you want to take a stab.",
                                           "updatedAt":  "2023-10-17T11:55:42Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "QueryXmlWriter does not support Async",
        "labels":  [
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65884",
        "createdAt":  "2022-02-25T09:22:51Z",
        "number":  65884,
        "author":  "TrayanZapryanov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-03-04T11:17:12Z",
        "body":  "### Description\r\n\r\nI\u0027ve found one more place where String builder is used in System.Private.Xml library, XmlConvert class.\r\n\r\nMethods: EncodeName \u0026 DecodeName\r\nhttps://github.com/TrayanZapryanov/runtime/blob/30f30a3e5b6be09eacf7ea4cf054576753ed99ca/src/libraries/System.Private.Xml/src/System/Xml/XmlConvert.cs#L81\r\n\r\nhttps://github.com/TrayanZapryanov/runtime/blob/30f30a3e5b6be09eacf7ea4cf054576753ed99ca/src/libraries/System.Private.Xml/src/System/Xml/XmlConvert.cs#L193\r\n\r\nI\u0027ve tried to replace them with ValueStringBuilder, without changing logic too much, but some regression happens.\r\nHere are my initial results:\r\n\r\nBenchmarkDotNet=v0.13.1.1694-nightly, OS=Windows 10 (10.0.19043.1526/21H1/May2021Update)\r\n11th Gen Intel Core i9-11900K 3.50GHz, 1 CPU, 16 logical and 8 physical cores\r\n.NET SDK=7.0.100-preview.1.22110.4\r\n  [Host]     : .NET 7.0.0 (7.0.22.7608), X64 RyuJIT\r\n  Job-ESZDUI : .NET 7.0.0 (7.0.22.7608), X64 RyuJIT\r\n\r\nPowerPlanMode=00000000-0000-0000-0000-000000000000  Arguments=/p:DebugType=portable,-bl:benchmarkdotnet.binlog  IterationTime=250.0000 ms\r\nMaxIterationCount=20  MinIterationCount=15  WarmupCount=1\r\n\r\nBefore\r\n|                          Method |         Mean |      Error |     StdDev |       Median |          Min |          Max |  Gen 0 | Allocated |\r\n|-------------------------------- |-------------:|-----------:|-----------:|-------------:|-------------:|-------------:|-------:|----------:|\r\n|                      EncodeName |    79.324 ns |  0.3911 ns |  0.3658 ns |    79.328 ns |    78.694 ns |    79.950 ns | 0.0265 |     224 B |\r\n|               EncodeName_Larger |    78.694 ns |  1.3450 ns |  1.1923 ns |    79.119 ns |    75.901 ns |    79.473 ns |      - |         - |\r\n|              EncodeName_Invalid |   196.871 ns |  0.6762 ns |  0.6325 ns |   196.768 ns |   195.976 ns |   198.219 ns | 0.0524 |     440 B |\r\n|       EncodeName_Invalid_Larger | 1,457.543 ns |  5.9454 ns |  5.5614 ns | 1,458.640 ns | 1,447.873 ns | 1,465.100 ns | 0.4306 |    3608 B |\r\n|                      DecodeName |     5.231 ns |  0.0734 ns |  0.0613 ns |     5.211 ns |     5.167 ns |     5.358 ns |      - |         - |\r\n|               DecodeName_Larger |     7.449 ns |  0.0286 ns |  0.0253 ns |     7.456 ns |     7.399 ns |     7.481 ns |      - |         - |\r\n|              DecodeName_Invalid |   915.436 ns | 18.4875 ns | 21.2902 ns |   910.039 ns |   887.341 ns |   968.867 ns | 0.2427 |    2040 B |\r\n|       DecodeName_Invalid_Larger | 1,020.236 ns | 12.8963 ns | 10.0686 ns | 1,018.907 ns | 1,009.080 ns | 1,046.104 ns | 0.3394 |    2840 B |\r\n\r\nAfter\r\n|                          Method |         Mean |      Error |     StdDev |       Median |          Min |          Max |  Gen 0 | Allocated |\r\n|-------------------------------- |-------------:|-----------:|-----------:|-------------:|-------------:|-------------:|-------:|----------:|\r\n|                      EncodeName |    84.246 ns |  0.3823 ns |  0.3389 ns |    84.303 ns |    83.670 ns |    84.822 ns | 0.0094 |      80 B |\r\n|               EncodeName_Larger |    77.271 ns |  0.2403 ns |  0.2130 ns |    77.227 ns |    77.024 ns |    77.736 ns |      - |         - |\r\n|              EncodeName_Invalid |   149.750 ns |  1.1914 ns |  1.0561 ns |   149.633 ns |   147.796 ns |   152.204 ns | 0.0159 |     136 B |\r\n|       EncodeName_Invalid_Larger | 1,440.407 ns |  5.3360 ns |  4.9913 ns | 1,439.826 ns | 1,434.123 ns | 1,451.952 ns | 0.2814 |    2360 B |\r\n|                      DecodeName |     6.067 ns |  0.1651 ns |  0.1835 ns |     6.043 ns |     5.716 ns |     6.375 ns |      - |         - |\r\n|               DecodeName_Larger |     7.524 ns |  0.1864 ns |  0.1556 ns |     7.536 ns |     7.208 ns |     7.747 ns |      - |         - |\r\n|              DecodeName_Invalid | 1,020.093 ns | 20.4007 ns | 21.8285 ns | 1,013.902 ns |   997.963 ns | 1,063.113 ns | 0.2140 |    1816 B |\r\n|       DecodeName_Invalid_Larger | 1,104.327 ns | 10.8679 ns |  9.0752 ns | 1,102.232 ns | 1,086.697 ns | 1,124.819 ns | 0.2646 |    2216 B |\r\n\r\nBenchmark code used: \r\n`\r\n[BenchmarkCategory(Categories.Libraries)]\r\n    public class Perf_XmlConvert\r\n    {\r\n        private string _encodedName_larger = new string(\u0027b\u0027, 100);\r\n\t\tprivate string _invalidEncodedName = XmlConvert.EncodeName(\"not encoded name%$^\u0026\");\r\n\t\tprivate string _invalidEncodedName_larger = XmlConvert.EncodeName(new string(\u0027b\u0027, 100) + \"not encoded name%$^\u0026\" + new string(\u0027b\u0027, 100));\r\n\r\n\t\t[Benchmark]\r\n\t\tpublic string EncodeName() =\u003e XmlConvert.EncodeName(\"not encoded name\");\r\n\r\n\t\t[Benchmark]\r\n\t\tpublic string EncodeName_Larger() =\u003e XmlConvert.EncodeName(_encodedName_larger);\r\n\r\n\t\t[Benchmark]\r\n\t\tpublic string EncodeName_Invalid() =\u003e XmlConvert.EncodeName(\"not encoded name%$^\u0026\");\r\n\r\n\t\t[Benchmark]\r\n\t\tpublic string EncodeName_Invalid_Larger() =\u003e XmlConvert.EncodeName(_invalidEncodedName_larger);\r\n\r\n\t\t[Benchmark]\r\n\t\tpublic string DecodeName() =\u003e XmlConvert.DecodeName(\"not encoded name\");\r\n\r\n\t\t[Benchmark]\r\n\t\tpublic string DecodeName_Larger() =\u003e XmlConvert.DecodeName(_encodedName_larger);\r\n\r\n\t\t[Benchmark]\r\n\t\tpublic string DecodeName_Invalid() =\u003e XmlConvert.DecodeName(_invalidEncodedName);\r\n\r\n\t\t[Benchmark]\r\n\t\tpublic string DecodeName_Invalid_Larger() =\u003e XmlConvert.DecodeName(_invalidEncodedName_larger);\r\n\t}`\r\n\r\nAnd now the question :) \r\n**As I can see small regression in times, but some wins in memory allocations, is it worth opening PR for this or not?**",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPyAk-A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-oBx2",
                                           "createdAt":  "2022-02-25T09:22:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-02-25T09:22:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-oSeN",
                                           "createdAt":  "2022-02-25T10:53:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI\u0027ve found one more place where String builder is used in System.Private.Xml library, XmlConvert class.\r\n\r\nMethods: EncodeName \u0026 DecodeName\r\nhttps://github.com/TrayanZapryanov/runtime/blob/30f30a3e5b6be09eacf7ea4cf054576753ed99ca/src/libraries/System.Private.Xml/src/System/Xml/XmlConvert.cs#L81\r\n\r\nhttps://github.com/TrayanZapryanov/runtime/blob/30f30a3e5b6be09eacf7ea4cf054576753ed99ca/src/libraries/System.Private.Xml/src/System/Xml/XmlConvert.cs#L193\r\n\r\nI\u0027ve tried to replace them with ValueStringBuilder, without changing logic too much, but some regression happens.\r\nHere are my initial results:\r\n\r\nBenchmarkDotNet=v0.13.1.1694-nightly, OS=Windows 10 (10.0.19043.1526/21H1/May2021Update)\r\n11th Gen Intel Core i9-11900K 3.50GHz, 1 CPU, 16 logical and 8 physical cores\r\n.NET SDK=7.0.100-preview.1.22110.4\r\n  [Host]     : .NET 7.0.0 (7.0.22.7608), X64 RyuJIT\r\n  Job-ESZDUI : .NET 7.0.0 (7.0.22.7608), X64 RyuJIT\r\n\r\nPowerPlanMode=00000000-0000-0000-0000-000000000000  Arguments=/p:DebugType=portable,-bl:benchmarkdotnet.binlog  IterationTime=250.0000 ms\r\nMaxIterationCount=20  MinIterationCount=15  WarmupCount=1\r\n\r\nBefore\r\n|                          Method |         Mean |      Error |     StdDev |       Median |          Min |          Max |  Gen 0 | Allocated |\r\n|-------------------------------- |-------------:|-----------:|-----------:|-------------:|-------------:|-------------:|-------:|----------:|\r\n|                      EncodeName |    79.324 ns |  0.3911 ns |  0.3658 ns |    79.328 ns |    78.694 ns |    79.950 ns | 0.0265 |     224 B |\r\n|               EncodeName_Larger |    78.694 ns |  1.3450 ns |  1.1923 ns |    79.119 ns |    75.901 ns |    79.473 ns |      - |         - |\r\n|              EncodeName_Invalid |   196.871 ns |  0.6762 ns |  0.6325 ns |   196.768 ns |   195.976 ns |   198.219 ns | 0.0524 |     440 B |\r\n|       EncodeName_Invalid_Larger | 1,457.543 ns |  5.9454 ns |  5.5614 ns | 1,458.640 ns | 1,447.873 ns | 1,465.100 ns | 0.4306 |    3608 B |\r\n|                      DecodeName |     5.231 ns |  0.0734 ns |  0.0613 ns |     5.211 ns |     5.167 ns |     5.358 ns |      - |         - |\r\n|               DecodeName_Larger |     7.449 ns |  0.0286 ns |  0.0253 ns |     7.456 ns |     7.399 ns |     7.481 ns |      - |         - |\r\n|              DecodeName_Invalid |   915.436 ns | 18.4875 ns | 21.2902 ns |   910.039 ns |   887.341 ns |   968.867 ns | 0.2427 |    2040 B |\r\n|       DecodeName_Invalid_Larger | 1,020.236 ns | 12.8963 ns | 10.0686 ns | 1,018.907 ns | 1,009.080 ns | 1,046.104 ns | 0.3394 |    2840 B |\r\n\r\nAfter\r\n|                          Method |         Mean |      Error |     StdDev |       Median |          Min |          Max |  Gen 0 | Allocated |\r\n|-------------------------------- |-------------:|-----------:|-----------:|-------------:|-------------:|-------------:|-------:|----------:|\r\n|                      EncodeName |    84.246 ns |  0.3823 ns |  0.3389 ns |    84.303 ns |    83.670 ns |    84.822 ns | 0.0094 |      80 B |\r\n|               EncodeName_Larger |    77.271 ns |  0.2403 ns |  0.2130 ns |    77.227 ns |    77.024 ns |    77.736 ns |      - |         - |\r\n|              EncodeName_Invalid |   149.750 ns |  1.1914 ns |  1.0561 ns |   149.633 ns |   147.796 ns |   152.204 ns | 0.0159 |     136 B |\r\n|       EncodeName_Invalid_Larger | 1,440.407 ns |  5.3360 ns |  4.9913 ns | 1,439.826 ns | 1,434.123 ns | 1,451.952 ns | 0.2814 |    2360 B |\r\n|                      DecodeName |     6.067 ns |  0.1651 ns |  0.1835 ns |     6.043 ns |     5.716 ns |     6.375 ns |      - |         - |\r\n|               DecodeName_Larger |     7.524 ns |  0.1864 ns |  0.1556 ns |     7.536 ns |     7.208 ns |     7.747 ns |      - |         - |\r\n|              DecodeName_Invalid | 1,020.093 ns | 20.4007 ns | 21.8285 ns | 1,013.902 ns |   997.963 ns | 1,063.113 ns | 0.2140 |    1816 B |\r\n|       DecodeName_Invalid_Larger | 1,104.327 ns | 10.8679 ns |  9.0752 ns | 1,102.232 ns | 1,086.697 ns | 1,124.819 ns | 0.2646 |    2216 B |\r\n\r\nBenchmark code used: \r\n`\r\n[BenchmarkCategory(Categories.Libraries)]\r\n    public class Perf_XmlConvert\r\n    {\r\n        private string _encodedName_larger = new string(\u0027b\u0027, 100);\r\n\t\tprivate string _invalidEncodedName = XmlConvert.EncodeName(\"not encoded name%$^\u0026\");\r\n\t\tprivate string _invalidEncodedName_larger = XmlConvert.EncodeName(new string(\u0027b\u0027, 100) + \"not encoded name%$^\u0026\" + new string(\u0027b\u0027, 100));\r\n\r\n\t\t[Benchmark]\r\n\t\tpublic string EncodeName() =\u003e XmlConvert.EncodeName(\"not encoded name\");\r\n\r\n\t\t[Benchmark]\r\n\t\tpublic string EncodeName_Larger() =\u003e XmlConvert.EncodeName(_encodedName_larger);\r\n\r\n\t\t[Benchmark]\r\n\t\tpublic string EncodeName_Invalid() =\u003e XmlConvert.EncodeName(\"not encoded name%$^\u0026\");\r\n\r\n\t\t[Benchmark]\r\n\t\tpublic string EncodeName_Invalid_Larger() =\u003e XmlConvert.EncodeName(_invalidEncodedName_larger);\r\n\r\n\t\t[Benchmark]\r\n\t\tpublic string DecodeName() =\u003e XmlConvert.DecodeName(\"not encoded name\");\r\n\r\n\t\t[Benchmark]\r\n\t\tpublic string DecodeName_Larger() =\u003e XmlConvert.DecodeName(_encodedName_larger);\r\n\r\n\t\t[Benchmark]\r\n\t\tpublic string DecodeName_Invalid() =\u003e XmlConvert.DecodeName(_invalidEncodedName);\r\n\r\n\t\t[Benchmark]\r\n\t\tpublic string DecodeName_Invalid_Larger() =\u003e XmlConvert.DecodeName(_invalidEncodedName_larger);\r\n\t}`\r\n\r\nAnd now the question :) \r\n**As I can see small regression in times, but some wins in memory allocations, is it worth opening PR for this or not?**\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTrayanZapryanov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-25T10:53:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-odVo",
                                           "createdAt":  "2022-02-25T12:01:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "Thanks @TrayanZapryanov for investigation!\r\n\r\nGiven just the above info IMO it\u0027s not worth to merge but before we get into premature conclusions I have some notes for perf measurements:\r\n- invalid cases are not relevant, we\u0027re not optimizing for user errors\r\n- most important scenarios are shorter names - super long names are not particularly common\r\n- it might be worth checking how the perf looks like when reading large/small XML file rather than just the method itself\r\n- are you getting regression every time or you get different results if you try couple of times? (i.e. after restarting PC and killing all unnecessary apps)\r\n- make sure before \u0026 after is only different by your change and no other changes along the way\r\n\r\nCan you share the changeset you\u0027re checking?\r\n\r\nIf we can see comparable time for reading but much less allocations that will be much more compelling reason to merge",
                                           "updatedAt":  "2022-02-25T12:03:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-okhu",
                                           "createdAt":  "2022-02-25T12:45:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TrayanZapryanov",
                                           "body":  "@krwq Thanks for complete answer.\r\nI\u0027ve added draft PR, so you can see my changes.\r\n\r\n\u003e - invalid cases are not relevant, we\u0027re not optimizing for user errors\r\n\u003e - most important scenarios are shorter names - super long names are not particularly common\r\n\r\nGood to know\r\n\r\n\u003e it might be worth checking how the perf looks like when reading large/small XML file rather than just the method itself\r\n\r\nCan you point me which unit test I can use for this ?\r\n\r\n\u003e are you getting regression every time or you get different results if you try couple of times? (i.e. after restarting PC and killing all unnecessary apps)\r\n\r\nYes\r\n\r\n\u003e make sure before \u0026 after is only different by your change and no other changes along the way\r\n\r\nI am using performance repo for this and using following commands:\r\ndotnet run -c Release -f net7.0 --filter *XmlConvert**\r\ndotnet run -c Release -f net7.0 --filter *XmlConvert** --coreRun C:\\Work\\Github\\TZ_runtime\\artifacts\\bin\\testhost\\net7.0-windows-Release-x64\\shared\\Microsoft.NETCore.App\\7.0.0\\CoreRun.exe\r\n\r\n\r\n",
                                           "updatedAt":  "2022-02-25T12:49:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-ols4",
                                           "createdAt":  "2022-02-25T12:52:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TrayanZapryanov",
                                           "body":  "Maybe \"EncodeName\" is worth as there we see small regression, but quite a lot memory savings. I\u0027ve just made also the opposite method to have same structure.",
                                           "updatedAt":  "2022-02-25T12:52:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-otpm",
                                           "createdAt":  "2022-02-25T13:36:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCQZXzg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TrayanZapryanov",
                                                                               "createdAt":  "2022-02-25T13:43:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "krwq",
                                           "body":  "I\u0027ll suggest to change baseline run a bit so that you have a second runtime folder at exactly one commit before your change, otherwise some other perf optimizations elsewhere might add noise to your results",
                                           "updatedAt":  "2022-02-25T13:36:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_ICT4",
                                           "createdAt":  "2022-03-04T11:15:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCRga-w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TrayanZapryanov",
                                                                               "createdAt":  "2022-03-04T18:46:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "krwq",
                                           "body":  "Definitely we should live unit benchmark i.e. EncodeName with couple of different length but max sanely long (sanely as length user might actually do that rather than artificially crafted).\r\n\r\nFor the the end to end scenario: either generate or find relatively long XML find (people do use megabytes long XML files in practice - even personally seen couple of GBs long) and see how it affects overall reading - ideally we should see some results for something for short (up to few KB), medium (few MB) and maybe one large (500+MB).\r\n\r\nThe biggest point is my last comment about double checking it\u0027s exactly one commit diff and not also some other random changes in various other areas.\r\n\r\nAlso if you redo the test and find unitary EncodeName is faster or same it might not be worth to check end to end scenarios as it almost surely have positive result on that as well. It might be good to check but it won\u0027t be required. Only regression or borderline like above (perf decrease but memory improvement) is something you should double check.",
                                           "updatedAt":  "2022-03-04T11:16:54Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[Question] Should we replace another usage of StringBuilder with ValueStringBuilder in System.Private.Xml/XmlConvert?",
        "labels":  [
                       "area-System.Xml",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66735",
        "createdAt":  "2022-03-16T21:10:07Z",
        "number":  66735,
        "author":  "stianl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-03-24T12:28:39Z",
        "body":  "### Description\n\nIt\u0027s not possible to write to `Response.Body` stream using `XslCompiledTransform`.\r\nSince synchronous writes are not allowed, I\u0027ve set `Async = true` on the `XmlWriter` used with `XslCompiledTransform`, but this fails as well.\r\n\r\nUsing an XmlWriter directly and async write/flush methods works fine so I suspect the problem lies with `XslCompiledTransform`.\n\n### Reproduction Steps\n\nCan be reproduced with this method:\r\n\r\n```c#\r\n[HttpGet]\r\npublic async Task TransformXml()\r\n{\r\n    var xsltStream = new StringReader(@\"\r\n            \u003cxsl:stylesheet version=\"\"1.0\"\" xmlns:xsl=\"\"http://www.w3.org/1999/XSL/Transform\"\"\u003e\r\n            \u003c/xsl:stylesheet\u003e\");\r\n    using var xsltReader = XmlReader.Create(xsltStream);\r\n    var xslt = new XslCompiledTransform();\r\n    xslt.Load(xsltReader);\r\n    var xmlStream = new StringReader(\"\u003ctest\u003e\u003c/test\u003e\");\r\n    using var xml = XmlReader.Create(xmlStream);\r\n    await using var writer = XmlWriter.Create(Response.Body, new XmlWriterSettings { Async = true });\r\n    xslt.Transform(xml, writer);\r\n}\r\n```\r\n\r\nWithout setting `Async = true` in XmlWriterSettings the following (expected) exception is thrown:\r\n\r\n```\r\nfail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n      Connection id \"0HMG7HQK4AIRI\", Request id \"0HMG7HQK4AIRI:00000003\": An unhandled exception was thrown by the application.\r\n      System.InvalidOperationException: Set XmlWriterSettings.Async to true if you want to use Async Methods.\r\n```\n\n### Expected behavior\n\nNo exception\n\n### Actual behavior\n\nApplication throws exception:\r\n\r\n```\r\nfail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n      Connection id \"0HMG7HLMHUG8T\", Request id \"0HMG7HLMHUG8T:00000002\": An unhandled exception was thrown by the application.\r\n      System.InvalidOperationException: Synchronous operations are disallowed. Call WriteAsync or set AllowSynchronousIO to true instead.\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpResponseStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n         at System.Xml.XmlUtf8RawTextWriter.FlushBuffer()\r\n         at System.Xml.XmlUtf8RawTextWriter.Flush()\r\n         at System.Xml.XmlWellFormedWriter.Flush()\r\n         at System.Xml.Xsl.XmlILCommand.Execute(Object defaultDocument, XmlResolver dataSources, XsltArgumentList argumentList, XmlWriter writer)\r\n         at System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader input, XsltArgumentList arguments, XmlWriter results, XmlResolver documentResolver)\r\n         at System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader input, XmlWriter results)\r\n\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 6, tested on macOS (M1) and Windows (x64).\n\n### Other information\n\nMay be related to #31104.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQDp9Fw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4_wVq1",
                                           "createdAt":  "2022-03-16T21:10:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIt\u0027s not possible to write to `Response.Body` stream using `XslCompiledTransform`.\r\nSince synchronous writes are not allowed, I\u0027ve set `Async = true` on the `XmlWriter` used with `XslCompiledTransform`, but this fails as well.\r\n\r\nUsing an XmlWriter directly and async write/flush methods works fine so I suspect the problem lies with `XslCompiledTransform`.\n\n### Reproduction Steps\n\nCan be reproduced with this method:\r\n\r\n```c#\r\n[HttpGet]\r\npublic async Task TransformXml()\r\n{\r\n    var xsltStream = new StringReader(@\"\r\n            \u003cxsl:stylesheet version=\"\"1.0\"\" xmlns:xsl=\"\"http://www.w3.org/1999/XSL/Transform\"\"\u003e\r\n            \u003c/xsl:stylesheet\u003e\");\r\n    using var xsltReader = XmlReader.Create(xsltStream);\r\n    var xslt = new XslCompiledTransform();\r\n    xslt.Load(xsltReader);\r\n    var xmlStream = new StringReader(\"\u003ctest\u003e\u003c/test\u003e\");\r\n    using var xml = XmlReader.Create(xmlStream);\r\n    await using var writer = XmlWriter.Create(Response.Body, new XmlWriterSettings { Async = true });\r\n    xslt.Transform(xml, writer);\r\n}\r\n```\r\n\r\nWithout setting `Async = true` in XmlWriterSettings the following (expected) exception is thrown:\r\n\r\n```\r\nfail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n      Connection id \"0HMG7HQK4AIRI\", Request id \"0HMG7HQK4AIRI:00000003\": An unhandled exception was thrown by the application.\r\n      System.InvalidOperationException: Set XmlWriterSettings.Async to true if you want to use Async Methods.\r\n```\n\n### Expected behavior\n\nNo exception\n\n### Actual behavior\n\nApplication throws exception:\r\n\r\n```\r\nfail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n      Connection id \"0HMG7HLMHUG8T\", Request id \"0HMG7HLMHUG8T:00000002\": An unhandled exception was thrown by the application.\r\n      System.InvalidOperationException: Synchronous operations are disallowed. Call WriteAsync or set AllowSynchronousIO to true instead.\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpResponseStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n         at System.Xml.XmlUtf8RawTextWriter.FlushBuffer()\r\n         at System.Xml.XmlUtf8RawTextWriter.Flush()\r\n         at System.Xml.XmlWellFormedWriter.Flush()\r\n         at System.Xml.Xsl.XmlILCommand.Execute(Object defaultDocument, XmlResolver dataSources, XsltArgumentList argumentList, XmlWriter writer)\r\n         at System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader input, XsltArgumentList arguments, XmlWriter results, XmlResolver documentResolver)\r\n         at System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader input, XmlWriter results)\r\n\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 6, tested on macOS (M1) and Windows (x64).\n\n### Other information\n\nMay be related to #31104.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estianl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-16T21:10:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AOn0X",
                                           "createdAt":  "2022-03-24T12:27:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "I think changing the XSL compiler to work async would be a bit of work and not just a simple fix. The exception is coming from the stream. Perhaps an acceptable workaround would be to use MemoryStream when creating XmlWriter and then copy content from MemoryStream to the response body using async method, something like:\r\n\r\n```csharp\r\nusing var ms = new MemoryStream();\r\nawait using var writer = XmlWriter.Create(ms, new XmlWriterSettings { Async = true });\r\nms.Position = 0;\r\nawait ms.CopyToAsync(Response.Body);\r\n```",
                                           "updatedAt":  "2022-03-24T12:27:52Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "XslCompiledTransform is calling sync Flush",
        "labels":  [
                       "bug",
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67283",
        "createdAt":  "2022-03-29T07:39:36Z",
        "number":  67283,
        "author":  "mukulga",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-10T19:50:58Z",
        "body":  "### Description\n\nThe XML schema (XSD) validation example, mentioned at https://docs.microsoft.com/en-us/dotnet/standard/data/xml/xml-schema-xsd-validation-with-xmlschemaset, doesn\u0027t validate properly due to the presence of targetNamespace attribute within the XML schema document.\n\n### Reproduction Steps\n\nPlease use the complete XML schema validation example, described at https://docs.microsoft.com/en-us/dotnet/standard/data/xml/xml-schema-xsd-validation-with-xmlschemaset. If within the XML instance document example, posted on the mentioned link, we change the value of \"xmlns\" at the top (for e.g, if we change that to http://www.contoso.com/books1), the XSD validation doesn\u0027t generate any error.\n\n### Expected behavior\n\nThe XSD validation, should produce an error like, \"XML element not declared\", or \"element not declared\".\n\n### Actual behavior\n\nThe XSD validation, doesn\u0027t produce any error message.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET version : 6.0, 5.0\r\n\r\nOS : Windows 11\r\n\r\nCPU architecture : x64\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQyfT4g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5AduBB",
                                           "createdAt":  "2022-03-29T07:39:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe XML schema (XSD) validation example, mentioned at https://docs.microsoft.com/en-us/dotnet/standard/data/xml/xml-schema-xsd-validation-with-xmlschemaset, doesn\u0027t validate properly due to the presence of targetNamespace attribute within the XML schema document.\n\n### Reproduction Steps\n\nPlease use the complete XML schema validation example, described at https://docs.microsoft.com/en-us/dotnet/standard/data/xml/xml-schema-xsd-validation-with-xmlschemaset. If within the XML instance document example, posted on the mentioned link, we change the value of \"xmlns\" at the top (for e.g, if we change that to http://www.contoso.com/books1), the XSD validation doesn\u0027t generate any error.\n\n### Expected behavior\n\nThe XSD validation, should produce an error like, \"XML element not declared\", or \"element not declared\".\n\n### Actual behavior\n\nThe XSD validation, doesn\u0027t produce any error message.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET version : 6.0, 5.0\r\n\r\nOS : Windows 11\r\n\r\nCPU architecture : x64\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emukulga\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-29T07:39:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DDRl3",
                                           "createdAt":  "2022-05-12T12:28:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@mukulga good catch - example probably should have `booksSettings.ValidationFlags = XmlSchemaValidationFlags.ReportValidationWarnings;`\r\n\r\nMissing schema for unknown namespace is considered a warning not an error and since warnings are not reported you\u0027re seeing empty output.\r\n\r\nnote that this is not specific to .NET Framework also repros on .NET 7 and presumably all version before.\r\n",
                                           "updatedAt":  "2022-05-12T12:28:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DDSg5",
                                           "createdAt":  "2022-05-12T12:32:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "If you\u0027d like to make a contribution yourself you\u0027ll need to edit following 3 files:\r\nhttps://github.com/dotnet/docs/blob/main/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall%20Example/CS/xmlschemasetexample.cs\r\nhttps://github.com/dotnet/docs/blob/main/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall%20Example/CPP/xmlschemasetexample.cpp\r\nhttps://github.com/dotnet/docs/blob/main/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall%20Example/VB/xmlschemasetexample.vb",
                                           "updatedAt":  "2022-05-12T12:32:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DJ9Pi",
                                           "createdAt":  "2022-05-14T10:02:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mukulga",
                                           "body":  "\u003e @mukulga good catch - example probably should have `booksSettings.ValidationFlags = XmlSchemaValidationFlags.ReportValidationWarnings;`\r\n\u003e \r\n\u003e Missing schema for unknown namespace is considered a warning not an error and since warnings are not reported you\u0027re seeing empty output.\r\n\u003e \r\n\u003e note that this is not specific to .NET Framework also repros on .NET 7 and presumably all version before.\r\n\r\nThanks, for your reply.\r\n\r\nI\u0027m happy with your suggestion to have, booksSettings.ValidationFlags = XmlSchemaValidationFlags.ReportValidationWarnings; That gives me all the other information I need, for the cited XML Schema validation example.",
                                           "updatedAt":  "2022-05-14T10:02:17Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  ".net framework, can\u0027t validate XML documents with an XML schema having targetNamespace",
        "labels":  [
                       "bug",
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68850",
        "createdAt":  "2022-05-04T09:31:30Z",
        "number":  68850,
        "author":  "IgorMenshikov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-12T13:06:30Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nI am not sure if this is a correct repo but System.Xml.Linq is a part of NET Core, so I post it here.\r\n\r\nSystem.Xml.Linq.XElement.Parse has very low performance if pass incorrect XML.  With correct XML the code can do 5000+ parse calls per second. Incorrect XML results in 10s per second.\r\n\r\nMaybe it is because it throws an exception on each call. \r\n\r\nI have 1000s of XML coming from external data source and cannot control if they are correct. So, low performance just make it impossible to process data.\r\n\r\nMy test code is below. I run it on NET Core 6.0.4.\r\n\r\n```C#\r\n        [Fact(Timeout = 1000)]\r\n        public static void ParseFail()\r\n        {\r\n            var xml = \"\u003cd /\u003e\u003cd\u003e\u003cC1\u003e01\u003c/C1\u003e\u003c/d\u003e\";\r\n            const int iterCount = 5000;\r\n\r\n            for (int i = 0; i \u003c iterCount; i++)\r\n            {\r\n                try\r\n                {\r\n                    System.Xml.Linq.XElement.Parse(xml);\r\n                }\r\n                catch (Exception)\r\n                {\r\n                }\r\n            }\r\n        }\r\n```\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORm_i3Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ClbbK",
                                           "createdAt":  "2022-05-04T09:31:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nI am not sure if this is a correct repo but System.Xml.Linq is a part of NET Core, so I post it here.\r\n\r\nSystem.Xml.Linq.XElement.Parse has very low performance if pass incorrect XML.  With correct XML the code can do 5000+ parse calls per second. Incorrect XML results in 10s per second.\r\n\r\nMaybe it is because it throws an exception on each call. \r\n\r\nI have 1000s of XML coming from external data source and cannot control if they are correct. So, low performance just make it impossible to process data.\r\n\r\nMy test code is below. I run it on NET Core 6.0.4.\r\n\r\n```C#\r\n        [Fact(Timeout = 1000)]\r\n        public static void ParseFail()\r\n        {\r\n            var xml = \"\u003cd /\u003e\u003cd\u003e\u003cC1\u003e01\u003c/C1\u003e\u003c/d\u003e\";\r\n            const int iterCount = 5000;\r\n\r\n            for (int i = 0; i \u003c iterCount; i++)\r\n            {\r\n                try\r\n                {\r\n                    System.Xml.Linq.XElement.Parse(xml);\r\n                }\r\n                catch (Exception)\r\n                {\r\n                }\r\n            }\r\n        }\r\n```\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eIgorMenshikov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-04T09:31:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Clu6h",
                                           "createdAt":  "2022-05-04T11:10:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@IgorMenshikov we usually don\u0027t optimize for fail paths but I can see this being problematic in a web app. We currently don\u0027t have plans to improve this but I\u0027d be happy to review any contributions. Would you be interested in digging a bit to find out what causes that to be slow? You can try to start searching for workarounds, i.e.: pass input to XmlReader and simply do read loop first for initial validation (I\u0027m not sure if problem is specific to XmlReader or XLinq) and see if that one can find errors quicker - assuming XmlReader can do this much faster it would decrease perf slightly overall but at least you wouldn\u0027t suffer heavy hit for bad actors.",
                                           "updatedAt":  "2022-05-04T11:13:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Clw1D",
                                           "createdAt":  "2022-05-04T11:20:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "i.e. calling simply method like this before calling XElement.Parse reduces validation time by 30% for me, not sure if that would be enough for you (that\u0027s around 3-4 times slower than for a good case with Validate and around 5-6 times slower than original version without Validate - tested on similarly long XML):\r\n\r\n```csharp\r\nvoid Validate(string xml)\r\n{\r\n    using (XmlReader reader = XmlReader.Create(new StringReader(xml)))\r\n    {\r\n        while (reader.Read()) ;\r\n    }\r\n}\r\n```\r\n\r\nalso consider blocking or add some throttling for bad actors",
                                           "updatedAt":  "2022-05-04T11:27:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CmTrF",
                                           "createdAt":  "2022-05-04T13:49:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IgorMenshikov",
                                           "body":  "My test with 1000 iterations:\r\n1. XElement.Parse with good XML = 40 ms\r\n2. XElement.Parse with bad XML = 3.9 sec\r\n3. XmlReader.Create with bad XML = 3.5/4.3 sec\r\n\r\nSo, I do not see a big difference between XElement.Parse and XmlReader.Create.\r\n\r\nBut difference between success and fail paths is 100 times.\r\n\r\nI have to process millions of XMLs. Usually quite fast but with many wrong XML it may take many minutes.",
                                           "updatedAt":  "2022-05-04T13:49:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CmbvK",
                                           "createdAt":  "2022-05-04T14:18:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Profiling it shows that ~85% of the time is spent throwing the failure exception.  So you would need to come up with a way that communicated failure via a means other than exceptions.",
                                           "updatedAt":  "2022-05-04T14:18:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Cm4kU",
                                           "createdAt":  "2022-05-04T15:26:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IgorMenshikov",
                                           "body":  "If exceptions take 85%, it would be perfect to have something like TryParse as we have with other C# stuff. 100 times is too big difference.\r\n",
                                           "updatedAt":  "2022-05-04T15:26:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DE0wn",
                                           "createdAt":  "2022-05-12T19:16:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BhaaLseN",
                                           "body":  "A `TryParse` method sounds interresting, but I wonder what the 85% actually is. Because I\u0027d _also_ expect `TryParse` to give me information on _what_ didn\u0027t parse; which at the very least means `IXmlLineInfo` when called with `LoadOptions.SetLineInfo` if not the full info the thrown `XmlException` would have otherwise.\r\n\r\nThe main validation scenarios I have (that currently use the  `try`/`Parse`/`catch` pattern) _also_ provides feedback using the values obtained from the `XmlException`. If that ends up being the larger chunk of the 85%, providing a `TryParse` method wouldn\u0027t immediately bring much benefit there.\r\n\u003csup\u003e_(Then again, I dont have the large number of files combined with a high error rate; so I don\u0027t immediately see this large performance degradation.)_\u003c/sup\u003e",
                                           "updatedAt":  "2022-05-12T19:16:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gb-Ld",
                                           "createdAt":  "2022-07-12T13:06:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "Honestly in order to provide TryParse methods which return useful error info across entire XML API surface would be relatively large amount of work which would probably be better spent trying to optimize exception handling in general and adding it just to this API would be really weird. I think it\u0027s very unlikely we\u0027re going to do such changes.\r\n\r\nI think if you\u0027re getting lots of bad XMLs you should consider adding different protections against that (i.e. blocking users who are sending such XMLs etc)",
                                           "updatedAt":  "2022-07-12T13:06:29Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "System.Xml.Linq.XElement.Parse very low performance with incorrect XML",
        "labels":  [
                       "enhancement",
                       "area-System.Xml",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/69420",
        "createdAt":  "2022-05-17T06:35:32Z",
        "number":  69420,
        "author":  "Eli-Black-Work",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCrzPfw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OoLunar",
                                            "createdAt":  "2022-12-08T20:49:33Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-07-13T02:28:26Z",
        "body":  "### Background and motivation\r\n\r\n`XContainer` contains an `Element()` method that looks for an element with the specified name and returns `null` if it doesn\u0027t find one:\r\n```c#\r\npublic XElement? Element(XName name);\r\n```\r\n\r\nWith NRT\u0027s (nullable reference types) enabled, this leads to warnings in some scenarios, e.g.\r\n```c#\r\n// Produces two warnings of \"CS8602: Dereference of a possibly null reference\"\r\nXmlElement? grandChild = xmlDoc.Root.Element(\"Parent\").Element(\"Child\").Element(\"Grandchild\");\r\n```\r\n\r\n### API Proposal\r\n\r\nI\u0027d like to request that a `RequiredElement()` method be added. This method should always return a non-null value and should throw an exception if the element isn\u0027t found:\r\n\r\n```c#\r\npublic XElement RequiredElement(XName name);\r\n```\r\n\r\nThis would be similar to [ServiceProviderServiceExtensions](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.serviceproviderserviceextensions?view=dotnet-plat-ext-6.0#methods), which has both `GetService()` and `GetRequiredService()` methods.\r\n\r\n### API Usage\r\n\r\n```c#\r\nXmlElement grandChild = xmlDoc.Root.RequiredElement(\"Parent\").RequiredElement(\"Child\").RequiredElement(\"Grandchild\");\r\n```\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORn5_Pg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5DQxcn",
                                           "createdAt":  "2022-05-17T06:35:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-05-17T06:35:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DQyiV",
                                           "createdAt":  "2022-05-17T06:41:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eli-Black-Work",
                                           "body":  "It\u0027d also be nice to have a `XDocument.RequiredRoot` property, etc.",
                                           "updatedAt":  "2022-05-17T06:41:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DRHRs",
                                           "createdAt":  "2022-05-17T08:15:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "Element just needs `NotNullIfNotNullAttribute` on the return to get rid of the warnings.",
                                           "updatedAt":  "2022-05-17T08:15:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DRJsX",
                                           "createdAt":  "2022-05-17T08:24:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eli-Black-Work",
                                           "body":  "@MichalPetryka Is that correct? Whether or not the return value is null isn\u0027t related to whether or not `name` is null.",
                                           "updatedAt":  "2022-05-17T08:24:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DRZK6",
                                           "createdAt":  "2022-05-17T09:23:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "You can use the `!` operator instead:\r\n\r\n```c#\r\nXElement grandChild = xmlDoc.Root!.Element(\"Parent\")!.Element(\"Child\")!.Element(\"Grandchild\")!;\r\n```\r\n\r\nI think the only difference with this proposal is that `RequiredElement` would throw a clearer exception, but I\u0027m not convinced that\u0027s worth it.",
                                           "updatedAt":  "2022-05-17T09:23:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DRci8",
                                           "createdAt":  "2022-05-17T09:37:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCdLV3w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Eli-Black-Work",
                                                                               "createdAt":  "2022-05-17T09:39:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e @MichalPetryka Is that correct? Whether or not the return value is null isn\u0027t related to whether or not `name` is null.\n\nI\u0027ve misunderstood what you said originally, what I said isn\u0027t right.",
                                           "updatedAt":  "2022-05-17T09:37:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DRdHn",
                                           "createdAt":  "2022-05-17T09:39:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eli-Black-Work",
                                           "body":  "\u003e \u003e @MichalPetryka Is that correct? Whether or not the return value is null isn\u0027t related to whether or not `name` is null.\r\n\u003e \r\n\u003e I\u0027ve misunderstood what you said originally, what I said isn\u0027t right.\r\n\r\nNo worries, just checking 🙂",
                                           "updatedAt":  "2022-05-17T09:39:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DSeFx",
                                           "createdAt":  "2022-05-17T14:05:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\n`XContainer` contains an `Element()` method that looks for an element with the specified name and returns `null` if it doesn\u0027t find one:\r\n```c#\r\npublic XElement? Element(XName name);\r\n```\r\n\r\nWith NRT\u0027s (nullable reference types) enabled, this leads to warnings in some scenarios, e.g.\r\n```c#\r\n// Produces two warnings of \"CS8602: Dereference of a possibly null reference\"\r\nXmlElement? grandChild = xmlDoc.Root.Element(\"Parent\").Element(\"Child\").Element(\"Grandchild\");\r\n```\r\n\r\n### API Proposal\r\n\r\nI\u0027d like to request that a `RequiredElement()` method be added. This method should always return a non-null value and should throw an exception if the element isn\u0027t found:\r\n\r\n```c#\r\npublic XElement RequiredElement(XName name);\r\n```\r\n\r\nThis would be similar to [ServiceProviderServiceExtensions](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.serviceproviderserviceextensions?view=dotnet-plat-ext-6.0#methods), which has both `GetService()` and `GetRequiredService()` methods.\r\n\r\n### API Usage\r\n\r\n```c#\r\nXmlElement grandChild = xmlDoc.Root.RequiredElement(\"Parent\").RequiredElement(\"Child\").RequiredElement(\"Grandchild\");\r\n```\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eBosch-Eli-Black\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-17T14:05:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EddLL",
                                           "createdAt":  "2022-06-07T12:01:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "Another option:\r\n\r\n```csharp\r\nXElement grandChild = xmlDoc.Root?.Element(\"Parent\")?.Element(\"Child\")?.Element(\"Grandchild\") ?? throw new WhateverException();\r\n```",
                                           "updatedAt":  "2022-06-07T12:01:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Edds0",
                                           "createdAt":  "2022-06-07T12:03:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "I find this API proposal more a convenience API than something we need - see some examples in this issue for how this can be done. Another thing you can do is write RequiredElement as an extension method in your app.\r\n\r\nMy vote is to close this as it will likely get rejected by API review.",
                                           "updatedAt":  "2022-06-07T12:03:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EddxA",
                                           "createdAt":  "2022-06-07T12:04:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2022-06-07T12:04:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EqpII",
                                           "createdAt":  "2022-06-10T06:49:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eli-Black-Work",
                                           "body":  "\u003e Another option:\r\n\u003e \r\n\u003e ```cs\r\n\u003e XElement grandChild = xmlDoc.Root?.Element(\"Parent\")?.Element(\"Child\")?.Element(\"Grandchild\") ?? throw new WhateverException();\r\n\u003e ```\r\n\r\nThanks, @krwq  🙂\r\n\r\nI think this is actually a good example of why a `RequiredElement()` method would be nice. In the above example, you\u0027d get an exception saying something like `Unable to find \"Grandchild\" element`, but the root issue might actually be that the `\u003cParent\u003e` or `\u003cChild\u003e` was missing 🙂\r\n\r\nWith `XmlElement grandChild = xmlDoc.Root.RequiredElement(\"Parent\").RequiredElement(\"Child\").RequiredElement(\"Grandchild\");`, you\u0027d get a specific error saying which element was missing.\r\n\r\nI agree that the API method is more of a convenience, but so is [ServiceProvider.GetRequiredService](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.serviceproviderserviceextensions.getrequiredservice?view=dotnet-plat-ext-6.0#microsoft-extensions-dependencyinjection-serviceproviderserviceextensions-getrequiredservice(system-iserviceprovider-system-type)), so I think there\u0027s merit to considering it 🙂\r\n\r\nNow that NRTs are enabled by default, I think more people will want a method like this... but I could be wrong! 🙂",
                                           "updatedAt":  "2022-06-10T06:50:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gb5jM",
                                           "createdAt":  "2022-07-12T12:47:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "\u003e I think more people will want a method like this\r\n\r\nPossibly but we\u0027re guessing, we\u0027d need more data telling us that it would be useful i.e. more users responding here with their scenarios and possibly upvoting.\r\n\r\nXML has been generally in maintenance mode for some time (since most of the people moved away to JSON) so we avoid adding any new APIs unless there is strong need.\r\n\r\nWe can leave this issue open for some time and wait for other people responding here but unless there is interest we\u0027ll likely end up closing it.",
                                           "updatedAt":  "2022-07-12T12:47:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gfn8-",
                                           "createdAt":  "2022-07-13T02:28:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eli-Black-Work",
                                           "body":  "@krwq Sounds fair to me! Thank you 🙂",
                                           "updatedAt":  "2022-07-13T02:28:26Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "[API Proposal]: Add a RequiredElement() method to XContainer",
        "labels":  [
                       "api-suggestion",
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70348",
        "createdAt":  "2022-06-07T12:55:59Z",
        "number":  70348,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-10T16:40:18Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Net-Core-31-code-runs-slower-in-Net-6/1690719)._\n\n---\nHi!  I ´m developing a reader and began to code it on .Net Core 3.1.\nIt takes several minutes to process big files.  I migarted to .Net 6 and the same code runs 3 times slower.\n\nI´m using a C# console application in Visual Studio 2022.\n\nI attached code and read file in additional files section.\n\nThe migration process I did is the one mentioned on:\nhttps://docs.microsoft.com/en-us/dotnet/architecture/modernize-desktop/example-migration\n\n![Screenshot 2022-03-13 122045.png](https://aka.ms/dc/image?name=Bacc5a9da215243b29d9ee9dac0c5d8d3637827961382704459_Screenshot_2022-03-13_122045.png\u0026tid=acc5a9da215243b29d9ee9dac0c5d8d3637827961382704459)\n\nRegards.\n\n---\n### Original Comments\n\n#### Feedback Bot on 3/14/2022, 07:20 AM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORjOeWw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Edrg_",
                                           "createdAt":  "2022-06-07T12:56:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-06-07T12:56:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ed-Gm",
                                           "createdAt":  "2022-06-07T13:52:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "The repro is attached to the original VS Feedback ticket. It revolves around XmlReader, so I will put the issue into related area",
                                           "updatedAt":  "2022-06-07T13:52:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ed-K3",
                                           "createdAt":  "2022-06-07T13:52:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Net-Core-31-code-runs-slower-in-Net-6/1690719)._\n\n---\nHi!  I ´m developing a reader and began to code it on .Net Core 3.1.\nIt takes several minutes to process big files.  I migarted to .Net 6 and the same code runs 3 times slower.\n\nI´m using a C# console application in Visual Studio 2022.\n\nI attached code and read file in additional files section.\n\nThe migration process I did is the one mentioned on:\nhttps://docs.microsoft.com/en-us/dotnet/architecture/modernize-desktop/example-migration\n\n![Screenshot 2022-03-13 122045.png](https://aka.ms/dc/image?name=Bacc5a9da215243b29d9ee9dac0c5d8d3637827961382704459_Screenshot_2022-03-13_122045.png\u0026tid=acc5a9da215243b29d9ee9dac0c5d8d3637827961382704459)\n\nRegards.\n\n---\n### Original Comments\n\n#### Feedback Bot on 3/14/2022, 07:20 AM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-07T13:52:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FYpla",
                                           "createdAt":  "2022-06-23T08:06:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@CarnaViire I cannot find any repro in the original issue, it would be useful if some minimal repro could be added to this issue in case anyone wants to pick this up",
                                           "updatedAt":  "2022-06-23T08:06:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FZPU4",
                                           "createdAt":  "2022-06-23T10:30:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "@krwq did you check the Diagnostics tab on the internal ticket?",
                                           "updatedAt":  "2022-06-23T10:30:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GM55b",
                                           "createdAt":  "2022-07-07T15:25:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOClopTQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CarnaViire",
                                                                               "createdAt":  "2022-07-07T15:42:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "krwq",
                                           "body":  "ok, found it, thanks @CarnaViire!",
                                           "updatedAt":  "2022-07-07T15:25:09Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  ".Net Core 3.1 code runs slower in .Net 6",
        "labels":  [
                       "area-System.Xml",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73465",
        "createdAt":  "2022-08-05T15:30:32Z",
        "number":  73465,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCwCGAQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LakshanF",
                                            "createdAt":  "2022-08-05T23:26:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichalStrehovsky",
                                            "createdAt":  "2022-08-08T02:11:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2023-05-12T06:39:03Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-02-09T12:48:55Z",
        "body":  "When using `XmlReader` created via `XmlReader.Create` DTD parsing is prohibited by default (for security reasons). So it\u0027s very likely that vast majority of apps have it turned off. Trimming such app (either via `PublishTrimmed=true` or `PublishAot=true`) should ideally be able to remove all code related to DTD parsing, as it will never be used. Currently that\u0027s not the case.\r\n\r\nLong time ago we had a similar problem where `XmlReader` would bring in `XmlSchema` and related validation classes in the default case - even though XSD validation is also off by default. This has been fixed in https://github.com/dotnet/corefx/pull/23867\r\n\r\nWe should do something similar for DTD parsing. The way to fix this is to tie the dependency to `DtdParser` to setting the `XmlReaderSettings.DtdProcessing`. By default this property is `Prohibit`, so if it\u0027s not set, it\u0027s value will be `Prohibit` and thus `DtdParser` is not needed. If the app sets the `DtdProcessing` property we would have to assume that it enables it (static analysis currently can\u0027t tell the value) and make `DtdParser` available.\r\n\r\nNote that the fix is not going to be as simple as it was for the XSD validation. The `XmlReaderImpl` has several places where it depends on `DtdParser` and the value of the `DtdProcessing` setting is copied from the settings into the reader and the reader also exposes it. So we would have to \"guard\" the `DtdParser` creation in multiple places (basically everywhere the DtdProcessing for the reader can be modified), but it definitely seems doable.\r\n\r\nA simple experiment I did:\r\n* Build a simple app which uses default XmlReader settings to read a simple XML file\r\n* Trim it\r\n* Apply a change by commenting out all uses of `DtdParser` from the reader\r\n* Trim the app again\r\n\r\nThe size difference in `System.Private.Xml.dll` is almost 160KB, before the change the trimmed dll is 531KB, after the change it\u0027s 373KB. That is 30% size decrease for that dll. The overall size of all managed code in the sample app is 4.2 MB.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbqD6Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5H6wpn",
                                           "createdAt":  "2022-08-05T15:30:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027linkable-framework\u0027: @eerhardt, @vitek-karas, @LakshanF, @sbomer, @joperezr\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen using `XmlReader` created via `XmlReader.Create` DTD parsing is prohibited by default (for security reasons). So it\u0027s very likely that vast majority of apps have it turned off. Trimming such app (either via `PublishTrimmed=true` or `PublishAot=true`) should ideally be able to remove all code related to DTD parsing, as it will never be used. Currently that\u0027s not the case.\r\n\r\nLong time ago we had a similar problem where `XmlReader` would bring in `XmlSchema` and related validation classes in the default case - even though XSD validation is also off by default. This has been fixed in https://github.com/dotnet/corefx/pull/23867\r\n\r\nWe should do something similar for DTD parsing. The way to fix this is to tie the dependency to `DtdParser` to setting the `XmlReaderSettings.DtdProcessing`. By default this property is `Prohibit`, so if it\u0027s not set, it\u0027s value will be `Prohibit` and thus `DtdParser` is not needed. If the app sets the `DtdProcessing` property we would have to assume that it enables it (static analysis currently can\u0027t tell the value) and make `DtdParser` available.\r\n\r\nNote that the fix is not going to be as simple as it was for the XSD validation. The `XmlReaderImpl` has several places where it depends on `DtdParser` and the value of the `DtdProcessing` setting is copied from the settings into the reader and the reader also exposes it. So we would have to \"guard\" the `DtdParser` creation in multiple places (basically everywhere the DtdProcessing for the reader can be modified), but it definitely seems doable.\r\n\r\nA simple experiment I did:\r\n* Build a simple app which uses default XmlReader settings to read a simple XML file\r\n* Trim it\r\n* Apply a change by commenting out all uses of `DtdParser` from the reader\r\n* Trim the app again\r\n\r\nThe size difference in `System.Private.Xml.dll` is almost 160KB, before the change the trimmed dll is 531KB, after the change it\u0027s 373KB. That is 30% size decrease for that dll. The overall size of all managed code in the sample app is 4.2 MB.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`linkable-framework`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-05T15:30:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H7z5F",
                                           "createdAt":  "2022-08-05T21:02:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "Also tagging @dotnet/area-system-xml.",
                                           "updatedAt":  "2022-08-05T21:02:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T_swr",
                                           "createdAt":  "2023-01-30T19:21:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@vitek-karas is this important for 8.0? (move back if it is 😄)",
                                           "updatedAt":  "2023-01-30T19:21:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UACV-",
                                           "createdAt":  "2023-01-30T20:33:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@eerhardt does XML matter for the cloud native scenarios? This affects any scenario which will parse XML (no matter the API used to do that).",
                                           "updatedAt":  "2023-01-30T20:33:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UAEE0",
                                           "createdAt":  "2023-01-30T20:40:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "For .NET 8, the main scenarios we are focused on are listed in https://github.com/dotnet/aspnetcore/issues/45910.\r\n\r\nFor \"Stage 1\", there are no XML dependencies right now. I\u0027m not certain about \"Stage 2\". But doing a quick search for `XmlReader` in https://source.dot.net/#System.Private.Xml/System/Xml/Core/XmlReader.cs,086471e5cca0825f,references, I\u0027m not seeing any ASP.NET code using XmlReader. (But obviously this isn\u0027t an exhaustive search.)",
                                           "updatedAt":  "2023-01-30T20:40:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6duoPp",
                                           "createdAt":  "2025-02-09T12:48:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "I do not expect our team to get to this. Marking as https://github.com/dotnet/runtime/labels/help%20wanted in case a community member is interested in submitting a PR for it.",
                                           "updatedAt":  "2025-02-09T12:48:48Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Add ability to trim DtdParser when using default XmlReader settings",
        "labels":  [
                       "area-System.Xml",
                       "help wanted",
                       "linkable-framework"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75231",
        "createdAt":  "2022-09-08T01:47:24Z",
        "number":  75231,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-01T15:54:04Z",
        "body":  "Run: [runtime-coreclr libraries-jitstress 20220907.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=6899\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=133004\u0026resultId=149938\u0026paneView=debug)\r\n\r\nFailed test:\r\n```\r\nnet7.0-windows-Release-x64-CoreCLR_checked-jitstress1_tiered-Windows.10.Amd64.Open\r\n\r\n- System.Xml.Tests.SubtreeReaderTest.RunTests(testCase: 105376: ReadBase64 runs into an Overflow)\r\n```\r\n**Error message:**\r\n```\r\nSystem.Xml.XmlException : \u0027\u0001\u0027, hexadecimal value 0x01, is an invalid character. Line 1, position 239502.\r\n\r\n\r\nStack trace\r\n   at System.Xml.XmlTextReaderImpl.ParseText(Int32\u0026 startPos, Int32\u0026 endPos, Int32\u0026 outOrChars) in /_/src/libraries/System.Private.Xml/src/System/Xml/Core/XmlTextReaderImpl.cs:line 5594\r\n   at System.Xml.XmlTextReaderImpl.ReadContentAsBinary(Byte[] buffer, Int32 index, Int32 count) in /_/src/libraries/System.Private.Xml/src/System/Xml/Core/XmlTextReaderImpl.cs:line 9450\r\n   at System.Xml.XmlTextReaderImpl.ReadContentAsBase64(Byte[] buffer, Int32 index, Int32 count) in /_/src/libraries/System.Private.Xml/src/System/Xml/Core/XmlTextReaderImpl.cs:line 1619\r\n   at System.Xml.XmlSubtreeReader.ReadContentAsBase64(Byte[] buffer, Int32 index, Int32 count) in /_/src/libraries/System.Private.Xml/src/System/Xml/Core/XmlSubtreeReader.cs:line 887\r\n   at System.Xml.Tests.CDataReader.ReadContentAsBase64(Byte[] array, Int32 offset, Int32 len) in /_/src/libraries/System.Private.Xml/tests/XmlReaderLib/CDataReader.cs:line 798\r\n   at System.Xml.Tests.TCReadContentAsBase64.ReadBase64BufferOverflowWorksProperly() in /_/src/libraries/System.Private.Xml/tests/XmlReaderLib/ReadBase64.cs:line 545\r\n   at OLEDB.Test.ModuleCore.CVariation.Execute() in /_/src/libraries/Common/tests/System/Xml/ModuleCore/cvariation.cs:line 76\r\n   at OLEDB.Test.ModuleCore.CTestCase.\u003c\u003ec__DisplayClass7_1.\u003cTestCases\u003eb__0() in /_/src/libraries/Common/tests/System/Xml/ModuleCore/ctestcase.cs:line 131\r\n   at OLEDB.Test.ModuleCore.XunitTestCase.Run() in /_/src/libraries/Common/tests/System/Xml/ModuleCore/XunitTestCase.cs:line 33\r\n   at System.Xml.Tests.SubtreeReaderTest.RunTests(XunitTestCase testCase) in /_/src/libraries/System.Private.Xml/tests/Readers/SubtreeReader/SubtreeReaderTests.cs:line 15\r\n   at InvokeStub_SubtreeReaderTest.RunTests(Object, Object, IntPtr*)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSnvJNw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5J6sJx",
                                           "createdAt":  "2022-09-08T01:47:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRun: [runtime-coreclr libraries-jitstress 20220907.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=6899\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=133004\u0026resultId=149938\u0026paneView=debug)\r\n\r\nFailed test:\r\n```\r\nnet7.0-windows-Release-x64-CoreCLR_checked-jitstress1_tiered-Windows.10.Amd64.Open\r\n\r\n- System.Xml.Tests.SubtreeReaderTest.RunTests(testCase: 105376: ReadBase64 runs into an Overflow)\r\n```\r\n**Error message:**\r\n```\r\nSystem.Xml.XmlException : \u0027\u0001\u0027, hexadecimal value 0x01, is an invalid character. Line 1, position 239502.\r\n\r\n\r\nStack trace\r\n   at System.Xml.XmlTextReaderImpl.ParseText(Int32\u0026 startPos, Int32\u0026 endPos, Int32\u0026 outOrChars) in /_/src/libraries/System.Private.Xml/src/System/Xml/Core/XmlTextReaderImpl.cs:line 5594\r\n   at System.Xml.XmlTextReaderImpl.ReadContentAsBinary(Byte[] buffer, Int32 index, Int32 count) in /_/src/libraries/System.Private.Xml/src/System/Xml/Core/XmlTextReaderImpl.cs:line 9450\r\n   at System.Xml.XmlTextReaderImpl.ReadContentAsBase64(Byte[] buffer, Int32 index, Int32 count) in /_/src/libraries/System.Private.Xml/src/System/Xml/Core/XmlTextReaderImpl.cs:line 1619\r\n   at System.Xml.XmlSubtreeReader.ReadContentAsBase64(Byte[] buffer, Int32 index, Int32 count) in /_/src/libraries/System.Private.Xml/src/System/Xml/Core/XmlSubtreeReader.cs:line 887\r\n   at System.Xml.Tests.CDataReader.ReadContentAsBase64(Byte[] array, Int32 offset, Int32 len) in /_/src/libraries/System.Private.Xml/tests/XmlReaderLib/CDataReader.cs:line 798\r\n   at System.Xml.Tests.TCReadContentAsBase64.ReadBase64BufferOverflowWorksProperly() in /_/src/libraries/System.Private.Xml/tests/XmlReaderLib/ReadBase64.cs:line 545\r\n   at OLEDB.Test.ModuleCore.CVariation.Execute() in /_/src/libraries/Common/tests/System/Xml/ModuleCore/cvariation.cs:line 76\r\n   at OLEDB.Test.ModuleCore.CTestCase.\u003c\u003ec__DisplayClass7_1.\u003cTestCases\u003eb__0() in /_/src/libraries/Common/tests/System/Xml/ModuleCore/ctestcase.cs:line 131\r\n   at OLEDB.Test.ModuleCore.XunitTestCase.Run() in /_/src/libraries/Common/tests/System/Xml/ModuleCore/XunitTestCase.cs:line 33\r\n   at System.Xml.Tests.SubtreeReaderTest.RunTests(XunitTestCase testCase) in /_/src/libraries/System.Private.Xml/tests/Readers/SubtreeReader/SubtreeReaderTests.cs:line 15\r\n   at InvokeStub_SubtreeReaderTest.RunTests(Object, Object, IntPtr*)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ev-wenyuxu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-08T01:47:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ke8k3",
                                           "createdAt":  "2022-09-16T17:43:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "We should address this test failure in main and consider a backport into the release/7.0 branch.",
                                           "updatedAt":  "2022-09-16T17:43:17Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Test failure System.Xml.Tests.SubtreeReaderTest.RunTests(testCase: 105376: ReadBase64 runs into an Overflow)",
        "labels":  [
                       "test-failure",
                       "bug",
                       "area-System.Xml",
                       "os-windows",
                       "JitStress",
                       "arch-x64",
                       "blocking-clean-ci-optional"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75515",
        "createdAt":  "2022-09-13T06:44:00Z",
        "number":  75515,
        "author":  "TrayanZapryanov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCvEwdA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TahirAhmadov",
                                            "createdAt":  "2022-09-16T13:52:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Daniel-Svensson",
                                            "createdAt":  "2023-03-25T12:22:59Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-10-03T08:37:34Z",
        "body":  "### Background and motivation\r\n\r\nReading and writing Guids and TimeSpans in xml is quire normal practice these days. \r\nWe should allow users to read or write these primitive types  instead of using existing ones based on string or object.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Xml;\r\n\r\npublic class XmlWriter\r\n{\r\n    public virtual void WriteValue(Guid value);\r\n    public virtual void WriteValue(TimeSpan value);\r\n}\r\n\r\npublic class XmlReader\r\n{\r\n    public virtual Guid ReadContentAsGuid();\r\n    public virtual Guid ReadElementContentAsGuid();\r\n\r\n    public virtual TimeSpan ReadContentAsTimeSpan();\r\n    public virtual TimeSpan ReadElementContentAsTimeSpan();\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nXmlWriter writer;\r\nwriter.WriteValue(Guid.NewGuid());\r\nwriter.WriteValue(TimeSpan.FromHours(1));\r\n\r\nXmlReader reader;\r\nGuid g = reader.ReadContentAsGuid();\r\nTimeSpan t = reader.ReadContentAsTimeSpan();\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nWe can make these methods **internal** and use them only in System.Private.Xml project.\r\n\r\n### Risks\r\n\r\nnone",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOS2gi8w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5KNLx_",
                                           "createdAt":  "2022-09-13T06:44:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nWriting Guids and TimeSpans in xml is quire normal practice these days. We should allow users to use it instead of casting them to sring and then using WriteValue(string) method or using WriteValue(object).\n\n### API Proposal\n\n```csharp\r\nnamespace System.Xml;\r\n\r\npublic class XmlWriter\r\n{\r\n    public virtual void WriteValue(Guid value);\r\n    public virtual void WriteValue(TimeSpan value);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nXmlWriter writer;\r\nwriter.WriteValue(Guid.NewGuid());\r\nwriter.WriteValue(TimeSpan.FromHours(1));\r\n```\r\n\n\n### Alternative Designs\n\nWe can make these methods **internal** and use them only in System.Private.Xml project.\n\n### Risks\n\nnone\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTrayanZapryanov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Xml`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-13T06:44:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KPDl2",
                                           "createdAt":  "2022-09-13T14:03:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e We should allow users to use it instead of casting them to sring and then using WriteValue(string) method or using WriteValue(object).\r\n\r\nPerhaps we could simply add a `WriteValue(ReadOnlySpan\u003cchar\u003e)` overload?",
                                           "updatedAt":  "2022-09-13T14:03:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KPIc5",
                                           "createdAt":  "2022-09-13T14:17:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TrayanZapryanov",
                                           "body":  "\u003e \u003e We should allow users to use it instead of casting them to sring and then using WriteValue(string) method or using WriteValue(object).\r\n\u003e \r\n\u003e Perhaps we could simply add a `WriteValue(ReadOnlySpan\u003cchar\u003e)` overload?\r\n\r\nNot exactly as we want to format things in a specific way . For example Timespan is serialized like this right now :\r\n``` cs\r\npublic static string ToString(TimeSpan value)\r\n  {\r\n      return new XsdDuration(value).ToString();\r\n  }\r\n```",
                                           "updatedAt":  "2022-09-13T14:17:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KTebq",
                                           "createdAt":  "2022-09-14T11:20:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Both `TimeSpan` and `Guid` expose `TryFormat` methods that can be used to format into a span destination. A ReadOnlySpan overload should help unlock allocation-free formatting for arbitrary types.",
                                           "updatedAt":  "2022-09-14T11:20:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KUaTS",
                                           "createdAt":  "2022-09-14T14:36:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TrayanZapryanov",
                                           "body":  "@eiriktsarpalis I agree, just the clients should have some internal knowledge.\r\nInstead of calling `writer.WriteValue(TimeSpan.FromHours(1)) `\r\nthey should call \r\n```\r\nnew XsdDuration(value).TryFormat(someSpan)\r\nwriter.WriteValue(someSpan)\r\n```",
                                           "updatedAt":  "2022-09-14T14:36:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KWArV",
                                           "createdAt":  "2022-09-14T20:45:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "drieseng",
                                           "body":  "Personally, I see good use for these proposed overloads (and I\u0027d even add overloads for **DateOnly** and **TimeOnly**).",
                                           "updatedAt":  "2022-09-14T20:45:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kd_TL",
                                           "createdAt":  "2022-09-16T13:36:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I have no strong opinion on adding `TimeSpan` or `Guid` overloads. For parity, the API proposal should contain equivalent overloads in `XmlReader`, the proposal needs updating to include them as well.\r\n\r\n@krwq do you think they\u0027re worth adding?\r\n\r\n",
                                           "updatedAt":  "2022-09-16T13:36:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KeECB",
                                           "createdAt":  "2022-09-16T13:54:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TahirAhmadov",
                                           "body":  "I would just add that the format of `TimeSpan`, and especially `DateOnly` and even perhaps `DateTime`, has to be carefully chosen to ensure it works across all possible values. I\u0027m thinking it has to be \"cultureless\" to work.\r\nPS. For `Guid`, it\u0027s not that complicated, but still, even if we say that `XmlWriter` should write the standard \"dashed\" format, the `XmlReader` should be able to interpret both the \"dashed\" and the \"N\" format, in case XML is generated by something other than .NET or is user modified.",
                                           "updatedAt":  "2022-09-16T13:55:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KeMZE",
                                           "createdAt":  "2022-09-16T14:23:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TrayanZapryanov",
                                           "body":  "Main benefit will be in writing Guids in XmlWriter as we will save Guid.ToString() allocation.\r\nIf you like I can remove TimeSpan as I do not expect too many TimeSpans serializations.\r\nI\u0027ve added it as it is tricky and current implementation uses XsdDuration.ToString().",
                                           "updatedAt":  "2022-09-16T14:23:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KqEUm",
                                           "createdAt":  "2022-09-20T15:39:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "@TrayanZapryanov would it be possible to update the API proposal in the OP to include `XmlReader` equivalents?",
                                           "updatedAt":  "2022-09-20T15:39:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KqreU",
                                           "createdAt":  "2022-09-20T17:49:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TrayanZapryanov",
                                           "body":  "@eiriktsarpalis Done.",
                                           "updatedAt":  "2022-09-20T17:49:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KquVb",
                                           "createdAt":  "2022-09-20T17:59:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Thanks. I\u0027m deferring to @krwq on whether to mark this as `api-ready-for-review` as he is the subject matter expert of this codebase.",
                                           "updatedAt":  "2022-09-20T17:59:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KrU1M",
                                           "createdAt":  "2022-09-20T20:23:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TrayanZapryanov",
                                           "body":  "Small risk that I\u0027ve found right now:\r\nImagine code which is using XmlWriter.WriteValue(Guid.NewGuid()) - this will fallback to XmlWriter.WriteValue(object) if not overridden. Current implementation of it is using :\r\n``` cs\r\n// Writes out the specified value.\r\n  public virtual void WriteValue(object value)\r\n  {\r\n      ArgumentNullException.ThrowIfNull(value);\r\n\r\n      WriteString(XmlUntypedConverter.Untyped.ToString(value, null));\r\n  }\r\n```\r\nand as **XmlUntypedConverter.Untyped.ToString(value, null)** is not supporting Guid - it will throw exception.\r\nWith proposed change - this will be accepted or in the base class we need to throw same exception.\r\nI would prefer to accept and fallback to something like this :\r\n```cs\r\n// Writes out the specified value.\r\n  public virtual void WriteValue(Guid value)\r\n  {\r\n      WriteString(XmlConvert.ToString(value));\r\n  }\r\n```",
                                           "updatedAt":  "2022-09-20T20:23:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KtTfi",
                                           "createdAt":  "2022-09-21T08:41:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TrayanZapryanov",
                                           "body":  "One more note:\r\nAccording [Help documentation](https://learn.microsoft.com/en-us/dotnet/api/system.xml.xmlwriter.writevalue?view=net-6.0), **WriteValue** methods should map CLR types defined also in Xsd(or this is what I understand). So **Guid** is somehow \"custom\" and maybe should be skipped, but at least TimeSpan can be mapped to \"time\" : [XSD Date and Time Data Types](https://www.w3schools.com/xml/schema_dtypes_date.asp).\r\n",
                                           "updatedAt":  "2022-09-21T08:41:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LEFum",
                                           "createdAt":  "2022-09-27T11:28:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "I\u0027m curious - do we actually care about XmlReader APIs or we just want XmlSerializer work with those? Are you actually using reader/writer directly?",
                                           "updatedAt":  "2022-09-27T11:28:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LLq2F",
                                           "createdAt":  "2022-09-28T19:06:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TrayanZapryanov",
                                           "body":  "@krwq Nope, I am not using them. Proposal is just to use them when serializing primitive types in XmlSerializer. ",
                                           "updatedAt":  "2022-09-28T19:06:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LOtdQ",
                                           "createdAt":  "2022-09-29T11:30:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "I think we should start with trying to handle that in XmlSerializer directly and only add APIs to XmlReader/XmlWriter if there is clear benefit",
                                           "updatedAt":  "2022-09-29T11:30:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LTfr7",
                                           "createdAt":  "2022-09-30T10:32:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TrayanZapryanov",
                                           "body":  "@krwq You are right. I\u0027ve added new [performance issue](https://github.com/dotnet/runtime/issues/76434).\r\nShould I close this proposal or you see some benefit in implementing it ?",
                                           "updatedAt":  "2022-09-30T10:32:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LaCLz",
                                           "createdAt":  "2022-10-03T08:37:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "I\u0027m not the owner of serialization part of the XML but I\u0027d suggest running profiler with some real-life like payload and seeing if making a fix makes any difference. If there is clear difference then you already got prototype 😄 if change is relatively simple might be still worth to send a patch - I\u0027d personally only do it if my particular scenario I\u0027m trying to improve requires it (i.e. I have app which I\u0027m trying to improve and profiler tells me this has huge impact on it or I\u0027m particularly focusing on allocations/perf in XML)",
                                           "updatedAt":  "2022-10-03T08:37:34Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "[API Proposal]: Add methods which works with Guid/TimeSpan in System.Xml.XmlWriter/XmlReader",
        "labels":  [
                       "api-suggestion",
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75523",
        "createdAt":  "2022-09-13T12:47:09Z",
        "number":  75523,
        "author":  "TrayanZapryanov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-13T17:40:53Z",
        "body":  "https://github.com/dotnet/runtime/blob/97e13f4b6018c87025c8573f1769057f674c08a5/src/libraries/System.Private.Xml/src/System/Xml/Serialization/Xmlcustomformatter.cs#L430\r\n\r\nThis looks more like a mistake than the desired behavior, but it will be a breaking change if we replace it.\r\nString.Trim() is filtering much more characters than :\r\nhttps://github.com/dotnet/runtime/blob/97e13f4b6018c87025c8573f1769057f674c08a5/src/libraries/System.Private.Xml/src/System/Xml/XmlConvert.cs#L1370",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSkBgmQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5KOr70",
                                           "createdAt":  "2022-09-13T12:47:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://github.com/dotnet/runtime/blob/97e13f4b6018c87025c8573f1769057f674c08a5/src/libraries/System.Private.Xml/src/System/Xml/Serialization/Xmlcustomformatter.cs#L430\r\n\r\nThis looks more like a mistake than the desired behavior, but it will be a breaking change if we replace it.\r\nString.Trim() is filtering much more characters than :\r\nhttps://github.com/dotnet/runtime/blob/97e13f4b6018c87025c8573f1769057f674c08a5/src/libraries/System.Private.Xml/src/System/Xml/XmlConvert.cs#L1370\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTrayanZapryanov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-13T12:47:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KQGCZ",
                                           "createdAt":  "2022-09-13T17:39:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "I\u0027d like to add that we trim differently in other places in XML (using WhistespaceChars mentioned above) so it\u0027s worth validating if this is correct behavior and if so if we want to change it. Since this behavior has been unchanged for many years and we haven\u0027t has any complains I\u0027ll change milestone to Future.",
                                           "updatedAt":  "2022-09-13T17:40:29Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "XmlCustomFormatter is using string.Trim() instead of string.Trim(XmlConverter.WhitespaceChars)",
        "labels":  [
                       "bug",
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84389",
        "createdAt":  "2023-04-05T23:51:39Z",
        "number":  84389,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-13T08:04:43Z",
        "body":  "Today to do XSLTs we have `XslCompiledTransform`. But this class will only ever use IL Ref.Emit to generate the transform. This is not possible when publishing for Native AOT - Ref.Emit won\u0027t work.\r\n\r\nWe also have `XslTransform` which sounds like it would be a good substitute when `IsDynamicCodeSupported=false`. However, we have an analyzer that tells devs that this class is not secure and shouldn\u0027t be used - `XslCompiledTransform` should be used instead. https://learn.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5374\r\n\r\nSo developers who need to use XSLTs in NativeAOT apps don\u0027t have a viable option in .NET.\r\n\r\nWe should solve this somehow - either by making `XslCompiledTransform` work in Native AOT, or by making `XslTransform` secure. (Probably the first approach would be best.)\r\n\r\ncc @agocke, @MichalStrehovsky, @jkotas",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOq2Pv5w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ZTjim",
                                           "createdAt":  "2023-04-05T23:51:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nToday to do XSLTs we have `XslCompiledTransform`. But this class will only ever use IL Ref.Emit to generate the transform. This is not possible when publishing for Native AOT - Ref.Emit won\u0027t work.\r\n\r\nWe also have `XslTransform` which sounds like it would be a good substitute when `IsDynamicCodeSupported=false`. However, we have an analyzer that tells devs that this class is not secure and shouldn\u0027t be used - `XslCompiledTransform` should be used instead. https://learn.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5374\r\n\r\nSo developers who need to use XSLTs in NativeAOT apps don\u0027t have a viable option in .NET.\r\n\r\nWe should solve this somehow - either by making `XslCompiledTransform` work in Native AOT, or by making `XslTransform` secure. (Probably the first approach would be best.)\r\n\r\ncc @agocke, @MichalStrehovsky, @jkotas\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-05T23:51:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZTl9p",
                                           "createdAt":  "2023-04-06T00:02:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "XSLT support is de-facto archived. We are way behind the current standard (we implement XSLT 1.0 published in 1999, current version is XSLT 3.0 published in 2017). We have no plans to invest into it to make it current.\r\n\r\nWhat are the modern scenarios where XSLT matters?",
                                           "updatedAt":  "2023-04-06T00:02:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZT62c",
                                           "createdAt":  "2023-04-06T02:07:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e What are the modern scenarios where XSLT matters?\r\n\r\nThe place I hit it was in another \"de-facto archived\" library `System.Security.Cryptography.Xml` in trying to fix https://github.com/dotnet/runtime/issues/73432:\r\n\r\nhttps://github.com/dotnet/runtime/blob/18e2c5fd9e2239a8b06fe49dbb6492d40f5e5e19/src/libraries/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/CryptoHelpers.cs#L19\r\n\r\nThe reason I am even caring about `System.Security.Cryptography.Xml` is because [ASP.NET\u0027s `DataProtection` uses EncryptedXml](https://github.com/dotnet/aspnetcore/blob/419065590260e6597a994007512d03736e744da1/src/DataProtection/DataProtection/src/XmlEncryption/EncryptedXmlDecryptor.cs#L75-L78). See https://github.com/dotnet/aspnetcore/issues/47410 for more information on why this is needed. We are trying to enable developers to use DataProtection in NativeAOT apps.\r\n\r\nTo work around this issue, I have 2 ideas for solutions:\r\n\r\n1. Annotate `System.Security.Cryptography.Xml` as `RequiresDynamicCode` because of this one possibility that there is a reference to `\"http://www.w3.org/TR/1999/REC-xslt-19991116\"` in the XML file.\r\n2. Throw exceptions early when an xslt element is discovered, for example:\r\n```C#\r\n            if (!RuntimeFeature.IsDynamicCodeSupported)\r\n            {\r\n                // XSLTs are only supported when dynamic code is supported. See https://github.com/dotnet/runtime/issues/84389\r\n                throw new NotSupportedException(\"Xslt Transforms are not supported when DynamicCode is not supported.\");\r\n            }\r\n            return new XmlDsigXsltTransform();\r\n```\r\nThis would mean that `dotnet run` and F5 would still throw exceptions when the dev had `PublishAot=true` in their .csproj. But it goes against our use strategy of static analysis to tell devs when their app may not work.\r\n\r\nI started down path (2), but since all of `System.Security.Cryptography.Xml` is going to need to be `RequiresUnreferencedCode`, I figure adding `RequiresDynamicCode` isn\u0027t going to hurt anything. Doing both is probably the best of both worlds. Having the annotation so devs get warnings. And then throwing early when dynamic code isn’t supported allows for the dead code to be trimmed.",
                                           "updatedAt":  "2023-04-06T04:44:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZU3ii",
                                           "createdAt":  "2023-04-06T07:56:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "Is there a clear way to make XsltCompiledTransform work in AOT?",
                                           "updatedAt":  "2023-04-06T07:56:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rY-_n",
                                           "createdAt":  "2025-05-13T08:03:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXZ-og==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "Godfather95",
                                                                               "createdAt":  "2025-05-13T10:41:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "SWSRK",
                                                                               "createdAt":  "2025-06-20T15:05:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Khaos66",
                                           "body":  "\u003e XSLT support is de-facto archived. We are way behind the current standard (we implement XSLT 1.0 published in 1999, current version is XSLT 3.0 published in 2017). We have no plans to invest into it to make it current.\n\u003e \n\u003e What are the modern scenarios where XSLT matters?\n\nGerman eRechnung/XRechnung (eInvoice 2025) uses XSLT 2.0 files as validator for business rules. \nIt\u0027s mandatory by law to check these before accepting the invoice.\nYou may find the specs here (in German) https://xeinkauf.de/dokumente/\n\nSee, I get it... Xml isn\u0027t sexy and Json won all over the place. But as long as officials and governments keep using it, it should be easy to integrate and validate. I\u0027m a bit disappointed on this one...",
                                           "updatedAt":  "2025-05-13T08:04:43Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "XSLTs are not possible in NativeAOT",
        "labels":  [
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90155",
        "createdAt":  "2023-08-08T14:53:56Z",
        "number":  90155,
        "author":  "lor1mp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1btww==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mveril",
                                            "createdAt":  "2024-01-25T18:43:51Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-08-08T15:28:34Z",
        "body":  "### Background and motivation\r\n\r\nRecently we discovered that `.editorconfig` files aren\u0027t respected for `.xml` and `.csproj` files in Visual Studio and `dotnet format`. It looks like this is a Rider feature. However, across our team the formatting of the project files becomes an issue because the default Visual Studio formatting is different from the `.editorconfig` that Rider is able to format to. So, in lieu of available tooling, I looked to build a tool. However, the .NET XML library doesn\u0027t support the options for the `XmlTextWriter`, and there doesn\u0027t seem to be a viable alternative to writing XML files.\r\n\r\nThe options I\u0027m proposing to support are:\r\n\r\n```\r\ninsert_final_newline - inserts a newline after the closing XML document tag\r\nspace_inside_empty_tag - ???\r\nspace_before_self_closing - inserts a space before the /\u003e in a self closing tag (XmlTextWriter default)\r\nspace_after_last_attribute - inserts a space after the last attribute in a tag\r\nspaces_around_eq_in_attribute - inserts spaces around the \u0027=\u0027 character in attributes\r\n```\r\nBasically, there\u0027s not an easy way to configure the `XmlTextWriter` to output with the spacing required for the options in our `.editorconfig`. So, I am proposing to add these options. \r\n\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Xml;\r\n\r\npublic class XmlTextWriter : XmlWriter\r\n{\r\n        public bool WriteSpaceBeforeSelfClose { get; set; } = true;\r\n        public bool WriteSpaceAfterLastAttribute { get; set; }\r\n        public bool WriteSpacesAroundAttributeEq { get; set; }\r\n        public bool InsertFinalNewline { get; set; }\r\n\r\n       /// Other implementation stays the same, other than \r\n       /// - WriteEndStartTag for WriterSpaceBeforeSelfClose, and WriteSpaceAfterLastAttribute. \r\n       /// - WriteStartAttribute changes to support WriteSpacesAroundAttributeEq\r\n       /// - WriteEndDocument changes to support adding a final new line.\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar writer = new XmlTextWriter(...);\r\n\r\nwriter.WriteSpaceBeforeSelfClose = false;\r\n\r\nwriter.WriteStartElement(\"foo\");\r\nwriter.WriteEndElement(); // writes \u003cfoo/\u003e\r\n\r\n// etc..\r\n\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nThese options could also be moved to `XmlWriterSettings`, and supported in other writers. However, this is the minimal change required to support formatting XML with spacing options in the basic `XmlTextWriter`.\r\n\r\n### Risks\r\n\r\nIt is a public API change, but it\u0027s only additive. Would need to ensure default values keep format unchanged.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY4e4gg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jhsuz",
                                           "createdAt":  "2023-08-08T14:54:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nRecently we discovered that `.editorconfig` files aren\u0027t respected for `.xml` and `.csproj` files in Visual Studio and `dotnet format`. It looks like this is a Rider feature. However, across our team the formatting of the project files becomes an issue because the default Visual Studio formatting is different from the `.editorconfig` that Rider is able to format to. So, in lieu of available tooling, I looked to build a tool. However, the .NET XML library doesn\u0027t support the options for the `XmlTextWriter`, and there doesn\u0027t seem to be a viable alternative to writing XML files.\r\n\r\nThe options I\u0027m proposing to support are:\r\n\r\n```\r\ninsert_final_newline - inserts a newline after the closing XML document tag\r\nspace_inside_empty_tag - ???\r\nspace_before_self_closing - inserts a space before the /\u003e in a self closing tag (XmlTextWriter default)\r\nspace_after_last_attribute - inserts a space after the last attribute in a tag\r\nspaces_around_eq_in_attribute - inserts spaces around the \u0027=\u0027 character in attributes\r\n```\r\nBasically, there\u0027s not an easy way to configure the `XmlTextWriter` to output with the spacing required for the options in our `.editorconfig`. So, I am proposing to add these options. \r\n\n\n### API Proposal\n\n```csharp\r\nnamespace System.Xml;\r\n\r\npublic class XmlTextWriter : XmlWriter\r\n{\r\n        public bool WriteSpaceBeforeSelfClose { get; set; } = true;\r\n        public bool WriteSpaceAfterLastAttribute { get; set; }\r\n        public bool WriteSpacesAroundAttributeEq { get; set; }\r\n        public bool InsertFinalNewline { get; set; }\r\n\r\n       /// Other implementation stays the same, other than \r\n       /// - WriteEndStartTag for WriterSpaceBeforeSelfClose, and WriteSpaceAfterLastAttribute. \r\n       /// - WriteStartAttribute changes to support WriteSpacesAroundAttributeEq\r\n      ///  - WriteEndDocument changes to support adding a final new line.\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar writer = new XmlTextWriter(...);\r\n\r\nwriter.WriteSpaceBeforeSelfClose = false;\r\n\r\nwriter.WriteStartElement(\"foo\");\r\nwriter.WriteEndElement(); // writes \u003cfoo/\u003e\r\n\r\n// etc..\r\n\r\n```\r\n\n\n### Alternative Designs\n\nThese options could also be moved to `XmlWriterSettings`, and supported in other writers. However, this is the minimal change required to support formatting XML with spacing options in the basic `XmlTextWriter`.\n\n### Risks\n\nIt is a public API change, but it\u0027s only additive. Would need to ensure default values keep format unchanged.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elor1mp\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Xml`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-08T14:54:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jh7Gn",
                                           "createdAt":  "2023-08-08T15:27:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "cc @krwq ",
                                           "updatedAt":  "2023-08-08T15:27:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jh7iC",
                                           "createdAt":  "2023-08-08T15:28:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lor1mp",
                                           "body":  "Also -- I have the changes in a branch for this method. However, I\u0027m open to whatever path forward, I can make the changes.",
                                           "updatedAt":  "2023-08-08T15:28:34Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Whitespace options on System.Xml.XmlTextWriter",
        "labels":  [
                       "api-suggestion",
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91853",
        "createdAt":  "2023-09-10T09:35:43Z",
        "number":  91853,
        "author":  "IS4Code",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-09-13T09:37:35Z",
        "body":  "### Description\r\n\r\nThe description for [`XmlConvert.EncodeLocalName(String)`](https://learn.microsoft.com/en-us/dotnet/api/system.xml.xmlconvert.encodelocalname?view=net-7.0) states:\r\n\u003e Converts the name to a valid XML local name.\r\n\r\nLikewise for [`XmlConvert.EncodeName(String)`](https://learn.microsoft.com/en-us/dotnet/api/system.xml.xmlconvert.encodename?view=net-7.0):\r\n\u003e Converts the name to a valid XML name.\r\n\r\nAnd [`XmlConvert.EncodeNmToken(String)`](https://learn.microsoft.com/en-us/dotnet/api/system.xml.xmlconvert.encodenmtoken?view=net-7.0):\r\n\u003e Verifies the name is valid according to the XML specification.\r\n\r\nAnd yet `XmlConvert.EncodeLocalName(\"xmlns\")` produces `\"xmlns\"` without any encoding of this reserved name, breaking any situations where one expects it to protect against such names. Per the [XML specification](https://www.w3.org/TR/xml/#sec-common-syn):\r\n\u003e Names beginning with the string \"`xml`\", or with any string which would match `((\u0027X\u0027|\u0027x\u0027) (\u0027M\u0027|\u0027m\u0027) (\u0027L\u0027|\u0027l\u0027))`, are reserved for standardization in this or future versions of this specification.\r\n\r\nWhile the `Name` or `NCName` productions in XML technically permit these names and all of the methods behave based on their specification, anyone using `EncodeLocalName` as a catch-all solution to produce \"valid\" names runs into an issue when such a name would be `xmlns`, as using it for attributes will certainly not be what was intended. Relying on these methods for serializers (which is what one usually uses them for) will break if the serialized property is `xmlns` and used as an attribute, and might break in the future if the name starts with `xml` (case-insensitive).\r\n\r\nEven more serious issue happens when one uses the encoded name for a processing instruction, whose target is defined as `Name - ((\u0027X\u0027 | \u0027x\u0027) (\u0027M\u0027 | \u0027m\u0027) (\u0027L\u0027 | \u0027l\u0027))`, since `\u003c?xml` is the XML declaration and not a processing instruction. Anyone relying on `EncodeLocalName` for this purpose would make the resulting XML invalid.\r\n\r\n----\r\n\r\nI believe these changes are appropriate:\r\n\r\n* `EncodeLocalName` should prevent against the situation when the resulting name starts with `xml` (case-insensitive), preferably by encoding the `x` at the beginning as `_x0078_` and `X` as `_x0058_` (this way the `x` letter remains there in some sense and so the name is still recognizable). \r\n* `EncodeName` should prevent the same situation and the case when the `:` character is followed by `xml` (case-insensitive), in the same way as above. While a name like `ns:xmlns` is not technically reserved, a possible operation that removes the prefix and makes the `ns` namespace default could in turn make it a reserved name (even though such a situation could be prevented by more intelligent processors).\r\n* `EncodeNmToken` does not have to be changed, since it refers strictly to a particular production (well at least in the name of the method, not in the documentation). The documentation could be improved though.\r\n\r\nThe `x`/`X` character can be freely encoded this way without breaking anything because `XmlConvert.DecodeName` will be able to decode it back in this form, and so any application that uses this pair of methods properly will still work correctly.\r\n\r\nIf changing the methods is not desirable for backwards compatibility (even though I cannot imagine a situation where one would want to use these methods but *preserve* names like `xmlns`), the documentations for those methods *should explicitly point out that the procedure does not actually ensure validity of the result in all contexts (i.e. `PITarget`) or protect against misinterpretation (e.g. with `xmlns`)*. Optimally, in such a case, a new method like `EncodeUnreservedName(String)` should be added that performs this protection and thus can be used after `EncodeLocalName` accordingly. If such is the case, perhaps names reserved in some additional contexts could be added there (though I can\u0027t think of any at the moment).\r\n\r\n### Reproduction Steps\r\n\r\n```cs\r\nConsole.WriteLine(XmlConvert.EncodeLocalName(\"xml\"));\r\nConsole.WriteLine(XmlConvert.EncodeLocalName(\"xmlns\"));\r\nConsole.WriteLine(XmlConvert.EncodeLocalName(\"xmlreservedname\"));\r\n```\r\n\r\n### Expected behavior\r\n\r\n```\r\n_x0078_ml\r\n_x0078_mlns\r\n_x0078_mlreservedname\r\n```\r\n(or any other encoding where the result does not start with `xml`)\r\n\r\n### Actual behavior\r\n\r\n```\r\nxml\r\nxmlns\r\nxmlreservedname\r\n```\r\n\r\n### Regression?\r\n\r\nThis issue goes as far back as .NET Framework.\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZlvBow==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5mFr5Z",
                                           "createdAt":  "2023-09-10T09:35:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe description for [`XmlConvert.EncodeLocalName(String)`](https://learn.microsoft.com/en-us/dotnet/api/system.xml.xmlconvert.encodelocalname?view=net-7.0) states:\r\n\u003e Converts the name to a valid XML local name.\r\n\r\nLikewise for [`XmlConvert.EncodeName(String)`](https://learn.microsoft.com/en-us/dotnet/api/system.xml.xmlconvert.encodename?view=net-7.0):\r\n\u003e Converts the name to a valid XML name.\r\n\r\nAnd [`XmlConvert.EncodeNmToken(String)`](https://learn.microsoft.com/en-us/dotnet/api/system.xml.xmlconvert.encodenmtoken?view=net-7.0):\r\n\u003e Verifies the name is valid according to the XML specification.\r\n\r\nAnd yet `XmlConvert.EncodeLocalName(\"xmlns\")` produces `\"xmlns\"` without any encoding of this reserved name, breaking any situations where one expects it to protect against such names. Per the [XML specification](https://www.w3.org/TR/xml/#sec-common-syn):\r\n\u003e Names beginning with the string \"`xml`\", or with any string which would match `((\u0027X\u0027|\u0027x\u0027) (\u0027M\u0027|\u0027m\u0027) (\u0027L\u0027|\u0027l\u0027))`, are reserved for standardization in this or future versions of this specification.\r\n\r\nWhile the `Name` or `NCName` productions in XML technically permit these names and all of the methods behave based on their specification, anyone using `EncodeLocalName` as a catch-all solution to produce \"valid\" names runs into an issue when such a name would be `xmlns`, as using it for attributes will certainly not be what was intended. Relying on these methods for serializers (which is what one usually uses them for) will break if the serialized property is `xmlns` and used as an attribute, and might break in the future if the name starts with `xml` (case-insensitive).\r\n\r\nEven more serious issue happens when one uses the encoded name for a processing instruction, whose target is defined as `Name - ((\u0027X\u0027 | \u0027x\u0027) (\u0027M\u0027 | \u0027m\u0027) (\u0027L\u0027 | \u0027l\u0027))`, since `\u003c?xml` is the XML declaration and not a processing instruction. Anyone relying on `EncodeLocalName` for this purpose would make the resulting XML invalid.\r\n\r\n----\r\n\r\nI believe these changes are appropriate:\r\n\r\n* `EncodeLocalName` should prevent against the situation when the resulting name starts with `xml` (case-insensitive), preferably by encoding the `x` at the beginning as `_x0078_` and `X` as `_x0058_` (this way the `x` letter remains there in some sense and so the name is still recognizable). \r\n* `EncodeName` should prevent the same situation and the case when the `:` character is followed by `xml` (case-insensitive), in the same way as above. While a name like `ns:xmlns` is not technically reserved, a possible operation that removes the prefix and makes the `ns` namespace default could in turn make it a reserved name (even though such a situation could be prevented by more intelligent processors).\r\n* `EncodeNmToken` does not have to be changed, since it refers strictly to a particular production (well at least in the name of the method, not in the documentation). The documentation could be improved though.\r\n\r\nThe `x`/`X` character can be freely encoded this way without breaking anything because `XmlConvert.DecodeName` will be able to decode it back in this form, and so any application that uses this pair of methods properly will still work correctly.\r\n\r\nIf changing the methods is not desirable for backwards compatibility (even though I cannot imagine a situation where one would want to use these methods but *preserve* names like `xmlns`), the documentations for those methods *should explicitly point out that the procedure does not actually ensure validity of the result in all contexts (i.e. `PITarget`) or protect against misinterpretation (e.g. with `xmlns`)*. Optimally, in such a case, a new method like `EncodeUnreservedName(String)` should be added that performs this protection and thus can be used after `EncodeLocalName` accordingly. If such is the case, perhaps names reserved in some additional contexts could be added there (though I can\u0027t think of any at the moment).\n\n### Reproduction Steps\n\nConsole.WriteLine(XmlConvert.EncodeLocalName(\"xml\"));\r\nConsole.WriteLine(XmlConvert.EncodeLocalName(\"xmlns\"));\r\nConsole.WriteLine(XmlConvert.EncodeLocalName(\"xmlreservedname\"));\n\n### Expected behavior\n\n```\r\n_x0078_ml\r\n_x0078_mlns\r\n_x0078_mlreservedname\r\n```\r\n(or any other encoding where the result does not start with `xml`)\n\n### Actual behavior\n\n```\r\nxml\r\nxmlns\r\nxmlreservedname\r\n```\n\n### Regression?\n\nThis issue goes as far back as .NET Framework.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eIS4Code\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-10T09:35:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mW8Gj",
                                           "createdAt":  "2023-09-13T09:37:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "As you mentioned yourself those names are not forbidden but reserved. Since XML library doesn\u0027t know if you\u0027re using those for implementation of something which reserved this name or encoding of untrusted inputs I believe it would be inappropriate to make assumptions. At this point - so many years after those APIs were created even if we decided that this is inappropriate I can bet that someone depends on that behavior and they have a legitimate use case and they would be broken by this change. Also there would be interoperability issue between different versions of .NET which would encode it differently creating different sets of problems.\r\n\r\nI\u0027ll suggest to instead create a proposal for separate overloads which do what you\u0027re saying or perhaps even ship them as a separate NuGet package for now and if you find they have large interest it would make a great point that it would be a useful addition to the framework.\r\n\r\nIMO the usefulness of this would be fairly low comparing to size and added maintenance cost - especially now that people most frequently prefer JSON over XML.\r\n\r\nHaving said that I can\u0027t judge to what other people find useful so I\u0027ll leave this issue open to give other people chance to upvote. If we find that people would find it useful we can reconsider - for now I suggest creating workaround and pasting it in this issue so that other people can reuse once they encounter this issue.",
                                           "updatedAt":  "2023-09-13T09:37:25Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "XmlConvert.EncodeLocalName does not encode reserved names",
        "labels":  [
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93189",
        "createdAt":  "2023-10-08T19:06:11Z",
        "number":  93189,
        "author":  "Dave-Lowndes",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCzIa4Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Viorel",
                                            "createdAt":  "2023-10-08T19:18:02Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-05T17:19:11Z",
        "body":  "### Description\n\nI\u0027m porting a .NET FW application to .NET (6 and above).\r\nThe application performs an XML to HTML conversion using an XSLT transform via System.Xml.Xsl.XslCompiledTransform.\r\n\r\nUnder .NET FW, this XSL line:\r\n\r\n`\u003cxsl:value-of select=\"ms:format-date(\u00272001-02-03T01:02:03\u0027, \u0027\u0027)\"/\u003e`\r\n\r\nProduces:\r\n\r\n`03/02/2001`\r\n\r\nUK date format since that\u0027s my locale.\r\n\r\nHowever, under .NET 6 (I\u0027ve also tried 8), it produces:\r\n\r\n`03/02/2001 01:02:03`\r\n\r\nSimilarly, the format-time function also outputs both the date \u0026 time.\n\n### Reproduction Steps\n\nIt\u0027s easy to see there\u0027s a problem from the identified source code.\n\n### Expected behavior\n\nThe default (empty) format string should cause format-date() to output just the date, and correspondingly, format-time() to output just the time - as was the case under .NET FW and is how the functions are documented.\n\n### Actual behavior\n\nBoth functions output both the date and time.\n\n### Regression?\n\nYes, the functions works as documented for .NET FW.\n\n### Known Workarounds\n\nDon\u0027t use the default (empty) format string - pass either \"d\" or \"T\" to the functions.\n\n### Configuration\n\n.NET 6 and above (I\u0027ve not tried anything \u003c 6)\r\n\n\n### Other information\n\nLooking at the .NET source code, the issue seems to be in the [MSFormatDateTime function](https://github.com/dotnet/runtime/blob/b21d709640e52cf43dc78a561e93174c7279e3c5/src/libraries/System.Private.Xml/src/System/Xml/Xsl/Runtime/XsltFunctions.cs#L365). Note that the function doesn\u0027t use the \"isDate\" parameter.\r\n\r\nCompare that code with the [.NET FW version](https://referencesource.microsoft.com/#System.Data.SqlXml/System/Xml/Xsl/Runtime/XsltFunctions.cs,340) which clearly uses the isDate parameter to do just the Date or Time appropriately.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOolMMCw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ob3Dt",
                                           "createdAt":  "2023-10-08T19:06:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI\u0027m porting a .NET FW application to .NET (6 and above).\r\nThe application performs an XML to HTML conversion using an XSLT transform via System.Xml.Xsl.XslCompiledTransform.\r\n\r\nUnder .NET FW, this XSL line:\r\n\r\n`\u003cxsl:value-of select=\"ms:format-date(\u00272001-02-03T01:02:03\u0027, \u0027\u0027)\"/\u003e`\r\n\r\nProduces:\r\n\r\n`03/02/2001`\r\n\r\nUK date format since that\u0027s my locale.\r\n\r\nHowever, under .NET 6 (I\u0027ve also tried 8), it produces:\r\n\r\n`03/02/2001 01:02:03`\r\n\r\nSimilarly, the format-time function also outputs both the date \u0026 time.\n\n### Reproduction Steps\n\nIt\u0027s easy to see there\u0027s a problem from the identified source code.\n\n### Expected behavior\n\nThe default (empty) format string should cause format-date() to output just the date, and correspondingly, format-time() to output just the time - as was the case under .NET FW and is how the functions are documented.\n\n### Actual behavior\n\nBoth functions output both the date and time.\n\n### Regression?\n\nYes, the functions works as documented for .NET FW.\n\n### Known Workarounds\n\nDon\u0027t use the default (empty) format string - pass either \"d\" or \"T\" to the functions.\n\n### Configuration\n\n.NET 6 and above (I\u0027ve not tried anything \u003c 6)\r\n\n\n### Other information\n\nLooking at the .NET source code, the issue seems to be in the [MSFormatDateTime function](https://github.com/dotnet/runtime/blob/b21d709640e52cf43dc78a561e93174c7279e3c5/src/libraries/System.Private.Xml/src/System/Xml/Xsl/Runtime/XsltFunctions.cs#L365). Note that the function doesn\u0027t use the \"isDate\" parameter.\r\n\r\nCompare that code with the [.NET FW version](https://referencesource.microsoft.com/#System.Data.SqlXml/System/Xml/Xsl/Runtime/XsltFunctions.cs,340) which clearly uses the isDate parameter to do just the Date or Time appropriately.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDave-Lowndes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-08T19:06:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xJRff",
                                           "createdAt":  "2024-01-18T10:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "It does seem like a bug @Dave-Lowndes . It seems this got regressed here: https://github.com/dotnet/runtime/commit/d784b77a197f48073dbe4766da6da5d129c0f135\r\n\r\nWe should figure out why that change was made and make sure we don\u0027t regress issue being fixed there while fixing this.\r\n\r\n@Dave-Lowndes are you perhaps interested in making a pull request?",
                                           "updatedAt":  "2024-01-18T10:59:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xJWKv",
                                           "createdAt":  "2024-01-18T11:11:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dave-Lowndes",
                                           "body":  "@krwq It\u0027d be best if whoever regressed it also fixed it.",
                                           "updatedAt":  "2024-01-18T11:11:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xYd80",
                                           "createdAt":  "2024-01-20T18:55:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "I agree that would be ideal but they\u0027re no longer on our team (and even if I doubt anyone would remember context after these many years)...",
                                           "updatedAt":  "2024-01-20T18:56:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xZ1TT",
                                           "createdAt":  "2024-01-21T11:18:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dave-Lowndes",
                                           "body":  "I\u0027ll try to refresh my memory of this and I\u0027ll have a look into it when I can.",
                                           "updatedAt":  "2024-01-21T11:18:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xoxQ5",
                                           "createdAt":  "2024-01-23T16:58:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dave-Lowndes",
                                           "body":  "I\u0027ve had a look and have a proposed reworking of the offending method. However, I\u0027ve been unable to build the solution/project (System.Private.Xml) in VS, so it\u0027s untested, and I don\u0027t have permission to create a branch - attempting to push my local branch gives:\r\n\r\nPushing Fix_Issue_93189_MSFormatDateTime\r\nRemote: Permission to dotnet/runtime.git denied to Dave-Lowndes.",
                                           "updatedAt":  "2024-01-23T16:58:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xox_Q",
                                           "createdAt":  "2024-01-23T17:00:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODVebfg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krwq",
                                                                               "createdAt":  "2024-02-05T10:20:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "martincostello",
                                           "body":  "You need to fork the repository to your personal GitHub account, push your local branch to that fork, and then create the pull request from your fork.",
                                           "updatedAt":  "2024-01-23T17:00:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iUwwL",
                                           "createdAt":  "2025-03-14T03:52:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IDisposable",
                                           "body":  "I added unit-tests *that currently PASS* in [DRAFT] PR #113507\n\nWhen the fixes in PR #97402 land, we need to come back here and update the expected values in _D:\\Dev\\dotnet\\runtime\\src\\libraries\\System.Private.Xml\\tests\\Xslt\\TestFiles\\TestData\\XsltApiV2\\baseline\\bug93189.xml_ to have the correct (pre break values)",
                                           "updatedAt":  "2025-03-14T03:52:13Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "XSLT extension methods format-date \u0026 format-time both output date \u0026 time when using the empty string (default) format",
        "labels":  [
                       "bug",
                       "area-System.Xml",
                       "good first issue",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100239",
        "createdAt":  "2024-03-25T16:23:22Z",
        "number":  100239,
        "author":  "Yozer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODI9e1Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "arjenkeijzer",
                                            "createdAt":  "2025-03-31T10:40:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mpawelskiaccess",
                                            "createdAt":  "2025-07-29T13:42:46Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-07-19T09:32:50Z",
        "body":  "### Description\r\n\r\nSynchronous operations are disallowed. Call ReadAsync or set AllowSynchronousIO to true instead.\r\n\r\n```\r\nat MyMiddleware.InvokeAsync(HttpContext context) \r\nat System.Xml.Linq.XDocument.LoadAsync(TextReader textReader, LoadOptions options, CancellationToken cancellationToken)\r\nat System.Xml.Linq.XDocument.LoadAsyncInternal(XmlReader reader, LoadOptions options, CancellationToken cancellationToken)\r\nat System.Xml.Linq.XDeclaration..ctor(XmlReader r)\r\nat System.Xml.XmlTextReaderImpl.ParseDocumentContent()\r\nat System.Xml.XmlTextReaderImpl.ParseElement()\r\nat System.Xml.XmlTextReaderImpl.ParseAttributes()\r\nat System.Xml.XmlTextReaderImpl.ParseAttributeValueSlow(Int32 curPos, Char quoteChar, NodeData attr)\r\nat System.Xml.XmlTextReaderImpl.ReadData()\r\nat System.IO.StreamReader.Read(Char[] buffer, Int32 index, Int32 count)\r\nat System.IO.StreamReader.ReadSpan(Span`1 buffer)\r\nat System.IO.StreamReader.ReadBuffer(Span`1 userBuffer, Boolean\u0026 readToUserBuffer)\r\nat Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.Read(Span`1 buffer)\r\nat System.IO.Stream.Read(Span`1 buffer)\r\nat System.InvalidOperationException: Synchronous operations are disallowed. Call ReadAsync or set AllowSynchronousIO to true instead.\r\n```\r\n\r\n### Reproduction Steps\r\n\r\nI don\u0027t have the actual XML request that caused it but I think it\u0027s pretty clear from call stack that LoadAsyncInternal creates XDeclaration and the ctor there reads attributes and does it in a non-async way.\r\n\r\n### Expected behavior\r\n\r\nXDocument.LoadAsync should be fully async\r\n\r\n### Actual behavior\r\n\r\nThrows Synchronous operations are disallowed. Call ReadAsync or set AllowSynchronousIO to true instead.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\nAllow syncIO\r\n```\r\nbuilder.WebHost.ConfigureKestrel((_, options) =\u003e\r\n{\r\n    options.AllowSynchronousIO = true;\r\n});\r\n```\r\n\r\n### Configuration\r\n\r\nlatest aspnet core docker image: 8.0.3-bookworm-slim-amd64\r\nhttps://github.com/dotnet/dotnet-docker/blob/9ffd75ed9a9a8790e7c7af5c925eefe7e4015bc1/src/aspnet/8.0/bookworm-slim/amd64/Dockerfile\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeFHfaQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc54TlLE",
                                           "createdAt":  "2024-03-25T16:23:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-25T16:23:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54Ud9p",
                                           "createdAt":  "2024-03-25T18:20:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Yozer",
                                           "body":  "Repro steps, invalid xml, easier to debug:\r\n\r\n```csharp\r\nvar xml = \"\u003c?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?\u003e\u003csoap:Envelope xmlns:soap=\\\"http://www.w3.org/2003/05/soap-envelope\u0027\\r\";\r\n\r\nusing var ms = new MemoryStream(Encoding.UTF8.GetBytes(xml));\r\nvar asyncInput = new CheckSyncAsyncStream(async: true, ms);\r\nvar xdoc = await XDocument.LoadAsync(asyncInput, LoadOptions.None, CancellationToken.None);\r\nConsole.WriteLine(xdoc.DescendantNodes().Count());\r\n```\r\n\r\nOr with valid xml. When reading attribute we exceed the buffer the read happens in a sync way.\r\n```csharp\r\nvar xml = \"\u003c?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?\u003e\u003csoap:Envelope xmlns:soap=\\\"http://www.w3.org/2003/05/soap-envelope\";\r\nxml += string.Join(\"\", Enumerable.Repeat(\"a\", 50_000));\r\nxml += \"\\\"\u003e\u003c/soap:Envelope\u003e\";\r\n```\r\n\r\nCheckAsyncStream is from this repo:\r\nhttps://github.com/dotnet/runtime/blob/06650b7f1bd158c6c270e6f627a8c90d8eee3836/src/libraries/System.Private.Xml.Linq/tests/misc/LoadSaveAsyncTests.cs#L425",
                                           "updatedAt":  "2024-03-25T18:23:37Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Synchronous call inside XDocument.LoadAsync",
        "labels":  [
                       "bug",
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101496",
        "createdAt":  "2024-04-24T14:45:56Z",
        "number":  101496,
        "author":  "jhudsoncedaron",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-20T01:29:34Z",
        "body":  "### Background and motivation\n\nI find myself in an interesting place. When operating Xml documents that are alternately edited with a text editor and a graphical component; and manual intentation must be preserved, the old System.Xml.XmlDocument library is more fit for purpose than the newer System.Xml.Linq.XDocument.\r\n\r\nThe worst usability issue in the XmlDocument library is the fact that XmlNodeList is not generic. This turns out to be a fixable problem.\n\n### API Proposal\n\n\r\n```csharp\r\n// Note that this isn\u0027t nullable despite this[int] being nullable. Read the docs on when that returns null.\r\npublic partial class XmlList : IReadOnlyList\u003cXmlNode\u003e {\r\n    // Strictly speaking, this method isn\u0027t necessary, but I found it improves readability so much it\u0027s worth it.\r\n    // I wouldn\u0027t do this if I didn\u0027t know it would JIT away to nothing.\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public IReadOnlyList\u003cXmlNode\u003e AsReadOnlyList() =\u003e this;\r\n\r\n    int IReadOnlyList\u003cXmlNode\u003e.Count =\u003e Count;\r\n    XmlNode IReadOnlyList\u003cXmlNode\u003e.this[int i] =\u003e this[i] ?? throw new IndexOutOfRangeException();\r\n    IEnumerator\u003cXmlNode\u003e IReadOnlyList\u003cXmlNode\u003e.GetEnumerator();\r\n}\r\n```\r\n\r\nGetEnumerator requires a real implementation; the Linq optimization doesn\u0027t work here because XmlNodeList already implements IDisposable. It might be as simple as this:\r\n\r\n```csharp\r\npublic partial class XmlList : IReadOnlyList\u003cXmlNode\u003e {\r\n    IEnumerator\u003cXmlNode\u003e IReadOnlyList\u003cXmlNode\u003e.GetEnumerator() =\u003e new Enumerator(this);\r\n\r\n    private sealed class Enumerator : IEnuerator\u003cT\u003e {\r\n        private readonly XmlNodeList list;\r\n        private int index = -1;\r\n\r\n        internal Enuemerator((XmlNodeList owner) =\u003e list = owner;\r\n\r\n       public bool MoveNext() =\u003e ++index \u003c Count;\r\n       public XmlNode Current =\u003e list[index] ?? throw new InvalidOperationException();\r\n       object IEnumerator.Current =\u003e Current;\r\n       public void Rewind() { index = -1; }\r\n       public void Dispose() {}\r\n    }\r\n}\r\n```\n\n### API Usage\n\nThe gain is twofold.\r\n\r\n1)\r\n\r\n```csharp\r\n    foreach (var node in xdoc.SelectNodes(\"//xpathexpression\", namespaces).AsReadOnlyList()) {\r\n    }\r\n```\r\n\r\nwhich is much better than \r\n\r\n```csharp\r\n    foreach (var node in xdoc.SelectNodes(\"//xpathexpression\", namespaces).Cast\u003cXmlNode\u003e()) {\r\n    }\r\n```\r\n\r\nbecause all the runtime casts disappear. I could have done almost as good with an extension method; but the second benefit not so much.\r\n\r\n2) As XmlNodeList now implements IReadOnlyCollection\u003cXmlNode\u003e it can just be passed to Linq methods and everything that uses generic interfaces works normally. For example:\r\n\r\n```csharp\r\n    foreach (var node in xdoc.SelectNodes(\"//xpathexpression\", namespaces)\r\n          .Where((x) =\u003e x.Attributes[\"typeid\"] = \"DT\"\r\n          .Select((x) =\u003e DateTime.Parse(x.InnerText)) {\r\n    }\r\n```\n\n### Alternative Designs\n\nI could do this with extension methods but the allocation penalty is actually rather bad. Allocating an enumerator shim is cheap; failing the reference equality test after unwrapping two layers of Linq and having to enumerate both lists to check if they\u0027re identical is not.\n\n### Risks\n\nI suppose it\u0027s possible that somebody took a dependency on XmlNodeList doesn\u0027t implement IReadOnlyList\u003cT\u003e or IEnumerable\u003cT\u003e. I can\u0027t imagine what such code would look like where this isn\u0027t some unit test designed to prove it doesn\u0027t.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOe7TYDw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc57s_Tx",
                                           "createdAt":  "2024-04-24T16:38:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-24T16:38:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57tBa0",
                                           "createdAt":  "2024-04-24T16:43:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "This might not be accepted according to [the contribution bar of `System.Xml`](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.Xml/README.md#contribution-bar).",
                                           "updatedAt":  "2024-04-24T16:43:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57tNgP",
                                           "createdAt":  "2024-04-24T17:14:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@teo-tsirpanis : It might not be; but it ought to have been done long ago.\r\n\r\nAll pre-NET Framework 2.0 collections should be retrofitted to implement generic collections (unless they would be collections of object), no matter where they are. In this case, the corresponding generic collection was added in .NET Framework 4.5 (IList makes no sense here, but IReadOnlyList makes sense).",
                                           "updatedAt":  "2024-04-24T17:14:12Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Retrofit XmlNodeList to implement IReadOnlyList",
        "labels":  [
                       "api-suggestion",
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104362",
        "createdAt":  "2024-07-03T12:33:44Z",
        "number":  104362,
        "author":  "denbell5",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6hNQw==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "VictorHumanist",
                                            "createdAt":  "2024-07-26T14:15:49Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "irancic",
                                            "createdAt":  "2024-08-27T09:22:56Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-02-18T10:55:31Z",
        "body":  "### Background and motivation\n\nIn .NET Framework, XmlSerializer by default escapes characters like \\u0001 when it writes non-attribute text (`\u003cValue\u003eexample\\u00001example\u003c/Value\u003e`).\r\n \r\nIn .NET6 the code throws exception `ArgumentException: \u0027\u0001\u0027, hexadecimal value 0x01, is an invalid character.\r\n` (the exception starts from [here](https://github.com/dotnet/runtime/blob/ffcdf42c201e0b2d137ffeb0f40ddcfef65f1c6c/src/libraries/System.Private.Xml/src/System/Xml/Core/XmlEncodedRawTextWriter.cs#L1296)).\r\n\r\nI could not find any option to conveniently intercept the process of writing to escape those characters because `XmlEncodedRawTextWriter` is internal and it is not possible to extend it. `XmlTextWriter`, that is used in .NET Framework is in System.Private.Xml library which is not accessible unless I am missing something.\r\n\r\n\n\n### API Proposal\n\n```csharp\r\nnamespace System.Xml\r\n{\r\n\t//\r\n\t// Summary:\r\n\t//     Specifies a set of features to support on the System.Xml.XmlWriter object created\r\n\t//     by the Overload:System.Xml.XmlWriter.Create method.\r\n\tpublic sealed class XmlWriterSettings\r\n\t{\r\n               //\r\n               // Summary:\r\n               //     Gets or sets a value indicating whether to escape invalid characters when writing non-attribute text.\r\n               //\r\n               // Returns:\r\n               //     true to escape invalid characters when writing non-attribute text; otherwise, false. The default is\r\n               //     false.\r\n               public bool EscapeInvalidCharacters { get; set; }\r\n        }\r\n}  \r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar xmlWriter = XmlWriter.Create(stringWriter, new XmlWriterSettings\r\n{\r\n\tEscapeInvalidCharacters = true\r\n});\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnt0TWw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6DfHZx",
                                           "createdAt":  "2024-07-03T12:34:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-03T12:34:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dultC",
                                           "createdAt":  "2025-02-09T12:45:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Assigned to @krwq for triage and consideration.",
                                           "updatedAt":  "2025-02-09T12:45:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e3RNb",
                                           "createdAt":  "2025-02-18T10:55:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@denbell5 have you tried\n\n```csharp\nXmlWriterSettings settings = new()\n{\n    CheckCharacters = false,\n};\n\nstring testContent = \"example\\u00001example\";\n\nusing (XmlWriter writer = XmlWriter.Create(Console.Out, settings))\n{\n    writer.WriteElementString(\"Value\", testContent);\n}\n```\n\nThis is not exactly as you described but produces:\n\n```\n\u003cValue\u003eexample\u0026#x0;1example\u003c/Value\u003e\n```",
                                           "updatedAt":  "2025-02-18T10:55:28Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: allow to escape invalid xml characters during xml serialization",
        "labels":  [
                       "api-suggestion",
                       "area-System.Xml",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104507",
        "createdAt":  "2024-07-06T13:35:52Z",
        "number":  104507,
        "author":  "martin-honnen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-09T12:49:40Z",
        "body":  "### Description\n\nThe [XSD 1.0 specification](https://www.w3.org/TR/xmlschema-2/#typesystem) which the XML stack of Microsoft in .NET supports/implements defines various subtypes of the `xs:string` type, like `xs:normalizedString`, `xs:token`, `xs:language`, `xs:Name`.\r\n\r\nFor normalizedString the spec https://www.w3.org/TR/xmlschema-2/#normalizedString defines the value space as follows:\r\n\r\n\u003e The [·value space·](https://www.w3.org/TR/xmlschema-2/#dt-value-space) of normalizedString is the set of strings that do not contain the carriage return (#xD), line feed (#xA) nor tab (#x9) characters.\r\n\r\nFor token the spec https://www.w3.org/TR/xmlschema-2/#token defines:\r\n\r\n\u003e token represents tokenized strings. The [·value space·](https://www.w3.org/TR/xmlschema-2/#dt-value-space) of token is the set of strings that do not contain the carriage return (#xD), line feed (#xA) nor tab (#x9) characters, that have no leading or trailing spaces (#x20) and that have no internal sequences of two or more spaces. The [·lexical space·](https://www.w3.org/TR/xmlschema-2/#dt-lexical-space) of token is the set of strings that do not contain the carriage return (#xD), line feed (#xA) nor tab (#x9) characters, that have no leading or trailing spaces (#x20) and that have no internal sequences of two or more spaces. The [·base type·](https://www.w3.org/TR/xmlschema-2/#dt-basetype) of token is [normalizedString](https://www.w3.org/TR/xmlschema-2/#normalizedString). \r\n\r\nFor language the spec https://www.w3.org/TR/xmlschema-2/#language defines:\r\n\r\n\u003e language represents natural language identifiers as defined by by [[RFC 3066]](https://www.w3.org/TR/xmlschema-2/#RFC3066) . The [·value space·](https://www.w3.org/TR/xmlschema-2/#dt-value-space) of language is the set of all strings that are valid language identifiers as defined [[RFC 3066]](https://www.w3.org/TR/xmlschema-2/#RFC3066) . The [·lexical space·](https://www.w3.org/TR/xmlschema-2/#dt-lexical-space) of language is the set of all strings that conform to the pattern [a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})* . The [·base type·](https://www.w3.org/TR/xmlschema-2/#dt-basetype) of language is [token](https://www.w3.org/TR/xmlschema-2/#token).\r\n\r\nFor Name the spec https://www.w3.org/TR/xmlschema-2/#Name defines:\r\n\r\n\u003e Name represents [XML Names](https://www.w3.org/TR/2000/WD-xml-2e-20000814#dt-name). The [·value space·](https://www.w3.org/TR/xmlschema-2/#dt-value-space) of Name is the set of all strings which [·match·](https://www.w3.org/TR/xmlschema-2/#dt-match) the [Name](https://www.w3.org/TR/2000/WD-xml-2e-20000814#NT-Name) production of [[XML 1.0 (Second Edition)]](https://www.w3.org/TR/xmlschema-2/#XML). The [·lexical space·](https://www.w3.org/TR/xmlschema-2/#dt-lexical-space) of Name is the set of all strings which [·match·](https://www.w3.org/TR/xmlschema-2/#dt-match) the [Name](https://www.w3.org/TR/2000/WD-xml-2e-20000814#NT-Name) production of [[XML 1.0 (Second Edition)]](https://www.w3.org/TR/xmlschema-2/#XML). The [·base type·](https://www.w3.org/TR/xmlschema-2/#dt-basetype) of Name is [token](https://www.w3.org/TR/xmlschema-2/#token).\r\n\r\n\r\nWithin the System.Xml APIs the typed value of a schema-validated XML input is supposed to be returned by the ([XPathNavigator.TypedValue](https://learn.microsoft.com/en-us/dotnet/api/system.xml.xpath.xpathnavigator.typedvalue?view=net-8.0)) property.\r\n\r\nI would expect the typed value of an element `\u003ctoken\u003e   abc   \u003c/token\u003e` typed in a schema as `xs:token` to be `abc`, however I find that .NET returns `   abc   ` with XPathNavigator.TypedValue, similarly the normalization fails for `xs:language`, `xs:Name`.\r\n\r\nThe required normalization/removal of line feeds, carriage returns and tabs from xs:normalizedString also is not visible in TypedValue.\r\n\r\nFor what it\u0027s worth, I looked at other existing .NET APIs/infrastructure supporting XSD schema types and interestingly enough if I use XmlSerializer with fields/properties in C# class(es) with the types token or language or Name, on deserialization the values of such fields/properties are clearly normalized, so there is infrastructure in .NET to handle/perform the normalization for those types, only XPathNavigator.TypedValue fails to apply it.\r\n\r\nFor the type `xs:normalizedString` I find both XmlSerializer and XPathNavigator.TypedValue to fail to perform the value normalization the XSD spec requires.\r\n\r\n\n\n### Reproduction Steps\n\nI have created (for the time being as .NET 8, will add a .NET 9 branch later) the repository https://github.com/martin-honnen/Net8and9XsdStringSubTypesTestXPathNavigatorTypedValue.\r\n\r\nIf you load that and then run the Program.cs in there it outputs\r\n\r\n```\r\nElement string has typed value |   abc   | of type System.String\r\nElement normalized-string has typed value |Line 1.\r\nLine 2.\r\nLine 3.| of type System.String\r\nElement token has typed value |   abc   | of type System.String\r\nElement language has typed value |   en   | of type System.String\r\nElement name has typed value |   abc   | of type System.String\r\n```\r\n\r\nshowing that the typed value of xs:token, xs:language and xs:Name elements in XPathNavigator.TypedValue returns values with leading and trailing whitespace although that is not allowed by the XSD spec in their values.\r\n\r\nThe normalizedString is not supposed to contain line breaks but  .NET fails to remove them as well.\r\n\r\n\n\n### Expected behavior\n\nThe typed value should return values with the proper value space normalization applied e.g. the output should rather be\r\n\r\n```\r\nElement string has typed value |   abc   | of type System.String\r\nElement normalized-string has typed value |Line 1. Line 2. Line 3.| of type System.String\r\nElement token has typed value |abc| of type System.String\r\nElement language has typed value |en| of type System.String\r\nElement name has typed value |abc| of type System.String\r\n```\n\n### Actual behavior\n\nThe output contains in the typed value spaces or line breaks which are, according to the XSD 1.0 datatypes spec, not part of the value space of these types xs:normalizedString, xs:token, xs:language, xs:Name:\r\n\r\n```\r\nElement string has typed value |   abc   | of type System.String\r\nElement normalized-string has typed value |Line 1.\r\nLine 2.\r\nLine 3.| of type System.String\r\nElement token has typed value |   abc   | of type System.String\r\nElement language has typed value |   en   | of type System.String\r\nElement name has typed value |   abc   | of type System.String\r\n```\n\n### Regression?\n\nDoesn\u0027t appear to be a regression, rather a long standing non-compliance (or different interpretation/implementation of the spec). But https://learn.microsoft.com/en-us/dotnet/standard/data/xml/accessing-strongly-typed-xml-data-using-xpathnavigator with \r\n\r\n\u003e Typed Value: A schema-validated attribute or element with a simple type has a typed value. This value is a primitive type such as a numeric, string, or date type. All the built-in simple types in XSD can be mapped to CLR types that provide access to the value of a node as a more appropriate type instead of just as a [String](https://learn.microsoft.com/en-us/dotnet/api/system.string).\r\n\r\nseems to suggest a typed value in the sense of the XSD 1.0 value space should be returned.\n\n### Known Workarounds\n\nUse a commercial, third party library like SaxonCS, which performs the correct value normalization, see e.g. https://github.com/martin-honnen/SaxonCSStringSubTypesNormalizedValueTest1 (requires at least a SaxonCS trial license from Saxonica to be set up in the environment variable `SAXON_LICENSE_DIR`) which gives the results:\r\n\r\n```\r\nElement string has typed value |   abc   | of type Saxon.Api.XdmAtomicValue\r\nElement normalized-string has typed value |Line 1. Line 2. Line 3.| of type Saxon.Api.XdmAtomicValue\r\nElement token has typed value |abc| of type Saxon.Api.XdmAtomicValue\r\nElement language has typed value |en| of type Saxon.Api.XdmAtomicValue\r\nElement name has typed value |abc| of type Saxon.Api.XdmAtomicValue\r\n```\r\n\r\nSwitch to XmlSerializer which at least for xs:token, xs:language, xs:Name (but not for xs:normalizedString) seems to know how to normalize the values, see https://github.com/martin-honnen/XmlSerializerXsdStringSubtypesNormalizationTest1 which outputs values as e.g.\r\n\r\n```\r\nstring value : |   abc   |\r\nnormalized string value : |Line 1.\r\nLine 2.\r\nLine 3.|\r\ntoken value : |abc|\r\nlanguage value : |en|\r\nName value : |abc|\r\n```\n\n### Configuration\n\n.NET 8, tested on Windows 11 x64.  I don\u0027t think, however, it is specific to x64/Windows.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbqPeA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6D1QAx",
                                           "createdAt":  "2024-07-06T13:53:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-06T13:53:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6D1WsM",
                                           "createdAt":  "2024-07-06T15:46:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "martin-honnen",
                                           "body":  "I have now also tested with the current .NET 9 preview, result shows the same lack of value normalization:\r\n```\r\nElement string has typed value |   abc   | of type System.String\r\nElement normalized-string has typed value |Line 1.\r\nLine 2.\r\nLine 3.| of type System.String\r\nElement token has typed value |   abc   | of type System.String\r\nElement language has typed value |   en   | of type System.String\r\nElement name has typed value |   abc   | of type System.String\r\n```\r\n\r\n.NET 9 project is in different branch https://github.com/martin-honnen/Net8and9XsdStringSubTypesTestXPathNavigatorTypedValue/tree/Net9Branch of the same project.",
                                           "updatedAt":  "2024-07-06T15:46:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6duo94",
                                           "createdAt":  "2025-02-09T12:49:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Assigned to @krwq for further triage.",
                                           "updatedAt":  "2025-02-09T12:49:39Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "XPathNavigator.TypedValue fails to return normalized values in the value space of XSD xs:string subtypes like xs:normalizedString, xs:token, xs:language, xs:Name",
        "labels":  [
                       "area-System.Xml",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111738",
        "createdAt":  "2025-01-23T08:13:12Z",
        "number":  111738,
        "author":  "Agendum",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T09:44:37Z",
        "body":  "### Description\n\nThe `NamespaceURI` member of `XmlElement` is not updated when changing the namespace information in attributes. There also does not seem to be a way to resync the property after changing namespace information, and you cannot even save and reload the XML to get it because saving fails. Basically, there is nothing that can be done.\n\n### Reproduction Steps\n\nHere is a small code snippet which demonstrates the problem:\n\n```C#\nconst string xml = \"\u003ctest\u003e\u003c/test\u003e\";\nvar doc = new XmlDocument();\ndoc.LoadXml(xml);\nConsole.WriteLine(doc.DocumentElement.NamespaceURI); // yields \"\"\nConsole.WriteLine(doc.DocumentElement.GetNamespaceOfPrefix(\"\")); // yields \"\"\ndoc.DocumentElement.SetAttribute(\"xmlns\", \"http://www.w3.org/2000/xmlns/\", \"ns\");\nConsole.WriteLine(doc.DocumentElement.NamespaceURI); // BUG: yields \"\", SHOULD BE \"ns\"\nConsole.WriteLine(doc.DocumentElement.GetNamespaceOfPrefix(\"\")); // yields \"ns\"\nvar sb = new StringBuilder();\nusing XmlWriter xmlWriter = XmlWriter.Create(sb, new XmlWriterSettings()\n{\n    Encoding = Encoding.Unicode,\n    OmitXmlDeclaration = true,\n});\ndoc.Save(xmlWriter); // BUG: throws because element namespace URI doesn\u0027t match attribute\n```\n\nThe problem also affects GetNamespaceOfPrefix() if you have this:\n\n```xml\n\u003croot\u003e\u003ctest xmlns=\"ns\"\u003e\u003c/test\u003e\u003c/root\u003e\n```\n\nAnd then you delete the namespace declaration in `test`. The way `GetNamespaceOfPrefix()` works is if the element has no attributes, it uses the element\u0027s `NamespaceURI` if the prefixes are the same (which they are). Therefore `GetNamespaceOfPrefix()` continues to return \u0027ns\u0027 even though an attribute declaring that no longer exists.\n\n### Expected behavior\n\nI would expect that both `GetNamespaceOfPrefix()` and `NamespaceURI` would always reflect the actual prefix and namespace state of attributes on the element or in the ancestry. Even if they weren\u0027t reflected, I would expect to be able to `Save()` it out and reload, which can also not be done.\n\n### Actual behavior\n\n`NamespaceURI` is not updated when attributes change the namespace, and therefore sometimes `GetNamespaceOfPrefix` also is not updated. This causes `Save()` to fail as well.\n\n### Regression?\n\nI don\u0027t know.\n\n### Known Workarounds\n\nI have not found any yet. I am interested in any workarounds, hopefully any which do not involve deleting and recreating the element.\n\n### Configuration\n\nWindows 11, .NET 9, x64. I highly doubt this is specific to any configuration.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnboEBw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6bhAbk",
                                           "createdAt":  "2025-01-23T08:13:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-23T08:13:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bnSQE",
                                           "createdAt":  "2025-01-23T18:52:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Agendum",
                                           "body":  "I have a work-around now, but it involves reflection, so it is not pretty. I am not endorsing anybody do this, but it illustrates that the internal `XmlName` of the element is not being updated when attributes change on the element, and even if that is by design, there is zero tooling around allowing somebody to do it.\n\n```C#\nconst string xml = \"\u003ctest\u003e\u003c/test\u003e\";\nvar doc = new XmlDocument();\ndoc.LoadXml(xml);\nConsole.WriteLine(doc.DocumentElement.NamespaceURI); // yields \"\";\nConsole.WriteLine(doc.DocumentElement.GetNamespaceOfPrefix(\"\")); // yields \"\";\ndoc.DocumentElement.SetAttribute(\"xmlns\", \"http://www.w3.org/2000/xmlns/\", \"ns\");\n\nvar propInfo = doc.DocumentElement\n    .GetType()\n    .GetProperty(\"XmlName\", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);\npropInfo.SetValue(\n    doc.DocumentElement,\n    propInfo.GetValue(doc.CreateElement(doc.DocumentElement.Prefix, doc.DocumentElement.LocalName, \"ns\")));\n\nConsole.WriteLine(doc.DocumentElement.NamespaceURI); // yields \"ns\";\nConsole.WriteLine(doc.DocumentElement.GetNamespaceOfPrefix(\"\")); // yields \"ns\";\nvar sb = new StringBuilder();\nusing XmlWriter xmlWriter = XmlWriter.Create(sb, new XmlWriterSettings()\n{\n    Encoding = Encoding.Unicode,\n    OmitXmlDeclaration = true,\n});\ndoc.Save(xmlWriter); // Works now\n```\n",
                                           "updatedAt":  "2025-01-23T18:52:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dugQH",
                                           "createdAt":  "2025-02-09T12:38:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Assigned to @krwq for triage.",
                                           "updatedAt":  "2025-02-09T12:38:00Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "XmlElement.SetAttribute does not update element\u0027s NamespaceURI",
        "labels":  [
                       "area-System.Xml",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111969",
        "createdAt":  "2025-01-29T18:32:18Z",
        "number":  111969,
        "author":  "dumprop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T09:42:22Z",
        "body":  "### Description\n\nHello! I decided to test System.Private.Xml module via fuzzing test.\nAfter some time I found test case which fails [Debug.Assert(maxCharsCount \u003e= charsCount)](https://github.com/dotnet/runtime/blob/v6.0.36/src/libraries/System.Private.Xml/src/System/Xml/Core/XmlTextReaderImpl.cs#L3626C26-L3626C53)\n\n![Image](https://github.com/user-attachments/assets/a5fee619-1731-42e5-8b97-2af9579f3a55)\n\n### Reproduction Steps\n\nDownload latest .NET v6.0.36 and build it in Debug mode (enable asserts), make reference in test project.\nTest\u0027s project code:\n```csharp\nusing SharpFuzz;\nusing System.Xml;\n\nFuzzer.Run(stream =\u003e\n    {\n        try\n        {\n            using (var xml = XmlReader.Create(stream))\n            {\n                while (xml.Read()) { }\n            }\n        }\n        catch (XmlException) { }\n    }\n);\n```\n\n[corpus_file_for_xml_crash.txt](https://github.com/user-attachments/files/18592382/file_for_xml_crash.txt)\n\nIn result, value of `maxCharsCount` is `80` and `charsCount` is `81` - that produce a crash\n\n### Expected behavior\n\nNo any crash, as usual\n\n### Actual behavior\n\n`Debug.Assert(maxCharsCount \u003e= charsCount)` is failed because `80 \u003e= 81` is false\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET v6.0.36 from github, Debug build (enable asserts), Linux Ubuntu x64\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnboXmQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6cUIrq",
                                           "createdAt":  "2025-01-29T18:32:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-29T18:32:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6duheZ",
                                           "createdAt":  "2025-02-09T12:40:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGsJjQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dumprop",
                                                                               "createdAt":  "2025-02-18T07:51:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Assigned to @krwq for triage.",
                                           "updatedAt":  "2025-02-09T12:40:14Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[System.Private.Xml] Possible incorrect behavior in character counting ( maxCharsCount \u003e= charsCount )",
        "labels":  [
                       "area-System.Xml",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113061",
        "createdAt":  "2025-03-03T09:28:36Z",
        "number":  113061,
        "author":  "fuzzah",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T21:47:27Z",
        "body":  "### Description\n\nIf an `XmlReader` object is created via `XmlReader.Create(stream)` with a `MemoryStream` having certain data, then an undocumented `ArgumentOutOfRangeException` may be thrown.\n\n### Reproduction Steps\n\nCreate a console app:\n```shell\ndotnet new console -n XmlReaderReproduce\ncd XmlReaderReproduce\n```\n\nPut the following code in the Program.cs file:\n```csharp\nusing System.Xml;\n\nstring data = \"\u003c?xml version=\\\"1.0\\xbf\\\"?\u003e\";\n\nbyte[] byteArray = System.Text.Encoding.UTF8.GetBytes(data);\nMemoryStream stream = new MemoryStream(byteArray);\n\ntry\n{\n    using (var xml = XmlReader.Create(stream))\n    {\n        while (xml.Read()) { }\n    }\n}\ncatch (XmlException) { }\n```\n\nBuild and run the app. In my case:\n```shell\ndotnet publish --self-contained -r linux-x64 -c Release\nbin/Release/net8.0/linux-x64/XmlReaderReproduce\n```\n\n### Expected behavior\n\nNo errors or any other output, as all exceptions related to System.Xml should be caught in the try..catch block\n\n### Actual behavior\n\nThe app exits with an unhandled ArgumentOutOfRangeException, which is undocumented for the XmlReader class:\n```plain\nUnhandled exception. System.ArgumentOutOfRangeException: count (\u0027-2\u0027) must be a non-negative value. (Parameter \u0027count\u0027)\nActual value was -2.\n   at System.ArgumentOutOfRangeException.ThrowNegative[T](T value, String paramName)\n   at System.Buffer.BlockCopy(Array src, Int32 srcOffset, Array dst, Int32 dstOffset, Int32 count)\n   at System.Xml.XmlTextReaderImpl.ReadData()\n   at System.Xml.XmlTextReaderImpl.SwitchEncoding(Encoding newEncoding)\n   at System.Xml.XmlTextReaderImpl.ParseXmlDeclaration(Boolean isTextDecl)\n   at System.Xml.XmlTextReaderImpl.Read()\n   at Program.\u003cMain\u003e$(String[] args) in /root/XmlReaderReproduce/Program.cs:line 12\nAborted (core dumped)\n```\n\n### Regression?\n\nThe error [did not appear in 6.0.0-rtm.21522.10](https://ideone.com/pPvIKG)\n\n### Known Workarounds\n\nThere is no error if the XmlReader object is created with a `StringReader` instead:\n```csharp\nusing System.Xml;\n\nstring data = \"\u003c?xml version=\\\"1.0\\xbf\\\"?\u003e\";\n\ntry\n{\n    using (var xml = XmlReader.Create(new StringReader(data)))\n    {\n        while (xml.Read()) { }\n    }\n}\ncatch (XmlException) { }\n```\n\n### Configuration\n\nI used the Docker image `mcr.microsoft.com/dotnet/sdk:8.0`.\n\ndotnet info:\n```shell\ndotnet --info\n.NET SDK:\n Version:           8.0.406\n Commit:            73c77e847d\n Workload version:  8.0.400-manifests.f7661779\n MSBuild version:   17.11.22+17752cebd\n\nRuntime Environment:\n OS Name:     debian\n OS Version:  12\n OS Platform: Linux\n RID:         linux-x64\n Base Path:   /usr/share/dotnet/sdk/8.0.406/\n\n.NET workloads installed:\nConfigured to use loose manifests when installing new manifests.\nThere are no installed workloads to display.\n\nHost:\n  Version:      8.0.13\n  Architecture: x64\n  Commit:       eba546b0f0\n\n.NET SDKs installed:\n  8.0.406 [/usr/share/dotnet/sdk]\n\n.NET runtimes installed:\n  Microsoft.AspNetCore.App 8.0.13 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 8.0.13 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\n```\n\n### Other information\n\n```\nFound by Linux Verification Center (linuxtesting.org) with AFL++ and SharpFuzz.\nReporter: Valery Korolyov (v.korolyov@gardatech.ru)\nOrganization: Garda Technologies (info@gardatech.ru)\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoI9org==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6gj2iu",
                                           "createdAt":  "2025-03-03T09:29:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-03T09:29:10Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Undocumented ArgumentOutOfRangeException in XmlReader created from MemoryStream",
        "labels":  [
                       "area-System.Xml",
                       "help wanted",
                       "regression-from-last-release"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114555",
        "createdAt":  "2025-04-11T18:55:39Z",
        "number":  114555,
        "author":  "akshaybheda",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-23T13:55:49Z",
        "body":  "### Description\n\nWhen XDocument.LoadAsync is used with RequestTimeout in Net 8, It doesn\u0027t work. The request doesn\u0027t get cancelled.\n\n\n\n### Reproduction Steps\n\nCreate a Net 8 Web app and configure request timeout middleware\n\n```\nbuilder.Services.AddRequestTimeouts(options =\u003e\n{\n    options.DefaultPolicy = new RequestTimeoutPolicy()\n    {\n        Timeout = TimeSpan.FromMilliseconds(500),\n        TimeoutStatusCode = StatusCodes.Status408RequestTimeout,\n    };\n});\n```\n\nand configure it\n\n```\napp.UseRouting();\napp.UseRequestTimeouts();\n```\n\nand create simple endpoints \n```\napp.MapPost(\"/xml\", async (HttpContext context) =\u003e\n{\n    var doc = await XDocument.LoadAsync(context.Request.Body, LoadOptions.None, context.RequestAborted);\n    return Results.Ok(\"XML loaded\");\n});\napp.MapPost(\"/test\", async (HttpContext context) =\u003e\n{\n    await Task.Delay(3000, context.RequestAborted);\n    return Results.Ok(\"Success\");\n});\n```\n\nHere if you call the xml endpoint, it will never send back 408 request timeout but same works for other endpoint\n\nAlso if i read the message through\n```\nstring xmlString = await stream.ReadToEndAsync(context.RequestAborted);\nvar doc = XDocument.Parse(xmlString);\n```\nthis works so there\u0027s something wrong with XDocument.LoadAsync\n\n### Expected behavior\n\nThe request should time out after the request cancellation middleware sends a cancellation requested for that request\n\n### Actual behavior\n\nHave attached steps to reproduce which should pretty much cover it\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nNet 8\nWindows 11 x64\nI don\u0027t think its specific to this configuration\n\n### Other information\n\nhttps://github.com/dotnet/runtime/blob/696c8b07e3dd5a37096d0c7e8104352f85f0cc0e/src/libraries/System.Private.Xml.Linq/src/System/Xml/Linq/XDocument.cs#L27",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuUvSgQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6mwuDO",
                                           "createdAt":  "2025-04-11T18:56:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-11T18:56:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m0kr3",
                                           "createdAt":  "2025-04-12T11:47:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "May be caused by XmlReader.ReadAsync etc. not having overloads that take a CancellationToken parameter.  Related \u003chttps://github.com/dotnet/runtime/issues/100239\u003e.",
                                           "updatedAt":  "2025-04-12T11:47:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nqSWY",
                                           "createdAt":  "2025-04-17T13:20:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akshaybheda",
                                           "body":  "@jeffhandley  Any idea if this could be picked up?",
                                           "updatedAt":  "2025-04-17T13:20:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65KuZU",
                                           "createdAt":  "2025-07-23T08:52:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "We are not planning any notable investments into the XML space, but I\u0027m leaving this in the Future milestone as it does seem like a reasonable scenario to keep open.",
                                           "updatedAt":  "2025-07-23T08:52:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65S9KB",
                                           "createdAt":  "2025-07-23T13:55:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "A workaround might be to define a wrapper Stream in which the constructor saves a CancellationToken and all async methods then forward that CancellationToken to the underlying Stream.  (If the caller also provides a CancellationToken that can be cancelled, then use CancellationTokenSource.CreateLinkedTokenSource for correctness.  That costs an allocation but should not happen in practice until the XmlReader API is changed.)  I think that would cause XmlReader and consequently XDocument to propagate the OperationCanceledException, either as-is or as the inner exception of an XmlException.  Then after you catch the exception from XDocument, check whether cancellation was requested.",
                                           "updatedAt":  "2025-07-23T13:55:49Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "XDocument.LoadAsync doesn\u0027t respect Cancellation token",
        "labels":  [
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115455",
        "createdAt":  "2025-05-11T22:42:36Z",
        "number":  115455,
        "author":  "tarekgh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-20T22:33:34Z",
        "body":  "The PR https://github.com/dotnet/runtime/pull/115415 added support for the Azure Linux image in CI. This image sets the default locale to POSIX, which .NET interprets as the Invariant culture. As a result, one of the `XslCompiledTransform` tests—specifically one that verifies date and time formatting in XSLT—fails because it doesn\u0027t handle culture-invariant scenarios correctly.\n\nRelevant test line:\n\nhttps://github.com/dotnet/runtime/blob/2c94e69db875a72511729de8855871a97d45050c/src/libraries/System.Private.Xml/tests/Xslt/XslCompiledTransformApi/XslCompiledTransform.cs#L3168\n\nTo unblock the PR, we’ve temporarily disabled the test. This issue is now tracking the work to re-enable it after updating the test to be culture-agnostic. To do so, the test logic updated accordingly. It will be good consider https://github.com/dotnet/runtime/issues/93189 when doing so. \n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqxS9Rw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6rFK8w",
                                           "createdAt":  "2025-05-11T22:44:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-11T22:44:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rFL1H",
                                           "createdAt":  "2025-05-11T22:49:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "https://github.com/dotnet/runtime/issues/93189",
                                           "updatedAt":  "2025-05-11T22:49:29Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Track enable XslCompiledTransform Date/Time XSL test",
        "labels":  [
                       "area-System.Xml",
                       "disabled-test"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116587",
        "createdAt":  "2025-06-12T14:31:45Z",
        "number":  116587,
        "author":  "lilinus",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEUg5g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2025-06-12T15:32:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "disgyze",
                                            "createdAt":  "2025-06-19T21:22:07Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-23T06:29:23Z",
        "body":  "### Background and motivation\n\nThe abstract `XmlReader` class has been around since the beginning of .NET, and it is foundational to System.Xml.Linq among others.\n\nOne problem is that all async methods on `XmlReader` is missing `CancellationToken` parameters. For example, this causes the cancellation token used in `XDocument.LoadAsync` to not be respected (#114555).\n\nThe new methods could also have `ValueTask` return types, but I opted for regular `Task`s in this proposal for simplicity.\n\nThe `System.Xml` namespace has many synchronous methods that are missing asynchronous counterparts, but they are not considered in this proposal.\n\n### API Proposal\n\n```diff\nnamespace System.Xml\npublic class XmlReader\n{\n    public virtual System.Threading.Tasks.Task\u003cstring\u003e GetValueAsync();\n+   public virtual System.Threading.Tasks.Task\u003cstring\u003e GetValueAsync(CancellationToken cancellationToken);\n    public virtual System.Threading.Tasks.Task\u003cbool\u003e ReadAsync();\n+   public virtual System.Threading.Tasks.Task\u003cbool\u003e ReadAsync(CancellationToken cancellationToken);\n    public virtual System.Threading.Tasks.Task\u003cobject\u003e ReadContentAsAsync(Type returnType, System.Xml.IXmlNamespaceResolver? namespaceResolver);\n+   public virtual System.Threading.Tasks.Task\u003cobject\u003e ReadContentAsAsync(Type returnType, System.Xml.IXmlNamespaceResolver? namespaceResolver, CancellationToken cancellationToken);\n    public virtual System.Threading.Tasks.Task\u003cint\u003e ReadContentAsBase64Async(byte[] buffer, int index, int count);\n+   public virtual System.Threading.Tasks.Task\u003cint\u003e ReadContentAsBase64Async(byte[] buffer, int index, int count, CancellationToken cancellationToken);\n    public virtual System.Threading.Tasks.Task\u003cint\u003e ReadContentAsBinHexAsync(byte[] buffer, int index, int count);\n+   public virtual System.Threading.Tasks.Task\u003cint\u003e ReadContentAsBinHexAsync(byte[] buffer, int index, int count, CancellationToken cancellationToken);\n    public virtual System.Threading.Tasks.Task\u003cobject\u003e ReadContentAsObjectAsync();\n+   public virtual System.Threading.Tasks.Task\u003cobject\u003e ReadContentAsObjectAsync(CancellationToken cancellationToken);\n    public virtual System.Threading.Tasks.Task\u003cstring\u003e ReadContentAsStringAsync();\n+   public virtual System.Threading.Tasks.Task\u003cstring\u003e ReadContentAsStringAsync(CancellationToken cancellationToken);\n    public virtual System.Threading.Tasks.Task\u003cobject\u003e ReadElementContentAsAsync(Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);\n+   public virtual System.Threading.Tasks.Task\u003cobject\u003e ReadElementContentAsAsync(Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver, CancellationToken cancellationToken);\n    public virtual System.Threading.Tasks.Task\u003cint\u003e ReadElementContentAsBase64Async(byte[] buffer, int index, int count);\n+   public virtual System.Threading.Tasks.Task\u003cint\u003e ReadElementContentAsBase64Async(byte[] buffer, int index, int count, CancellationToken cancellationToken);\n    public virtual System.Threading.Tasks.Task\u003cint\u003e ReadElementContentAsBinHexAsync(byte[] buffer, int index, int count);\n+   public virtual System.Threading.Tasks.Task\u003cint\u003e ReadElementContentAsBinHexAsync(byte[] buffer, int index, int count, CancellationToken cancellationToken);\n    public virtual System.Threading.Tasks.Task\u003cobject\u003e ReadElementContentAsObjectAsync();\n+   public virtual System.Threading.Tasks.Task\u003cobject\u003e ReadElementContentAsObjectAsync(CancellationToken cancellationToken);\n    public virtual System.Threading.Tasks.Task\u003cstring\u003e ReadElementContentAsStringAsync();\n+   public virtual System.Threading.Tasks.Task\u003cstring\u003e ReadElementContentAsStringAsync(CancellationToken cancellationToken);\n    public virtual System.Threading.Tasks.Task\u003cstring\u003e ReadInnerXmlAsync();\n+   public virtual System.Threading.Tasks.Task\u003cstring\u003e ReadInnerXmlAsync(CancellationToken cancellationToken);\n    public virtual System.Threading.Tasks.Task\u003cstring\u003e ReadOuterXmlAsync();\n+   public virtual System.Threading.Tasks.Task\u003cstring\u003e ReadOuterXmlAsync(CancellationToken cancellationToken);\n    public virtual System.Threading.Tasks.Task\u003cint\u003e ReadValueChunkAsync(char[] buffer, int index, int count);\n+   public virtual System.Threading.Tasks.Task\u003cint\u003e ReadValueChunkAsync(char[] buffer, int index, int count, CancellationToken cancellationToken);\n    public virtual System.Threading.Tasks.Task SkipAsync();\n+   public virtual System.Threading.Tasks.Task SkipAsync(CancellationToken cancellationToken);\n}\n```\n\n### API Usage\n\n```csharp\n// Fancy the value\nvar c = new MyFancyCollection\u003cint\u003e();\nc.Fancy(42);\n\n// Getting the values out\nforeach (var v in c)\n    Console.WriteLine(v);\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nDefault implementation of virtual methpos `ReadAsync` and `GetValueAsync` simply throws `NotImplementedException`, kind of like \"optional\" abstract methods I intepret it like.\n\nAll async-supporting, built-in classes deriving from `XmlReader` (i.e. `XmlTextReader` etc.) should have the overrides for these new methods added as part of this change.\n\nBut it might be unclear how this change would affect custom subclasses for XmlReader that for example would override `ReadAsync()` but not `ReadAsync(CancellationToken)`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtwLeww==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6w2g82",
                                           "createdAt":  "2025-06-12T14:32:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-threading-tasks\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-12T14:32:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63At7D",
                                           "createdAt":  "2025-07-14T17:40:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-14T17:40:22Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: CancellationToken parameters on async XmlReader methods",
        "labels":  [
                       "api-suggestion",
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118556",
        "createdAt":  "2025-08-09T16:31:09Z",
        "number":  118556,
        "author":  "StephenMolloy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-13T09:32:11Z",
        "body":  "Copied from #50526, since this issue references both Serialization and Xml APIs. This copy can be used to track the Xml API.\n\n---\n\nAs part of https://github.com/dotnet/runtime/issues/47228 i am running an analyzer to detect APIs throwing PNSE but not annotated with Obsolete/SupportedOSPlatform/UnsupportedOSPlatform attributes, we need to annotate them so that developers get warnings when they use them unexpectedly\n\nFor now, I have results only cross-platform builds, analysis of targeted builds are coming soon where more APIs could be detected\n\nAPI | Comment | Suggestion | Location \n-- | -- | -- | --\n~~\u0027XmlObjectSerializerReadContextComplex.ResolveDataContractTypeInSharedTypeMode(string,   string, out Assembly)\u0027~~ | unconditionally throws on all platforms | add [Obsolete] | libraries\\System.Private.DataContractSerialization\\src\\System\\Runtime\\Serialization\\XmlObjectSerializerReadContextComplex.cs(143,13)\n~~\u0027XsdDataContractExporter.Schemas.get\u0027~~ | unconditionally throws on all platforms | add [Obsolete] | libraries\\System.Private.DataContractSerialization\\src\\System\\Runtime\\Serialization\\XsdDataContractExporter.cs(38,17)\n~~\u0027XsdDataContractExporter.DataContractSet.get\u0027~~ | unconditionally throws on all platforms | add [Obsolete] | libraries\\System.Private.DataContractSerialization\\src\\System\\Runtime\\Serialization\\XsdDataContractExporter.cs(59,17)\n~~\u0027XmlDictionaryReader.CreateMtomReader(Stream,   Encoding[], string?, XmlDictionaryReaderQuotas, int,   OnXmlDictionaryReaderClose?)\u0027~~ | unconditionally throws on all platforms | add [Obsolete] | libraries\\System.Private.DataContractSerialization\\src\\System\\Xml\\XmlDictionaryReader.cs(153,13)\n~~\u0027XmlDictionaryReader.CreateMtomReader(byte[],   int, int, Encoding[], string?, XmlDictionaryReaderQuotas, int,   OnXmlDictionaryReaderClose?)\u0027~~ | unconditionally   throws on all platforms | add [Obsolete] | libraries\\System.Private.DataContractSerialization\\src\\System\\Xml\\XmlDictionaryReader.cs(177,13)\n~~\u0027XmlDictionaryWriter.CreateMtomWriter(Stream,   Encoding, int, string, string?, string?, bool, bool)\u0027~~ | unconditionally   throws on all platforms | add [Obsolete] | libraries\\System.Private.DataContractSerialization\\src\\System\\Xml\\XmlDictionaryWriter.cs(68,13)\n\u0027XmlCollation.CreateSortKey(string)\u0027 | Unsupported on Unux (AnyOS than windows) | make   XmlCollation.UpperFirst windows only | libraries\\System.Private.Xml\\src\\System\\Xml\\Xsl\\Runtime\\XmlCollation.Unix.cs(24,17)\n\nNote: We are suggesting adding [Obsolete] for the APIs only supported in .Net framework but not supported in .NetCore, with the corresponding Message, DiagnosticId, and UrlFormat https://github.com/dotnet/runtime/blob/cecc76a29a8b6c1fca181a38f076b4d949081746/src/libraries/System.Net.Requests/src/System/Net/AuthenticationManager.cs#L17 You can claim the next available DiagnosticId from Obsoletions.cs .\n\ncc @jeffhandley @terrajobst @GrabYourPitchforks",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvbfeVw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc69D2h3",
                                           "createdAt":  "2025-08-09T16:31:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-09T16:31:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69t95X",
                                           "createdAt":  "2025-08-13T09:25:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "It looks like XmlCollation.UpperFirst is reachable via the XSLT 2.0 `xsl:sort/@collation` and `@default-collation` attributes, if the value is a URI that starts with `http://collations.microsoft.com` and has a query parameter `UPPERFIRST=TRUE` (case-insensitive). However:\n\n* The XSLT implementation in .NET generally doesn\u0027t support XSLT 2.0; there is some code within `#if XSLT2`, but that symbol is not defined.\n* The W3C XSLT 2.0 specification does not mention the Microsoft-specific `http://collations.microsoft.com` URI.  In \u003chttps://www.w3.org/TR/2017/REC-xpath-functions-31-20170321/#uca-collations\u003e, there is instead a different URI `http://www.w3.org/2013/collation/UCA` with a different query parameter `caseFirst=upper`.\n\nThe `xsl:sort/@collation` attribute is not documented at \u003chttps://learn.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms256196(v=vs.100)\u003e either.  I think Microsoft doesn\u0027t have XSLT documentation that would need to be updated to advise users not to attempt UpperFirst collations on non-Windows operating systems.\n\nAFAICT, the `xsl:sort/@case-order` attribute is not affected.  That is translated to XmlCaseOrder.UpperFirst, which is portably implemented in `src/libraries/System.Private.Xml/src/System/Xml/XPath/Internal/CompiledXPathExpr.cs`.",
                                           "updatedAt":  "2025-08-13T09:32:11Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Annotate unsupported APIs in Serialization",
        "labels":  [
                       "area-System.Xml"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119746",
        "createdAt":  "2025-09-16T06:42:41Z",
        "number":  119746,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T23:04:49Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1149008\nBuild error leg or test failing: System.Xml.CharCheckingReaderTests.CharCheckingReaderTest.RunTests\nPull request: https://github.com/dotnet/runtime/pull/119599\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": [\"System.Xml.CharCheckingReaderTests\",\"OutOfMemoryException\"],\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149008\r\n**Error message validated:** `[System.Xml.CharCheckingReaderTests OutOfMemoryException`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 9/16/2025 6:43:18 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1149020](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149020)|dotnet/runtime|[System.Xml.CharCheckingReaderTests.CharCheckingReaderTest.RunTests](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149020\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31736476\u0026resultId=198778)|dotnet/runtime#119739|\r\n|[1149008](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149008)|dotnet/runtime|[System.Xml.CharCheckingReaderTests.CharCheckingReaderTest.RunTests](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149008\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31735162\u0026resultId=197169)|dotnet/runtime#119599|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|2|2|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxJvY1w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7Ec4Fm",
                                           "createdAt":  "2025-09-16T06:43:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "```\n  Starting:    System.Private.Xml.Tests (parallel test collections = on [4 threads], stop on fail = off)\n    System.Xml.CharCheckingReaderTests.CharCheckingReaderTest.RunTests(testCase: ReadBinHex runs into an Overflow) [FAIL]\n      System.OutOfMemoryException : Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.\n      Stack Trace:\n        /_/src/libraries/System.Private.CoreLib/src/System/String.cs(316,0): at System.String.Ctor(ReadOnlySpan`1 value)\n        /_/src/libraries/System.Private.CoreLib/src/System/Span.cs(382,0): at System.Span`1.ToString()\n        /_/src/libraries/System.Private.CoreLib/src/System/String.Manipulation.cs(544,0): at System.String.FormatHelper(IFormatProvider provider, String format, ReadOnlySpan`1 args)\n        /_/src/libraries/System.Private.CoreLib/src/System/String.Manipulation.cs(492,0): at System.String.Format(String format, ReadOnlySpan`1 args)\n        /_/src/libraries/System.Private.Xml/src/System/Xml/XmlException.cs(202,0): at System.Xml.XmlException.CreateMessage(String res, String[] args, Int32 lineNumber, Int32 linePosition)\n        /_/src/libraries/System.Private.Xml/src/System/Xml/XmlException.cs(167,0): at System.Xml.XmlException..ctor(String res, String[] args, Exception innerException, Int32 lineNumber, Int32 linePosition, String sourceUri)\n        /_/src/libraries/System.Private.Xml/src/System/Xml/XmlException.cs(122,0): at System.Xml.XmlException..ctor(String res, String arg)\n        /_/src/libraries/System.Private.Xml/src/System/Xml/BinHexDecoder.cs(165,0): at System.Xml.BinHexDecoder.Decode(ReadOnlySpan`1 chars, Span`1 bytes, Boolean\u0026 hasHalfByteCached, Byte\u0026 cachedHalfByte, Int32\u0026 charsDecoded, Int32\u0026 bytesDecoded)\n        /_/src/libraries/System.Private.Xml/src/System/Xml/BinHexDecoder.cs(74,0): at System.Xml.BinHexDecoder.Decode(String str, Int32 startPos, Int32 len)\n        /_/src/libraries/System.Private.Xml/src/System/Xml/Core/ReadContentAsBinaryHelper.cs(367,0): at System.Xml.ReadContentAsBinaryHelper.ReadContentAsBinary(Byte[] buffer, Int32 index, Int32 count)\n        /_/src/libraries/System.Private.Xml/src/System/Xml/Core/ReadContentAsBinaryHelper.cs(394,0): at System.Xml.ReadContentAsBinaryHelper.ReadElementContentAsBinary(Byte[] buffer, Int32 index, Int32 count)\n        /_/src/libraries/System.Private.Xml/src/System/Xml/Core/ReadContentAsBinaryHelper.cs(232,0): at System.Xml.ReadContentAsBinaryHelper.ReadElementContentAsBinHex(Byte[] buffer, Int32 index, Int32 count)\n        /_/src/libraries/System.Private.Xml/src/System/Xml/Core/XmlCharCheckingReader.cs(567,0): at System.Xml.XmlCharCheckingReader.ReadElementContentAsBinHex(Byte[] buffer, Int32 index, Int32 count)\n        /_/src/libraries/System.Private.Xml/tests/XmlReaderLib/CDataReader.cs(822,0): at System.Xml.Tests.CDataReader.ReadElementContentAsBinHex(Byte[] array, Int32 offset, Int32 len)\n        /_/src/libraries/System.Private.Xml/tests/XmlReaderLib/ReadBinHex.cs(970,0): at System.Xml.Tests.TCReadElementContentAsBinHex.TestReadBinHex_105376()\n        /_/src/libraries/Common/tests/System/Xml/ModuleCore/cvariation.cs(76,0): at OLEDB.Test.ModuleCore.CVariation.Execute()\n        /_/src/libraries/Common/tests/System/Xml/ModuleCore/ctestcase.cs(131,0): at OLEDB.Test.ModuleCore.CTestCase.\u003c\u003ec__DisplayClass7_1.\u003cTestCases\u003eb__0()\n        /_/src/libraries/Common/tests/System/Xml/ModuleCore/XunitTestCase.cs(33,0): at OLEDB.Test.ModuleCore.XunitTestCase.Run()\n```",
                                           "updatedAt":  "2025-09-16T06:43:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EdC_N",
                                           "createdAt":  "2025-09-16T06:50:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This is failing on other PRs as well (e.g. https://github.com/dotnet/runtime/pull/119739/), so it does not appear to be issue introduced by https://github.com/dotnet/runtime/pull/119599",
                                           "updatedAt":  "2025-09-16T06:50:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Em9jX",
                                           "createdAt":  "2025-09-16T12:35:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-16T12:35:43Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "System.Xml.CharCheckingReaderTests fails with OutOfMemoryException",
        "labels":  [
                       "area-System.Xml",
                       "blocking-clean-ci",
                       "untriaged",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119855",
        "createdAt":  "2025-09-18T18:02:46Z",
        "number":  119855,
        "author":  "davidmullin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:28:37Z",
        "body":  "### Description\n\nWhen generating WSDL (using CoreWCF), if my class structure is sufficiently complex, the schema generator apparently gives up and generates a complextType entry like:\n\n`\u003cxs:complexType name=\"MyClassOf_x007B_0_x007D__x007B__x0023__x007D_\"\u003e`\n\nThis is in addition to entries for MyClassOfString and MyClassOfInt.  If my class contains a generic property, then it errors when generating the properties (not surprising, since the generic type is \"_x007B_0_x007D__x007B__x0023__x007D_\").\n\nSimplified version of my class:\n\n```\n[DataContract]\npublic class MyClass\u003cT\u003e : BaseClass\n{\n\t[DataMember]\n\tpublic T Value { get; set;}\n}\n```\n\nI have tried with both the current version of CoreWCF (1.8.0), and an older version (1.5.1) to no effect.  However, if I try it with .Net 8 (and CoreWCF 1.5.1) it does not do this.\n\nFull call stack of the exception at the end.\n\nAn ExceptionDetail, likely created by IncludeExceptionDetailInFaults=true, whose value is:\nSystem.InvalidOperationException: An exception was thrown in a call to a WSDL export extension: CoreWCF.Description.DataContractSerializerOperationBehavior\\r\\n contract: http://tempuri.org/:IClientModelService \n   ----\u003e System.Xml.Schema.XmlSchemaException: Invalid \u0027type\u0027 attribute: \u0027Name cannot begin with the \u0027{\u0027 character, hexadecimal value 0x7B.\u0027. \n   ----\u003e System.Xml.XmlException: Name cannot begin with the \u0027{\u0027 character, hexadecimal value 0x7B.\n   at System.Xml.XmlConvert.VerifyNCName(String name, ExceptionType exceptionType)\n   at System.Xml.XmlQualifiedName.Verify()\n   at System.Xml.Schema.Preprocessor.ValidateQNameAttribute(XmlSchemaObject xso, String attributeName, XmlQualifiedName value)\n   --- End of inner ExceptionDetail stack trace ---\n   at System.Xml.Schema.XmlSchemaSet.InternalValidationCallback(Object sender, ValidationEventArgs e)\n   at System.Xml.Schema.Preprocessor.ValidateQNameAttribute(XmlSchemaObject xso, String attributeName, XmlQualifiedName value)\n   at System.Xml.Schema.Preprocessor.PreprocessElementContent(XmlSchemaElement element)\n   at System.Xml.Schema.Preprocessor.PreprocessLocalElement(XmlSchemaElement element)\n   at System.Xml.Schema.Preprocessor.PreprocessParticle(XmlSchemaParticle particle)\n   at System.Xml.Schema.Preprocessor.PreprocessComplexType(XmlSchemaComplexType complexType, Boolean local)\n   at System.Xml.Schema.Preprocessor.Preprocess(XmlSchema schema, String targetNamespace, ArrayList imports)\n   at System.Xml.Schema.Preprocessor.Execute(XmlSchema schema, String targetNamespace, Boolean loadExternals)\n   at System.Xml.Schema.XmlSchemaSet.PreprocessSchema(XmlSchema\u0026 schema, String targetNamespace)\n   at System.Xml.Schema.XmlSchemaSet.Reprocess(XmlSchema schema)\n   at CoreWCF.Description.MessageContractExporter.Compile()\n   at CoreWCF.Description.DataContractSerializerMessageContractExporter.Compile()\n   at CoreWCF.Description.MessageContractExporter.ExportMessage(Int32 messageIndex, Object state)\n   at CoreWCF.Description.MessageContractExporter.ExportMessageContract()\n   at CoreWCF.Description.DataContractSerializerOperationBehavior.CoreWCF.Description.IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext contractContext)\n   at CoreWCF.Description.WsdlExporter.CallExtension(WsdlContractConversionContext contractContext, IWsdlExportExtension extension)\n   --- End of inner ExceptionDetail stack trace ---\n   at CoreWCF.Description.WsdlExporter.CallExtension(WsdlContractConversionContext contractContext, IWsdlExportExtension extension)\n   at CoreWCF.Description.WsdlExporter.CallExportContract(WsdlContractConversionContext contractContext)\n   at CoreWCF.Description.WsdlExporter.ExportContract(ContractDescription contract)\n   at CoreWCF.Description.WsdlExporter.ExportEndpoint(ServiceEndpoint endpoint, XmlQualifiedName wsdlServiceQName, BindingParameterCollection bindingParameters)\n   at CoreWCF.Description.WsdlExporter.ExportEndpoints(IEnumerable`1 endpoints, XmlQualifiedName wsdlServiceQName, BindingParameterCollection bindingParameters)\n   at CoreWCF.Description.ServiceMetadataBehavior.MetadataExtensionInitializer.GenerateMetadata()\n   at CoreWCF.Description.ServiceMetadataExtension.EnsureInitialized()\n   at CoreWCF.Description.ServiceMetadataExtension.get_Metadata()\n   at CoreWCF.Description.ServiceMetadataExtension.HttpGetImpl.InitializationData.InitializeFrom(ServiceMetadataExtension extension)\n   at CoreWCF.Description.ServiceMetadataExtension.HttpGetImpl.GetInitData()\n   at CoreWCF.Description.ServiceMetadataExtension.HttpGetImpl.TryHandleDocumentationRequestAsync(HttpContext requestContext)\n   at CoreWCF.Description.ServiceMetadataExtension.HttpGetImpl.ProcessHttpRequest(HttpContext requestContext)\n   at CoreWCF.Description.ServiceMetadataExtension.HttpGetImpl.HandleRequest(HttpContext httpContext)\n\n### Reproduction Steps\n\nI tried to produce a simple repro, but apparently it requires that the class hierarchy be sufficiently complex in order for it to go down this path.  My simple repro generated MyClassOfString and MyClassOfInt, but not MyClassOf_x007B_0_x007D__x007B__x0023__x007D_\n\n### Expected behavior\n\nI expect it to be able to generate the XML Schema without rendering a generic complexType\n\n### Actual behavior\n\nGenerates a generic complexType and, if that type contains a generic property, it raises an exception.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxX1n9w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7FfWf3",
                                           "createdAt":  "2025-09-19T18:28:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-19T18:28:37Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Generic complexType generated when generating XML Schema",
        "labels":  [
                       "area-System.Xml",
                       "untriaged"
                   ]
    }
]
