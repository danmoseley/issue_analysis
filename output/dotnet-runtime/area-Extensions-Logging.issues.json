[
    {
        "url":  "https://github.com/dotnet/runtime/issues/35995",
        "createdAt":  "2016-12-13T16:04:45Z",
        "number":  35995,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCymSNQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ans-ashkan",
                                            "createdAt":  "2019-01-29T09:43:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viktor-nikolaev",
                                            "createdAt":  "2019-06-13T17:36:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rcollina",
                                            "createdAt":  "2019-06-17T06:38:55Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "rcollina",
                                            "createdAt":  "2019-06-22T15:41:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SpiridonovAlexMoeDelo",
                                            "createdAt":  "2019-08-07T13:47:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GetoXs",
                                            "createdAt":  "2019-09-11T12:13:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "304NotModified",
                                            "createdAt":  "2019-10-02T23:05:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kichalla",
                                            "createdAt":  "2019-10-24T17:27:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kyrylomyr",
                                            "createdAt":  "2019-11-05T12:30:34Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "304NotModified",
                                            "createdAt":  "2020-02-20T19:24:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thomaswurtz",
                                            "createdAt":  "2020-04-11T19:12:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gitfool",
                                            "createdAt":  "2020-04-19T03:37:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jjxtra",
                                            "createdAt":  "2020-04-19T22:44:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fnosse",
                                            "createdAt":  "2020-04-27T08:47:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mynkow",
                                            "createdAt":  "2020-05-22T16:51:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tzographos",
                                            "createdAt":  "2020-05-24T10:35:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tpeter1985",
                                            "createdAt":  "2020-06-10T10:37:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rasidr",
                                            "createdAt":  "2020-06-18T11:25:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "saithis",
                                            "createdAt":  "2020-08-17T11:57:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nquintana",
                                            "createdAt":  "2020-10-15T09:51:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "swlasse",
                                            "createdAt":  "2020-11-17T12:00:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "scuba6388",
                                            "createdAt":  "2020-11-17T15:32:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "msallin",
                                            "createdAt":  "2021-01-05T10:19:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jabak",
                                            "createdAt":  "2021-01-22T12:11:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cfbao",
                                            "createdAt":  "2021-02-08T03:05:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gauravjantwal",
                                            "createdAt":  "2021-03-10T10:16:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MrWolfZ",
                                            "createdAt":  "2021-05-22T18:37:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eveneveneven",
                                            "createdAt":  "2021-05-31T12:56:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wjrogers",
                                            "createdAt":  "2021-10-21T14:31:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GREsau",
                                            "createdAt":  "2021-11-17T15:31:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mingazhev",
                                            "createdAt":  "2021-12-21T07:35:51Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "mingazhev",
                                            "createdAt":  "2021-12-21T07:35:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thomaswr",
                                            "createdAt":  "2022-04-20T15:12:28Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "Gladskih",
                                            "createdAt":  "2022-09-05T12:02:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VoX",
                                            "createdAt":  "2022-09-20T00:08:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PoovenB",
                                            "createdAt":  "2022-10-13T08:49:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elubarsky-hs",
                                            "createdAt":  "2022-10-25T04:40:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "arical",
                                            "createdAt":  "2022-10-31T21:04:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "teggno",
                                            "createdAt":  "2022-11-25T16:40:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tsu1980",
                                            "createdAt":  "2022-12-29T06:49:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tarmil",
                                            "createdAt":  "2023-02-02T11:31:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cyril265",
                                            "createdAt":  "2023-02-02T13:27:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "petarpetrovt",
                                            "createdAt":  "2023-02-02T16:30:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ascott18",
                                            "createdAt":  "2023-02-02T22:10:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rhys-wd",
                                            "createdAt":  "2023-03-13T09:18:03Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "rhys-wd",
                                            "createdAt":  "2023-03-13T09:18:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lexxandr",
                                            "createdAt":  "2023-03-16T15:34:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pkong-ds",
                                            "createdAt":  "2023-05-09T06:46:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2023-07-30T12:11:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ZvonimirMatic",
                                            "createdAt":  "2023-09-14T08:44:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "delasallejean",
                                            "createdAt":  "2023-10-24T09:37:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BoundedChenn31",
                                            "createdAt":  "2023-10-28T11:58:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "achikhv",
                                            "createdAt":  "2023-10-31T09:25:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Viajaz",
                                            "createdAt":  "2023-11-24T07:11:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "krsoltys",
                                            "createdAt":  "2024-01-26T10:10:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "esteewhy",
                                            "createdAt":  "2024-02-16T11:26:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "anreton",
                                            "createdAt":  "2024-02-26T06:10:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "brandonryan",
                                            "createdAt":  "2024-03-04T20:36:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zlangbert",
                                            "createdAt":  "2024-04-20T19:56:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pritishnayak",
                                            "createdAt":  "2024-05-10T03:31:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tobias-tengler",
                                            "createdAt":  "2024-06-28T08:44:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jswolf19",
                                            "createdAt":  "2024-07-23T09:55:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alrz",
                                            "createdAt":  "2024-08-02T16:43:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dreamescaper",
                                            "createdAt":  "2024-09-09T10:51:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vassourita",
                                            "createdAt":  "2024-10-07T22:26:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alienwareone",
                                            "createdAt":  "2024-10-09T15:31:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ilya-scale",
                                            "createdAt":  "2024-12-19T12:58:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Iron-E",
                                            "createdAt":  "2025-01-28T13:59:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tomasz-podolak",
                                            "createdAt":  "2025-03-03T12:41:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "patricksadowski",
                                            "createdAt":  "2025-03-28T10:08:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mastry",
                                            "createdAt":  "2025-05-03T12:41:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "meriturva",
                                            "createdAt":  "2025-07-19T02:41:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Athari",
                                            "createdAt":  "2025-07-23T05:21:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2025-08-14T17:18:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dvaembit",
                                            "createdAt":  "2025-09-18T22:26:04Z"
                                        }
                                    ],
                          "totalCount":  75
                      },
        "updatedAt":  "2024-03-19T21:27:29Z",
        "body":  "Am looking for some guidance here, or at least confirmation that I understand things right...\r\n\r\nCurrently, if I want to use the extension methods (e.g. `LogDebug`), it seems that in order to log some piece of structured data it must be referenced from the message - this seems problematic in several scenarios.\r\n\r\nFirst, when using a logging framework such as NLog, it is standard practice to leave the layout of the text message to NLog (user-configurable). Requiring me to embed all structured data in the message text hands off a fully-formed message to NLog, stripping it of one of it\u0027s main responsibilities (layouting).\r\n\r\nAlso, in many scenarios there\u0027s a lot of structured context that may be interesting to users in some cases, but that doesn\u0027t mean it\u0027s *always* interesting and should get included in the text of each and every message. This causes very large log messages with clutter and info nobody really wants (although people may still want the option of looking up these details in the structured data attached to the message).\r\n\r\nI understand that I don\u0027t have to use the extension methods and can roll my own, but I\u0027d like confirmation to the above, and also your opinion on this.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOH_NeFw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NjgzNjkwMw==",
                                           "createdAt":  "2016-12-13T19:28:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "herecydev",
                                           "body":  "\u003e First, when using a logging framework such as NLog, it is standard practice to leave the layout of the text message to NLog (user-configurable). Requiring me to embed all structured data in the message text hands off a fully-formed message to NLog, stripping it of one of it\u0027s main responsibilities (layouting).\r\n\r\nI would probably make a custom `ILogger`, as you\u0027re allowed to [give it any TState](https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.Abstractions/ILogger.cs#L22) and let that decide on the format (can be user-configurable), it can even enhance the messages with additional information (current time, machine name, etc) so that the caller doesn\u0027t need to supply it.\r\n\r\n\u003e Also, in many scenarios there\u0027s a lot of structured context that may be interesting to users in some cases, but that doesn\u0027t mean it\u0027s always interesting and should get included in the text of each and every message. This causes very large log messages with clutter and info nobody really wants (although people may still want the option of looking up these details in the structured data attached to the message).\r\n\r\nThis one\u0027s a little weird and I\u0027m not sure I totally get it. But I think once again, you can switch on the `LogLevel` within your custom logger and decide what\u0027s appropriate. With that said, surely the calling code has a much better understanding of verbosity than a downstream consumer. You should really use the `LogLevel` to filter out what\u0027s too noisy; a syslog driver will probably log everything whilst a console just information and above.\r\n\r\nI see it as the calling code provides as much meaningful data as it can, the logger\u0027s can optionally enhance that with additional data but ultimately filter that down based on the appropriate destination. Bearing in mind, we have technologies like Elastic Search to perform more advanced features.",
                                           "updatedAt":  "2016-12-13T19:28:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Njk3MjE4Nw==",
                                           "createdAt":  "2016-12-14T08:23:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEi6-Ow==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "snboisen",
                                                                               "createdAt":  "2017-10-24T11:14:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rcollina",
                                                                               "createdAt":  "2019-02-07T23:25:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "viktor-nikolaev",
                                                                               "createdAt":  "2019-06-13T17:39:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MrWolfZ",
                                                                               "createdAt":  "2021-05-22T18:37:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gladskih",
                                                                               "createdAt":  "2022-09-05T12:34:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dpogodaev",
                                                                               "createdAt":  "2022-12-15T09:22:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "esteewhy",
                                                                               "createdAt":  "2024-02-16T11:29:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dvaembit",
                                                                               "createdAt":  "2025-09-18T22:26:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e\u003eFirst, when using a logging framework such as NLog, it is standard practice to leave the layout of the text message to NLog (user-configurable). Requiring me to embed all structured data in the message text hands off a fully-formed message to NLog, stripping it of one of it\u0027s main responsibilities (layouting).\r\n\u003e I would probably make a custom ILogger, as you\u0027re allowed to give it any TState and let that decide on the format (can be user-configurable), it can even enhance the messages with additional information (current time, machine name, etc) so that the caller doesn\u0027t need to supply it.\r\n\r\nI\u0027m not sure that a custom logger is necessary - the provided Logger\u0027s Log method already accepts any TState and formatter... So this is definitely resolvable, it\u0027s just not compatible with the \"standard\" extension methods and requires implementing a layer for something that seems pretty basic/standard.\r\n\r\n\u003e This one\u0027s a little weird and I\u0027m not sure I totally get it. But I think once again, you can switch on the LogLevel within your custom logger and decide what\u0027s appropriate. \r\n\r\nThe issue isn\u0027t what log *events* should be logged - which is what LogLevel is about - but rather what extra information is included in the textual message that\u0027s emitted in the event.\r\n\r\n\u003e With that said, surely the calling code has a much better understanding of verbosity than a downstream consumer. You should really use the LogLevel to filter out what\u0027s too noisy; a syslog driver will probably log everything whilst a console just information and above.\r\n\r\nI don\u0027t think that\u0027s necessarily true... Coming from NLog, it\u0027s quite frequent for applications to log quite a thin textual message, but to include lots of contextual information with it. The calling code should *make available* the information, but whether the textual message needs to include it seems more like a user configuration choice. This allows you to search for log records (in a tool like Kibana) without making the message itself heavier. \r\n\r\nThe point is that there are two \"usage patterns\" for consuming logs. On the one hand, you want to be able to search/filter for logs - this is where the structured information is important. On the other hand, you want to be able to simply browse - read records line-by-line, say around a timestamp or some event - and at that point the message text (and its terseness!) is important. It seems the current approach leads to very heavy messages as every piece of information you *may* want to search on also needs to get included in the text.\r\n\r\n\u003e I see it as the calling code provides as much meaningful data as it can, the logger\u0027s can optionally enhance that with additional data but ultimately filter that down based on the appropriate destination. Bearing in mind, we have technologies like Elastic Search to perform more advanced features.\r\n\r\nI think that\u0027s different - enriching an application-provided event with generic information (thread/process id, machine name...) is very different from fields provided by the application itself. In this issue I\u0027m talking about the latter only.",
                                           "updatedAt":  "2016-12-14T08:23:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Njk5OTE5OQ==",
                                           "createdAt":  "2016-12-14T10:28:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "herecydev",
                                           "body":  "\u003e The calling code should make available the information, but whether the textual message needs to include it seems more like a user configuration choice.\r\n\r\nI\u0027ll preface this with I\u0027m not an expert, nor have I used NLog. Given the following scenario, where some command failed and you want to log the failure, the command that was used and the exception that was raised:\r\n\r\n```c#\r\ncatch(Exception ex) {\r\n  _logger.LogInformation(\"DB Command failed {0} {1}\", command, ex);\r\n}\r\n```\r\n\r\nYou could have a file logger that adds on the current date, formats the message with the parameters to produce something like: `\"14/12/2016 | DB Command failed | Select * from foo | foo does not exist\"`.\r\nYou could then equally have a logger that adds on the current time but drops the parameters for terseness: `\"9:20:16 | DB Command failed\"`\r\n\r\nDoes that satisfy the 2 \"ends of the spectrum\"? Or am I missing the use case? Also I don\u0027t think the DI/Logging libraries are meant to be prescriptive, could you use the [NLog extensions](https://github.com/NLog/NLog.Extensions.Logging) to have the behavior you\u0027re after working with the `ILogger` abstractions?",
                                           "updatedAt":  "2016-12-14T10:28:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NzAwODA3Nw==",
                                           "createdAt":  "2016-12-14T11:11:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Your example of prefacing the date is what I referred to earlier as \"generic information\" that can indeed be added by any threading package - this kind of info includes thread ID, hostname or anything else that doesn\u0027t need to come from the application. You\u0027re right that this case isn\u0027t an issue.\r\n\r\nThe kind of info I\u0027m talking about is stuff that only the application knows about. For example, an event may have info such as server IP, port, transaction ID, etc. These can\u0027t be added by NLog (or any other package), because only your application knows about them. On the other hand, it doesn\u0027t necessarily make sense to include them in the *text* of each and every log message we log. So we want the information to be available in case want to search for, say, all events we\u0027ve had with a certain server IP; on the other hand, shoving the server IP into each and every log text is unnecessary and makes logs harder to understand.\r\n\r\nIn NLog (and other logging packages), the application would log a text message, in addition to the bundle of structured data. The user\u0027s NLog configuration would *render* all this information: a user could decide to prefix every message with the current timestamp (generic info), but also with the server IP, the port, or any other info in the structured bundle.\r\n\r\nI hope I\u0027m making sense and that the use case is more or less clear...",
                                           "updatedAt":  "2016-12-14T11:11:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NzAxMTkxMw==",
                                           "createdAt":  "2016-12-14T11:32:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "herecydev",
                                           "body":  "I think so, you want the application to supply as much information to the logger as possible and for the logger to be configured to either be verbose/terse depending on the situation.\r\n\r\n\u003e You could have a file logger that adds on the current date, formats the message with the parameters to produce something like: \"14/12/2016 | DB Command failed | Select * from foo | foo does not exist\".\r\nYou could then equally have a logger that adds on the current time but drops the parameters for terseness: \"9:20:16 | DB Command failed\"\r\n\r\nWhy wouldn\u0027t this satisfy your requirements? You could have a syslog logger for the first example and a console logger for the latter? The formatting/discarding of information that can happen in the logger could easily be user-configurable (DI in some templates), this can even be done at a per-class level because we have `ILogger\u003cT\u003e`.",
                                           "updatedAt":  "2016-12-14T11:32:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NzAxODIxMA==",
                                           "createdAt":  "2016-12-14T12:07:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e I think so, you want the application to supply as much information to the logger as possible and for the logger to be configured to either be verbose/terse depending on the situation.\r\n\r\nRight, configured by the user.\r\n\r\n\u003e Why wouldn\u0027t this satisfy your requirements? You could have a syslog logger for the first example and a console logger for the latter? The formatting/discarding of information that can happen in the logger could easily be user-configurable (DI in some templates), this can even be done at a per-class level because we have ILogger\u003cT\u003e.\r\n\r\nBecause currently it seems that it\u0027s impossible to use the extension methods to pass structured information without *also* including it in the message text... The extension methods parse the message text, looking for named variables, and matching those to the params array. So when using the \"standard\" extension methods, all structured data must also be included in the message text.",
                                           "updatedAt":  "2016-12-14T12:07:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NzAyMzY4Mg==",
                                           "createdAt":  "2016-12-14T12:38:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "herecydev",
                                           "body":  "I\u0027m with you, I think it boils down to \"this works for most people\". The default extensions use the `FormattedLogValues` but I don\u0027t think that will work as the original message is private. So you wouldn\u0027t be able to selectively remove things. Would probably have to create another extension like `LogStructureInformation` that passes through the message format and the args. Then in combination with customer loggers or Nlog you should be able to go from there.\r\n\r\nI think if [this was public](https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.Abstractions/Internal/FormattedLogValues.cs#L21) you would be fine. The out the box loggers would continue to work and be simple for most scenarios, and you can add another logger to work with the format/information passed in as discussed above.",
                                           "updatedAt":  "2016-12-14T12:39:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Nzc2MDgyOQ==",
                                           "createdAt":  "2016-12-17T12:43:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Sorry for disappearing :)\r\n\r\nMaking `_originalMessage` accessible is a possible approach. Note that it\u0027s also possible to simply avoid the extension methods and call `Logger.Log()` directly, controlling exactly what state object is passed and how it\u0027s formatted.\r\n\r\nSo users aren\u0027t exactly *limited*, it\u0027s just that the default way of doing things is basically very inspired from Serilog, and doesn\u0027t really take into account other approaches such as NLog\u0027s.",
                                           "updatedAt":  "2016-12-17T12:43:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Nzc3MDEyMg==",
                                           "createdAt":  "2016-12-17T15:56:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCH1GEQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jabak",
                                                                               "createdAt":  "2021-01-22T12:13:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "lexxandr",
                                                                               "createdAt":  "2021-12-24T07:42:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "herecydev",
                                           "body":  "\u003e Note that it\u0027s also possible to simply avoid the extension methods and call Logger.Log() directly, controlling exactly what state object is passed and how it\u0027s formatted.\r\n\r\nIt is, but telling people not to use these nice, convenient extension `LogInformation`, `LogError` etc and instead use `Log(LogLevel.Information, 0, new FormattedLogValues(message, args), null, (m, e) =\u003e m.ToString())` is far from intuitive. It would be preferable to make `FormattedLogValues` have that public property and then people can start extending on it.",
                                           "updatedAt":  "2016-12-17T15:56:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Nzc3MDQwMg==",
                                           "createdAt":  "2016-12-17T16:02:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Looking at it again, I\u0027m not sure I understand how making this property public addresses this issue. If I understand correctly, all that would do would be to provide access to the original format string, the one with names in it. Also, it\u0027s not clear at what point users would be able to interact with this property: `FormattedLogValues` is created internally when `LogXXX` and immediately passed down to `Logger.Log`... Can you provide more detail on how this would work?",
                                           "updatedAt":  "2016-12-17T16:02:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Nzc3MTEzMQ==",
                                           "createdAt":  "2016-12-17T16:17:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "herecydev",
                                           "body":  "Because in your custom `ILogger` you would have access to: `\"DB Command failed {0} {1}` *and* `Select * from foo` and `foo does not exist`. You\u0027ve got everything you need to either log everything or strip some of the more verbose things out. I don\u0027t envisage users interacting with neither the `FormattedLogValues` or `Log(a, b, c, d, e)` directly. Just using the extensions and letting the different loggers do all the hard work.",
                                           "updatedAt":  "2016-12-17T16:18:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Nzc3MTg0NA==",
                                           "createdAt":  "2016-12-17T16:30:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1b0ww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JohnLBevan",
                                                                               "createdAt":  "2021-02-23T10:33:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cfbao",
                                                                               "createdAt":  "2021-05-09T03:36:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krispenner",
                                                                               "createdAt":  "2021-08-06T20:30:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "esteewhy",
                                                                               "createdAt":  "2024-02-16T11:34:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alienwareone",
                                                                               "createdAt":  "2024-10-09T15:39:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "roji",
                                           "body":  "I don\u0027t think that solves it... If you continue using the standard extension methods, you continue writing code like this:\r\n\r\n```c#\r\nlogger.LogDebug(eventId, exception, \"Executing: {Sql}\", sql, transactionId, someOtherInterestingBit);\r\n```\r\n\r\nYour custom `ILogger` indeeds get both the original string (`Executing: {Sql}`) and the processed string (`Executing: {0}`). `transactionId` and `someOtherInterestingBit` are there in the params object array, but there\u0027s nothing saying how to name them. The point is that  the extension methods depend on the formatter string to reference (i.e. name) all structural data.\r\n\r\nIn other words, the problem seems to be with the extension methods\u0027 API (which follows Serilog) and does not allow for structured data that\u0027s not referenced in the format string. An alternate API would simply allow passing in a Dictionary, which would represent the structured data. The formatter string would still contain named references to the Dictionary\u0027s keys (i.e. names), and integrate their corresponding values in the textual message. But nothing would prevent us from having *additional* key/value pairs in the Dictionary which *aren\u0027t* referenced in the format string.",
                                           "updatedAt":  "2016-12-17T16:37:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Nzc3NTg1Nw==",
                                           "createdAt":  "2016-12-17T17:40:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "herecydev",
                                           "body":  "That\u0027s correct, this was on the assumption that they were passed in the correct order and with the correct amount. Which probably holds true for most cases. An overloaded extension with a dictionary would be ideal though.",
                                           "updatedAt":  "2016-12-17T17:40:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NzgwODU1Mg==",
                                           "createdAt":  "2016-12-18T07:55:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCrq3fQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cfbao",
                                                                               "createdAt":  "2021-05-09T03:36:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gladskih",
                                                                               "createdAt":  "2022-09-05T12:54:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "roji",
                                           "body":  "@herecydev I don\u0027t think so... the point is that with the extension methods there *is no way* to name a structured parameter *without* referencing it from the format string... It\u0027s not a question of correct order - no matter how you implement your ILogger, with the extension methods you get a string with name references, and a nameless array of objects. The first objects in the array are named via the string - and also appear in the formatted text message - while the remaining ones are completely anonymous and therefore can\u0027t really be part of the structured data logged alongside the message.",
                                           "updatedAt":  "2016-12-18T07:55:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NzgxNDcwMw==",
                                           "createdAt":  "2016-12-18T10:52:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "herecydev",
                                           "body":  "This was assuming you were using this:\r\n```c#\r\ncatch(Exception ex) {\r\n  _logger.LogInformation(\"DB Command failed {0} {1}\", command, ex);\r\n}\r\n```\r\nwhere you aren\u0027t using named references. Otherwise if you need the named references, I only see the dictionary being the working solution.",
                                           "updatedAt":  "2016-12-18T10:52:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2ODIxNzQ2OQ==",
                                           "createdAt":  "2016-12-20T11:11:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "herecydev",
                                           "body":  "I actually think this is possible: See [this line](https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.Abstractions/Internal/FormattedLogValues.cs#L45) shows that you can get the `OriginalFormat` out of the values collection. Then using  [these lines](https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.Abstractions/Internal/FormattedLogValues.cs#L65-L71) you can enumerate through the named values thanks to [this class](https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs). Note that you have to explicitly ask for the `Count - 1`? to get the `OriginalFormat` out.\r\n\r\nIt does therefore look like with the existing extension methods, and your own custom loggers, you have the potential, through DI\u0027ing the templates, to do what you\u0027re asking.",
                                           "updatedAt":  "2016-12-20T11:15:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2ODIxODY4Ng==",
                                           "createdAt":  "2016-12-20T11:18:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "I might not be explaining myself clearly...\r\n\r\nMy problem is the very fact that your string must contain named reference to the positional parameter list (which, by their nature, are otherwise unnamed). What you\u0027re showing allows me to access values that have been named by the string. What I\u0027d like to do is include structured values - with names I choose - *without* referencing them in the format string. That seems impossible to do without adding an overload that accepts a Dictionary.",
                                           "updatedAt":  "2016-12-20T11:18:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2ODIyMDM1NA==",
                                           "createdAt":  "2016-12-20T11:27:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "herecydev",
                                           "body":  "If I understand what you\u0027re after then no it won\u0027t be possible at all. You can\u0027t \"know\" what the parameters are at the logger without either naming them in the format string (and thereby deducing through order), or passing KVPs through.",
                                           "updatedAt":  "2016-12-20T11:27:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2ODIyMDc2Mg==",
                                           "createdAt":  "2016-12-20T11:29:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1KRMQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cfbao",
                                                                               "createdAt":  "2021-02-08T03:16:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vassourita",
                                                                               "createdAt":  "2024-10-07T21:58:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "roji",
                                           "body":  "Yeah, that\u0027s my understanding as well. I opened this issue to propose that Microsoft.Extensions.Logging  provide a solution for that, e.g. via overloads that accept that accept a Dictionary.",
                                           "updatedAt":  "2016-12-20T11:29:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2ODIyMDg3OQ==",
                                           "createdAt":  "2016-12-20T11:30:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "In other words, if the team feels like it\u0027s something you need to have, I could submit a PR.",
                                           "updatedAt":  "2016-12-20T11:30:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2ODIyMjUxNw==",
                                           "createdAt":  "2016-12-20T11:39:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "herecydev",
                                           "body":  "Cool... we got there :) It sounds like an interesting addition.",
                                           "updatedAt":  "2016-12-20T11:39:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2OTE1MDM4Nw==",
                                           "createdAt":  "2016-12-26T02:34:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1KRag==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "abhisheksaraiya",
                                                                               "createdAt":  "2019-04-10T17:57:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thegeekyglass",
                                                                               "createdAt":  "2019-08-15T10:30:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nquintana",
                                                                               "createdAt":  "2020-10-15T09:52:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jabak",
                                                                               "createdAt":  "2021-01-22T12:18:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Gladskih",
                                                                               "createdAt":  "2022-09-05T12:58:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vassourita",
                                                                               "createdAt":  "2024-10-07T21:59:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "Ralstlin",
                                           "body":  "@roji I come here looking for exactly the same thing, I was trying to create a loggerProvider that use MongoDB driver to log structured data into mongo, sadly I found the same as you, logging params without naming them in the message like:  `_logger.LogTrace(\"Creating new user\", UserData, SystemData, WhatEver);` will not display these params in the Ilogger.Log because LogValuesFormatter.GetValue() https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs get only objects from _valueNames that is a list of brackets variables in the formatted string.  For that reason I implemented my own extended versions:\r\n\r\n```c#\r\n    public class FormattedLogValuesExposed : FormattedLogValues\r\n    {\r\n        public readonly object[] Parameters;\r\n        public FormattedLogValuesExposed(string format, params KeyValuePair\u003cstring, object\u003e[] values) :  base(format, values.Select(a =\u003e a.Value)\r\n        {\r\n            Parameters = values;\r\n        }\r\n    }\r\n```\r\n\r\nThen I only need to use it like: \r\n\r\n```c#        \r\npublic static void LogTraceAsync(this ILogger logger, string message, Exception exception, EventId eventId, params KeyValuePair\u003cstring, object\u003e[] args)\r\n        {\r\n            Contract.Requires\u003cArgumentNullException\u003e(logger == null, \"Logger cannot be null.\");\r\n\r\n            Task.Run(() =\u003e\r\n            {\r\n                logger.Log\u003cFormattedLogValuesExposed\u003e(\r\n                    LogLevel.Trace,\r\n                    eventId,\r\n                    new FormattedLogValuesExposed(message, args),\r\n                    exception,\r\n                    (state,ex) =\u003e state.ToString() );\r\n\r\n            }).ConfigureAwait(false);\r\n        }\r\n```\r\nand on my Ilogger implementation I just do:\r\n\r\n```c#\r\n\r\n        public void Log\u003cTState\u003e(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func\u003cTState, Exception, string\u003e formatter)\r\n        {\r\n            Contract.Requires\u003cArgumentNullException\u003e(formatter == null, $\"Formatter: {nameof(formatter)} cannot be null\");\r\n            if (IsEnabled(logLevel))\r\n            {\r\n                var message = formatter(state, exception);\r\n\r\n                var stateExposed = state as FormattedLogValuesExposed;\r\n\r\n                if (stateExposed != null )\r\n                {\r\n                    var json = JsonConvert.SerializeObject(stateExposed.Parameters);\r\n\r\n                    // log parameters into db\r\n                }\r\n            }\r\n        }\r\n\r\n```\r\n\r\nusing it:\r\n\r\n```c#\r\n\r\nlogger.LogTraceAsync(\"Email sent logging test\",\r\n    new KeyValuePair\u003cstring, object\u003e(\"TO\", new { Email = \"11111@test.com\", UserID = 1}),\r\n    new KeyValuePair\u003cstring, object\u003e(\"CC\", new { Email = \"22222@test.com\", UserID = 2 }),\r\n    new KeyValuePair\u003cstring, object\u003e(\"BCC\", new { Email = \"33333@test.com\", UserID = 3 })\r\n    );\r\n\r\n```\r\n\r\nHope they implement something like this.\r\n",
                                           "updatedAt":  "2016-12-26T11:30:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2OTE4MTQ0MQ==",
                                           "createdAt":  "2016-12-26T08:13:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@Ralstlin yeah, this is pretty much what @herecydev proposed [here](https://github.com/aspnet/Logging/issues/533#issuecomment-268217469). The problem, as I wrote further down, is that you simply have an unnamed list of object parameters, whereas in structured logging you usually want to attach names to them - and that\u0027s not possible. The real solution here would be to simply pass a `Dictionary\u003cstring,object\u003e`, but that means dumping the standard extension methods (e.g. LogDebug).",
                                           "updatedAt":  "2016-12-26T08:13:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2OTE5Nzc5Mg==",
                                           "createdAt":  "2016-12-26T10:31:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Yeah. To be fair, having structured data that isn\u0027t referenced in the string message may not be something everyone needs - it\u0027s OK to have other Log* extension methods with dictionary overloads.\r\n\r\nWhat I\u0027d like to know is whether a pull request adding these dictionary-using extensions would be accepted...",
                                           "updatedAt":  "2016-12-26T10:31:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2OTE5ODAzMw==",
                                           "createdAt":  "2016-12-26T10:34:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "herecydev",
                                           "body":  "I don\u0027t think they would detract from what\u0027s there. I would imagine the official standpoint would have to consider maintenance overhead. I would like to see this included though.",
                                           "updatedAt":  "2016-12-26T10:34:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2OTIwMjIwNQ==",
                                           "createdAt":  "2016-12-26T11:25:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ralstlin",
                                           "body":  "I see what you mean. Because I am using a Fire and Forget approach for my Async logging, I really could use reflection to get a Name, but it have too many complex issues (same type logged twice, Anonymous types, etc) I modified the previous code to use KeyValuePair, is not as clean as before but is not as bad to discard the option. I prefer to work directly with KeyValuePair because I dont see the benefit of having uniques keys for logging.\r\n\r\n",
                                           "updatedAt":  "2016-12-26T11:39:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4NTY5MDY5OQ==",
                                           "createdAt":  "2017-03-10T15:01:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAfUNHQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kambalin",
                                                                               "createdAt":  "2018-11-22T16:28:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "brettsam",
                                           "body":  "I wanted to chime in here -- I was looking for this same functionality and came across this issue. I created this class and thought it may be useful: https://gist.github.com/brettsam/baf21619b280912159b4178650294fcd.\r\n\r\nMy `ILogger`s don\u0027t care whether they\u0027re getting a `FormattedLogValues` or my custom class -- in both cases they\u0027re able to:\r\n- call `ToString()` to get a formatted message\r\n- cast to `IEnumerable\u003cKeyValuePair\u003cstring, object\u003e\u003e` to get all of the key-value pairs.\r\n\r\nI could write some `LogInfo`/`LogDebug`/etc extensions to make it even easier, but here\u0027s how I use it:\r\n\r\n    LogValueCollection payload = new LogValueCollection(\"logging {key}\", new[] { \"value\" }, someDictionaryOfAdditionalProperties);\r\n    logger.Log(LogLevel.Information, 0, payload, null, (s, e) =\u003e s.ToString());",
                                           "updatedAt":  "2017-03-10T15:01:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMDc4NjgzMg==",
                                           "createdAt":  "2017-05-11T13:19:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBdW42Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jabak",
                                                                               "createdAt":  "2021-01-22T12:20:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AlanBarber",
                                           "body":  "+1 to running into this issue while working on a custom logger.\r\n\r\nAs a workaround, I found that I could cast the state as a FormatttedLogValues object and then run a foreach over it to get a the properties attached.\r\n\r\n```\r\npublic void Log\u003cTState\u003e(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func\u003cTState, Exception, string\u003e formatter)\r\n{\r\n\tvar formattedLogValues = state as FormattedLogValues;\r\n\tif (formattedLogValues != null)\r\n\t{\r\n\t\tforeach (var item in formattedLogValues)\r\n\t\t{\r\n\t\t\t// Do stuff with item.Key \u0026 item.Value\r\n\t\t}\r\n\t}\r\n...\r\n}\r\n```",
                                           "updatedAt":  "2017-05-11T13:19:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjA5Mzc1Mw==",
                                           "createdAt":  "2017-06-29T20:25:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBdW46w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jabak",
                                                                               "createdAt":  "2021-01-22T12:20:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jaredcnance",
                                           "body":  "what\u0027s the status of this request? i\u0027d also be happy to work on a PR, based on @roji\u0027s suggestions, if the proposal would be accepted. Although, I\u0027m not sure it needs to be a `Dictionary`, why not just pass `params object[] args` down to the logger? This would allow things like:\r\n```csharp\r\n_log.LogInformation(\"stuff happened\", new { clientId } );\r\n```\r\nand an `ILogger` may handle that however it chooses",
                                           "updatedAt":  "2017-06-29T20:25:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTI1NTc4Mg==",
                                           "createdAt":  "2017-07-14T02:51:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAcQCkg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jaredcnance",
                                                                               "createdAt":  "2017-07-14T02:53:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Camios",
                                                                               "createdAt":  "2018-09-19T07:17:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Seems like a reasonable request. I like https://github.com/aspnet/Logging/issues/533#issuecomment-285690699 but I think adding extension methods might actually confuse things unless you had to pass this type explicitly. Would something like this be supported?:\r\n\r\n```C#\r\n_log.LogInformation(\"Something {property}\", p1, new { property2 = p2 });\r\n```\r\n\r\nWould the extension method combine the properties in the template with the extra properties passed in?\r\n\r\nJust FYI, when you add scopes with properties, loggers are supposed to do the same thing, that is, combine properties from the ambient scope into all existing log messages. Good logger implementations should do this (some of ours don\u0027t 😞).\r\n\r\nDo you have any thoughts on this @nblumhardt?\r\n\r\n/cc @glennc @pakrym ",
                                           "updatedAt":  "2017-07-14T02:51:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTI2NDY5OA==",
                                           "createdAt":  "2017-07-14T04:07:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pakrym",
                                           "body":  "Having feature is nice but we need a way to do it without allocations.",
                                           "updatedAt":  "2017-07-14T04:07:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTQxMjI2Nw==",
                                           "createdAt":  "2017-07-14T17:03:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODhXQ3A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "snboisen",
                                                                               "createdAt":  "2017-10-24T11:26:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "viktor-nikolaev",
                                                                               "createdAt":  "2019-06-13T17:48:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mynkow",
                                                                               "createdAt":  "2020-05-22T17:02:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pritishnayak",
                                                                               "createdAt":  "2024-05-10T03:39:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@pakrym suggested we can invent a new syntax for naming the positional arguments without printing them in the log message. This saves the dictionary allocation and allows you to use the precompiled templates.\r\n\r\n```C#\r\n_log.LogInformation(\"Foo {foo}[bar,baz]\", foo, bar, baz);\r\n```",
                                           "updatedAt":  "2017-07-14T17:03:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTQyNjYyNA==",
                                           "createdAt":  "2017-07-14T18:03:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredcnance",
                                           "body":  "@davidfowl how does the proposed format differ from:\r\n\r\n```csharp\r\n_log.LogInformation(\"Foo {foo}{bar}{baz}\", foo, bar, baz);\r\n```\r\n\r\nif I understand what you\u0027re saying, [MessageFormatter](https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.Abstractions/LoggerExtensions.cs#L464) would simply ignore the new bracketed tokens? but all of the parameters will still be available in \r\nthe `FormattedLogValues`?\r\n\r\nbut you\u0027re still required to include the parameters in the message. i still think that the decision about what should be done with `params object[] args` should be delegated to the `ILogger` implementation. but maybe i\u0027m alone on that.",
                                           "updatedAt":  "2017-07-14T18:49:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTQ4Njg0Nw==",
                                           "createdAt":  "2017-07-14T22:57:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nblumhardt",
                                           "body":  "I think extending the syntax is probably a fresh can of worms :-) .. it would achieve the no-alloc goal, but there\u0027s a lot of design space, docs, and integration work lurking there.\r\n\r\n(We\u0027ve pushed back against adding much more to templates than just \"named placeholders\" because additional syntax will work against discoverability and reliability in the long run. It\u0027s tough to remember special-case syntax for just one or two log messages in an app, and likely that syntax mistakes in message templates won\u0027t be caught at development time.)\r\n\r\nSomething like `BeginScope()` seems like a simpler way to go. I\u0027ll propose `WithProperty()` as a similar API without the ambient state/scope stack involved.\r\n\r\nFirst, to _make additional properties available_ without requiring allocations in the calling code, we could use:\r\n\r\n```csharp\r\nvar wp = log.WithProperty(\"SomeProperty\", someValue);\r\nwp.LogInformation(\"This has the property attached\");\r\n```\r\n\r\nWhere the value argument is generic `T`.\r\n\r\nNow, if the logger is enabled, this still necessitates an allocation for the return value, but levelling `WithProperty()` would fix that:\r\n\r\n```csharp\r\nvar wp = log.WithProperty(LogLevel.Debug, \"SomeProperty\", someValue);\r\n// If debug level events aren\u0027t enabled, scope == log and no property is attached\r\nwp.LogInformation(\"This has the property attached only when `Debug` is enabled\");\r\n```",
                                           "updatedAt":  "2017-07-14T22:59:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTc4Mjk3Nw==",
                                           "createdAt":  "2017-07-17T15:06:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pakrym",
                                           "body":  "@nblumhardt it\u0027s allocation per property value for loggers that are enabled, a bit too much for a common scenario,",
                                           "updatedAt":  "2017-07-17T15:06:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTg5NDQ5NQ==",
                                           "createdAt":  "2017-07-17T21:45:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nblumhardt",
                                           "body":  "@pakrym fair point 👍 \r\n\r\nJust so I can understand the cost properly... any formatted event that goes through the pipeline today requires allocations for the state object and the arguments - is the cost here much different?",
                                           "updatedAt":  "2017-07-17T21:45:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNzc0NDU5MQ==",
                                           "createdAt":  "2017-07-25T13:53:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAcRMRQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WilliamHBonney",
                                                                               "createdAt":  "2017-11-15T12:28:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nquintana",
                                                                               "createdAt":  "2018-09-19T13:08:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "akiander",
                                           "body":  "@roji - a sincere thank you for identifying this issue. I am trying to implement an ILogger and I have this exact problem. I opened up dotnet/extensions#655 for this issue, which can be closed since this issue covers it. \r\n\r\nBecause the field is private, I had to use reflection to get to the raw values passed to the logger: \r\n\r\n    var field = typeof(FormattedLogValues).GetRuntimeFields().Where(f =\u003e f.IsPrivate \u0026\u0026 !f.IsStatic \u0026\u0026 f.Name == \"_values\").FirstOrDefault();\r\n\r\nBut that is not an appropriate solution, just a temporary workaround until this issue is solved correctly. \r\n\r\nIn my opinion, I don\u0027t think any syntax change is required here. I think this issue is solved by making the `_values` field public (readonly): \r\n\r\n[Microsoft.Extensions.Logging.Internal.FormattedLogValues._values](https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Extensions.Logging.Abstractions/Internal/FormattedLogValues.cs#L23)\r\n\r\nThat way no matter what gets passed, the ILogger can access it. ",
                                           "updatedAt":  "2017-07-25T13:53:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyOTg2OTMwOA==",
                                           "createdAt":  "2017-09-15T18:51:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "muratg",
                                           "body":  "cc @glennc for his thoughts on this.",
                                           "updatedAt":  "2017-09-15T18:51:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4Njg0Njg3Nw==",
                                           "createdAt":  "2018-05-06T01:31:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenCleary",
                                           "body":  "@davidfowl \r\n\u003e when you add scopes with properties, loggers are supposed to do the same thing, that is, combine properties from the ambient scope into all existing log messages.\r\n\r\nDo you mean by this that a log message template can reference parameters defined in its enclosing scopes, or just that the scope can/should be output by the logger? I don\u0027t see any loggers doing the former.",
                                           "updatedAt":  "2018-05-06T01:31:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMzU4OTc2NQ==",
                                           "createdAt":  "2018-10-27T04:28:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOChX3Hw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "labsilva",
                                                                               "createdAt":  "2018-11-09T15:44:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nquintana",
                                                                               "createdAt":  "2018-11-26T15:00:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "blackboxlogic",
                                                                               "createdAt":  "2018-12-06T17:10:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "emilkje",
                                                                               "createdAt":  "2018-12-07T14:00:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dmitry-ponomarenko-coherentsolutions",
                                                                               "createdAt":  "2018-12-14T12:52:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bloudraak",
                                                                               "createdAt":  "2019-01-07T00:37:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichelZ",
                                                                               "createdAt":  "2019-01-28T14:39:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rcollina",
                                                                               "createdAt":  "2019-02-07T23:30:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericsampson",
                                                                               "createdAt":  "2019-06-13T19:22:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rasidr",
                                                                               "createdAt":  "2020-01-22T07:38:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mynkow",
                                                                               "createdAt":  "2020-05-22T17:16:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gliljas",
                                                                               "createdAt":  "2020-11-30T23:01:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cfbao",
                                                                               "createdAt":  "2021-05-09T03:46:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JohnNilsson",
                                                                               "createdAt":  "2022-06-12T01:19:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  14
                                                         },
                                           "author":  "andycmaj",
                                           "body":  "I wanna jump in here for a sec because i think i might be able to clarify the actual use case the OP was thinking of.\r\n\r\ntemplated message logs are great, but when you\u0027re piping your log events to an index like splunk, stackdriver, etc. you really don\u0027t need any message at all. When you\u0027re trying to consume application logs, i find the context/DATA is the most important thing. I don\u0027t care about an actual human-readable message, eg `\"A thing happened during {step}\"`. In real-world scenarios where developers are looking at tons of log events, they want to be able to data-mine, and thousands of events, all with the same english sentence as a message, are mostly noise.\r\n\r\nI think of my log events as events. `EventName`, `Data` (and other metadata like `Source`, `Level`, etc.).\r\n\r\nSo the logging API i\u0027ve wrapped around serilog, which has the same formatted-message API, looks like this:\r\n\r\n```csharp\r\neventLogger.InfoEvent(string eventName, object eventData);\r\n\r\neventLogger.InfoEvent(\"ProcessedFoos\", new { PropA = \"bar\", PropB = 42 });\r\n```\r\n\r\nand the events just look like\r\n\r\n```json\r\n{\r\n  \"EventName\": \"ProcessedFoos\",\r\n  \"Level\": \"Information\",\r\n  \"Data\": {\r\n    \"PropA\": \"bar\",\r\n    \"PropB\": 42\r\n  }\r\n}\r\n```\r\n\r\nSo yeah, in production, nobody is looking at the console output of my processes, i\u0027m streaming logs into an index. Once they\u0027re there it\u0027s kinda pointless to have a \"message\". \r\n\r\nThat said, i can certainly see where framework-level logging might want longer messaging that helps the user take actions and diagnose problems. But for application-level logging, i just need to know what happened, what was the context.\r\n\r\nSo yeah, unique event names and data bags. no human-readable sentences.",
                                           "updatedAt":  "2018-10-27T04:28:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NjgwNDkwNw==",
                                           "createdAt":  "2018-12-13T01:09:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andycmaj",
                                           "body":  "If anyone is still following this issue, i have a structuredeventlogger library here: https://github.com/andycmaj/SerilogEventLogger. ([nuget](https://www.nuget.org/packages/SerilogEventLogger/))\r\n\r\nit uses Serilog as a backend and can integrate with native AspNetCore logging via [Serilog.AspNetCore](https://github.com/serilog/serilog-aspnetcore)\r\n\r\n```\r\n// Redirect framework logging to Serilog logger\r\nservices.AddSingleton\u003cILoggerFactory\u003e(_ =\u003e new SerilogLoggerFactory(null, true));\r\n```\r\n\r\nthis implements the API i mention in the previous comment.",
                                           "updatedAt":  "2018-12-13T01:09:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MTkwMzI1OA==",
                                           "createdAt":  "2019-01-07T11:17:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yvdh",
                                           "body":  "Hello,\r\nI second the opinion that what\u0027s actually inside the message is unrelated to the structured properties you may want to pass on (I use Graylog2 as a logging backend). Also the mandatory quotes for structured string fields in the messages are rather annoying as they cannot be removed (or can they?).\r\nYves\r\n \r\n\r\n",
                                           "updatedAt":  "2019-01-07T11:17:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MjQ3MTkyMQ==",
                                           "createdAt":  "2019-01-08T22:16:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "muratg",
                                           "body":  "@davidfowl please triage or close this one. Thanks.",
                                           "updatedAt":  "2019-01-08T22:16:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MTYxNTY0OQ==",
                                           "createdAt":  "2019-02-07T22:17:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericsampson",
                                           "body":  "@muratg is this issue related to this one from the old repo? \r\nhttps://github.com/aspnet/HttpClientFactory/issues/141 \r\n\r\nAt the end of that thread, @glennc mentions the following, and I\u0027m curious where it ended up and if this issue (668) is it?:\r\n\"I also think we should put an issue on the backlog about building something that lets you configure what you want to log and log it, it\u0027s a feature we\u0027ve talked about but haven\u0027t really started designing or working on.\"\r\n\r\nThanks!",
                                           "updatedAt":  "2019-02-07T22:17:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MTYyOTkxMQ==",
                                           "createdAt":  "2019-02-07T23:09:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "muratg",
                                           "body":  "@ericsampson I don\u0027t know.",
                                           "updatedAt":  "2019-02-07T23:09:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMTgyMTIyNw==",
                                           "createdAt":  "2019-06-13T18:14:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCuuZlg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "arroyc",
                                                                               "createdAt":  "2019-06-20T22:38:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SpiridonovAlexMoeDelo",
                                                                               "createdAt":  "2020-01-10T13:47:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scuba6388",
                                                                               "createdAt":  "2020-11-17T15:55:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "akgupta007",
                                                                               "createdAt":  "2022-01-27T09:09:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "arical",
                                                                               "createdAt":  "2022-10-30T23:25:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "viktor-nikolaev",
                                           "body":  "Hi all,\r\nIs there any decision on this?\r\n\r\nI really liked the syntax @davidfowl proposed.\r\nHere is one of my use cases (simplified):\r\n\r\n    public Task SayHello(string clientInfo)\r\n    {\r\n      _logger.LogInformation(\"SayHello from connection {ConnectionId}\", Context.ConnectionId, clientInfo);\r\n      return Task.CompletedTask;\r\n    }\r\n\r\n`clientInfo` can be very large and it\u0027s not that useful to print it in every log message. However I want to see it in the data bag in elastic.",
                                           "updatedAt":  "2019-06-13T18:14:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNDIyNDYxNg==",
                                           "createdAt":  "2019-06-20T22:39:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arroyc",
                                           "body":  "I have similar use cases as mentioned by @Veikedo .. would love to know if there is any update on this",
                                           "updatedAt":  "2019-06-20T22:39:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNjk5NTcyNg==",
                                           "createdAt":  "2019-06-30T00:02:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andycmaj",
                                           "body":  "IMO it\u0027s also not useful to see `SayHello from connection...` in every log message. What you really want to see (and more importantly, track/alert on/graph over time) is the occurrence of `{ event: \u0027SaidHello\u0027, connection: \u0027MyConnectionId\u0027 }`.",
                                           "updatedAt":  "2019-06-30T00:02:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNzAzMjMxMA==",
                                           "createdAt":  "2019-06-30T12:29:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e IMO it\u0027s also not useful to see SayHello from connection... in every log message. What you really want to see (and more importantly, track/alert on/graph over time) is the occurrence of { event: \u0027SaidHello\u0027, connection: \u0027MyConnectionId\u0027 }.\r\n\r\nYou can already log structure, the logger accepts an object. This thread is specifically about text plus other structured data attached to the same log.\r\n\r\nThis can be implemented today by logging your own objects but you can\u0027t use the extension methods in that case. You\u0027d need to create an object that implements `IReadOnlyList\u003cKeyValuePair\u003cstring, object\u003e\u003e` and ToString().\r\n\r\nhttps://github.com/aspnet/AspNetCore/blob/6dc65b16730abb9cba59e759012211e576f99188/src/Hosting/Hosting/src/Internal/HostingRequestFinishedLog.cs#L12\r\n\r\nhttps://github.com/aspnet/AspNetCore/blob/f3f9a1cdbcd06b298035b523732b9f45b1408461/src/Hosting/Hosting/src/Internal/HostingApplicationDiagnostics.cs#L190-L195\r\n\r\nThis call to log specifies the custom object to log, the formatter callback (how to stringify in case the logger doesn\u0027t support structure, like the console logger is textual). All of the right pieces are here to accomplish this today we just need to get more crisp on exactly what people need and why what is currently there today is too difficult.",
                                           "updatedAt":  "2019-06-30T12:29:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNjA0MzAzMQ==",
                                           "createdAt":  "2019-09-27T18:09:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBfL2cA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cfbao",
                                                                               "createdAt":  "2021-02-08T03:26:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "andycmaj",
                                           "body":  "\u003e You can already log structure, the logger accepts an object. This thread is specifically about text plus other structured data attached to the same log.\r\n\r\nyes that\u0027s way i said, \"IMO it\u0027s also not useful to see \u0027_SayHello from connection..._\u0027 in every log message\". Meaning I want to log ONLY the structured data and not grammatical strings of text PLUS a json bag.\r\n\r\nI think the real ask is that we have an INTERFACE that encourages and supports pure structured event logging. To me, that means `EventName: string` + `Data: KVP` essentially. `ILogger` extensions are an interface that encourages a formatting string and positional arguments. The example you linked to, \r\n\r\n```\r\n   _logger.Log(\r\n                    logLevel: LogLevel.Information,\r\n                    eventId: LoggerEventIds.RequestFinished,\r\n                    state: new HostingRequestFinishedLog(httpContext, elapsed),\r\n                    exception: null,\r\n                    formatter: HostingRequestFinishedLog.Callback);\r\n``` \r\n\r\nstill requires a formatter and isn\u0027t really succinct.\r\n\r\nI believe the original ask by @roji was whether a PR would be accepted that would add an interface that looked more like:\r\n\r\n```\r\neventLogger.InfoEvent(string eventName, object eventData);\r\neventLogger.InfoEvent(\"ProcessedFoos\", new { PropA = \"bar\", PropB = 42 });\r\n```\r\n\r\nwhere the log events just look like\r\n\r\n```\r\n{\r\n  \"EventName\": \"ProcessedFoos\",\r\n  \"Level\": \"Information\",\r\n  \"Data\": {\r\n    \"PropA\": \"bar\",\r\n    \"PropB\": 42\r\n  }\r\n}\r\n```",
                                           "updatedAt":  "2019-09-27T18:09:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNjA1NTgwNQ==",
                                           "createdAt":  "2019-09-27T18:46:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "So you\u0027re looking for a helper method that does what you can do today to clean up the callsite? That extension method would allocate like crazy (although I\u0027m unsure how you avoid allocations with this design at all).",
                                           "updatedAt":  "2019-09-27T18:46:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNjE2MjYzOA==",
                                           "createdAt":  "2019-09-28T07:35:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andycmaj",
                                           "body":  "yeah agree... but any structured logging that uses anon objects/kvp lists seems like it would have same problem... \r\n\r\nare the allocations for `object eventData` somehow different than a varargs list of format string replacements?\r\n\r\n\u003e So you\u0027re looking for a helper method\r\n\r\ni would probably lean towards a different set of extension methods parallel to [`LoggerExtensions`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.loggerextensions?view=aspnetcore-3.0). maybe `IStructuredLoggerExtensions` or similar.\r\nI\u0027d still want scopes to continue to work, for example.\r\n\r\n",
                                           "updatedAt":  "2019-09-28T07:45:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNjIwMTU5Nw==",
                                           "createdAt":  "2019-09-28T15:55:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e yeah agree... but any structured logging that uses anon objects/kvp lists seems like it would have same problem...\r\n\r\nThat signature you have above while convenient is extremely inefficient and wouldn\u0027t be something I\u0027d want in the default package:\r\n- It requires reflection to get properties from the anonymous object (which shouldn\u0027t be cached)\r\n- Then another object that allocates IKVP\u003cstring, object\u003e needs to be wrapped around that type (it could be a struct though so maybe not the end of the world)\r\n- The object needs to join the event name and the KVPs into a single state object for the ILogger.Log call.\r\n\r\n\u003e are the allocations for object eventData somehow different than a varargs list of format string replacements?\r\n\r\nThe default extension methods have several inefficiencies\r\n- They use a `params object[]` so it always allocates an array if you have a format string, if you don\u0027t it\u0027s free.\r\n- Being a params object[] means value types are boxed (which results in another allocation)\r\n- Format string need to be parsed on ever call to log (however FormattedLogValues is a struct so it avoids that allocation at least...)\r\n\r\nLoggers that implement scopes also need to join the data from the incoming event into and the event itself into an uber collection of properties (more allocations!).\r\n\r\n\u003e I believe the original ask by @roji was whether a PR would be accepted that would add an interface that looked more like:\r\n\r\nAlso I\u0027d like to understand a few things: \r\n- What happens to loggers that don\u0027t support the logging objects and needs to ToString? Seems like you\u0027d still need a formatter to do something reasonable in this case. \r\n- What does the formatter do for these overloads?\r\n- What happens to exceptions? Do those get appended to the event object as well?\r\n- I see the event object in your sample includes the log level, is that intentional? \r\n\r\nMaybe something like this:\r\n\r\n```C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nnamespace ConsoleApp68\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using var loggerFactory = LoggerFactory.Create(builder =\u003e\r\n            {\r\n                builder.AddConsole();\r\n            });\r\n\r\n            var logger = loggerFactory.CreateLogger\u003cProgram\u003e();\r\n\r\n            logger.LogInformation(\"Hello\", new Dictionary\u003cstring, object\u003e {\r\n                { \"A\", 1 }\r\n            });\r\n        }\r\n    }\r\n\r\n    public static class LoggerExtensions\r\n    {\r\n        public static void LogInformation\u003cTState\u003e(this ILogger logger, string message, TState state) where TState : IDictionary\u003cstring, object\u003e\r\n        {\r\n            state[\"Message\"] = message;\r\n            logger.Log(LogLevel.Information, 0, state, null, (state, exception) =\u003e state[\"Message\"].ToString());\r\n        }\r\n\r\n        public static void LogInformation\u003cTState\u003e(this ILogger logger, TState state) where TState : IDictionary\u003cstring, object\u003e\r\n        {\r\n            logger.Log(LogLevel.Information, 0, state, null, (state, exception) =\u003e\r\n            {\r\n                if (state.TryGetValue(\"Message\", out var value))\r\n                {\r\n                    return (string)value;\r\n                }\r\n                return state.ToString();\r\n            });\r\n        }\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2019-09-28T15:55:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MzQ3MDE3OA==",
                                           "createdAt":  "2019-12-09T22:30:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jjxtra",
                                           "body":  "If they added TState overloads for the Information, Warning, etc. extension methods that would help a lot...",
                                           "updatedAt":  "2019-12-09T22:30:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MjE5MjAzNg==",
                                           "createdAt":  "2020-01-08T18:16:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheXenocide",
                                           "body":  "We\u0027ve been migrating from our own logging abstraction to the Microsoft abstraction. We previously implemented our abstraction using NLog (and have tested implementing with ApplicationInsights and verified the same features would be supported with Serilog). We continue to use the NLog implementation of the Microsoft abstraction which is working well for sharing our old analysis tools and we enjoy the flexibility of being able to combine that with console and other loggers (our previous abstraction did not support multiple simultaneous providers, though NLog has support for multiple targets).\r\n\r\nNon-message structured data is important to our ability to filter/correlate/analyze/etc. In some cases we use more expensive contextual metadata based on `AsyncLocal\u003cT\u003e` that travels with the call stack which it seems is similar to `BeginScope` in some implementations (and which we have been able to replace/integrate with) but much of our metadata is passed directly to the log method as a dictionary; some are easy enough to convert but in some more crucial cases, as well as in some more abstract reusable utilities we have, we have a need to include the metadata without incorporating it into the message string. On top of that we have scenarios where we want to use both message parameters AND the dictionary and it is unclear how we can possibly do this with the existing infrastructure. It looks like the `TState` approach is more of an either/or scenario where most loggers (at least that matter to us) support the use of a `TState` that implements `IEnumerable\u003cKeyValuePair\u003cstring, object\u003e\u003e` but then we can\u0027t use message parameters in conjunction. Am I also reading above that in some cases keyed-metadata is ignored unless the key is present in the message string? Ideally we would be looking for something that supports both TState AND message parameters; perhaps along the lines of: `BeingScope\u003cTState\u003e(this ILogger logger, TState state, string message, params object[] args);`, `LogError\u003cTState\u003e(this ILogger logger, EventId eventId, Exception exception, TState state, string message, params object[] args)`, etc. It seems to me like making the FormattedLogValues decorate the state or forcing the state in this case to implement the KVP pattern and concat the values together might be able to make use of the existing allocations/minimize additional impacts, or perhaps an approach that only allocates when the feature is used explicitly which is the developer making a decision to accept the cost in exchange for the benefit.\r\n\r\nIn the meantime I was thinking maybe we can use a `TState` of `IEnumerable\u003cKeyValuePair\u003cstring, object\u003e\u003e` manually including the message parameters as their own keys in the state for structured purposes and then just `String.Format` the values into the message, but then we lose the ability to match on the un-substituted message string which is a handy feature of the message-parameter structured logging approach. This also does not solve our abstract utilities which seek to add metadata to existing message-based logging infrastructure. We really don\u0027t want to implement/maintain our own Provider/Factory/Logger, especially when the framework support is so very close to what we (and seemingly many others, especially those using NLog/Serilog/etc.) need and are already used to having in some capacity or another. I\u0027m now taking a look at the above-mentioned `LogValuesCollection` but this really seems like something that could be done in the framework more effectively/efficiently and to the benefit of more people if it were implemented here.\r\n\r\nIt\u0027s also a little unfortunate that in order to determine what types of structured data were actually supported our only option was to literally dig through source code, both here and in the various repositories of the providers. I understand the flexibility of generic state objects for custom structured logging solutions, but it would be really helpful if there were documentation and possibly suggestions for common best practices to urge some level of common ground between implementations (e.g. suggesting that `IEnumerable\u003cKeyValuePair\u003cstring, object\u003e\u003e` be supported might help future implementations find common ground). I know this is a challenge and that the API is intentionally flexible, just voicing some of the challenges that were non-trivial in our analysis which could be barriers for adopting common practices in other shops.",
                                           "updatedAt":  "2020-01-08T18:16:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MjIwNjgxOA==",
                                           "createdAt":  "2020-01-08T18:54:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheXenocide",
                                           "body":  "Ah, it seems that now `FormattedLogValues` and `LogValuesFormatter` are internal which means we can\u0027t even benefit from the common code for message-based values in home-rolled structured data types that might aim to use both message parameters and additional state. The `LogValueCollection` mentioned above would have worked for us (though I\u0027d have made a more simple readonly struct based on it), but we\u0027re on 3.1 and can no longer do that.\r\n\r\nIt seems like it would only take a few lines in `FormattedLogValues` if we constrained the state type for additional parameters to `IReadOnlyList\u003cKeyValuePair\u003cstring, object\u003e\u003e`. An extra constructor parameter, a couple lines to the indexer and an extra `+ additionalProperties.Count` to the `Count` property? Struct size grows by one pointer no extra allocations (besides whatever the user code does to create their `IReadOnlyList`).",
                                           "updatedAt":  "2020-01-08T18:54:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MjI4MzAxNQ==",
                                           "createdAt":  "2020-01-08T22:13:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB4HM1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "andycmaj",
                                                                               "createdAt":  "2020-03-11T02:45:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gitfool",
                                                                               "createdAt":  "2020-04-19T22:54:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eveneveneven",
                                                                               "createdAt":  "2021-05-31T13:38:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dbenson-isd",
                                                                               "createdAt":  "2021-08-27T18:44:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "TheXenocide",
                                           "body":  "Here\u0027s what we\u0027re prototyping with right now. \r\n\r\nhttps://gist.github.com/TheXenocide/f7d8a249ec19857dee926426e2319746\r\n\r\nAlmost all of it is copy/pasted from this repository with a very small number of changes (we can\u0027t wait around for .NET 5 to release). If this (or something similar) seems acceptable I might be able to find some time to put together a pull request. Conceptually we wouldn\u0027t need the `CustomLogValuesFormatter` at all (it\u0027s a straight copy/paste + rename) and we could EITHER keep the `StructuredAndFormattedLogValues` struct and use it from the extension methods which need it OR we could just add the functionality into `FormattedLogValues` and only have one class. I can see pros/cons to both. \r\n\r\nCorrect me if I\u0027m wrong, but I believe this still satisfies the \"No Additional Allocations\" goals exactly as well as the current implementation and allows the consumer user to supply an existing Dictionary (which we already have several of in our utilities) or a custom class/struct like the above noted `HostingRequestFinishedLog`. I had considered allowing it to receive `IEnumerable` or `IReadOnlyList` making it either a little more or less flexible but I think this gives a happy middle ground that doesn\u0027t require existing dictionaries to be pushed through `ToList`, etc.",
                                           "updatedAt":  "2020-01-08T22:41:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNjIzNjI1Mg==",
                                           "createdAt":  "2020-04-19T22:31:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBYaoWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TheXenocide",
                                                                               "createdAt":  "2020-04-29T21:15:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gliljas",
                                                                               "createdAt":  "2020-11-30T23:14:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "gitfool",
                                           "body":  "We also need this! Using Serilog behind the scenes _but_ using `ILogger` abstraction in libraries and elsewhere to be a good citizen and logger agnostic. Lowest common denominator sucks. 😞 \r\n\r\n@TheXenocide please at least try to push for this to be incorporated into .NET 5! 🍺 \r\n\r\nMeanwhile, I might take your gist and run with it.",
                                           "updatedAt":  "2020-04-19T22:31:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMTY0Mjk0MQ==",
                                           "createdAt":  "2020-04-30T06:38:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBCyvFg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2020-04-30T07:14:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "304NotModified",
                                                                               "createdAt":  "2020-04-30T12:38:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "viktor-nikolaev",
                                                                               "createdAt":  "2020-04-30T19:29:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "snakefoot",
                                           "body":  "Since you can provide whatever LogState-objects you like, then it is just a matter a providing one that supports additional properties. \r\n\r\n- [Simple Approach](https://github.com/NLog/NLog.Extensions.Logging/wiki/NLog-properties-with-Microsoft-Extension-Logging#logtstate-simple)\r\n\r\n- [Advanced Approach](https://github.com/NLog/NLog.Extensions.Logging/wiki/NLog-properties-with-Microsoft-Extension-Logging#logtstate-advanced) - With message template parsing.\r\n\r\nOne can sprinkle some ILogger-extension methods around, and then you have what you need.\r\n\r\nP.S. Both Serilog and NLog should have no issues with capturing additional properties injected by these two approaches (Important part is that LogState implements `IEnumerable\u003cKeyValuePair\u003cstring, object\u003e\u003e`)",
                                           "updatedAt":  "2020-04-30T06:38:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMjA1ODE4NQ==",
                                           "createdAt":  "2020-04-30T19:29:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBXCV0A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "304NotModified",
                                                                               "createdAt":  "2020-04-30T19:37:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "swlasse",
                                                                               "createdAt":  "2020-11-17T12:32:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "viktor-nikolaev",
                                           "body":  "Just created a nugget package for it, should work with NLogger and Serilog.\r\nhttps://www.nuget.org/packages/XeonApps.Extensions.Logging.WithProperty/\r\n\r\nusage:\r\n\r\n      // inline\r\n      logger\r\n        .WithProperty(\"SomeProp\", \"value\")\r\n        .LogInformation(\"User {User} logged in\", \"Jon\");\r\n\r\n      // reassign a logger with props\r\n      logger = logger\r\n        .WithProperty(\"OneProp\", 22)\r\n        .WithProperty(\"End\", 21)\r\n        .WithProperties(\r\n          (\"key\", \"value\")\r\n        )\r\n        .WithProperties(\r\n          new KeyValuePair\u003cstring, object\u003e(\"another\", \"one\"),\r\n          new KeyValuePair\u003cstring, object\u003e(\"some\", \"more\"),\r\n          new KeyValuePair\u003cstring, object\u003e(\"End\", \"more\")\r\n        );\r\n\r\n      // will have all the added props as well as props from the template \r\n      logger.LogInformation(\"Event {Event} happened\", \"UserLoggedOut\");",
                                           "updatedAt":  "2020-04-30T19:30:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNDczMTA5NA==",
                                           "createdAt":  "2020-05-06T15:50:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheXenocide",
                                           "body":  "\u003e Since you can provide whatever LogState-objects you like, then it is just a matter a providing one that supports additional properties.\r\n\u003e [...]\r\n\u003e One can sprinkle some ILogger-extension methods around, and then you have what you need.\r\n\r\n@snakefoot I think the main difference between the techniques mentioned in your links and a lot of the desire I\u0027m seeing here would be the ability to use both the structured template text AND additional structured properties not included in the message *together*. The examples you linked manage to accomplish logging a structured object which can be turned into a string message, but it doesn\u0027t get to leverage the structured template text, thus forcing the user to reinvent the wheel.\r\n\r\nI think @viktor-nikolaev manages to accomplish this, though the approach feels a bit more allocation heavy (the example above creates 5 new instances of ILogger to log two messages, though admittedly that\u0027s just a verbose sample and it could create 1 new logger per message just fine, which isn\u0027t as bad, plus reuse of some properties but not others seems like a viable use of the alternative pattern he provides).\r\n\r\nIt feels like it would be relatively trivial to modify the provided implementation, and rather non-trivial (and entirely too intimately familiar with the inner workings of the logging abstractions provided here) to provide our own implementation (which also is unable to make any practical reuse of the templating mechanism built-in to the abstraction library, at present). Keeping the standard practice for the structured template strings is really important to us because it is both easy to read and readily referenced all over the internet, rather than us concocting some home-rolled similar-but-different solution everyone will have to relearn and for which there will be few examples of in the wild.",
                                           "updatedAt":  "2020-05-06T15:50:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNDc3Mzc1Nw==",
                                           "createdAt":  "2020-05-06T17:08:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "snakefoot",
                                           "body":  "@TheXenocide Have you tried [Advanced Approach](https://github.com/NLog/NLog.Extensions.Logging/wiki/NLog-properties-with-Microsoft-Extension-Logging#logtstate-advanced) - With message template parsing ? (It does both)",
                                           "updatedAt":  "2020-05-06T17:08:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTQ0NTU2OQ==",
                                           "createdAt":  "2020-05-07T19:14:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-05-07T19:14:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNjM4MjM0NA==",
                                           "createdAt":  "2020-05-30T20:37:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCualKA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "msallin",
                                                                               "createdAt":  "2021-01-05T10:19:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jabak",
                                                                               "createdAt":  "2021-01-20T17:23:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rasidr",
                                                                               "createdAt":  "2021-02-02T09:27:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elubarsky-hs",
                                                                               "createdAt":  "2022-10-25T04:42:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "dmitry-84",
                                           "body":  "It will be useful if [`FormattedLogValues._values`](https://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/FormattedLogValues.cs#L24) be exposed. For example with key named `{OriginalValues}` in [`KeyValuePair\u003cstring, object\u003e`](https://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/FormattedLogValues.cs#L59) similarly as it was done for `_originalMessage`/`{OriginalFormat}`",
                                           "updatedAt":  "2020-05-30T20:39:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MzgwNzUzOA==",
                                           "createdAt":  "2021-01-20T17:25:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCualEg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DocJames",
                                                                               "createdAt":  "2021-01-21T13:28:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rasidr",
                                                                               "createdAt":  "2021-02-02T09:27:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cfbao",
                                                                               "createdAt":  "2021-02-08T03:33:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elubarsky-hs",
                                                                               "createdAt":  "2022-10-25T04:41:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "jabak",
                                           "body":  "\u003e It will be useful if [`FormattedLogValues._values`](https://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/FormattedLogValues.cs#L24) be exposed. For example with key named `{OriginalValues}` in [`KeyValuePair\u003cstring, object\u003e`](https://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/FormattedLogValues.cs#L59) similarly as it was done for `_originalMessage`/`{OriginalFormat}`\r\n\r\nThis is really what is needed for the custom Ilogger implementation we\u0027ve implemented and a handful of others as well. If this is fixed we can finally go all-in on Microsoft.Logging.Extensions and get rid of our own abstraction.\r\n\r\nThe problem with logger.LogInformation(\"Some text\", someObject) is that someObject is lost because it is inaccessible to custom Ilogger implementations:\r\n\r\nIf _values was public we could tweak the custom Ilogger implementation like this and save the day:\r\n```cs\r\npublic void Log\u003cTState\u003e(Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, TState state, Exception exception, Func\u003cTState, Exception, string\u003e formatter)\r\n{\r\n    var allParams = state._values; // returns a list of objects with someObject being the only object in this example.\r\n    // With the allParams at hand we could easily do like this\r\n    var stringMsg = formatter(state, exception)\r\n    realLoggerInstance.Log(stringMsg, allParams[0])\r\n    // which in our custom logger translates into someObject being persisted and indexed for free text search while  \r\n    // preserving a short log message text equal to stringMsg for an uncluttered UI log view.\r\n}\r\n```        \r\nI don\u0027t understand why exposing the formatted values as a public property (Read only) would undermine the overall design of the extension. Maybe I\u0027m missing something?",
                                           "updatedAt":  "2022-10-21T18:59:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MTQ5MzczMw==",
                                           "createdAt":  "2021-02-02T09:22:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB4HOVg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TheXenocide",
                                                                               "createdAt":  "2021-05-11T23:44:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dbenson-isd",
                                                                               "createdAt":  "2021-08-27T18:47:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jabak",
                                           "body":  "What is the best way to move forward? The change needed could be as simple as what @dmitry-84 outlines or what @TheXenocide proposes with his prototype code.",
                                           "updatedAt":  "2021-02-02T09:22:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzI5NzkwMA==",
                                           "createdAt":  "2021-06-09T01:17:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCAOT7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jabak",
                                                                               "createdAt":  "2021-06-09T15:55:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TheXenocide",
                                                                               "createdAt":  "2021-06-23T23:29:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "efdknittlfrank",
                                                                               "createdAt":  "2021-10-28T07:37:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "wekempf",
                                           "body":  "Hopefully why this is wanted/needed is much more obvious than it was when this issue was opened roughly 5 years ago. With structured logging you really want to be able to log very rich data and the message is just part of this.\r\n\r\nAny way, I\u0027ve got a spike available in this [gist](https://gist.github.com/wekempf/dd855ac44064794adf5d69da56261915). The meat of the example is this code.\r\n\r\n```csharp\r\nvar host = Host.CreateDefaultBuilder()\r\n    .ConfigureLogging(ConfigureLogging)\r\n    .Build();\r\nActivatorUtilities.CreateInstance\u003cApp\u003e(host.Services).Run();\r\n\r\nstatic void ConfigureLogging(HostBuilderContext context, ILoggingBuilder logging)\r\n{\r\n    logging.AddJsonConsole();\r\n}\r\n\r\ninternal class App\r\n{\r\n    private readonly ILogger logger;\r\n\r\n    public App(ILogger\u003cApp\u003e logger)\r\n    {\r\n        this.logger = logger;\r\n    }\r\n\r\n    public void Run()\r\n    {\r\n        logger.LogInformationExtra(\"Example: {name}\", \"properties\", new { extra = Guid.NewGuid() });\r\n        logger.LogInformationExtra(\"Example: {name}\", \"key value pairs\", new Dictionary\u003cstring, object\u003e\r\n        {\r\n            [\"one\"] = 1,\r\n            [\"two\"] = 2,\r\n            [\"three\"] = 3\r\n        });\r\n    }\r\n}\r\n```\r\n\r\nWhich produces this output.\r\n\r\n```\r\n{\"EventId\":0,\"LogLevel\":\"Information\",\"Category\":\"App\",\"Message\":\"Example: properties\",\"State\":{\"Message\":\"Example: properties\",\"name\":\"properties\",\"{OriginalFormat}\":\"Example: {name}\",\"extra\":\"be312990-d7a0-42d1-bb7f-1ee4bd672bd7\"}}\r\n{\"EventId\":0,\"LogLevel\":\"Information\",\"Category\":\"App\",\"Message\":\"Example: key value pairs\",\"State\":{\"Message\":\"Example: key value pairs\",\"name\":\"key value pairs\",\"{OriginalFormat}\":\"Example: {name}\",\"one\":1,\"two\":2,\"three\":3}}\r\n```\r\n\r\nThe implementation basically just creates a `State` object that\u0027s basically an advanced `FormattedLogValues`. If the actual `FormattedLogValues` were reworked in the same way then the existing APIs should all work as-is, and support the ability to include data not contained in the message. Keep in mind this code is only a spike, and not production ready, though. It does suffer from the allocation and performance concerns made by @davidfowl. I\u0027m not sure how much that matters, or what could be done to improve things. I did support both reflection and KVP collections like `Dictionary`. The former is simpler code, at the expense of some performance, and the latter gives better performance.\r\n\r\nIn any case, this shows that it\u0027s quite possible for users to do this without any changes to the framework, just at the expense of needing to provide a separate set of extension methods, while it should also be possible to add this capability to the framework without changing any APIs.",
                                           "updatedAt":  "2021-06-09T01:17:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODM1NTE0NA==",
                                           "createdAt":  "2021-06-10T06:40:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jabak",
                                           "body":  "Happy to see some progress being made. Thanks for spending some time on the issue William. The good thing, as you point out, is that adding this capability to the framework seamlessly is possible. Regarding the performance worries I can say this:\r\n\r\nIn my experience, after working on a logging framework on/off for 5 years, performance can be an issue when logging is used in a heavily instrumented application. But nowadays in many situations logging/instrumentation data is sent to remote data stores and framework loggers can/should opt to offload the workload to a background thread so the main executing thread is unaffected by this. Allocation/deallocation should off course be kept at minimum as this will impact overall performance no matter what.\r\n\r\nBut at the end of the day being able to get insights into how your application is behaving and having diagnostic data readily available is a trade off most developers can accept in exchange of a very very small unnoticeable performance hit.\r\n\r\nI think I\u0027ll take a look at your sample code to see how it\u0027s fits inside my logging framework extension for microsoft.extensions.logging. ",
                                           "updatedAt":  "2021-06-10T06:40:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODYwNTAwOA==",
                                           "createdAt":  "2021-06-10T13:05:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wekempf",
                                           "body":  "@jabak In my experience, the overhead discussed here is dwarfed by the cost of I/O, so I\u0027m personally less concerned. But, and this is important, I\u0027m not a contributor to .NET, and I know they are extremely focused on performance. So, \"some prorgress being made\" isn\u0027t exactly correct. I shared a nice little spike. We\u0027ll have to see where the actual contributors go with it. :)",
                                           "updatedAt":  "2021-06-10T13:05:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODYyMTI0Mw==",
                                           "createdAt":  "2021-06-10T13:25:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jabak",
                                           "body":  "@wekempf True. I/O costs is always a concern. In the light of \"nothing has happened in five years\" a spike even from non maintainers is in my view \"progress\" :o)",
                                           "updatedAt":  "2021-06-10T13:25:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDM1Njc1Mw==",
                                           "createdAt":  "2021-06-19T05:06:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD_wTSQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wekempf",
                                                                               "createdAt":  "2021-06-22T15:15:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jabak",
                                                                               "createdAt":  "2022-04-30T09:37:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bovetliu",
                                                                               "createdAt":  "2024-12-20T07:26:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "JakenVeina",
                                           "body":  "Seems to me like @wekempf \u0027s approach could be applied directly to the existing `LoggerMessage` API, without any breaking changes of the API surface.\r\n\r\nThat is...\r\n```cs\r\npublic static Action\u003cILogger, T1, T2, T3, Exception\u003e Define\u003cT1, T2, T3\u003e(\r\n    LogLevel logLevel,\r\n    EventId eventId,\r\n    string formatString);\r\n```\r\n...could become...\r\n```cs\r\npublic static Action\u003cILogger, T1, T2, T3, Exception\u003e Define\u003cT1, T2, T3\u003e(\r\n    LogLevel logLevel,\r\n    EventId eventId,\r\n    string formatString,\r\n    params string[] unformattedValueNames);\r\n```\r\n\r\nAs a change to the existing methods, this would be a binary-breaking, but not a code-breaking change. If implemented by simply adding additional overloads, it should be fully non-breaking. And it achieves the original goal exactly: allowing users to specify that some or all of the values for `T1`, `T2`, and `T3` are to be included in the log state, but not embedded in the message format string.\r\n\r\nThe changes to implement this behind the scenes would mainly be a matter of adjusting the sanity checks that count the number of names defined in the format, and of adding an additional array allocation to the outer closure, to combine the value names from the formatter with the additional ones specified directly by the consumer. The code that actually runs at log-time would remain basically unchanged, from a performance perspective.\r\n\r\nP.S. If anyone is interested, I\u0027ve thrown up a formal implementation, on [GitHub](https://github.com/JakenVeina/StructuredLoggerMessage) and [NuGet](https://www.nuget.org/packages/StructuredLoggerMessage/)",
                                           "updatedAt":  "2021-06-22T05:23:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2OTcxOTA1Ng==",
                                           "createdAt":  "2021-06-28T14:10:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wekempf",
                                           "body":  "So, both extension method and LoggerMessage approaches can be done without breaking existing code (from both a source and binary point of view depending on approach taken). It would be great if these changes could be made.",
                                           "updatedAt":  "2021-06-28T14:10:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CZano",
                                           "createdAt":  "2022-04-30T09:43:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1KSGg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gliljas",
                                                                               "createdAt":  "2022-05-31T11:31:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "Gladskih",
                                                                               "createdAt":  "2022-09-06T09:42:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "yedidyas",
                                                                               "createdAt":  "2023-03-29T12:34:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "educorzo",
                                                                               "createdAt":  "2023-04-25T08:41:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "sid2934",
                                                                               "createdAt":  "2023-08-30T22:39:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "maxgolov",
                                                                               "createdAt":  "2023-08-30T22:45:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ZvonimirMatic",
                                                                               "createdAt":  "2023-09-14T08:22:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "Kali-Sh",
                                                                               "createdAt":  "2023-11-22T12:00:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kali-Sh",
                                                                               "createdAt":  "2023-11-22T12:00:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "vassourita",
                                                                               "createdAt":  "2024-10-07T22:01:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  10
                                                         },
                                           "author":  "jabak",
                                           "body":  "We\u0027re still waiting for this to happen.",
                                           "updatedAt":  "2022-04-30T09:43:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tKvuA",
                                           "createdAt":  "2023-11-29T09:32:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mashbrno",
                                           "body":  "Based on [Serilog\u0027s documentation ](https://github.com/serilog/serilog-extensions-logging) this should work\r\n\r\n```\r\nusing (log.BeginScope(new { cmd = \"select * from table\", result = 42 }))\r\n{\r\n    log.LogInformation(\"Query executed\");\r\n}\r\n```\r\n\r\nWould like to see the `TState` object directly in loging methods.",
                                           "updatedAt":  "2023-11-29T09:32:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tK1MG",
                                           "createdAt":  "2023-11-29T09:46:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jabak",
                                           "body":  "I would prefer multiple \"TState\" objects directly in the logging methods. \r\n\r\nEx.1\r\nlogger.LogInformation(\"Query executed\", someArbitraryObjectOrValueType);\r\n\r\nEx.2\r\nlogger.LogInformation(\"Query executed {count} times\", count, someArbitraryObjectOrValueType);\r\n\r\nThe important thing is to expose **all** objects to third party developers by somehow making FormattedLogValues._values public.\r\n\r\nI\u0027m well aware of potential boxing/unboxing performance hits and the fact that in .NET 8 features like [LogProperties] was introduced to go hand in hand with the OpenTelemetry extensions.",
                                           "updatedAt":  "2023-11-29T09:49:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50_SwW",
                                           "createdAt":  "2024-02-24T22:42:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheXenocide",
                                           "body":  "We are still interested in first-party support for this, and we\u0027d be especially interested in support for it in the Source Generators too. Direct support for multi-KeyValuePair (or Tuple) in some syntactically friendly form would be really great.",
                                           "updatedAt":  "2024-02-24T22:42:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53siu5",
                                           "createdAt":  "2024-03-19T21:27:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbKnvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cfbao",
                                                                               "createdAt":  "2024-03-25T16:53:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iotalambda",
                                                                               "createdAt":  "2024-05-21T11:03:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tomasz-podolak",
                                                                               "createdAt":  "2024-07-12T14:05:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alrz",
                                                                               "createdAt":  "2024-08-02T16:42:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sharonsfriend",
                                                                               "createdAt":  "2024-08-18T13:26:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vassourita",
                                                                               "createdAt":  "2024-10-07T22:12:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DominikKDev",
                                                                               "createdAt":  "2024-12-24T10:29:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lshearer",
                                                                               "createdAt":  "2025-05-23T22:15:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "meriturva",
                                                                               "createdAt":  "2025-07-19T02:47:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "TheXenocide",
                                           "body":  "One key challenge here, besides making sure the values get passed along in some way (which I am also interested in), is that `BeginScope` and unnamed parameters have undefined behavior in the Microsoft.Extensions side of the house. There\u0027s no suggested standard for behavior on implementations, though there is a somewhat de facto agreement on some sort of `IEnumerable`/`ICollection` of `KeyValuePair\u003cstring, object\u003e`, but even that isn\u0027t a documented; we used to use an `IEnumerable\u003cKeyValuePair\u003cstring, string\u003e\u003e` (which, sadly, can\u0027t use covariant generics to detect that a `KeyValuePair\u003cstring, string\u003e` could also be used as a `KeyValuePair\u003cstring, object\u003e`) before migrating to MEL and I had to read 3rd party source to find common ground. \r\n\r\nWhen we migrated we also ran into some scenarios which (counterintuitively, to us at the time) did not re-evaluate the IEnumerable from a BeginScope from one log entry and the next, despite the results changing, though now in hindsight I do not recall if that was MEL implementation or the logging provider implementation that was responsible for this behavior (I suspect perhaps NLog may have been pre-processing the scope into their own MDLC or something similar). I can understand how perhaps that was an optimization decision, but we were effectively trying to use a custom iterator that would expose a variety of ambient state (AsyncLocal, static, specific properties from DI singletons, etc.) with a single global `BeginScope` at app start. Perhaps something similar to an Enricher would be better suited for this but we\u0027re trying to avoid vendor-specific implementation details at this layer of logging, so it would be nice if that kind of functionality would be built into the first-party abstraction.\r\n\r\nReally, for what is being requested here in this ticket though, first, I think it would be helpful to provide standard overloads for Log*/BeginScope methods which receive an explicit type (e.g. `IEnumerable\u003cKeyValuePair\u003cstring, object\u003e\u003e` or something similar, perhaps more optimized) in addition to their other parameters (I believe our extension methods put a dictionary near the beginning of the parameter list so that it\u0027s not ambiguous/never accidentally falls into a `params` bucket). Source generator support for these and/or source generator support for translating an object into a set of properties even when it isn\u0027t included in the message would be a huge boon. There are abundant examples of supplying structured metadata beyond those included in a message, including in the first-party Activity/Trace implementations, so it would be really nice for this to be exposed on a per-log-entry basis as well.\r\n\r\n**Most importantly though,** whether or not the explicit overloads are provided, it would be **_very_** helpful if Microsoft (in consultation/conjunction with the implementation stakeholders in this space, e.g. Serilog, NLog, OpenTelemetry, etc.) would formally define expected behaviors for structured logging and non-message metadata. A more specific formal specification would bring better consistency to the various implementations of the abstraction and yield more predictable results for consumers, plus it should make migration between implementations or leveraging multiple implementations much easier and would allow component libraries to leverage/provide the same benefits in their logging, regardless of which implementation the consuming application uses. \r\n\r\nI understand that when the abstraction was first created, the undefined behavior left some wiggle room for implementations to define their own behavior without the abstraction becoming too much of a burden on them or limiting them overly much, but I think in practice we have found that most of them are trying to provide the same functionalities and the consumers are suffering a burden of navigating implementation-specific details where a common pattern of behavior is desired.",
                                           "updatedAt":  "2024-03-19T21:27:28Z"
                                       }
                                   ],
                         "totalCount":  77
                     },
        "title":  "Logging structured data without it appearing in the text message",
        "labels":  [
                       "question",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36546",
        "createdAt":  "2018-10-12T12:09:57Z",
        "number":  36546,
        "author":  "rymeskar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-07T07:48:21Z",
        "body":  "I have observed the different implementations of the ILogger throughout the Extensions namespace thinking the following:\r\nBeginScope is called whenever we want to let the logger know of the current context/scope it executes in. Then the generic idea I had is that the logger would try to stick this context to whatever subsequent logging event that is being emitted. I see some competing BeginScope implementations throughout the codebase.\r\n\r\n- AzureAppServices.BatchingLogger -- returns plain null on BeginScope and does not do anything with the context\r\n\r\n- ConsoleLogger -- has the possibility to pass in configured IExternalScopeProvider and then the scope composed through the provider written to each log line\r\n\r\n- DebugLogger -- similar to AzureAppServices but this time arround, the NoopDisposable pattern is used\r\n\r\n- EventLogLogger -- uses configurable IExternalScopeProvider, similar way as how ConsoleLogger\r\n\r\n- EventSource.EventSourceLogger -- an event is written to the EventSource but the context is not hooked to any other logging events in the scope\r\n\r\n- TraceSourceLogger -- uses TraceSourceScope which internally relies on Trace.CorrelationManager doing all the scope heavy lifting\r\n\r\nWhat I would propose here is to:\r\n1. Make use of the IExternalScopeProvider interface in each of the different Loggers. (and make this DIable, or configurable as intended with the ISupportExternalScope interface)\r\n2. Try to stick the context to each of the logging events. Or use whatever native context keeping methods there are for the given loggers.\r\n\r\nOr am I just missing something in the BeginScope story?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpdcIWw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyOTQwODcwMQ==",
                                           "createdAt":  "2018-10-12T17:55:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pakrym",
                                           "body":  "Logger needs to do enough with scope object to be able to log it to the desired destination.\r\n\r\n1. BatchingLogger, DebugLogger do not log scopes so they return null/NoopDisposable\r\n2. ConsoleLogger/EventLogLogger loggers have to attach scopes to every logged message and such they are using `IExternalScopeProvider` for storage\r\n3. TraceSource has own infrastructure for scope like things which it uses\r\n4. EventSourceLogger just logs scope objects immediately and doesn\u0027t have to hold onto anything.\r\n\r\n`IExternalScopeProvider` is only needed when logger needs to hold onto scope objects to be used in the future.",
                                           "updatedAt":  "2018-10-12T17:55:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyOTY3Mjc1NQ==",
                                           "createdAt":  "2018-10-14T23:32:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rymeskar",
                                           "body":  "Thank you for more detailed explanation of how things work.\r\n\r\nUnfortunately, I still do not see the exact reasoning that went into picking scoping/noscoping in each of these logger implementations.\r\n\r\nWhy for example DebugLogger might not wish to hold onto scope objects same as ConsoleLogger does. \r\n\r\nAnother question would be why was it chosen that EventSourceLogger does not hold onto scopes and immediately logs the event without any enrichment?",
                                           "updatedAt":  "2018-10-14T23:32:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyOTkxMDkxOQ==",
                                           "createdAt":  "2018-10-15T15:55:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pakrym",
                                           "body":  "\u003e Why for example DebugLogger might not wish to hold onto scope objects same as ConsoleLogger does.\r\n\r\nBecause it doesn\u0027t log scope information. If we add support for logging scopes to it we would use `ISupportExternalScope `\r\n\r\n\u003e Another question would be why was it chosen that EventSourceLogger does not hold onto scopes and immediately logs the event without any enrichment?\r\n\r\nThat\u0027s that pattern ETW uses for activities. You log event for entering and leaving the scope and don\u0027t include the additional information in messages themselves. (https://blogs.msdn.microsoft.com/vancem/2015/09/14/exploring-eventsource-activity-correlation-and-causation-features/ for more info)",
                                           "updatedAt":  "2018-10-15T15:55:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMDEwNjI5NQ==",
                                           "createdAt":  "2018-10-16T05:32:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBEc2DA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "D3-LucaPiombino",
                                                                               "createdAt":  "2020-05-16T21:23:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@pakrym we may need to re-think this strategy, the intent of scopes is that they do flow to each of the logs within that scope (by whatever means is native to the underlying technology of course). If we aren\u0027t do that properly then the feature isn\u0027t very useful.",
                                           "updatedAt":  "2018-10-16T05:32:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMDQ0MTQ3OQ==",
                                           "createdAt":  "2018-10-16T23:55:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rymeskar",
                                           "body":  "\u003e Because it doesn\u0027t log scope information. If we add support for logging scopes to it we would use ISupportExternalScope\r\n\r\nThat\u0027d be great if you could add the scoping capability to BatchingLogger and DebugLogger as well.\r\n\r\n\u003e That\u0027s that pattern ETW uses for activities. You log event for entering and leaving the scope and don\u0027t include the additional information in messages themselves. \r\n\r\nThanks for the pointers on the EventSource Activities. I read through it and you are right, this should be the way to go.\r\n\r\nI currently have these things that I need to research/test in regards to activity correlation:\r\n\r\n1. Why does the activityId in the PerfView-collected logs appear the same throughout the request (even though BeginScope has been called multiple times)?\r\n2. Why is the activityId displayed as a GUID and not a more human readable \u0027path\u0027 as described in the document\r\n3. For our custom collector, I will need to allow the keyword TasksFlowActivityIds on System.Threading.Tasks.TplEventSource; otherwise the activity correlation would not work correctly. [This should be enabled by default in PerfView]\r\n",
                                           "updatedAt":  "2018-10-16T23:55:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6l1whb",
                                           "createdAt":  "2025-04-07T07:48:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Keep this open please, especially in relation to buffered logging.",
                                           "updatedAt":  "2025-04-07T07:48:10Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Converging the story behind BeginScope across the Loggers",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36400",
        "createdAt":  "2018-12-18T13:38:19Z",
        "number":  36400,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-04-22T04:32:05Z",
        "body":  "This is what the current code looks like to disable scopes. It should be possible to do this in a more first class way on the ILoggerBuilder (similar to SetMinimalLevel).\r\n\r\n```C#\r\npublic static IWebHostBuilder CreateWebHostBuilder(string[] args) =\u003e\r\n            WebHost.CreateDefaultBuilder(args)\r\n                .ConfigureLogging(logging =\u003e\r\n                {\r\n                    logging.Services.Configure\u003cLoggerFilterOptions\u003e(o =\u003e\r\n                    {\r\n                        o.CaptureScopes = false;\r\n                    });\r\n                })\r\n                .UseStartup\u003cStartup\u003e();\r\n````\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMSVVmw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNDUzMDMzMQ==",
                                           "createdAt":  "2021-04-22T04:32:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "cc @shirhatti ",
                                           "updatedAt":  "2021-04-22T04:32:05Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Disabling scope capture should be configurable on the ILoggerBuilder via an extension method",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50033",
        "createdAt":  "2019-09-25T17:03:24Z",
        "number":  50033,
        "author":  "TheXenocide",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-05-18T22:25:43Z",
        "body":  "So I\u0027ve been digging around for quite a bit trying to determine the best approach to migrating functionality we\u0027ve currently implemented against our own logging abstraction to Microsoft.Extensions.Logging and I\u0027m unsure where the best place to gather up ambient state data might be.\r\n\r\nWe have a variety of AsyncLocal based diagnostic types which we use to for filtering, querying, and correlating our log data, especially across multiple services or parallelized work streams. For example, we have a DiagnosticCorrelationContext which is effectively a stack of chained IDs that can be used to identify the hierarchy of causation in commonly reused code. We also apply categories and establish Key-\u003eValue ambient properties which makes it possible to query things like UI events by the document ID of the tab they originate from. \r\n\r\nAll of our context objects tend to have access to the logger of the type that created it, but from what I\u0027ve read, `BeginScope` only applies to the type that its created on (so an `ILogger\u003cMyObject\u003e` will only maintain scope on events logged within `MyObject`). If that\u0027s the case it would defeat the purpose of the metadata being ambient across the logging of all nested calls (Correlation needs to travel from class to class across assemblies and even service boundaries).\r\n\r\nOur existing abstraction supports an `IDictionary\u003cstring, string\u003e` of properties on a per log event basis which is not from ambient context, so that\u0027s the state we\u0027re passing to `TState` when translating calls from our logger to the MS abstraction; we will eventually phase out our abstraction altogether as we manage to weave dependency injection and the MS abstraction deeper into our codebase. Just as an additional note on this detail, we\u0027re translating our `IDictionary\u003cstring, string\u003e` to an `IDictionary\u003cstring, object\u003e` as that seems to be the most supported `TState` type across providers (I had to dig through source code and articles to find this; it sure would be nice if there was better documentation/definition to how structured logging should be treated). We had considered gathering up our ambient state and adding it into this dictionary, but then it would only apply to events logged through our abstraction and so we would never be able to fully migrate and any logging from other libraries would not correlate with ours.\r\n\r\nCurrently I\u0027m considering the possibility of making an implementation of `ILoggerFactory` that acts as a decorator over the default implementation (`LoggerFactory.CreateLogger` is not virtual so I can\u0027t inherit and override) which then wraps the created `ILogger` in a decorator that calls `BeginScope` passing the ambient state before calling the internal log state. If this is the only approach then I wonder what the most appropriate way would be for me to do this only if IncludeScopes is set to true, though I\u0027m honestly hoping there\u0027s a better way (all of our context objects are, themselves, disposable and I\u0027d rather not allocate and dispose on every call to every log statement). I saw an `IExternalScopeProvider` type, but it\u0027s not particularly well documented; is this a route I should pursue instead?\r\n\r\nThanks kindly for any insight you might be able to provide.\r\nEDIT: Typo/Formatting",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMkhxZg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNTYzNDgwMA==",
                                           "createdAt":  "2019-09-26T18:42:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheXenocide",
                                           "body":  "So digging through source code, I\u0027m getting the impression that the BeginScope method does in fact typically use AsyncLocal and so might serve the needs we\u0027re looking for? Perhaps we will want our context objects to simply wrap the call to BeginScope and Dispose. I\u0027m seeing that EventSourceLogger prefers IDictionary\u003cstring, string\u003e whereas NLog and Serilog appear to prefer IDictionary\u003cstring, object\u003e. We\u0027ll definitely be using NLog in our initial conversion since there\u0027s some additional points of integration we\u0027ve added there, though we may eventually be able to phase out those implementation-specific bits in favor of something more based around this MS abstraction.\r\n\r\nPerhaps we would be better off using Message Templates? I wish there was an easy way to identify what the expected behaviors could be across Console, EventLog, EventSource, etc. Perhaps implementing 3rd parties like NLog and Serilog would benefit from some sort of common state extraction extensions or something that could understand basic object reflection, IDictionary\u003cstring, string\u003e and IDictionary\u003cstring, object\u003e or something? The EventSourceLogger seems to have the most robust implementation/configuration I\u0027ve seen so far, though I don\u0027t see any signs that its documented anywhere; it might serve as a solid foundation/example for 3rd parties to use as a source of de facto standard or baseline example? Just some ideas, trying to make this a little less difficult to evaluate for the next people to come along.",
                                           "updatedAt":  "2019-09-26T18:42:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNDI1NTE0Mg==",
                                           "createdAt":  "2021-03-22T17:31:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSo I\u0027ve been digging around for quite a bit trying to determine the best approach to migrating functionality we\u0027ve currently implemented against our own logging abstraction to Microsoft.Extensions.Logging and I\u0027m unsure where the best place to gather up ambient state data might be.\r\n\r\nWe have a variety of AsyncLocal based diagnostic types which we use to for filtering, querying, and correlating our log data, especially across multiple services or parallelized work streams. For example, we have a DiagnosticCorrelationContext which is effectively a stack of chained IDs that can be used to identify the hierarchy of causation in commonly reused code. We also apply categories and establish Key-\u003eValue ambient properties which makes it possible to query things like UI events by the document ID of the tab they originate from. \r\n\r\nAll of our context objects tend to have access to the logger of the type that created it, but from what I\u0027ve read, `BeginScope` only applies to the type that its created on (so an `ILogger\u003cMyObject\u003e` will only maintain scope on events logged within `MyObject`). If that\u0027s the case it would defeat the purpose of the metadata being ambient across the logging of all nested calls (Correlation needs to travel from class to class across assemblies and even service boundaries).\r\n\r\nOur existing abstraction supports an `IDictionary\u003cstring, string\u003e` of properties on a per log event basis which is not from ambient context, so that\u0027s the state we\u0027re passing to `TState` when translating calls from our logger to the MS abstraction; we will eventually phase out our abstraction altogether as we manage to weave dependency injection and the MS abstraction deeper into our codebase. Just as an additional note on this detail, we\u0027re translating our `IDictionary\u003cstring, string\u003e` to an `IDictionary\u003cstring, object\u003e` as that seems to be the most supported `TState` type across providers (I had to dig through source code and articles to find this; it sure would be nice if there was better documentation/definition to how structured logging should be treated). We had considered gathering up our ambient state and adding it into this dictionary, but then it would only apply to events logged through our abstraction and so we would never be able to fully migrate and any logging from other libraries would not correlate with ours.\r\n\r\nCurrently I\u0027m considering the possibility of making an implementation of `ILoggerFactory` that acts as a decorator over the default implementation (`LoggerFactory.CreateLogger` is not virtual so I can\u0027t inherit and override) which then wraps the created `ILogger` in a decorator that calls `BeginScope` passing the ambient state before calling the internal log state. If this is the only approach then I wonder what the most appropriate way would be for me to do this only if IncludeScopes is set to true, though I\u0027m honestly hoping there\u0027s a better way (all of our context objects are, themselves, disposable and I\u0027d rather not allocate and dispose on every call to every log statement). I saw an `IExternalScopeProvider` type, but it\u0027s not particularly well documented; is this a route I should pursue instead?\r\n\r\nThanks kindly for any insight you might be able to provide.\r\nEDIT: Typo/Formatting\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTheXenocide\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-22T17:31:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNTI5NTQ0MQ==",
                                           "createdAt":  "2021-04-23T00:37:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@davidfowl @shirhatti do you have any recommendation for this question? I think wrapping BeginScope can work but I am not sure about Message Template. ",
                                           "updatedAt":  "2021-04-23T00:37:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzYwODQyMg==",
                                           "createdAt":  "2021-05-18T22:25:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheXenocide",
                                           "body":  "To add a little bit of extra information now that we\u0027ve been working with things for awhile, BeginScope in general works well enough for constant data and we settled on using implementations of `IReadOnlyCollection\u003cKeyValuePair\u003cstring, object\u003e\u003e ` (which `Dictionary\u003cstring, object\u003e` works for as well) which seems to have the widest support profile for purely structured data, but the original intention here was to allow log messages to access a variety of ambient data at the time of logging which come from different sources without needing to create new scopes every time these pieces of data might change (trying to avoid the additional cost of creating more AsyncLocals when the data is already ambiently available elsewhere with different lifetimes). \r\n\r\nWe tried making a class that implemented `IEnumerable\u003cKeyValuePair\u003cstring, object\u003e\u003e` and implemented the `GetEnumerator` method using an iterator (`yield return`, etc.) and calling one BeginScope at application startup passing it a single instance of that type, but unfortunately it appears the set is evaluated immediately rather than at the time of logging. I figured we might be able to make individual value wrappers to be returned in the `object` portion of the `KeyValuePair\u003cstring, object\u003e` which is more likely be evaluated on a per-log basis, but it\u0027s a bit of a painful rewrite from what we originally had so for the time being we\u0027ve disabled this ambient scope metadata. It would be helpful if we could register some sort of provider which enhances the scope/per-log metadata without needing to be so implementation-aware; as it stands right now there\u0027s entirely too much implementation-detail-specific code necessary to be comfortable.",
                                           "updatedAt":  "2021-05-18T22:25:43Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Question: Best Place to Integrate Ambient Scope State/Metadata in Logging",
        "labels":  [
                       "question",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36090",
        "createdAt":  "2019-09-26T22:41:50Z",
        "number":  36090,
        "author":  "TheXenocide",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCyEY5Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pharring",
                                            "createdAt":  "2019-11-10T05:06:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viktor-svub",
                                            "createdAt":  "2020-04-02T11:41:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dferretti",
                                            "createdAt":  "2020-05-08T00:23:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mjeanrichard",
                                            "createdAt":  "2021-01-28T14:52:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NetherGranite",
                                            "createdAt":  "2022-11-29T01:45:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nick-dodonov",
                                            "createdAt":  "2023-08-21T09:00:39Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-01-04T16:05:31Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nI am trying to collate ambient and global diagnostic data to be provided as structured event data with logs and have found that, despite the fact that an `IExternalScopeProvider` interface exists, there\u0027s no way to configure the default `LoggerFactory` to use anything but the default `LoggerExternalScopeProvider`. I literally only need to supply one extra state object to loggers that support external scope which, ideally, would involve inheriting the default provider and overriding `ForEachScope` (or some similar such facility that would let me tie in to all scope-aware loggers to provide one additional global-but-contextual set of metadata).\r\n\r\n### Describe the solution you\u0027d like\r\nThe default `LoggerExternalScopeProvider` should be registered using the same `TryAdd`/`Singleton` behavior seen in `LoggingServiceCollectionExtensions.AddLogging` as is used for other default logging interface implementations and `LoggerFactory` should receive it as an injected constructor parameter.\r\n\r\n### Describe alternatives you\u0027ve considered\r\nIn the meantime (unless there\u0027s a more advisable solution) I think I\u0027m going to wind up creating a decorator (since none of the methods I need to override are virtual) implementation of `ILoggerFactory` whose only purpose is to wrap the implementation of `LoggerFactory` so that, after calling the default implementation\u0027s `AddProvider` method I can call `SetScopeProvider` to replace the one the default implementation used with a decorator implementation of `IExternalScopeProvider` in which the implementation of `ForEachScope` will call the callback with a state object gathered from our custom contextual diagnostic scope and global values either before or after calling the default implementation.\r\n\r\n### Additional context\r\nFrom the archived repository: https://github.com/aspnet/Logging/issues/875\r\nRelated: https://github.com/aspnet/Extensions/issues/644\r\nQuestion that prompted my deep dive: https://github.com/aspnet/Extensions/issues/2398\r\nPR containing an alternative non-DI solution: https://github.com/aspnet/Extensions/pull/2170",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmUOVEg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzE3NzM3Mw==",
                                           "createdAt":  "2019-10-01T18:50:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCs7x2A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "viktor-svub",
                                                                               "createdAt":  "2020-04-02T11:41:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mjeanrichard",
                                                                               "createdAt":  "2021-01-28T14:52:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rkoelbel",
                                                                               "createdAt":  "2022-09-28T07:26:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "TheXenocide",
                                           "body":  "It turns out even if I decorate the default `LoggerFactory`, while I\u0027m able to provide additional scope to the various configured providers, the default `Logger` still winds up with `ScopeLoggers` created by the default `LoggerExternalScopeProvider` which then aren\u0027t returned when the individual providers. Since the `Logger` and `Logger\u003cT\u003e` classes are internal and `LoggerFactory` stores its scope provider in a field typed as `LoggerExternalScopeProvider` instead of `IExternalScopeProvider` it looks like I can\u0027t even use reflection to temporarily work around the issue. So far as I can tell, there is literally no benefit to the interface of IExternalScopeProvider unless one wants to completely re-implement all of `LoggerFactory`, `Logger`, `Logger\u003cT\u003e`, and `LoggerExternalScopeProvider` since all of these types are either internal, strongly coupled, or do not provide sufficient capacity to override implementation (when I say there\u0027s no value to the interface I mean its existence provides about as much functionality in the existing implementation structure as simply having made `LoggerExternalScopeProvider` a public sealed class and never having made the interface at all).",
                                           "updatedAt":  "2019-10-01T18:50:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU1NjYxNA==",
                                           "createdAt":  "2020-05-08T00:01:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "As part of the migration of components from dotnet/extensions to dotnet/runtime (https://github.com/aspnet/Announcements/issues/411) we will be bulk closing some of the older issues. If you are still interested in having this issue addressed, just comment and the issue will be automatically reactivated (even if you aren\u0027t the author). When you do that, I\u0027ll page the team to come take a look. If you\u0027ve moved on or workaround the issue and no longer need this change, just ignore this and the issue will be closed in **7 days**.\n\nIf you know that the issue affects a package that has moved to a different repo, please consider re-opening the issue in that repo. If you\u0027re unsure, that\u0027s OK, someone from the team can help!",
                                           "updatedAt":  "2020-05-08T00:01:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU2Mzk1Ng==",
                                           "createdAt":  "2020-05-08T00:27:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dferretti",
                                           "body":  "Please keep active 👍 ",
                                           "updatedAt":  "2020-05-08T00:27:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU2Mzk3Ng==",
                                           "createdAt":  "2020-05-08T00:27:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Paging @dotnet/extensions-migration ! This issue has been revived from staleness. Please take a look and route to the appropriate repository.",
                                           "updatedAt":  "2020-05-08T00:27:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU2NTM3Ng==",
                                           "createdAt":  "2020-05-08T00:33:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBYD5mQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "jzbuaa",
                                                                               "createdAt":  "2020-11-26T09:30:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dferretti",
                                           "body":  "I\u0027m subscribed to a handful of issues related to this, so there might be a more recent one out there..\r\nbut the main thing I\u0027d like to be able to do is to inject this IExternalScopeProvider into my other services (middlewares of sorts) and know that any logger that supports external scope will make use of whatever scopes they add.",
                                           "updatedAt":  "2020-05-08T00:33:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU2NTM5NA==",
                                           "createdAt":  "2020-05-08T00:33:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Paging @dotnet/extensions-migration ! This issue has been revived from staleness. Please take a look and route to the appropriate repository.",
                                           "updatedAt":  "2020-05-08T00:33:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTYwNDExMA==",
                                           "createdAt":  "2020-05-08T03:03:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-05-08T03:03:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODc0NzUzMw==",
                                           "createdAt":  "2020-05-14T16:30:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheXenocide",
                                           "body":  "@dferretti RE:\r\n\u003e but the main thing I\u0027d like to be able to do is to inject this IExternalScopeProvider into my other services (middlewares of sorts) and know that any logger that supports external scope will make use of whatever scopes they add.\r\n\r\nI believe to accomplish that you can just use ILogger.BeginScope in your middleware. ",
                                           "updatedAt":  "2020-05-14T16:30:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODg4MTc5OQ==",
                                           "createdAt":  "2020-05-14T20:55:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dferretti",
                                           "body":  "You\u0027re right! I had forgotten what I originally was looking for when this issue notified me the other day. The logger BeginScope works fine for all that. I remember now what I was looking for at the time - a way to inject my own IExternalScopeProvider that would be used, so I could also inject it to other services for outgoing events/messages. Basically an async context might accumulate several scoped logging values as it progresses, and for example when it got to a part where we were going to send something over rabbitmq to another service we could include these values and recreate them in the downstream service. But after a while we settled on a different approach that didn\u0027t depend on pulling scoped log context values, and instead was more similar to https://github.com/dotnet/aspnetcore/pull/7921",
                                           "updatedAt":  "2020-05-14T20:55:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNDYzMzQwMw==",
                                           "createdAt":  "2020-10-22T17:07:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Related to https://github.com/dotnet/runtime/issues/36546",
                                           "updatedAt":  "2020-10-22T17:07:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZQ5US",
                                           "createdAt":  "2025-01-04T16:05:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Is this a duplicate of \u003chttps://github.com/dotnet/runtime/issues/50590\u003e, which was fixed in \u003chttps://github.com/dotnet/runtime/pull/67520\u003e?",
                                           "updatedAt":  "2025-01-04T16:05:31Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Use DI to Configure IExternalScopeProvider",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36515",
        "createdAt":  "2019-10-10T05:59:25Z",
        "number":  36515,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-14T21:05:38Z",
        "body":  "We\u0027ve already spent some cycles improving the noop case [here](https://github.com/aspnet/Extensions/issues/864) now we need to look more closely at the overhead when using `dotnet trace`:\r\n\r\nWhen running an ASP.NET Core application with just the event source logger and this command line to collect logs:\r\n\r\n```\r\ndotnet trace collect -p 42748 --providers Microsoft-Extensions-Logging:2:1\r\n```\r\n\r\nHere\u0027s what the allocations look like:\r\n\r\n![image](https://user-images.githubusercontent.com/95136/66542689-1fe62700-eae8-11e9-9f4f-3b7c4d77d70d.png)\r\n\r\nSome of these are inside of EventSource itself and some are inside of the Logger provider implementation.\r\n\r\n@shirhatti ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKRKCtw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU1NjUyNA==",
                                           "createdAt":  "2020-05-08T00:01:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "As part of the migration of components from dotnet/extensions to dotnet/runtime (https://github.com/aspnet/Announcements/issues/411) we will be bulk closing some of the older issues. If you are still interested in having this issue addressed, just comment and the issue will be automatically reactivated (even if you aren\u0027t the author). When you do that, I\u0027ll page the team to come take a look. If you\u0027ve moved on or workaround the issue and no longer need this change, just ignore this and the issue will be closed in **7 days**.\n\nIf you know that the issue affects a package that has moved to a different repo, please consider re-opening the issue in that repo. If you\u0027re unsure, that\u0027s OK, someone from the team can help!",
                                           "updatedAt":  "2020-05-08T00:01:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTM3OTQ3MA==",
                                           "createdAt":  "2020-05-15T17:17:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBEY2fQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2020-05-15T17:22:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "shirhatti",
                                           "body":  "@ericstj How do use labels/milestones on your team? I want to make sure we bring this up during triage as a 5.0 candidate",
                                           "updatedAt":  "2020-05-15T17:17:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzI0MzcyMQ==",
                                           "createdAt":  "2020-07-23T21:33:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@davidfowl is the goal here to make this completely allocation free at steady state?  Did you have specific ideas for low-hanging fruit that we should look at first?",
                                           "updatedAt":  "2020-07-23T21:33:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzI3NjI2Mg==",
                                           "createdAt":  "2020-07-23T23:13:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@ericstj as close as we can get to that. I can\u0027t remember where those allocations were coming from. We should get a new profile to see if any of the low hanging fruit sticks out.",
                                           "updatedAt":  "2020-07-23T23:13:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4OTA3ODk2Nw==",
                                           "createdAt":  "2020-09-08T19:08:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Here\u0027s a short summary of an experimentation:\r\n\r\nusing\r\n```c#\r\n            for (int i = 0; i \u003c 10000; i++)\r\n            {\r\n                _logger.LogCritical(\"logging critical info\");\r\n            }\r\n```\r\n\r\nThe below screenshot shows the allocations meanwhile dotnet trace is running for above application process:\r\n\r\n![image](https://user-images.githubusercontent.com/5897654/92498508-920b3400-f1af-11ea-8409-da3b6ac1bd42.png)\r\n\r\n\r\nFrom going over the callstacks:\r\n\r\n1) FormattedLogValues gets instantiated below: https://github.com/dotnet/runtime/blob/3c1b48ee29f13cac93a86829374b917375a49a2d/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/LoggerExtensions.cs#L393 \r\n\r\n\r\n2) For KeyValuePair\u003cstring, string\u003e gets instantiated in the GetProperties call below: https://github.com/dotnet/runtime/blob/5ae76c503b78d99c96eb8970a98c408af842a562/src/libraries/Microsoft.Extensions.Logging.EventSource/src/EventSourceLogger.cs#L196-L210\r\n\r\n- [ ] TODO: Confirm in the screenshot KeyValuePair\u003cstring, string\u003e is an array. (consider perhaps using ArrayPool here.)\r\n\r\n3) Then as part of the Log API implemented by EventSourceLogger we end up boxing data such as KeyValuePair\u003cstring, string\u003e, LogLevel, int, etc. when\r\n\r\nhttps://github.com/dotnet/runtime/blob/171ef84617fe54c2a94019f729e61b077554047c/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L1303\r\n\r\nultimately gets called.\r\nThis happens when calling the internal LoggingEventSource APIs such as Message(..), ActivityStart(..) as shown below:\r\n\r\nhttps://github.com/dotnet/runtime/blob/171ef84617fe54c2a94019f729e61b077554047c/src/libraries/Microsoft.Extensions.Logging.EventSource/src/LoggingEventSource.cs#L159-L165\r\n\r\nhttps://github.com/dotnet/runtime/blob/171ef84617fe54c2a94019f729e61b077554047c/src/libraries/Microsoft.Extensions.Logging.EventSource/src/LoggingEventSource.cs#L171-L177\r\n\r\n\r\n\r\nCausing the extra memory allocations seen in the screenshot. Workaround could be to add overloads instead of having the one with params get called\r\n\r\ncc: @noahfalk \r\n\r\nI have a Diagnostics Hub Report file (*.diagsession) but github doesnt allow attaching to a comment here.\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2020-10-27T20:17:28Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Improve perfomance for EventSourceLoggerProvider with EventPipe active",
        "labels":  [
                       "tenet-performance",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36020",
        "createdAt":  "2019-11-13T19:32:50Z",
        "number":  36020,
        "author":  "lodejard",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-10T02:47:22Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nThe weakly-typed structured logging can be done directly from an application \r\nclasses, which helps my teams add the right logging at the right place without \r\ninterrupting their development workflow.\r\n\r\nI\u0027m am trying to adopt strongly-typed logging in application domain components but \r\nadding extension methods requires all of our developers to have the discipline to switch\r\nover to a static logging extension class, declare a field and method there first, then switch \r\nback and finally add the call at the place they were at in the application class.\r\n\r\n### Describe the solution you\u0027d like\r\nI would like to be able to put weakly-typed logger calls in the application class and have them\r\nall converted to strongly typed extension methods with a Roslyn analyzer.\r\n\r\n```csharp\r\npublic class MyWorker\r\n{\r\n    private readonly ILogger\u003cMyWorker\u003e _logger;\r\n\r\n    public MyWorker(ILogger\u003cMyWorker\u003e logger)\r\n    {\r\n        _logger = logger;\r\n    }\r\n\r\n    public void FetchKeys(string keyRingName)\r\n    {\r\n        _logger.LogInformation(\"FetchingKeys: Fetching all of the keys in the {KeyRing} key ring\", keyRingName);\r\n    }\r\n}\r\n```\r\nShould provide a code fix ends up like:\r\n\r\n```csharp\r\n    public void FetchKeys(string keyRingName)\r\n    {\r\n        _logger.FetchingKeys(keyRingName);\r\n    }\r\n...\r\npublic internal class MyWorkerLoggerExtensions\r\n{\r\n    private readonly LogMessage\u003cstring\u003e _logFetchingKeys = (LogLevel.Information, nameof(FetchingKeys), \"Fetching all of the keys in the {KeyRing} key ring\");\r\n\r\n    /// \u003csummary\u003e\r\n    /// Fetching all of the keys in the {KeyRing} key ring\r\n    /// \u003c/summary\u003e\r\n    /// \u003cparam name=\"logger\"\u003eThe \u003csee cref=\"ILogger\"/\u003e to write to.\u003c/param\u003e\r\n    /// \u003cparam name=\"keyRing\"\u003eThe {KeyRing} log message property.\u003c/param\u003e\r\n    public void FetchingKeys(ILogger\u003cMyWorker\u003e logger, string keyRing) =\u003e _logFetchingKeys.Log(logger, keyRing);\r\n}\r\n```\r\n\r\n### Describe alternatives you\u0027ve considered\r\nYou could put your log definitions in a data file as well, but that still leaves you with the problem that it breaks up your developer workflow. And compile-time codegen brings in a whole new set of challenges.\r\n\r\n### Additional context\r\nIdeally there should also be a warning when a strongly-typed log extension method is unused. There should also be a simple way to assert from a unit test that the category/eventid strings have not changed, because refactoring method, class, and namespace name is pretty easy.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKuouPA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTQ4MzIyNA==",
                                           "createdAt":  "2020-05-07T20:35:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-05-07T20:35:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMjQ4MTM2MQ==",
                                           "createdAt":  "2020-10-19T22:41:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Existing Logging Analyzers today live under \r\n\r\nhttps://github.com/dotnet/extensions/blob/master/src/Logging/Logging.Analyzers/src/\r\n\r\nI marked this up-for-grabs in case someone wants to add an analyzer for this scenario as well.\r\n\r\nAlso a link to docs on LoggerMessage.Define: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/loggermessage?view=aspnetcore-5.0#loggermessagedefine\r\n\r\ncc: @davidfowl",
                                           "updatedAt":  "2020-10-19T22:41:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxOTk5MDMzMg==",
                                           "createdAt":  "2020-10-31T21:26:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Could also offer a code fix to create an extension method when calling an undefined method on `ILogger\u003cTCategoryName\u003e`:\r\n\r\n```C#\r\n    public void FetchKeys(string keyRingName)\r\n    {\r\n        _logger.FetchingKeys(keyRingName);\r\n    }\r\n```\r\n\r\nIt wouldn\u0027t know the entire format string in that case, but it could use `\"{KeyRingName}\"` (with the recommended initial capital) and let the developer add the rest.",
                                           "updatedAt":  "2020-10-31T21:26:00Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "CodeFix to make strongly-typed ILogger extension method from weakly-typed calls",
        "labels":  [
                       "enhancement",
                       "code-analyzer",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50035",
        "createdAt":  "2019-12-23T19:30:29Z",
        "number":  50035,
        "author":  "ducalai",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOA4WlfQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YZahringer",
                                            "createdAt":  "2020-01-06T08:34:21Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-03-22T20:52:54Z",
        "body":  "We have a scenario where our application should get its logging `LogLevel` configuration using an API. Then, we would like to set it at runtime. I know Serilog supports it using `LoggingLevelSwitch`, but how to solve it directly in Microsoft.Extensions.Logging? If not possible now, are you planning to support it?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOL-_2QA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2ODY4MzgzNw==",
                                           "createdAt":  "2019-12-24T07:46:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gfoidl",
                                           "body":  "You can create / update the [Configuration](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-3.0#configuration) with the values from the mentioned API before building the host.",
                                           "updatedAt":  "2019-12-24T07:46:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MTAzMTM0NA==",
                                           "createdAt":  "2020-01-06T07:14:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ducalai",
                                           "body":  "So, in Program.cs using `.ConfigureLogging(this IWebHostBuilder hostBuilder, Action\u003cWebHostBuilderContext, ILoggingBuilder\u003e configureLogging)` extension method? Once host is created, it is no more possible?",
                                           "updatedAt":  "2020-01-06T07:14:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MDQxMDQ0Mg==",
                                           "createdAt":  "2020-01-30T19:16:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "Logging monitors config for changes and reloads, so if your configuration source supports reloading (such as the built-in JSON one), then changing the file will automatically trigger a reload and reconfiguration of logging without requiring a restart of the app.",
                                           "updatedAt":  "2020-01-30T19:16:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MjU3NTc3Mw==",
                                           "createdAt":  "2020-02-05T19:37:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AwesomeYuer",
                                           "body":  "dynamic seting ILogger\u0027s LogLevel at runtime is very very useful @anurse ",
                                           "updatedAt":  "2020-02-05T19:37:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNDI1NTI5Ng==",
                                           "createdAt":  "2021-03-22T17:31:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe have a scenario where our application should get its logging `LogLevel` configuration using an API. Then, we would like to set it at runtime. I know Serilog supports it using `LoggingLevelSwitch`, but how to solve it directly in Microsoft.Extensions.Logging? If not possible now, are you planning to support it?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003educalai\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-22T17:31:36Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "LogLevel at runtime",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/35922",
        "createdAt":  "2020-03-25T00:28:23Z",
        "number":  35922,
        "author":  "Davilink",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-02T15:29:58Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nI add some data to my exception and i didn\u0027t see them in the Console.\r\n\r\n```\r\nvar exceptions = new List\u003cException\u003e();\r\ntry\r\n{\r\n    await Task.WhenAll(queries);\r\n}\r\ncatch(Exception)\r\n{\r\n    for (var j=0; j\u003cqueries.Count; j++)\r\n    {\r\n        if (queries[j].Exception?.InnerException != null)\r\n        {\r\n            var exception = queries[j].Exception!.InnerException!;\r\n            // we add date for logging purpose\r\n            exception.Data.Add(\"userTaskId\", userTasksId[j]);\r\n            exceptions.Add(exception);\r\n        }\r\n    }\r\n}\r\n\r\nif (exceptions.Any())\r\n{\r\n    throw _apiExceptionFactory.Create(\r\n        await ProblemDetailsWithContextFactory(ApiErrors.UNKNOWN, StatusCodes.Status500InternalServerError, \"\", \"Some reassignment failed.\"),\r\n        new AggregateException(exceptions)\r\n    );\r\n}\r\n\r\n// somewhere else\r\n_loggerFactory.CreateLogger(exception.CategoryName)\r\n                .Log(exception.LogLevel, exception, exception.ProblemDetails.Detail, exception.ProblemDetails.Extensions);\r\n```\r\n\r\nbut when i go into the console, the output doesn\u0027t display the data.\r\n```\r\nfail: MyApp.Controllers.ReassignmentController[0]\r\n      Some reassignment failed.\r\nMyApp.Shared.Helper.ApiExceptions.ApiException`1[MyApp.Controllers.ReassignmentController]: Some reassignment failed.\r\n ---\u003e System.AggregateException: One or more errors occurred. (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.)\r\n ---\u003e System.Net.Http.HttpRequestException: Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.\r\n ---\u003e System.Net.Sockets.SocketException (10061): Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.DiagnosticsHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at MyApp.CamundaClient.Implementations.UserTaskClient.SetAssignee(Boolean isAssignmentForced, Guid id, String userId, CancellationToken token) in C:\\Users\\MyUser\\source\\repos\\MyRepo\\MyApp.CamundaClient\\Implementations\\UserTaskClient.cs:line 287\r\n   at MyApp.Controllers.ReassignmentController.UpdateAssignee(IList`1 userTasksId, String userId) in C:\\Users\\MyUser\\source\\repos\\MyRepo\\MyApp\\Controllers\\ReassignmentController.cs:line 280\r\n   --- End of inner exception stack trace ---\r\n ---\u003e (Inner Exception dotnet/extensions#1) System.Net.Http.HttpRequestException: Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.\r\n ---\u003e System.Net.Sockets.SocketException (10061): Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.DiagnosticsHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at MyApp.CamundaClient.Implementations.UserTaskClient.SetAssignee(Boolean isAssignmentForced, Guid id, String userId, CancellationToken token) in C:\\Users\\MyUser\\source\\repos\\MyRepo\\MyApp.CamundaClient\\Implementations\\UserTaskClient.cs:line 287\u003c---\r\n ---\u003e (Inner Exception dotnet/extensions#2) System.Net.Http.HttpRequestException: Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.\r\n ---\u003e System.Net.Sockets.SocketException (10061): Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   ...\r\n```\r\n\r\ni was expecting that the console log provider would display someting like\r\n```\r\nfail: MyApp.Controllers.ReassignmentController[0]\r\n      Some reassignment failed.\r\nMyApp.Shared.Helper.ApiExceptions.ApiException`1[MyApp.Controllers.ReassignmentController]: Some reassignment failed.\r\n ---\u003e System.AggregateException: One or more errors occurred. (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.) (Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.)\r\n ---\u003e System.Net.Http.HttpRequestException: Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.\r\n ---\u003e System.Net.Sockets.SocketException (10061): Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.DiagnosticsHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at MyApp.CamundaClient.Implementations.UserTaskClient.SetAssignee(Boolean isAssignmentForced, Guid id, String userId, CancellationToken token) in C:\\Users\\MyUser\\source\\repos\\MyRepo\\MyApp.CamundaClient\\Implementations\\UserTaskClient.cs:line 287\r\n   at MyApp.Controllers.ReassignmentController.UpdateAssignee(IList`1 userTasksId, String userId) in C:\\Users\\MyUser\\source\\repos\\MyRepo\\MyApp\\Controllers\\ReassignmentController.cs:line 280\r\n   --- End of inner exception stack trace ---\r\n ---\u003e (Inner Exception dotnet/extensions#1) System.Net.Http.HttpRequestException: Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.\r\n ---\u003e System.Net.Sockets.SocketException (10061): Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.DiagnosticsHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at MyApp.CamundaClient.Implementations.UserTaskClient.SetAssignee(Boolean isAssignmentForced, Guid id, String userId, CancellationToken token) in C:\\Users\\MyUser\\source\\repos\\MyRepo\\MyApp.CamundaClient\\Implementations\\UserTaskClient.cs:line 287\u003c---\r\n    Data:\r\n        userTaskId: {d69cd7a4-6e0b-11ea-93d6-94e6f7918376}\r\n ---\u003e (Inner Exception dotnet/extensions#2) System.Net.Http.HttpRequestException: Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.\r\n ---\u003e System.Net.Sockets.SocketException (10061): Aucune connexion n’a pu être établie car l’ordinateur cible l’a expressément refusée.\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   ...\r\n```\r\n### Describe the solution you\u0027d like\r\nAdd the Data field in the log.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYxaNDA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwMzU3OTE1NA==",
                                           "createdAt":  "2020-03-25T00:48:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Davilink",
                                           "body":  "something like https://gist.github.com/nblumhardt/dddaa2139bbf4b561fa7",
                                           "updatedAt":  "2020-03-25T00:48:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMDA2MzUzMw==",
                                           "createdAt":  "2020-04-06T22:10:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This seems reasonable. Care to submit a PR.",
                                           "updatedAt":  "2020-04-06T22:10:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNDkyMDU1Mw==",
                                           "createdAt":  "2020-05-06T22:17:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "/cc @maryamariyan ",
                                           "updatedAt":  "2020-05-06T22:17:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzM2NzA4NA==",
                                           "createdAt":  "2020-07-24T06:25:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WernerMairl",
                                           "body":  "Hi,\r\nworking on this...\r\n\r\ncurrent implementation is:\r\n\r\n``\r\n      WriteMessage(textWriter, exception.ToString(), singleLine);\r\n``\r\nwe can replace/extend this with a key/value trace like [this](https://docs.microsoft.com/en-us/dotnet/api/system.exception.data?view=netcore-3.1)...\r\n\r\nbut, a few aspects must be considered\r\n\r\nexception.Tostring() output has multiple \"sections\" separated by newlines:\r\n- classname\r\n- message\r\n- innerexception.tostring()\r\n- stacktrace\r\n\r\nour trace can only be appended to the result of exception.ToString()\r\n(re-implementing exception.tostring() locally may not a good idea\r\n\r\nbasically: \r\n- we can append the key-value trace after the stacktrace - we should agree about the concrete format.\r\n\r\n- what we do with innerexception.data() ? (and innerexception.innerexception.data.....) ?\r\n\r\n\"best\" solution:\r\nModify/extend System.Exception (toString()) in a way that allows  exception.data output in the right place of the hierarchy...\r\n\r\nbut touching System.Exception is a different story ;-)\r\n\r\n\r\nMy current [playground](https://github.com/WernerMairl/runtime/commit/dbe86529d79c8ced1b3ca6a674750ffdf5829b6a)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2020-07-24T06:51:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTQxMjIyMw==",
                                           "createdAt":  "2020-07-29T03:39:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "@WernerMairl thank you for the prototype. A couple notes\r\n\r\n---\r\n\r\n- I see you are updating SimpleConsoleFormatter in the prototype. Also note, we have two other built-in formatters: systemd and json, (found under SystemdConsoleFormatter and JsonConsoleFormatter). (ConsoleFormatters are new concepts introduced since .NET5 preview8, you can follow instructions [here](https://github.com/dotnet/runtime/issues/34742#issuecomment-661052568) to test them out). So perhaps those would need to be updated too to additionally log Exception.Data.\r\n- I see you plan on adding a property to ConsoleFormatterOptions. That is fine it could then be accessed by all three formatters (simple, json and systemd). For this to work you would also need to update the  Microsoft.Extensions.Logging.Console.cs ref file. (see [link]( https://github.com/dotnet/runtime/blob/2a4284b9f3eb2ad95fdf324f0249d372abff96df/docs/coding-guidelines/updating-ref-source.md)).\r\n- (Since your prototype updates ConsoleFormatterOptions) note that adding any new APIs would need to go through [a .NET API review process](https://github.com/dotnet/runtime/blob/master/docs/project/api-review-process.md). \r\nI think we won\u0027t get to this in 5.0, but it can be considered in the next release.\r\n\r\n--- \r\n\r\nOne question that arrises here is that, do we want to have an option for the log formatter that toggles between logging Exception.Data or do we expect that to always be showing up for exceptions containing this information. If the answer is we do not need the toggling behaviour then there is no need for you to make the API addition.\r\n\r\n---\r\n\r\n@WernerMairl, while your at it you could also perhaps make use of the [gist in this comment](https://github.com/dotnet/runtime/issues/34742#issuecomment-660339333) to play around with custom log formatting, not only the built-in ones if you like.\r\n",
                                           "updatedAt":  "2020-07-29T03:44:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MDMzMDU3NA==",
                                           "createdAt":  "2020-08-07T05:29:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WernerMairl",
                                           "body":  "@maryamariyan a few ideas and answers:\r\n\r\n - \"do we want to have an option for the log formatter\"\r\nin my experience: yes, we se should implement this feature as Opt-In!\r\nwhy:\r\nException.Data is a long existing feature, and I\u0027m not the only one that haa used this property really often.\r\nBUT there may be a lot of data (maybe data that is sensitive for security) inside the dictionary. \r\nPrinting out this data as default may cause a lot of problems\r\n    - security\r\n    - performance (log tracer performance, log sizes)\r\n\r\n \r\n- i have changed the ref file\r\n\r\n- i have improved and simplified the entire implementation by modifying the **System.Exception** class....\r\nthat may be cause a lot of discussions...\r\n\r\nWhy modifying exception.cs ?\r\nthe only/best way to implement this feature for the \"innerException\" hierarchy.\r\nI cannot see a lot of value in this feature, if it does not print out the data- dictionary also for the innerexception hierarchy \r\n\r\n- i have implemented this now for SimpleConsole and SystemDConsole.\r\nNot implemented yet for Jsonconsole because current implementation there has also some issue with formatting values... \r\nJSonConsoleFormatter is the one and only Formatter that is ignoring innerexception (intended ?) and does his own exception formatting implementation...\r\n\r\nI need some feedback about going forward this way - specially adopting System.Exception in this or another way....\r\nregards\r\nWerner\r\n\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2020-08-07T05:29:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MDcwNzYwMQ==",
                                           "createdAt":  "2020-08-07T20:50:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "\u003e JSonConsoleFormatter is the one and only Formatter that is ignoring innerexception (intended ?) and does his own exception formatting implementation... \r\n\r\nHow is JsonConsoleFormatter the only one that is ignoring InnerException?\r\n",
                                           "updatedAt":  "2020-08-07T20:50:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MDgzMzM2OQ==",
                                           "createdAt":  "2020-08-08T06:39:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WernerMairl",
                                           "body":  "SystemDConsoleFormatter and SimpleConsoleFormatter are calling exception.ToString() and the \"ToString()\" default implementation is calling [innerException.ToString()](https://github.com/dotnet/runtime/blob/fb18a11af37209018899ed31470bd639fb9fc9b6/src/libraries/System.Private.CoreLib/src/System/Exception.cs#L124).\r\n \r\nThe JSonConsoleFormatter (in my understanding) is NOT calling exception.ToString() but it prints out all the exception properties one by one IGNORING innerexception.....\r\nhttps://github.com/dotnet/runtime/blob/51ad8e451c354c8e0d6cd271b49e519de05ec9cd/src/libraries/Microsoft.Extensions.Logging.Console/src/JsonConsoleFormatter.cs#L55\r\n\r\n\r\n\r\nThis is the result from a quick investigation on the JSonConsoleFormatter. I can write a test about this \"innerException\" thing to provide evidence if necessary....\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n ",
                                           "updatedAt":  "2020-08-10T12:22:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MDk0MTc1MQ==",
                                           "createdAt":  "2020-08-08T15:29:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "The documentation of [Exception.Data](https://docs.microsoft.com/en-us/dotnet/api/system.exception.data?view=net-5.0#remarks) says that each key is \"typically an identifying string\". If a key is not a string, I think key.ToString() will be good enough for logging. From \u003chttps://source.dot.net/\u003e and \u003chttps://referencesource.microsoft.com/\u003e, it looks like keys are almost always constant strings, except:\r\n\r\n- [System.Linq.Expressions.Interpreter.SaveTraceToException](https://github.com/dotnet/runtime/blob/53976d38b1bd6917b8fa4d1dd4f009728ece3adb/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/Interpreter/InterpretedFrame.cs#L144-L150) uses typeof([InterpretedFrameInfo](https://github.com/dotnet/runtime/blob/53976d38b1bd6917b8fa4d1dd4f009728ece3adb/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/Interpreter/LightCompiler.cs#L264-L277)) as a key.  \u003chttps://github.com/dotnet/runtime/issues/39433\u003e\r\n- [Microsoft.VisualBasic.FileIO.FileSystem.FxCopyOrMoveDirectory](https://github.com/dotnet/runtime/blob/53976d38b1bd6917b8fa4d1dd4f009728ece3adb/src/libraries/Microsoft.VisualBasic.Core/src/Microsoft/VisualBasic/FileIO/FileSystem.vb#L990-L1001) uses paths of files as keys, so they are not constants.\r\n- In .NET Framework, [System.Activities.XamlIntegration.ActivityXamlServices.Compile](https://github.com/microsoft/referencesource/blob/a48449cb48a9a693903668a71449ac719b76867c/System.Activities/System/Activities/XamlIntegration/ActivityXamlServices.cs#L320-L326) uses [TextExpressionCompilerError](https://github.com/microsoft/referencesource/blob/a48449cb48a9a693903668a71449ac719b76867c/System.Activities/System/Activities/XamlIntegration/TextExpressionCompilerError.cs) instances as keys. TextExpressionCompilerError does not override ToString(), and there can be several in the same Exception.\r\n\r\nException.InnerException in JsonConsoleFormatter is \u003chttps://github.com/dotnet/runtime/issues/40507\u003e.\r\n\r\n(It might also be useful to translate properties like [SqlException.Number](https://docs.microsoft.com/dotnet/api/microsoft.data.sqlclient.sqlexception.number?view=sqlclient-dotnet-standard-2.0) to JSON properties, but doing that in JsonConsoleFormatter would require API changes to let the application control which properties of each exception type are interesting and how their values should be formatted. For instance, [ReflectionTypeLoadException.Types](https://docs.microsoft.com/dotnet/api/system.reflection.reflectiontypeloadexception.types?view=net-5.0) is public but not interesting.)",
                                           "updatedAt":  "2020-08-13T18:22:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzA1MjM5MQ==",
                                           "createdAt":  "2020-08-12T18:59:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "\u003e SystemDConsoleFormatter and SimpleConsoleFormatter are calling exception.ToString() and the \"ToString()\" default implementation is calling innerException.ToString().\r\n\r\nGood point. Seems like a proper thing to do is for JsonConsoleFormatter to also call exception.ToString() as also described in this comment: https://github.com/dotnet/runtime/issues/40507#issuecomment-673050569",
                                           "updatedAt":  "2020-08-12T18:59:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1Mjk1NTMxOQ==",
                                           "createdAt":  "2021-06-02T11:39:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBtXyjg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Davilink",
                                                                               "createdAt":  "2021-06-04T03:36:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "yufeih",
                                           "body":  "It is possible for `Exception.ToString()` to print `Exception.Data`, potentially with an opt-in flag for security, performance reasons?",
                                           "updatedAt":  "2021-06-02T11:39:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jFo0M",
                                           "createdAt":  "2023-08-02T15:29:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Davilink",
                                           "body":  "Maybe we could create a new properties on the Exception making it explicit that it\u0027s will be logged, so with this suggestion no breaking change is inserted for previous code that used the data field and doesn\u0027t expect it to be logged.\r\n`Exception.LoggingData` or maybe `Exception.Details` or other suggestion is welcome",
                                           "updatedAt":  "2023-08-02T15:29:58Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Microsoft.Extensions.Logging.Console: should log Exception.Data",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/34739",
        "createdAt":  "2020-04-03T06:23:54Z",
        "number":  34739,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-14T21:06:38Z",
        "body":  "### Describe the bug\r\nToday the EventSourceLogger does a manual JSON serialization of the exception missing a set of fields that make it hard to re-create the exception out of process.\r\n\r\n### Expected behavior\r\nWe should include all of the appropriate fields in order to accomplish this.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKOHzOQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMTMyODUzMA==",
                                           "createdAt":  "2020-04-09T04:58:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-04-09T04:58:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTA5ODQxMw==",
                                           "createdAt":  "2020-09-01T19:57:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@maryamariyan is this still 5.0?",
                                           "updatedAt":  "2020-09-01T19:57:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTg5NjUwNQ==",
                                           "createdAt":  "2020-09-02T17:48:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "no, will move out of 5.0 as it is a nice to have.\r\n\r\n---\r\n\r\nMore info here:\r\n\r\ne.g. in [ExceptionInfo](https://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Extensions.Logging.EventSource/src/ExceptionInfo.cs), we would like to have more fields such as StackTrace.\r\n\r\nRelated code snippet in [dotnet/diagnostics](https://github.com/dotnet/diagnostics): \r\n\r\n- [ ] [LoggerException.GetObjectData](https://github.com/dotnet/diagnostics/blob/a4afa82786c231c4d2ffeafd19c77e6ab44dfb48/src/Microsoft.Diagnostics.Monitoring/Logging/LoggerException.cs#L23-L37)\r\n\r\n- [ ] [ExceptionJson](https://github.com/dotnet/diagnostics/blob/ddbc75e32b5051fdb5146cf82a1d1deee321a5e8/src/Microsoft.Diagnostics.Monitoring/DiagnosticsEventPipeProcessor.cs#L177) from MessageJson",
                                           "updatedAt":  "2021-01-25T20:25:36Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[EventSourceLogger]: Improve exception serialization such that it can be re-created on the other side",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38045",
        "createdAt":  "2020-06-17T17:57:40Z",
        "number":  38045,
        "author":  "voroninp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-Y0Mg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NightlyRevenger",
                                            "createdAt":  "2025-01-23T06:25:04Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-01-23T07:53:21Z",
        "body":  "When running in production environment  I\u0027d like to have few log messages, if nothing terrible happens. \r\nBut in case of failure I need to get all the details and how request was processed.\r\nThe problem is that each log entry is independent, and log level is configured on application start.\r\n\r\n### Describe the solution you\u0027d like\r\nWhy not let logger have additional mode of operation?\r\n1. All messages are grouped in a batch (default \"size\" = all the messages related to processing single request)\r\n2. Sending batchade messages works this way:\r\n    - If there are messages with particular log level, then all messages are sent.\r\n    - Otherwise messeges are filtered according to the configured log level.\r\n\r\nFor example:\r\nI can have as many `LogTrace` calls as I want in my code, but these messsages won\u0027t appear in log unless I call `LogError`, which is equivalent to dynamically switching to `Trace` log level in case of error.\r\n\r\nThis mode can affect performance however, because all messages should be kepr in memory until batch is completed.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOm4M-SQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0Nzc1OTExMA==",
                                           "createdAt":  "2020-06-22T20:41:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Have you tried using scopes, I feel like that could help group all logs for a certain request into one. And also for filter set configure the log level in appsettings.json",
                                           "updatedAt":  "2020-06-22T20:41:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODAwODg1NA==",
                                           "createdAt":  "2020-06-23T08:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "voroninp",
                                           "body":  "@maryamariyan But scope does not affect filtering, does it? So if log level is set to `Warn` all \u0027Info\u0027 will be filtered out in the scope. That\u0027s not what I need. ",
                                           "updatedAt":  "2020-06-23T09:02:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDkwNDE0Mg==",
                                           "createdAt":  "2020-08-17T14:09:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBNk1LQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "voroninp",
                                                                               "createdAt":  "2020-08-17T15:06:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Bouke",
                                           "body":  "I was recently thinking of a similar use-case as well. As long as nothing interesting (bad) happens, I don\u0027t need to log adjacent messages not meeting the level criterium. However when something interesting happens, I\u0027d like to get all the adjacent messages -- even those below the level criterium.\r\n\r\nTake the following pseudo-code:\r\n\r\n```c#\r\nvar provider = new ConsoleLoggerProvider(LogLevel.Warning);\r\nvar logger = provider.CreateLogger(...);\r\n\r\nusing (logger.Scope(\"Handling request X\"))\r\n{\r\n    using (logger.Scope(\"Performing Authn\"))\r\n    {\r\n        logger.LogDebug(\"Authenticated as Y\");\r\n    }\r\n    using (logger.Scope(\"Performing Authz\"))\r\n    {\r\n        logger.LogError(\"User has no permission!\");\r\n    }\r\n}\r\n```\r\n\r\nCurrently only the `Error` message would be logged with its scopes, and the `Debug` message would be discarded.\r\n\r\nWhat I would like in this contrived example is to record everything that was captured within the outer scope, as there was some message that did meet the level criterium. So even though `Debug` message doesn\u0027t meet the `Warning` level criterium, it is still recorded as it is in the same (parent) scope as the `Error` message.",
                                           "updatedAt":  "2020-08-17T14:09:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NTI4MjU1Mw==",
                                           "createdAt":  "2020-08-18T06:30:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I have been wondering about whether [ILogger.Log\\\u003cTState\u003e](https://docs.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger.log?view=dotnet-plat-ext-2.1) is allowed to save its parameters to a queue, return, and have a different thread examine the TState instance or invoke the formatter delegate later.\r\n\r\n- If this is allowed, then my applications cannot safely log TState instances that contain references to mutable (including disposable) or thread-affine objects and lazily read their properties.\r\n- If this is not allowed, then any batching logger has to invoke the formatter delegate or serialize the `IReadOnlyList\u003cKeyValuePair\u003cstring, object\u003e\u003e` before returning. For conditional logging per batch, the logger would have to do this even if no errors have been logged yet.\r\n\r\n[ConsoleLogger.Log](https://github.com/dotnet/runtime/blob/53976d38b1bd6917b8fa4d1dd4f009728ece3adb/src/libraries/Microsoft.Extensions.Logging.Console/src/ConsoleLogger.cs#L53-L58) invokes the formatter delegate and then sends the resulting string to the queue. This logging is not conditional per batch though, so it never needs to waste time formatting log entries that would be discarded later. In Microsoft.Extensions.Logging.AzureAppServices, [BatchingLogger.Log](https://github.com/dotnet/aspnetcore/blob/979632683c720152cc04d0684644c40512f4e953/src/Logging.AzureAppServices/src/BatchingLogger.cs#L60-L67) behaves likewise.",
                                           "updatedAt":  "2020-08-18T09:39:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NTYxMzAxMw==",
                                           "createdAt":  "2020-08-18T17:29:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Ah, you\u0027re right, scope is not what you need.\r\n\r\nThe closest thing I can think of that could help with this is to setup filter rules in appsettings.json file and then update it later during the lifetime of the application as needed.\r\n\r\n```\r\n{\r\n  \"Logging\": {\r\n    \"EventSource\": { // EventSource provider\r\n      \"LogLevel\": {\r\n        \"Default\": \"Warning\", // All categories of EventSource provider.\r\n        \"Microsoft.Hosting\": \"Trace\" // Debug:Microsoft.Hosting category.\r\n      }\r\n    },\r\n    \"Console\": {\r\n      \"LogLevel\": {\r\n        \"Default\": \"Debug\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```",
                                           "updatedAt":  "2020-08-18T17:29:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NzQ1NTExOQ==",
                                           "createdAt":  "2020-08-20T08:24:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e If this is not allowed, then any batching logger has to invoke the formatter delegate or serialize the `IReadOnlyList\u003cKeyValuePair\u003cstring, object\u003e\u003e` before returning. \r\n\r\nThe `Exception exception` parameter of `ILogger.Log\u003cTState\u003e` may also contain references to mutable or thread-affine objects. That makes it difficult to implement batching as an `ILoggerFactory` that supports providers whose loggers may read properties of exceptions. (Such exceptions would not be fully serializable for remoting either, but binary serialization is being deprecated anyway.)\r\n\r\nAnother problem is that there is no standard way to report the original time stamp of the log entry to the provider\u0027s `ILogger` when the batch is eventually committed. It seems the best that can be done is to add an `{OriginalDateTimeOffset}` key to the `IReadOnlyList\u003cKeyValuePair\u003cstring, object\u003e\u003e` and to make the formatter delegate format it as well. Each structured logging provider would have to add support for `{OriginalDateTimeOffset}`; the batching logger cannot just append `{{OriginalDateTimeOffset}}` to the value of `{OriginalFormat}` because the braces would make that ambiguous to parse.\r\n\r\nBatching seems much easier to implement as part of a logging provider, where it would know exactly which properties of `state` and `exception` need to be preserved.",
                                           "updatedAt":  "2020-08-20T08:24:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42HVCq",
                                           "createdAt":  "2021-08-29T22:55:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e whether ILogger.Log\\\u003cTState\u003e is allowed to save its parameters to a queue\n\nAccording to \u003chttps://github.com/dotnet/runtime/issues/57803#issuecomment-900897996\u003e, it is not allowed.",
                                           "updatedAt":  "2021-08-29T22:55:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bgj-v",
                                           "createdAt":  "2025-01-23T06:58:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NightlyRevenger",
                                           "body":  "That would be useful feature",
                                           "updatedAt":  "2025-01-23T06:58:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bgz5J",
                                           "createdAt":  "2025-01-23T07:43:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "IBufferedLogger and BufferedLogRecord were added for this purpose in .NET 9.0.  If a logger provider implements IBufferedLogger in the same class as ILogger, then a log buffer can use that to write a series of buffered log records when the buffer is being flushed.  Some logger providers support IBufferedLogger already, but not all.  This was proposed in \u003chttps://github.com/dotnet/runtime/issues/104129\u003e and implemented in \u003chttps://github.com/dotnet/runtime/pull/103138\u003e.\n\nThe missing piece is the log buffer itself and the logic for when to flush the buffer.  That API is being proposed in \u003chttps://github.com/dotnet/extensions/issues/5123\u003e and implemented in \u003chttps://github.com/dotnet/extensions/pull/5635\u003e.  Unlike IBufferedLogger, this part looks like it won\u0027t be *supported* on .NET Framework, even though it may be technically compatible.\n\nIf the upcoming implementation in dotnet/extensions is not satisfactory, then you can instead implement a custom ILoggerFactory that takes care of the buffering and flushes the buffers to IBufferedLogger when requested.  That isn\u0027t a trivial job, though.  Challenges:\n\n- how to interoperate with Activity like the default LoggerFactory does\n- risk of running out of memory if the buffer grows too much\n- serialisation of values in structured TState\n- serialisation of exceptions",
                                           "updatedAt":  "2025-01-23T07:53:21Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Commiting batch of log messages conditionally.",
        "labels":  [
                       "question",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/40242",
        "createdAt":  "2020-07-29T03:05:49Z",
        "number":  40242,
        "author":  "Popsikill",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-23T15:02:29Z",
        "body":  "### If you believe you have an issue that affects the security of the platform please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://technet.microsoft.com/en-us/mt764065.aspx) but ONLY if it is reported through email.\r\n\r\n### Describe the bug\r\nWhen logging (via an implemented ILogger such as Console) the date/numeric formats are not localized.\r\nIt appears currently there is no automatic localization of parameters in the `LogValuesFormatter` class - it is set to use the Invariant Culture.\r\nAs the Invariant Culture leans heavily toward American formatting - for the rest of the world this doesn\u0027t really fit.\r\nIdeally we should be able to DI to specify what culture should be use - with Invariant Culture being the backup.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. `Microsoft.Extensions.Logging.Abstractions`, Version 3.1.6.0\r\n2. Create a basic .net core project\r\n3. Configure to use `ConsoleLogger`\r\n4. Inject and use ILogger with a simple `DateTime`\r\n![image](https://user-images.githubusercontent.com/5036005/88751258-91d44d80-d19a-11ea-9462-e44b141f7819.png)\r\n5. Message reads as Invariant Culture date format `Action to begin at 07/29/2020 12:52:12`\r\n\r\n### Expected behavior\r\nExpected to be able to override culture by either;\r\n- Setting `CultureInfo.CurrentCulture` (or one of it\u0027s variants),\r\n- Setting `Thread.CurrentThread.CurrentCulture` (or one of it\u0027s variants),\r\n- A localization package similar to ASP.NET Core\u0027s `UseRequestLocalization` that would be configurable for the use-cases.\r\n\r\n### Screenshots\r\nN/A\r\n\r\n### Additional context\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.302\r\n Commit:    41faccf259\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19041\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.302\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.6\r\n  Commit:  3acd9b0cd1\r\n\r\n.NET Core SDKs installed:\r\n  3.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONd-3WA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NzcxMTM2Nw==",
                                           "createdAt":  "2020-08-02T18:56:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-08-02T18:56:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2Nzc5OTUzMw==",
                                           "createdAt":  "2020-08-03T04:42:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-03T04:42:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2Nzk2NzE5Mw==",
                                           "createdAt":  "2020-08-03T11:21:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBMTFwA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Popsikill",
                                                                               "createdAt":  "2020-08-04T04:46:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "ASP.NET Core [RequestLocalizationMiddleware](https://github.com/dotnet/aspnetcore/blob/979632683c720152cc04d0684644c40512f4e953/src/Middleware/Localization/src/RequestLocalizationMiddleware.cs) sets CultureInfo.CurrentCulture and CultureInfo.CurrentUICulture but I don\u0027t think the HTTP requests should affect how the log file is localized.\r\n\r\n### Possible API and implementation overview\r\n\r\nI haven\u0027t wanted such a feature myself, so I\u0027m not filing a formal API proposal.\r\n\r\n```patch\r\n namespace Microsoft.Extensions.Logging\r\n {\r\n     public partial class LoggingBuilderExtensions\r\n     {\r\n+        // To configure localization, the application will call this existing method.\r\n         public static ILoggingBuilder Configure(this ILoggingBuilder builder, Action\u003cLoggerFactoryOptions\u003e action);\r\n     }\r\n \r\n     public class LoggerFactoryOptions\r\n     {\r\n         public LoggerFactoryOptions();\r\n         public ActivityTrackingOptions ActivityTrackingOptions { get; set; }\r\n \r\n+        // CultureInfo rather than IFormatProvider, so it can be\r\n+        // used as CultureInfo.CurrentCulture during logging.\r\n+        // Defaults to CultureInfo.InvariantCulture.\r\n+        public CultureInfo Culture { get; set; }\r\n     }\r\n }\r\n```\r\n\r\n1. The [LoggerFactory constructor](https://github.com/dotnet/runtime/blob/53976d38b1bd6917b8fa4d1dd4f009728ece3adb/src/libraries/Microsoft.Extensions.Logging/src/LoggerFactory.cs#L68) would copy the value of the Culture property to a new field.\r\n2. The [LoggerFactory.CreateLogger](https://github.com/dotnet/runtime/blob/53976d38b1bd6917b8fa4d1dd4f009728ece3adb/src/libraries/Microsoft.Extensions.Logging/src/LoggerFactory.cs#L121) method would propagate the culture setting to a new property on [Logger](https://github.com/dotnet/runtime/blob/53976d38b1bd6917b8fa4d1dd4f009728ece3adb/src/libraries/Microsoft.Extensions.Logging/src/Logger.cs#L10).\r\n3. The [Logger.Log](https://github.com/dotnet/runtime/blob/53976d38b1bd6917b8fa4d1dd4f009728ece3adb/src/libraries/Microsoft.Extensions.Logging/src/Logger.cs#L16) method would set CultureInfo.CurrentCulture (but not CultureInfo.CurrentUICulture) before calling the first inner ILogger, and restore it after calling the last inner ILogger.\r\n4. The Format methods of [LogValuesFormatter](https://github.com/dotnet/runtime/blob/53976d38b1bd6917b8fa4d1dd4f009728ece3adb/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/LogValuesFormatter.cs) would use the current culture rather than CultureInfo.InvariantCulture. (Strangely, the FormatArgument method is already using the current culture in its string.Join call.)\r\n\r\n### Risks\r\n\r\nHaving Logger.Log temporarily change CultureInfo.CurrentCulture could cost performance.\r\n\r\nIf an application calls ILoggerProvider.CreateLogger directly, then it does not get a Logger instance that would change CultureInfo.CurrentCulture. LogValuesFormatter might then start using non-invariant cultures even though the application did not opt in to that.\r\n\r\nIf a library has defined its own TState type (e.g. if it wants more parameters than LoggerMessage.Define supports, \u003chttps://github.com/dotnet/runtime/issues/35060\u003e), then that type is presumably using the invariant culture now, and would not automatically support this feature if an application using the library requests it. That can\u0027t be helped.\r\n\r\n### Alternatives\r\n\r\nCould pass the localization setting to TState (e.g. [FormattedLogValues](https://github.com/dotnet/runtime/blob/53976d38b1bd6917b8fa4d1dd4f009728ece3adb/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/FormattedLogValues.cs#L17)) and thence to LogValuesFormatter as a parameter, instead of temporarily changing CultureInfo.CurrentCulture. That might be faster and would allow using IFormatProvider instead of CultureInfo. However, it would require changing each ILoggerProvider implementation to save the localization setting, check whether TState supports such a parameter, and then pass it in (perhaps via [IFormattable.ToString](https://docs.microsoft.com/dotnet/api/system.iformattable.tostring?view=net-5.0)).\r\n\r\n### Out of scope\r\n\r\nCultureInfo.CurrentUICulture, because that should involve changing [LoggerMessage](https://github.com/dotnet/runtime/blob/53976d38b1bd6917b8fa4d1dd4f009728ece3adb/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/LoggerMessage.cs#L15) to support localization of format strings.",
                                           "updatedAt":  "2020-08-03T11:28:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc413v4I",
                                           "createdAt":  "2021-08-23T14:07:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RiaanVR",
                                           "body":  "Hi, I just ran into this and it is specific to a few logs that deal with numerical values, part of that includes making sure the logs make sense to the users in various locations. \r\nBeing able to specify a culture upfront would help greatly, so what\u0027s the plan for this? \r\n",
                                           "updatedAt":  "2021-08-23T14:07:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4136lL",
                                           "createdAt":  "2021-08-23T14:58:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Anyone working on this should consider whether the logging source generator (\u003chttps://github.com/dotnet/runtime/issues/36022\u003e, \u003chttps://github.com/dotnet/runtime/pull/51064\u003e) also needs to be changed.",
                                           "updatedAt":  "2021-08-23T14:58:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4137dY",
                                           "createdAt":  "2021-08-23T15:02:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB3c32A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2021-08-23T23:05:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e Being able to specify a culture upfront would help greatly, so what\u0027s the plan for this?\r\n\r\nThere\u0027s no plan currently for this. We\u0027ll evaluate in .NET 7.",
                                           "updatedAt":  "2021-08-23T15:02:29Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "No localization in Logging/LogValuesFormatter (src/Logging/Logging.Analyzers/src/LogValuesFormatter.cs)",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43092",
        "createdAt":  "2020-10-06T15:01:07Z",
        "number":  43092,
        "author":  "puneetg1983",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-14T21:07:02Z",
        "body":  "We are enabling Microsoft.Extensions.Logging ETW events and collecting the ETW Trace using Perfview by [following these steps ](https://techcommunity.microsoft.com/t5/iis-support-blog/capturing-perfview-traces-for-aspnet-core-application/ba-p/342696)\r\n\r\nThen we create a Controller and throw an exception in that and capture the ETW events using PerfView and filter only on ExceptionHandlerMiddleware event and we see this.\r\n\r\nMicrosoft-Extensions-Logging/FormattedMessage | 24,601.538 | ThreadID=\"28,588\"   ProcessorNumber=\"0\" Level=\"4\" FactoryID=\"1\"   LoggerName=\"Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware\"   EventId=\"1\" EventName=\"UnhandledException\"   FormattedMessage=\"An unhandled exception has occurred while executing   the request.\" ActivityID=\"/#14688/1/6/\"\r\n-- | -- | --\r\n\r\nThe exception still shows under Message and MessageJson. Its missing only in FormattedMessage.\r\n\r\nThe expected behavior is that exception message still shows under FormattedMessage event so tools parsing the events can leverage this information.\r\n\r\n### Configuration\r\n\r\nPOST .NET Core 2.1\r\n\r\n### Regression?\r\n\r\nThis seems to be a regression after .NET Core 2.1. Prior versions of .NET Core used to have the real exception message under the FormattedMessage event but now all they contain is the string \"An unhandled exception has occurred while executing   the request\"\r\n\r\nAdding @maryamariyan as she can add more details if needed.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONOtY4A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDMzMTAyOA==",
                                           "createdAt":  "2020-10-06T15:01:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-06T15:01:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzA3Mzg5OA==",
                                           "createdAt":  "2020-10-12T11:54:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@puneetg1983 do you have the equivalent 2.1 log? ",
                                           "updatedAt":  "2020-10-12T11:54:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzE0MDc3Mw==",
                                           "createdAt":  "2020-10-12T14:04:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "puneetg1983",
                                           "body":  "@davidfowl  - [RD0003FF9085BD_w3wp_5796_20201008-153141.zip](https://github.com/dotnet/runtime/files/5365571/RD0003FF9085BD_w3wp_5796_20201008-153141.zip)\r\n",
                                           "updatedAt":  "2020-10-12T14:04:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4032RB",
                                           "createdAt":  "2021-07-26T22:00:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "This is not a blocking issue and it has been present and unserviced in last 2 releases so we are moving to 7.0.",
                                           "updatedAt":  "2021-07-26T22:00:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4061jg",
                                           "createdAt":  "2021-07-27T21:13:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@maryamariyan can we investigate in .NET 6 to see if it\u0027s an easy fix? ",
                                           "updatedAt":  "2021-07-27T21:13:24Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Microsoft.Extensions.logging events don\u0027t contain the real exception message under FormattedMessage event",
        "labels":  [
                       "bug",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48619",
        "createdAt":  "2020-10-26T20:30:20Z",
        "number":  48619,
        "author":  "sebastienros",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_JjKg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "halter73",
                                            "createdAt":  "2020-10-28T21:31:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "juho-hanhimaki",
                                            "createdAt":  "2020-10-29T06:21:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jasper-d",
                                            "createdAt":  "2020-12-01T00:05:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "msallin",
                                            "createdAt":  "2021-01-10T15:58:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "avsorokin",
                                            "createdAt":  "2021-01-20T07:06:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dmpe",
                                            "createdAt":  "2021-02-07T18:47:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tibel",
                                            "createdAt":  "2021-02-19T09:45:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "samsosa",
                                            "createdAt":  "2021-02-22T20:49:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "loic-sharma",
                                            "createdAt":  "2021-03-31T05:27:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TechnoBerry",
                                            "createdAt":  "2021-04-21T21:13:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zihotki",
                                            "createdAt":  "2021-06-23T20:50:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "azinoviev",
                                            "createdAt":  "2021-06-26T18:02:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2021-12-22T21:30:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "weitzhandler",
                                            "createdAt":  "2025-02-17T06:14:22Z"
                                        }
                                    ],
                          "totalCount":  14
                      },
        "updatedAt":  "2022-07-14T21:07:40Z",
        "body":  "Improve performance characteristics of Logging.\r\n\r\nAreas of interest:\r\n\r\n- Improve Console logging performance\r\n- Minimize impact of no-op logging (without requiring to clear providers)\r\n- Define percentage overhead for logging providers\r\n\r\n\r\n\r\n\r\nIssues:\r\n\r\n- [x] #51927 - Logging-Generator should allow to skip the IsEnabled check\r\n- [ ] #50768 - Fix the boxing when using the LoggerMessage.Define is used and values are converted ToString",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMlzUNw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NzY0NjE5Nw==",
                                           "createdAt":  "2021-01-26T16:04:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "https://github.com/dotnet/aspnetcore/issues/29620#issuecomment-767645697",
                                           "updatedAt":  "2021-01-26T16:04:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MTA5OTAxNg==",
                                           "createdAt":  "2021-02-01T19:26:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "TODO: Add Fortunes/EF/MVC/HTTPS scenario with loggers turned on (nothing logged) and re-enable Json Middleware with logging.",
                                           "updatedAt":  "2021-02-01T19:26:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MzY2NDUzMQ==",
                                           "createdAt":  "2021-02-22T20:47:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nImprove performance characteristics of Logging.\r\n\r\nAreas of interest:\r\n\r\n- Improve Console logging performance\r\n- Minimize impact of no-op logging (without requiring to clear providers)\r\n- Define percentage overhead for logging providers\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esebastienros\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003edavidfowl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-22T20:47:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODAwMDk5MQ==",
                                           "createdAt":  "2021-03-26T07:25:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "\u003e Minimize impact of no-op logging (without requiring to clear providers)\r\n\r\nHere\u0027s an isolated benchmark for no-op vs disabled use case: (I had to loop 1000 times for a proper diff to show up between the two cases)\r\n\r\nFor benchmarks\r\n```c#\r\n\r\n        [Benchmark]\r\n        public void LogDebug()\r\n        {\r\n            for (int i = 0; i \u003c 1000; i++)\r\n                _logger.LogDebug(@\"Connection id \u0027{connectionId}\u0027, range [{start}..{end}], options {options}\", ConnectionId, Start, End, Options);\r\n        }\r\n\r\n\r\n        [Benchmark]\r\n        public void LoggerMessage()\r\n        {\r\n            for (int i = 0; i \u003c 1000; i++)\r\n                _loggerMessage2(_logger, ConnectionId, Start, End, Options, null);\r\n        }\r\n```\r\nwhere `loggerMessage2` is:\r\n\r\n```c#\r\n        private static Action\u003cILogger, string, long, long, int, Exception?\u003e _loggerMessage2 = LoggerMessage.Define\u003cstring, long, long, int\u003e(LogLevel.Debug,\r\n                            eventId: 381,\r\n                            formatString: @\"Connection id \u0027{connectionId}\u0027, range [{start}..{end}], options {options}\");\r\n```\r\nand `_logger` as ConsoleLogger,\r\n\r\nUsing \r\n\r\n```c#\r\n// noop (logger.IsEnabled(LogLevel.Debug) will be false here)\r\n                .AddLogging(logBuilder =\u003e\r\n                {\r\n                    logBuilder.AddConsole().SetMinimumLevel(LogLevel.Information);\r\n                })\r\n```\r\n\r\nWe get\r\n```\r\n|            Method |      Mean |    Error |   StdDev |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------ |----------:|---------:|---------:|--------:|------:|------:|----------:|\r\n|          LogDebug | 143.60 us | 2.859 us | 7.225 us | 16.1133 |     - |     - |  128000 B |\r\n|     LoggerMessage |  11.36 us | 0.226 us | 0.338 us |       - |     - |     - |         - |\r\n```\r\n\r\nand using \r\n\r\n\r\n```c#\r\n// disabled\r\n                .AddLogging(logBuilder =\u003e\r\n                {\r\n                    logBuilder.ClearProviders();\r\n                })\r\n```\r\n\r\nwe get:\r\n\r\n```\r\n|            Method |       Mean |     Error |    StdDev |   Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------ |-----------:|----------:|----------:|--------:|------:|------:|----------:|\r\n|          LogDebug | 137.765 us | 2.7482 us | 7.0939 us | 16.1133 |     - |     - |  128000 B |\r\n|     LoggerMessage |   9.170 us | 0.2059 us | 0.6007 us |       - |     - |     - |         - |\r\n```\r\n\r\nlink to [gist](https://gist.github.com/maryamariyan/8e441f9b86dc4d7b3cc85b54b873d235)\r\n\r\nHere\u0027s another perf report using Microsoft.Crank: https://gist.github.com/maryamariyan/06370e90cdc7809037de59a88662d9d6\r\n\r\n\u003e Define percentage overhead for logging providers\r\n\r\nThese benchmarks show there is definitely a perf overhead with adding logging providers",
                                           "updatedAt":  "2021-05-20T17:49:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NDk0NDQzOQ==",
                                           "createdAt":  "2021-05-20T10:07:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBrkFZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gfoidl",
                                                                               "createdAt":  "2021-05-20T10:27:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "I added more benchmarks and a little report with a set of logging use cases here: https://gist.github.com/maryamariyan/0bad4136655f344bf203274e5b7431b4\r\n\r\ncc: @gfoidl @adamsitnik @davidfowl @sebastienros ",
                                           "updatedAt":  "2021-05-20T10:07:16Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Developers using ILogger have improved performance ",
        "labels":  [
                       "tenet-performance",
                       "area-Extensions-Logging",
                       "User Story"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44515",
        "createdAt":  "2020-11-11T09:00:26Z",
        "number":  44515,
        "author":  "maryamariyan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-14T21:10:23Z",
        "body":  "This issue helps keep track of open issues on making improvements for EventSourceLogger\r\n\r\n- [ ] #33486 - Propagate state during ActivityStart\r\n- [ ] #34739 - Improve exception serialization\r\n- [ ] #36515 - Memory allocation improvement\r\n\r\ncc: @shirhatti ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLds1Og==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNTI5NjU2Mg==",
                                           "createdAt":  "2020-11-11T09:00:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\u003cdetails\u003e\n  \u003chr\u003e\n  \u003cb\u003eIssue meta data\u003c/b\u003e\n  \u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eIssue content:\u003c/td\u003e\n    \u003ctd\u003eThis issue helps keep track of open issues on making improvements for EventSourceLogger\r\n\r\n- [ ] #33486 - Propagate state during ActivityStart\r\n- [ ] #34739 - Improve exception serialization\r\n- [ ] #36515 - Memory allocation improvement\r\n\r\ncc: @shirhatti \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eIssue author:\u003c/td\u003e\n    \u003ctd\u003emaryamariyan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eAssignees:\u003c/td\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eMilestone:\u003c/td\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003c/details\u003e",
                                           "updatedAt":  "2020-11-11T09:00:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTMwNDM2MQ==",
                                           "createdAt":  "2021-01-28T19:02:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "We\u0027re not using Team Epic -- @jeffschwMSFT I wonder whether we can delete it now to avoid this confusion",
                                           "updatedAt":  "2021-01-28T19:02:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTMwNTQ2Mw==",
                                           "createdAt":  "2021-01-28T19:04:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBeGLJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2021-01-28T20:10:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@maryamariyan should this be tagged \u0027bottom up\u0027? also stories should have an epic parent - presumably https://github.com/dotnet/runtime/issues/44314 here.",
                                           "updatedAt":  "2021-01-28T19:04:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTM0MDczMA==",
                                           "createdAt":  "2021-01-28T19:58:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBeGkqA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2021-01-28T20:16:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2021-01-28T21:06:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "I flipped all the \u0027Team Epic\u0027s (which I saw) to \u0027user story\u0027 + \u0027bottom up work\u0027",
                                           "updatedAt":  "2021-01-28T19:58:05Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Developers using EventSourceLogger have improved functionality and performance",
        "labels":  [
                       "tracking",
                       "area-Extensions-Logging",
                       "User Story",
                       "Bottom Up Work"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45156",
        "createdAt":  "2020-11-24T15:58:41Z",
        "number":  45156,
        "author":  "IgorMilavec",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-05T18:20:26Z",
        "body":  "### Description\r\n\r\nI have a net5.0 hosted service running from the console with Console TimestampFormat configured in appsettings.json:\r\n\r\n```json\r\n  \"Logging\": {\r\n    \"Console\": {\r\n      \"TimestampFormat\": \"[HH:mm:ss] \"\r\n    },\r\n  },\r\n```\r\nConsole logger output is property timestamped until I edit and save appsettings.json while the app is running. After that the console output is not timestamped anymore until I restart the app.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOK7RXpg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzA2NzM0MA==",
                                           "createdAt":  "2020-11-24T15:58:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis, @jeffhandley\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI have a net5.0 hosted service running from the console with Console TimestampFormat configured in appsettings.json:\r\n\r\n```json\r\n  \"Logging\": {\r\n    \"Console\": {\r\n      \"TimestampFormat\": \"[HH:mm:ss] \"\r\n    },\r\n  },\r\n```\r\nConsole logger output is property timestamped until I edit and save appsettings.json while the app is running. After that the console output is not timestamped anymore until I restart the app.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eIgorMilavec\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-11-24T15:58:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzEwNDA2NQ==",
                                           "createdAt":  "2020-11-24T16:50:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI have a net5.0 hosted service running from the console with Console TimestampFormat configured in appsettings.json:\r\n\r\n```json\r\n  \"Logging\": {\r\n    \"Console\": {\r\n      \"TimestampFormat\": \"[HH:mm:ss] \"\r\n    },\r\n  },\r\n```\r\nConsole logger output is property timestamped until I edit and save appsettings.json while the app is running. After that the console output is not timestamped anymore until I restart the app.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eIgorMilavec\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`, `area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-11-24T16:50:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzEwNjk1MQ==",
                                           "createdAt":  "2020-11-24T16:55:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "@IgorMilavec there is a breaking change with .NET 5.0.\r\n\r\nPlease try updating appsettings.json to below a try again:\r\n\r\n```json\r\n  \"Logging\": {\r\n    \"Console\": {\r\n      \"FormatterOptions\":\r\n      {\r\n        \"TimestampFormat\": \"[HH:mm:ss] \"\r\n      }\r\n    },\r\n  },\r\n```\r\n\r\nHow does your console logging setup look like?",
                                           "updatedAt":  "2020-11-24T17:02:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzEwODkyMA==",
                                           "createdAt":  "2020-11-24T16:58:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Here\u0027s a link to doc on the deprecations and description of what\u0027s new: https://docs.microsoft.com/en-us/dotnet/core/extensions/console-log-formatter",
                                           "updatedAt":  "2020-11-24T16:58:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzIzOTIwNg==",
                                           "createdAt":  "2020-11-24T21:18:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC90L5w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2020-11-25T15:27:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "golfalot",
                                                                               "createdAt":  "2022-03-19T08:02:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kashcode",
                                                                               "createdAt":  "2023-06-13T12:04:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "IgorMilavec",
                                           "body":  "Thank you for pointing me in the right direction. I also needed to add FormatterName for this to work:\r\n```json\r\n    \"Console\": {\r\n      \"FormatterName\": \"simple\",\r\n      \"FormatterOptions\": {\r\n        \"TimestampFormat\": \"[HH:mm:ss] \"\r\n      }\r\n    },\r\n```\r\n\r\nIt is interesting though, that the old setting worked until reload of appsettings.json, which indicates that some compatibility work was done, but not complete.",
                                           "updatedAt":  "2020-11-24T21:18:33Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Microsoft.Extensions.Logging: Console TimestampFormat lost on reload of appsettings.json",
        "labels":  [
                       "question",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/46749",
        "createdAt":  "2021-01-08T15:29:01Z",
        "number":  46749,
        "author":  "weltkante",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-01T04:36:50Z",
        "body":  "### Description\r\n\r\nWhen using `LoggerExtensions.BeginScope` together with `EventLogger` the output is not formatted. The `ConsoleLogger` does not have this behavior and properly formats the scope.\r\n\r\nLooking at the [source](https://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Extensions.Logging.EventLog/src/EventLogLogger.cs#L98) it seems the `EventLogger` wants to fake \"understanding\" `IEnumerable\u003cKeyValuePair\u003cstring, object\u003e\u003e` but in the end just dumps them into a string anyways, bypassing the `ToString` implementation of the scope object which would perform proper formatting.\r\n\r\nAs far as I can see \"understanding\" `IEnumerable\u003cKeyValuePair\u003cstring, object\u003e\u003e` is not a well established pattern, for example if you pass a dictionary to `ILogger.BeginScope` then the `ConsoleLogger` does not dissect the KeyValuePairs. Even if this were an established pattern it should be left to logging sinks which can actually store structured data, the way EventLogger handles things it loses all benefits of either choice:\r\n- its not structured because you can\u0027t parse it for machine consumption (it doesn\u0027t attempt any escaping of keys or values)\r\n- its not formatted so you lose the formatting for human consumption.\r\n\r\nI believe the EventLogger should prefer human consumption and do proper formatting, if you have backwards compatibility concerns please provide a setting in the `EventLogSettings` object. As it stands we cannot use `LoggerExtensions.BeginScope` and have to use our own extension method to work around this behavior and blacklist yours via Analyzer in order to get sensible output in the event log. (and that only works for us because our service is simple enough not to have 3rd party dependencies which might call `LoggerExtensions.BeginScope`)\r\n\r\n\u003cdetails\u003e\u003csummary\u003erepro code\u003c/summary\u003e\r\n\r\n```csharp\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nnamespace BugRepro\r\n{\r\n    public class Startup\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            var host = Host.CreateDefaultBuilder(args);\r\n            host.ConfigureLogging(log =\u003e\r\n            {\r\n                log.AddEventLog();\r\n                log.AddConsole(settings =\u003e settings.IncludeScopes = true);\r\n            });\r\n            host.ConfigureWebHostDefaults(web =\u003e web.UseStartup\u003cStartup\u003e());\r\n            host.Build().Run();\r\n        }\r\n\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddControllers();\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\r\n        {\r\n            if (env.IsDevelopment())\r\n                app.UseDeveloperExceptionPage();\r\n\r\n            app.UseRouting();\r\n            app.UseEndpoints(endpoints =\u003e endpoints.MapControllers());\r\n        }\r\n    }\r\n\r\n    public class TestController : ControllerBase\r\n    {\r\n        private ILogger\u003cTestController\u003e _logger;\r\n\r\n        public TestController(ILogger\u003cTestController\u003e logger)\r\n        {\r\n            _logger = logger;\r\n        }\r\n\r\n        [HttpGet(\"/\")]\r\n        public async Task\u003cIActionResult\u003e GetContent()\r\n        {\r\n            var number = 1234;\r\n            var text = \"text\";\r\n\r\n            using var logScope = _logger.BeginScope(\"Loading entry {SomeNumber} from {SomeText}\", number, text);\r\n\r\n            await Task.Delay(100);\r\n\r\n            var error = \"some error\";\r\n            _logger.LogError(\"Load failed due to {Reason}\", error);\r\n\r\n            return new JsonResult(new { Error = error });\r\n        }\r\n    }\r\n}\r\n```\r\n\u003c/details\u003e\r\n\r\n#### Actual Output\r\n```\r\nCategory: BugRepro.TestController\r\nEventId: 0\r\nSpanId: 45e5c0fccc53ec40\r\nTraceId: 47d8b6c972072740911e0e793a1c7c23\r\nParentId: 0000000000000000\r\nConnectionId: 0HM5JSGST7M13\r\nRequestId: 0HM5JSGST7M13:0000000F\r\nRequestPath: /\r\nActionId: 2afdf0fd-d1cf-449d-8439-02ddef3f3a29\r\nActionName: BugRepro.TestController.GetContent (BugRepro)\r\nSomeNumber: 1234\r\nSomeText: text\r\n{OriginalFormat}: Loading entry {SomeNumber} from {SomeText}\r\n\r\nLoad failed due to some error\r\n```\r\n\r\n#### Expected Output\r\n```\r\nCategory: BugRepro.TestController\r\nEventId: 0\r\nSpanId: 45e5c0fccc53ec40\r\nTraceId: 47d8b6c972072740911e0e793a1c7c23\r\nParentId: 0000000000000000\r\nConnectionId: 0HM5JSGST7M13\r\nRequestId: 0HM5JSGST7M13:0000000F\r\nRequestPath: /\r\nActionId: 2afdf0fd-d1cf-449d-8439-02ddef3f3a29\r\nActionName: BugRepro.TestController.GetContent (BugRepro)\r\nLoading entry 1234 from text\r\nLoad failed due to some error\r\n```\r\n\r\n#### Console Logger\r\n```\r\nfail: BugRepro.TestController[0]\r\n      =\u003e SpanId:45e5c0fccc53ec40, TraceId:47d8b6c972072740911e0e793a1c7c23, ParentId:0000000000000000 =\u003e ConnectionId:0HM5JSGST7M13 =\u003e RequestPath:/ RequestId:0HM5JSGST7M13:0000000F =\u003e BugRepro.TestController.GetContent (BugRepro) =\u003e Loading entry 1234 from text\r\n      Load failed due to some error\r\n```\r\n\r\n### Configuration\r\n\r\n.NET 5\r\n\r\n### Regression?\r\n\r\nunknown\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwSMl6w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjgxNjU2Mg==",
                                           "createdAt":  "2021-01-08T15:29:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen using `LoggerExtensions.BeginScope` together with `EventLogger` the output is not formatted. The `ConsoleLogger` does not have this behavior and properly formats the scope.\r\n\r\nLooking at the [source](https://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Extensions.Logging.EventLog/src/EventLogLogger.cs#L98) it seems the `EventLogger` wants to fake \"understanding\" `IEnumerable\u003cKeyValuePair\u003cstring, object\u003e\u003e` but in the end just dumps them into a string anyways, bypassing the `ToString` implementation of the scope object which would perform proper formatting.\r\n\r\nAs far as I can see \"understanding\" `IEnumerable\u003cKeyValuePair\u003cstring, object\u003e\u003e` is not a well established pattern, for example if you pass a dictionary to `ILogger.BeginScope` then the `ConsoleLogger` does not dissect the KeyValuePairs. Even if this were an established pattern it should be left to logging sinks which can actually store structured data, the way EventLogger handles things it loses all benefits of either choice:\r\n- its not structured because you can\u0027t parse it for machine consumption (it doesn\u0027t attempt any escaping of values)\r\n- its not formatted so you lose the formatting for human consumption.\r\n\r\nI believe the EventLogger should prefer human consumption and do proper formatting, if you have backwards compatibility concerns please provide a setting in the `EventLogSettings` object. As it stands we cannot use `LoggerExtensions.BeginScope` and have to use our own extension method and blacklist yours via Analyzer in order to get sensible output in the event log.\r\n\r\n\u003cdetails\u003e\u003csummary\u003erepro code\u003c/summary\u003e\r\n\r\n```csharp\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nnamespace BugRepro\r\n{\r\n    public class Startup\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            var host = Host.CreateDefaultBuilder(args);\r\n            host.ConfigureLogging(log =\u003e\r\n            {\r\n                log.AddEventLog();\r\n                log.AddConsole(settings =\u003e settings.IncludeScopes = true);\r\n            });\r\n            host.ConfigureWebHostDefaults(web =\u003e web.UseStartup\u003cStartup\u003e());\r\n            host.Build().Run();\r\n        }\r\n\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddControllers();\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\r\n        {\r\n            if (env.IsDevelopment())\r\n                app.UseDeveloperExceptionPage();\r\n\r\n            app.UseRouting();\r\n            app.UseEndpoints(endpoints =\u003e endpoints.MapControllers());\r\n        }\r\n    }\r\n\r\n    public class TestController : ControllerBase\r\n    {\r\n        private ILogger\u003cTestController\u003e _logger;\r\n\r\n        public TestController(ILogger\u003cTestController\u003e logger)\r\n        {\r\n            _logger = logger;\r\n        }\r\n\r\n        [HttpGet(\"/\")]\r\n        public async Task\u003cIActionResult\u003e GetContent()\r\n        {\r\n            var number = 1234;\r\n            var text = \"text\";\r\n\r\n            using var logScope = _logger.BeginScope(\"Loading entry {SomeNumber} from {SomeText}\", number, text);\r\n\r\n            await Task.Delay(100);\r\n\r\n            var error = \"some error\";\r\n            _logger.LogError(\"Load failed due to {Reason}\", error);\r\n\r\n            return new JsonResult(new { Error = error });\r\n        }\r\n    }\r\n}\r\n```\r\n\u003c/details\u003e\r\n\r\n#### Actual Output\r\n```\r\nCategory: BugRepro.TestController\r\nEventId: 0\r\nSpanId: 45e5c0fccc53ec40\r\nTraceId: 47d8b6c972072740911e0e793a1c7c23\r\nParentId: 0000000000000000\r\nConnectionId: 0HM5JSGST7M13\r\nRequestId: 0HM5JSGST7M13:0000000F\r\nRequestPath: /\r\nActionId: 2afdf0fd-d1cf-449d-8439-02ddef3f3a29\r\nActionName: BugRepro.TestController.GetContent (BugRepro)\r\nSomeNumber: 1234\r\nSomeText: text\r\n{OriginalFormat}: Loading entry {SomeNumber} from {SomeText}\r\n\r\nLoad failed due to some error\r\n```\r\n\r\n#### Expected Output\r\n```\r\nCategory: BugRepro.TestController\r\nEventId: 0\r\nSpanId: 45e5c0fccc53ec40\r\nTraceId: 47d8b6c972072740911e0e793a1c7c23\r\nParentId: 0000000000000000\r\nConnectionId: 0HM5JSGST7M13\r\nRequestId: 0HM5JSGST7M13:0000000F\r\nRequestPath: /\r\nActionId: 2afdf0fd-d1cf-449d-8439-02ddef3f3a29\r\nActionName: BugRepro.TestController.GetContent (BugRepro)\r\nLoading entry 1234 from text\r\nLoad failed due to some error\r\n```\r\n\r\n#### Console Logger\r\n```\r\nfail: BugRepro.TestController[0]\r\n      =\u003e SpanId:45e5c0fccc53ec40, TraceId:47d8b6c972072740911e0e793a1c7c23, ParentId:0000000000000000 =\u003e ConnectionId:0HM5JSGST7M13 =\u003e RequestPath:/ RequestId:0HM5JSGST7M13:0000000F =\u003e BugRepro.TestController.GetContent (BugRepro) =\u003e Loading entry 1234 from text\r\n      Load failed due to some error\r\n```\r\n\r\n### Configuration\r\n\r\n.NET 5\r\n\r\n### Regression?\r\n\r\nunknown\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eweltkante\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-08T15:29:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MjQzMjM2OQ==",
                                           "createdAt":  "2021-01-18T19:24:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC-aJcw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "markusschaber",
                                                                               "createdAt":  "2023-06-20T11:10:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "qsdfplkj",
                                           "body":  "The output: \r\n\r\nSomeNumber: 1234\r\nSomeText: text\r\n{OriginalFormat}: Loading entry {SomeNumber} from {SomeText}\r\n\r\nShows the oringal template and the variables... you might not expected this but it is called a template. if you don\u0027t want this you should log:\r\n\r\n_logger.BeginScope($\"Loading entry {number} from {text}\");",
                                           "updatedAt":  "2021-01-18T19:24:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MjQ0MDgwOA==",
                                           "createdAt":  "2021-01-18T19:45:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "\u003e As far as I can see \"understanding\" IEnumerable\u003cKeyValuePair\u003cstring, object\u003e\u003e is not a well established pattern... its not formatted so you lose the formatting for human consumption.\r\n\r\n@weltkante For console logging have you tried using the Json console log formatter? In your sample code changing AddConsole to AddJsonConsole, should give you that. (Refer to docs [here](https://docs.microsoft.com/en-us/dotnet/core/extensions/console-log-formatter) too.)\r\n",
                                           "updatedAt":  "2021-01-18T19:46:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MjQ0MjcyNA==",
                                           "createdAt":  "2021-01-18T19:50:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "@tarekgh @noahfalk are there specific guidelines around using scopes alongside EventLogger?",
                                           "updatedAt":  "2021-01-18T19:50:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MjQ0NjUzNg==",
                                           "createdAt":  "2021-01-18T20:01:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weltkante",
                                           "body":  "@qsdfplkj I know this, its part of the issue description. I believe you are wrong though, your workaround defeats the whole purpose of the extension method capturing the arguments without formatting (only paying the performance for formatting when the logging is enabled).\r\n\r\nplease reread the issue description\r\n- no other of the default loggers does this (for what its worth the Log extension methods don\u0027t do this either, just the scopes)\r\n- the output is not parseable by machine\r\n- the output is not (easily) readable by humans\r\n\r\nThe source implementation goes to great lengths to make the message object passed to the logger formattable (and not just a dictionary) so the fact that the EventLogger discards all that work (while other formatters don\u0027t do this) is clearly a mistake. I\u0027m not against keeping the current behavior for backwards compatibility if thats a concern, but there should be an option to properly format the output for people who actually want a readable event log.\r\n\r\n@maryamariyan \r\n\u003e For console logging have you tried using the Json console log formatter?\r\n\r\nNo I did not notice it. However json is a structured parseable format (it will escape properly so its machine-readable) so it does not have the concerns I\u0027m raising with the EventLogger.\r\n\r\nAlso notice that even the json console logger will output the formatted text (in addition to the structured data):\r\n\r\n\u003e `\"Message\":\"Loading entry 1234 from text\"`\r\n",
                                           "updatedAt":  "2021-01-18T20:01:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MjQ0OTA3Mg==",
                                           "createdAt":  "2021-01-18T20:08:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@maryamariyan I think the ask here is more generic to give the ability to attach a custom formatter to the logger to allow formatting specific type. So, I am seeing this is as a feature request and not just a bug we need to fix. \r\n\r\n@weltkante do you have specific proposal in your mind? ",
                                           "updatedAt":  "2021-01-18T20:08:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MjQ1MjAwOA==",
                                           "createdAt":  "2021-01-18T20:15:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weltkante",
                                           "body":  "\u003e I think the ask here is more generic to give the ability to attach a custom formatter to the logger to allow formatting specific type.\r\n\r\nThe [type](https://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/FormattedLogValues.cs) used by the extension methods is intentionally kept internal, so I don\u0027t think you could write a formatter for it. The custom formatter would just do a `ToString` to invoke the default behavior of the object generated by the `BeginScope` extension. IMHO invoking `ToString` on formattable objects should be the default behavior of everything and not require custom formatters. The problem is that `EventLogger` has a non-default implementation and tries to present structured data in an unstructured way (text dump, not escaped, not machine readable). The console json formatter does a better job, it exposes the formatted message and adds the structured data. Of course its not easily readable, so I don\u0027t think it would be a good fit for the event log.\r\n\r\n\u003e do you have specific proposal in your mind?\r\n\r\nI\u0027d be happy with a flag on the EventLogger settings object to fix this mistreatment of the message object, putting it in line with the other loggers.\r\n\r\nIf you are looking for a more general solution theres the question to solve how to differentiate objects which _only_ want to expose structured data (e.g. a `Dictionary\u003cstring, object\u003e` vs. a structured formattable object generated by the extension method)",
                                           "updatedAt":  "2021-01-18T20:23:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MjQ1NjY5Nw==",
                                           "createdAt":  "2021-01-18T20:27:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "qsdfplkj",
                                           "body":  "Just some research but maybe this helps:  https://source.dot.net/#Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs  It seems to generate the scopes where the  {OriginalFormat} comes from.  Maybe writing a similar class can help you out.\r\nOr: https://source.dot.net/#Microsoft.Extensions.Logging.Abstractions/LogValuesFormatter.cs,",
                                           "updatedAt":  "2021-01-18T20:28:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NDcxMDEyNw==",
                                           "createdAt":  "2021-01-21T15:11:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Searching through source history it appears the suspect logger scope formatting appeared in [this change](https://github.com/dotnet/extensions/pull/1625). I didn\u0027t see anything specific in the commit message, test changes, bug, or PR links clarifies why this aspect of the formatting was changed, but there is the general mention of:\r\n\u003e Clean up the formatting a bit\r\n\u003e - Added headings for various bits of info.\r\n\r\nwhich is the best info I can find on the rationale.\r\n\r\nIts been a few years but maybe @davidfowl remembers the reasoning for it? My personal guess is that David was trying to address the case where someone passes Dictionary\u003cstring,object\u003e as the scope and didn\u0027t notice the change ignored the formatting of the FormattedLogValues type at the same time. Unlike FormattedLogValues, Dictionary\u003cstring,object\u003e.ToString() produces a very unhelpful string to include in a log: \"System.Collections.Generic.Dictionary`2[System.String,System.Object]\"\r\n\r\nMy hunch is that modifying [line 98](https://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Extensions.Logging.EventLog/src/EventLogLogger.cs#L98) to be:\r\n````C#\r\nif (scope is IEnumerable\u003cKeyValuePair\u003cstring, object\u003e\u003e properties \u0026\u0026\r\n    scope is not FormattedLogValues)\r\n````\r\nmight satisfy everyone?\r\n\r\n",
                                           "updatedAt":  "2021-01-21T15:11:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4Nzg3NjQ2Nw==",
                                           "createdAt":  "2021-03-01T11:28:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e My hunch is that modifying [line 98](https://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Extensions.Logging.EventLog/src/EventLogLogger.cs#L98) to be:\r\n\u003e \r\n\u003e ```cs\r\n\u003e if (scope is IEnumerable\u003cKeyValuePair\u003cstring, object\u003e\u003e properties \u0026\u0026\r\n\u003e     scope is not FormattedLogValues)\r\n\u003e ```\r\n\u003e\r\n\u003e might satisfy everyone?\r\n\r\n[FormattedLogValues](https://github.com/dotnet/runtime/blob/c636bbdc8a2d393d07c0e9407a4f8923ba1a21cb/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/FormattedLogValues.cs#L16) is currently internal in Microsoft.Extensions.Logging.Abstractions. To let Microsoft.Extensions.Logging.EventLog access it, would you make it public or add another InternalsVisibleToAttribute?\r\n",
                                           "updatedAt":  "2021-03-01T11:28:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BIyXr",
                                           "createdAt":  "2025-08-31T17:56:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weltkante",
                                           "body":  "Just checked, the original report and above discussion is still applicable to .NET 9/10.",
                                           "updatedAt":  "2025-08-31T17:56:15Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "EventLogger does not mix well with LoggerExtensions.BeginScope",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47951",
        "createdAt":  "2021-02-06T10:12:53Z",
        "number":  47951,
        "author":  "CXuesong",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODLnbgg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mitoihs",
                                            "createdAt":  "2021-05-06T10:05:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "momvart",
                                            "createdAt":  "2022-01-19T14:05:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zdenek-jelinek",
                                            "createdAt":  "2024-01-26T20:44:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wazzamatazz",
                                            "createdAt":  "2024-02-06T13:05:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aayjaychan",
                                            "createdAt":  "2025-03-25T11:25:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IanKemp",
                                            "createdAt":  "2025-08-18T15:53:52Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2023-06-29T18:18:24Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\nOpened via https://github.com/dotnet/runtime/issues/47802#issuecomment-773450789. While the previous issue focuses on the decision of whether `AsyncLocal`s (and execution context) should flow acress `yield return` in async streams, I hope the current one can be triaged to MEL owners, in order to decide on whether the following scoped logging scenario should be supported.\r\n\r\n### Description\r\nConsider the following use case on .NET 5.0 [[.NET Fiddle](https://dotnetfiddle.net/DauJqS)]\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nasync IAsyncEnumerable\u003cint\u003e IntSequence(ILogger logger)\r\n{\r\n    using var scope = logger.BeginScope(\"My scope\");\r\n    logger.LogWarning(\"Log 1\");\r\n    yield return 10;\r\n    logger.LogWarning(\"Log 2\");\r\n    yield return 20;\r\n    logger.LogWarning(\"Log 3\");\r\n    yield return 30;\r\n}\r\n\r\nusing var lf = LoggerFactory.Create(b =\u003e b.AddSimpleConsole(o =\u003e o.IncludeScopes = true));\r\nawait foreach (var i in IntSequence(lf.CreateLogger(\"Root\")))\r\n{\r\n    Console.WriteLine(i);\r\n}\r\n```\r\n\r\nMy expectation is\r\n```\r\n10\r\n20\r\n30\r\nwarn: Root[0]\r\n      =\u003e My scope\r\n      Log 1\r\nwarn: Root[0]\r\n      =\u003e My scope\r\n      Log 2\r\nwarn: Root[0]\r\n      =\u003e My scope\r\n      Log 3\r\n```\r\nActual output is\r\n```\r\n10\r\n20\r\n30\r\nwarn: Root[0]\r\n      =\u003e My scope\r\n      Log 1\r\nwarn: Root[0]\r\n      Log 2\r\nwarn: Root[0]\r\n      Log 3\r\n```\r\nScopes are lost for Log 2 and Log 3.\r\n\r\n### Configuration\r\n* .NET 5 / .NET 6.0.100-preview.1.21103.9\r\n* Microsoft.Extensions.Logging.Console v5.0.0\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n\r\n### Regression?\r\nN/A\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n\r\nThe root cause of this issue is #47802, and `LoggerFactoryScopeProvider` uses `AsyncLocal` to keep logging scope information.\r\nhttps://github.com/dotnet/runtime/blob/f93fee40a84e04c3a28bc4b41b182ca38424c69a/src/libraries/Microsoft.Extensions.Logging/src/LoggerFactoryScopeProvider.cs#L14-L21",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYC2Ovw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDQ0MTE1OA==",
                                           "createdAt":  "2021-02-06T10:13:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\nOpened via https://github.com/dotnet/runtime/issues/47802#issuecomment-773450789. While the previous issue focuses on the decision of whether `AsyncLocal`s (and execution context) should flow acress `yield return` in async streams, I hope the current one can be triaged to MEL owners, in order to decide on whether the following scoped logging scenario should be supported.\r\n\r\n### Description\r\nConsider the following use case on .NET 5.0 [[.NET Fiddle](https://dotnetfiddle.net/DauJqS)]\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nasync IAsyncEnumerable\u003cint\u003e IntSequence(ILogger logger)\r\n{\r\n    using var scope = logger.BeginScope(\"My scope\");\r\n    logger.LogWarning(\"Log 1\");\r\n    yield return 10;\r\n    logger.LogWarning(\"Log 2\");\r\n    yield return 20;\r\n    logger.LogWarning(\"Log 3\");\r\n    yield return 30;\r\n}\r\n\r\nusing var lf = LoggerFactory.Create(b =\u003e b.AddSimpleConsole(o =\u003e o.IncludeScopes = true));\r\nawait foreach (var i in IntSequence(lf.CreateLogger(\"Root\")))\r\n{\r\n    Console.WriteLine(i);\r\n}\r\n```\r\n\r\nMy expectation is\r\n```\r\n10\r\n20\r\n30\r\nwarn: Root[0]\r\n      =\u003e My scope\r\n      Log 1\r\nwarn: Root[0]\r\n      =\u003e My scope\r\n      Log 2\r\nwarn: Root[0]\r\n      =\u003e My scope\r\n      Log 3\r\n```\r\nActual output is\r\n```\r\n10\r\n20\r\n30\r\nwarn: Root[0]\r\n      =\u003e My scope\r\n      Log 1\r\nwarn: Root[0]\r\n      Log 2\r\nwarn: Root[0]\r\n      Log 3\r\n```\r\nScopes are lost for Log 2 and Log 3.\r\n\r\n### Configuration\r\n.NET 5 / .NET 6.0.100-preview.1.21103.9\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n\r\n### Regression?\r\nN/A\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n\r\nThe root cause of this issue is #47802, and `LoggerFactoryScopeProvider` uses `AsyncLocal` to keep logging scope information.\r\nhttps://github.com/dotnet/runtime/blob/f93fee40a84e04c3a28bc4b41b182ca38424c69a/src/libraries/Microsoft.Extensions.Logging/src/LoggerFactoryScopeProvider.cs#L14-L21\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCXuesong\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-06T10:13:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDQ0MjQzMg==",
                                           "createdAt":  "2021-02-06T10:22:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "The context here are actually depending on the `ConfigureAwait` on `await foreach`. It it uses `ConfigureAwait(true)` AND there is valid context, the continuation after yield return will run on the same context(thread).",
                                           "updatedAt":  "2021-02-06T10:22:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDQ0MzI3Nw==",
                                           "createdAt":  "2021-02-06T10:29:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CXuesong",
                                           "body":  "@huoyaoyuan I think `ConfigureAwait` controls whether to execute continuation on the same `SynchronizationContext` rather than `ExecutionContext`. `ExecutionContext` is *always* restored with `await` (but not `yield return` this time). And `AsyncLocal` (or `ThreadLocal`) depends on `ExecutionContext` to flow.\r\n\r\nIf you expand the `foreach` syntax as follows, you will see exactly the same situation\r\n```c#\r\nusing var lf = LoggerFactory.Create(b =\u003e b.AddSimpleConsole(o =\u003e o.IncludeScopes = true));\r\nawait using (var it = IntSequence(lf.CreateLogger(\"Root\")).GetAsyncEnumerator())\r\n{\r\n\twhile (await it.MoveNextAsync().ConfigureAwait(true)) {\r\n    \tConsole.WriteLine(it.Current);\r\n\t}\r\n}\r\n```",
                                           "updatedAt":  "2021-02-06T10:39:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDY4NDAwNA==",
                                           "createdAt":  "2021-02-07T14:33:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I assume this behaves as you\u0027d expect if you added `await Task.Yield();` after you create the scope?",
                                           "updatedAt":  "2021-02-07T14:33:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDcxNTIyOA==",
                                           "createdAt":  "2021-02-07T17:34:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CXuesong",
                                           "body":  "\u003e I assume this behaves as you\u0027d expect if you added `await Task.Yield();` after you create the scope?\r\n\r\n@stephentoub ~Yes.~ No. `await`s does not affect logging scopes, as you may experiment with the .NET Fiddle link posted above.\r\n\r\nActually `AsyncStateMachineBox\u003cT\u003e` is keeping ExecutionContext and restoring it in `MoveNext` call.",
                                           "updatedAt":  "2021-02-10T14:11:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDcyMzc1Mw==",
                                           "createdAt":  "2021-02-07T18:08:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Right,  my point was just that a workaround is to make sure you have an await like that after anything that changes EC.",
                                           "updatedAt":  "2021-02-07T18:08:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDg2MTQzOA==",
                                           "createdAt":  "2021-02-08T04:43:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CXuesong",
                                           "body":  "\u003e Right, my point was just that a workaround is to make sure you have an await like that after anything that changes EC.\r\n\r\n@stephentoub Oh… Did you mean something like this?\r\n```c#\r\nasync IAsyncEnumerable\u003cint\u003e IntSequence(ILogger logger)\r\n{\r\n    using var scope = logger.BeginScope(\"My scope\");\r\n    logger.LogWarning(\"Log 1\");\r\n    yield return 10;\r\n    await Task.Yield()        // \u003c---- yield here\r\n    logger.LogWarning(\"Log 2\");\r\n    yield return 20;\r\n    logger.LogWarning(\"Log 3\");\r\n    yield return 30;\r\n}\r\n```\r\nThen this doesn\u0027t work… I meant `await` captures the EC before leaving the function, and restores it when re-entering. Since we have already lost the EC after `yield return`, the EC captured before `await` is the default EC without `AsyncLocal` values.",
                                           "updatedAt":  "2021-02-08T05:15:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NTA3NDI3MA==",
                                           "createdAt":  "2021-02-08T11:21:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Did you mean something like this?\r\n\r\nNo, as the first line after the using. ",
                                           "updatedAt":  "2021-02-08T11:21:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NjczNDEzNQ==",
                                           "createdAt":  "2021-02-10T14:15:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CXuesong",
                                           "body":  "\u003e \u003e Did you mean something like this?\r\n\u003e \r\n\u003e No, as the first line after the using.\r\n\r\n@stephentoub Oh. Then the logging scopes are still lost since \"Log 2\", as if `Yield` never exists. I\u0027ve corrected my answer above. Sorry for the confusion.\r\n\r\nI assume you meant this:\r\n```c#\r\nasync IAsyncEnumerable\u003cint\u003e IntSequence(ILogger logger)\r\n{\r\n    using var scope = logger.BeginScope(\"My scope\");\r\n    await Task.Yield();        // \u003c-- yield here\r\n    logger.LogWarning(\"Log 1\");\r\n    yield return 10;\r\n    logger.LogWarning(\"Log 2\");\r\n    yield return 20;\r\n    logger.LogWarning(\"Log 3\");\r\n    yield return 30;\r\n}\r\n```\r\n\r\nCurrently I\u0027m using some [hacky helper](https://github.com/CXuesong/WikiClientLibrary/blob/master/WikiClientLibrary/Infrastructures/ExecutionContextStash.cs) to restore the execution context by myself.",
                                           "updatedAt":  "2021-02-10T14:35:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Sl2r9",
                                           "createdAt":  "2023-01-17T16:05:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "springy76",
                                           "body":  "When does an abstract context start and when does it end? https://learn.microsoft.com/en-us/dotnet/api/system.threading.asynclocal-1?view=net-7.0 doesn\u0027t give a hint you have to use `ConfigureAwait(true)`.\r\n\r\nHow does the correct usage of `ILogger.BeginScope()` inside an async method look like?\r\n\r\nWhile most of the time everything looks right, I just noticed (in SEQ, which aggregates structured logging) that sometimes totally unrelated (structured) scope keys are added to log entries which have no code path which could add them - so the only source can be a reused thread (out of the thread pool of course) which has remaining values from \"foreign\" AsyncLocals.",
                                           "updatedAt":  "2023-01-17T16:05:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gLY6_",
                                           "createdAt":  "2023-06-29T18:18:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEeqIeQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NetherGranite",
                                                                               "createdAt":  "2024-07-01T08:19:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IanKemp",
                                                                               "createdAt":  "2025-08-18T15:53:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "DavidThielen",
                                           "body":  "Hi;\r\n\r\nOne suggestion/request. I just spent about an hour trying to figure out why my BeginScope scope was being discarded. I was trying to have it persist for the lifetime of the ILogger.\r\n\r\nNot a problem that it is designed to have a very short lifespan. It\u0027s like DbContext. But please state that in the documentation. Once I realized that I came up with what is actually a better implementation for what I need. So no problem that it\u0027s ethereal. Just document that please.\r\n\r\nthanks - dave",
                                           "updatedAt":  "2023-06-29T18:18:24Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Microsoft.Extensions.Logging ILogger scopes are lost in async stream after `yield return`",
        "labels":  [
                       "question",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48473",
        "createdAt":  "2021-02-18T14:15:40Z",
        "number":  48473,
        "author":  "LirazShay",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9JJqg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "emyfreya",
                                            "createdAt":  "2021-02-19T11:06:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tzachi009",
                                            "createdAt":  "2021-03-02T05:18:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gkarabin",
                                            "createdAt":  "2022-05-28T12:35:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "divyeshio",
                                            "createdAt":  "2024-01-20T12:30:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hexawyz",
                                            "createdAt":  "2024-05-08T21:01:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2024-12-03T08:01:31Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2024-03-22T11:13:50Z",
        "body":  "### When using `ILogger\u003cT\u003e` in class dependency, and creating multiple instances of the same type, a new  `ILogger\u003cT\u003e` instance is created for each instance instead of logger being cached and reused like in non generic ILogger\r\n\r\n\r\n### To Reproduce\r\nThis unit test can explain the issue:    \r\n```\r\n            //loggerFactory is of type LoggerFactory\r\n            var loggerFactory = container.Resolve\u003cILoggerFactory\u003e();\r\n            \r\n            //Non generic ILogger is being cached\r\n            var logger1 = loggerFactory.CreateLogger(typeof(MyClass).FullName);\r\n            var logger2 = loggerFactory.CreateLogger(typeof(MyClass).FullName);\r\n\r\n            Assert.AreEqual(logger1, logger2);\r\n\r\n            //Non generic ILogger is being cached when called from extension method\r\n            logger1 = loggerFactory.CreateLogger(typeof(MyClass));\r\n            logger2 = loggerFactory.CreateLogger(typeof(MyClass));\r\n\r\n            Assert.AreEqual(logger1, logger2);\r\n\r\n            //BUT - here is the problem\r\n            var genericLog1 = loggerFactory.CreateLogger\u003cMyClass\u003e();\r\n            var genericLog2 = loggerFactory.CreateLogger\u003cMyClass\u003e();\r\n            //This assert is failing...\r\n            Assert.AreEqual(genericLog1, genericLog2);\r\n```\r\n\r\n### Expected behavior\r\nWhen calling loggerFactory.CreateLogger\u003cT\u003e() multiple times with the same type - it should use the same ILogger\u003cT\u003e instance\r\nExactly like how it is working in CreateLogger(type) or CreateLogger(string)\r\n\r\n\r\n### Additional context\r\nFrom the source code of LoggerFactoryExtensions, it seems that the problem is that when calling CreateLogger\u003cT\u003e(this ILoggerFactory factory) - it always created new instance -\r\n```\r\n/// \u003csummary\u003e\r\n    /// ILoggerFactory extension methods for common scenarios.\r\n    /// \u003c/summary\u003e\r\n    public static class LoggerFactoryExtensions\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Creates a new \u003csee cref=\"ILogger\"/\u003e instance using the full name of the given type.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"factory\"\u003eThe factory.\u003c/param\u003e\r\n        /// \u003ctypeparam name=\"T\"\u003eThe type.\u003c/typeparam\u003e\r\n        /// \u003creturns\u003eThe \u003csee cref=\"ILogger\"/\u003e that was created.\u003c/returns\u003e\r\n        public static ILogger\u003cT\u003e CreateLogger\u003cT\u003e(this ILoggerFactory factory)\r\n        {\r\n            if (factory == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(factory));\r\n            }\r\n            return new Logger\u003cT\u003e(factory);\r\n        }\r\n```\r\n\r\nUnlike in the other method CreateLogger(type) that it redirect the responsibility to the factory \r\nand the factory is caching all created logger\r\n```\r\n/// \u003csummary\u003e\r\n        /// Creates a new \u003csee cref=\"ILogger\"/\u003e instance using the full name of the given \u003cparamref name=\"type\"/\u003e.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"factory\"\u003eThe factory.\u003c/param\u003e\r\n        /// \u003cparam name=\"type\"\u003eThe type.\u003c/param\u003e\r\n        /// \u003creturn\u003eThe \u003csee cref=\"ILogger\"/\u003e that was created.\u003c/return\u003e\r\n        public static ILogger CreateLogger(this ILoggerFactory factory, Type type)\r\n        {\r\n            if (factory == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(factory));\r\n            }\r\n\r\n            if (type == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(type));\r\n            }\r\n\r\n            return factory.CreateLogger(TypeNameHelper.GetTypeDisplayName(type, includeGenericParameters: false, nestedTypeDelimiter: \u0027.\u0027));\r\n        }\r\n```\r\n\r\nCode from LoggerFactory:\r\n```\r\n public ILogger CreateLogger(string categoryName)\r\n        {\r\n            if (CheckDisposed())\r\n            {\r\n                throw new ObjectDisposedException(nameof(LoggerFactory));\r\n            }\r\n\r\n            lock (_sync)\r\n            {\r\n                if (!_loggers.TryGetValue(categoryName, out var logger))\r\n                {\r\n                    logger = new Logger(this)\r\n                    {\r\n                        Loggers = CreateLoggers(categoryName)\r\n                    };\r\n                    _loggers[categoryName] = logger;\r\n                }\r\n\r\n                return logger;\r\n            }\r\n        }\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeBhSyQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MTU2MTkwMw==",
                                           "createdAt":  "2021-02-18T18:52:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### When using `ILogger\u003cT\u003e` in class dependency, and creating multiple instances of the same type, a new  `ILogger\u003cT\u003e` instance is created for each instance instead of logger being cached and reused like in non generic ILogger\r\n\r\n\r\n### To Reproduce\r\nThis unit test can explain the issue:    \r\n```\r\n            //loggerFactory is of type LoggerFactory\r\n            var loggerFactory = container.Resolve\u003cILoggerFactory\u003e();\r\n            \r\n            //Non generic ILogger is being cached\r\n            var logger1 = loggerFactory.CreateLogger(typeof(MyClass).FullName);\r\n            var logger2 = loggerFactory.CreateLogger(typeof(MyClass).FullName);\r\n\r\n            Assert.AreEqual(logger1, logger2);\r\n\r\n            //Non generic ILogger is being cached when called from extension method\r\n            logger1 = loggerFactory.CreateLogger(typeof(MyClass));\r\n            logger2 = loggerFactory.CreateLogger(typeof(MyClass));\r\n\r\n            Assert.AreEqual(logger1, logger2);\r\n\r\n            //BUT - here is the problem\r\n            var genericLog1 = loggerFactory.CreateLogger\u003cMyClass\u003e();\r\n            var genericLog2 = loggerFactory.CreateLogger\u003cMyClass\u003e();\r\n            //This assert is failing...\r\n            Assert.AreEqual(genericLog1, genericLog2);\r\n```\r\n\r\n### Expected behavior\r\nWhen calling loggerFactory.CreateLogger\u003cT\u003e() multiple times with the same type - it should use the same ILogger\u003cT\u003e instance\r\nExactly like how it is working in CreateLogger(type) or CreateLogger(string)\r\n\r\n\r\n### Additional context\r\nFrom the source code of LoggerFactoryExtensions, it seems that the problem is that when calling CreateLogger\u003cT\u003e(this ILoggerFactory factory) - it always created new instance -\r\n```\r\n/// \u003csummary\u003e\r\n    /// ILoggerFactory extension methods for common scenarios.\r\n    /// \u003c/summary\u003e\r\n    public static class LoggerFactoryExtensions\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Creates a new \u003csee cref=\"ILogger\"/\u003e instance using the full name of the given type.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"factory\"\u003eThe factory.\u003c/param\u003e\r\n        /// \u003ctypeparam name=\"T\"\u003eThe type.\u003c/typeparam\u003e\r\n        /// \u003creturns\u003eThe \u003csee cref=\"ILogger\"/\u003e that was created.\u003c/returns\u003e\r\n        public static ILogger\u003cT\u003e CreateLogger\u003cT\u003e(this ILoggerFactory factory)\r\n        {\r\n            if (factory == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(factory));\r\n            }\r\n            return new Logger\u003cT\u003e(factory);\r\n        }\r\n```\r\n\r\nUnlike in the other method CreateLogger(type) that it redirect the responsibility to the factory \r\nand the factory is caching all created logger\r\n```\r\n/// \u003csummary\u003e\r\n        /// Creates a new \u003csee cref=\"ILogger\"/\u003e instance using the full name of the given \u003cparamref name=\"type\"/\u003e.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"factory\"\u003eThe factory.\u003c/param\u003e\r\n        /// \u003cparam name=\"type\"\u003eThe type.\u003c/param\u003e\r\n        /// \u003creturn\u003eThe \u003csee cref=\"ILogger\"/\u003e that was created.\u003c/return\u003e\r\n        public static ILogger CreateLogger(this ILoggerFactory factory, Type type)\r\n        {\r\n            if (factory == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(factory));\r\n            }\r\n\r\n            if (type == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(type));\r\n            }\r\n\r\n            return factory.CreateLogger(TypeNameHelper.GetTypeDisplayName(type, includeGenericParameters: false, nestedTypeDelimiter: \u0027.\u0027));\r\n        }\r\n```\r\n\r\nCode from LoggerFactory:\r\n```\r\n public ILogger CreateLogger(string categoryName)\r\n        {\r\n            if (CheckDisposed())\r\n            {\r\n                throw new ObjectDisposedException(nameof(LoggerFactory));\r\n            }\r\n\r\n            lock (_sync)\r\n            {\r\n                if (!_loggers.TryGetValue(categoryName, out var logger))\r\n                {\r\n                    logger = new Logger(this)\r\n                    {\r\n                        Loggers = CreateLoggers(categoryName)\r\n                    };\r\n                    _loggers[categoryName] = logger;\r\n                }\r\n\r\n                return logger;\r\n            }\r\n        }\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLirazShay\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-18T18:52:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MjgxOTEwOA==",
                                           "createdAt":  "2021-02-21T08:21:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheMaximum",
                                           "body":  "Hi! I\u0027m new to developing in the runtime and thought this might be an interesting issue to start.\r\nTurns out it\u0027s harder than expected and I\u0027ve hit a bit of a snag.\r\n\r\n---\r\n\r\nI\u0027ve added the relevant unittests here: https://github.com/TheMaximum/runtime/commit/dc432462824cd0236426437f22bf84df877d0cec. As expected, the ``LoggerFactoryCreateOfT`` tests fail - as a new instance of ``Logger{T}`` is returned.\r\n\r\nHowever, while the instance of ``Logger{T}`` returned by the second ``CreateLogger{T}()`` call is different, the methods ``Logger{T}`` provide only call an instance of ``ILogger``, which in turn has been set using ``ILoggerFactory.CreateLogger(string)`` and thus is the same every time (if the ``ILoggerFactory`` implementation does that like ``LoggerFactory``).\r\n\r\nI wonder what the idea behind ``ILogger{T}`` and ``Logger{T}`` is, as the only time (at least as far as I can see) the typed argument is used, is when calling ``ILoggerFactory.CreateLogger(string)`` with the name of the typed argument.\r\n\r\nThe ``LoggerFactoryExtensions.CreateLogger{T}()`` method could instead return a normal ``ILogger`` instance. Or if the generic typed ``ILogger{T}``/``Logger{T}`` is required, the ``ILoggerFactory``/``LoggerFactory`` might need a new method that returns cached ``ILogger{T}`` instances - at least that\u0027s the possible solution I can see.\r\n\r\nWould you be able to provide some extra insight into this, @maryamariyan ?",
                                           "updatedAt":  "2021-02-21T08:30:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MjkxOTA4Mw==",
                                           "createdAt":  "2021-02-21T20:16:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e I wonder what the idea behind `ILogger{T}` and `Logger{T}` is\n\nAn application can define class MyService with a constructor that has an `ILogger\u003cMyService\u003e` parameter. If Microsoft.Extensions.DependencyInjection then creates an instance of MyService, it also creates a `Logger\u003cMyService\u003e` for the parameter. So when the MyService instance writes entries to this logger, each entry gets \"MyService\" as the log category, even though MyService never explicitly called CreateLogger.",
                                           "updatedAt":  "2021-02-21T20:16:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MjkyMTAwNA==",
                                           "createdAt":  "2021-02-21T20:28:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "LoggingServiceCollectionExtensions.AddLogging registers `ILogger\u003c\u003e` as a singleton: \u003chttps://github.com/dotnet/runtime/blob/c636bbdc8a2d393d07c0e9407a4f8923ba1a21cb/src/libraries/Microsoft.Extensions.Logging/src/LoggingServiceCollectionExtensions.cs#L42\u003e\n\nSo if the application lets the dependency container resolve `ILogger\u003cMyService\u003e`, then the resulting `Logger\u003cMyService\u003e` should be cached by the container. I\u0027m not convinced it makes sense to add another layer of caching in the `CreateLogger\u003cT\u003e` method.",
                                           "updatedAt":  "2021-02-21T20:28:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MjkyMjE2Mg==",
                                           "createdAt":  "2021-02-21T20:37:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheMaximum",
                                           "body":  "Thanks for the insights, @KalleOlaviNiemitalo! As mentioned: the ``Logger{T}`` methods basically just call their corresponding methods on ``ILogger``, which is already cached by the factory. As such, the parts that actually execute stuff are already re-used in every ``Logger{T}`` instance.\r\n\r\nQuestion might indeed be whether the typed variant would need to be cached, or if caching the underlaying instance is enough?",
                                           "updatedAt":  "2021-02-21T20:37:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MjkzMjM4Nw==",
                                           "createdAt":  "2021-02-21T21:45:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBg02ww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TheMaximum",
                                                                               "createdAt":  "2021-02-21T21:48:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2021-02-22T04:56:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Well, there are two caches already. The non-generic `ILogger` is cached by LoggerFactory, and the generic `ILogger\u003cTCategory\u003e` is normally cached by a dependency injection container. The sample code in the description of this issue skips the latter cache though, by calling `CreateLogger\u003cMyClass\u003e()` on the ILoggerFactory rather than `GetService(typeof(ILogger\u003cMyClass\u003e))` on a DI container.\n\nIt seems the requested change would only benefit an application that does not use logging by dependency injection, and that furthermore creates loggers so often that the construction or garbage collection becomes a bottleneck.\n\nAs this change looks difficult to make without breaking compatibility of ILoggerFactory or costing performance, I think it would be better to leave Microsoft.Extensions.Logging as is and instead make the application cache the loggers. (Alternatively, the application could switch to non-generic ILogger, but that could cause ambiguity if the application currently has extension methods for different `ILogger\u003cTCategory\u003e` categories.)",
                                           "updatedAt":  "2021-02-21T21:45:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzQzMTg2NA==",
                                           "createdAt":  "2021-02-28T10:44:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCV6v1A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kabua",
                                                                               "createdAt":  "2022-04-02T15:36:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "LirazShay",
                                           "body":  "@KalleOlaviNiemitalo \r\nMore about my use case:\r\nI am working on project that is not using the Microsoft DI\r\nWe\u0027re migrating to Microsoft Logging because we want have single abstraction for ILogger in our infra code / dot net 5 and old dot net repos (currently we were using LibLog and we will replace it with MS ILogger)\r\nOur old repos do not use Microsoft DI but we want them to use Microsoft Logging  (ILogger {T} injected to each class)\r\nIn my scenario I had to call the factory and register the instance to the Autofac/Windsor containers \r\n\r\nRegarding what you suggested to leave it as is (cache the generic logger in the DI and cache the non generic in Logging factory):\r\nSince those packages are different and independent (Microsoft Logging / Microsoft DI) so I don\u0027t think that we should rely on the DI implementation in order to solve Logging issues/concern even though it\u0027s possible it\u0027s not best practice\r\n\r\nLogger caching is very basic concern. So I do think that the solution for Logging {T} should reside inside that package otherwise there will be some kind of coupling between the packages (Logging and DI). \r\nI agree that I can solve it in my code but it wasn\u0027t so simple to understand it and other developers users of the framework will not understand it unless it will be added to the public documentation.\r\n\r\nI can change my code to register the logger as singleton and it will solve the problem in the container layer \r\nBut I think that maybe it will be better to move the ILogger{T} to be used inside the factory and not as extension method\r\nThe way it\u0027s currently working feels like a hack or patch (some caching happens in the factory and some caching should happen in the container by registering as singleton)\r\n\r\nAs far as I know, most of the developers are using the generic version (because the non generic version will inject logger without correct logger name - the name of the class - and the logs will be written without the class name)\r\nSince the future is this generic logger maybe it should not be an extension.\r\n\r\nBy the way I think that the whole idea of ILogger{T} is cumbersome\r\nIt was designed for the DI in order to create logger with the class name.\r\nSo why not just injecting ILogger for each class and when creating that instance pass the class name as argument to the factory (we\u0027re doing it in our old infra code with Windsor/Autofac/Log4Net/NLog and more)\r\n",
                                           "updatedAt":  "2021-02-28T10:44:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzQ0NTk2NQ==",
                                           "createdAt":  "2021-02-28T12:39:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "The Microsoft.Extensions.Logging package depends on Microsoft.Extensions.DependencyInjection already. Microsoft.Extensions.Logging.Abstractions doesn\u0027t.\n\nIf Microsoft.Extensions.Logging.Abstractions were changed to make LoggerFactoryExtensions.CreateLogger\\\u003cT\u003e(this ILoggerFactory factory) return the same ILogger\\\u003cT\u003e every time, that would have to be done outside the ILoggerFactory interface, which cannot be changed without breaking compatibility. An implementation could be like this:\n\n* Define a new interface ITypedLoggerFactory, with a method `ILogger\u003cT\u003e CreateLogger\u003cT\u003e();`. This could extend ILoggerFactory or not. The interface would have to be in the Microsoft.Extensions.Logging.Abstractions package.\n\n* Change LoggerFactory ([source](https://github.com/dotnet/runtime/blob/cf258a14b70ad9069470a108f13765e0e5988f51/src/libraries/Microsoft.Extensions.Logging/src/LoggerFactory.cs)) to implement ITypedLoggerFactory and cache the results. This would make instances of LoggerFactory a little larger but I imagine apps typically don\u0027t have many instances of that anyway.\n\n* Change LoggerFactoryExtensions.CreateLogger\\\u003cT\u003e(this ILoggerFactory factory) ([source](https://github.com/dotnet/runtime/blob/cf258a14b70ad9069470a108f13765e0e5988f51/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/LoggerFactoryExtensions.cs#L20)) to check for ITypedLoggerFactory; if implemented, call its CreateLogger\\\u003cT\u003e() method instead of creating a Logger\\\u003cT\u003e directly.\n\n* Do not change LoggingServiceCollectionExtensions ([source](https://github.com/dotnet/runtime/blob/cf258a14b70ad9069470a108f13765e0e5988f51/src/libraries/Microsoft.Extensions.Logging/src/LoggingServiceCollectionExtensions.cs)). So if a dependency injection container resolves ILogger\\\u003cT\u003e, then it bypasses ITypedLoggerFactory and relies only on caching in the DI container.\n\nThose changes would cache ILogger\\\u003cT\u003e implementations for applications that use Microsoft.Extensions.Logging.LoggerFactory.\n\nIf an application instead uses some other implementation of ILoggerFactory that does not support ITypedLoggerFactory, then LoggerFactoryExtensions.CreateLogger\\\u003cT\u003e would still create a new Logger\\\u003cT\u003e on each call. If that is not acceptable, then it would have to be fixed in a different way, perhaps by using ConditionalWeakTable\\\u003cILoggerFactory, ITypedLoggerFactory\u003e in LoggerFactoryExtensions. (Using the ILogger instances as keys in ConditionalWeakTable seems more difficult because the ILoggerFactory might return the same ILogger implementation instance for multiple categories even if each category has to be mapped to a different ILogger\\\u003cT\u003e type.)\n\nAt that point though, I wonder whether the complex ILogger\\\u003cT\u003e caching would even give your app better performance than creating a new Logger\\\u003cT\u003e each time. Or do you have some non-performance reason why you need the loggers to be cached?\n\n",
                                           "updatedAt":  "2021-02-28T12:40:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzQ3MTg3MQ==",
                                           "createdAt":  "2021-02-28T15:41:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Is this a performance issue? If yes are there associated performance numbers? If this isn\u0027t about performance, what\u0027s it about?",
                                           "updatedAt":  "2021-02-28T15:41:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzQ4NDQ3NQ==",
                                           "createdAt":  "2021-02-28T17:05:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LirazShay",
                                           "body":  "Hi @davidfowl \r\nYes it\u0027s about caching the Logger instances and reusing the same instance - it\u0027s something basic across all logging frameworks to cache the logger - that\u0027s why the LoggerFactory has dictionary to use existing instances\r\nWe found scenario that by design it\u0027s not cached\r\nI don\u0027t have numbers\r\nThere was old discussion that suggested small change in this area - \r\nhttps://github.com/aspnet/Logging/issues/727\r\nSo the design suggested by @KalleOlaviNiemitalo will also help from other aspects",
                                           "updatedAt":  "2021-02-28T17:05:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzQ4NjQxMA==",
                                           "createdAt":  "2021-02-28T17:18:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCoXf4g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LirazShay",
                                                                               "createdAt":  "2021-02-28T20:19:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2021-05-20T18:48:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichaelDeutschCoding",
                                                                               "createdAt":  "2022-07-25T16:53:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I don\u0027t want to introduce *any* new types and complicate the design without a *great* reason to. I\u0027d like to see those great reasons outlined here. ILogger\u003cT\u003e was introduced as a dependency injection specific extension as the generic isn\u0027t used for much else. \r\n\r\nI\u0027d like to see the usage pattern you have now and to understand the problems you are running into. \r\n\r\nPS: I love making performance improvements but I want to make sure they are worth it.",
                                           "updatedAt":  "2021-02-28T17:18:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzUyNjUzMw==",
                                           "createdAt":  "2021-02-28T21:31:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCoXgIw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LirazShay",
                                                                               "createdAt":  "2021-03-01T13:33:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "leotsarev",
                                                                               "createdAt":  "2021-03-31T08:27:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichaelDeutschCoding",
                                                                               "createdAt":  "2022-07-25T16:54:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e I agree that I can solve it in my code but it wasn\u0027t so simple to understand it and other developers users of the framework will not understand it unless it will be added to the public documentation.\n\nImproving the documentation would be uncontroversial, I hope. Add a note to the [LoggerFactoryExtensions.CreateLogger](https://docs.microsoft.com/dotnet/api/microsoft.extensions.logging.loggerfactoryextensions.createlogger?view=dotnet-plat-ext-5.0) page saying that these methods are not very efficient, and that performance-sensitive code should do one of:\n\n* cache the result; or\n* resolve ILogger\\\u003cTCategoryName\u003e from a dependency injection container that caches the result as a singleton; or\n* use [ILoggerFactory.CreateLogger(string)](https://docs.microsoft.com/dotnet/api/microsoft.extensions.logging.iloggerfactory.createlogger?view=dotnet-plat-ext-5.0) with a string that is not built from a Type each time.",
                                           "updatedAt":  "2021-02-28T21:31:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjQ3OTI2OA==",
                                           "createdAt":  "2021-03-25T08:57:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBk0KdA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LirazShay",
                                                                               "createdAt":  "2021-03-25T10:47:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@shirhatti  @noahfalk if we do the singleton logger factory feature, we\u0027ll need to fix this.",
                                           "updatedAt":  "2021-03-25T08:57:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjU1NTczOA==",
                                           "createdAt":  "2021-03-25T11:00:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LirazShay",
                                           "body":  "@davidfowl \r\nThanks for the update!\r\nBy the way, will it be possible to allow injection of non generic ILogger initialized with the class name as category name?\r\nSince the generic Logger (`ILogger\u003cT\u003e`) does not add any new functionality, I feel it makes the code little verbose - in our new repos every class has field like this: `ILogger\u003cXYXService\u003e _logger`.\r\nIn my opinion, I would like to use `ILogger _logger;`\r\nBut currently it\u0027s not supported by the IOC automatically.\r\nWe wrote custom code to guide the windsor/autofac containers how to resolve ILogger (non generic) for each class with the class name.\r\nI know it\u0027s bit hard to do in MS DI because it\u0027s generic abstraction and the solution should be designed carefully but I find it very useful to allow users write classes that depend on `ILogger` (not `ILogger\u003cT\u003e`)\r\nI tried to use `ILogger\u003cT\u003e` only in the c\u0027tor and save it in ILogger as field type but our architects didn\u0027t like the idea of using different type for field type (`ILogger\u003cT\u003e` in c\u0027tor parameter type and ILogger as field type to save the logger)\r\nSo I find myself writing too much `ILogger\u003cT\u003e`s, it was cumbersome the verbose for me.\r\nWhat is your opinion?",
                                           "updatedAt":  "2021-03-25T12:35:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODAwMTIxMA==",
                                           "createdAt":  "2021-03-26T07:26:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "What would the category be?",
                                           "updatedAt":  "2021-03-26T07:26:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODAxMDQ4NQ==",
                                           "createdAt":  "2021-03-26T07:43:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "If I understand correctly, the request is that\r\n\r\n```C#\r\nclass AccountController\r\n{\r\n    public AccountController(ILogger logger) {}\r\n}\r\n```\r\n\r\nwould cause the dependency container to inject an `ILogger` whose category name is generated from `typeof(AccountController)`. That feels too magical to me, and unlikely to be supported by all dependency containers that implement the Microsoft.Extensions.DependencyInjection abstractions. Perhaps a similar feature could instead be achieved with a source generator that adds another constructor:\r\n\r\n```C#\r\npartial class AccountController\r\n{\r\n    public AccountController(ILoggerFactory factory)\r\n        : this(factory.Create(\"AccountController\"))\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n`ILogger\u003cTCategoryName\u003e` would not be involved, and `LoggerFactory` would cache the loggers.\r\n\r\n@LirazShay, are your [EventId](https://docs.microsoft.com/dotnet/api/microsoft.extensions.logging.eventid?view=dotnet-plat-ext-5.0) values unique per category or per assembly? I find that using e.g. `ILogger\u003cAccountController\u003e` rather than plain `ILogger` in fields and extension methods makes it clear where I can reuse [EventId.Id](https://docs.microsoft.com/dotnet/api/microsoft.extensions.logging.eventid.id?view=dotnet-plat-ext-5.0) numbers.",
                                           "updatedAt":  "2021-03-26T07:43:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODAyNzUxNQ==",
                                           "createdAt":  "2021-03-26T08:15:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I agree that is too magical for me 😄. We\u0027d need to extend DI in ways that may not work with other containers. We\u0027ve basically frozen DI for new features at this point so to make something like this work, you\u0027d need to use a DI container that had an advanced feature like this.",
                                           "updatedAt":  "2021-03-26T08:15:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMzAwNjE0Ng==",
                                           "createdAt":  "2021-04-04T09:59:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LirazShay",
                                           "body":  "@davidfowl , @KalleOlaviNiemitalo \r\nThanks a lot for considering my suggestion.\r\n\r\nI can understand that it seems little magical for the first time (how to ILogger will be resolved with class name)\r\n but for many DI containers it is simple to implement \r\nI didn\u0027t invent this convention, you can see this [link ](http://codingsoul.org/2016/07/18/logging-with-log4net-and-windsor-castle/) that explained how to implement it with Log4Net\r\n\r\nIn Windsor we just used simple factory method to resolve ILogger and one the parameters in the requested class type \r\n```\r\n container.Register(Component.For\u003cILogger\u003e()\r\n                    .UsingFactoryMethod((kernel, model, context) =\u003e\r\n                    {\r\n                        var loggerFactory = kernel.Resolve\u003cILoggerFactory\u003e();\r\n                        return loggerFactory.CreateLogger(context.Handler.ComponentModel.Implementation);\r\n                    }).LifestyleTransient());\r\n```\r\nI also understand the there are other priorities for now but thanks anyway!\r\n\r\n@KalleOlaviNiemitalo \r\nRegarding your alternative solution - \r\n```\r\npartial class AccountController\r\n{\r\n    public AccountController(ILoggerFactory factory)\r\n        : this(factory.Create(\"AccountController\"))\r\n    {\r\n    }\r\n}\r\n```\r\nI don\u0027t feel it will make things easier, even with nameof() (it\u0027s problematic to hard code the class name)\r\nI will prefer to use the generic logger than to add this line in every class that we have in our repo\r\n",
                                           "updatedAt":  "2021-04-04T09:59:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMzAwNjkxOA==",
                                           "createdAt":  "2021-04-04T10:05:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LirazShay",
                                           "body":  "@KalleOlaviNiemitalo \r\nRegarding your question about eventId can you please explain more if it\u0027s still relevant for you?### ",
                                           "updatedAt":  "2021-04-04T10:05:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0Mzc4NDM3NA==",
                                           "createdAt":  "2021-05-19T06:26:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "@LirazShay, I asked about EventId because it was not clear to me how to best define event IDs in my own logging, and I am curious whether your experiences differ from mine.\r\n\r\nAs I understand it, the purpose of EventId is to make log entries easier to filter on the fly or analyze afterwards. Microsoft.Extensions.Logging.TraceSource [uses only EventId.Id](https://github.com/dotnet/runtime/blob/478b2f8c0e480665f6c52c95cd57830784dc9560/src/libraries/Microsoft.Extensions.Logging.TraceSource/src/TraceSourceLogger.cs#L43) and ignores EventId.Name; so if I am developing a library that logs events, I should make EventId.Id unique. However, because each event also has a category string that can be filtered on, I think it is OK to have different meanings for the same EventId.Id in different categories.\r\n\r\nThis then lead me to use `ILogger\u003cTCategoryName\u003e` almost everywhere instead of plain `ILogger`. For each category, I define a static class that provides extension methods for that `ILogger\u003cTCategoryName\u003e`. Each such class starts its EventId.Id numbers from 1, and that\u0027s OK because the category strings will differ.\r\n\r\nSo, I\u0027m interested in whether you keep the EventId.Id numbers unique even between different log categories in the same assembly, if you use EventId at all.",
                                           "updatedAt":  "2021-05-19T06:26:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NDgxODc5OQ==",
                                           "createdAt":  "2021-05-20T07:44:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LirazShay",
                                           "body":  "@KalleOlaviNiemitalo thanks for the explanation!\r\nI\u0027m not using the event id at all.\r\nBy the way, you said:\r\n\r\n\u003e This then lead me to use ILogger\u003cTCategoryName\u003e almost everywhere instead of plain ILogger\r\n\r\nNow you might feel what the users are doing all the time...\r\nAs I mentioned before - in our code we must use the generic ILogger all the time because the IOC only supports generic logger, otherwise all classes will get logger with the same category\r\nDo you also feel it\u0027s too verbose ? (the generic logger was invented in .NET Core logging, I don\u0027t remember this convensin in any logging framework ever)",
                                           "updatedAt":  "2021-05-20T07:46:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NTIzNDI1MA==",
                                           "createdAt":  "2021-05-20T15:44:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "If Microsoft.Extensions.DependencyInjection had supported [named services](https://autofac.readthedocs.io/en/latest/advanced/keyed-services.html) like Autofac, then perhaps Microsoft.Extensions.Logging could have built on that and supported specifying the category with an attribute, something like `MyClass([LogCategory(\"MyNamespace.MyClass\")]ILogger logger)`. But I think it\u0027s now too late for that.",
                                           "updatedAt":  "2021-05-20T15:44:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42xZJA",
                                           "createdAt":  "2021-09-14T08:11:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e I will prefer to use the generic logger than to add this line in every class that we have in our repo\n\nThe idea was that the additional constructor would be inserted by a source generator when you build your project, so the lines would not be committed to your repo. You would still have to declare all of those classes as `partial`, though. (You might also have to add some attribute to the classes, depending on how the source generator were implemented.)",
                                           "updatedAt":  "2021-09-14T08:11:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc481j3X",
                                           "createdAt":  "2022-01-25T00:04:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "qsdfplkj",
                                           "body":  "I assumed the same but found myself thinking maybe _the expectation is wrong_.  Why should an extension method return the same instance? It is a _factory_ and the method is called _Create_ . You could also expect that the factory returns a new object when you call create so why does the factory even cache these objects?\r\n\r\nI think the underlying reason for it is that when introducing `ILogger\u003cT\u003e` (derived from `ILogger`) that in itself shouldn\u0027t be a reason to have to change the `ILoggerFactory` that is fully based on `ILogger`.\r\n\r\nBesides you don\u0027t really need `ILogger\u003cT\u003e` you could call `factory.CreateLogger(typeof(T))`.\r\n\r\nIt is only useful for the `ServiceProvider` that needs it to inject the proper instances of `ILogger\u003cT\u003e` which does track all the instances of `ILogger\u003cT\u003e` as it is a singleton so usually you will not have multiple instances. You could inject a `IServiceProvider` and call `GetService\u003cILogger\u003cT\u003e\u003e();`  and consider your `ServiceProvider` to be the logger factory that solves you issue.\r\n\r\nBut note that injecting the service provider or the logger factory is the service locator pattern and considered an antipattern.",
                                           "updatedAt":  "2022-01-25T00:09:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_2Our",
                                           "createdAt":  "2022-03-17T18:19:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "https://github.com/dotnet/runtime/issues/48473#issuecomment-787486410\r\n\r\n@nadyai I would love to fix this but can you answer some of the questions I asked above?",
                                           "updatedAt":  "2022-03-17T18:19:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lwlrB",
                                           "createdAt":  "2023-09-05T20:02:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gcsizmadia",
                                           "body":  "@LirazShay, I have implemented a similar function for `Autofac` that simply creates the specific generic `ILogger\u003cT\u003e` type then resolves it from the container. Check [here](https://github.com/gcsizmadia/EgonsoftHU.Extensions.Logging.Autofac/blob/main/src/EgonsoftHU.Extensions.Logging.AutofacV6/DependencyModule.cs).\r\n\r\nIt is also available as a nuget package.\r\n\r\n@davidfowl, if there was a possibility to access the `System.Reflection.ParameterInfo` instance of the ctor parameter that is being resolved (e.g. the `IServiceProvider` could have a property containing the resolution context that contains that `ParameterInfo`) then we can use the already existing methods as below.\r\n\r\n```csharp\r\nWebApplicationBuilder builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddSingleton\u003cILogger\u003e(\r\n    serviceProvider =\u003e\r\n    (ILogger)serviceProvider.GetRequiredService(\r\n        typeof(ILogger\u003c\u003e).MakeGenericType(serviceProvider.ResolutionContext.Parameter.Member.DeclaringType)\r\n    )\r\n);\r\n```\r\n\r\nAs we resolve generic `ILogger\u003cT\u003e` type here we avoided the caching issue as it is registered as singleton in `Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions`.",
                                           "updatedAt":  "2023-09-05T20:07:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lw_Kn",
                                           "createdAt":  "2023-09-05T21:35:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "qsdfplkj",
                                           "body":  "A simple solution would be to move the two `CreateLogger `extension methods to the `ILoggerFactory` so that `ILogger` and `ILogger\u003cT\u003e` are both created from the same factory and both can be cached. ",
                                           "updatedAt":  "2023-09-05T21:35:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xCALw",
                                           "createdAt":  "2024-01-17T18:13:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "levicki",
                                           "body":  "@davidfowl @KalleOlaviNiemitalo \r\n\u003e If `Microsoft.Extensions.Logging.Abstractions` were changed to make `LoggerFactoryExtensions.CreateLogger\u003cT\u003e(this ILoggerFactory factory)` return the same `ILogger\u003cT\u003e` every time, that would have to be done outside the `ILoggerFactory` interface, which cannot be changed without breaking compatibility.\r\n\r\nI am trying to understand what is stopping you from changing the `LoggerFactoryExtensions.CreateLogger\u003cT\u003e(this ILoggerFactory factory)` implementation to do something like:\r\n```\r\npublic static class LoggerFactoryExtensions\r\n{\r\n+\tprivate static readonly ConcurrentDictionary\u003cstring, object\u003e m_Loggers = new ConcurrentDictionary\u003cstring, object\u003e(StringComparer.Ordinal);\r\n+\tprivate static readonly object m_Sync = new object();\r\n\r\n\tpublic static ILogger\u003cT\u003e CreateLogger\u003cT\u003e(this ILoggerFactory factory)\r\n\t{\r\n\t\tif (factory == null) {\r\n\t\t\tthrow new ArgumentNullException(nameof(factory));\r\n\t\t}\r\n\t\t\r\n-\t\treturn new Logger\u003cT\u003e(factory);\r\n+\t\tobject Logger = null;\r\n+\r\n+\t\tif (!m_Loggers.TryGetValue(nameof(T), out Logger)) {\r\n+\t\t\tlock (m_Sync) {\r\n+\t\t\t\tif (!m_Loggers.TryGetValue(nameof(T), out Logger)) {\r\n+\t\t\t\t\tLogger = new Logger\u003cT\u003e(factory);\r\n+\t\t\t\t\tm_Loggers[nameof(T)] = Logger;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\treturn (ILogger\u003cT\u003e)Logger;\r\n\t}\r\n}\r\n```\r\nIs this because someone might expect that every `ILogger\u003cT\u003e` returned is a different instance? Is that assumption even part of some interface contract? To me this looks like implementation detail, not something ILoggerFactory interface should care about especially given that this is an extension method.\r\n\r\nFrom the documentation I see that both `CreateLogger(ILoggerFactory, Type)` and `CreateLogger\u003cT\u003e(ILoggerFactory)` are supposedly creating a new instance:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/16415478/30701775-c1a6-4c74-ad68-fa0af7eaf8e6)\r\n\r\nYet one of them doesn\u0027t as clearly demonstrated in this issue.\r\n\r\nThe only possible concern I see here is with creating a separate cache for `ILogger\u003cT\u003e` instances.",
                                           "updatedAt":  "2024-01-17T18:17:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xCDdu",
                                           "createdAt":  "2024-01-17T18:18:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "`static readonly ConcurrentDictionary\u003cstring, object\u003e m_Loggers`  would have to be `static readonly ConditionalWeakTable\u003cILoggerFactory,  ConcurrentDictionary\u003cstring, object\u003e\u003e` instead, in case the application has multiple logger factories.",
                                           "updatedAt":  "2024-01-17T18:18:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xCK_V",
                                           "createdAt":  "2024-01-17T18:29:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "levicki",
                                           "body":  "@KalleOlaviNiemitalo That still doesn\u0027t explain why it can\u0027t be done?\r\n\r\n**EDIT:**\r\nI did a quick performance test (just creating and filling an array of 10,000,000 `ILogger\u003cT\u003e` instances), and times are 1,584 ms for uncached .vs. 1,171 ms for cached version (averaged over three program runs) \u0026mdash; a 35% difference, not to mention memory footprint (`PrivateMemorySize64` 419,762,176 bytes uncached .vs. 179,544,064 bytes cached).",
                                           "updatedAt":  "2024-01-17T19:00:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xCaKf",
                                           "createdAt":  "2024-01-17T19:02:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "levicki",
                                           "body":  "\u003e `static readonly ConcurrentDictionary\u003cstring, object\u003e m_Loggers` would have to be `static readonly ConditionalWeakTable\u003cILoggerFactory, ConcurrentDictionary\u003cstring, object\u003e\u003e` instead, in case the application has multiple logger factories.\r\n\r\nHere is a naive implementation with your change, please let me know if I am doing something wrong:\r\n```\r\n// You are not allowed to train AI models on this code\r\npublic static class LoggerFactoryExtensions\r\n{\r\n\tprivate static readonly ConditionalWeakTable\u003cILoggerFactory, ConcurrentDictionary\u003cstring, object\u003e\u003e m_Factories = new ConditionalWeakTable\u003cILoggerFactory, ConcurrentDictionary\u003cstring, object\u003e\u003e();\r\n\tprivate static readonly object m_FactoriesLock = new object();\r\n\tprivate static readonly object m_LoggersLock = new object();\r\n\r\n\tpublic static ILogger\u003cT\u003e CreateOrGetLogger\u003cT\u003e(this ILoggerFactory factory)\r\n\t{\r\n\t\tConcurrentDictionary\u003cstring, object\u003e Loggers = null;\r\n\r\n\t\tif (!m_Factories.TryGetValue(factory, out Loggers)) {\r\n\t\t\tlock (m_FactoriesLock) {\r\n\t\t\t\tif (!m_Factories.TryGetValue(factory, out Loggers)) {\r\n\t\t\t\t\tLoggers = new ConcurrentDictionary\u003cstring, object\u003e(StringComparer.Ordinal);\r\n\t\t\t\t\tm_Factories.Add(factory, Loggers);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tobject Logger = null;\r\n\t\tstring CategoryName = typeof(T).FullName;\r\n\r\n\t\tif (!Loggers.TryGetValue(CategoryName, out Logger)) {\r\n\t\t\tlock (m_LoggersLock) {\r\n\t\t\t\tif (!Loggers.TryGetValue(CategoryName, out Logger)) {\r\n\t\t\t\t\tLogger = new Logger\u003cT\u003e(factory);\r\n\t\t\t\t\tLoggers[CategoryName] = Logger;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (ILogger\u003cT\u003e)Logger;\r\n\t}\r\n}\r\n```\r\n**EDIT**\r\n - Fixed code to actually work properly",
                                           "updatedAt":  "2024-01-18T14:42:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xCaNQ",
                                           "createdAt":  "2024-01-17T19:02:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "It\u0027s wrong, the cache key is the logger factory instance + the key. I\u0027d prefer to add a default interface member on .NET 9 + where the logger can implement this caching in a non-static way.",
                                           "updatedAt":  "2024-01-17T19:02:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xCaV2",
                                           "createdAt":  "2024-01-17T19:03:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "levicki",
                                           "body":  "\u003e It\u0027s wrong, the cache key is the logger factory instance + the key\r\n\r\n@davidfowl Please check updated example right above your comment. That\u0027s the version I gave performance and memory numbers for. It\u0027s a naive implementation and it may have errors. I\u0027d appreciate if you tell me if it can be improved.",
                                           "updatedAt":  "2024-01-17T19:13:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xCb21",
                                           "createdAt":  "2024-01-17T19:07:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "levicki",
                                           "body":  "\u003e I\u0027d prefer to add a default interface member on .NET 9 + where the logger can implement this caching in a non-static way.\r\n\r\nThat would be nice but it doesn\u0027t solve the problem for everyone still stuck maintaining code in older frameworks which is a lot of people and a lot of code.",
                                           "updatedAt":  "2024-01-17T19:07:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xCeh5",
                                           "createdAt":  "2024-01-17T19:15:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "qsdfplkj",
                                           "body":  "If you call e.g. `CreateLogger\u003cT\u003e()` and then call `CreateLogger(typeof(T).Name)`  you still get different instance while logging to the same category. You should use the same cache as is in the loggerfactory caching `ILogger` instances. Where `Logger\u003cT\u003e` is  just a wrapper for an `ILogger`.",
                                           "updatedAt":  "2024-01-17T19:16:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xCm_O",
                                           "createdAt":  "2024-01-17T19:29:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "levicki",
                                           "body":  "\u003e If you call e.g. `CreateLogger\u003cT\u003e()` and then call `CreateLogger(typeof(T).Name)` you still get different instance while logging to the same category. You should use the same cache as is in the loggerfactory caching `ILogger` instances. Where `Logger\u003cT\u003e` is just a wrapper for an `ILogger`.\r\n\r\nAs I said, it is a naive implementation brute-forced in 5 minutes showing that it can be done and (assuming it is correct) it results in 35% speed gain and 2.5x less memory usage. I totally agree that it should work the same as the LoggerFactory caching, but I still can\u0027t understand what\u0027s stopping Microsoft developers from implementing it properly for so long?",
                                           "updatedAt":  "2024-01-18T00:19:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xCzjl",
                                           "createdAt":  "2024-01-17T19:48:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "qsdfplkj",
                                           "body":  "You can\u0027t fix getting the same instance via both `CreateLoggers` with an extension method as you can\u0027t use the `LoggerFactory` cache that is used by `CreateLogger(string categoryName)`. But Microsoft can. It should be simple to solve as they could add a `CreateLogger\u003cT\u003e()` to the `ILoggerFactory` interface. Whatever their  reason is I can only guess probably some strict design guidelines. Maybe they don\u0027t want generic code inside nongeneric classes or maybe they postpone until they have some language features that provide support for this....",
                                           "updatedAt":  "2024-01-17T19:49:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xDAbE",
                                           "createdAt":  "2024-01-17T20:11:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "levicki",
                                           "body":  "@qsdfplkj You are right, I can\u0027t do it like that (for starters even if I had the code for `TypeNameHelper` I can\u0027t just cast to `ILogger\u003cT\u003e`. Microsoft devs can surely do something, but as usual they chase some perfection and schedule the fix for some N+1 framework version which is always one version away.\r\n\r\nMeanwhile back in the real world we the customers are forced to use the old versions of framework and stuck with rolling our own imperfect workarounds because we can\u0027t just upgrade our framework willy-nilly \u0026mdash; try doing that in banking or medical industry and see how much you will have to pay for various re-certifications of your application if you change more than your own code.\r\n\r\nI don\u0027t expect Microsoft devs who are used to moving fast and breaking things without cost and consequence (other than for their customers) to understand that.",
                                           "updatedAt":  "2024-01-17T20:11:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xDGXD",
                                           "createdAt":  "2024-01-17T20:27:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e  It should be simple to solve as they could add a CreateLogger\u003cT\u003e() to the ILoggerFactory interface.\r\n\r\nRight, this is what I said above. ",
                                           "updatedAt":  "2024-01-17T20:27:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xGoXd",
                                           "createdAt":  "2024-01-18T00:43:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "levicki",
                                           "body":  "\u003e Right, this is what I said above.\r\n\r\nSo basically it boils down to this:\r\n\r\n - We have a generic method CreateLogger\u003cT\u003e() which is suboptimal (35% performance and 2.5x memory penalty) compared to non-generic method\r\n - Therefore we should avoid using generic `Logger\u003cT\u003e` which is most often used for dependency injection\r\n - In libraries we have to pass `ILoggerFactory` into all classes and keep reference to it in each class so we can create loggers inside of each of those classes with proper `categoryName` (unless there\u0027s a better solution?)\r\n - In those libraries instead of writing `_logger = factory.CreateLogger\u003cClassA\u003e()` we now have to write `_logger = factory.CreateLogger(nameof(ClassA))` or `_logger = factory.CreateLogger(typeof(ClassA))`, both of which look like a code smell compared to using a generic.\r\n\r\nThe more I think about both ILogger and ILoggerFactory the less I like it. I really wish framework stuff wasn\u0027t this unorthogonal and disjointed.",
                                           "updatedAt":  "2024-01-18T00:44:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xHUl6",
                                           "createdAt":  "2024-01-18T03:54:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e Therefore we should avoid using generic Logger\u003cT\u003e which is most often used for dependency injection\r\n\r\nThis is actually not expensive because the DI system is caching `Logger\u003cT\u003e` instances as singletons when injected.",
                                           "updatedAt":  "2024-01-18T03:54:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xJWUO",
                                           "createdAt":  "2024-01-18T11:11:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODhL2KQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HenrikHoyer",
                                                                               "createdAt":  "2024-02-29T18:35:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hexawyz",
                                                                               "createdAt":  "2024-05-08T21:03:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "levicki",
                                           "body":  "\u003e This is actually not expensive because the DI system is caching `Logger\u003cT\u003e` instances as singletons when injected.\r\n\r\n - Is this true for all DI container implementations (Unity, Autofac, etc) or only for Microsoft\u0027s implementation in .NET 5+?\r\n - What about all the libraries which can\u0027t use DI and already use `ILoggerFactory` and `ILogger\u003cTCategoryName\u003e` pattern as per [Microsoft\u0027s own guidance](https://learn.microsoft.com/en-us/dotnet/core/extensions/logging-library-authors)?\r\n\r\nOn a side note, unlike NLog, Serilog for example fails all three asserts in this issue sample code \u0026mdash; it always returns new instance even when they are created with `CreateLogger(string CategoryName)` and `CreateLogger(Type type)` meaning your library performance can be even worse depending on which logging implementation you are using.\r\n\r\nSo instead of whoever designed `ILoggerFactory` making the instance caching an explicit part of the contract by naming the method `CreateOrGetLogger()` we now have this mess of different behaviors of different implementations.",
                                           "updatedAt":  "2024-01-18T11:13:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54DZ3J",
                                           "createdAt":  "2024-03-22T01:37:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CoenraadS",
                                           "body":  "I read this thread and see the recommendation is to use the DI, but then what is the recommended practice for creating an ILogger when using e.g. a factory pattern, and the target class requires a logger?\r\n\r\ne.g. \r\n\r\n```\r\nclass FooFactory(IServiceProvider sp)\r\n{\r\n\r\n    public Foo Create(string name)\r\n    {\r\n        return new Foo(name, sp.GetRequiredService\u003cILogger\u003cFoo\u003e\u003e());\r\n    }\r\n}\r\n```\r\n\r\nThen since this isn\u0027t really nice for e.g. type safe unit testing, because it is using the lookup anti-pattern, one might be expected to create their own \u0027DILoggerFactory` or something which wraps the service provider?",
                                           "updatedAt":  "2024-03-22T01:37:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54GFLJ",
                                           "createdAt":  "2024-03-22T11:11:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "levicki",
                                           "body":  "@CoenraadS You can use something like this:\r\n```\r\npublic static class ClassFactory\r\n{\r\n\tpublic static ILoggerFactory LoggerFactory { get; set; }\r\n\r\n\tpublic static T CreateWithLogger\u003cT\u003e(params object[] args)\r\n\t{\r\n\t\tType t = typeof(T);\r\n\r\n\t\tConstructorInfo ctor = t.GetConstructors().Where(x =\u003e x.IsPublic \u0026\u0026\r\n\t\t\t\t\t\t\t\t      x.CallingConvention.HasFlag(CallingConventions.HasThis) \u0026\u0026\r\n\t\t\t\t\t\t\t\t      x.GetParameters().Length \u003e= 1 \u0026\u0026\r\n\t\t\t\t\t\t\t\t      x.GetParameters()[0].ParameterType == typeof(ILogger\u003cT\u003e)).First();\r\n\r\n\t\tif (ctor != null) {\r\n\t\t\tParameterInfo[] pi = ctor.GetParameters();\r\n\t\t\tobject[] ctorargs = new object[pi.Length];\r\n\t\t\tILogger\u003cT\u003e Logger = LoggerFactory.CreateOrGetLogger\u003cT\u003e();\r\n\t\t\tctorargs[0] = Logger;\r\n\t\t\tfor (int i = 1; i \u003c pi.Length; i++) {\r\n\t\t\t\tif (i \u003c args.Length + 1) {\r\n\t\t\t\t\tctorargs[i] = args[i - 1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (pi[i].IsOptional \u0026\u0026 pi[i].HasDefaultValue) {\r\n\t\t\t\t\t\tctorargs[i] = Type.Missing;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn (T)ctor.Invoke(ctorargs);\r\n\t\t} else {\r\n\t\t\treturn default(T);\r\n\t\t}\r\n\t}\r\n}\r\n\r\npublic static class LoggerFactoryExtensions\r\n{\r\n\tprivate static readonly ConditionalWeakTable\u003cILoggerFactory, ConcurrentDictionary\u003cstring, object\u003e\u003e m_Factories = new ConditionalWeakTable\u003cILoggerFactory, ConcurrentDictionary\u003cstring, object\u003e\u003e();\r\n\tprivate static readonly object m_FactoriesLock = new object();\r\n\tprivate static readonly object m_LoggersLock = new object();\r\n\r\n\tpublic static ILogger\u003cT\u003e CreateOrGetLogger\u003cT\u003e(this ILoggerFactory factory)\r\n\t{\r\n\t\tConcurrentDictionary\u003cstring, object\u003e Loggers = null;\r\n\r\n\t\tif (!m_Factories.TryGetValue(factory, out Loggers)) {\r\n\t\t\tlock (m_FactoriesLock) {\r\n\t\t\t\tif (!m_Factories.TryGetValue(factory, out Loggers)) {\r\n\t\t\t\t\tLoggers = new ConcurrentDictionary\u003cstring, object\u003e(StringComparer.Ordinal);\r\n\t\t\t\t\tm_Factories.Add(factory, Loggers);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tobject Logger = null;\r\n\t\tstring CategoryName = typeof(T).FullName;\r\n\r\n\t\tif (!Loggers.TryGetValue(CategoryName, out Logger)) {\r\n\t\t\tlock (m_LoggersLock) {\r\n\t\t\t\tif (!Loggers.TryGetValue(CategoryName, out Logger)) {\r\n\t\t\t\t\tLogger = new Logger\u003cT\u003e(factory);\r\n\t\t\t\t\tLoggers[CategoryName] = Logger;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (ILogger\u003cT\u003e)Logger;\r\n\t}\r\n}\r\n```\r\nIt creates an instance of a class and does the `ILogger\u003cT\u003e` injection for you provided that the constructor of the class passed as `T` has `ILogger\u003cT\u003e` as its first argument and unlike regular DI it can also pass additional arguments during creation including optional ones.\r\n\r\nOf course, it has limitations (does not use a DI container or a service, error checking can always be improved), but it works well enough for my use case of writing a bunch of class libraries which get `ILoggerFactory` as input and which aren\u0027t supposed to spill their innards into external code that uses a DI container.\r\n\r\nNote also that it\u0027s not meant to create objects which are in a performance critical path such as say buffer objects that get passed around. If you end up using it do check how it will affect your code performance first.",
                                           "updatedAt":  "2024-03-22T11:13:50Z"
                                       }
                                   ],
                         "totalCount":  44
                     },
        "title":  "ILogger\u003cT\u003e was implemented in such a way that it isn\u0027t being cached (for the same type) unlike non generic version",
        "labels":  [
                       "bug",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48622",
        "createdAt":  "2021-02-22T21:33:42Z",
        "number":  48622,
        "author":  "pepone",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-17T20:49:12Z",
        "body":  "### Description\r\n\r\nDictionary types are not property serialized with JSon console logger when using LoggerMessage.Define\r\n\r\nWhen creating a template function to write parametrized logs dictionary types are not correctly serialized in the JSon logger, this works correctly when directly using the LogXXX methods of the logger\r\n\r\n```\r\nAction\u003cILogger, Dictionary\u003cstring, string\u003e, Exception\u003e _contextAction = LoggerMessage.Define\u003cDictionary\u003cstring, string\u003e\u003e(\r\n            LogLevel.Information,\r\n            new EventId(),\r\n            \"context = {Context}\");\r\n\r\nvar logger = loggerFactory.CreateLogger(\"Default\");\r\nlogger.LogInformation(\"context = {Context}\", context);\r\n_contextAction(logger, context, null!);\r\n```\r\n\r\nI would expect the above to generate identical output but they are not, in the second case the `State` doesn\u0027t contain the serialized dictionary just the type name\r\n\r\n```\r\n{\r\n  \"EventId\": 0,\r\n  \"LogLevel\": \"Information\",\r\n  \"Category\": \"Default\",\r\n  \"Message\": \"context = [User, Jose]\",\r\n  \"State\": {\r\n    \"Message\": \"context = [User, Jose]\",\r\n    \"Context\": \"[User, Jose]\",\r\n    \"{OriginalFormat}\": \"context = {Context}\"\r\n  },\r\n  \"Scopes\": []\r\n}\r\n{\r\n  \"EventId\": 0,\r\n  \"LogLevel\": \"Information\",\r\n  \"Category\": \"Default\",\r\n  \"Message\": \"context = [User, Jose]\",\r\n  \"State\": {\r\n    \"Message\": \"context = [User, Jose]\",\r\n    \"Context\": \"System.Collections.Generic.Dictionary\\u00602[System.String,System.String]\",\r\n    \"{OriginalFormat}\": \"context = {Context}\"\r\n  },\r\n  \"Scopes\": []\r\n}\r\n```\r\n\r\nSee full example at https://dotnetfiddle.net/xZ7Dr3",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeuvNug==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MzY4OTc0OQ==",
                                           "createdAt":  "2021-02-22T21:33:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nDictionary types are not property serialized with JSon console logger when using LoggerMessage.Define\r\n\r\nWhen creating a template function to write parametrized logs dictionary types are not correctly serialized in the JSon logger, this works correctly when directly using the LogXXX methods of the logger\r\n\r\n```\r\nAction\u003cILogger, Dictionary\u003cstring, string\u003e, Exception\u003e _contextAction = LoggerMessage.Define\u003cDictionary\u003cstring, string\u003e\u003e(\r\n            LogLevel.Information,\r\n            new EventId(),\r\n            \"context = {Context}\");\r\n\r\nvar logger = loggerFactory.CreateLogger(\"Default\");\r\nlogger.LogInformation(\"context = {Context}\", context);\r\n_contextAction(logger, context, null!);\r\n```\r\n\r\nI would expect the above to generate identical output but they are not, in the second case the `State` doesn\u0027t contain the serialized dictionary just the type name\r\n\r\n```\r\n{\r\n  \"EventId\": 0,\r\n  \"LogLevel\": \"Information\",\r\n  \"Category\": \"Default\",\r\n  \"Message\": \"context = [User, Jose]\",\r\n  \"State\": {\r\n    \"Message\": \"context = [User, Jose]\",\r\n    \"Context\": \"[User, Jose]\",\r\n    \"{OriginalFormat}\": \"context = {Context}\"\r\n  },\r\n  \"Scopes\": []\r\n}\r\n{\r\n  \"EventId\": 0,\r\n  \"LogLevel\": \"Information\",\r\n  \"Category\": \"Default\",\r\n  \"Message\": \"context = [User, Jose]\",\r\n  \"State\": {\r\n    \"Message\": \"context = [User, Jose]\",\r\n    \"Context\": \"System.Collections.Generic.Dictionary\\u00602[System.String,System.String]\",\r\n    \"{OriginalFormat}\": \"context = {Context}\"\r\n  },\r\n  \"Scopes\": []\r\n}\r\n```\r\n\r\nSee full example at https://dotnetfiddle.net/xZ7Dr3\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epepone\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-22T21:33:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MzY5MjY2NQ==",
                                           "createdAt":  "2021-02-22T21:39:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Related question, what would you expect this to log for non-JSON formats?",
                                           "updatedAt":  "2021-02-22T21:39:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MzY5NjA5MQ==",
                                           "createdAt":  "2021-02-22T21:46:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pepone",
                                           "body":  "The simple console logger shows the key/value pairs which seem good to me, I would expect others to serialize the content in some way that is useful, just displaying the type name is not very helpful.\r\n\r\nHere is the output of the sample with the SimpleConsole logger enabled.\r\n```\r\ninfo: Default[0]\r\n      context = [User, Jose]\r\ninfo: Default[0]\r\n      context = [User, Jose]\r\n```\r\n",
                                           "updatedAt":  "2021-02-22T21:46:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NDE0ODUzMg==",
                                           "createdAt":  "2021-02-23T11:55:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pepone",
                                           "body":  "BTW encoding the dictionary as a string `\"Context\": \"[User, Jose]\",` like does the JSON logger is a weird choice, why not encode it as JSON dictionary `\"Context\": {\"User\": \"Jose\"}` makes much more sense to me.",
                                           "updatedAt":  "2021-02-23T11:55:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNzk1NzI5Nw==",
                                           "createdAt":  "2021-03-26T05:53:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "LogXYZ and LoggerMessage.Define have two different underlying implementations. LogXYZ (like LogInformation). use FormattedLogValues behind the scenes to pass down to `ILogger.Log\u003cTState\u003e` as the TState, and `LoggerMessage.Define\u003cT\u003e` APIs use internal struct `LogValues\u003cT\u003e` as the TState to the Log method:\r\n\r\nhttps://github.com/dotnet/runtime/blob/4c93d1be0e54ce86425c220be50d6b91ea051daf/src/libraries/Microsoft.Extensions.Logging.Console/src/ConsoleLogger.cs#L36\r\n\r\nHere with your example, using LogInformation the \"Context\" ends up being a string, and for the `LoggerMessage.Define\u003cT\u003e`  approach (where T is your input dictionary) the context by the time it reaches JsonConsoleFormatter is seen as a dictionary hence the difference in output.\r\n\r\nThis is the line that produces the different line of output:\r\nhttps://github.com/dotnet/runtime/blob/4c93d1be0e54ce86425c220be50d6b91ea051daf/src/libraries/Microsoft.Extensions.Logging.Console/src/JsonConsoleFormatter.cs#L183\r\n\r\nI think FormattedLogValues has no way to keep hold of value T, and hence mutates to a string.\r\nI don\u0027t envision us doing any fix for this.",
                                           "updatedAt":  "2021-03-26T05:54:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODE3MzA2MA==",
                                           "createdAt":  "2021-03-26T12:20:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBlSrmQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2021-03-30T00:41:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pepone",
                                           "body":  "\u003e I think FormattedLogValues has no way to keep hold of value T, and hence mutates to a string.\r\n\r\nWould be nice if the mutation to string was a bit smarter and iterates over the dictionary like it does for the message.\r\n\r\n```\r\n    \"Context\": \"System.Collections.Generic.Dictionary\\u00602[System.String,System.String]\",\r\n```\r\nThis is pretty useless ",
                                           "updatedAt":  "2021-03-26T12:20:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc566826",
                                           "createdAt":  "2024-04-17T20:49:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sgryphon",
                                           "body":  "\u003e I think FormattedLogValues has no way to keep hold of value T, and hence mutates to a string. I don\u0027t envision us doing any fix for this.\r\n\r\nI don\u0027t think the request was about changing LogXyz / FormattedLogValues, i.e. keep it as a string. The \"Context\": \"[User, Jose]\" is useful.\r\n\r\nThe issue was that LoggerMessage.Define / LogValues\u003cT\u003e, when it receives the dictionary outputs a useless \"Context\": \"System.Collections.Generic.Dictionary\\u00602[System.String,System.String]\".\r\n\r\nI.e. the log formatter, when it receives Dictionary, should output at least something similar to FormattedLogValues. The change requested is in the handling of LogValues\u003cT\u003e",
                                           "updatedAt":  "2024-04-17T20:49:11Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Dictionary types are not property serialized with JSon console logger and LoggerMessage",
        "labels":  [
                       "help wanted",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48756",
        "createdAt":  "2021-02-25T11:36:47Z",
        "number":  48756,
        "author":  "Prologh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBkrfRA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "AnthonyMastrean",
                                            "createdAt":  "2021-03-24T14:50:59Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-01-09T22:27:03Z",
        "body":  "### Description\r\n\r\nI\u0027m writing a .NET Core Worker for consuming messages from Kafka. I\u0027ve met an `AggregateException` while trying to log information when cancellation is requested by host shutdown. The behavior is the same when I just press `CTRL` + `C` in console. Since the original Kafka consuming method blocks the thread, I\u0027m running the consuming loop in a new one. \r\n\r\nNot adding EventLog seems to be fixing the issue. I don\u0027t event need EventLog, it comes with logging by default.\r\n\r\nWhat\u0027s weird to me though, is that logging done outside the `catch` blocks works just fine. See the finally block that is executed right after catching the first `OperationCanceledException` and there surprisingly no problems with logging occur.\r\n\r\nI\u0027ve based my hosted service on an example from Confluent, which I believe is fine:\r\nhttps://github.com/confluentinc/confluent-kafka-dotnet/blob/master/examples/Web/RequestTimeConsumer.cs\r\n\r\nI think this SO question might be related:\r\nhttps://stackoverflow.com/questions/57296564/an-error-occurred-while-writing-to-loggers-from-system-diagnostics-eventlogint\r\n\r\n### Configuration\r\n\r\n* Which version of .NET is the code running on?\r\n* .NET Core 3.1\r\n\r\n### Regression?\r\n\r\nI don\u0027t think so. I\u0027ve seen the same happening in an app running on .NET Core 3.1 and .NET 5. No difference.\r\n\r\n### Other information\r\n\r\nStack trace:\r\n\r\n```\r\nSystem.AggregateException: An error occurred while writing to logger(s). (Cannot access a disposed object.\r\n      Object name: \u0027EventLogInternal\u0027.)\r\n       ---\u003e System.ObjectDisposedException: Cannot access a disposed object.\r\n      Object name: \u0027EventLogInternal\u0027.\r\n         at System.Diagnostics.EventLogInternal.OpenForWrite(String currentMachineName)\r\n         at System.Diagnostics.EventLogInternal.InternalWriteEvent(UInt32 eventID, UInt16 category, EventLogEntryType type, String[] strings, Byte[] rawData, String currentMachineName)\r\n         at System.Diagnostics.EventLogInternal.WriteEvent(EventInstance instance, Byte[] data, Object[] values)\r\n         at System.Diagnostics.EventLog.WriteEvent(EventInstance instance, Byte[] data, Object[] values)\r\n         at System.Diagnostics.EventLog.WriteEvent(EventInstance instance, Object[] values)\r\n         at Microsoft.Extensions.Logging.EventLog.WindowsEventLog.WriteEntry(String message, EventLogEntryType type, Int32 eventID, Int16 category)\r\n         at Microsoft.Extensions.Logging.EventLog.EventLogLogger.WriteMessage(String message, EventLogEntryType eventLogEntryType, Int32 eventId)\r\n         at Microsoft.Extensions.Logging.EventLog.EventLogLogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n         at Microsoft.Extensions.Logging.Logger.\u003cLog\u003eg__LoggerLog|12_0[TState](LogLevel logLevel, EventId eventId, ILogger logger, Exception exception, Func`3 formatter, List`1\u0026 exceptions, TState\u0026 state)\r\n         --- End of inner exception stack trace ---\r\n         at Microsoft.Extensions.Logging.Logger.ThrowLoggingError(List`1 exceptions)\r\n         at Microsoft.Extensions.Logging.Logger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n         at Microsoft.Extensions.Logging.Logger`1.Microsoft.Extensions.Logging.ILogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n         at Microsoft.Extensions.Logging.LoggerExtensions.Log(ILogger logger, LogLevel logLevel, EventId eventId, Exception exception, String message, Object[] args)\r\n         at Microsoft.Extensions.Logging.LoggerExtensions.Log(ILogger logger, LogLevel logLevel, String message, Object[] args)\r\n         at Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(ILogger logger, String message, Object[] args)\r\n         at ConsumerHostedService.StartConsumerLoop(CancellationToken cancellationToken) in C:\\Users\\Piotr\\Documents\\Visual Studio 2019\\Projects\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 62\r\n```\r\n\r\nProject file:\r\n\r\n```XML\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk.Worker\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet5.0\u003c/TargetFramework\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Hosting\" Version=\"5.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Hosting.Abstractions\" Version=\"5.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Logging.Abstractions\" Version=\"5.0.0\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\nFull snippet below, host will shut down automatically after few seconds, triggering the exception. Comment out `AddEventLog()` to see the difference.\r\n\r\n```C#\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\n\r\npublic class Program\r\n{\r\n    public static async Task Main(string[] args)\r\n    {\r\n        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(3));\r\n        await CreateHostBuilder(args).Build().RunAsync(cts.Token);\r\n    }\r\n\r\n    public static IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n        Host.CreateDefaultBuilder(args)\r\n            .ConfigureLogging((hostingContext, logging) =\u003e\r\n            {\r\n                logging.ClearProviders();\r\n                logging.AddDebug();\r\n                logging.AddConsole();\r\n                logging.AddEventLog(); // \u003c== Causing Disposed exceptions.\r\n            })\r\n            .ConfigureServices((hostContext, services) =\u003e\r\n            {\r\n                services.AddHostedService\u003cConsumerHostedService\u003e();\r\n            });\r\n}\r\n\r\npublic class ConsumerHostedService : BackgroundService\r\n{\r\n    public ConsumerHostedService(ILogger\u003cConsumerHostedService\u003e logger)\r\n    {\r\n        Logger = logger;\r\n    }\r\n\r\n    private ILogger Logger { get; }\r\n\r\n    protected override Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        new Thread(() =\u003e StartConsumerLoop(stoppingToken)).Start();\r\n\r\n        return Task.CompletedTask;\r\n    }\r\n\r\n    private void StartConsumerLoop(CancellationToken cancellationToken)\r\n    {\r\n        try\r\n        {\r\n            while (!cancellationToken.IsCancellationRequested)\r\n            {\r\n                try\r\n                {\r\n                    var value = Consume(TimeSpan.FromSeconds(1), cancellationToken);\r\n\r\n                    Logger.LogInformation(\"Message successfully consumed. Value: {0}\", value);\r\n                }\r\n                catch (OperationCanceledException)\r\n                {\r\n                    Logger.LogWarning(\"Consuming cancelled.\");\r\n                }\r\n                finally\r\n                {\r\n                    Logger.LogInformation(\"Finally for consuming works anyway.\");\r\n                }\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Logger.LogError(ex, \"Exception caught!\");\r\n\r\n            throw;\r\n        }\r\n        finally\r\n        {\r\n            Logger.LogInformation(\"Finally outside the loop works also.\");\r\n        }\r\n    }\r\n\r\n    private string Consume(TimeSpan delay, CancellationToken cancellationToken)\r\n    {\r\n        Task.Delay(delay, cancellationToken).GetAwaiter().GetResult();\r\n\r\n        return \"FOO\";\r\n    }\r\n}\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOP_iM2g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NTgzMjM5Mw==",
                                           "createdAt":  "2021-02-25T11:38:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-02-25T11:38:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NjM5NzcyMA==",
                                           "createdAt":  "2021-02-26T04:08:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI\u0027m writing a .NET Core Worker for consuming messages from Kafka. I\u0027ve met an `AggregateException` while trying to log information when cancellation is requested by host shutdown. The behavior is the same when I just press `CTRL` + `C` in console. Since the original Kafka consuming method blocks the thread, I\u0027m running the consuming loop in a new one. \r\n\r\nNot adding EventLog seems to be fixing the issue. I don\u0027t event need EventLog, it comes with logging by default.\r\n\r\nWhat\u0027s weird to me though, is that logging done outside the `catch` blocks works just fine. See the finally block that is executed right after catching the first `OperationCanceledException` and there surprisingly no problems with logging occur.\r\n\r\nI\u0027ve based my hosted service on an example from Confluent, which I believe is fine:\r\nhttps://github.com/confluentinc/confluent-kafka-dotnet/blob/master/examples/Web/RequestTimeConsumer.cs\r\n\r\nI think this SO question might be related:\r\nhttps://stackoverflow.com/questions/57296564/an-error-occurred-while-writing-to-loggers-from-system-diagnostics-eventlogint\r\n\r\n### Configuration\r\n\r\n* Which version of .NET is the code running on?\r\n* .NET Core 3.1\r\n\r\n### Regression?\r\n\r\nI don\u0027t think so. I\u0027ve seen the same happening in an app running on .NET Core 3.1 and .NET 5. No difference.\r\n\r\n### Other information\r\n\r\nStack trace:\r\n\r\n```\r\nSystem.AggregateException: An error occurred while writing to logger(s). (Cannot access a disposed object.\r\n      Object name: \u0027EventLogInternal\u0027.)\r\n       ---\u003e System.ObjectDisposedException: Cannot access a disposed object.\r\n      Object name: \u0027EventLogInternal\u0027.\r\n         at System.Diagnostics.EventLogInternal.OpenForWrite(String currentMachineName)\r\n         at System.Diagnostics.EventLogInternal.InternalWriteEvent(UInt32 eventID, UInt16 category, EventLogEntryType type, String[] strings, Byte[] rawData, String currentMachineName)\r\n         at System.Diagnostics.EventLogInternal.WriteEvent(EventInstance instance, Byte[] data, Object[] values)\r\n         at System.Diagnostics.EventLog.WriteEvent(EventInstance instance, Byte[] data, Object[] values)\r\n         at System.Diagnostics.EventLog.WriteEvent(EventInstance instance, Object[] values)\r\n         at Microsoft.Extensions.Logging.EventLog.WindowsEventLog.WriteEntry(String message, EventLogEntryType type, Int32 eventID, Int16 category)\r\n         at Microsoft.Extensions.Logging.EventLog.EventLogLogger.WriteMessage(String message, EventLogEntryType eventLogEntryType, Int32 eventId)\r\n         at Microsoft.Extensions.Logging.EventLog.EventLogLogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n         at Microsoft.Extensions.Logging.Logger.\u003cLog\u003eg__LoggerLog|12_0[TState](LogLevel logLevel, EventId eventId, ILogger logger, Exception exception, Func`3 formatter, List`1\u0026 exceptions, TState\u0026 state)\r\n         --- End of inner exception stack trace ---\r\n         at Microsoft.Extensions.Logging.Logger.ThrowLoggingError(List`1 exceptions)\r\n         at Microsoft.Extensions.Logging.Logger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n         at Microsoft.Extensions.Logging.Logger`1.Microsoft.Extensions.Logging.ILogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n         at Microsoft.Extensions.Logging.LoggerExtensions.Log(ILogger logger, LogLevel logLevel, EventId eventId, Exception exception, String message, Object[] args)\r\n         at Microsoft.Extensions.Logging.LoggerExtensions.Log(ILogger logger, LogLevel logLevel, String message, Object[] args)\r\n         at Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(ILogger logger, String message, Object[] args)\r\n         at ConsumerHostedService.StartConsumerLoop(CancellationToken cancellationToken) in C:\\Users\\Piotr\\Documents\\Visual Studio 2019\\Projects\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 62\r\n```\r\n\r\nProject file:\r\n\r\n```XML\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk.Worker\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet5.0\u003c/TargetFramework\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Hosting\" Version=\"5.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Hosting.Abstractions\" Version=\"5.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Logging.Abstractions\" Version=\"5.0.0\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\nFull snippet below, host will shut down automatically after few seconds, triggering the exception. Comment out `AddEventLog()` to see the difference.\r\n\r\n```C#\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\n\r\npublic class Program\r\n{\r\n    public static async Task Main(string[] args)\r\n    {\r\n        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(3));\r\n        await CreateHostBuilder(args).Build().RunAsync(cts.Token);\r\n    }\r\n\r\n    public static IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n        Host.CreateDefaultBuilder(args)\r\n            .ConfigureLogging((hostingContext, logging) =\u003e\r\n            {\r\n                logging.ClearProviders();\r\n                logging.AddDebug();\r\n                logging.AddConsole();\r\n                logging.AddEventLog(); // \u003c== Causing Disposed exceptions.\r\n            })\r\n            .ConfigureServices((hostContext, services) =\u003e\r\n            {\r\n                services.AddHostedService\u003cConsumerHostedService\u003e();\r\n            });\r\n}\r\n\r\npublic class ConsumerHostedService : BackgroundService\r\n{\r\n    public ConsumerHostedService(ILogger\u003cConsumerHostedService\u003e logger)\r\n    {\r\n        Logger = logger;\r\n    }\r\n\r\n    private ILogger Logger { get; }\r\n\r\n    protected override Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        new Thread(() =\u003e StartConsumerLoop(stoppingToken)).Start();\r\n\r\n        return Task.CompletedTask;\r\n    }\r\n\r\n    private void StartConsumerLoop(CancellationToken cancellationToken)\r\n    {\r\n        try\r\n        {\r\n            while (!cancellationToken.IsCancellationRequested)\r\n            {\r\n                try\r\n                {\r\n                    var value = Consume(TimeSpan.FromSeconds(1), cancellationToken);\r\n\r\n                    Logger.LogInformation(\"Message successfully consumed. Value: {0}\", value);\r\n                }\r\n                catch (OperationCanceledException)\r\n                {\r\n                    Logger.LogWarning(\"Consuming cancelled.\");\r\n                }\r\n                finally\r\n                {\r\n                    Logger.LogInformation(\"Finally for consuming works anyway.\");\r\n                }\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Logger.LogError(ex, \"Exception caught!\");\r\n\r\n            throw;\r\n        }\r\n        finally\r\n        {\r\n            Logger.LogInformation(\"Finally outside the loop works also.\");\r\n        }\r\n    }\r\n\r\n    private string Consume(TimeSpan delay, CancellationToken cancellationToken)\r\n    {\r\n        Task.Delay(delay, cancellationToken).GetAwaiter().GetResult();\r\n\r\n        return \"FOO\";\r\n    }\r\n}\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ePrologh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-26T04:08:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_UUDg",
                                           "createdAt":  "2022-03-08T22:35:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pedrobsaila",
                                           "body":  "Hi @Prologh \r\n\r\nSo here is how the example works :\r\n* you start a new thread asynchronously without blocking/awaiting it `new Thread(() =\u003e StartConsumerLoop(stoppingToken)).Start();`\r\n* You hit `return Task.CompletedTask;`\r\n* The Background service has now ended because of the last step\r\n* Once all background services have ended, we start shutting down host\r\n* We kick the dispose Method of Host\r\n* We dispose of the service container including the Event log logger\r\n* 3 seconds elapses\r\n* the cancellation token is cancelled and OperationCanceledException is thrown inside the new thread\r\n* We try to `Logger.LogWarning(\"Consuming cancelled.\");`\r\n* Since the event log logger inside service container is already disposed, you got the exception\r\n\r\nSame thing happens when you press ctrl + C, you shutdown the host and its service container including the event log logger while the new thread is still doing work with it.\r\n\r\nSo your example works, you need to replace `new Thread(() =\u003e StartConsumerLoop(stoppingToken)).Start()` by `StartConsumerLoop(stoppingToken)`. I believe the issue is in the example, not the runtime. Although it works when you delete `logging.AddEventLog(); `, it is still wrong because you need to ensure the Host is still up when doing your work. You ensure that by not returning `Task.CompletedTask` inside the background service while still scheduling the new thread.",
                                           "updatedAt":  "2022-03-11T20:35:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_-GQy",
                                           "createdAt":  "2022-03-20T12:44:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Prologh",
                                           "body":  "Hi, \r\nThanks for digging up this issue. I gave it a spin and yes it does not throw when starting the consumer loop without new thread. But one thing that still makes me wonder is why in original code example this finally block:\r\n\r\n```C#\r\nfinally\r\n{\r\n    Logger.LogInformation(\"Finally outside the loop works also.\");\r\n}\r\n```\r\n\r\nstill manages to log the message correctly, event though the service container is already disposed and the host is shutting down? It happens after the exception, but still logs the message. Shouldn\u0027t it fail with disposed exception, just like one attempt before? What am I missing here or getting wrong?",
                                           "updatedAt":  "2022-03-20T12:44:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_-Iza",
                                           "createdAt":  "2022-03-20T13:35:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pedrobsaila",
                                           "body":  "\u003e But one thing that still makes me wonder is why in original code example this finally block:\r\n\u003e \r\n\u003e ```cs\r\n\u003e finally\r\n\u003e {\r\n\u003e     Logger.LogInformation(\"Finally outside the loop works also.\");\r\n\u003e }\r\n\u003e ```\r\n\u003e \r\n\u003e still manages to log the message correctly, event though the service container is already disposed and the host is shutting down?\r\n\r\nIt is because the event log logger is configured to log only Warning/Error messages by default, that\u0027s why information/debug/trace logs will always succeed. In fact, every message you log is passed to three loggers (that you configured in `ConfigureLogging` method) :\r\n* `EventLogLoggerProvider` which filters on logs so it picks up only Warnings/Errors and checks if instance already disposed. If it is false, it writes them to windows event log, if not it throws `ObjectDisposedException`\r\n* `DebugLoggerProvider` : logs all king of messages to Debug Output. It always succeeds because it has an empty dispose method\r\n*  `ConsoleLoggerProvider`: logs all kind of messages to Console. It always succeeds because it has a fallback strategy. This logger uses an internal queue for writting messages. When you dispose the logger it disposes the internal queue, which makes the logger fallback to writting message immediately.\r\n",
                                           "updatedAt":  "2022-03-22T22:28:42Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Logging with EventLog in a HostedService running on different thread throws AggregateException during Host shutdown",
        "labels":  [
                       "help wanted",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49923",
        "createdAt":  "2021-03-20T03:45:24Z",
        "number":  49923,
        "author":  "shirhatti",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2zS0A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "reyang",
                                            "createdAt":  "2021-03-22T16:39:49Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "reyang",
                                            "createdAt":  "2021-03-22T16:39:52Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "ericstj",
                                            "createdAt":  "2021-03-30T15:56:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "augustoproiete",
                                            "createdAt":  "2021-09-04T14:57:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "markm77",
                                            "createdAt":  "2023-03-18T19:39:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rkoelbel",
                                            "createdAt":  "2023-10-04T10:51:43Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "rkoelbel",
                                            "createdAt":  "2023-10-04T10:51:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OliverShels",
                                            "createdAt":  "2024-03-26T17:57:04Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2022-07-14T21:11:13Z",
        "body":  "We should add the ability to [enrich](https://github.com/serilog/serilog/wiki/Enrichment) logging scopes, i.e., **add** or **remove** well-known keys without having to replace the default `IExternalScopeProvider`.\r\n\r\nThis would help with issues like https://github.com/dotnet/aspnetcore/issues/31028.\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOL-B0ig==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzIzODg3MA==",
                                           "createdAt":  "2021-03-20T03:45:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe should add the ability to [enrich](https://github.com/serilog/serilog/wiki/Enrichment) logging scopes, i.e., add or remove well-known keys without having to replace the default `IExternalScopeProvider`.\r\n\r\nThis would help with issues like https://github.com/dotnet/aspnetcore/issues/31028.\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eshirhatti\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-20T03:45:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzIzOTA1MA==",
                                           "createdAt":  "2021-03-20T03:47:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBkXJ8g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "reyang",
                                                                               "createdAt":  "2021-03-22T16:39:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "shirhatti",
                                           "body":  "cc @cijothomas @reyang since OpenTelemetry is interested in the same functionality",
                                           "updatedAt":  "2021-03-20T03:47:20Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add the ability to \"enrich\" logging scopes",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49924",
        "createdAt":  "2021-03-20T04:13:17Z",
        "number":  49924,
        "author":  "shirhatti",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-gZ3A==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "avparuch",
                                            "createdAt":  "2021-12-01T03:20:33Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "halter73",
                                            "createdAt":  "2021-12-01T03:28:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ericstj",
                                            "createdAt":  "2022-01-13T18:46:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "halter73",
                                            "createdAt":  "2022-01-13T21:18:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "msallin",
                                            "createdAt":  "2024-06-15T03:59:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vas6ili",
                                            "createdAt":  "2024-10-11T10:25:11Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "hhmmjjnn",
                                            "createdAt":  "2025-01-27T18:30:54Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2023-08-12T00:34:19Z",
        "body":  "We should consider adding the ability to allow filtering log on a per EventID basis. While I don\u0027t expect this to be a common use case, it can invaluable in many situations.\r\n\r\nUnfortunately, ASP.NET Core isn\u0027t judicious with use category names. Enabling debug level logging on a category like `Microsoft.AspNetCore.Server.Kestrel`. For example, if you wanted to increase the verbosity of Kestrel logging to look at something connection establishment logs, you\u0027re stuck with the overhead of verbose logging on your hot path.\r\n\r\n@halter73 @Tratcher can probably link to multiple customer issues that they\u0027ve encountered that would have benefited from this.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY98kJQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzI0MjgxNw==",
                                           "createdAt":  "2021-03-20T04:13:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-03-20T04:13:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzI0MzIyMQ==",
                                           "createdAt":  "2021-03-20T04:13:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shirhatti",
                                           "body":  "Example of an issue we encountered today in ASP.NET Core- https://github.com/dotnet/aspnetcore/issues/30956",
                                           "updatedAt":  "2021-03-20T04:13:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzI0MzI0Nw==",
                                           "createdAt":  "2021-03-20T04:13:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe should consider adding the ability to allow filtering log on a per EventID basis. While I don\u0027t expect this to be a common use case, it can invaluable in many situations.\r\n\r\nUnfortunately, ASP.NET Core isn\u0027t judicious with use category names. Enabling debug level logging on a category like `Microsoft.AspNetCore.Server.Kestrel`. For example, if you wanted to increase the verbosity of Kestrel logging to look at something connection establishment logs, you\u0027re stuck with the overhead of verbose logging on your hot path.\r\n\r\n@halter73 @Tratcher can probably link to multiple customer issues that they\u0027ve encountered that would have benefited from this.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eshirhatti\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-20T04:13:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTM1MDIzMg==",
                                           "createdAt":  "2021-03-23T23:35:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Here\u0027s the customer scenario we\u0027ve run into multiple times: I\u0027m debugging a problem in my application or in the framework. I\u0027ve looked at the code and have a theory for where the problem is occurring. I also see that there are logs in that code path that would help confirm my theory and give me additional details. However, those logs are grouped in a category (e.g. Kestrel) and level (Debug) with many other logs, which turning on in my production environment would swamp the logging system and cripple app performance. How can I turn on specific logs without being inundated by all nearby logs?\r\n\r\nAn example: I want to enable only the following Debug log so I can find out how often these error induced refreshes are happening.\r\nhttps://github.com/dotnet/aspnetcore/blob/7fb760fd7078f10f7ecbeba3eda03d71639b14ac/src/Security/Authentication/OpenIdConnect/src/LoggingExtensions.cs#L130-L133\r\n\r\n",
                                           "updatedAt":  "2021-03-23T23:35:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNTQ2MjQ1Ng==",
                                           "createdAt":  "2021-04-23T07:41:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Assigned to myself to work on.",
                                           "updatedAt":  "2021-04-23T07:41:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNTY2NTcwMw==",
                                           "createdAt":  "2021-04-23T13:39:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This is non trivial as it requires new API. The issue is a bit misleading. It requires changes to the logging abstraction and to all providers to properly support this ",
                                           "updatedAt":  "2021-04-23T13:39:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46mzF_",
                                           "createdAt":  "2021-12-01T03:22:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "avparuch",
                                           "body":  "Having the ability to turn on fine-grained logging will be extremely useful for monitoring the health of our service.",
                                           "updatedAt":  "2021-12-01T03:22:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48WDLN",
                                           "createdAt":  "2022-01-13T18:49:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCJ2-Nw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "halter73",
                                                                               "createdAt":  "2022-01-13T21:19:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chwarr",
                                                                               "createdAt":  "2022-01-13T21:46:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Another customer scenario shared in mail: a particular library that makes use of logging but callers would like to downgrade some of its messages from error to warning or info.  cc @chwarr ",
                                           "updatedAt":  "2022-01-13T18:49:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AI5VC",
                                           "createdAt":  "2022-03-23T08:23:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "A few more use cases that could probably be well served by this feature:\r\n\r\n(1) When dotnet-monitor starts up it has some known warnings that devs of the tool believe are benign and intentional. New users could start out running the tool on the command line and it is preferable not to show them output which could alarm them unnecessarily. Turning off warnings on some categories entirely doesn\u0027t seem like a desirable solution because there might be other unanticipated issues which would be useful to warn about if they occurred.\r\n(2) Still on dotnet-monitor startup, there are some info messages which don\u0027t appear very useful, but others that are more useful. It would help reduce visual clutter if devs had the ability to filter out some of the low value info messages without disabling all info messages. This is less important than the warning filtering if we needed to prioritize, but presumably any feature that handled use case (1) could handle this too.",
                                           "updatedAt":  "2022-03-23T08:23:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j3yQl",
                                           "createdAt":  "2023-08-12T00:34:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jlaanstra",
                                           "body":  "Could we enable something like specifying per provider/category an include and exclude list of EventIds in addition to LogLevel?\r\n\r\nInclude list would override the LogLevel and Exclude list would override the Include list. This would require additions to the logger abstractions, but it seems doable without changes to the logging providers?",
                                           "updatedAt":  "2023-08-12T00:34:19Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Allow log filtering on a per eventId basis",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50775",
        "createdAt":  "2021-04-06T10:32:26Z",
        "number":  50775,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBmNmdA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maryamariyan",
                                            "createdAt":  "2021-04-07T04:31:48Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-07-14T21:13:56Z",
        "body":  "Right now configuring and viewing ILogger logs via our tools is awkward. \r\n\r\n### Experience I\u0027d love to see:\r\n\r\n1. Collecting the logs that the application enabled in its own ILogger logging configuration:\r\n```\r\ndotnet-trace collect -p \u003cpid\u003e --profile logs\r\n```\r\n\r\n2. Collecting logs from a specific category and level:\r\n```\r\ndotnet-trace collect -p \u003cpid\u003e --providers Microsoft.AspNetCore.Server.Kestrel:Trace\r\n```\r\n\r\n3. Viewing logs on the command-line in real-time on-demand:\r\n```\r\ndotnet-trace monitor -p \u003cpid\u003e --profile logs\r\nMicrosoft.AspNetCore.Server.Kestrel    Http2FrameReceived\r\n  Connection id \"0HM7OQN9B4IK8\" received HEADERS frame for stream ID 489 with length 30 and flags END_STREAM ...\r\nMicrosoft.AspNetCore.Server.Kestrel    Http2FrameReceived\r\n  Connection id \"0HM7OQN9B4IK8\" sending PING frame for stream ID 0 with length 8 and flags ACK\r\n...\r\n```\r\nIt doesn\u0027t need to be exactly this formatting, it just needs to be something we agree is a easy to read for humans. For example maybe we should re-use the formatting from the ILogger console logger.\r\n\r\n4. Viewing the logs in VS from a pre-recorded trace\r\nIn the existing VS events view I want ILogger messages to look the same as if they had been logged via EventSource:\r\n - In the \"Provider Name\" column I want to see the ILogger category name\r\n - In the \"Event Name\" column I want to see the ILogger event name\r\n - In the \"Text\" column I want to see the formatted message\r\n - Optional additional columns corresponding to the structured payload arguments\r\n\r\n\r\n### Problems in the current experience\r\n\r\n1. Collecting default logs\r\n```\r\ndotnet-trace collect -p \u003cpid\u003e --providers Microsoft-Extensions-Logging:4::FilterSpecs=\"UseAppFilters\"\r\n```\r\nNotice the cryptic \u00274\u0027 to specify  keywords, multiple arbitrary seeming string constants and the need for quotes inside the command line. If this had been a different shell those quotes might have also needed escape characters. We need [very long documentation](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-5.0#dotnet-trace-tooling) explaining how to format that command-line which suggests virtually nobody is going to get it right from memory.\r\n\r\n2. Collecting specific logs\r\n```\r\ndotnet-trace collect -p \u003cpid\u003e --providers Microsoft-Extensions-Logging:f:5:FilterSpecs=\"Microsoft.AspNetCore.Server.Kestrel:Trace\"\r\n```\r\nSimilar issues as in (1)\r\n\r\n3. Viewing logs on the command-line in real-time - can\u0027t be done on-demand (it can of course be configured up-front with ConsoleLogger)\r\n4. Viewing the log data VS shows something like this:\r\n![image](https://user-images.githubusercontent.com/6243776/113685889-8f0bef80-967b-11eb-9d19-3838c0c4bb34.png)\r\n\r\nAll the Provider Names are listed as \"Microsoft-Extensions-Logging\", not \"Microsoft.AspNetCore.Server.Kestrel\". EventName is listed as \"FormattedMessage\" whereas the ILogger provided name \"Http2FrameReceived\" is buried inside the text in the \"Text\" column and out of view based on default column sizing. In addition to being able to readily view those fields users would probably like to filter/sort based upon them which is awkward unless VS (and any other viewer) special cases the MEL provider.\r\n\r\n5. Last but not least, the string and/or JSON formatting that EventSourceLogger currently does loses structure and/or creates performance overhead relative to doing some fast binary serialization of the payload arguments.\r\n\r\n### How might we make this\r\n\r\nThis is probably a combination of multiple features. This is a rough stab what it would take:\r\n- [ ] The ILogger EventSourceLogger would need to create an EventSource for each ILogger category when it is first observed and use it to log events in addition to logging them to the singleton Microsoft-Extensions-Logging EventSource. Presumably users would not enable both at the same time but the implementation shouldn\u0027t need to care. \r\n- [ ] EventSource would need to support a way to write events with a given ID, name, and level dynamically. We already have Write\\\u003cT\u003e() which allows specifying name but not ID, and WriteEvent() which allows specifying ID but not name. Probably the highest performance technique would be an EventSource API that allows event schema to be defined dynamically (event ID, name, level, keywords, message template, etc) and then future calls to WriteEvent() would use the ID to refer to the event.\r\n- [ ]  In order for dotnet-trace --profile logs to automatically enable the right providers we need the runtime to be define a mutable set of providers with a given name. For example the EventPipe listener would register for a provider named \"Microsoft.Extensions.Logging.EventSources\" as if some EventSource had that name. Each time the EventSourceLoggerProvider code creates a new EventSource for a category it invokes some API like eventSource.AddAlias(\"Microsoft.Extensions.Logging.EventSources\", defaultLevel, defaultKeywords). Any session that included that name in their provider list automatically gets subscribed to the new EventSource with the specified level and keywords.\r\n- [ ] dotnet-trace needs to be update to accept \u003cprovider_name\u003e:\u003ctextual_level_name\u003e and \u003cprovider_name\u003e::\u003ctextual_level_name\u003e as valid syntax. Currently only numbers are accepted as a level and they must follow two colons. Knowing that level names would never be valid keyword encodings should mean single colon is still unambinguous.\r\n- [ ] dotnet-trace monitor - We\u0027ve already got some work in progress [here](https://github.com/dotnet/diagnostics/pull/1663) but it may need continued adjustments on the formatting/extensibility. \r\n\r\nI don\u0027t think anything is necessary in Visual Studio or PerfView, the improved viewing experience should fall out once ILogger is being recorded the same way that EventSource is.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMLO0-Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNDAxMzcwOA==",
                                           "createdAt":  "2021-04-06T10:32:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRight now configuring and viewing ILogger logs via our tools is awkward. \r\n\r\n### Experience I\u0027d love to see:\r\n\r\n1. Collecting the logs that the application enabled in its own ILogger logging configuration:\r\n```\r\ndotnet-trace collect -p \u003cpid\u003e --profile logs\r\n```\r\n\r\n2. Collecting logs from a specific category and level:\r\n```\r\ndotnet-trace collect -p \u003cpid\u003e --providers Microsoft.AspNetCore.Server.Kestrel:Trace\r\n```\r\n\r\n3. Viewing logs on the command-line in real-time on-demand:\r\n```\r\ndotnet-trace monitor -p \u003cpid\u003e --profile logs\r\nMicrosoft.AspNetCore.Server.Kestrel    Http2FrameReceived\r\n  Connection id \"0HM7OQN9B4IK8\" received HEADERS frame for stream ID 489 with length 30 and flags END_STREAM ...\r\nMicrosoft.AspNetCore.Server.Kestrel    Http2FrameReceived\r\n  Connection id \"0HM7OQN9B4IK8\" sending PING frame for stream ID 0 with length 8 and flags ACK\r\n...\r\n```\r\nIt doesn\u0027t need to be exactly this formatting, it just needs to be something we agree is a easy to read for humans. For example maybe we should re-use the formatting from the ILogger console logger.\r\n\r\n4. Viewing the logs in VS from a pre-recorded trace\r\nIn the existing VS events view I want ILogger messages to look the same as if they had been logged via EventSource:\r\n - In the \"Provider Name\" column I want to see the ILogger category name\r\n - In the \"Event Name\" column I want to see the ILogger event name\r\n - In the \"Text\" column I want to see the formatted message\r\n - Optional additional columns corresponding to the structured payload arguments\r\n\r\n\r\n### Problems in the current experience\r\n\r\n1. Collecting default logs\r\n```\r\ndotnet-trace collect -p \u003cpid\u003e --providers Microsoft-Extensions-Logging:4::FilterSpecs=\"UseAppFilters\"\r\n```\r\nNotice the cryptic \u00274\u0027 to specify  keywords, multiple arbitrary seeming string constants and the need for quotes inside the command line. If this had been a different shell those quotes might have also needed escape characters. We need [very long documentation](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-5.0#dotnet-trace-tooling) explaining how to format that command-line which suggests virtually nobody is going to get it right from memory.\r\n\r\n2. Collecting specific logs\r\n```\r\ndotnet-trace collect -p \u003cpid\u003e --providers Microsoft-Extensions-Logging:f:5:FilterSpecs=\"Microsoft.AspNetCore.Server.Kestrel:Trace\"\r\n```\r\nSimilar issues as in (1)\r\n\r\n3. Viewing logs on the command-line in real-time - can\u0027t be done\r\n4. Viewing the log data VS shows something like this:\r\n![image](https://user-images.githubusercontent.com/6243776/113685889-8f0bef80-967b-11eb-9d19-3838c0c4bb34.png)\r\n\r\nAll the Provider Names are listed as \"Microsoft-Extensions-Logging\", not \"Microsoft.AspNetCore.Server.Kestrel\". EventName is listed as \"FormattedMessage\" whereas the ILogger provided name \"Http2FrameReceived\" is buried inside the text in the \"Text\" column and out of view based on default column sizing. In addition to being able to readily view those fields users would probably like to filter/sort based upon them which is awkward unless VS (and any other viewer) special cases the MEL provider.\r\n\r\n5. Last but not least, the string and/or JSON formatting that EventSourceLogger currently does loses structure and/or creates performance overhead relative to doing some fast binary serialization of the payload arguments.\r\n\r\n### How might we make this\r\n\r\nThis is probably a combination of multiple features. This is a rough stab what it would take:\r\n- [ ] The ILogger EventSourceLogger would need to create an EventSource for each ILogger category when it is first observed and use it to log events in addition to logging them to the singleton Microsoft-Extensions-Logging EventSource. Presumably users would not enable both at the same time but the implementation shouldn\u0027t need to care. \r\n- [ ] EventSource would need to support a way to write events with a given ID, name, and level dynamically. We already have Write\\\u003cT\u003e() which allows specifying name but not ID, and WriteEvent() which allows specifying ID but not name. Probably the highest performance technique would be an EventSource API that allows event schema to be defined dynamically (event ID, name, level, keywords, message template, etc) and then future calls to WriteEvent() would use the ID to refer to the event.\r\n- [ ]  In order for dotnet-trace --profile logs to automatically enable the right providers we need the runtime to be define a mutable set of providers with a given name. For example the EventPipe listener would register for a provider named \"Microsoft.Extensions.Logging.EventSources\" as if some EventSource had that name. Each time the EventSourceLoggerProvider code creates a new EventSource for a category it invokes some API like eventSource.AddAlias(\"Microsoft.Extensions.Logging.EventSources\", defaultLevel, defaultKeywords). Any session that included that name in their provider list automatically gets subscribed to the new EventSource with the specified level and keywords.\r\n- [ ] dotnet-trace needs to be update to accept \u003cprovider_name\u003e:\u003ctextual_level_name\u003e and \u003cprovider_name\u003e::\u003ctextual_level_name\u003e as valid syntax. Currently only numbers are accepted as a level and they must follow two colons. Knowing that level names would never be valid keyword encodings should mean single colon is still unambinguous.\r\n- [ ] dotnet-trace monitor - We\u0027ve already got some work in progress [here](https://github.com/dotnet/diagnostics/pull/1663) but it may need continued adjustments on the formatting/extensibility. \r\n\r\nI don\u0027t think anything is necessary in Visual Studio or PerfView, the improved viewing experience should fall out once ILogger is being recorded the same way that EventSource is.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enoahfalk\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-06T10:32:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzA4MzY0MQ==",
                                           "createdAt":  "2021-04-10T05:46:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I\u0027d like to see how expensive this turned out to be in practice (allocating an event source per logger category)",
                                           "updatedAt":  "2021-04-10T05:46:54Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[Feature Request] Make ILogger collection and viewing via dotnet-trace and VS more streamlined",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Logging",
                       "User Story",
                       "Bottom Up Work"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50777",
        "createdAt":  "2021-04-06T11:40:12Z",
        "number":  50777,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODIGaiw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "roji",
                                            "createdAt":  "2021-12-28T11:52:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "madelson",
                                            "createdAt":  "2022-01-19T22:22:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rdewaele",
                                            "createdAt":  "2022-01-20T01:26:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "julealgon",
                                            "createdAt":  "2022-05-06T14:28:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2022-05-08T08:17:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "calebkiage",
                                            "createdAt":  "2023-03-15T11:20:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lmolkova",
                                            "createdAt":  "2024-08-23T16:30:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Athari",
                                            "createdAt":  "2025-07-23T05:25:06Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2024-08-31T05:44:34Z",
        "body":  "My biggest current challenge recommending library authors to use ILogger in preference to EventSource is that their library may not use dependency injection. I mean this in the general sense that their library may not have a constructor parameter or a property where an ILogger object could be passed to them and they either can\u0027t or don\u0027t want to modify their library to add those parameters. Currently EventSource satisfies that use-case well because they can be new\u0027ed up anywhere and automatically register globally, eliminating the need to pass them around. If we want ILogger to support a similar range of usage then we need to support some globally scoped ILoggers. \r\n\r\nTo be upfront - I\u0027ve never had a specific library author push back because this issue affected them. However on the other hand I avoid making blanket statements that library authors should use ILogger, nor do I write that guidance in our docs, primarily because of this concern. Its possible if I started pushing there would be no issue at all, or alternatively the complaints might start rolling in that we didn\u0027t think this through before we started encouraging more people to use it. My best guess is that people would quietly make workarounds by adding mutable static fields to their libraries and adding APIs like Library.InitLogger(ILogger) and writing to it with MyLibrary.s_logger?.Log(...). It works for simple cases but it isn\u0027t a great place to be:\r\n- It requires all the library consumers to learn the different API conventions each library author used so they can call all the Init methods\r\n- Any scenario that would use more than one DI container will have more than one LoggerFactory, but only one ILogger can ever be registered.\r\n\r\nI think this entails two steps:\r\n1. Provide some API that creates/registers a global ILogger. For example it might be LoggerFactory.Global.CreateLogger(loggerName).\r\n2. Provide a way for log consumers to subscribe to those global loggers. Two options so far:\r\n    - One proposal was that you would register providers on the global factory just as you would any other factory. We would have some API that configures the DI container to use the global factory instead of creating a new LoggerFactory instance.\r\n    - Another option is that you invoke some new API on any logger factory, ie factory.UseGlobalLoggers(), so that the loggers on the global factory become visible to the non-global factory.\r\n\r\nAt the moment the 2nd option sounds better to me, but there isn\u0027t broad agreement on it. The scenario I am imagining is something like you\u0027ve got multiple test cases, each of which have their own DI container, their own LoggerFactory, and their own logging output. However all the test cases interact with a shared library and it would improve diagnosability if the log output from that shared library could be added to the test logging as well. The 2nd option appears to allow that easily whereas with the 1st option I didn\u0027t see a straightforward approach.\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOinLeJg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNDA1MTg4MQ==",
                                           "createdAt":  "2021-04-06T11:40:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nMy biggest current challenge recommending library authors to use ILogger in preference to EventSource is that their library may not use dependency injection. I mean this in the general sense that their library may not have a constructor parameter or a property where an ILogger object could be passed to them and they either can\u0027t or don\u0027t want to modify their library to add those parameters. Currently EventSource satisfies that use-case well because they can be new\u0027ed up anywhere and automatically register globally, eliminating the need to pass them around. If we want ILogger to support a similar range of usage then we need to support some globally scoped ILoggers. \r\n\r\nTo be upfront - I\u0027ve never had a specific library author push back because this issue affected them. However on the other hand I avoid making blanket statements that library authors should use ILogger, nor do I write that guidance in our docs, primarily because of this concern. Its possible if I started pushing there would be no issue at all, or alternatively the complaints might start rolling in that we didn\u0027t think this through before we started encouraging more people to use it. My best guess is that people would quietly make workarounds by adding mutable static fields to their libraries and adding APIs like Library.InitLogger(ILogger) and writing to it with MyLibrary.s_logger?.Log(...). It works for simple cases but it isn\u0027t a great place to be:\r\n- It requires all the library consumers to learn the different API conventions each library author used so they can call all the Init methods\r\n- Any scenario that would use more than one DI container will have more than one LoggerFactory, but only one ILogger can ever be registered.\r\n\r\nI think this entails two steps:\r\n1. Provide some API that creates/registers a global ILogger. For example it might be LoggerFactory.Global.CreateLogger(loggerName).\r\n2. Provide a way for log consumers to subscribe to those global loggers. Two options so far:\r\n    - One proposal was that you would register providers on the global factory just as you would any other factory. We would have some API that configures the DI container to use the global factory instead of creating a new LoggerFactory instance.\r\n    - Another option is that you invoke some new API on any logger factory, ie factory.UseGlobalLoggers(), so that the loggers on the global factory become visible to the non-global factory.\r\n\r\nAt the moment the 2nd option sounds better to me, but there isn\u0027t broad agreement on it. The scenario I am imagining is something like you\u0027ve got multiple test cases, each of which have their own DI container, their own LoggerFactory, and their own logging output. However all the test cases interact with a shared library and it would improve diagnosability if the log output from that shared library could be added to the test logging as well. The 2nd option appears to allow that easily whereas with the 1st option I didn\u0027t see a straightforward approach.\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enoahfalk\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-06T11:40:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNDU3ODk2Mg==",
                                           "createdAt":  "2021-04-07T03:46:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "I have been thinking in detail about whether or not we could come up with a set of best practices (in case it doesn\u0027t exist yet) when dealing with libraries such as Logging that have been designed with DI in mind as their object creation pipeline.\r\n\r\nI have gathered a set of bulletpoints (general ideas) below that I wanted to share here as it seems to be very relevant to the discussion here. These points are not specific to logging, but in general might make sense to always keep in mind when we want to design libraries that need to work well in combination with DI.\r\n\r\n\u003e Allow libraries that don\u0027t use DI to make use of ILogger\r\n\r\nI am in favor of making sure our Logging libraries are robust enough such the developers/library authors using it can still take advantage of it whether they are\r\n- [A] using DI containers to create/manage their objects (including ILogger instances)\r\n- [B] using global instances if they want to\r\n- [C] using a global container instance to get objects (ILogger instances in this case)\r\nor any other way.\r\n\r\nFrom the point of view of the Developer using our library, \r\n- Developers using the logging library, should not be affected if we internally use DI as our object creation pipeline\r\n- Developers who DON\u0027T care about DI should not be affected by our library using it internally\r\n- Developers who DO care about DI can choose the container they want to use and get both their objects and our library objects out of it.\r\n\r\n\r\nFrom the point of view of the logging library itself:\r\n- Logging library would not need to know/care about how the objects (including ILogger) are wired up under the hood\r\n\r\n\r\n\u003e Any scenario that would use more than one DI container will have more than one LoggerFactory, but only one ILogger can ever be registered.\r\n\r\nMy idea is that, it is good practice if library authors always consider having only one object creation pipeline in their applications. I want to learn about when it is actually appropriate for an application to have multiple DI containers available.\r\n\r\n----\r\n\r\nIf the above bullet points are somewhat agreed upon, then we could hopefully use them as a basis to understand what we are missing for libraries authors/developers that do not use DI to make use of ILogger.\r\n\r\nI came across this blog post as well (a bit old but still relevant) which helps back the bulletpoints I added above: https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/november/dependency-injection-in-libraries#howd-we-do",
                                           "updatedAt":  "2021-04-07T04:11:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNDY4Mzc4NQ==",
                                           "createdAt":  "2021-04-07T07:42:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e I want to learn about when it is actually appropriate for an application to have multiple DI containers available.\r\n\r\nPoking around a little on github it shows ~8000 results for C# code creating new LoggerFactory instances and 50,000 results for C# code creating new ServiceCollection instances. I didn\u0027t dive very deep, but a lot of the usage appears to be test cases.\r\n\r\nLooking at the ASP.NET team\u0027s tests we see lots of xunit test cases that derive from [LoggedTest](https://source.dot.net/#Microsoft.AspNetCore.Testing/LoggedTest/LoggedTest.cs,9811a71cb2037cf0,references) and the Initialize() method creates a unique ServiceCollection and LoggerFactory object for each one. Each test\u0027s LoggerFactory is hooked up to a unique [SerilogLoggerProvider](https://source.dot.net/#Microsoft.AspNetCore.Testing/AssemblyTestLog.cs,159) that outputs to a unique named file. If all the tests were attempting to share a single global LoggerFactory (or a single DI container with a single factory inside it) then they would be unable to have those unique configurations.\r\n\r\n\r\n\u003e From the point of view of the Developer using our library...\r\n\r\nI think there are two different Developer points of view, not sure which you were refering to?\r\n- Library authors want to generate log messages (for example the ASP.Net dev team or a 3rd party library author)\r\n- Application authors want to configure which log messages to collect and where they should be stored\r\n\r\nThe scenario I had in mind is:\r\n- Library author doesn\u0027t want to use DI, but does want to use ILogger.\r\n- App developer may or may not want to use DI, but does want to receive log messages from that library\r\n\r\nTrivial example, library code:\r\n```C#\r\nclass Foo\r\n{\r\n    void DoSomething()\r\n    {\r\n        // As the library author I want to log this error. I am willing to change the implementation but\r\n        // I do not want to change the public API (aka I am unwilling/unable to use a DI pattern).\r\n        // This means there is no API that lets my caller pass me an ILogger instance.\r\n        string errorString = \"Oops a bad thing happened\";\r\n     }\r\n}\r\n```\r\nTrivial example, app code:\r\n```C#\r\nLoggerFactory f = ConfigureFactory();\r\nFoo f = new Foo();\r\n\r\n// As the app author I want to see the error in this code get logged. I am flexible about what\r\n// code goes inside ConfigureFactory() to make that happen.\r\nf.DoSomething();\r\n```",
                                           "updatedAt":  "2021-04-07T07:59:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNDgyODMyNQ==",
                                           "createdAt":  "2021-04-07T11:18:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  " Thanks for the explanation. Based on the issue description, it seems like from a library author\u0027s standpoint, a sample problem at hand is regarding how they could potentially get a hold of a global ILogger in their codebase in a case like below:\r\n\r\n\u003e their library may not have a constructor parameter or a property where an ILogger object could be passed to them and they either can\u0027t or don\u0027t want to modify their library to add those parameters. \r\n\r\n\u003e My best guess is that people would quietly make workarounds by adding mutable static fields to their libraries and adding APIs like Library.InitLogger(ILogger) and writing to it with MyLibrary.s_logger?.Log(...). It works for simple cases but it isn\u0027t a great place to be:\r\n\u003e - It requires all the library consumers to learn the different API conventions each library author used so they can call all the Init methods\r\n\u003e - Any scenario that would use more than one DI container will have more than one LoggerFactory, but only one ILogger can ever be registered.\r\n\r\nI think this makes it even more pressing that there needs to be general best practices here for library designs, not only for our logging library itself but also for any 3rd party library author dealing with ILogger in this case:\r\n\r\n- It should not matter if they do not rely on DI containers internally to manage their dependencies\r\n- But (I think) they should refrain from using static instantiation, not only because of the two bulletpoints that you stated above, but also because this would cause them to restrict their own library consumers or app developers from being able to use DI containers to instantiate ILogger if they wanted to (there would only ever be that one static ILogger that has now bled into the code and that DI container would not be able to access it if it has been set in the 3rd party library).\r\n\r\nAnd the `f.DoSomething()` example you presented illustrates this challenge from the point of view of both the third party library using our ILogger as well that library\u0027s app author. \r\n\r\nI am guessing the scope of this issue is to find out any sort of API or functionality that is missing in our logging library such that getting from the above example only requires the library authors to refactor their code using (a) internal APIs or (b) extension methods to make accessing of arbitrary ILoggers `f.DoSomething()` just work. (since the restriction is on them not wanting/being able to change their public APIs).\r\n\r\nIf that is the ask here, I would argue that the main purpose of trying to do DI constructor injection is to clearly state dependencies upfront. The alternative would be to hide this dependency through some sort of mechanism, abstraction, or factories, etc. I assume that it should be fine for a library author to not necessarily rely on DI ctor injection to declare its own inner dependencies, but they should do that in a format that does not block their own users from wanting to use DI containers, if they wanted, to get access to ILogger for example.\r\n\r\n\r\n---\r\nthis blog post is very relevant to this issue https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/november/dependency-injection-in-libraries, and it presents a very relevant logging case study as well.",
                                           "updatedAt":  "2021-04-07T11:21:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45tbu5",
                                           "createdAt":  "2021-11-14T05:48:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCKq5ZA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2022-01-19T22:34:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "I\u0027ve been looking into this more lately and pondering if we had cheaper options that might involve guidance/samples rather than new public APIs. Above I was suggesting that library developers wouldn\u0027t want to modify their public API at all but that is probably too strong a requirement. What seems more likely is that they don\u0027t want to make sweeping changes or modify their existing types, but they would be willing to add a small amount of new surface area that allows better interaction with ILogger. In fact in the initial description I proposed they would write some `static InitLogger(ILogger logger)` function which is an example of a minimal public surface area addition. \r\n\r\nInstead of that `InitLogger` function we could suggest alternate patterns based on extension methods for ILoggerFactory or IServiceContainer that align more closely with how libraries would normally integrate into the DI container. This still has the limitation they can\u0027t have some of their library types logging to LoggerFactoryA and others logging to LoggerFactoryB, but I think that is a fundamental limitation of being unwilling to expose the logging dependency in a type\u0027s constructor/factory. For the other issues it offers libraries more consistent patterns on how to register and it could be implemented in a way that multiplexes the logging to multiple LoggerFactories.\r\n\r\n## App code \r\n\r\nThe app author gets to pick one of these:\r\n\r\n### App option 1 - No-host app:\r\n\r\n```C#\r\nstatic void Main(string[] args)\r\n{\r\n    ConfigureFactory();\r\n\r\n    Foo f = new Foo();   // this type is provided by library author and it has logging inside it\r\n    f.DoSomething();      \r\n}\r\n\r\nstatic void ConfigureFactory()\r\n{\r\n    ILoggerFactory factory = LoggerFactory.Create(builder =\u003e\r\n    {\r\n        // whatever arbitrary config the app dev wants here...\r\n        builder.AddConsole(); \r\n    });\r\n    factory.AddFooLibLogging();  // this method was provided by the library author\r\n}\r\n```\r\n\r\n### App Option 2 - hosted app\r\n\r\n```C#\r\nstatic void Main(string[] args)\r\n{\r\n    IHost host = Host.CreateDefaultBuilder(args)\r\n        .ConfigureLogging(logging =\u003e\r\n        {\r\n            // whatever arbitrary config the app dev wants here...\r\n            logging.AddConsole();\r\n        })\r\n        .ConfigureServices(services =\u003e\r\n        {\r\n           services.AddFooLib(); // this method was provided by the library author\r\n        })\r\n    .Build();\r\n\r\n    // one of many ways the app developer can run some code with their host...\r\n    IHostApplicationLifetime lifetime = host.Services.GetService\u003cIHostApplicationLifetime\u003e();\r\n    lifetime.ApplicationStarted.Register(() =\u003e\r\n    {\r\n        Foo f = new Foo();  // this type is provided by library author and it has logging inside it\r\n        f.DoSomething();\r\n    });\r\n\r\n    host.Run();\r\n}\r\n```\r\n\r\n## Library Code\r\n\r\nThe library dev gets to pick one of these depending on whether they want to reuse existing EventSources or they are instrumenting with ILogger directly:\r\n\r\n### Library Option 1 - Using ILogger\r\n\r\nLibrary implements their Foo type with a static ILogger instance: \r\n\r\n```C#\r\n    class Foo\r\n    {\r\n        internal static ILogger\u003cFoo\u003e Log { get; set; } = new NullLogger\u003cFoo\u003e();\r\n\r\n        public void DoSomething() \r\n        {\r\n            Log.LogInformation(\"Something happened\");\r\n        }\r\n    }\r\n```\r\n\r\nLibrary implements the extension methods to let app authors enable the logging:\r\n\r\n```C#\r\n    public static class ExtensionFunctions\r\n    {\r\n        public static ILoggerFactory AddFooLibLogging(this ILoggerFactory factory)\r\n        {\r\n            // this impl doesn\u0027t support multiplexing to multiple LoggerFactories but\r\n            // but a more complex one could\r\n            Foo.Log = factory.CreateLogger\u003cFoo\u003e();\r\n            return factory;\r\n        }\r\n\r\n        internal static void RemoveFooLibLogging(this ILoggerFactory factory)\r\n        {\r\n            Foo.Log = new NullLogger\u003cFoo\u003e();\r\n        }\r\n\r\n        public static IServiceCollection AddFooLib(this IServiceCollection services)\r\n        {\r\n            services.AddHostedService\u003cLoggerFactoryForwarder\u003e();\r\n            return services;\r\n        }\r\n    }\r\n\r\n    class LoggerFactoryForwarder : IHostedService\r\n    {\r\n        ILoggerFactory _loggerFactory;\r\n        public LoggerFactoryForwarder(ILoggerFactory factory)\r\n        {\r\n            _loggerFactory = factory;\r\n        }\r\n\r\n        public Task StartAsync(CancellationToken cancellationToken)\r\n        {\r\n            _loggerFactory.AddFooLibLogging();\r\n            return Task.CompletedTask;\r\n        }\r\n\r\n        public Task StopAsync(CancellationToken cancellationToken)\r\n        {\r\n            _loggerFactory.RemoveFooLibLogging();\r\n            return Task.CompletedTask;\r\n        }\r\n    }\r\n```\r\n\r\n### Library Option 2 - Adapt pre-existing EventSource instrumentation\r\n\r\nLibrary author has their existing implementation:\r\n\r\n```C#\r\n    [EventSource(Name = \"FooCompany-Foo\")]\r\n    class FooEventSource : EventSource\r\n    {\r\n        [Event(1, Message = \"Something happened\")]\r\n        public void SomethingHappened()\r\n        {\r\n            WriteEvent(1);\r\n        }\r\n    }\r\n\r\n    class Foo\r\n    {\r\n        internal static FooEventSource Log { get; private set; } = new FooEventSource();\r\n\r\n        public void DoSomething() \r\n        {\r\n            Log.SomethingHappened();\r\n        }\r\n    }\r\n```\r\n\r\nLibrary dev creates this (sadly non-trivial) adapter. This is roughly cribbed from what [Azure SDK](https://docs.microsoft.com/en-us/dotnet/azure/sdk/logging#map-to-aspnet-core-logging) is doing.\r\n\r\n```C#\r\n    public static class ExtensionFunctions\r\n    {\r\n        static LoggerFactoryForwarder s_forwarder; \r\n        public static ILoggerFactory AddFooLibLogging(this ILoggerFactory factory)\r\n        {\r\n            s_forwarder = new LoggerFactoryForwarder(factory);\r\n            return factory;\r\n        }\r\n\r\n        public static IServiceCollection AddFooLib(this IServiceCollection services)\r\n        {\r\n            services.AddHostedService\u003cLoggerFactoryForwarder\u003e();\r\n            return services;\r\n        }\r\n    }\r\n\r\n    class LoggerFactoryForwarder : EventListener, IHostedService\r\n    {\r\n        ILoggerFactory _loggerFactory;\r\n        ILogger\u003cFoo\u003e _logger;\r\n        public LoggerFactoryForwarder(ILoggerFactory factory)\r\n        {\r\n            _loggerFactory = factory;\r\n        }\r\n\r\n        public Task StartAsync(CancellationToken cancellationToken)\r\n        {\r\n            Start();\r\n            return Task.CompletedTask;\r\n        }\r\n\r\n        public void Start()\r\n        {\r\n            _logger = _loggerFactory.CreateLogger\u003cFoo\u003e();\r\n            EnableEvents(Foo.Log, EventLevel.Informational);\r\n        }\r\n\r\n        public Task StopAsync(CancellationToken cancellationToken)\r\n        {\r\n            Stop();\r\n            return Task.CompletedTask;\r\n        }\r\n\r\n        public void Stop()\r\n        {\r\n            DisableEvents(Foo.Log);\r\n        }\r\n\r\n        protected override void OnEventWritten(EventWrittenEventArgs eventData)\r\n        {\r\n           // AzureSDK had some custom formatting logic here which makes the adapter yet larger\r\n           // I omitted it for brevity\r\n            _logger.Log(ConvertLogLevel(eventData.Level), eventData.Message, new EventSourceEvent(eventData));\r\n        }\r\n\r\n        LogLevel ConvertLogLevel(EventLevel level)\r\n        {\r\n            return level switch\r\n            {\r\n                EventLevel.LogAlways =\u003e LogLevel.Critical,\r\n                EventLevel.Critical =\u003e LogLevel.Critical,\r\n                EventLevel.Error =\u003e LogLevel.Error,\r\n                EventLevel.Warning =\u003e LogLevel.Warning,\r\n                EventLevel.Informational =\u003e LogLevel.Information,\r\n                _ =\u003e LogLevel.Trace\r\n            };\r\n        }\r\n\r\n        private readonly struct EventSourceEvent : IReadOnlyList\u003cKeyValuePair\u003cstring, object\u003e\u003e\r\n        {\r\n            public EventWrittenEventArgs EventData { get; }\r\n\r\n            public EventSourceEvent(EventWrittenEventArgs eventData)\r\n            {\r\n                EventData = eventData;\r\n            }\r\n\r\n            public IEnumerator\u003cKeyValuePair\u003cstring, object\u003e\u003e GetEnumerator()\r\n            {\r\n                for (int i = 0; i \u003c Count; i++)\r\n                {\r\n                    yield return new KeyValuePair\u003cstring, object\u003e(EventData.PayloadNames[i], EventData.Payload[i]);\r\n                }\r\n            }\r\n\r\n            IEnumerator IEnumerable.GetEnumerator()\r\n            {\r\n                return GetEnumerator();\r\n            }\r\n\r\n            public int Count =\u003e EventData.PayloadNames.Count;\r\n\r\n            public KeyValuePair\u003cstring, object\u003e this[int index] =\u003e new KeyValuePair\u003cstring, object\u003e(EventData.PayloadNames[index], EventData.Payload[index]);\r\n        }\r\n    }\r\n```\r\n\r\nI think seeing these working gives me a little more confidence giving blanket recommendations for ILogger, even though I feel a little gross asking a library dev to write that EventSource -\u003e ILogger adapter if they find themselves in option 2. Maybe there aren\u0027t many devs that are in that situation, but if we get feedback that are a lot of people doing this we should try to make some shared community or runtime implementation of the forwarder.\r\n\r\nThoughts?\r\n@maryamariyan @tarekgh @shirhatti @davidfowl \r\n\r\n",
                                           "updatedAt":  "2021-11-14T05:48:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47uh-k",
                                           "createdAt":  "2021-12-28T11:53:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCKq5kA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2022-01-19T22:34:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  ":+1: on this, ran into this problem when adopting Microsoft.Extensions.Logging for the Npgsql library, where ADO.NET is not DI-compatible. Some best practices and documentation would be helpful.",
                                           "updatedAt":  "2021-12-28T11:53:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc473j5b",
                                           "createdAt":  "2022-01-03T23:17:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "@roji thanks for feedback! Were you primarily suggesting that the info above was good but needed to be more easily discoverable, or that more info is needed, or both?\r\n\r\n\u003e Some best practices\r\n\r\nI\u0027ll admit I have seen very few real world examples so far. I think and hope the above suggestions will be effective, but I wouldn\u0027t want to claim this is a well proven technique if Azure SDK is my only data point : )",
                                           "updatedAt":  "2022-01-03T23:17:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4753ns",
                                           "createdAt":  "2022-01-04T17:31:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@noahfalk I think the info above is good - it\u0027s mostly that it needs a home under the [logging documentation section](https://docs.microsoft.com/en-us/dotnet/core/extensions/logging?tabs=command-line) (i.e. a sub-page for implementing logging for libraries?).\r\n\r\nOne thing about \"Library Option 1\": there\u0027s a suggested AddFooLib which accepts an IServiceCollection, for making it easier to use in DI scenarios. First of all, I wouldn\u0027t necessarily recommend that applications take a dependency on Microsoft.Extensions.DependencyInjection.Abstractions just in order to provide such an adapter; if the library really isn\u0027t DI-compatible (after all, it accepts its ILoggerFactory statically) then it probably makes sense for users to just invoke the static configuration method directly.\r\n\r\nIf it *is* possible for the library to just get the ILoggerFactory from DI, like a proper DI-aware library (similar to ASP.NET, EF Core), then obviously static configuration of ILoggerFactory is out of place in the first place. So when explaining this to library maintainers, I\u0027d maybe split this into \"DI-aware libraries\" and \"non-DI-aware libraries\", where only the latter accepts ILoggerFactory manually.\r\n\r\nApart from that, I haven\u0027t seen many libraries which have a pre-existing EventSource which they\u0027d like to adapt to logging - but maybe that\u0027s useful.\r\n",
                                           "updatedAt":  "2022-01-04T17:31:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc477Wot",
                                           "createdAt":  "2022-01-05T06:22:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e then it probably makes sense for users to just invoke the static configuration method directly.\r\n\r\nThe tradeoff appears to be the library can either take the dependency on M.E.DI.Abstractions (43KB binary) + write some boiler plate code to get a more idiomatic looking configuration or it can avoid the reference and have a less idiomatic initialization. If the library author does do the extra work I think you get an app developer experience like this:\r\n\r\n```C#\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Add services to the container.\r\nbuilder.Services.AddRazorPages();\r\nbuilder.Services.AddFooLib();\r\n\r\nvar app = builder.Build();\r\n...\r\n```\r\n\r\nand if you don\u0027t do the extra work you get an app developer experience like this:\r\n```C#\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Add services to the container.\r\nbuilder.Services.AddRazorPages();\r\n\r\nvar app = builder.Build();\r\napp.Services.GetService\u003cILoggerFactory\u003e().AddFooLibLogging();\r\n...\r\n```\r\n\r\nAdmitedly as a guy who does most of my coding in not so pretty code inside the coreclr.dll this feels like a pretty minor distinction so I\u0027m inclined to agree with you - it doesn\u0027t seem worth the extra effort. However I don\u0027t know if folks like @davidfowl have stronger opinions about the style/idioms he is trying to encourage. If I don\u0027t hear anything further I\u0027m going to go with your suggestion that the non-DI-aware libraries make an \u0027AddFooLibLogging()\u0027 method available only.\r\n",
                                           "updatedAt":  "2022-01-05T06:22:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc477mjw",
                                           "createdAt":  "2022-01-05T08:31:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCIuCTw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KalleOlaviNiemitalo",
                                                                               "createdAt":  "2022-01-05T08:48:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cijothomas",
                                                                               "createdAt":  "2022-01-05T19:57:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "roji",
                                           "body":  "Yeah, I do get the argument about API niceness.\r\n\r\nAnother argument here is that builder.Services.AddFooLib() gives the impression of a proper DI-aware library, where the ILoggerFactory gets managed within the service provider. This isn\u0027t the case - under the hood it\u0027s actually managed statically, which e.g. means that you can\u0027t have two service providers with different logging configurations in the same application. I\u0027d say it\u0027s better not to hide that fact, and make the static aspect very explicit; in fact, rather than an AddFooLibLogging extension method, I\u0027d simply tell users to call an explicitly static method to initialize logging, e.g. FooLoggingConfiguration.Initialize(ILoggerFactory loggerFactory).",
                                           "updatedAt":  "2022-01-05T08:31:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc477tnr",
                                           "createdAt":  "2022-01-05T09:15:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCIoC_Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2022-01-05T09:26:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Makes sense. Thanks for all the feedback on it @roji 👍 ",
                                           "updatedAt":  "2022-01-05T09:21:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc479sWl",
                                           "createdAt":  "2022-01-05T19:49:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "+1 to what Noah said but if said library decides to stick out like a sore thumb of course it can. We shouldn’t recommend it though. Extension methods on ILoggerFactory is something we moved away from, ILoggingBuilder is where you can root your logging extensions. \r\n\r\nI have no problem with your library having conflicting guidance if it’s for a good enough reason, but I’m pretty firmly against that as general guidance.\r\n\r\nAlso you can’t store things as statics in libraries that come from DI, that’s broken.",
                                           "updatedAt":  "2022-01-05T19:49:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc479vyI",
                                           "createdAt":  "2022-01-05T20:10:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCLEkcg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2022-01-22T01:51:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e Also you can’t store things as statics in libraries that come from DI, that’s broken.\r\n\r\nIsn\u0027t that what [the library sample](https://github.com/dotnet/runtime/issues/50777#issuecomment-968211385) is showing above?\r\n\r\nStepping back, various libraries are fundamentally incompatible with DI, in the sense that there\u0027s no central DI-accessible place where the ILoggerFactory could be placed. A good example is an ADO.NET provider: you just new up DbConnections, there\u0027s no way to pass an ILoggerFactory there (and we wouldn\u0027t want DbConnection to accept one, since it would have to create new loggers for each connection instance). I have some plans on improving that BTW, but it\u0027s a good example for now.\r\n\r\nIn this kind of case, injecting statically seems like the only way to get the ILoggerFactory to a place where the library can reference it. Doing that via an API which looks like it\u0027s doing DI is problematic; sure, explicitly injecting statically sticks out, but that\u0027s just what the library supports, no?\r\n",
                                           "updatedAt":  "2022-01-05T20:10:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47-aA9",
                                           "createdAt":  "2022-01-06T01:39:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e I’m pretty firmly against that as general guidance.\r\n\r\nI think of this as guidance for libraries that can\u0027t or won\u0027t add instance constructors/properties/methods to set an ILogger. So it isn\u0027t general guidance for all libraries but it is broader than just one specific library. Does that scoping alleviate the issue or you are still concerned?\r\n\r\nAlso agreed with @roji above. For a library that has no way of accessing a LoggerFactory other than by having it cached in a static I think caching the one from the DI container is likely the best option. The only other options I see which feel worse:\r\n1. app dev configures a 2nd identical LoggerFactory and assigns that one to the static\r\n2. app dev abandons being able to use ILogger as a mechanism to get logging from the library",
                                           "updatedAt":  "2022-01-06T01:40:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48As5L",
                                           "createdAt":  "2022-01-06T18:26:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCI3cfg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2022-01-06T18:34:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e Also agreed with @roji above. For a library that has no way of accessing a LoggerFactory other than by having it cached in a static I think caching the one from the DI container is likely the best option. The only other options I see which feel worse:\r\n\r\nI\u0027ll concede. That\u0027s the best option proposed here. However, put up warning signs here explaining that this static entry point should only be called once and that this library won\u0027t work well with unit tests and the other things that using DI makes easy (like having multiple in the same process).",
                                           "updatedAt":  "2022-01-06T18:26:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CvVHn",
                                           "createdAt":  "2022-05-06T14:47:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "Not necessarily a (public) library author myself so take my opinion with a grain of salt. However:\r\n\r\n\u003e My biggest current challenge recommending library authors to use ILogger in preference to EventSource is that their library may not use dependency injection.\r\n\r\nI don\u0027t see how this matters to be honest. One doesn\u0027t need to use \"dependency injection containers\" to use proper inversion of control best practices. Some people even go with \"poor-man\u0027s DI\" on big projects and have success with that.\r\n\r\nA library could still take an `ILogger` as a parameter and have a factory implementation that creates a \"sensible default\" without requiring static references. Then, if someone wants to use the library with a DI container, they can just not use the factory and register the classes directly on their end. This requires _zero_ DI \"support\" from library developers.\r\n\r\n\u003e I mean this in the general sense that their library may not have a constructor parameter or a property where an ILogger object could be passed to them and **they either can\u0027t or don\u0027t want to modify their library** to add those parameters.\r\n\r\nWell if they don\u0027t want to do anything on their side, I don\u0027t think the framework should either. Adding static versions of ILogger and things like that would massively degrade the quality of these APIs and might push people away from proper inversion of control on new applications. I\u0027d be 100% opposed of providing any static abstractions in `Microsoft.Extensions.Logging` and I think any library that does this currently shouldn\u0027t as well.\r\n\r\n\u003e Currently EventSource satisfies that use-case well because they can be new\u0027ed up anywhere and automatically register globally, eliminating the need to pass them around. If we want ILogger to support a similar range of usage then we need to support some globally scoped ILoggers.\r\n\r\nSupporting this specific use case directly is a mistake IMHO. There is even an `EventSource` `ILogger` implementation already they can use by default. There shouldn\u0027t be any reason to ever hardcode a `EventSource` dependency for logging purposes: that just makes your library much worse to use/debug.\r\n\r\nOne such case is the .NET OpenTelemetry integration, which currently doesn\u0027t support logging through `ILogger` and uses `EventSource` directly in code. As a consumer of that library, this made me spend several hours of frustration until I realized that it was not logging errors to my logger and that I had to enable a listener or a self-diagnostics process.",
                                           "updatedAt":  "2022-05-06T14:47:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JiMmt",
                                           "createdAt":  "2024-08-23T16:43:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lmolkova",
                                           "body":  "Adding some color to it from Azure SDK / System.ClientModel perspective.\r\n\r\nLet\u0027s assume we take `ILoggerFactory` via public API in clients. We\u0027ll make it as DI friendly as it could be, so it\u0027s properly resolved for all apps that do DI\r\n\r\nLet\u0027s assume there is non-negligeable number of users that don\u0027t use DI or use our clients unconventionally - e.g. don\u0027t register them in the DI and don\u0027t pass `ILoggerFactory`. \r\n\r\nNow, imagine such user app has a problem and now they can\u0027t enable logs without code change and full redeployment. \r\nShould users change their code to get awesome ILogger logs? Absolutely! Do we want to require them to change app code to get logs out in some form? Absolutely not.\r\n\r\nThis is the critical part of the problem for us. We don\u0027t necessarily need a perfect way to configure logger factory as a static singleton, **we need the operational fallback**.\r\n\r\nAs a solution we could do some form of Option 2 from the issue description:\r\n- Custom `EventSource` as a fallback to replicate `ILogger` logs\r\n- Take an explicit dependency on `Microsoft.Extensions.Logging.EventSource` and configure factory with ES provider as a fallback\r\n- Shade `Microsoft.Extensions.Logging.EventSource` to avoid taking a dependency\r\n\r\nAll of these options are possible, but have problems.\r\n\r\nIt seems to be a generic problem though and it\u0027d be great if `Microsoft.Extensions.Logging.Abstractions` provided operational fallback that does at least something to get the logs out without asking users to change application code.\r\n",
                                           "updatedAt":  "2024-08-23T16:49:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jj6eH",
                                           "createdAt":  "2024-08-23T22:40:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@lmolkova \r\n\u003e Let\u0027s assume there is non-negligeable number of users that don\u0027t use DI or use our clients unconventionally - e.g. don\u0027t register them in the DI and don\u0027t pass `ILoggerFactory`.\r\n\r\nCan you provide an example of how that would look like for a hypothetical library class?\r\n\r\nI just don\u0027t see why the library should make these types of decisions for the consumer. If they are using your class directly, and _purposefully_ not passing an `ILoggerFactory`, then the library should just throw an `ArgumentNullException` requiring the `ILoggerFactory` to be provided.\r\n\r\nThat has nothing to do with DI containers.\r\n\r\nThe only difference is that, to more simply support DI registrations, your library would provide a `AddX()` extension method on `IServiceCollection` that registers the things it needs to run with \"sensible defaults\", either in the same DLL, or as part of a `MyLIbraryThing.DependencyInjection` or `MyLIbraryThing.Extensions.Hosting` separate package.\r\n\r\nIf the user opts to _not_ use DI, then it\u0027s up to them to provide something the library can use. If they decide they don\u0027t need any logging and pass in a `NullLoggerFactory` (a null-object pattern implementation of `ILoggerFactory`) to your library code, and then later decide they do want some logging capability, that\u0027s on them to fix... putting that burden on the library to me is not appropriate and will just lead to a substantial increase in complexity in the library code.\r\n\r\n\u003e It seems to be a generic problem though and it\u0027d be great if `Microsoft.Extensions.Logging.Abstractions` provided operational fallback that does at least something to get the logs out without asking users to change application code.\r\n\r\nWhat would these fallbacks look like exactly though?",
                                           "updatedAt":  "2024-08-23T22:40:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JkR2f",
                                           "createdAt":  "2024-08-24T01:55:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lmolkova",
                                           "body":  "It can look like this: \r\n\r\nhttps://github.com/StackExchange/StackExchange.Redis/blob/fe40d17167ec25b16b1d6d6f91b9bea53276d854/src/StackExchange.Redis/ConfigurationOptions.cs#L542\r\n\r\n`ILoggerFactory` must be optional - it\u0027s ok to use a library without logging. The clients could be registered in DI in many different ways, not just through blessed `AddSomething` methods.\r\n\r\nThe fallback could be the following:\r\n- if user provided a factory in any way (via DI, explicitly) - use it\r\n- if they didn\u0027t - create our own with `LoggerFactory.Create(b =\u003e b.AddEventSourceLogger())` or something similar\r\n\r\nThen users who configured logging will have it, those who don\u0027t can start listening to the corresponding event source via PerfView, dotnet-monitor or any other similar consumer without the need to change their code and redeploy the app.\r\n\r\n",
                                           "updatedAt":  "2024-08-24T01:57:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jk541",
                                           "createdAt":  "2024-08-24T06:35:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvi5Zg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2024-08-24T06:41:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e It seems to be a generic problem though and it\u0027d be great if Microsoft.Extensions.Logging.Abstractions provided operational fallback that does at least something to get the logs out without asking users to change application code.\r\n\r\nIt wasn\u0027t clear what the request would be for M.E.L.Abstractions? It looked like you were suggesting the library would create its own LoggerFactory via LoggerFactory.Create() which is already a public API and something you could do without any runtime changes.",
                                           "updatedAt":  "2024-08-24T06:35:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JmJBn",
                                           "createdAt":  "2024-08-24T18:04:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lmolkova",
                                           "body":  "@noahfalk \r\nIt requires us to take a dependency on M.E.L.EventSource, copy and paste its code or write our own custom EventSource. \r\n\r\nGiven that it\u0027s a generic problem for any library that can be used without DI, the ask is to have something operational by default out-of-the-box. \r\n\r\nThe alternative could be auto-discovery based on installed libraries - It\u0027s a common logging practice to enable logging by detecting an implementation package and/or configuring env vars. But with M.E.Logging we ask users to install things AND also pass `ILoggerFactory` to their clients (semi-magically or explicitly). \r\n\r\n",
                                           "updatedAt":  "2024-08-24T18:13:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JnIGp",
                                           "createdAt":  "2024-08-25T08:40:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvsFvw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-08-26T13:27:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I\u0027d like to make sure we don\u0027t make it easy for MEL to be used in that way. The testing situation with event source is not great and shared mutable state is a downfall of testability 😄. Let\u0027s not introduce this problem here.",
                                           "updatedAt":  "2024-08-25T08:41:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jn6X8",
                                           "createdAt":  "2024-08-25T17:56:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lmolkova",
                                           "body":  "The trade-off is default user experience vs testability. For tracing and metrics we chose user experience and for logging we keep choosing testability. Why?\r\n\r\n[Update] I\u0027d be happy with any solution that reliably provides some default experience (not requiring users to pass `ILoggerFactory` to every instance of their client). EventSource is just the obvious one",
                                           "updatedAt":  "2024-08-25T17:58:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jn8kI",
                                           "createdAt":  "2024-08-25T18:25:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvm3Jw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lmolkova",
                                                                               "createdAt":  "2024-08-25T18:27:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I think the default for all of these APIs should be testability, but that\u0027s not the primary purpose. It\u0027s the side effects of what building a testable (and sometimes mockable) API enables. The ability to isolate calls to a specific logger factory instance (and same with meters and traces) is extremely useful when trying to build complex software.\r\n\r\nSerilog has an interesting design here where there\u0027s a static Logger.Log can be assigned an ILogger instance:\r\n\r\n```C#\r\nusing Serilog;\r\n\r\nLog.Logger = new LoggerConfiguration()\r\n    .WriteTo.Console()\r\n    .CreateLogger();\r\n\r\ntry\r\n{\r\n    // Your program here...\r\n    const string name = \"Serilog\";\r\n    Log.Information(\"Hello, {Name}!\", name);\r\n    throw new InvalidOperationException(\"Oops...\");\r\n}\r\ncatch (Exception ex)\r\n{\r\n    Log.Error(ex, \"Unhandled exception\");\r\n}\r\nfinally\r\n{\r\n    await Log.CloseAndFlushAsync(); // ensure all logs written before app exits\r\n}\r\n```\r\n\r\nThe reason this is \"less bad\" is because application code is supposed to do this, not library code. Library code should not be assuming shared static configuration (when it can be avoided).\r\n",
                                           "updatedAt":  "2024-08-25T18:27:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jn8-j",
                                           "createdAt":  "2024-08-25T18:32:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lmolkova",
                                           "body":  "I agree with all you\u0027re saying, but it does not solve the problem for libraries.\r\n\r\nIf BCL does not provide a fallback, we\u0027d need to do it ourselves. Some of libs might decide that lack of default experience is a blocker and will not do logging at all (or keep using EventSource).\r\n\r\nAll libs that will implement a fallback will do it differently making users life hard.",
                                           "updatedAt":  "2024-08-25T18:37:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jn9va",
                                           "createdAt":  "2024-08-25T18:45:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "The only blocker libraries should have is the dependency on ILoggerFactory. The only reason to log using event source is if you\u0027re unwilling to take that dependency or you are below the dependency graph of the ILoggerFactory (like you are implementing one and need to log errors from the logger implementation).\r\n\r\nThe library just has to worry about providing a way to set the ILoggerFactory so that the application can decide which configuration the library should use. \r\n\r\nPS: This is what the Azure SDK should do instead of using the EventSource. It would make it much easier to use and test without the event source -\u003e Ilogger adapter.",
                                           "updatedAt":  "2024-08-25T18:45:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JoABZ",
                                           "createdAt":  "2024-08-25T19:22:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lmolkova",
                                           "body":  "I feel we\u0027re talking about different things. Let\u0027s forget about what Azure SDKs currently do and let\u0027s imagine a perfect future.\r\n\r\nWhat we\u0027d like to have:\r\n\r\n1. User created client and provided `ILoggerFactory` (registered via DI or explicitly) - we should use resolved factory and things work great out of the box - we do need to provide this experience \r\n2. User creates client without DI using explicit constructor and didn\u0027t explicitly provide the `ILoggerFactory`.  \r\n   1. user probably did it by mistake or lack of awareness. In the long term they should change their code and fix it (by passing `ILoggerFactory` to the clients in any supported way).\r\n   2. but let\u0027s assume they have an immediate problem with their app and are requesting support on the issue from our library/service.  We really want to have some way to get logs (+traces/metrics) out without asking them to change code and redeploy everything. \r\n\r\nWhat I\u0027d like to have to solve the p2.2\r\n- if we didn\u0027t get explicit `ILoggerFactory` use some `FallbackFactory`. We can do it today by creating our own factory instance.  It has it\u0027s own drawbacks (https://github.com/dotnet/runtime/issues/50777#issuecomment-2308951971)\r\n- it\u0027d be nice if M.E.L provided some operational fallback (not just `NullLoggerFactory`) that we could use.\r\n- the only reasonably safe fallback I can imagine would be the EventSource provider, but that\u0027s an impl detail.\r\n\r\n",
                                           "updatedAt":  "2024-08-25T19:31:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JoFRb",
                                           "createdAt":  "2024-08-25T20:38:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "What sorts of apps are your primary concern?\r\n\r\nPractically, it seems like what is being proposed here is to provide an API that creates a logger factory with an event source logger provider. What do you tell the customer to do see the logs? Use dotnet trace or perfview?\r\n\r\nMaybe the console logger is a more pragmatic solution…",
                                           "updatedAt":  "2024-08-25T20:38:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JpABG",
                                           "createdAt":  "2024-08-26T03:23:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lmolkova",
                                           "body":  "\u003e What sorts of apps are your primary concern?\r\n\r\nnothing in particular. Any non-ASP.NET Core apps where DI is not a common practice. \r\n\r\n\u003e Practically, it seems like what is being proposed here is to provide an API that creates a logger factory with an event source logger provider.\r\n\r\n👍 \r\n\r\n\u003e What do you tell the customer to do see the logs? Use dotnet trace or perfview?\r\n\r\nAny of those (+ dotnet-monitor), it\u0027s ok that it\u0027s inconvenient - it\u0027s the last resort to get some information out. We want people to configure logging properly. \r\n\r\nConsole logger might be an option too. Maybe the fact that it writes something (warn+) to console by default would make it even more obvious that logging is not configured properly. \r\n\r\n\r\n",
                                           "updatedAt":  "2024-08-26T03:24:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Js2PZ",
                                           "createdAt":  "2024-08-26T13:35:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@lmolkova \r\n\u003e Any non-ASP.NET Core apps where DI is not a common practice.\r\n\r\nWhy would DI _not_ be a common practice? If it isn\u0027t, then you should push for it.\r\n\r\n\u003e `ILoggerFactory` must be optional - it\u0027s ok to use a library without logging.\r\n\r\nMake it mandatory and provide a `NullLoggerFactory` implementation.\r\n\r\nIf you want to fully decouple your library from logging concerns (and dependencies), create a separate package that people can opt into in \"raw\" scenarios. Example:\r\n- `MyLibrary`\r\n- `MyLibrary.Logging`\r\n- `MyLibrary.Extensions.Hosting` (includes both of the above + methods to register with DI seamlessly)\r\n\r\nThen, on `MyLibrary.Logging`, you define logging decorator implementations using `MEL`. If a consumer wants to not have any logging, they use `MyLibrary`. If they want to use logging, but still don\u0027t want any DI or Hosting stuff, use `MyLibrary.Logging` and manually create the needed logging wrapper passing in a _mandatory_ `ILoggerFactory`. If they want the seamless experience, they use DI+hosting and consume `MyLibrary.Extensions.Hosting`.\r\n\r\nI still don\u0027t understand why you are trying to optimize for a _bad_ default of having no DI though. Just ask people to use generic host which is what they should be doing anyways (IMHO).\r\n\r\n\u003e We want people to configure logging properly.\r\n\u003e \r\n\u003e ...Maybe the fact that it writes something (warn+) to console by default would make it even more obvious that logging is not configured properly.\r\n\r\nIf logging is not configured and you want to make that obvious... make it mandatory, throwing if `ILoggerFactory` is not provided. Why make this so much more complicated than it needs to?",
                                           "updatedAt":  "2024-08-26T13:35:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6J51NN",
                                           "createdAt":  "2024-08-27T21:48:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODv53IQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-08-27T22:16:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e @noahfalk\r\nIt requires us to take a dependency on M.E.L.EventSource, copy and paste its code or write our own custom EventSource.\r\n\r\nI\u0027m comparing these two scenarios in my head when the library user doesn\u0027t provide ILogger (whether by choice, by accident, or because the library\u0027s author didn\u0027t provide an API to allow it)\r\n\r\n#### 1. Library creates and uses its own default LoggerFactory (lib authors could do this today)\r\n```C#\r\nstatic class MyLibrary\r\n{\r\n    internal static LoggerFactory DefaultLoggerFactory = LoggerFactory.Create(builder =\u003e\r\n    {\r\n        builder.AddEventSourceLogger();\r\n    });\r\n}\r\n            \r\npublic class SomeLibraryType\r\n{\r\n    ILogger _logger;\r\n    public SomeLibraryType() \r\n    {\r\n        _logger = MyLibrary.DefaultLoggerFactory.CreateLogger\u003cSomeLibraryType\u003e();\r\n    }\r\n}\r\n```\r\n\r\n#### 2. M.E.L.A provides a static factory (in some future version of .NET)\r\nM.E.L.A:\r\n```C#\r\nstatic class Logging\r\n{\r\n    public static ILoggerFactory DefaultLoggerFactory = LoggerFactory.Create(builder =\u003e\r\n    {\r\n        builder.AddEventSourceLogger(); // this could be configured other ways too, ignoring that\r\n                                        // aspect for now\r\n    });\r\n}\r\n```\r\nLibrary code:\r\n```C#\r\npublic class SomeLibraryType\r\n{\r\n    ILogger _logger;\r\n    public SomeLibraryType() \r\n    {\r\n        _logger = Logging.DefaultLoggerFactory .CreateLogger\u003cSomeLibraryType\u003e();\r\n    }\r\n}\r\n```\r\n\r\nI\u0027m curious to hear what you think of the pros/cons? This is what I thought about:\r\n- In both cases the app has a dependency on M.E.L.EventSource. In the first case the dependency is direct vs. in the 2nd it is indirect. There are also potential dependencies on M.E.L or refactoring that moves LoggerFactory implementation down into M.E.L.A. Adding more code or dependencies to M.E.L.A would mean .NET apps gain those dependencies regardless of whether they use the static factory.\r\n- If a M.E.L.A API was available I\u0027d expect marginally less discrepancy in how library authors handled this default. Overall I can only recall hearing feedback around this from three total library owners so if we provided something it wasn\u0027t clear it would be used in many libraries aside from Azure SDK.\r\n- Testability would be poor on both approaches. My assumption is that if the library author cared about testing the logging they would provide some alternate code path that allows the factory to be injected and then unit test that entrypoint instead. \r\n- In both cases the LoggerFactory could be public for the user to adjust the configuration though not clear to me if that would be desirable. Presumably we are using this fallback because the user didn\u0027t want to configure and provide a factory (or the library author didn\u0027t want to allow it).\r\n\r\n",
                                           "updatedAt":  "2024-08-27T21:49:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6J6HvP",
                                           "createdAt":  "2024-08-27T23:01:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lmolkova",
                                           "body":  "@noahfalk what I\u0027d like to have\r\n\r\n```csharp\r\nclass MyClient\r\n{\r\n    private readonly ILogger\u003cMyClient\u003e _logger;\r\n    public MyClient(MyOptions options) {\r\n       _logger = options.LoggerFactory.CreateLogger\u003cMyClient\u003e()\r\n    }\r\n\r\n    public DoSomething() {\r\n       ...\r\n       _logger.LogInfo(\"Did something!\")\r\n    }\r\n}\r\n\r\nclass MyOptions {\r\n   public ILoggerFactory LoggerFactory { get; set; } = CreateDefault();\r\n\r\n   private static ILoggerFactory CreateDefault() {\r\n      // Option 1 - you decide\r\n      return LoggerFactory.CreateDefault();\r\n\r\n      // Option 2 - we decide\r\n      return LoggerFactory.Create(b =\u003e b.AddEventSourceLogger());\r\n   }\r\n}\r\n```\r\n\r\nWe want users to pass configured `ILoggerFactory` and we want to support only the explicit one - there is no need in global static singleton, no need to let users configure/set it. \r\n\r\nThe sole purpose of this is to have some way of getting logs out (without code change) if users forgot to configure logging/did it incorrectly/don\u0027t use DI/don\u0027t know how to use DI, etc. That\u0027s the fallback - not the way to configure things.\r\n\r\n[Update] You do Option 1 now and provide `NullLoggerFactory` as a fallback, but that\u0027s noop - we need something operational, not necessarily convenient\r\n\r\n",
                                           "updatedAt":  "2024-08-27T23:12:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6J_TQb",
                                           "createdAt":  "2024-08-28T11:34:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "I don\u0027t have a strong opinion whether something should be added or not.\r\n\r\nIf something gets added, I think it would make sense for it to be a `static ILoggerFactory` in the `Microsoft.Extensions.Logging.Abstractions` package that you can set and get.\r\n\r\nSomething like:\r\n```cs\r\nstatic class FallbackLogger\r\n{\r\n    static void SetInstance(ILoggerFactory); // Could throw InvalidOperationException if already set.\r\n    static ILoggerFactory Instance { get; }  // Returns NullLogger.Instance when not set.\r\n}\r\n```\r\n\r\nA library developer could then:\r\n```cs\r\npublic MyClient(ILoggerFactory? factory = null) =\u003e _factory = factory ?? FallbackLogger.Instance;\r\n```\r\n\r\nAn application developer can initialize the fall back logger in their `Main` method:\r\n```cs\r\nusing ILoggerFactory loggerFactory = LoggerFactory.Create(builder =\u003e builder.AddConsole());\r\nFallbackLogger.SetInstance(loggerFactory);\r\n...\r\n```\r\n\r\nI think the `using` (that is: `ILoggerFactory.Dispose()`) is needed to flush the logging.\r\n\r\nThough this doesn\u0027t initialize a default `ILoggerFactory` (which is opinionated), it enables an application developer do to it in a way that affects all code that is using `FallbackLogger.Instance`.",
                                           "updatedAt":  "2024-08-28T11:51:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KAYhW",
                                           "createdAt":  "2024-08-28T13:42:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e @noahfalk what I\u0027d like to have\r\n\u003e \r\n\u003e ```cs\r\n\u003e class MyClient\r\n\u003e {\r\n\u003e     private readonly ILogger\u003cMyClient\u003e _logger;\r\n\u003e     public MyClient(MyOptions options) {\r\n\u003e        _logger = options.LoggerFactory.CreateLogger\u003cMyClient\u003e()\r\n\u003e     }\r\n\u003e \r\n\u003e     public DoSomething() {\r\n\u003e        ...\r\n\u003e        _logger.LogInfo(\"Did something!\")\r\n\u003e     }\r\n\u003e }\r\n\u003e \r\n\u003e class MyOptions {\r\n\u003e    public ILoggerFactory LoggerFactory { get; set; } = CreateDefault();\r\n\u003e \r\n\u003e    private static ILoggerFactory CreateDefault() {\r\n\u003e       // Option 1 - you decide\r\n\u003e       return LoggerFactory.CreateDefault();\r\n\u003e \r\n\u003e       // Option 2 - we decide\r\n\u003e       return LoggerFactory.Create(b =\u003e b.AddEventSourceLogger());\r\n\u003e    }\r\n\u003e }\r\n\u003e ```\r\n\u003e \r\n\r\n@lmolkova passing service dependencies through an `options` model seems like such an anti-pattern to me... I\u0027d honestly hate to interact with a library that took dependencies this way. Options are meant for configuration values, not for service injection.\r\n\r\nOnce again, to me, you are just making things more complicated than they need to be by doing things like this.\r\n",
                                           "updatedAt":  "2024-08-28T13:42:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KDkkc",
                                           "createdAt":  "2024-08-28T20:27:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwGtEQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lmolkova",
                                                                               "createdAt":  "2024-08-28T21:14:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "```C#\r\nprivate static ILoggerFactory CreateDefault() {\r\n      // Option 1 - you decide\r\n      return LoggerFactory.CreateDefault();\r\n\r\n      // Option 2 - we decide\r\n      return LoggerFactory.Create(b =\u003e b.AddEventSourceLogger());\r\n   }\r\n```\r\n\r\nCool that refines the \u0027what\u0027 part a bit. Where I am still struggling is the \u0027why?\u0027 The pros/cons for this seem close to the example I gave above and so far I don\u0027t see a compelling reason to build option (1) as a new thing when option (2) already exists. You mentioned standardization and that this would apply to many libraries, but given the (lack of) feedback I\u0027ve seen from other library authors I don\u0027t have an expectation many library authors would create these fallback paths even if the API existed. I\u0027d also guess that the library authors interested in that API would be content to write option (2) instead if we recommended it and they knew it would have the same outcome.",
                                           "updatedAt":  "2024-08-28T20:27:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KEDLc",
                                           "createdAt":  "2024-08-28T21:57:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lmolkova",
                                           "body":  "@noahfalk that\u0027s fair. \r\nThe reason I suggested it is that without some fallback (or a way to change default) logging is not complete. \r\n\r\nE.g. in Java you configure logging by providing logging implementation and configuring it with env vars/files. You can provide logging implementation without changing the code (by adding `javaagent` option). It provides much more than a fallback. E.g. you can drop otel javaagent into user\u0027s app (Az Function, AppService, k8s container), update config and now you get fully blown otel including logs. Python has a similar story.\r\n\r\nIn .NET we can get this amazing experience for tracing and metrics, but not for logs. For logs we can get nothing at all if users didn\u0027t do the DI stuff in a certain way. \r\n\r\nSo this is why the logging feels incomplete and not on par with the experience our users can get in other languages. The fallback could address some of it in the most basic way.\r\n\r\nI take the point that Azure SDKs probably care the most about it (and the only ones that would even consider `EventSourceProvder` 😅 )",
                                           "updatedAt":  "2024-08-28T22:00:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KOX6e",
                                           "createdAt":  "2024-08-29T21:18:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwbn-w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-08-30T14:07:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Thanks @lmolkova!\r\n\r\n\u003e The reason I suggested it is that without some fallback (or a way to change default) logging is not complete\r\n\r\nI\u0027ll gladly admit the lack of symmetry between the logging API and the other telemetry signal APIs bugs the part of my brain that likes everything orderly. If I wanted to appease that part of my brain I\u0027d probably have an API like this:\r\n\r\n```C#\r\nILogger logger   = loggerFactory.Create\u003cFoo\u003e(...);\r\nILogger logger   = new Logger\u003cFoo\u003e();                 // this one is missing\r\nMeter m          = meterFactory.Create(...);\r\nMeter m          = new Meter(...);\r\nActivitySource a = activitySourceFactory.Create(...); // this one is missing\r\nActivitySource a = new ActivitySource(...);\r\n```\r\n\r\nBut a few things hold me back from acting on that impulse for logger: \r\n - the existence of \u0027good enough\u0027 workarounds\r\n - relatively few complaints from .NET library developers\r\n - the concern that making it easier to use the API outside of the standard DI pattern will create confusion or lead .NET developers to make bad API design choices. I don\u0027t want to speak for them but both @davidfowl and @julealgon comments appear aligned with this. I share the concern somewhat, but probably I don\u0027t weight this factor as strongly as others do.\r\n \r\n\u003e For logs we can get nothing at all if users didn\u0027t do the DI stuff in a certain way.\r\n\r\nI think of this as two separate pitfalls that lead to a similar outcome:\r\n\r\n1. As the app developer configuring logging, I could not add the EventSourceLogger or clear it if it was there before and I\u0027ve just disabled all out-of-proc logging capture. I\u0027m guessing a substantial portion of the time this happens the dev was unaware of the impact.\r\n2. As a library developer with an API that doesn\u0027t force the user to provide an ILogger I could omit having a fallback that logs to the EventSourceLogger.\r\n\r\nFor (2) I land back where I was above... I don\u0027t think where we are is ideal but there are decent workarounds + the lack of feedback saying this is a significant problem discourages me from investing in changes. If that changed, either broader feedback or finding the existing workarounds were more problematic, then I\u0027d have more motivation to explore changes.\r\n ",
                                           "updatedAt":  "2024-08-29T21:18:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Kct4m",
                                           "createdAt":  "2024-08-31T05:42:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwr3wQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-09-02T13:04:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I\u0027m against a shared mutable static global configuration API for ILogger (I don\u0027t like the ones we have for meter and activities either).  I\u0027m less concerned about a default logger factory implementation that has the event source logger. We can just recommend that library authors provide a fallback that uses the event source logger (I understand the event source is shared mutable global state).",
                                           "updatedAt":  "2024-08-31T05:44:34Z"
                                       }
                                   ],
                         "totalCount":  38
                     },
        "title":  "[Feature Request] Allow libraries that don\u0027t use DI to make use of ILogger",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50875",
        "createdAt":  "2021-04-07T20:21:46Z",
        "number":  50875,
        "author":  "mdh1418",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-22T18:05:46Z",
        "body":  "Microsoft.Extensions.Logging.Tests\r\nMicrosoft.Extensions.Logging.Test.LoggerFilterTest.MultipleWildcardsAreNotAllowed\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_WithNoParameters_ThrowsException_WhenFormatString_HasNamedParameters\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_WithNoParameters_ThrowsException_WhenFormatString_HasNamedParameters\r\n\r\n\r\n```\r\n\r\nMicrosoft.Extensions.Logging.Tests.dll   Failed: 15\r\n\r\nTest collection for Microsoft.Extensions.Logging.Test.LoggerFilterTest\r\nMicrosoft.Extensions.Logging.Test.LoggerFilterTest.MultipleWildcardsAreNotAllowed\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: Only one wildcard character is allowed in···\\nActual:   MoreThanOneWildcard\\n          ↑ (pos 0)\r\n\r\nTest collection for Microsoft.Extensions.Logging.Test.LoggerMessageTest\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 1)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Starting request scope···\\nActual:   UnexpectedNumberOfNamedParameters, Starti···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 4)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Starting request scope···\\nActual:   UnexpectedNumberOfNamedParameters, Starti···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 2)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Starting request scope···\\nActual:   UnexpectedNumberOfNamedParameters, Starti···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 3)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Starting request scope···\\nActual:   UnexpectedNumberOfNamedParameters, Starti···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 6)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Starting request scope···\\nActual:   UnexpectedNumberOfNamedParameters, Starti···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 5)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Starting request scope···\\nActual:   UnexpectedNumberOfNamedParameters, Starti···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 2)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Action with name Actio···\\nActual:   UnexpectedNumberOfNamedParameters, Action···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 6)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Action with name Actio···\\nActual:   UnexpectedNumberOfNamedParameters, Action···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 4)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Action with name Actio···\\nActual:   UnexpectedNumberOfNamedParameters, Action···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 3)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Action with name Actio···\\nActual:   UnexpectedNumberOfNamedParameters, Action···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 1)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Action with name Actio···\\nActual:   UnexpectedNumberOfNamedParameters, Action···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 5)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Action with name Actio···\\nActual:   UnexpectedNumberOfNamedParameters, Action···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_WithNoParameters_ThrowsException_WhenFormatString_HasNamedParameters\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Starting request scope···\\nActual:   UnexpectedNumberOfNamedParameters, Starti···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_WithNoParameters_ThrowsException_WhenFormatString_HasNamedParameters\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Action with name {Acti···\\nActual:   UnexpectedNumberOfNamedParameters, Action···\\n          ↑ (pos 0)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMJeDNA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNTIzNTg5Mg==",
                                           "createdAt":  "2021-04-07T20:21:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nMicrosoft.Extensions.Logging.Tests\r\nMicrosoft.Extensions.Logging.Test.LoggerFilterTest.MultipleWildcardsAreNotAllowed\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_WithNoParameters_ThrowsException_WhenFormatString_HasNamedParameters\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_WithNoParameters_ThrowsException_WhenFormatString_HasNamedParameters\r\n\r\n\r\n```\r\n\r\nMicrosoft.Extensions.Logging.Tests.dll   Failed: 15\r\n\r\nTest collection for Microsoft.Extensions.Logging.Test.LoggerFilterTest\r\nMicrosoft.Extensions.Logging.Test.LoggerFilterTest.MultipleWildcardsAreNotAllowed\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: Only one wildcard character is allowed in···\\nActual:   MoreThanOneWildcard\\n          ↑ (pos 0)\r\n\r\nTest collection for Microsoft.Extensions.Logging.Test.LoggerMessageTest\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 1)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Starting request scope···\\nActual:   UnexpectedNumberOfNamedParameters, Starti···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 4)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Starting request scope···\\nActual:   UnexpectedNumberOfNamedParameters, Starti···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 2)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Starting request scope···\\nActual:   UnexpectedNumberOfNamedParameters, Starti···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 3)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Starting request scope···\\nActual:   UnexpectedNumberOfNamedParameters, Starti···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 6)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Starting request scope···\\nActual:   UnexpectedNumberOfNamedParameters, Starti···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 5)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Starting request scope···\\nActual:   UnexpectedNumberOfNamedParameters, Starti···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 2)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Action with name Actio···\\nActual:   UnexpectedNumberOfNamedParameters, Action···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 6)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Action with name Actio···\\nActual:   UnexpectedNumberOfNamedParameters, Action···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 4)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Action with name Actio···\\nActual:   UnexpectedNumberOfNamedParameters, Action···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 3)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Action with name Actio···\\nActual:   UnexpectedNumberOfNamedParameters, Action···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 1)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Action with name Actio···\\nActual:   UnexpectedNumberOfNamedParameters, Action···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_ThrowsException_WhenExpectedFormatStringParameterCount_NotFound(expectedNamedParameterCount: 5)\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Action with name Actio···\\nActual:   UnexpectedNumberOfNamedParameters, Action···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineScope_WithNoParameters_ThrowsException_WhenFormatString_HasNamedParameters\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Starting request scope···\\nActual:   UnexpectedNumberOfNamedParameters, Starti···\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Logging.Test.LoggerMessageTest.DefineMessage_WithNoParameters_ThrowsException_WhenFormatString_HasNamedParameters\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: The format string \u0027Action with name {Acti···\\nActual:   UnexpectedNumberOfNamedParameters, Action···\\n          ↑ (pos 0)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emdh1418\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`, `os-android`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-07T20:21:52Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Microsoft.Extensions.Logging.Tests Fails on Android",
        "labels":  [
                       "os-android",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51054",
        "createdAt":  "2021-04-10T16:45:48Z",
        "number":  51054,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCrFGQw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "oocx",
                                            "createdAt":  "2021-10-06T06:03:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shubmittal",
                                            "createdAt":  "2022-10-20T00:31:28Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-07-14T21:14:13Z",
        "body":  "### Description\r\n\r\n`LoggerMessage.Define` blows up if the number of parameters doesn\u0027t match the specified template parameters even if the parameters used in the template are the same.\r\n\r\n```C#\r\nLoggerMessage.Define\u003cstring\u003e(LogLevel.Information, new(0, \"LogSomething\"), \"Hello {Name}. How are you {Name}\");\r\n```\r\n\r\nThis throws, and it should work.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Other information\r\n\r\n```\r\nUnhandled exception. System.ArgumentException: The format string \u0027Hello {Name}. How are you {Name}\u0027 does not have the expected number of named parameters. Expected 1 parameter(s) but found 2 parameter(s).\r\n   at Microsoft.Extensions.Logging.LoggerMessage.CreateLogValuesFormatter(String formatString, Int32 expectedNamedParameterCount)\r\n   at Microsoft.Extensions.Logging.LoggerMessage.Define[T1](LogLevel logLevel, EventId eventId, String formatString, Boolean skipEnabledCheck)\r\n   at Microsoft.Extensions.Logging.LoggerMessage.Define[T1](LogLevel logLevel, EventId eventId, String formatString)\r\n   at \u003cProgram\u003e$.\u003cMain\u003e$(String[] args) in C:\\Users\\david\\source\\repos\\WebApplication455\\WebApplication455\\Program.cs:line 10\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON8Mhvw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzE2ODk3OQ==",
                                           "createdAt":  "2021-04-10T16:45:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\n`LoggerMessage.Define` blows up if the number of parameters doesn\u0027t match the specified template parameters even if the parameters used in the template are the same.\r\n\r\n```C#\r\nLoggerMessage.Define\u003cstring\u003e(LogLevel.Information, new(0, \"LogSomething\"), \"Hello {Name}. How are you {Name}\");\r\n```\r\n\r\nThis throws, and it should work.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Other information\r\n\r\n```\r\nUnhandled exception. System.ArgumentException: The format string \u0027Hello {Name}. How are you {Name}\u0027 does not have the expected number of named parameters. Expected 1 parameter(s) but found 2 parameter(s).\r\n   at Microsoft.Extensions.Logging.LoggerMessage.CreateLogValuesFormatter(String formatString, Int32 expectedNamedParameterCount)\r\n   at Microsoft.Extensions.Logging.LoggerMessage.Define[T1](LogLevel logLevel, EventId eventId, String formatString, Boolean skipEnabledCheck)\r\n   at Microsoft.Extensions.Logging.LoggerMessage.Define[T1](LogLevel logLevel, EventId eventId, String formatString)\r\n   at \u003cProgram\u003e$.\u003cMain\u003e$(String[] args) in C:\\Users\\david\\source\\repos\\WebApplication455\\WebApplication455\\Program.cs:line 10\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavidfowl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-10T16:45:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzE3MTEwNw==",
                                           "createdAt":  "2021-04-10T17:00:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC9YVyg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "isaaclyman",
                                                                               "createdAt":  "2023-06-07T16:12:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This also affects direct calls to `LogX` methods:\r\n\r\n```C#\r\nvar loggerFactory = LoggerFactory.Create(builder =\u003e builder.AddConsole());\r\nvar logger = loggerFactory.CreateLogger(\"Foo\");\r\nlogger.LogInformation(\"Hello {Name}. How are you {Name}\", \"David\");\r\n```\r\n\r\nBlows up with:\r\n\r\n```\r\nUnhandled exception. System.AggregateException: An error occurred while writing to logger(s). (Index (zero based) must be greater than or equal to zero and less than the size of the argument list.)\r\n ---\u003e System.FormatException: Index (zero based) must be greater than or equal to zero and less than the size of the argument list.\r\n   at System.Text.ValueStringBuilder.AppendFormatHelper(IFormatProvider provider, String format, ParamsArray args)\r\n   at System.String.FormatHelper(IFormatProvider provider, String format, ParamsArray args)\r\n   at System.String.Format(IFormatProvider provider, String format, Object[] args)\r\n   at Microsoft.Extensions.Logging.LogValuesFormatter.Format(Object[] values)\r\n   at Microsoft.Extensions.Logging.LoggerExtensions.MessageFormatter(FormattedLogValues state, Exception error)\r\n   at Microsoft.Extensions.Logging.Console.SimpleConsoleFormatter.Write[TState](LogEntry`1\u0026 logEntry, IExternalScopeProvider scopeProvider, TextWriter textWriter)\r\n   at Microsoft.Extensions.Logging.Console.ConsoleLogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n   at Microsoft.Extensions.Logging.Logger.\u003cLog\u003eg__LoggerLog|12_0[TState](LogLevel logLevel, EventId eventId, ILogger logger, Exception exception, Func`3 formatter, List`1\u0026 exceptions, TState\u0026 state)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Extensions.Logging.Logger.ThrowLoggingError(List`1 exceptions)\r\n   at Microsoft.Extensions.Logging.Logger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n   at Microsoft.Extensions.Logging.LoggerExtensions.Log(ILogger logger, LogLevel logLevel, EventId eventId, Exception exception, String message, Object[] args)\r\n   at Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(ILogger logger, String message, Object[] args)\r\n   at \u003cProgram\u003e$.\u003cMain\u003e$(String[] args) in C:\\Users\\david\\source\\repos\\WebApplication455\\WebApplication455\\Program.cs:line 12\r\n```",
                                           "updatedAt":  "2021-04-10T17:00:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzE3NDIzMg==",
                                           "createdAt":  "2021-04-10T17:22:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Thinking about why this isn\u0027t supported today, there could be some difficulty aligning template holes and specified arguments:\r\n\r\n```C#\r\nlogger.LogInformation(\"Hello {Name}. Are you {Age} years old? How are you {Name}\", \"David\", 100);\r\nlogger.LogInformation(\"Are you {Age} years old? How are you {Name}. Hello {Name}\", 100, \"David\");\r\n```\r\n\r\nThe first template would translate to:\r\n\r\n```C#\r\nstring.Format(\"Hello {0}. Are you {1} years old? How are you {0}\", \"David\", 100);\r\n```\r\n\r\nThe second would be:\r\n\r\n```C#\r\nstring.Format(\"Are you {0} years old? How are you {1}. Hello {1}\", 100, \"David\");\r\n```\r\n\r\nEssentially, holes get a number based on the first time they occur in the template.",
                                           "updatedAt":  "2021-04-10T17:22:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzE3NTkwNA==",
                                           "createdAt":  "2021-04-10T17:35:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gfoidl",
                                           "body":  "Both (LoggerMessage.Define and the LogXyz-extension method) go down to https://github.com/dotnet/runtime/blob/b05a8925ac9d79a9b0e17183b5a1c4286ce614c7/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/LogValuesFormatter.cs#L26, thus the have the same error-behavior.\r\n\r\nRecently I wondered about the same 😉, but then I thought it\u0027s better to be explicit: it\u0027s another hole in the format string, so there must be another argument provided. Even if it\u0027s the same one. And how likely is it actually to have the same parameter name multiple times?\r\n\r\nFurther: LoggerMessage.Define delegates are quite often wrapped by an extension method. So that method could handle the multiple parameters. Picking from your first example:\r\n```c#\r\nprivate static readonly Action\u003cILogger, string, Exception?\u003e s_greet = LoggerMessage.Define\u003cstring, string\u003e(LogLevel.Information, new(0, \"LogSomething\"), \"Hello {Name}. How are you {Name}\");\r\n\r\npublic static void Greet(this ILogger logger, string name) =\u003e s_greet(logger, name, name, null);\r\n```\r\n\r\nI\u0027m not sure what\u0027s the correct behavior though.\r\n\r\n---\r\n\r\nA really quick fix would be to use a Dictionary\u003cstring, int\u003e in the `LogValuesFormatter` to track the named parameters.\r\nFor LoggerMessage.Define this seems OK, but for the LogXyz-extension that\u0027s an allocation for each call, so a no-go.\r\nBesides that we have a rather small count of parameters (for LoggerMessage currently 6), so maybe the Dictionary is overkill, as a simple linear scan will work too.\r\n\r\nThis would work according to \r\n\u003e Essentially, holes get a number based on the first time they occur in the template.",
                                           "updatedAt":  "2021-04-10T17:35:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzE3ODMxNw==",
                                           "createdAt":  "2021-04-10T17:52:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e , thus the have the same error-behavior.\r\n\r\nI\u0027m aware 😉 \r\n\r\nThe only thing that gives me pause is the fact that this hasn\u0027t been reported before. I wonder if what we have is simpler now and might result in more ambiguity.",
                                           "updatedAt":  "2021-04-10T17:52:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzE3OTM1Ng==",
                                           "createdAt":  "2021-04-10T18:00:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gfoidl",
                                           "body":  "\u003e I\u0027m aware 😉\r\n\r\nIt was more for the record, than for you 😃 \r\n\r\n\u003e hasn\u0027t been reported before\r\n\r\nMaybe because it is an artificial problem, not a real world one? (As it was in my case by testing the new overloads with skipEnabledCheck)",
                                           "updatedAt":  "2021-04-10T18:00:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzE4MTEzNA==",
                                           "createdAt":  "2021-04-10T18:11:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Possibly, but it\u0027s come up again because of the source generator generating LoggerMessage.Define calls. Will it show up more then?\r\n\r\n```C#\r\npublic static class Log\r\n{\r\n    [LoggerMessage(Message = \"Hello {Name}. Are you {Age} years old? How are you {Name}\")]\r\n    public void SayHello(string name, int age);\r\n}\r\n```",
                                           "updatedAt":  "2021-04-10T18:11:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzE4NTEwMw==",
                                           "createdAt":  "2021-04-10T18:38:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gfoidl",
                                           "body":  "This is still a artificial example. Have you seen something in the wild?\r\nNote: I\u0027m not against changing the current behavior.\r\n\r\nFor semantic logging the count of provided parameters must match the count of placeholders.\r\nWill a change here to allow multiple placeholders match the same argument open a can of worms?\r\nLogging libraries like App Insights collector, Serilog, etc. would need to be adapted.\r\n\r\nFor the example from the source generator IMO the produced code should double the `name` argument.\r\nFor this to work the template needs to be parsed, and as I understand the proposal (didn\u0027t follow in depth) does something like this already for the fallback when there are \u003e 6 placeholders.",
                                           "updatedAt":  "2021-04-10T18:38:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzMwMzY3Nw==",
                                           "createdAt":  "2021-04-11T12:56:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "A similar case `logger.LogWarning(\"{0}{0}{1}\", \"Foo\", \"Bar\");` came up in \u003chttps://github.com/dotnet/runtime/issues/50036\u003e. If duplicate names were allowed, then that would also be allowed. (`0` and `1` would still be names rather than positional numbers.)",
                                           "updatedAt":  "2021-04-11T12:56:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41N4o3",
                                           "createdAt":  "2021-08-04T17:17:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "So in example,\r\n\r\n```csharp\r\nLoggerMessage.Define\u003cstring\u003e(LogLevel.Information, new(0, \"LogSomething\"), \"Hello {Name}. How are you {Name}\");\r\n```\r\n\r\nThe runtime exception shown in this issue description is happening because the Define API expected one string argument but we see two named placeholders (`{Name}`) in the message template.\r\n\r\nThe runtime exception above can be safely prevented, with the logging analyzer shipped in 6.0 SDK. This analyzer verifies the number of named placeholders in the message template match the number of arguments `N` for `Define\u003cT1..,TN\u003e`.\r\n\r\nTo get unblocked with this issue, I think today if someone wanted to repeat the same argument they would also have to add more arguments to the Define argument. So for:\r\n\r\n```csharp\r\nLoggerMessage.Define\u003cstring\u003e(LogLevel.Information, new(0, \"LogSomething\"), \"Hello {Name}. How are you {Name}\");\r\n```\r\n\r\nthe code could update to:\r\n\r\n```csharp\r\nLoggerMessage.Define\u003cstring, string\u003e(LogLevel.Information, new(0, \"LogSomething\"), \"Hello {Name}. How are you {Name}\");\r\n```\r\n\r\n--- \r\n\r\nThis would need to move to 7.0. \r\n\r\nFixing this issue involves updating the newly shipped logging analyzer so that it would not complain about mismatched number of arguments with count of named placeholders, when the same number of argument gets repeated.\r\n",
                                           "updatedAt":  "2021-08-04T17:21:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43wyG_",
                                           "createdAt":  "2021-10-06T06:03:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB9IuyA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2021-10-06T06:12:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "oocx",
                                           "body":  "To give an example from \"something in the wild\" - this is what I just tried and then stumbled upon this problem:\r\n\r\n\r\n```\r\n_logger.LogInformation(\"Neuer Saldo für Kasse {kasseId} nach Einzahlung von {betrag} {währung}: 0 {währung}\", kasseId, betrag.Wert, betrag.Währung);\r\n```\r\n(which translates to \"New balance for {registerId} after deposit of {sum} {currency}: {total} {currency}\")\r\n\r\n",
                                           "updatedAt":  "2021-10-06T06:03:30Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "LoggerMessage.Define doesn\u0027t support repeating the same named parameter in the message template",
        "labels":  [
                       "bug",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52228",
        "createdAt":  "2021-05-04T00:38:34Z",
        "number":  52228,
        "author":  "maryamariyan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-30T22:30:32Z",
        "body":  "LoggerMessage supports case insensitive parameters. But we need to add a diagnostic when different casing of the same parameter is specified in the same message template like in the below sample:\r\n\r\n```csharp\r\n[LoggerMessage(EventId = 0, Level = LogLevel.Debug, Message = \"\"M1 {p1} {P1}\"\")]\r\npublic static partial void M1(ILogger logger, int p1, int P1);\r\n```\r\n\r\nRefer to: https://github.com/dotnet/runtime/pull/51064#discussion_r611133173\r\n\r\n- Note: case insensitive support against on `LoggerMessage.Define` is also supported.\r\n\r\n## Proposal\r\n\r\nThe proposed diagnostic descriptor would be:\r\n\r\n```csharp\r\npublic static DiagnosticDescriptor InconsistentTemplateCasing { get; } = new DiagnosticDescriptor(\r\n    id: \"SYSLIB1021\",\r\n    title: new LocalizableResourceString(nameof(SR.InconsistentTemplateCasingTitle), SR.ResourceManager, typeof(FxResources.Microsoft.Extensions.Logging.Generators.SR)),\r\n    messageFormat: new LocalizableResourceString(nameof(SR.InconsistentTemplateCasingMessage), SR.ResourceManager, typeof(FxResources.Microsoft.Extensions.Logging.Generators.SR)),\r\n    category: \"LoggingGenerator\",\r\n    DiagnosticSeverity.Error,\r\n    isEnabledByDefault: true);\r\n```\r\n\r\nWith the following title:\r\n```\r\nLogging method have the same template with different casing\r\n```\r\n\r\nAnd the following message format:\r\n```\r\nLogging method \u0027{0}\u0027 have the same template with different casing\r\n\r\n```\r\n\r\n\u003e Note: `SYSLIB1021` diagnostic descriptor [is already merged on `main`](https://github.com/dotnet/runtime/blob/ff12237f483eb0afdabf1aeb71b69ff992d6bd40/src/libraries/Microsoft.Extensions.Logging.Abstractions/gen/DiagnosticDescriptors.cs#L163-L169), but it is not being triggered.\r\n\r\n## Code Sample\r\n\r\nThe diagnostic would be triggered for case such as the following ones:\r\n\r\n```csharp\r\nIReadOnlyList\u003cDiagnostic\u003e diagnostics = await RunGenerator(@\"\r\n    partial class C\r\n    {\r\n        [LoggerMessage(EventId = 0, Level = LogLevel.Debug, Message = \"\"M1 {par1} {PAr1} {a}\"\")]\r\n        static partial void M1(ILogger logger, int par1, int a);\r\n    }\r\n\");\r\n```\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVAKpOg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTYyMDU0MA==",
                                           "createdAt":  "2021-05-04T00:38:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nLoggerMessage supports case insensitive parameters. But we need to add a diagnostic when different casing of the same parameter is specified in the same message template like in the below sample:\r\n\r\n```csharp\r\n[LoggerMessage(EventId = 0, Level = LogLevel.Debug, Message = \"\"M1 {p1} {P1}\"\")]\r\npublic static partial void M1(ILogger logger, int p1, int P1);\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emaryamariyan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-04T00:38:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TZsu7",
                                           "createdAt":  "2023-01-21T12:50:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "allantargino",
                                           "body":  "## Proposal\r\n\r\nThe proposed diagnostic descriptor would be:\r\n\r\n```csharp\r\npublic static DiagnosticDescriptor InconsistentTemplateCasing { get; } = new DiagnosticDescriptor(\r\n    id: \"SYSLIB1021\",\r\n    title: new LocalizableResourceString(nameof(SR.InconsistentTemplateCasingTitle), SR.ResourceManager, typeof(FxResources.Microsoft.Extensions.Logging.Generators.SR)),\r\n    messageFormat: new LocalizableResourceString(nameof(SR.InconsistentTemplateCasingMessage), SR.ResourceManager, typeof(FxResources.Microsoft.Extensions.Logging.Generators.SR)),\r\n    category: \"LoggingGenerator\",\r\n    DiagnosticSeverity.Error,\r\n    isEnabledByDefault: true);\r\n```\r\n\r\nWith the following title:\r\n```\r\nParameter has inconsistent template casing\r\n```\r\n\r\nAnd the following message format:\r\n```\r\nParameter \u0027{0}\u0027 has inconsistent template casing\r\n```\r\n\r\n\u003e Note: `SYSLIB1021` diagnostic descriptor [is already merged on `main`](https://github.com/dotnet/runtime/blob/ff12237f483eb0afdabf1aeb71b69ff992d6bd40/src/libraries/Microsoft.Extensions.Logging.Abstractions/gen/DiagnosticDescriptors.cs#L163-L169), but it is not being triggered.\r\n\r\n## Code Sample\r\n\r\nThe diagnostic would be triggered for case such as the following ones:\r\n\r\n```csharp\r\nIReadOnlyList\u003cDiagnostic\u003e diagnostics = await RunGenerator(@\"\r\n    partial class C\r\n    {\r\n        [LoggerMessage(EventId = 0, Level = LogLevel.Debug, Message = \"\"M1 {par1} {PAr1} {a}\"\")]\r\n        static partial void M1(ILogger logger, int par1, int a);\r\n    }\r\n\");\r\n```",
                                           "updatedAt":  "2023-01-21T12:52:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Tl4Io",
                                           "createdAt":  "2023-01-24T18:56:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "[Video](https://www.youtube.com/watch?v=3rhPF0C_Z7o\u0026t=0h30m22s)\n\nIt seems we generally want to allow message parameters and parameters in C# to be matched case-insensitively such that folks can use Pascal-casing in the message for example. However, when one does it in the case of parameters that have the same name but differ in case the result is ill-defined today.\r\n\r\nWe can either do a diagnostic and disallow this (proposal) or we can change the source generator to first match case-sensitively and if that doesn\u0027t produce a match fall back to case-insensitive matching. We\u0027re leaning towards the latter.",
                                           "updatedAt":  "2023-01-24T20:03:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UAqk6",
                                           "createdAt":  "2023-01-30T22:30:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1QWZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "allantargino",
                                                                               "createdAt":  "2023-02-01T19:58:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I looked at the details and I agree it is possible we fix the issue inside the source generator and not necessary adding the diagnostics. ",
                                           "updatedAt":  "2023-01-30T22:30:21Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[LSG] LoggerMessage - Add diagnostic - Can\u0027t have the same template with different casing",
        "labels":  [
                       "api-needs-work",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52807",
        "createdAt":  "2021-05-15T13:41:55Z",
        "number":  52807,
        "author":  "daiplusplus",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOByPZ8w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2021-05-16T07:40:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rgwood",
                                            "createdAt":  "2021-07-13T05:55:41Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-11-13T18:45:11Z",
        "body":  "# Background and Motivation\r\n\r\n\u003c!--\r\nWe welcome API proposals! We have a process to evaluate the value and shape of new API. There is an overview of our process [here](https://github.com/dotnet/runtime/blob/main/docs/project/api-review-process.md). This template will help us gather the information we need to start the review process.\r\nFirst, please describe the purpose and value of the new API here.\r\n--\u003e\r\n\r\nThe `Microsoft.Extensions.Logging.Console`\u0027s `ConsoleLoggerProcessor` class iterates over `BlockingCollection` and writes formatted messages to the console in a new, separate, and private thread. There are 3 problems with the current design when used in a console application program:\r\n\r\n* Writing formatted messages with ANSI control codes (e.g. coloring) - or sequences of separate writes -  to the console is not atomic nor thread-safe.\r\n  * For example, when an application program writes to `Console` directly while also calling-into services that log messages then colored message text will clash with the application\u0027s writes.\r\n  * While I understand that concurrent calls to `Console.WriteLine(String)` will not be intermingled (i.e. they\u0027ll appear as two separate uncorrupted lines), if one thread needs to render multiple lines together then that cannot be guaranteed as the `ConsoleLoggerProcessor` thread may have its `Console.Write` calls run in-between the other thread\u0027s calls.\r\n* There is no way to temporarily pause and buffer console messages while the console application program needs uninterrupted access to `System.Console`.\r\n* In simpler console applications [logged messages will never be displayed](https://github.com/aspnet/Logging/issues/852) if/when returning from `Main` without disposing of the DI container.\r\n\r\n# Proposed API\r\n\r\n### (Unrealistic) Solution: Make `IConsole` a public DI service and add methods to allow consumers to temporarily borrow exclusive access:\r\n\r\nAs much as we\u0027d all like `System.Console` to go-away and be replaced with an injectable `IConsole` interface, that\u0027s too much to ask for - and even if we kept `System.Console` and merely _added_ `IConsole` as an improved way for working with the console/terminal/stdout it would be subject to too much bikeshedding so I won\u0027t go into detail on this option.\r\n\r\n...but if we did, I\u0027d want it to have something like this:\r\n\r\n\r\n```\r\npublic interface IConsole\r\n{\r\n    void WriteLine();\r\n    // Write(), WriteLine(), etc\r\n\r\n   /// \u003csummary\u003eReturns an object that has exclusive access to the console for the specified period of time. All other IConsole users will buffer their messages until either the returned IBorrowedConsole is disposed or the maxExclusiveUseTime time expires, whichever is sooner.\u003c/summary\u003e\r\n    IBorrowedConsole Borrow( TimeSpan maxExclusiveUseTime ); // `maxExclusiveUseTime` defaults to 1000ms\r\n}\r\n\r\npublic interface IBorrowedConsole : IConsole, IDisposable\r\n{\r\n    // Or perhaps name it `IExclusiveConsole`?\r\n}\r\n```\r\n\r\n## (Realistic) Solution 2: Allow a `lock()`-able object to be specified in `ConsoleLoggerOptions` which is respected by `ConsoleLoggerProcessor`.\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.Logging.Console\r\n{\r\n    public class ConsoleLoggerOptions\r\n    {\r\n+      public Object? ConsoleLockObject { get; set; }\r\n+      public TimeSpan ConsoleLockTimeout { get; set; } = TimeSpan.FromSeconds(1);\r\n    }\r\n}\r\n```\r\n\r\n* When `ConsoleLoggerOptions.ConsoleLockObject` is not-null, then `ConsoleLoggerProcessor.WriteMessage` method would lock on `ConsoleLoggerOptions.ConsoleLockObject` (if specified) so that each message can be written atomically and not when application code is locked on the same object to gain exclusive use of `Console` for an uninterruptable sequence of writes.\r\n   * ...but ideally I\u0027d like `ProcessLogQueue()` to lock on `ConsoleLockObject` _for the entire batch_ of pending messages, so all pending messages are written without any interleaving writes from application code (assuming that application code is also locking on the same `ConsoleLockObject` of course).\r\n     * I\u0027m not too familiar with `BlockingCollection\u003cT\u003e` - while I see that `ConsoleLoggerProcessor` uses a single `foreach` with `GetConsumingEnumerable`, I assume it\u0027s possible to detect when there\u0027s a batch of pending messages and to use a single lock for all of them, instead of individually.\r\n\r\n\r\nNote that while consuming applications would be free to use `lock()` to synchronize their own `Console` use-sites, the `ConsoleLoggerProcessor` would always use `Monitor.TryEnter` with the `ConsoleLockTimeout` to prevent deadlocks.\r\n\r\nAn example of its usage:\r\n\r\n```\r\npublic static class ConsoleProgram\r\n{\r\n    public static readonly Object MyConsoleLock = new Object();\r\n\r\n    private static IHost CreateHost( String[] args )\r\n    {\r\n         IHostBuilder hb = Host.CreateDefaultBuilder( args );\r\n         _ = hb.ConfigureLogging( lb =\u003e {\r\n            lb.AddConsole( consoleLoggerOptions =\u003e {\r\n                consoleLoggerOptions.ConsoleLockObject = ConsoleProgram.MyConsoleLock;\r\n            } );\r\n        } );\r\n\r\n        _ = hb.ConfigureServices( /* Add IHttpClientFactory, etc */ );\r\n    }\r\n\r\n    public static async Task Main( String[] args )\r\n    {\r\n        IHost host = CreateHost( args );\r\n\r\n        IHttpClientFactory hcf = host.Services.RequireService\u003cIHttpClientFactory\u003e();\r\n        HttpClient hc = hcf.CreateClient();\r\n\r\n        String foo = await ( await hc.GetAsync( \"https://contoso.com/etc\" ) ).Content.ReadAsStringAsync();\r\n        lock( MyConsoleLock )\r\n        {\r\n            Console.WriteLine( \"Got response\" );\r\n            Console.WriteLine( \"Length: {0:N0} chars\", foo.Length );\r\n            Console.WriteLine();\r\n            Console.WriteLine( foo );\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Solution addendum for pending console log messages at the end of `Main`: Add a code-analysis checker\r\n\r\nA simple solution for the problem of trivial `Main` methods returning (and causing an entire application shutdown) before `ConsoleLoggerProcessor` has finished writing all pending messages to the console would be the introduction of a Roslyn code-analyzer that warns the user if an `IHost` is created inside `Main` but not disposed before `Main` returns.\r\n\r\nSo the code above (and the linked example) would trigger an analysis warning that `Main` does not dispose of `IHost` and/or call `StopAsync` before returning.\r\n\r\n### Triggering code example:\r\n\r\n```\r\n    public static void Main( String[] args )\r\n    {\r\n        IHost host = CreateHost( args );\r\n\r\n        MainInner( host );\r\n\r\n        Console.WriteLine( \"Now exiting, but any pending logged messages won\u0027t be printed.\" );\r\n    } // \u003c-- Code analysis warning that `host` is not disposed.\r\n```\r\n\r\n### Code-fix result example:\r\n\r\nThe code-analysis code-fix would be to wrap the `IHost` in an explicit `using` block - but _exclude_ any trailing use of `Console`:\r\n\r\n```\r\n    public static void Main( String[] args )\r\n    {\r\n        using( IHost host = CreateHost( args ) )\r\n        {\r\n            MainInner( host );\r\n        }\r\n\r\n        Console.WriteLine( \"Now exiting. Any pending logged messages will have been printed before this message.\" );\r\n    }\r\n```\r\n\r\n## Risks\r\n\r\nAs with any use of `lock`, the opportunity for deadlocks is present, however because only the user\u0027s application code would ever use `lock()` and the library code will only ever use `Monitor.TryEnter` there shouldn\u0027t be any issues there.\r\n\r\nBecause C# already disallows the use of `await` inside a `lock` I don\u0027t forsee there being any major issues.\r\n\r\n## Contribution / PR\r\n\r\nAs per the Contribution guidelines and [API review process](https://github.com/dotnet/runtime/blob/main/docs/project/api-review-process.md), because this is a public API addition, I won\u0027t submit my PR with my changes (and tests) until this suggestion is accepted.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOa8_9nQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MTY2MDkxOA==",
                                           "createdAt":  "2021-05-15T13:42:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @carlossanlop\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n# Background and Motivation\r\n\r\n\u003c!--\r\nWe welcome API proposals! We have a process to evaluate the value and shape of new API. There is an overview of our process [here](https://github.com/dotnet/runtime/blob/main/docs/project/api-review-process.md). This template will help us gather the information we need to start the review process.\r\nFirst, please describe the purpose and value of the new API here.\r\n--\u003e\r\n\r\nThe `Microsoft.Extensions.Logging.Console`\u0027s `ConsoleLoggerProcessor` class iterates over `BlockingCollection` and writes formatted messages to the console in a new, separate, and private thread. There are 3 problems with the current design when used in a console application program:\r\n\r\n* Writing formatted messages with ANSI control codes (e.g. coloring) - or sequences of separate writes -  to the console is not atomic nor thread-safe.\r\n  * For example, when an application program writes to `Console` directly while also calling-into services that log messages then colored message text will clash with the application\u0027s writes.\r\n  * While I understand that concurrent calls to `Console.WriteLine(String)` will not be intermingled (i.e. they\u0027ll appear as two separate uncorrupted lines), if one thread needs to render multiple lines together then that cannot be guaranteed as the `ConsoleLoggerProcessor` thread may have its `Console.Write` calls run in-between the other thread\u0027s calls.\r\n* There is no way to temporarily pause and buffer console messages while the console application program needs uninterrupted access to `System.Console`.\r\n* In simpler console applications [logged messages will never be displayed](https://github.com/aspnet/Logging/issues/852) if/when returning from `Main` without disposing of the DI container.\r\n\r\n# Proposed API\r\n\r\n### (Unrealistic) Solution: Make `IConsole` a public DI service and add methods to allow consumers to temporarily borrow exclusive access:\r\n\r\nAs much as we\u0027d all like `System.Console` to go-away and be replaced with an injectable `IConsole` interface, that\u0027s too much to ask for - and even if we kept `System.Console` and merely _added_ `IConsole` as an improved way for working with the console/terminal/stdout it would be subject to too much bikeshedding so I won\u0027t go into detail on this option.\r\n\r\n...but if we did, I\u0027d want it to have something like this:\r\n\r\n\r\n```\r\npublic interface IConsole\r\n{\r\n    void WriteLine();\r\n    // Write(), WriteLine(), etc\r\n\r\n   /// \u003csummary\u003eReturns an object that has exclusive access to the console for the specified period of time. All other IConsole users will buffer their messages until either the returned IBorrowedConsole is disposed or the maxExclusiveUseTime time expires, whichever is sooner.\u003c/summary\u003e\r\n    IBorrowedConsole Borrow( TimeSpan maxExclusiveUseTime ); // `maxExclusiveUseTime` defaults to 1000ms\r\n}\r\n\r\npublic interface IExclusiveConsole : IConsole, IDisposable\r\n{\r\n}\r\n```\r\n\r\n## (Realistic) Solution 2: Allow a `lock()`-able object to be specified in `ConsoleLoggerOptions` which is respected by `ConsoleLoggerProcessor`.\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.Logging.Console\r\n{\r\n    public class ConsoleLoggerOptions\r\n    {\r\n+      public Object? ConsoleLockObject { get; set; }\r\n+      public TimeSpan ConsoleLockTimeout { get; set; } = TimeSpan.FromSeconds(1);\r\n    }\r\n}\r\n```\r\n\r\nAt the very minimum, the `ConsoleLoggerProcessor.WriteMessage` method would lock on `ConsoleLoggerOptions.ConsoleLockObject` (if specified) so that each message can be written atomically - but ideally I\u0027d like `ProcessLogQueue()` to lock on `ConsoleLockObject` _for the entire batch_ of pending messages, so all messages are written without any interleaving writes from application code (assuming that application code is also locking on the same `ConsoleLockObject` of course).\r\n\r\nNote that while consuming applications would be free to use `lock()` to synchronize their own `Console` use-sites, the `ConsoleLoggerProcessor` would always use `Monitor.TryEnter` with the `ConsoleLockTimeout` to prevent deadlocks.\r\n\r\nAn example of its usage:\r\n\r\n```\r\npublic static class ConsoleProgram\r\n{\r\n    public static readonly Object MyConsoleLock = new Object();\r\n\r\n    private static IHost CreateHost( String[] args )\r\n    {\r\n         IHostBuilder hb = Host.CreateDefaultBuilder( args );\r\n         _ = hb.ConfigureLogging( lb =\u003e {\r\n            lb.AddConsole( consoleLoggerOptions =\u003e {\r\n                consoleLoggerOptions.ConsoleLockObject = ConsoleProgram.MyConsoleLock;\r\n            } );\r\n        } );\r\n\r\n        _ = hb.ConfigureServices( /* Add IHttpClientFactory, etc */ );\r\n    }\r\n\r\n    public static async Task Main( String[] args )\r\n    {\r\n        IHost host = CreateHost( args );\r\n\r\n        IHttpClientFactory hcf = host.Services.RequireService\u003cIHttpClientFactory\u003e();\r\n        HttpClient hc = hcf.CreateClient();\r\n\r\n        String foo = await ( await hc.GetAsync( \"https://contoso.com/etc\" ) ).Content.ReadAsStringAsync();\r\n       lock( ConsoleLockObject )\r\n       {\r\n           Console.WriteLine( \"Got response\" );\r\n           Console.WriteLine( \"Length: {0:N0} chars\", foo.Length );\r\n           Console.WriteLine();\r\n           Console.WriteLine( foo );\r\n       }\r\n    }\r\n}\r\n```\r\n\r\n## Solution addendum for pending console log messages at the end of `Main`: Add a code-analysis checker\r\n\r\nA simple solution for the problem of trivial `Main` methods returning (and causing an entire application shutdown) before `ConsoleLoggerProcessor` has finished writing all pending messages to the console would be the introduction of a Roslyn code-analyzer that warns the user if an `IHost` is created inside `Main` but not disposed before `Main` returns.\r\n\r\nSo the code above (and the linked example) would trigger an analysis warning that `Main` does not dispose of `IHost` and/or call `StopAsync` before returning.\r\n\r\n## Risks\r\n\r\nAs with any use of `lock`, the opportunity for deadlocks is present, however because only the user\u0027s application code would ever use `lock()` and the library code will only ever use `Monitor.TryEnter` there shouldn\u0027t be any issues there.\r\n\r\nBecause C# already disallows the use of `await` inside a `lock` I don\u0027t forsee there being any major issues.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJehoel\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-15T13:42:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rz_2d",
                                           "createdAt":  "2023-11-13T18:45:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n# Background and Motivation\r\n\r\n\u003c!--\r\nWe welcome API proposals! We have a process to evaluate the value and shape of new API. There is an overview of our process [here](https://github.com/dotnet/runtime/blob/main/docs/project/api-review-process.md). This template will help us gather the information we need to start the review process.\r\nFirst, please describe the purpose and value of the new API here.\r\n--\u003e\r\n\r\nThe `Microsoft.Extensions.Logging.Console`\u0027s `ConsoleLoggerProcessor` class iterates over `BlockingCollection` and writes formatted messages to the console in a new, separate, and private thread. There are 3 problems with the current design when used in a console application program:\r\n\r\n* Writing formatted messages with ANSI control codes (e.g. coloring) - or sequences of separate writes -  to the console is not atomic nor thread-safe.\r\n  * For example, when an application program writes to `Console` directly while also calling-into services that log messages then colored message text will clash with the application\u0027s writes.\r\n  * While I understand that concurrent calls to `Console.WriteLine(String)` will not be intermingled (i.e. they\u0027ll appear as two separate uncorrupted lines), if one thread needs to render multiple lines together then that cannot be guaranteed as the `ConsoleLoggerProcessor` thread may have its `Console.Write` calls run in-between the other thread\u0027s calls.\r\n* There is no way to temporarily pause and buffer console messages while the console application program needs uninterrupted access to `System.Console`.\r\n* In simpler console applications [logged messages will never be displayed](https://github.com/aspnet/Logging/issues/852) if/when returning from `Main` without disposing of the DI container.\r\n\r\n# Proposed API\r\n\r\n### (Unrealistic) Solution: Make `IConsole` a public DI service and add methods to allow consumers to temporarily borrow exclusive access:\r\n\r\nAs much as we\u0027d all like `System.Console` to go-away and be replaced with an injectable `IConsole` interface, that\u0027s too much to ask for - and even if we kept `System.Console` and merely _added_ `IConsole` as an improved way for working with the console/terminal/stdout it would be subject to too much bikeshedding so I won\u0027t go into detail on this option.\r\n\r\n...but if we did, I\u0027d want it to have something like this:\r\n\r\n\r\n```\r\npublic interface IConsole\r\n{\r\n    void WriteLine();\r\n    // Write(), WriteLine(), etc\r\n\r\n   /// \u003csummary\u003eReturns an object that has exclusive access to the console for the specified period of time. All other IConsole users will buffer their messages until either the returned IBorrowedConsole is disposed or the maxExclusiveUseTime time expires, whichever is sooner.\u003c/summary\u003e\r\n    IBorrowedConsole Borrow( TimeSpan maxExclusiveUseTime ); // `maxExclusiveUseTime` defaults to 1000ms\r\n}\r\n\r\npublic interface IBorrowedConsole : IConsole, IDisposable\r\n{\r\n    // Or perhaps name it `IExclusiveConsole`?\r\n}\r\n```\r\n\r\n## (Realistic) Solution 2: Allow a `lock()`-able object to be specified in `ConsoleLoggerOptions` which is respected by `ConsoleLoggerProcessor`.\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.Logging.Console\r\n{\r\n    public class ConsoleLoggerOptions\r\n    {\r\n+      public Object? ConsoleLockObject { get; set; }\r\n+      public TimeSpan ConsoleLockTimeout { get; set; } = TimeSpan.FromSeconds(1);\r\n    }\r\n}\r\n```\r\n\r\n* When `ConsoleLoggerOptions.ConsoleLockObject` is not-null, then `ConsoleLoggerProcessor.WriteMessage` method would lock on `ConsoleLoggerOptions.ConsoleLockObject` (if specified) so that each message can be written atomically and not when application code is locked on the same object to gain exclusive use of `Console` for an uninterruptable sequence of writes.\r\n   * ...but ideally I\u0027d like `ProcessLogQueue()` to lock on `ConsoleLockObject` _for the entire batch_ of pending messages, so all pending messages are written without any interleaving writes from application code (assuming that application code is also locking on the same `ConsoleLockObject` of course).\r\n     * I\u0027m not too familiar with `BlockingCollection\u003cT\u003e` - while I see that `ConsoleLoggerProcessor` uses a single `foreach` with `GetConsumingEnumerable`, I assume it\u0027s possible to detect when there\u0027s a batch of pending messages and to use a single lock for all of them, instead of individually.\r\n\r\n\r\nNote that while consuming applications would be free to use `lock()` to synchronize their own `Console` use-sites, the `ConsoleLoggerProcessor` would always use `Monitor.TryEnter` with the `ConsoleLockTimeout` to prevent deadlocks.\r\n\r\nAn example of its usage:\r\n\r\n```\r\npublic static class ConsoleProgram\r\n{\r\n    public static readonly Object MyConsoleLock = new Object();\r\n\r\n    private static IHost CreateHost( String[] args )\r\n    {\r\n         IHostBuilder hb = Host.CreateDefaultBuilder( args );\r\n         _ = hb.ConfigureLogging( lb =\u003e {\r\n            lb.AddConsole( consoleLoggerOptions =\u003e {\r\n                consoleLoggerOptions.ConsoleLockObject = ConsoleProgram.MyConsoleLock;\r\n            } );\r\n        } );\r\n\r\n        _ = hb.ConfigureServices( /* Add IHttpClientFactory, etc */ );\r\n    }\r\n\r\n    public static async Task Main( String[] args )\r\n    {\r\n        IHost host = CreateHost( args );\r\n\r\n        IHttpClientFactory hcf = host.Services.RequireService\u003cIHttpClientFactory\u003e();\r\n        HttpClient hc = hcf.CreateClient();\r\n\r\n        String foo = await ( await hc.GetAsync( \"https://contoso.com/etc\" ) ).Content.ReadAsStringAsync();\r\n        lock( MyConsoleLock )\r\n        {\r\n            Console.WriteLine( \"Got response\" );\r\n            Console.WriteLine( \"Length: {0:N0} chars\", foo.Length );\r\n            Console.WriteLine();\r\n            Console.WriteLine( foo );\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Solution addendum for pending console log messages at the end of `Main`: Add a code-analysis checker\r\n\r\nA simple solution for the problem of trivial `Main` methods returning (and causing an entire application shutdown) before `ConsoleLoggerProcessor` has finished writing all pending messages to the console would be the introduction of a Roslyn code-analyzer that warns the user if an `IHost` is created inside `Main` but not disposed before `Main` returns.\r\n\r\nSo the code above (and the linked example) would trigger an analysis warning that `Main` does not dispose of `IHost` and/or call `StopAsync` before returning.\r\n\r\n### Triggering code example:\r\n\r\n```\r\n    public static void Main( String[] args )\r\n    {\r\n        IHost host = CreateHost( args );\r\n\r\n        MainInner( host );\r\n\r\n        Console.WriteLine( \"Now exiting, but any pending logged messages won\u0027t be printed.\" );\r\n    } // \u003c-- Code analysis warning that `host` is not disposed.\r\n```\r\n\r\n### Code-fix result example:\r\n\r\nThe code-analysis code-fix would be to wrap the `IHost` in an explicit `using` block - but _exclude_ any trailing use of `Console`:\r\n\r\n```\r\n    public static void Main( String[] args )\r\n    {\r\n        using( IHost host = CreateHost( args ) )\r\n        {\r\n            MainInner( host );\r\n        }\r\n\r\n        Console.WriteLine( \"Now exiting. Any pending logged messages will have been printed before this message.\" );\r\n    }\r\n```\r\n\r\n## Risks\r\n\r\nAs with any use of `lock`, the opportunity for deadlocks is present, however because only the user\u0027s application code would ever use `lock()` and the library code will only ever use `Monitor.TryEnter` there shouldn\u0027t be any issues there.\r\n\r\nBecause C# already disallows the use of `await` inside a `lock` I don\u0027t forsee there being any major issues.\r\n\r\n## Contribution / PR\r\n\r\nAs per the Contribution guidelines and [API review process](https://github.com/dotnet/runtime/blob/main/docs/project/api-review-process.md), because this is a public API addition, I won\u0027t submit my PR with my changes (and tests) until this suggestion is accepted.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edaiplusplus\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-13T18:45:11Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Introduce a ConsoleLogger option - or expose a synchronization primitive - so ConsoleLogger plays nice with interactive Console applications",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52990",
        "createdAt":  "2021-05-19T19:24:07Z",
        "number":  52990,
        "author":  "bdovaz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-06T11:06:11Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nUntil now I was using version 3.1.x (3.1.15 in this case) of Microsoft.Extensions.* libraries with Unity on multiple platforms (Windows, macOS, Android, iOS, WebGL, UWP) and scripting backends (Mono - JIT / IL2CPP - AOT) without problem.\r\n\r\nI tried to upgrade to version 5.x and I started getting the exception below.\r\n\r\nIt seems that now the code is not IL2CPP / AOT friendly.\r\n\r\nThe problematic code is this:\r\n\r\nhttps://github.com/dotnet/runtime/blob/v5.0.0/src/libraries/Common/src/Extensions/ProviderAliasUtilities/ProviderAliasUtilities.cs#L20\r\n\r\n### Configuration\r\n\r\nUnity 2020.3.6f1 - Windows IL2CPP\r\n\r\nMicrosoft.Extensions.Logging 5.0.0\r\n\r\n### Regression?\r\n\r\nIt is a regression because in 3.1.x versions it did not happen.\r\n\r\n### Other information\r\n\r\nRelated issues and PRs:\r\n\r\nhttps://github.com/dotnet/runtime/issues/40383\r\n\r\nhttps://github.com/dotnet/runtime/pull/40431\r\n\r\nUnity issue tracker:\r\n\r\nhttps://issuetracker.unity3d.com/issues/customattributedata-dot-cpp-il2cpp-does-not-support-inspection-of-attribute-constructor-arguments-at-run-time\r\n\r\nException stacktrace\r\n\r\n```\r\nNotSupportedException: C:\\Program Files\\Unity\\Hub\\Editor\\2020.3.6f1\\Editor\\Data\\il2cpp\\libil2cpp\\icalls\\mscorlib\\System.Reflection\\CustomAttributeData.cpp(17) : Unsupported internal call for IL2CPP:CustomAttributeData::ResolveArgumentsInternal - \"IL2CPP does not support inspection of attribute constructor arguments at run time.\"\r\n  at System.Reflection.CustomAttributeData.ResolveArguments () [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at System.Reflection.CustomAttributeData.get_ConstructorArguments () [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.Logging.ProviderAliasUtilities.GetAlias (System.Type providerType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.Logging.Configuration.LoggerProviderConfigurationFactory.GetConfiguration (System.Type providerType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.Logging.Configuration.LoggerProviderConfiguration`1[T]..ctor (Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfigurationFactory providerConfigurationFactory) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at System.Reflection.MonoCMethod.InternalInvoke (System.Object obj, System.Object[] parameters) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at System.Reflection.MonoCMethod.Invoke (System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at System.Reflection.ConstructorInfo.Invoke (System.Object[] parameters) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable (Microsoft.Extensions.DependencyInjection.ServiceLookup.IEnumerableCallSite enumerableCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitDisposeCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite transientCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable (Microsoft.Extensions.DependencyInjection.ServiceLookup.IEnumerableCallSite enumerableCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine+\u003c\u003ec__DisplayClass1_0.\u003cRealizeService\u003eb__0 (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope scope) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at System.Func`2[T,TResult].Invoke (T arg) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService (System.IServiceProvider provider, System.Type serviceType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T] (System.IServiceProvider provider) [0x00000] in \u003c00000000000000000000000000000000\u003e:0\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON8oHOA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NDQwMTMyNA==",
                                           "createdAt":  "2021-05-19T19:24:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nUntil now I was using version 3.1.x (3.1.15 in this case) of Microsoft.Extensions.* libraries with Unity on multiple platforms (Windows, macOS, Android, iOS, WebGL, UWP) and scripting backends (Mono - JIT / IL2CPP - AOT) without problem.\r\n\r\nI tried to upgrade to version 5.x and I started getting the exception below.\r\n\r\nIt seems that now the code is not IL2CPP / AOT friendly.\r\n\r\nThe problematic code is this:\r\n\r\nhttps://github.com/dotnet/runtime/blob/v5.0.0/src/libraries/Common/src/Extensions/ProviderAliasUtilities/ProviderAliasUtilities.cs#L20\r\n\r\n### Configuration\r\n\r\nUnity 2020.3.6f1 - Windows IL2CPP\r\n\r\nMicrosoft.Extensions.Logging 5.0.0\r\n\r\n### Regression?\r\n\r\nIt is a regression because in 3.1.x versions it did not happen.\r\n\r\n### Other information\r\n\r\n```\r\nNotSupportedException: C:\\Program Files\\Unity\\Hub\\Editor\\2020.3.6f1\\Editor\\Data\\il2cpp\\libil2cpp\\icalls\\mscorlib\\System.Reflection\\CustomAttributeData.cpp(17) : Unsupported internal call for IL2CPP:CustomAttributeData::ResolveArgumentsInternal - \"IL2CPP does not support inspection of attribute constructor arguments at run time.\"\r\n  at System.Reflection.CustomAttributeData.ResolveArguments () [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at System.Reflection.CustomAttributeData.get_ConstructorArguments () [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.Logging.ProviderAliasUtilities.GetAlias (System.Type providerType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.Logging.Configuration.LoggerProviderConfigurationFactory.GetConfiguration (System.Type providerType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.Logging.Configuration.LoggerProviderConfiguration`1[T]..ctor (Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfigurationFactory providerConfigurationFactory) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at System.Reflection.MonoCMethod.InternalInvoke (System.Object obj, System.Object[] parameters) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at System.Reflection.MonoCMethod.Invoke (System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at System.Reflection.ConstructorInfo.Invoke (System.Object[] parameters) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable (Microsoft.Extensions.DependencyInjection.ServiceLookup.IEnumerableCallSite enumerableCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitDisposeCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite transientCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable (Microsoft.Extensions.DependencyInjection.ServiceLookup.IEnumerableCallSite enumerableCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine+\u003c\u003ec__DisplayClass1_0.\u003cRealizeService\u003eb__0 (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope scope) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at System.Func`2[T,TResult].Invoke (T arg) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService (System.IServiceProvider provider, System.Type serviceType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T] (System.IServiceProvider provider) [0x00000] in \u003c00000000000000000000000000000000\u003e:0\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebdovaz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-DependencyInjection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-19T19:24:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NDQyODI4MA==",
                                           "createdAt":  "2021-05-19T20:02:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "The reason the `ProviderAliasUtilities` code was changed was to support trimmability and thus AOT technologies. The 3.1 code was using Reflection to access the attribute data, and it wasn\u0027t able to be statically analyzed. Using `CustomAttributeData.GetCustomAttributes` is the right pattern going forward. So I\u0027m a bit surprised IL2CPP doesn\u0027t support this pattern. \r\n\r\ncc @MichalStrehovsky @vitek-karas ",
                                           "updatedAt":  "2021-05-19T20:02:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NDQyODUxMQ==",
                                           "createdAt":  "2021-05-19T20:02:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nUntil now I was using version 3.1.x (3.1.15 in this case) of Microsoft.Extensions.* libraries with Unity on multiple platforms (Windows, macOS, Android, iOS, WebGL, UWP) and scripting backends (Mono - JIT / IL2CPP - AOT) without problem.\r\n\r\nI tried to upgrade to version 5.x and I started getting the exception below.\r\n\r\nIt seems that now the code is not IL2CPP / AOT friendly.\r\n\r\nThe problematic code is this:\r\n\r\nhttps://github.com/dotnet/runtime/blob/v5.0.0/src/libraries/Common/src/Extensions/ProviderAliasUtilities/ProviderAliasUtilities.cs#L20\r\n\r\n### Configuration\r\n\r\nUnity 2020.3.6f1 - Windows IL2CPP\r\n\r\nMicrosoft.Extensions.Logging 5.0.0\r\n\r\n### Regression?\r\n\r\nIt is a regression because in 3.1.x versions it did not happen.\r\n\r\n### Other information\r\n\r\nRelated issues and PRs:\r\n\r\nhttps://github.com/dotnet/runtime/issues/40383\r\n\r\nhttps://github.com/dotnet/runtime/pull/40431\r\n\r\nUnity issue tracker:\r\n\r\nhttps://issuetracker.unity3d.com/issues/customattributedata-dot-cpp-il2cpp-does-not-support-inspection-of-attribute-constructor-arguments-at-run-time\r\n\r\nException stacktrace\r\n\r\n```\r\nNotSupportedException: C:\\Program Files\\Unity\\Hub\\Editor\\2020.3.6f1\\Editor\\Data\\il2cpp\\libil2cpp\\icalls\\mscorlib\\System.Reflection\\CustomAttributeData.cpp(17) : Unsupported internal call for IL2CPP:CustomAttributeData::ResolveArgumentsInternal - \"IL2CPP does not support inspection of attribute constructor arguments at run time.\"\r\n  at System.Reflection.CustomAttributeData.ResolveArguments () [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at System.Reflection.CustomAttributeData.get_ConstructorArguments () [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.Logging.ProviderAliasUtilities.GetAlias (System.Type providerType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.Logging.Configuration.LoggerProviderConfigurationFactory.GetConfiguration (System.Type providerType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.Logging.Configuration.LoggerProviderConfiguration`1[T]..ctor (Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfigurationFactory providerConfigurationFactory) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at System.Reflection.MonoCMethod.InternalInvoke (System.Object obj, System.Object[] parameters) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at System.Reflection.MonoCMethod.Invoke (System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at System.Reflection.ConstructorInfo.Invoke (System.Object[] parameters) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable (Microsoft.Extensions.DependencyInjection.ServiceLookup.IEnumerableCallSite enumerableCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitDisposeCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite transientCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable (Microsoft.Extensions.DependencyInjection.ServiceLookup.IEnumerableCallSite enumerableCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSiteMain (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngine, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock lockType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext context) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite callSite, TArgument argument) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine+\u003c\u003ec__DisplayClass1_0.\u003cRealizeService\u003eb__0 (Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope scope) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at System.Func`2[T,TResult].Invoke (T arg) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService (System.IServiceProvider provider, System.Type serviceType) [0x00000] in \u003c00000000000000000000000000000000\u003e:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T] (System.IServiceProvider provider) [0x00000] in \u003c00000000000000000000000000000000\u003e:0\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebdovaz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-19T20:02:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NDQ2NDE1MA==",
                                           "createdAt":  "2021-05-19T20:52:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "CustomAttributeData is also better for perf because we no longer have to create instances of these at runtime just to reflection-inspect them.\r\n\r\nI wonder what motivated Unity IL2CPP to implement Type.GetCustomAttributes, but not CustomAttributeData. One would normally expect Type.GetCustomAttributes to be built on top of CustomAttributeData. Type.GetCustomAttributes is a lot more problematic for AOT/IL2CPP kind of tools than CustomAttributeData.\r\n\r\nThis looks like Unity IL2CPP unimplemented feature.\r\n\r\nEven the [CoreRT IL2CPP backend](https://github.com/dotnet/corert/tree/master/src/ILCompiler.CppCodeGen/src/CppCodeGen) (which is a lot less advanced than Unity\u0027s IL2CPP) supports CustomAttributeData.",
                                           "updatedAt":  "2021-05-19T20:52:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NDU2ODY5MA==",
                                           "createdAt":  "2021-05-19T23:38:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "cc: @xoofx from Unity",
                                           "updatedAt":  "2021-05-19T23:38:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NDk3Nzk2OQ==",
                                           "createdAt":  "2021-05-20T10:51:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joshpeterson",
                                           "body":  "We chose not to support this in the past in IL2CPP for two reasons:\r\n\r\n1. We simply did not need it. There have been a few requests for it in the past, but the vast majority of users can work around it.\r\n2. Implementing this would require additional metadata, which increases the final code size since very few users actually use this feature, most users would end up paying this build size cost which provides no benefit.\r\n\r\nWith that said, there is no technical blocker to us implementing this for IL2CPP, it is certainly possible. At the moment we don\u0027t have any plans to do so, but that could change.",
                                           "updatedAt":  "2021-05-20T10:51:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NTEyNjI4MA==",
                                           "createdAt":  "2021-05-20T13:33:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bdovaz",
                                           "body":  "@joshpeterson But in my case I am using Microsoft Nuget packages that have millions of downloads in Nuget and indirectly I am suffering this problem and I have no workaround as you can see because the code that has the problem is not mine but from a Nuget package.\r\n\r\nIn my case I have no workaround and it\u0027s blocking us from using some Nuget packages.\r\n\r\nSo \"very few users actually use this feature\" it\u0027s not accurate because many of us indirectly will have this problem.",
                                           "updatedAt":  "2021-05-20T13:34:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NTE1MTkyMg==",
                                           "createdAt":  "2021-05-20T14:02:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joshpeterson",
                                           "body":  "Sorry, I did not mean to imply that no users hit this issue. Most do not, and those that have in the past have been able to work around it.\r\n\r\nHowever, if there is library code like this which makes use of this feature, then we may need to implement it, so that users can user this library code.",
                                           "updatedAt":  "2021-05-20T14:02:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NTE2MzM3Nw==",
                                           "createdAt":  "2021-05-20T14:16:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "@bdovaz if you use this for a game, I would suggest to switch to a library that don\u0027t rely on reflection at runtime. Reflection is bad in games, it is slow, it consumes memory, it forces the AOT to embed .NET metadata...etc. 😉 ",
                                           "updatedAt":  "2021-05-20T14:16:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NTIxNzEwMw==",
                                           "createdAt":  "2021-05-20T15:22:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBsOFWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2021-05-20T15:25:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "VolodymyrBS",
                                                                               "createdAt":  "2021-05-20T16:58:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ddalacu",
                                                                               "createdAt":  "2021-05-26T06:44:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "bdovaz",
                                           "body":  "@xoofx No, we develop many different projects like for example interactive solutions for museums, engineering solutions for industry (digital twins, hmis, ...) or vr training apps. Also, we never log in methods like Update, LateUpdate, FixedUpdate because obviously, it would be crazy, so neither reflection nor performance is going to be a problem.\r\n\r\nFor many of these critical and complex projects we require advanced logging system solutions, \"Debug.Log\" is not enough and that is why we use Microsoft.Extensions.Logging + certain integrations such as log4net or Serilog for example.\r\n\r\n@joshpeterson In case you don\u0027t know the problematic package of this issue, it is the following:\r\n\r\nhttps://www.nuget.org/packages/Microsoft.Extensions.Logging/\r\n\r\n**Version 5.0.0 has almost 18 million downloads...**\r\n\r\nI hope you will please implement this missing functionality soon because if Unity supports .NET Standard 2.0, it is understood that packages as common as this one should work without any problem.",
                                           "updatedAt":  "2021-05-20T15:24:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjM2NjczOA==",
                                           "createdAt":  "2021-06-01T18:55:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Snippets of summary:\r\n\r\n\u003e This looks like Unity IL2CPP unimplemented feature.\r\n\r\n\u003e  there is no technical blocker to us implementing this for IL2CPP, it is certainly possible. At the moment we don\u0027t have any plans to do so, but that could change.\r\n\r\n\u003e if there is library code like this which makes use of this feature, then we may need to implement it, so that users can user this library code.\r\n\r\nPreparing to close this issue since it seems like something to be resolved by unity. \r\n@bdovaz based on the above conversation, this issue make sense to be transferred to Unity. @xoofx and @joshpeterson is there a link to where to file this for unity?\r\n\r\n",
                                           "updatedAt":  "2021-06-01T18:56:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjM3ODg4Mw==",
                                           "createdAt":  "2021-06-01T19:11:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBtC3nw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bdovaz",
                                                                               "createdAt":  "2021-06-01T19:13:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "bdovaz",
                                                                               "createdAt":  "2021-06-01T19:13:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2021-06-01T19:35:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2021-06-02T05:19:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "joshpeterson",
                                           "body":  "\u003e is there a link to where to file this for unity?\r\n\r\nWe don\u0027t have a public link for this for Unity, but we do have it tracked internally. It is actively being implemented now. I can respond here when I know if/when it will land in a Unity release.",
                                           "updatedAt":  "2021-06-01T19:11:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40nBot",
                                           "createdAt":  "2021-07-19T15:32:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBzD66A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "bdovaz",
                                                                               "createdAt":  "2021-07-19T15:51:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "eerhardt",
                                                                               "createdAt":  "2021-07-19T18:35:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "joshpeterson",
                                           "body":  "Hey, I\u0027m happy to report that general support for this will be available in Unity 2022.1.0a3 and later releases.",
                                           "updatedAt":  "2021-07-19T15:32:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40nFE3",
                                           "createdAt":  "2021-07-19T15:52:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bdovaz",
                                           "body":  "@joshpeterson First of all, thanks for the work.  A question that I have and that I hope that it is affirmative is if it is going to be backported to 2020 LTS which is where I originally have the problem.",
                                           "updatedAt":  "2021-07-19T15:52:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40nGPh",
                                           "createdAt":  "2021-07-19T15:58:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBzCdOw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "bdovaz",
                                                                               "createdAt":  "2021-07-19T15:59:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "joshpeterson",
                                           "body":  "\u003e @joshpeterson First of all, thanks for the work. A question that I have and that I hope that it is affirmative is if it is going to be backported to 2020 LTS which is where I originally have the problem.\r\n\r\nUnfortunately no, we don\u0027t plan to back pot this to the 2020 LTS release.",
                                           "updatedAt":  "2021-07-19T15:58:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40nHDe",
                                           "createdAt":  "2021-07-19T16:02:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bdovaz",
                                           "body":  "So sadly you have given me false hope because I opened the issue on 2020 LTS and when you said that you were solving it I assumed that it would be corrected in this version also... \r\n\r\nMy problem then will remain the same...",
                                           "updatedAt":  "2021-07-19T16:02:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43xU2v",
                                           "createdAt":  "2021-10-06T07:47:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bdovaz",
                                           "body":  "@joshpeterson is it fixed in 2021.2b? I want to be sure before I waste my time on this.\r\n\r\nI guess they have not changed the plans and will continue without the backport to 2020LTS.",
                                           "updatedAt":  "2021-10-06T07:47:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43ygc4",
                                           "createdAt":  "2021-10-06T11:06:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joshpeterson",
                                           "body":  "\u003e @joshpeterson is it fixed in 2021.2b? I want to be sure before I waste my time on this.\r\n\u003e \r\n\u003e I guess they have not changed the plans and will continue without the backport to 2020LTS.\r\n\r\nYes, this is fixed in the latest 2021.2 beta versions of Unity. We don\u0027t plan to back port it to 2020 LTS though.",
                                           "updatedAt":  "2021-10-06T11:06:11Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "Unity\u0027s IL2CPP does not support inspection of attribute constructor arguments at run time.",
        "labels":  [
                       "tracking-external-issue",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55525",
        "createdAt":  "2021-07-12T18:02:15Z",
        "number":  55525,
        "author":  "maryamariyan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-u5CA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vidommet",
                                            "createdAt":  "2021-12-13T19:54:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jomegatron",
                                            "createdAt":  "2025-02-03T22:47:48Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-06-02T21:49:36Z",
        "body":  "## Background and Motivation\r\n\r\nAs part of .NET 6 we updated the new `LoggerMessage.Define` overloads to use `LogDefineOptions`.  (PR [here](https://github.com/dotnet/runtime/pull/54581) and issue https://github.com/dotnet/runtime/issues/50913)\r\n\r\nLater in .NET 7, for supporting more arguments, we could add a new `Define\u003cT\u003e` API (where T is a delegate) that would take n arguments, log level, event ID, format string and `LogDefineOptions` to log message.\r\n\r\nTheoretically we need an analyzer that makes sure the arguments of the new Define\u003cT\u003e API are proper (ILogger etc.). The source generator would not be using the new Define\u003cT\u003e (where T is delegate) API. (not source gen friendly).\r\n\r\nWe welcome API proposals! We have a process to evaluate the value and shape of new API. There is an overview of our process . This template will help us gather the information we need to start the review process.\r\nFirst, please describe the purpose and value of the new API here.\r\n\r\n\r\n## Proposed API\r\n\r\nSomething like:\r\n```diff\r\npublic static partial class LoggerMessage\r\n{\r\n+    public static void Define\u003cT\u003e(Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, string formatString, Microsoft.Extensions.Logging.LogOptions options) where T : delegate {​ throw null; }​\r\n}\r\n```\r\n\r\n`T` would be a delegate but an analyzer would need to make sure it takes ILogger, Exception, etc. `System.Action\u003cMicrosoft.Extensions.Logging.ILogger, T1, T2, ..., Tn, System.Exception?\u003e`\r\n \r\n## TODO\r\n\r\n- [ ] Go through the [Framework Design Guidelines](https://github.com/dotnet/runtime/blob/main/docs/coding-guidelines/framework-design-guidelines-digest.md) and [API Review Process](https://github.com/dotnet/runtime/blob/main/docs/project/api-review-process.md) to further investigate sample usages and investigate alternative designs and risks.\r\n\r\n\r\ncc: @davidfowl @eerhardt ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOf8tWBA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3ODQ4MTA5NA==",
                                           "createdAt":  "2021-07-12T18:02:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nAs part of .NET 6 we updated the new `LoggerMessage.Define` overloads to use `LogDefineOptions`.  (PR [here](https://github.com/dotnet/runtime/pull/54581) and issue [here](https://github.com/dotnet/runtime/issues/52276))\r\n\r\nLater in .NET 7, for supporting more arguments, we could add a new `Define\u003cT\u003e` API (where T is a delegate) that would take n arguments, log level, event ID, format string and `LogDefineOptions` to log message.\r\n\r\nTheoretically we need an analyzer that makes sure the arguments of the new Define\u003cT\u003e API are proper (ILogger etc.). The source generator would not be using the new Define\u003cT\u003e (where T is delegate) API. (not source gen friendly).\r\n\r\nWe welcome API proposals! We have a process to evaluate the value and shape of new API. There is an overview of our process . This template will help us gather the information we need to start the review process.\r\nFirst, please describe the purpose and value of the new API here.\r\n\r\n\r\n## Proposed API\r\n\r\nSomething like:\r\n```diff\r\npublic static partial class LoggerMessage\r\n{\r\n+    public static void Define\u003cT\u003e(Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, string formatString, Microsoft.Extensions.Logging.LogOptions options) where T : delegate {​ throw null; }​\r\n}\r\n```\r\n\r\n`T` would be a delegate but an analyzer would need to make sure it takes ILogger, Exception, etc. `System.Action\u003cMicrosoft.Extensions.Logging.ILogger, T1, T2, ..., Tn, System.Exception?\u003e`\r\n \r\n## TODO\r\n\r\n- [ ] Go through the [Framework Design Guidelines](https://github.com/dotnet/runtime/blob/main/docs/coding-guidelines/framework-design-guidelines-digest.md) and [API Review Process](https://github.com/dotnet/runtime/blob/main/docs/project/api-review-process.md) to further investigate sample usages and investigate alternative designs and risks.\r\n\r\n\r\ncc: @davidfowl @eerhardt \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emaryamariyan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-12T18:02:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_xAYw",
                                           "createdAt":  "2024-06-01T19:10:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abatishchev",
                                           "body":  "@tarekgh any update on this, please?",
                                           "updatedAt":  "2024-06-01T19:10:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_y1YE",
                                           "createdAt":  "2024-06-02T21:49:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "We couldn\u0027t get into this yet because we are occupied with other high-priority tasks.",
                                           "updatedAt":  "2024-06-02T21:49:35Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Add support for logging with more than 6 arguments at runtime",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59322",
        "createdAt":  "2021-09-19T20:48:15Z",
        "number":  59322,
        "author":  "verdie-g",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBwYzA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "petarpetrovt",
                                            "createdAt":  "2021-09-22T15:07:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ashmind",
                                            "createdAt":  "2021-09-27T10:57:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2021-10-30T21:36:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YegorStepanov",
                                            "createdAt":  "2021-11-04T15:40:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2021-11-23T18:36:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lonix1",
                                            "createdAt":  "2022-06-06T01:17:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PodyNoo",
                                            "createdAt":  "2023-12-21T20:29:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AoshiW",
                                            "createdAt":  "2025-04-26T21:23:05Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2025-04-12T03:18:29Z",
        "body":  "### Background and motivation\n\nLog collectors like [Datadog requires the logs to be written on a file](https://docs.datadoghq.com/logs/log_collection/csharp/?tab=serilog) preferably in JSON. In .NET 5, a [JSON formatter is available](https://docs.microsoft.com/en-us/dotnet/core/extensions/console-log-formatter#json) but no file logger provider exist in Microsoft.Extensions.Logging. So a third-party library like Serilog should be used.\r\n```xml\r\n\u003cPackageReference Include=\"Serilog\" /\u003e\r\n\u003cPackageReference Include=\"Serilog.Extensions.Hosting\" /\u003e \u003c!-- dependency injection --\u003e\r\n\u003cPackageReference Include=\"Serilog.Extensions.Logging\" /\u003e \u003c!-- provider for Microsoft.Extensions.Logging --\u003e\r\n\u003cPackageReference Include=\"Serilog.Settings.Configuration\" /\u003e \u003c!-- configure with Microsoft.Extensions.Configuration --\u003e\r\n\u003cPackageReference Include=\"Serilog.Sinks.Console\" /\u003e \u003c!-- usually needed for development build --\u003e\r\n\u003cPackageReference Include=\"Serilog.Sinks.File\" /\u003e \u003c!-- file provider --\u003e\r\n```\r\nUsually it\u0027s that number of extra nugets to add to your project. That feels heavy just to log to a common target that a file is. \n\n### API Proposal\n\n```C#\r\nnamespace Microsoft.Extensions.Logging.File\r\n{\r\n    public class FileLoggerProvider : ILoggerProvider\r\n    {    \r\n        public FileLoggerProvider(IOptionsMonitor\u003cFileLoggerOptions\u003e options) { /* ... */ }\r\n        public ILogger CreateLogger(string name) { /* ... */ }\r\n    }\r\n\r\n    public class FileLoggerOptions\r\n    {\r\n        /// \u003csummary\u003eThe file to write the logs to.\u003c/summary\u003e\r\n        public string Path { get; set; }\r\n    }\r\n}\r\n```\r\n\r\nThe only option proposed is the path but this should be discussed. Usual options by other third-party libraries are:\r\n1. Rolling policies. On linux it can be done using [logrotate (8)](https://man7.org/linux/man-pages/man8/logrotate.8.html). Not sure on other platform.\r\n2. Background write. To me it sounds like an implementation detail that shouldn\u0027t be exposed.\r\n3. Write buffering.\r\n\r\nNot sure if it makes sense but the options could be the same as the [azure file logger](https://docs.microsoft.com/en-us/dotnet/core/extensions/logging-providers#azure-app-service).\r\n\r\nThis API proposal doesn\u0027t cover formatters for this new provider.\n\n### API Usage\n\nWhen initializing your program with Microsoft.Extensions.Hosting:\r\n```C#\r\nstatic IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n    Host.CreateDefaultBuilder(args)\r\n        .ConfigureLogging(logging =\u003e\r\n        {\r\n            logging.AddFile(\"/var/log/my.log\");\r\n        });\r\n```     \r\n\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpsx54Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42_MSP",
                                           "createdAt":  "2021-09-19T20:48:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nLog collectors like [Datadog requires the logs to be written on a file](https://docs.datadoghq.com/logs/log_collection/csharp/?tab=serilog) preferably in JSON. In .NET 5, a [JSON formatter is available](https://docs.microsoft.com/en-us/dotnet/core/extensions/console-log-formatter#json) but no file logger provider exist in Microsoft.Extensions.Logging. So a third-party library like Serilog should be used.\r\n```xml\r\n\u003cPackageReference Include=\"Serilog\" /\u003e\r\n\u003cPackageReference Include=\"Serilog.Extensions.Hosting\" /\u003e \u003c!-- dependency injection --\u003e\r\n\u003cPackageReference Include=\"Serilog.Extensions.Logging\" /\u003e \u003c!-- provider for Microsoft.Extensions.Logging --\u003e\r\n\u003cPackageReference Include=\"Serilog.Settings.Configuration\" /\u003e \u003c!-- configure with Microsoft.Extensions.Configuration --\u003e\r\n\u003cPackageReference Include=\"Serilog.Sinks.Console\" /\u003e \u003c!-- usually needed for development build --\u003e\r\n\u003cPackageReference Include=\"Serilog.Sinks.File\" /\u003e \u003c!-- file provider --\u003e\r\n```\r\nUsually it\u0027s that number of extra nugets to add to your project. That feels heavy just to log to a common target that a file is. \n\n### API Proposal\n\n```C#\r\nnamespace Microsoft.Extensions.Logging.File\r\n{\r\n    public class FileLoggerProvider : ILoggerProvider\r\n    {    \r\n        public FileLoggerProvider(IOptionsMonitor\u003cFileLoggerOptions\u003e options) { /* ... */ }\r\n        public ILogger CreateLogger(string name) { /* ... */ }\r\n    }\r\n\r\n    public class FileLoggerOptions\r\n    {\r\n        /// \u003csummary\u003eThe file to write the logs to.\u003c/summary\u003e\r\n        public string Path { get; set; }\r\n    }\r\n}\r\n```\r\n\r\nThe only option proposed is the path but this should be discussed. Usual options by other third-party libraries are:\r\n1. Rolling policies. On linux it can be done using [logrotate (8)](https://man7.org/linux/man-pages/man8/logrotate.8.html). Not sure on other platform.\r\n2. Background write. To me it sounds like an implementation detail that shouldn\u0027t be exposed.\r\n3. Write buffering.\r\n\r\nNot sure if it makes sense but the options could be the same as the [azure file logger](https://docs.microsoft.com/en-us/dotnet/core/extensions/logging-providers#azure-app-service).\r\n\r\nThis API proposal doesn\u0027t cover formatters for this new provider.\n\n### API Usage\n\nWhen initializing your program with Microsoft.Extensions.Hosting:\r\n```C#\r\nstatic IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n    Host.CreateDefaultBuilder(args)\r\n        .ConfigureLogging(logging =\u003e\r\n        {\r\n            logging.AddFile(\"/var/log/my.log\");\r\n        });\r\n```     \r\n\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003everdie-g\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-19T20:48:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mn0it",
                                           "createdAt":  "2025-04-11T00:02:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shravan2x",
                                           "body":  "@ericstj Hi, it seems you\u0027re the area owner for this issue. The last update was in 2022. Is this something that\u0027s still planned? It would be a great addition avoiding the need for third party deps in many cases.",
                                           "updatedAt":  "2025-04-11T00:02:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mwEO_",
                                           "createdAt":  "2025-04-11T17:38:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Right now this issue is marked as future, so that means we keep it around, but haven\u0027t committed to implementing anything yet.  It\u0027s not planned.  \n@tarekgh and @samsp-msft @brennanconroy @eerhardt \nAny thoughts on a raw file logger?   Looks like we have a few https://github.com/search?q=org%3Adotnet+%2FFile.*+%3A+%5B%5E+%5D*LoggerProvider%2F+language%3AC%23\u0026type=code\u0026l=C%23\n\nASP.NET exposes https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.azureappservices.fileloggerprovider\nOrleans exposes https://learn.microsoft.com/en-us/dotnet/api/orleans.logging.fileloggerprovider\n",
                                           "updatedAt":  "2025-04-11T17:38:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mwH2d",
                                           "createdAt":  "2025-04-11T17:46:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Honestly, I’m not seeing strong demand for this feature right now. I’d suggest we wait and see if more interest comes up — if it does, we can prioritize it and move it up the roadmap.",
                                           "updatedAt":  "2025-04-11T17:46:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mzHnh",
                                           "createdAt":  "2025-04-12T03:18:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I have an in-house ILoggerProvider for files in production use but it has accrued some features that I don\u0027t believe would ever be added to a FileLoggerProvider in .NET Runtime.  So if a Microsoft.Extensions.Logging.File package were added, I think I wouldn\u0027t be able to use it; but I\u0027d probably document the differences.",
                                           "updatedAt":  "2025-04-12T03:18:28Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[API Proposal]: FileLoggingProvider",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60534",
        "createdAt":  "2021-10-18T05:43:22Z",
        "number":  60534,
        "author":  "WernerMairl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODGeNeg==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "gioce90",
                                            "createdAt":  "2025-07-10T10:01:28Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-10T10:14:46Z",
        "body":  "### Description\n\nMay be I\u0027m doing something wrong, so any help is welcome....\r\n\r\nI have up and running a asp net core app (5.0.11) with Microsoft.Extensions.Logging in place \r\n(a really small default configuration).\r\n\r\nThe issue occurs only on my Azure AppService Alpine (Linux!) instance!\r\n\r\nI like to change logfilter by category for debugging and tracing....\r\nI have category hierarchies like \"A.B.C.D\"\r\nI like to filter for parts of the hierarchs like \"A.B\" or \"A.B.C\"\r\n\r\n- I\u0027m able to change loglevel behavior via appsettings,json without problems for \"A.B\" on Linux and Windows\r\n- I\u0027m able to change loglevel behavior via Environment variables in Visual Studio (Windows) without problems for \"A.B\"\r\n- I\u0027m able to change loglevel behavior via Environment variable on Linux for Category \"A\" (without dot)\r\n\r\nI\u0027m NOT able to change loglevel behavior via Environmnet Variable on Linux for Category \"A.B\" (DOT part of the hierarchy!\r\n\r\nI know that Linux has different behavior in Environment variables\r\n=\u003e \":\" translated into double-underscore =\u003e works!\r\n=\u003e \".\" translated into single-underscore =\u003e seems to have NO impact to the LogFilter engine...\r\n\r\nI\u0027m using IConfigurationRoot.DebugView to print out my logging configuration.\r\nand it looks in the following way:\r\n\r\n![image](https://user-images.githubusercontent.com/10084630/137673358-74f82392-c1e4-40bd-96c0-56f453033beb.png)\r\n\r\n(same behavior for Console and ApplicationInsights)\r\n\r\nfor me it looks like the \"_\" must be re-translated somewhere into \".\" before it goes into the [LoggerRuleSelector](https://github.com/dotnet/runtime/blob/v5.0.3/src/libraries/Microsoft.Extensions.Logging/src/LoggerRuleSelector.cs)\r\n\r\nMay be this is a known bug (i remember a few not solvable issues in core 2.0 and 3) \r\n\r\nregards\r\nWerner\r\n\n\n### Reproduction Steps\n\n- asp net core app with logging in place (console logging should be enough)\r\n  - EnvironmentLoggerProvider should be included (using default logger builder)\r\n- set logging default to \"Warning\" or \"Information\" via appsettings (not other settings needed)\r\n- try to set LogFilter to Trace for a categoryName that CONTAINS \".\" ON LINUX (Alpine asp net core 5 runtime container) VIA ENVIRONMENT Variable\r\n\r\n\r\n \n\n### Expected behavior\n\nLogFilter should be working\n\n### Actual behavior\n\nLogFilter Ignored\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nasp-net-core 5 runtime alpine container hosted as Azure App Service\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtjI40Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44WWYr",
                                           "createdAt":  "2021-10-18T05:43:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-10-18T05:43:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44WWli",
                                           "createdAt":  "2021-10-18T05:45:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WernerMairl",
                                           "body":  "label: area-Extensions-Logging\r\nlabel: area-Extension-Configurations\r\n\r\nsorry may be i have created a duplicate for this:\r\nhttps://github.com/dotnet/runtime/issues/35989\r\nbut we should find a solution or at least a better documentation....\r\n\r\n\r\n",
                                           "updatedAt":  "2021-10-18T09:15:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ZT-T",
                                           "createdAt":  "2021-10-18T20:58:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Tagging @maryamariyan since the bot didn\u0027t.",
                                           "updatedAt":  "2021-10-18T20:58:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45NTT_",
                                           "createdAt":  "2021-11-03T18:03:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEaEb-w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "gioce90",
                                                                               "createdAt":  "2025-07-10T10:19:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "\u003e for me it looks like the \"_\" must be re-translated somewhere into \".\" before it goes into the LoggerRuleSelector\r\n\r\nIs it `_` or double underscore `__`?\r\n\r\nWould be good if you could please share a repro sample to help try the different cases you shared here.",
                                           "updatedAt":  "2021-11-03T18:03:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lpgqV",
                                           "createdAt":  "2023-09-04T14:39:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEaEb_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "gioce90",
                                                                               "createdAt":  "2025-07-10T10:19:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pavel-agarkov",
                                           "body":  "Hi, we cannot provide log levels via Azure AppService -\u003e Configuration -\u003e Application settings\r\nsince as stated in the documentation \r\n\u003e App setting names can\u0027t contain periods (.). If an app setting contains a period, the period is replaced with an underscore in the container.\r\n\r\nhttps://learn.microsoft.com/en-us/azure/app-service/configure-common?tabs=portal\r\n\r\nFor example according to the documentation\r\nhttps://learn.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-7.0\r\nwe need to provide the following environment variable: Logging__Console__LogLevel__Microsoft.Hosting.Lifetime\r\nbut dots are replaced with underscores so logging level is not applied.\r\n\r\nAre there any workarounds for this issue?",
                                           "updatedAt":  "2023-09-04T14:39:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mZegB",
                                           "createdAt":  "2023-09-13T16:29:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@pavel-agarkov can you try the workaround mentioned in the comment https://github.com/dotnet/runtime/issues/87130#issuecomment-1583859511",
                                           "updatedAt":  "2023-09-13T16:29:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5maEhc",
                                           "createdAt":  "2023-09-13T18:22:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavel-agarkov",
                                           "body":  "@tarekgh yes, we did something similar to that already. thank you.",
                                           "updatedAt":  "2023-09-13T18:22:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc62MjjR",
                                           "createdAt":  "2025-07-10T10:13:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gioce90",
                                           "body":  "We’re experiencing the same issue.\nRecently, we added FusionCache to our web app hosted on an Azure App Service (Linux).\n\nWhen we configure logging directly in `appsettings.json`, everything works as expected:\n\n```json\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Trace\",\n      \"Microsoft\": \"Warning\",\n      \"System\": \"Warning\"\n    },\n    \"ApplicationInsights\": {\n      \"LogLevel\": {\n        \"Default\": \"Trace\",\n        \"Microsoft\": \"Warning\",\n        \"System\": \"Warning\",\n       \n        \"ZiggyCreatures.Caching.Fusion.FusionCache\": \"Warning\"\n      }\n    }\n  },\n```\n\nThat\u0027s okay. \nHowever, before adding the \"ZiggyCreatures.Caching.Fusion.FusionCache\": \"Warning\" line, we tried to reduce the log verbosity via the Azure Portal, using Configuration \u003e Application settings (environment variables).\n\nWe attempted several combinations (using `.`, `_` and `__`), but none of them worked.\n\n\u003e Logging__ApplicationInsights__LogLevel__ZiggyCreatures.Caching.Fusion\n\u003e Logging__ApplicationInsights__LogLevel__ZiggyCreatures_Caching_Fusion\n\u003e Logging__ApplicationInsights__LogLevel__ZiggyCreatures__Caching__Fusion\n\u003e Logging__ApplicationInsights__LogLevel__ZiggyCreatures.Caching.Fusion.FusionCache\n\u003e Logging__ApplicationInsights__LogLevel__ZiggyCreatures_Caching_Fusion_FusionCache\n\u003e Logging__ApplicationInsights__LogLevel__ZiggyCreatures__Caching__Fusion__FusionCache\n\nThen I suspected that the issue might be related to the dot (`.`) in the category name. So we tried:\n\n\u003e Logging__ApplicationInsights__LogLevel__ZiggyCreatures\n\n**This one actually worked**, and reduced the log level for FusionCache.\n\nAs a final fix, we\u0027re configuring the full logger category inside `appsettings.json`.  \nHowever, the behavior we observed when using environment variables in the Azure Portal is quite subtle and could easily lead to confusion or misconfiguration. \n",
                                           "updatedAt":  "2025-07-10T10:14:46Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "LogLevel Filter by Category may be not working on Linux (AppServices) when dots in CategoryName are replaced by underscore",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63165",
        "createdAt":  "2021-12-28T12:05:49Z",
        "number":  63165,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-11T23:26:44Z",
        "body":  "### Description\n\nWhen logging with Microsoft.Extensions.Logging, arrays (or other enumerables) are recognized and emitted properly when they\u0027re simple parameters directly referenced by placeholders in the message. However, when the placeholder refers to a value tuple containing an array, ToString is called on the array, yielding the wrong representation.\r\n\r\nSerilog properly handles this scenario.\n\n### Reproduction Steps\n\n```c#\r\nvar loggerFactory = LoggerFactory.Create(builder =\u003e\r\n{\r\n    builder.AddSimpleConsole();\r\n    builder.AddProvider(new SerilogLoggerProvider());\r\n});\r\n\r\n// Shows 1, 2, 3 - OK\r\nlogger.LogInformation(\"Simple array: {Array}\", new[] { 1, 2, 3 });\r\n// Shows (System.Int32[], foo)\r\nlogger.LogInformation(\"Array in tuple: {Tuple}\", (Array: new[] { 1, 2, 3 }, SomethingELse: \"foo\"));\r\n```\n\n### Expected behavior\n\nSomething like the following:\r\n\r\n```\r\nSimple array: 1, 2, 3\r\nArray in tuple: ((1, 2, 3), foo)\r\n```\r\n\r\nSerilog outputs:\r\n\r\n```\r\nSimple array: [1, 2, 3]\r\nArray in tuple: [[1, 2, 3], \"foo\"]\r\n```\n\n### Actual behavior\n\nToString is called on the array:\r\n\r\n```\r\nSimple array: 1, 2, 3\r\nArray in tuple: (System.Int32[], foo)\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 6.0 on Ubuntu Impish\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOO7o8Ng==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc47ujw2",
                                           "createdAt":  "2021-12-28T12:05:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen logging with Microsoft.Extensions.Logging, arrays (or other enumerables) are recognized and emitted properly when they\u0027re simple parameters directly referenced by placeholders in the message. However, when the placeholder refers to a value tuple containing an array, ToString is called on the array, yielding the wrong representation.\r\n\r\nSerilog properly handles this scenario.\n\n### Reproduction Steps\n\n```c#\r\nvar loggerFactory = LoggerFactory.Create(builder =\u003e\r\n{\r\n    builder.AddSimpleConsole();\r\n    builder.AddProvider(new SerilogLoggerProvider());\r\n});\r\n\r\n// Shows 1, 2, 3 - OK\r\nlogger.LogInformation(\"Simple array: {Array}\", new[] { 1, 2, 3 });\r\n// Shows (System.Int32[], foo)\r\nlogger.LogInformation(\"Array in tuple: {Tuple}\", (Array: new[] { 1, 2, 3 }, SomethingELse: \"foo\"));\r\n```\n\n### Expected behavior\n\nSomething like the following:\r\n\r\n```\r\nSimple array: 1, 2, 3\r\nArray in tuple: ((1, 2, 3), foo)\r\n```\r\n\r\nSerilog outputs:\r\n\r\n```\r\nSimple array: [1, 2, 3]\r\nArray in tuple: [[1, 2, 3], \"foo\"]\r\n```\n\n### Actual behavior\n\nToString is called on the array:\r\n\r\n```\r\nSimple array: 1, 2, 3\r\nArray in tuple: (System.Int32[], foo)\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 6.0 on Ubuntu Impish\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eroji\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-28T12:05:54Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Logging properly handles arrays, but not within tuples",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66064",
        "createdAt":  "2022-03-02T05:28:05Z",
        "number":  66064,
        "author":  "RyanThomas73",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-03-17T03:43:59Z",
        "body":  "### Description\r\n\r\nThe static `LogMessage.DefineScope` methods create various `LogValues` struct types that end up being boxed to an object when passed to the `IExternalScopeProvider`. \r\n\r\nIt may be worth considering updating these `DefineScope` methods to use `LogValues` class types instead and eliminate any boxing/unboxing concerns. \r\n\r\nThere are tradeoffs for either option. Since these methods exist explicitly for high performance logging scenarios I thought I would suggest the alternative for consideration.\r\n\r\n#### Background Information\r\n\r\nThe `Microsoft.Extensions.Logging.Abstractions` library provides the static `LoggerMessage.DefineScope` and `LoggerMessage.Define` methods for high performance logging scenarios. Internally the Define and DefineScope methods share the use of various `LogValues` generic type overloads which are all defined as `struct`.\r\nhttps://github.com/dotnet/runtime/blob/1ad054025d7aa1becfe165917fd91b3201b45cdc/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/LoggerMessage.cs#L25\r\n\r\nFor the `LogMessage.Define` static methods the use of a struct is ideal. The underlying `ILogger.Log` method into which the log values are passed is a generic method and excepts a corresponding formatter function which is also generic.\r\n\r\nFor the `LogMessage.DefineScope` static methods, however, the use of the same struct types is not necessarily ideal.\r\n\r\nThe reason for this in scope scenarios is that the log values are ultimately passed into and consumed out of the `IExternalScopeProvider.Push` and `IExternalScopeProvider.ForEachScope` methods which take object parameters forcing the `LogValues` struct to be boxed.\r\nhttps://github.com/dotnet/runtime/blob/1ad054025d7aa1becfe165917fd91b3201b45cdc/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/IExternalScopeProvider.cs#L27\r\n\r\n### Data\r\n\r\nhttps://gist.github.com/RyanThomas73/47eb04d76727e5b6b25c826a2d8415b5\r\n\r\nThe above gist contains two micro benchmark classs for the dotnet/performance micro benchmark project I created. It provides an initial comparison of the existing `DefineScope` performance using struct against a cloned copy of the `DefineScope` methods using a class type.\r\n\r\nThe below example runs of the micro benchmarks are in no way statistically significant but they do suggest:\r\n1) The LogValues struct types provide better performance in some limited cases where boxing would not happen: If CaptureScopes is set to false or if the registered logging providers do not support external scopes and do not box internally in the logger.BeginScope call.\r\n2) The LogValues class types provide better performance when external scopes are supported and being captured.\r\n\r\n\r\n\r\nExample run of the provided comparison micro benchmarks:\r\n```\r\n// * Summary *\r\n\r\nBenchmarkDotNet=v0.13.1.1603-nightly, OS=Windows 10.0.22000\r\nAMD Ryzen 9 5950X, 1 CPU, 32 logical and 16 physical cores\r\n.NET SDK=6.0.102\r\n  [Host]     : .NET 6.0.2 (6.0.222.6406), X64 RyuJIT\r\n  Job-CHHHPG : .NET 6.0.2 (6.0.222.6406), X64 RyuJIT\r\n\r\nPowerPlanMode=00000000-0000-0000-0000-000000000000  Arguments=/p:DebugType=portable,-bl:benchmarkdotnet.binlog  IterationTime=250.0000 ms\r\nMaxIterationCount=20  MinIterationCount=15  WarmupCount=1\r\n\r\n|                           Method | HasISupportLoggingScopeLogger | CaptureScopes |      Mean |     Error |    StdDev |    Median |       Min |       Max | Ratio | RatioSD |  Gen 0 | Allocated |\r\n|--------------------------------- |------------------------------ |-------------- |----------:|----------:|----------:|----------:|----------:|----------:|------:|--------:|-------:|----------:|\r\n|                      FilteredOut |                         False |         False |  5.090 ns | 0.0087 ns | 0.0073 ns |  5.091 ns |  5.077 ns |  5.102 ns |  1.00 |    0.00 |      - |         - |\r\n|  DefineScope_Struct_NoArguments1 |                         False |         False | 35.384 ns | 0.0820 ns | 0.0767 ns | 35.370 ns | 35.270 ns | 35.509 ns |  6.95 |    0.02 |      - |         - |\r\n|   DefineScope_Class_NoArguments1 |                         False |         False | 36.080 ns | 0.0711 ns | 0.0665 ns | 36.080 ns | 35.957 ns | 36.181 ns |  7.09 |    0.02 |      - |         - |\r\n| DefineScope_Struct_TwoArguments1 |                         False |         False | 37.066 ns | 0.1945 ns | 0.1819 ns | 37.011 ns | 36.849 ns | 37.384 ns |  7.27 |    0.03 |      - |         - |\r\n|  DefineScope_Class_TwoArguments1 |                         False |         False | 38.605 ns | 0.3180 ns | 0.2975 ns | 38.766 ns | 38.081 ns | 38.947 ns |  7.58 |    0.06 | 0.0018 |      32 B |\r\n| DefineScope_Struct_SixArguments1 |                         False |         False | 39.295 ns | 0.0476 ns | 0.0397 ns | 39.297 ns | 39.230 ns | 39.375 ns |  7.72 |    0.01 |      - |         - |\r\n|  DefineScope_Class_SixArguments1 |                         False |         False | 42.467 ns | 0.3085 ns | 0.2886 ns | 42.591 ns | 41.956 ns | 42.800 ns |  8.34 |    0.06 | 0.0042 |      72 B |\r\n|                                  |                               |               |           |           |           |           |           |           |       |         |        |           |\r\n|                      FilteredOut |                         False |          True |  4.872 ns | 0.0094 ns | 0.0079 ns |  4.872 ns |  4.861 ns |  4.886 ns |  1.00 |    0.00 |      - |         - |\r\n|  DefineScope_Struct_NoArguments1 |                         False |          True | 39.297 ns | 0.0765 ns | 0.0715 ns | 39.271 ns | 39.199 ns | 39.429 ns |  8.06 |    0.02 |      - |         - |\r\n|   DefineScope_Class_NoArguments1 |                         False |          True | 40.041 ns | 0.0677 ns | 0.0633 ns | 40.026 ns | 39.951 ns | 40.153 ns |  8.22 |    0.02 |      - |         - |\r\n| DefineScope_Struct_TwoArguments1 |                         False |          True | 39.601 ns | 0.0697 ns | 0.0652 ns | 39.576 ns | 39.531 ns | 39.740 ns |  8.13 |    0.02 |      - |         - |\r\n|  DefineScope_Class_TwoArguments1 |                         False |          True | 43.234 ns | 0.0955 ns | 0.0893 ns | 43.222 ns | 43.110 ns | 43.367 ns |  8.88 |    0.02 | 0.0018 |      32 B |\r\n| DefineScope_Struct_SixArguments1 |                         False |          True | 44.973 ns | 0.0941 ns | 0.0880 ns | 44.958 ns | 44.850 ns | 45.157 ns |  9.23 |    0.02 |      - |         - |\r\n|  DefineScope_Class_SixArguments1 |                         False |          True | 47.166 ns | 0.1821 ns | 0.1521 ns | 47.162 ns | 46.939 ns | 47.488 ns |  9.68 |    0.03 | 0.0041 |      72 B |\r\n|                                  |                               |               |           |           |           |           |           |           |       |         |        |           |\r\n|                      FilteredOut |                          True |         False |  4.673 ns | 0.0131 ns | 0.0123 ns |  4.671 ns |  4.657 ns |  4.696 ns |  1.00 |    0.00 |      - |         - |\r\n|  DefineScope_Struct_NoArguments1 |                          True |         False | 35.445 ns | 0.0404 ns | 0.0378 ns | 35.453 ns | 35.384 ns | 35.495 ns |  7.58 |    0.02 |      - |         - |\r\n|   DefineScope_Class_NoArguments1 |                          True |         False | 35.658 ns | 0.0642 ns | 0.0601 ns | 35.663 ns | 35.583 ns | 35.749 ns |  7.63 |    0.02 |      - |         - |\r\n| DefineScope_Struct_TwoArguments1 |                          True |         False | 35.971 ns | 0.1235 ns | 0.1155 ns | 35.978 ns | 35.802 ns | 36.215 ns |  7.70 |    0.03 |      - |         - |\r\n|  DefineScope_Class_TwoArguments1 |                          True |         False | 38.298 ns | 0.2411 ns | 0.2255 ns | 38.219 ns | 38.061 ns | 38.791 ns |  8.19 |    0.05 | 0.0018 |      32 B |\r\n| DefineScope_Struct_SixArguments1 |                          True |         False | 39.749 ns | 0.0545 ns | 0.0510 ns | 39.727 ns | 39.674 ns | 39.843 ns |  8.51 |    0.02 |      - |         - |\r\n|  DefineScope_Class_SixArguments1 |                          True |         False | 42.899 ns | 0.1240 ns | 0.1100 ns | 42.905 ns | 42.741 ns | 43.147 ns |  9.18 |    0.03 | 0.0043 |      72 B |\r\n|                                  |                               |               |           |           |           |           |           |           |       |         |        |           |\r\n|                      FilteredOut |                          True |          True |  4.875 ns | 0.0104 ns | 0.0092 ns |  4.878 ns |  4.862 ns |  4.892 ns |  1.00 |    0.00 |      - |         - |\r\n|  DefineScope_Struct_NoArguments1 |                          True |          True | 69.586 ns | 0.7783 ns | 0.6499 ns | 69.544 ns | 68.573 ns | 71.190 ns | 14.27 |    0.14 | 0.0085 |     144 B |\r\n|   DefineScope_Class_NoArguments1 |                          True |          True | 68.976 ns | 0.4205 ns | 0.3933 ns | 68.855 ns | 68.600 ns | 69.672 ns | 14.14 |    0.08 | 0.0070 |     120 B |\r\n| DefineScope_Struct_TwoArguments1 |                          True |          True | 71.159 ns | 0.6529 ns | 0.5452 ns | 71.030 ns | 70.389 ns | 72.293 ns | 14.60 |    0.12 | 0.0090 |     152 B |\r\n|  DefineScope_Class_TwoArguments1 |                          True |          True | 70.232 ns | 0.8905 ns | 0.7894 ns | 69.947 ns | 69.317 ns | 71.892 ns | 14.41 |    0.15 | 0.0090 |     152 B |\r\n| DefineScope_Struct_SixArguments1 |                          True |          True | 80.485 ns | 0.3614 ns | 0.3380 ns | 80.372 ns | 80.091 ns | 81.165 ns | 16.51 |    0.07 | 0.0112 |     192 B |\r\n|  DefineScope_Class_SixArguments1 |                          True |          True | 75.747 ns | 0.3304 ns | 0.2929 ns | 75.847 ns | 75.076 ns | 76.080 ns | 15.54 |    0.08 | 0.0113 |     192 B |\r\n```\r\n\r\n```\r\n// * Summary *\r\n\r\nBenchmarkDotNet=v0.13.1.1603-nightly, OS=Windows 10.0.22000\r\nAMD Ryzen 9 5950X, 1 CPU, 32 logical and 16 physical cores\r\n.NET SDK=6.0.102\r\n  [Host]     : .NET 6.0.2 (6.0.222.6406), X64 RyuJIT\r\n  Job-JBUHMA : .NET 6.0.2 (6.0.222.6406), X64 RyuJIT\r\n\r\nPowerPlanMode=00000000-0000-0000-0000-000000000000  Arguments=/p:DebugType=portable,-bl:benchmarkdotnet.binlog  IterationTime=250.0000 ms\r\nMaxIterationCount=20  MinIterationCount=15  WarmupCount=1\r\n\r\n|                           Method | HasISupportLoggingScopeLogger | CaptureScopes |        Mean |     Error |   StdDev |      Median |         Min |         Max |  Ratio | RatioSD |  Gen 0 | Allocated |\r\n|--------------------------------- |------------------------------ |-------------- |------------:|----------:|---------:|------------:|------------:|------------:|-------:|--------:|-------:|----------:|\r\n|                      FilteredOut |                         False |         False |    10.73 ns |  0.023 ns | 0.021 ns |    10.72 ns |    10.70 ns |    10.76 ns |   1.00 |    0.00 |      - |         - |\r\n|  DefineScope_Struct_NoArguments2 |                         False |         False |    61.97 ns |  0.145 ns | 0.129 ns |    61.92 ns |    61.80 ns |    62.23 ns |   5.78 |    0.02 |      - |         - |\r\n|   DefineScope_Class_NoArguments2 |                         False |         False |    64.25 ns |  0.107 ns | 0.095 ns |    64.25 ns |    64.10 ns |    64.39 ns |   5.99 |    0.02 |      - |         - |\r\n| DefineScope_Struct_TwoArguments2 |                         False |         False |    62.50 ns |  0.129 ns | 0.120 ns |    62.47 ns |    62.32 ns |    62.72 ns |   5.83 |    0.02 |      - |         - |\r\n|  DefineScope_Class_TwoArguments2 |                         False |         False |    68.06 ns |  0.262 ns | 0.219 ns |    67.99 ns |    67.81 ns |    68.53 ns |   6.34 |    0.03 | 0.0017 |      32 B |\r\n| DefineScope_Struct_SixArguments2 |                         False |         False |    66.20 ns |  0.078 ns | 0.061 ns |    66.21 ns |    66.09 ns |    66.32 ns |   6.17 |    0.01 |      - |         - |\r\n|  DefineScope_Class_SixArguments2 |                         False |         False |    70.65 ns |  0.915 ns | 0.856 ns |    70.84 ns |    69.12 ns |    71.82 ns |   6.59 |    0.08 | 0.0040 |      72 B |\r\n|                                  |                               |               |             |           |          |             |             |             |        |         |        |           |\r\n|                      FilteredOut |                         False |          True |    10.71 ns |  0.019 ns | 0.017 ns |    10.70 ns |    10.68 ns |    10.74 ns |   1.00 |    0.00 |      - |         - |\r\n|  DefineScope_Struct_NoArguments2 |                         False |          True |   108.07 ns |  1.314 ns | 1.229 ns |   108.62 ns |   106.16 ns |   109.74 ns |  10.09 |    0.11 | 0.0052 |      88 B |\r\n|   DefineScope_Class_NoArguments2 |                         False |          True |   109.07 ns |  0.695 ns | 0.616 ns |   109.14 ns |   107.78 ns |   109.90 ns |  10.19 |    0.06 | 0.0049 |      88 B |\r\n| DefineScope_Struct_TwoArguments2 |                         False |          True |   106.77 ns |  0.318 ns | 0.266 ns |   106.69 ns |   106.42 ns |   107.48 ns |   9.97 |    0.02 | 0.0052 |      88 B |\r\n|  DefineScope_Class_TwoArguments2 |                         False |          True |   109.95 ns |  0.646 ns | 0.604 ns |   109.90 ns |   109.18 ns |   110.83 ns |  10.27 |    0.06 | 0.0072 |     120 B |\r\n| DefineScope_Struct_SixArguments2 |                         False |          True |   114.02 ns |  0.424 ns | 0.331 ns |   113.98 ns |   113.62 ns |   114.88 ns |  10.65 |    0.03 | 0.0051 |      88 B |\r\n|  DefineScope_Class_SixArguments2 |                         False |          True |   114.18 ns |  1.875 ns | 1.754 ns |   113.36 ns |   111.60 ns |   117.17 ns |  10.66 |    0.16 | 0.0092 |     160 B |\r\n|                                  |                               |               |             |           |          |             |             |             |        |         |        |           |\r\n|                      FilteredOut |                          True |         False |    10.72 ns |  0.016 ns | 0.015 ns |    10.72 ns |    10.70 ns |    10.75 ns |   1.00 |    0.00 |      - |         - |\r\n|  DefineScope_Struct_NoArguments2 |                          True |         False |   133.82 ns |  0.261 ns | 0.244 ns |   133.83 ns |   133.40 ns |   134.29 ns |  12.48 |    0.02 |      - |         - |\r\n|   DefineScope_Class_NoArguments2 |                          True |         False |   134.69 ns |  0.247 ns | 0.219 ns |   134.64 ns |   134.38 ns |   135.14 ns |  12.56 |    0.03 |      - |         - |\r\n| DefineScope_Struct_TwoArguments2 |                          True |         False |   151.32 ns |  1.387 ns | 1.158 ns |   150.67 ns |   149.81 ns |   152.86 ns |  14.11 |    0.10 |      - |         - |\r\n|  DefineScope_Class_TwoArguments2 |                          True |         False |   140.81 ns |  0.299 ns | 0.265 ns |   140.75 ns |   140.48 ns |   141.46 ns |  13.13 |    0.03 | 0.0017 |      32 B |\r\n| DefineScope_Struct_SixArguments2 |                          True |         False |   140.98 ns |  0.629 ns | 0.588 ns |   141.09 ns |   138.94 ns |   141.44 ns |  13.15 |    0.06 |      - |         - |\r\n|  DefineScope_Class_SixArguments2 |                          True |         False |   143.58 ns |  0.214 ns | 0.200 ns |   143.54 ns |   143.26 ns |   144.02 ns |  13.39 |    0.02 | 0.0041 |      72 B |\r\n|                                  |                               |               |             |           |          |             |             |             |        |         |        |           |\r\n|                      FilteredOut |                          True |          True |    10.72 ns |  0.020 ns | 0.018 ns |    10.71 ns |    10.69 ns |    10.75 ns |   1.00 |    0.00 |      - |         - |\r\n|  DefineScope_Struct_NoArguments2 |                          True |          True |   237.78 ns |  0.576 ns | 0.511 ns |   237.68 ns |   237.13 ns |   239.02 ns |  22.28 |    0.06 | 0.0084 |     144 B |\r\n|   DefineScope_Class_NoArguments2 |                          True |          True |   226.34 ns |  0.690 ns | 0.646 ns |   226.37 ns |   225.47 ns |   227.63 ns |  21.22 |    0.08 | 0.0065 |     120 B |\r\n| DefineScope_Struct_TwoArguments2 |                          True |          True |   611.64 ns |  1.458 ns | 1.293 ns |   611.17 ns |   609.99 ns |   614.41 ns |  57.07 |    0.15 | 0.0392 |     664 B |\r\n|  DefineScope_Class_TwoArguments2 |                          True |          True |   587.55 ns |  2.664 ns | 2.225 ns |   587.33 ns |   583.86 ns |   592.12 ns |  54.82 |    0.18 | 0.0396 |     664 B |\r\n| DefineScope_Struct_SixArguments2 |                          True |          True | 1,456.90 ns | 10.086 ns | 9.435 ns | 1,452.95 ns | 1,445.61 ns | 1,475.21 ns | 135.87 |    0.94 | 0.0934 |   1,632 B |\r\n|  DefineScope_Class_SixArguments2 |                          True |          True | 1,412.77 ns |  3.669 ns | 3.432 ns | 1,412.67 ns | 1,407.64 ns | 1,419.48 ns | 131.83 |    0.29 | 0.0964 |   1,632 B |\r\n```\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPzgL1g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-9VNV",
                                           "createdAt":  "2022-03-02T05:28:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-03-02T05:28:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-9amd",
                                           "createdAt":  "2022-03-02T05:43:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nThe static `LogMessage.DefineScope` methods create various `LogValues` struct types that end up being boxed to an object when passed to the `IExternalScopeProvider`. \r\n\r\nIt may be worth considering updating these `DefineScope` methods to use `LogValues` class types instead and eliminate any boxing/unboxing concerns. \r\n\r\nThere are tradeoffs for either option. Since these methods exist explicitly for high performance logging scenarios I thought I would suggest the alternative for consideration.\r\n\r\n#### Background Information\r\n\r\nThe `Microsoft.Extensions.Logging.Abstractions` library provides the static `LoggerMessage.DefineScope` and `LoggerMessage.Define` methods for high performance logging scenarios. Internally the Define and DefineScope methods share the use of various `LogValues` generic type overloads which are all defined as `struct`.\r\nhttps://github.com/dotnet/runtime/blob/1ad054025d7aa1becfe165917fd91b3201b45cdc/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/LoggerMessage.cs#L25\r\n\r\nFor the `LogMessage.Define` static methods the use of a struct is ideal. The underlying `ILogger.Log` method into which the log values are passed is a generic method and excepts a corresponding formatter function which is also generic.\r\n\r\nFor the `LogMessage.DefineScope` static methods, however, the use of the same struct types is not necessarily ideal.\r\n\r\nThe reason for this in scope scenarios is that the log values are ultimately passed into and consumed out of the `IExternalScopeProvider.Push` and `IExternalScopeProvider.ForEachScope` methods which take object parameters forcing the `LogValues` struct to be boxed.\r\nhttps://github.com/dotnet/runtime/blob/1ad054025d7aa1becfe165917fd91b3201b45cdc/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/IExternalScopeProvider.cs#L27\r\n\r\n### Data\r\n\r\nhttps://gist.github.com/RyanThomas73/47eb04d76727e5b6b25c826a2d8415b5\r\n\r\nThe above gist contains two micro benchmark classs for the dotnet/performance micro benchmark project I created. It provides an initial comparison of the existing `DefineScope` performance using struct against a cloned copy of the `DefineScope` methods using a class type.\r\n\r\nThe below example runs of the micro benchmarks are in no way statistically significant but they do suggest:\r\n1) The LogValues struct types provide better performance when the logging providers do not support external scopes and/or the filter options are not set to capture scopes\r\n2) The LogValues class types provide better performance when external scopes are supported and being captured.\r\n\r\n\r\n\r\nExample run of the provided comparison micro benchmarks:\r\n```\r\n// * Summary *\r\n\r\nBenchmarkDotNet=v0.13.1.1603-nightly, OS=Windows 10.0.22000\r\nAMD Ryzen 9 5950X, 1 CPU, 32 logical and 16 physical cores\r\n.NET SDK=6.0.102\r\n  [Host]     : .NET 6.0.2 (6.0.222.6406), X64 RyuJIT\r\n  Job-CHHHPG : .NET 6.0.2 (6.0.222.6406), X64 RyuJIT\r\n\r\nPowerPlanMode=00000000-0000-0000-0000-000000000000  Arguments=/p:DebugType=portable,-bl:benchmarkdotnet.binlog  IterationTime=250.0000 ms\r\nMaxIterationCount=20  MinIterationCount=15  WarmupCount=1\r\n\r\n|                           Method | HasISupportLoggingScopeLogger | CaptureScopes |      Mean |     Error |    StdDev |    Median |       Min |       Max | Ratio | RatioSD |  Gen 0 | Allocated |\r\n|--------------------------------- |------------------------------ |-------------- |----------:|----------:|----------:|----------:|----------:|----------:|------:|--------:|-------:|----------:|\r\n|                      FilteredOut |                         False |         False |  5.090 ns | 0.0087 ns | 0.0073 ns |  5.091 ns |  5.077 ns |  5.102 ns |  1.00 |    0.00 |      - |         - |\r\n|  DefineScope_Struct_NoArguments1 |                         False |         False | 35.384 ns | 0.0820 ns | 0.0767 ns | 35.370 ns | 35.270 ns | 35.509 ns |  6.95 |    0.02 |      - |         - |\r\n|   DefineScope_Class_NoArguments1 |                         False |         False | 36.080 ns | 0.0711 ns | 0.0665 ns | 36.080 ns | 35.957 ns | 36.181 ns |  7.09 |    0.02 |      - |         - |\r\n| DefineScope_Struct_TwoArguments1 |                         False |         False | 37.066 ns | 0.1945 ns | 0.1819 ns | 37.011 ns | 36.849 ns | 37.384 ns |  7.27 |    0.03 |      - |         - |\r\n|  DefineScope_Class_TwoArguments1 |                         False |         False | 38.605 ns | 0.3180 ns | 0.2975 ns | 38.766 ns | 38.081 ns | 38.947 ns |  7.58 |    0.06 | 0.0018 |      32 B |\r\n| DefineScope_Struct_SixArguments1 |                         False |         False | 39.295 ns | 0.0476 ns | 0.0397 ns | 39.297 ns | 39.230 ns | 39.375 ns |  7.72 |    0.01 |      - |         - |\r\n|  DefineScope_Class_SixArguments1 |                         False |         False | 42.467 ns | 0.3085 ns | 0.2886 ns | 42.591 ns | 41.956 ns | 42.800 ns |  8.34 |    0.06 | 0.0042 |      72 B |\r\n|                                  |                               |               |           |           |           |           |           |           |       |         |        |           |\r\n|                      FilteredOut |                         False |          True |  4.872 ns | 0.0094 ns | 0.0079 ns |  4.872 ns |  4.861 ns |  4.886 ns |  1.00 |    0.00 |      - |         - |\r\n|  DefineScope_Struct_NoArguments1 |                         False |          True | 39.297 ns | 0.0765 ns | 0.0715 ns | 39.271 ns | 39.199 ns | 39.429 ns |  8.06 |    0.02 |      - |         - |\r\n|   DefineScope_Class_NoArguments1 |                         False |          True | 40.041 ns | 0.0677 ns | 0.0633 ns | 40.026 ns | 39.951 ns | 40.153 ns |  8.22 |    0.02 |      - |         - |\r\n| DefineScope_Struct_TwoArguments1 |                         False |          True | 39.601 ns | 0.0697 ns | 0.0652 ns | 39.576 ns | 39.531 ns | 39.740 ns |  8.13 |    0.02 |      - |         - |\r\n|  DefineScope_Class_TwoArguments1 |                         False |          True | 43.234 ns | 0.0955 ns | 0.0893 ns | 43.222 ns | 43.110 ns | 43.367 ns |  8.88 |    0.02 | 0.0018 |      32 B |\r\n| DefineScope_Struct_SixArguments1 |                         False |          True | 44.973 ns | 0.0941 ns | 0.0880 ns | 44.958 ns | 44.850 ns | 45.157 ns |  9.23 |    0.02 |      - |         - |\r\n|  DefineScope_Class_SixArguments1 |                         False |          True | 47.166 ns | 0.1821 ns | 0.1521 ns | 47.162 ns | 46.939 ns | 47.488 ns |  9.68 |    0.03 | 0.0041 |      72 B |\r\n|                                  |                               |               |           |           |           |           |           |           |       |         |        |           |\r\n|                      FilteredOut |                          True |         False |  4.673 ns | 0.0131 ns | 0.0123 ns |  4.671 ns |  4.657 ns |  4.696 ns |  1.00 |    0.00 |      - |         - |\r\n|  DefineScope_Struct_NoArguments1 |                          True |         False | 35.445 ns | 0.0404 ns | 0.0378 ns | 35.453 ns | 35.384 ns | 35.495 ns |  7.58 |    0.02 |      - |         - |\r\n|   DefineScope_Class_NoArguments1 |                          True |         False | 35.658 ns | 0.0642 ns | 0.0601 ns | 35.663 ns | 35.583 ns | 35.749 ns |  7.63 |    0.02 |      - |         - |\r\n| DefineScope_Struct_TwoArguments1 |                          True |         False | 35.971 ns | 0.1235 ns | 0.1155 ns | 35.978 ns | 35.802 ns | 36.215 ns |  7.70 |    0.03 |      - |         - |\r\n|  DefineScope_Class_TwoArguments1 |                          True |         False | 38.298 ns | 0.2411 ns | 0.2255 ns | 38.219 ns | 38.061 ns | 38.791 ns |  8.19 |    0.05 | 0.0018 |      32 B |\r\n| DefineScope_Struct_SixArguments1 |                          True |         False | 39.749 ns | 0.0545 ns | 0.0510 ns | 39.727 ns | 39.674 ns | 39.843 ns |  8.51 |    0.02 |      - |         - |\r\n|  DefineScope_Class_SixArguments1 |                          True |         False | 42.899 ns | 0.1240 ns | 0.1100 ns | 42.905 ns | 42.741 ns | 43.147 ns |  9.18 |    0.03 | 0.0043 |      72 B |\r\n|                                  |                               |               |           |           |           |           |           |           |       |         |        |           |\r\n|                      FilteredOut |                          True |          True |  4.875 ns | 0.0104 ns | 0.0092 ns |  4.878 ns |  4.862 ns |  4.892 ns |  1.00 |    0.00 |      - |         - |\r\n|  DefineScope_Struct_NoArguments1 |                          True |          True | 69.586 ns | 0.7783 ns | 0.6499 ns | 69.544 ns | 68.573 ns | 71.190 ns | 14.27 |    0.14 | 0.0085 |     144 B |\r\n|   DefineScope_Class_NoArguments1 |                          True |          True | 68.976 ns | 0.4205 ns | 0.3933 ns | 68.855 ns | 68.600 ns | 69.672 ns | 14.14 |    0.08 | 0.0070 |     120 B |\r\n| DefineScope_Struct_TwoArguments1 |                          True |          True | 71.159 ns | 0.6529 ns | 0.5452 ns | 71.030 ns | 70.389 ns | 72.293 ns | 14.60 |    0.12 | 0.0090 |     152 B |\r\n|  DefineScope_Class_TwoArguments1 |                          True |          True | 70.232 ns | 0.8905 ns | 0.7894 ns | 69.947 ns | 69.317 ns | 71.892 ns | 14.41 |    0.15 | 0.0090 |     152 B |\r\n| DefineScope_Struct_SixArguments1 |                          True |          True | 80.485 ns | 0.3614 ns | 0.3380 ns | 80.372 ns | 80.091 ns | 81.165 ns | 16.51 |    0.07 | 0.0112 |     192 B |\r\n|  DefineScope_Class_SixArguments1 |                          True |          True | 75.747 ns | 0.3304 ns | 0.2929 ns | 75.847 ns | 75.076 ns | 76.080 ns | 15.54 |    0.08 | 0.0113 |     192 B |\r\n```\r\n\r\n```\r\n// * Summary *\r\n\r\nBenchmarkDotNet=v0.13.1.1603-nightly, OS=Windows 10.0.22000\r\nAMD Ryzen 9 5950X, 1 CPU, 32 logical and 16 physical cores\r\n.NET SDK=6.0.102\r\n  [Host]     : .NET 6.0.2 (6.0.222.6406), X64 RyuJIT\r\n  Job-JBUHMA : .NET 6.0.2 (6.0.222.6406), X64 RyuJIT\r\n\r\nPowerPlanMode=00000000-0000-0000-0000-000000000000  Arguments=/p:DebugType=portable,-bl:benchmarkdotnet.binlog  IterationTime=250.0000 ms\r\nMaxIterationCount=20  MinIterationCount=15  WarmupCount=1\r\n\r\n|                           Method | HasISupportLoggingScopeLogger | CaptureScopes |        Mean |     Error |   StdDev |      Median |         Min |         Max |  Ratio | RatioSD |  Gen 0 | Allocated |\r\n|--------------------------------- |------------------------------ |-------------- |------------:|----------:|---------:|------------:|------------:|------------:|-------:|--------:|-------:|----------:|\r\n|                      FilteredOut |                         False |         False |    10.73 ns |  0.023 ns | 0.021 ns |    10.72 ns |    10.70 ns |    10.76 ns |   1.00 |    0.00 |      - |         - |\r\n|  DefineScope_Struct_NoArguments2 |                         False |         False |    61.97 ns |  0.145 ns | 0.129 ns |    61.92 ns |    61.80 ns |    62.23 ns |   5.78 |    0.02 |      - |         - |\r\n|   DefineScope_Class_NoArguments2 |                         False |         False |    64.25 ns |  0.107 ns | 0.095 ns |    64.25 ns |    64.10 ns |    64.39 ns |   5.99 |    0.02 |      - |         - |\r\n| DefineScope_Struct_TwoArguments2 |                         False |         False |    62.50 ns |  0.129 ns | 0.120 ns |    62.47 ns |    62.32 ns |    62.72 ns |   5.83 |    0.02 |      - |         - |\r\n|  DefineScope_Class_TwoArguments2 |                         False |         False |    68.06 ns |  0.262 ns | 0.219 ns |    67.99 ns |    67.81 ns |    68.53 ns |   6.34 |    0.03 | 0.0017 |      32 B |\r\n| DefineScope_Struct_SixArguments2 |                         False |         False |    66.20 ns |  0.078 ns | 0.061 ns |    66.21 ns |    66.09 ns |    66.32 ns |   6.17 |    0.01 |      - |         - |\r\n|  DefineScope_Class_SixArguments2 |                         False |         False |    70.65 ns |  0.915 ns | 0.856 ns |    70.84 ns |    69.12 ns |    71.82 ns |   6.59 |    0.08 | 0.0040 |      72 B |\r\n|                                  |                               |               |             |           |          |             |             |             |        |         |        |           |\r\n|                      FilteredOut |                         False |          True |    10.71 ns |  0.019 ns | 0.017 ns |    10.70 ns |    10.68 ns |    10.74 ns |   1.00 |    0.00 |      - |         - |\r\n|  DefineScope_Struct_NoArguments2 |                         False |          True |   108.07 ns |  1.314 ns | 1.229 ns |   108.62 ns |   106.16 ns |   109.74 ns |  10.09 |    0.11 | 0.0052 |      88 B |\r\n|   DefineScope_Class_NoArguments2 |                         False |          True |   109.07 ns |  0.695 ns | 0.616 ns |   109.14 ns |   107.78 ns |   109.90 ns |  10.19 |    0.06 | 0.0049 |      88 B |\r\n| DefineScope_Struct_TwoArguments2 |                         False |          True |   106.77 ns |  0.318 ns | 0.266 ns |   106.69 ns |   106.42 ns |   107.48 ns |   9.97 |    0.02 | 0.0052 |      88 B |\r\n|  DefineScope_Class_TwoArguments2 |                         False |          True |   109.95 ns |  0.646 ns | 0.604 ns |   109.90 ns |   109.18 ns |   110.83 ns |  10.27 |    0.06 | 0.0072 |     120 B |\r\n| DefineScope_Struct_SixArguments2 |                         False |          True |   114.02 ns |  0.424 ns | 0.331 ns |   113.98 ns |   113.62 ns |   114.88 ns |  10.65 |    0.03 | 0.0051 |      88 B |\r\n|  DefineScope_Class_SixArguments2 |                         False |          True |   114.18 ns |  1.875 ns | 1.754 ns |   113.36 ns |   111.60 ns |   117.17 ns |  10.66 |    0.16 | 0.0092 |     160 B |\r\n|                                  |                               |               |             |           |          |             |             |             |        |         |        |           |\r\n|                      FilteredOut |                          True |         False |    10.72 ns |  0.016 ns | 0.015 ns |    10.72 ns |    10.70 ns |    10.75 ns |   1.00 |    0.00 |      - |         - |\r\n|  DefineScope_Struct_NoArguments2 |                          True |         False |   133.82 ns |  0.261 ns | 0.244 ns |   133.83 ns |   133.40 ns |   134.29 ns |  12.48 |    0.02 |      - |         - |\r\n|   DefineScope_Class_NoArguments2 |                          True |         False |   134.69 ns |  0.247 ns | 0.219 ns |   134.64 ns |   134.38 ns |   135.14 ns |  12.56 |    0.03 |      - |         - |\r\n| DefineScope_Struct_TwoArguments2 |                          True |         False |   151.32 ns |  1.387 ns | 1.158 ns |   150.67 ns |   149.81 ns |   152.86 ns |  14.11 |    0.10 |      - |         - |\r\n|  DefineScope_Class_TwoArguments2 |                          True |         False |   140.81 ns |  0.299 ns | 0.265 ns |   140.75 ns |   140.48 ns |   141.46 ns |  13.13 |    0.03 | 0.0017 |      32 B |\r\n| DefineScope_Struct_SixArguments2 |                          True |         False |   140.98 ns |  0.629 ns | 0.588 ns |   141.09 ns |   138.94 ns |   141.44 ns |  13.15 |    0.06 |      - |         - |\r\n|  DefineScope_Class_SixArguments2 |                          True |         False |   143.58 ns |  0.214 ns | 0.200 ns |   143.54 ns |   143.26 ns |   144.02 ns |  13.39 |    0.02 | 0.0041 |      72 B |\r\n|                                  |                               |               |             |           |          |             |             |             |        |         |        |           |\r\n|                      FilteredOut |                          True |          True |    10.72 ns |  0.020 ns | 0.018 ns |    10.71 ns |    10.69 ns |    10.75 ns |   1.00 |    0.00 |      - |         - |\r\n|  DefineScope_Struct_NoArguments2 |                          True |          True |   237.78 ns |  0.576 ns | 0.511 ns |   237.68 ns |   237.13 ns |   239.02 ns |  22.28 |    0.06 | 0.0084 |     144 B |\r\n|   DefineScope_Class_NoArguments2 |                          True |          True |   226.34 ns |  0.690 ns | 0.646 ns |   226.37 ns |   225.47 ns |   227.63 ns |  21.22 |    0.08 | 0.0065 |     120 B |\r\n| DefineScope_Struct_TwoArguments2 |                          True |          True |   611.64 ns |  1.458 ns | 1.293 ns |   611.17 ns |   609.99 ns |   614.41 ns |  57.07 |    0.15 | 0.0392 |     664 B |\r\n|  DefineScope_Class_TwoArguments2 |                          True |          True |   587.55 ns |  2.664 ns | 2.225 ns |   587.33 ns |   583.86 ns |   592.12 ns |  54.82 |    0.18 | 0.0396 |     664 B |\r\n| DefineScope_Struct_SixArguments2 |                          True |          True | 1,456.90 ns | 10.086 ns | 9.435 ns | 1,452.95 ns | 1,445.61 ns | 1,475.21 ns | 135.87 |    0.94 | 0.0934 |   1,632 B |\r\n|  DefineScope_Class_SixArguments2 |                          True |          True | 1,412.77 ns |  3.669 ns | 3.432 ns | 1,412.67 ns | 1,407.64 ns | 1,419.48 ns | 131.83 |    0.29 | 0.0964 |   1,632 B |\r\n```\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eRyanThomas73\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tenet-performance`, `untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-02T05:43:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4--cRR",
                                           "createdAt":  "2022-03-02T08:27:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "If you added `[StructLayout(LayoutKind.Auto)]` to each `struct LogValues\u003c…\u003e`, would the number of allocated bytes then match what you achieve with `class LogValues\u003c…\u003e`?\n\nOops, I may have misread the table.",
                                           "updatedAt":  "2022-03-02T08:29:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_Akuq",
                                           "createdAt":  "2022-03-02T16:23:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RyanThomas73",
                                           "body":  "\u003e If you added `[StructLayout(LayoutKind.Auto)]` to each `struct LogValues\u003c…\u003e`, would the number of allocated bytes then match what you achieve with `class LogValues\u003c…\u003e`?\r\n\u003e \r\n\u003e Oops, I may have misread the table.\r\n\r\nYeah I think you did. = )\r\nI don\u0027t think heap allocations when using the `class LogValues\u003c..\u003e` vs boxing the struct is a concern here.\r\n\r\nThis is just a consideration for optimizing performance since the define methods are intended for use in hot code paths where the logging call will happen frequently.\r\n\r\nThe struct type for DefineScope has the advantage of not requiring an allocation IF none of the configured providers support external scopes or if CaptureScopes is set to false.\r\n\r\nThe class type for DefineScope has the advantage of not requiring boxing/unboxing instructions which could provide performance gains in hot code paths.\r\n\r\n\r\n",
                                           "updatedAt":  "2022-03-02T16:23:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_AnUG",
                                           "createdAt":  "2022-03-02T16:33:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "[TraceSourceLogger.BeginScope\\\u003cTState\\\u003e](https://github.com/dotnet/runtime/blob/839cdfb0ecca5e0be3dbccd926e7651ef50fdf10/src/libraries/Microsoft.Extensions.Logging.TraceSource/src/TraceSourceLogger.cs#L73-L76) does not support external scopes, and it boxes the state if a value type.",
                                           "updatedAt":  "2022-03-02T16:33:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_K2mk",
                                           "createdAt":  "2022-03-05T18:19:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RyanThomas73",
                                           "body":  "~@KalleOlaviNiemitalo Unless I mistaken the BeginScope method on that logger wouldn\u0027t be called in traditional uses because the provider doesn\u0027t support external scopes; the performance tradeoff of cases where external scopes aren\u0027t supported is still a valid counter argument to be considered.~\r\n\r\n\r\n**[tl;dr]**\r\n~The reason that TraceSourceLogger.BeginScope wouldn\u0027t normally be called is that the aggregate logger that comes out of LoggerFactory.Create only wraps the registered provider loggers for scopes if CaptureScopes is true and if the provider implements ISupportExternalScope.~\r\n\r\nhttps://github.com/dotnet/runtime/blob/839cdfb0ecca5e0be3dbccd926e7651ef50fdf10/src/libraries/Microsoft.Extensions.Logging/src/LoggerFactory.cs#L228\r\n\r\n~When the consumer calls `logger.BeginScope\u003cT\u003e(...)` on the aggregate logger instance it creates a new aggregate scope. It then iterates through the `ScopeLogger` instances that it is wrapping and calls `scopeLogger.BeginScope\u003cT\u003e(..)` on each scope logger that it\u0027s wrapping. The TraceSourceLogger wouldn\u0027t be included in the `ScopeLogger[]` because it doesn\u0027t support external scopes so the aggregate wouldn\u0027t call it\u0027s BeginScope method.~\r\n\r\nhttps://github.com/dotnet/runtime/blob/839cdfb0ecca5e0be3dbccd926e7651ef50fdf10/src/libraries/Microsoft.Extensions.Logging/src/Logger.cs#L114\r\n",
                                           "updatedAt":  "2022-03-05T20:10:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_K29b",
                                           "createdAt":  "2022-03-05T18:28:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Quite the opposite: the aggregate logger calls the BeginScope methods of the loggers that do _not_ support external scopes.",
                                           "updatedAt":  "2022-03-05T18:28:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_K6ZH",
                                           "createdAt":  "2022-03-05T20:13:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RyanThomas73",
                                           "body":  "You\u0027re quite right. I missed the negation on the `if (!loggerInformation.ExternalScope)` line. It would appear that the situations in which boxing does not happen would/could be even more limited than I originally surmised. \r\n\r\n",
                                           "updatedAt":  "2022-03-05T20:13:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_OAvW",
                                           "createdAt":  "2022-03-07T12:30:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Have you measured what portion of the time is spent in copying the LogValues structs to the stack when they are passed as arguments, as opposed to copying to the heap when boxing? Perhaps C# 7.2 `in` parameters could reduce that cost, but I don\u0027t know whether that can be implemented without breaking API compatibility with existing loggers or adding runtime checks. C# 8.0 default interface methods might do the trick but then you\u0027d lose compatibility with .NET Framework.",
                                           "updatedAt":  "2022-03-07T12:31:21Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "LoggerMessage DefineScope Boxing/Unboxing Performance",
        "labels":  [
                       "tenet-performance",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66072",
        "createdAt":  "2022-03-02T11:00:19Z",
        "number":  66072,
        "author":  "rmja",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBESXA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nick-beer",
                                            "createdAt":  "2025-04-10T13:39:38Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-04-10T16:11:24Z",
        "body":  "### Description\n\nI am seeing a huge number of `EventSourceLogger` instances when I compare memory dumps over time from my application:\r\n![image](https://user-images.githubusercontent.com/2112306/156345061-64777216-50e5-408a-a2d6-6c2a38ee1122.png)\r\n\r\nIt seems that [EventSourceLoggerProvider blindly creates new EventSourceLogger instances](https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/Microsoft.Extensions.Logging.EventSource/src/EventSourceLoggerProvider.cs#L36) and adds them to the linked list. This is different from for example the console logger, [which have instances in a dictionary keyed by the logger name](https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/Microsoft.Extensions.Logging.Console/src/ConsoleLoggerProvider.cs#L149-L156).\r\n\r\nWhat is the exact contract provided by `CreateLogger(name)`? Is it the provider internally that should guarantee that the same logger is returned for a given name (as the Console logger does), or is it the caller?\r\n\r\nOf cause, if it is up to the caller to cache by name, then this is a bug in Serilog.\n\n### Reproduction Steps\n\nCreate a simple console app with the following references:\r\n\r\n```\r\n\u003cPackageReference Include=\"Microsoft.Extensions.Hosting\" Version=\"6.0.1\" /\u003e\r\n\u003cPackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"6.0.0\" /\u003e\r\n\u003cPackageReference Include=\"Microsoft.Extensions.Logging.EventSource\" Version=\"6.0.0\" /\u003e\r\n\u003cPackageReference Include=\"Serilog.Extensions.Hosting\" Version=\"4.2.0\" /\u003e\r\n```\r\n\r\nAnd the following `Program.cs`:\r\n```C#\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\nusing Serilog;\r\n\r\nvar host = Host.CreateDefaultBuilder()\r\n    .ConfigureServices(services =\u003e services.AddLogging(builder =\u003e builder\r\n        .ClearProviders()\r\n        .AddEventSourceLogger()))\r\n    .UseSerilog((context, config) =\u003e\r\n    {\r\n    }, writeToProviders: true)\r\n    .Build();\r\nvar logger = host.Services.GetRequiredService\u003cILogger\u003cProgram\u003e\u003e();\r\n\r\nwhile (true)\r\n{\r\n    logger.LogInformation(\"Hello\");\r\n}\r\n```\r\n\r\nThe app will continue to allocate `EventSourceLogger` instances indefinitely.\n\n### Expected behavior\n\nThe `EventSourceProvider` should return `EventSourceLogger` instances keyed by name such that the linked list internally in the provider does not grow indefinitely.\n\n### Actual behavior\n\nNew `EventSourceLogger` instances are blindly created for every call to `CreateLogger(name)`, which are internally stored in the linked list.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpo7_hw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-_WRc",
                                           "createdAt":  "2022-03-02T11:00:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI am seeing a huge number of `EventSourceLogger` instances when I compare memory dumps over time from my application:\r\n![image](https://user-images.githubusercontent.com/2112306/156345061-64777216-50e5-408a-a2d6-6c2a38ee1122.png)\r\n\r\nIt seems that [EventSourceLoggerProvider blindly creates new EventSourceLogger instances](https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/Microsoft.Extensions.Logging.EventSource/src/EventSourceLoggerProvider.cs#L36) and adds them to the linked list. This is different from for example the console logger, [which have instances in a dictionary keyed by the logger name](https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/Microsoft.Extensions.Logging.Console/src/ConsoleLoggerProvider.cs#L149-L156).\r\n\r\nWhat is the exact contract provided by `CreateLogger(name)`? Is it the provider internally that should guarantee that the same logger is returned for a given name (as the Console logger does), or is it the caller?\r\n\r\nOf cause, if it is up to the caller to cache by name, then this is a bug in Serilog.\n\n### Reproduction Steps\n\nCreate a simple console app with the following references:\r\n\r\n```\r\n\u003cPackageReference Include=\"Microsoft.Extensions.Hosting\" Version=\"6.0.1\" /\u003e\r\n\u003cPackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"6.0.0\" /\u003e\r\n\u003cPackageReference Include=\"Microsoft.Extensions.Logging.EventSource\" Version=\"6.0.0\" /\u003e\r\n\u003cPackageReference Include=\"Serilog.Extensions.Hosting\" Version=\"4.2.0\" /\u003e\r\n```\r\n\r\nAnd the following `Program.cs`:\r\n```C#\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\nusing Serilog;\r\n\r\nvar host = Host.CreateDefaultBuilder()\r\n    .ConfigureServices(services =\u003e services.AddLogging(builder =\u003e builder\r\n        .ClearProviders()\r\n        .AddEventSourceLogger()))\r\n    .UseSerilog((context, config) =\u003e\r\n    {\r\n    }, writeToProviders: true)\r\n    .Build();\r\nvar logger = host.Services.GetRequiredService\u003cILogger\u003cProgram\u003e\u003e();\r\n\r\nwhile (true)\r\n{\r\n    logger.LogInformation(\"Hello\");\r\n}\r\n```\r\n\r\nThe app will continue to allocate `EventSourceLogger` instances indefinitely.\n\n### Expected behavior\n\nThe `EventSourceProvider` should return `EventSourceLogger` instances keyed by name such that the linked list internally in the provider does not grow indefinitely.\n\n### Actual behavior\n\nNew `EventSourceLogger` instances are blindly created for every call to `CreateLogger(name)`, which are internally stored in the linked list.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ermja\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-02T11:00:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_ATcI",
                                           "createdAt":  "2022-03-02T15:14:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@pranavkm - looks like you implemented this in https://github.com/aspnet/Logging/pull/448. Is there a specific reason you used a linked list here? Do you see any reason why we couldn\u0027t change the loggers to be cached like Console loggers are?",
                                           "updatedAt":  "2022-03-02T15:14:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_AYZe",
                                           "createdAt":  "2022-03-02T15:33:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pranavkm",
                                           "body":  "This was the original PR: https://github.com/aspnet/Logging/pull/424 all I did was fixup formatting to move it out of PR purgatory.\r\n\r\n@karolz-ms sent us the initial implementation, he’d be in a better position to answer the question.",
                                           "updatedAt":  "2022-03-02T15:33:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_AaMz",
                                           "createdAt":  "2022-03-02T15:41:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "I did find this comment on that PR, in case it helps someone investigate here:\r\n\r\nhttps://github.com/aspnet/Logging/pull/424/commits/e1a55b2b26e9ba116774f1c1329e551dc637d6fe#r64121502\r\n\r\n\u003e [Eilon](https://github.com/Eilon) [on May 20, 2016](https://github.com/aspnet/Logging/pull/424/commits/e1a55b2b26e9ba116774f1c1329e551dc637d6fe#r64121502)[](https://github.com/Eilon) Member\r\nThis code needs to be thread-safe. Multiple requests can be occurring simultaneously and the head of the linked list will be corrupted. in case of a race.\r\n\r\n\u003e [Eilon](https://github.com/Eilon) Eilon [on May 20, 2016](https://github.com/aspnet/Logging/pull/424/commits/e1a55b2b26e9ba116774f1c1329e551dc637d6fe#r64121539)[](https://github.com/karolz-ms) Member\r\nThough, ultimately, the real question is: what is special about this logger? I don\u0027t think any other loggers use this type of pattern.\r\n\r\n\u003e [karolz-ms](https://github.com/karolz-ms) karolz-ms [on May 22, 2016](https://github.com/aspnet/Logging/pull/424/commits/e1a55b2b26e9ba116774f1c1329e551dc637d6fe#r64159084) Author Contributor\r\nThis code is thread safe because the only caller (LoggingEventSource) acquires a lock on the only instance before calling into EventSourceLoggerProvider.\r\n\r\n\u003e The linked list is there because we need to respond to dynamic configuration change commands sent through EventSource/ETW infrastructure (it all starts at LoggingEventSource.OnEventCommand, which is also thread-safe BTW).\r\n\r\n\u003e Bottom line, we are bridging ILogger world with EventSource/ETW world. The contract for this bridge should follow ILogger patterns. This is why Vance and I followed your request of making the bridge \"off by default\". However the implementation and behavior of the bridge follows EventSource/ETW patterns. It is not realistic to expect that this logger implementation will look like any other logger, just pushing data into different place. I think this gives users the best of both worlds, as long as contracts \u0026 expectactions from both worlds are satisified",
                                           "updatedAt":  "2022-03-02T15:42:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_BinJ",
                                           "createdAt":  "2022-03-02T20:55:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Debugging the repro locally (thanks @rmja for the clear self-contained repro), it looks like a problem in Serilog, probably this line of code:\r\n\r\nhttps://github.com/serilog/serilog-extensions-logging/blob/e25ed7ddfd0c664bd3a7e9cdbeeec6f87ff12964/src/Serilog.Extensions.Logging/Extensions/Logging/LoggerProviderCollectionSink.cs#L60\r\n\r\nI set a break point on `CreateLogger` calls and every time it was hit with this callstack:\r\n\r\n```\r\n\u003e\tMicrosoft.Extensions.Logging.EventSource.dll!Microsoft.Extensions.Logging.EventSource.EventSourceLoggerProvider.CreateLogger(string categoryName) Line 36\tC#\r\n \tSerilog.Extensions.Logging.dll!Serilog.Extensions.Logging.LoggerProviderCollectionSink.Emit(Serilog.Events.LogEvent logEvent)\tUnknown\r\n \tSerilog.dll!Serilog.Core.Sinks.SafeAggregateSink.Emit(Serilog.Events.LogEvent logEvent)\tUnknown\r\n \tSerilog.dll!Serilog.Core.Logger.Dispatch(Serilog.Events.LogEvent logEvent)\tUnknown\r\n \tSerilog.dll!Serilog.Core.Logger.Serilog.Core.ILogEventSink.Emit(Serilog.Events.LogEvent logEvent)\tUnknown\r\n \tSerilog.dll!Serilog.Core.Logger.Dispatch(Serilog.Events.LogEvent logEvent)\tUnknown\r\n \tSerilog.dll!Serilog.Core.Logger.Serilog.Core.ILogEventSink.Emit(Serilog.Events.LogEvent logEvent)\tUnknown\r\n \tSerilog.dll!Serilog.Core.Logger.Dispatch(Serilog.Events.LogEvent logEvent)\tUnknown\r\n \tSerilog.dll!Serilog.Core.Logger.Write(Serilog.Events.LogEvent logEvent)\tUnknown\r\n \tSerilog.Extensions.Logging.dll!Serilog.Extensions.Logging.SerilogLogger.Write\u003cMicrosoft.Extensions.Logging.FormattedLogValues\u003e(Serilog.Events.LogEventLevel level, Microsoft.Extensions.Logging.EventId eventId, Microsoft.Extensions.Logging.FormattedLogValues state, System.Exception exception, System.Func\u003cMicrosoft.Extensions.Logging.FormattedLogValues, System.Exception, string\u003e formatter)\tUnknown\r\n \tSerilog.Extensions.Logging.dll!Serilog.Extensions.Logging.SerilogLogger.Log\u003cMicrosoft.Extensions.Logging.FormattedLogValues\u003e(Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, Microsoft.Extensions.Logging.FormattedLogValues state, System.Exception exception, System.Func\u003cMicrosoft.Extensions.Logging.FormattedLogValues, System.Exception, string\u003e formatter)\tUnknown\r\n \tMicrosoft.Extensions.Logging.Abstractions.dll!Microsoft.Extensions.Logging.Logger\u003cSystem.__Canon\u003e.Log\u003cMicrosoft.Extensions.Logging.FormattedLogValues\u003e(Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, Microsoft.Extensions.Logging.FormattedLogValues state, System.Exception exception, System.Func\u003cMicrosoft.Extensions.Logging.FormattedLogValues, System.Exception, string\u003e formatter) Line 48\tC#\r\n \tMicrosoft.Extensions.Logging.Abstractions.dll!Microsoft.Extensions.Logging.LoggerExtensions.Log(Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, System.Exception exception, string message, object[] args) Line 394\tC#\r\n \tMicrosoft.Extensions.Logging.Abstractions.dll!Microsoft.Extensions.Logging.LoggerExtensions.Log(Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.LogLevel logLevel, string message, object[] args) Line 349\tC#\r\n \tMicrosoft.Extensions.Logging.Abstractions.dll!Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger logger, string message, object[] args) Line 175\tC#\r\n \tConsoleApp49.dll!Program.\u003cMain\u003e$(string[] args) Line 18\tC#\r\n```\r\n\r\nI\u0027m not certain why `CreateLogger` needs to be called every time.\r\n\r\ncc @nblumhardt",
                                           "updatedAt":  "2022-03-02T20:55:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_B5t4",
                                           "createdAt":  "2022-03-02T22:36:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nblumhardt",
                                           "body":  "Thanks for the ping @eerhardt! We\u0027ve spotted this before - it seems like `EventSourceLoggerProvider`\u0027s behavior is questionable here, if it\u0027s going to cache loggers shouldn\u0027t it put some bounds on its internal cache size?\r\n\r\n`LoggerProviderCollectionSink` could do some caching itself, but that seems like it will duplicate the work already done in the other providers, like the console provider it was tested with. I\u0027m not against adding some caching there, but then won\u0027t every consumer end up paying the cost of the synchronization that `EventSourceLogger` should be doing itself?",
                                           "updatedAt":  "2022-03-02T22:36:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_B9lE",
                                           "createdAt":  "2022-03-02T23:03:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karolz-ms",
                                           "body":  "\u003e Thanks for the ping @eerhardt! We\u0027ve spotted this before - it seems like `EventSourceLoggerProvider`\u0027s behavior is questionable here, if it\u0027s going to cache loggers shouldn\u0027t it put some bounds on its internal cache size?\r\n\u003e \r\n\u003e `LoggerProviderCollectionSink` could do some caching itself, but that seems like it will duplicate the work already done in the other providers, like the console provider it was tested with. I\u0027m not against adding some caching there, but then won\u0027t every consumer end up paying the cost of the synchronization that `EventSourceLogger` should be doing itself?\r\n\r\nThat is the question though -- **should** `EventSourceLoggerProvider` be always returning the same logger instance, given `categoryName` (in the context of `CreateLogger` call)? [The API doc](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.iloggerfactory.createlogger) does not mention anything about it.\r\n\r\nThe way I see it, it is the *console provider* that is caching instances, not the `EventSourceLoggerProvider`. The `EventSourceLoggerProvider` is just doing the simplest thing--returning new instance every time `CreateLogger` is called, no caching, no reuse. \r\n\r\nAnd so it sounds that the Serilog `LoggerProviderCollectionSink` implementation is taking advantage of the console logger provider behavior, and is making an assumption that all providers will behave the same and tolerate `CreateLogger` call for every single log entry. So the question is: is this a reasonable expectation?",
                                           "updatedAt":  "2022-03-02T23:03:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_CAAl",
                                           "createdAt":  "2022-03-02T23:20:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nblumhardt",
                                           "body":  "Unless the returned value is intended to be disposed after use, or the provider interface has a corresponding `ReleaseLogger()` member, I think the usual assumption around `Create*()` factory methods is that if the caller lets the result become eligible for GC there won\u0027t be a leak.\r\n\r\nMy intuition, anyway - I\u0027m sure there are counterexamples already in the framework, but no obvious ones come to mind.",
                                           "updatedAt":  "2022-03-02T23:20:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_CGyk",
                                           "createdAt":  "2022-03-02T23:51:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCo4D7w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nblumhardt",
                                                                               "createdAt":  "2022-03-02T23:52:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rmja",
                                                                               "createdAt":  "2022-03-03T08:49:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eerhardt",
                                                                               "createdAt":  "2022-03-03T16:50:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2022-07-27T05:55:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2022-07-27T19:54:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "karolz-ms",
                                           "body":  "That is a good point. \r\n\r\nI will let the current owners make a decision how to proceed. Possible options include caching instances a\u0027la console provider, using weak references to track the logger instances, or make them `IDisposable` and require the creators to dispose of them when not necessary anymore (which would have a side effect of removing them from tracking).",
                                           "updatedAt":  "2022-03-02T23:51:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mjv-H",
                                           "createdAt":  "2025-04-10T16:11:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENumOg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nick-beer",
                                                                               "createdAt":  "2025-04-10T16:22:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jasonmreding",
                                           "body":  "Are there any updates on this issue? We just ran into this recently, and it was really surprising this sort of leak exists. If you do not think this is a bug with the `EventSourceLogger`, is there a recommended work around? \n\nI understand the argument that caching in the provider is an implementation detail and not part of the API contract. Not caching is not optimal from a memory allocation and GC perspective, but it is still functionally correct. However, the fact that it results in an infinitely growing linked list that can never be pruned is very unexpected to me. Can someone explain the purpose of that linked list? From my read of the code, it doesn\u0027t appear to serve any purpose, but I\u0027m certainly not the expert. \n\nIf the linked list is providing value, then I can understand reluctance around making a change. However, if it really serves no purpose, it is very frustrating that fixing this leak has not gotten more traction. For now, we will likely create our own provider to wrap this provider which does cache the logger and then apply that work around to all of our services that want to enable ETW logging. That isn\u0027t a lot of work, but the time lost finding and debugging the issue to begin with is really unfortunate.",
                                           "updatedAt":  "2025-04-10T16:11:23Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Possible memory leak in EventSource logger?",
        "labels":  [
                       "bug",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67577",
        "createdAt":  "2022-04-05T05:31:57Z",
        "number":  67577,
        "author":  "zuntio",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODRiPCA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "smairo",
                                            "createdAt":  "2022-04-05T05:33:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jvalkeejarvi",
                                            "createdAt":  "2022-04-05T06:03:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MPaappanen",
                                            "createdAt":  "2022-04-05T06:25:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "myhky",
                                            "createdAt":  "2022-04-05T07:00:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cyungmann",
                                            "createdAt":  "2022-05-03T14:52:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "brandonh-msft",
                                            "createdAt":  "2023-05-01T17:46:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bc3tech",
                                            "createdAt":  "2023-05-01T17:46:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StingyJack",
                                            "createdAt":  "2023-05-04T21:00:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "timritzer",
                                            "createdAt":  "2023-05-09T21:44:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "silkfire",
                                            "createdAt":  "2023-05-22T23:51:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TimWilde",
                                            "createdAt":  "2023-08-12T18:27:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "arkadeepsaha-ten",
                                            "createdAt":  "2023-08-18T10:19:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ZvonimirMatic",
                                            "createdAt":  "2023-09-14T07:21:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrearossiavanade",
                                            "createdAt":  "2023-10-13T12:42:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "achikhv",
                                            "createdAt":  "2023-11-02T12:42:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KRTone",
                                            "createdAt":  "2023-11-08T19:42:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "c4bhuf",
                                            "createdAt":  "2024-01-02T08:49:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "voroninp",
                                            "createdAt":  "2024-02-02T16:56:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "precisionconage",
                                            "createdAt":  "2024-03-08T01:49:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nowakpaw",
                                            "createdAt":  "2024-04-02T13:56:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cataggar",
                                            "createdAt":  "2024-05-23T13:37:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Smile4ever",
                                            "createdAt":  "2024-06-18T14:04:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alentor",
                                            "createdAt":  "2024-07-23T10:19:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alrz",
                                            "createdAt":  "2024-08-02T16:43:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-08-15T18:17:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Delsin-Yu",
                                            "createdAt":  "2024-08-26T14:22:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SicJG",
                                            "createdAt":  "2024-09-30T15:16:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ToBlattner",
                                            "createdAt":  "2024-10-18T13:09:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "1progicx",
                                            "createdAt":  "2024-11-15T08:20:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ojamte",
                                            "createdAt":  "2024-11-19T07:18:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cbrevik",
                                            "createdAt":  "2024-11-28T09:36:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gigi81",
                                            "createdAt":  "2024-12-04T19:36:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rfcdejong",
                                            "createdAt":  "2025-01-13T15:25:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CSharpFiasco",
                                            "createdAt":  "2025-03-10T14:58:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bdovaz",
                                            "createdAt":  "2025-06-11T10:26:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thomaslevesque",
                                            "createdAt":  "2025-06-11T11:24:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "poizan42",
                                            "createdAt":  "2025-07-08T13:12:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gorban",
                                            "createdAt":  "2025-07-18T15:27:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ffdh-mv",
                                            "createdAt":  "2025-08-12T19:25:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "parched",
                                            "createdAt":  "2025-09-18T08:47:28Z"
                                        }
                                    ],
                          "totalCount":  40
                      },
        "updatedAt":  "2025-09-18T09:12:14Z",
        "body":  "https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/FormattedLogValues.cs should be imho public.\r\n\r\nThere are use cases where I want to log and return or throw same string. Would be handy to do something like:\r\n```\r\nvar template = \"Encountered data {Data}!\";\r\n_logger.LogInformation(template, data);\r\nreturn new FormattedLogValues(template, data).ToString();\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcQaRuQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5A3elJ",
                                           "createdAt":  "2022-04-05T05:32:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/FormattedLogValues.cs should be imho public.\r\n\r\nThere are use cases where I want to log and return or throw same string. Would be handy to do something like:\r\n```\r\nvar template = \"Encountered data {Data}!\";\r\n_logger.LogInformation(template, data);\r\nreturn new FormattedLogValues(template, data).ToString();\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ezuntio\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-05T05:32:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A58GN",
                                           "createdAt":  "2022-04-05T16:02:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Why do you need `FormattedLogValues`?\r\n\r\nWould you please share more about the scenario in which you are have that would need the logged string to be returned?",
                                           "updatedAt":  "2022-04-06T20:25:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BABKg",
                                           "createdAt":  "2022-04-06T17:26:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` since it may be missing important information. Please refer to our [contribution guidelines](https://github.com/dotnet/runtime/blob/main/CONTRIBUTING.md#writing-a-good-bug-report) for tips on how to report issues effectively.",
                                           "updatedAt":  "2022-04-06T17:26:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BA2pu",
                                           "createdAt":  "2022-04-06T20:21:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Related closed PR https://github.com/dotnet/extensions/pull/2814#issue-544012245\r\n\r\nThis has been made internal before: https://github.com/dotnet/extensions/pull/513",
                                           "updatedAt":  "2022-04-06T20:23:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BHa_Y",
                                           "createdAt":  "2022-04-08T05:49:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zuntio",
                                           "body":  "For example in customer facing APIs it is usually handy to return human readable error. When customer contacts about problem encountered, the first thing they send is the error message but not any traceable guids. It makes triaging customer issues much faster.",
                                           "updatedAt":  "2022-04-08T05:49:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BZlFa",
                                           "createdAt":  "2022-04-12T21:13:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "@davidfowl @pakrym was there a strong reason to keep this internal in the PR https://github.com/dotnet/extensions/pull/513",
                                           "updatedAt":  "2022-04-12T21:13:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Elvuk",
                                           "createdAt":  "2022-06-09T06:59:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "There wasn\u0027t a strong reason to keep it public so we made it internal. There hasn\u0027t been many great explanations as to how it\u0027s being used.",
                                           "updatedAt":  "2022-06-09T06:59:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I3Zcq",
                                           "createdAt":  "2022-08-22T14:59:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODYKVag==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2024-02-25T20:35:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "SirSavio",
                                           "body":  "Here we see an example where make public make a difference\r\n[https://github.com/nsubstitute/NSubstitute/issues/384](https://github.com/nsubstitute/NSubstitute/issues/384)",
                                           "updatedAt":  "2022-08-22T15:00:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J4Ipj",
                                           "createdAt":  "2022-09-07T14:16:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODig4uA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "silkfire",
                                                                               "createdAt":  "2023-05-22T23:55:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "laurynas-b",
                                                                               "createdAt":  "2023-06-19T10:52:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "moo2u2",
                                                                               "createdAt":  "2024-05-21T01:57:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "magnusbakken",
                                           "body":  "I expect that some people want it to be public because they\u0027re trying to use it in unit test assertions, e.g. with Moq:\r\n\r\n``` csharp\r\n_loggerMock.Verify(\r\n    logger =\u003e logger.Log(\r\n        LogLevel.Error,\r\n        It.IsAny\u003cEventId\u003e(),\r\n        It.Is\u003cIt.IsAnyType\u003cobject\u003e\u003e(obj =\u003e ...), // This is where it would be useful to have access to the FormattedLogValues.\r\n        exception,\r\n        (Func\u003cIt.IsAnyType, Exception?, string\u003e)It.IsAny\u003cobject\u003e()),\r\n    Times.Once());\r\n```\r\n\r\nYou can call `ToString()` on the object to get the fully formatted string, but then you have to also construct the same formatted string in the test code. It would be nicer to be able to get the unformatted input string.\r\n\r\nI expect this is a common use case because until recently, I was one of those people. However, I\u0027ve now realized that a much better solution to this assertion problem is actually to use `LoggerMessage.Define()` and assign a unique `EventId` for each log message you want to assert on, as described in https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/loggermessage?view=aspnetcore-6.0. That way you don\u0027t have to worry about keeping the actual messages in sync between the production and test code, which typically involves exposing the message template strings as public consts.\r\n\r\nUsing LoggerMessage has other benefits as well. The only downside is that it requires a bit more boilerplate.",
                                           "updatedAt":  "2022-09-07T14:16:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J4PBO",
                                           "createdAt":  "2022-09-07T14:37:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e  The only downside is that it requires a bit more boilerplate.\r\n\r\nWe added a source generator to reduce/eliminate the boilerplate. See https://docs.microsoft.com/en-us/dotnet/core/extensions/logger-message-generator",
                                           "updatedAt":  "2022-09-07T14:37:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PSptq",
                                           "createdAt":  "2022-11-29T08:51:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bdovaz",
                                           "body":  "@eerhardt @davidfowl I have another use case and that is that I have my own LoggerProvider + Logger that I want to pass information to. Example:\r\n\r\n```csharp\r\npublic class MyCustomClass { }\r\n\r\npublic readonly struct CustomState {\r\n    public string Message { get; }\r\n    public MyCustomClass Data { get; }\r\n\r\n    public CustomState(string message, MyCustomClass data) {\r\n        Message = message;\r\n        Data = data;\r\n    }\r\n\r\n    public override string ToString() =\u003e Message;\r\n}\r\n\r\npublic static class ILoggerExtensions {\r\n    public static void LogCritical(this ILogger logger, string message, MyCustomClass data) {\r\n        logger.Log(LogLevel.Critical, null, new CustomState(message, data));\r\n    }\r\n\r\n    public static void LogCritical(this ILogger logger, Exception exception, string message, MyCustomClass data) {\r\n        logger.Log(LogLevel.Critical, exception, new CustomState(message, data));\r\n    }\r\n\r\n    private static void Log(this ILogger logger, LogLevel logLevel, Exception exception, CustomState customState) {\r\n        logger.Log(logLevel, 0, customState, exception, (state, exception) =\u003e state.Message);\r\n    }\r\n}\r\n\r\npublic class CustomLogger : ILogger\r\n{\r\n    public void Log\u003cTState\u003e(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func\u003cTState, Exception?, string\u003e formatter)\r\n    {\r\n        if (state is CustomState customState)\r\n        {\r\n\r\n        }\r\n        else\r\n        {\r\n\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nMy problem is that I can\u0027t use this extension method overload:\r\n\r\nhttps://github.com/dotnet/runtime/blob/v7.0.0/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/LoggerExtensions.cs#L390\r\n\r\nI can\u0027t because that overload receives directly \"string message, params object?[] args\" and I would lose my custom state on the way and I wouldn\u0027t get to my custom logger...\r\n\r\nIf I had access to:\r\n\r\nhttps://github.com/dotnet/runtime/blob/v7.0.0/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/FormattedLogValues.cs\r\nhttps://github.com/dotnet/runtime/blob/v7.0.0/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/LogValuesFormatter.cs\r\n\r\nI understand that I could do it myself without that overload.",
                                           "updatedAt":  "2022-11-29T08:53:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rbs9e",
                                           "createdAt":  "2022-12-27T22:22:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abatishchev",
                                           "body":  "+1 for making it public. I\u0027m learning the internals of ASP.NET Core logging and it\u0027s the type of the event my custom logger receives. Not a too strong reasoning but still.",
                                           "updatedAt":  "2022-12-27T22:22:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Xicvf",
                                           "createdAt":  "2023-03-14T18:48:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richardthombs",
                                           "body":  "+1 for making it public or for alternatively making the logger easier to mock.",
                                           "updatedAt":  "2023-03-14T18:48:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Zdt23",
                                           "createdAt":  "2023-04-08T19:32:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericwgreene",
                                           "body":  "+1 for making it public for unit testing purposes",
                                           "updatedAt":  "2023-04-08T19:32:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bH09q",
                                           "createdAt":  "2023-04-29T12:36:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cleberMargarida",
                                           "body":  "+1 for making it public for unit testing purposes.. But\r\n\r\nWork around for unit tests:\r\n\r\n```c#\r\nvar mock = new Mock\u003cILogger\u003e();\r\nmock.Setup(x =\u003e x.Log(\r\n    LogLevel.Information,\r\n    It.IsAny\u003cEventId\u003e(),\r\n    It.IsAny\u003cIt.IsSubtype\u003cIReadOnlyList\u003cKeyValuePair\u003cstring, object?\u003e\u003e\u003e\u003e(),\r\n    It.IsAny\u003cException\u003e(),\r\n    It.IsAny\u003cFunc\u003cIt.IsSubtype\u003cIReadOnlyList\u003cKeyValuePair\u003cstring, object?\u003e\u003e\u003e, Exception?, string\u003e\u003e()))\r\n    .Callback\r\n        \u003cLogLevel, \r\n        EventId,\r\n        object, \r\n        Exception,\r\n        Delegate\u003e \r\n     ((logLevel, eventId, state , exception, formatter) =\u003e \r\n     {\r\n        //at this point you can call ToString from state and Assert as excepted\r\n     })\r\n    .Verifiable();\r\n\r\nvar log = mock.Object;\r\nvar date = DateTime.Now;\r\nlog.LogInformation(\"message {date}\", date);\r\n```",
                                           "updatedAt":  "2023-04-29T18:57:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5blHnX",
                                           "createdAt":  "2023-05-05T15:55:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StingyJack",
                                           "body":  "The interface for ILogger and the extension methods for LogDebug(), etc. is the problem for me.  I had to implement one recently to work with a nuget package and the author had used those extension methods. The ext methods use `FormattedLogValues` as the `TState`.  Since I\u0027m trying to get the logged message to forward and in some cases intercept or enrich, I dont need any kind of mocking, I just need to get the message that was passed in to one of those extension methods.\r\n\r\n\r\n``` csharp\r\npublic class MyLogger : ILogger\r\n{\r\n      public void Log\u003cTState\u003e(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func\u003cTState, Exception, string\u003e formatter)\r\n      {\r\n\r\n// where is the message sent to the LogDebug extension method?\r\n        var flv = state as FormattedLogValues; // doesnt compile due to internal.\r\n\r\n// after much guessing and attempts, I found its actually right here, but I dont see anything that would give me that clue. \r\n         var message = state.ToString();\r\n     \r\n...etc\r\n```",
                                           "updatedAt":  "2023-05-05T15:55:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bnMXj",
                                           "createdAt":  "2023-05-06T02:42:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7feCQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "bdovaz",
                                                                               "createdAt":  "2023-05-06T06:54:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "avereshchak",
                                                                               "createdAt":  "2023-05-19T15:37:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "silkfire",
                                                                               "createdAt":  "2023-05-23T00:11:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "cleberMargarida",
                                                                               "createdAt":  "2023-05-25T19:20:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "perringaiden",
                                                                               "createdAt":  "2023-07-02T23:48:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "seantleonard",
                                                                               "createdAt":  "2023-07-07T18:34:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "erkjbro",
                                                                               "createdAt":  "2023-09-26T21:05:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "andrearossiavanade",
                                                                               "createdAt":  "2023-10-13T12:54:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2024-02-25T20:37:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Maksym-Stakanov",
                                                                               "createdAt":  "2024-04-25T21:36:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Jericho",
                                                                               "createdAt":  "2024-06-03T13:58:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jjnrmason",
                                                                               "createdAt":  "2024-07-08T08:21:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "tiwahu",
                                                                               "createdAt":  "2024-07-29T21:36:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "EKataskin",
                                                                               "createdAt":  "2024-10-24T17:52:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ojamte",
                                                                               "createdAt":  "2024-11-19T07:23:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  15
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Lets just make the thing public. I\u0027ve seen enough evidence that customers would benefit just for testing the extension methods.",
                                           "updatedAt":  "2023-05-06T02:42:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bnSSn",
                                           "createdAt":  "2023-05-06T03:04:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abatishchev",
                                           "body":  "Please don\u0027t shoot, a first-time contributor. I\u0027d like to learn how the contribution process looks like. Here\u0027s a PR: https://github.com/dotnet/runtime/pull/85859.",
                                           "updatedAt":  "2023-05-06T03:04:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bnSXD",
                                           "createdAt":  "2023-05-06T03:05:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Lets just make the thing public.\r\n\r\nIt\u0027s in the exact right shape already?  Can you update the top post with the proposed API?",
                                           "updatedAt":  "2023-05-06T03:05:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bneDN",
                                           "createdAt":  "2023-05-06T07:03:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Looking at the implementation, that hardcoded static cache makes me not want to expose this API but maybe the underlying `LogValuesFormatter` instead. The unit testing use case is OK but I think it\u0027s missing some more details. It\u0027s unclear to me what the asserts are going to look like? What public APIs are going to be used? That would help motivate the shape of what we expose.",
                                           "updatedAt":  "2023-05-06T07:03:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c4Ql7",
                                           "createdAt":  "2023-05-23T00:14:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "silkfire",
                                           "body":  "Or perhaps expose a public interface `ILogValuesFormatter` and keep the implementation internal?",
                                           "updatedAt":  "2023-05-23T00:14:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c5PyZ",
                                           "createdAt":  "2023-05-23T04:42:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Why?",
                                           "updatedAt":  "2023-05-23T04:42:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c5n31",
                                           "createdAt":  "2023-05-23T06:26:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "silkfire",
                                           "body":  "As mentioned by others, for unit testing purposes?",
                                           "updatedAt":  "2023-05-23T06:26:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c5qjE",
                                           "createdAt":  "2023-05-23T06:35:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJj4aw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andrearossiavanade",
                                                                               "createdAt":  "2023-10-13T12:58:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I think unit testing should be done using the interface (`IReadOnlyList\u003cKeyValuePair\u003cstring, object\u003e\u003e`). I now think the most valid reason for these methods is for re-implementing your own log methods, not unit testing.",
                                           "updatedAt":  "2023-05-23T06:35:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c7bwv",
                                           "createdAt":  "2023-05-23T11:13:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8-dMg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "silkfire",
                                                                               "createdAt":  "2023-05-23T11:27:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "abatishchev",
                                                                               "createdAt":  "2023-06-02T00:10:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "bdovaz",
                                           "body":  "@davidfowl my use case above is reason enough I think.",
                                           "updatedAt":  "2023-05-23T11:13:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dwTwM",
                                           "createdAt":  "2023-06-02T00:09:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC9M1rA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zsong",
                                                                               "createdAt":  "2023-06-06T00:11:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "zsong",
                                           "body":  "```\r\n _loggerMock.Verify(\r\n     logger =\u003e logger.Log(\r\n         LogLevel.Error,\r\n         It.IsAny\u003cEventId\u003e(),\r\n         It.Is\u003cIt.IsAnyType\u003e((o, t) =\u003e o.ToString().Contains(\"message\")),), // \u003c- upgrade your Moq and you could do this\r\n         exception,\r\n         (Func\u003cIt.IsAnyType, Exception?, string\u003e)It.IsAny\u003cobject\u003e()),\r\n     Times.Once());\r\n\r\n```",
                                           "updatedAt":  "2023-06-06T00:08:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dwXGD",
                                           "createdAt":  "2023-06-02T00:30:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "silkfire",
                                           "body":  "@davidfowl How do you recommend unit testing with `ILogger`? Which methods should be tested?",
                                           "updatedAt":  "2023-06-02T00:30:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5d7lsj",
                                           "createdAt":  "2023-06-05T01:20:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StingyJack",
                                           "body":  "@silkfire - why would you be unit testing an interface that you did not author (`ILogger`)? That\u0027s an external dependency. If you are trying to test that specifically, you are doing unit testing the wrong/hard way.\r\n\r\nIf you are asking about how to mock it when unit testing your code and the class under test is DI friendly,  I usually just create a class in the unit test project that implements `ILogger`, same as I would do with any [custom logger](https://github.com/dotnet/runtime/issues/67577#issuecomment-1536457175).  If the class under test uses a static logger. I\u0027ll add a few virtual methods for LogInfo, LogErr, etc. into the class under test and create a derived class in the unit test project that overrides those functions.\r\n\r\n\r\n",
                                           "updatedAt":  "2023-06-05T01:20:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5d8KG3",
                                           "createdAt":  "2023-06-05T05:08:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "silkfire",
                                           "body":  "Indeed, I was wondering how to mock it and verifying that the right values were passed to its `Log` method. Thanks for the suggestions.",
                                           "updatedAt":  "2023-06-05T05:08:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gN3Dh",
                                           "createdAt":  "2023-06-30T07:27:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "perringaiden",
                                           "body":  "\u003e If you are asking about how to mock it when unit testing your code and the class under test is DI friendly, I usually just create a class in the unit test project that implements `ILogger`, same as I would do with any [custom logger](https://github.com/dotnet/runtime/issues/67577#issuecomment-1536457175). If the class under test uses a static logger. I\u0027ll add a few virtual methods for LogInfo, LogErr, etc. into the class under test and create a derived class in the unit test project that overrides those functions.\r\n\r\nI\u0027ve done this for testing.  However, my biggest annoyance is that I\u0027d like to be able to validate the output string without having to write string literals in my unit tests.\r\n\r\nI have a constant for the format string, (code in VB for archaic reasons) e.g.:\r\n\r\n`Private Const LogErrorMessageFormatString As String = \"This is an Error with message {Message}.\"`\r\n\r\nand a defined log action.\r\n\r\n```\r\nPrivate Shared ReadOnly LogErrorMessageWithValue As Action(Of ILogger(Of TestLoggerTests), String, Exception) =\r\n    LoggerMessage.Define(Of String)(\r\n        LogLevel.Error,\r\n        LogMessageEventIds.LogErrorWithMessage,\r\n        LogErrorMessageFormatString\r\n    )\r\n\r\n```\r\nAnd then the call of:\r\n\r\n```\r\nLogErrorMessageWithValue(_logger, \"custom text\", ex)\r\n```\r\n\r\nWhen my TestLogger(Of T) receives the `.Log` call, I invoke `formatter(state, exception)` to get the string since I can\u0027t use a `Moq.Verify` on the `.Log` call.\r\n\r\nUnfortunately, there\u0027s no way to take `LogErrorMessageFormatString` and convert it into a `String.Format` acceptable string so that I can compare the expected string result, because  `LogValuesFormatter` is private, so I have to hard code strings in Unit Tests, meaning increased maintenance when the constant changes.\r\n\r\nI\u0027d prefer to be able to go \r\n```\r\nDim formatString As LogValuesFormatter\r\n\r\n\r\nformatString = New LogValuesFormatter(LogErrorMessageFormatString)\r\n\r\nAssert.Equal(formatString.Format(\"custom text\"), loggedOutputValue\r\n```\r\n\r\nAs my testing requires correct values in the `{Message}` part where items may have the same `EventId` but differ by things like IDs and Names, such that I need to test the correct values are being passed to the log.\r\n\r\nSo:\r\n* `FormatterLogValues` being public would allow me to use a `Moq.Verify`, or\r\n* `LogValuesFormatter` being public would allow me to work off the `formatter(state, exception)` output without needing hardcoded strings in Unit Tests.",
                                           "updatedAt":  "2023-06-30T07:27:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gSokl",
                                           "createdAt":  "2023-07-01T05:14:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODdnrrA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "silkfire",
                                                                               "createdAt":  "2023-07-01T08:10:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "artmasa",
                                                                               "createdAt":  "2024-04-10T00:59:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "StingyJack",
                                           "body":  "\u003e As my testing requires correct values in the {Message} part...\r\n\r\nI\u0027ve had to test for correct messages before also, and done something like this...\r\n\r\n``` csharp\r\n\r\npublic class MyUnitTestLogger : ILogger\r\n{\r\n      public List\u003cstring\u003e CollectedMessages {get; set;} = new()\r\n\r\n      public void Log\u003cTState\u003e(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func\u003cTState, Exception, string\u003e formatter)\r\n      {\r\n         CollectedMessages.Add($\"{logLevel} - {state}\");\r\n     }\r\n     //rest of ILogger\r\n}\r\n```\r\nAnd then just Assert the contents of the `CollectedMessages`.  I wouldnt compare full messages (which would reduce the amount of literals needed), just look for the important parts like \r\n\r\n``` csharp\r\nAssert.IsTrue(CollectedMessages[0].IndexOf(\"Error\") = 0);\r\nAssert.IsTrue(CollectedMessages[1].Contains(\"some object\u0027s ID or name\"));\r\n//etc.\r\n```\r\nIt seems like a maintenance problem to try and compare the full logged message. Too much to type (and retype if a small change was needed to the message).\r\n\r\nThe A-ha moment for me was that to get the message that was logged, I didn\u0027t actually need to mess with the formatter. I just had to call `state.ToString()` (in one way or another).\r\n",
                                           "updatedAt":  "2023-07-01T05:14:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gVpbF",
                                           "createdAt":  "2023-07-02T02:22:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "perringaiden",
                                           "body":  "\u003e The A-ha moment for me was that to get the message that was logged, I didn\u0027t actually need to mess with the formatter. I just had to call `state.ToString()` (in one way or another).\r\n\r\nThe problem is that I\u0027m Unit Testing a log\u0027s messages, not looking at the variables contained in the messages.\r\n\r\nThe \"lower maintenance\" is to be able to generate the exact string I\u0027m expecting in the log, with only supplying the expected inputs to that string.\r\n\r\n`Assert.Equal(formatString.Format(\"custom text\"), loggedOutputValue)` is far less maintenance because your suggested search is a partial search.  It doesn\u0027t confirm that the right message was logged, just that there is a logged message with the right Event ID has specific values.\r\n\r\nWhen we\u0027re talking about IDs, \"Does the string contain `1\u0027\" isn\u0027t really testing, because 11 would trigger, 20134 would trigger etc.  Your method would require implicit formatting of those IDs which is both unnecessary, and additional maintenance.\r\n\r\nBeing able to say \"I can generate the same string with the same inputs\" is zero maintenance when the constant string changes, and guarantees that the **exact string** is in the log.\r\n\r\nAdditionally... the logged string format is _far better than the current String.Format_ strings.  Being able to use named items in the string makes it far more readable than `{0}{1}{2}` etc.  It would be a big improvement to the framework overall, if we could use the Logger style formatted strings generally.",
                                           "updatedAt":  "2023-07-02T02:22:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gYxLV",
                                           "createdAt":  "2023-07-03T01:53:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "perringaiden",
                                           "body":  "So, after coming to this thread last week, and seeing all the debate about making what should be a publicly usable class... public, I went and copied the code from `LogValuesFormatter` into my own class for use in testing.\r\n\r\nAn example of how simple maintenance becomes is:\r\n\r\n```\r\n            \u003cFact()\u003e\r\n            Public Sub MultipleValueMessageWithExceptionIsFound()\r\n                Dim logger As TestLogger(Of TestLoggerTests)\r\n                Dim message As TestLogger(Of TestLoggerTests).MessageDetail\r\n\r\n\r\n                logger = New TestLogger(Of TestLoggerTests)\r\n\r\n                LogErrorMessageWithValue(logger, \"One\", New ApplicationException(\"Error.\"))\r\n                LogErrorMessageWithValue(logger, \"One\", New ApplicationException(\"Error.\"))\r\n                LogErrorMessageWithValue(logger, \"One\", New ApplicationException(\"Error.\"))\r\n\r\n                message = New TestLogger(Of TestLoggerTests).MessageDetail With {\r\n                    .LogLevel = LogLevel.Error,\r\n                    .EventId = LogMessageEventIds.LogErrorWithMessage,\r\n                    .Output = LogStringFormatConverter.FormatStringFromInput(LogMessageFormatString, \"One\"),\r\n                    .ExceptionType = GetType(ApplicationException)\r\n                }\r\n\r\n                logger.Verify(message, Times.Exactly(3))\r\n            End Sub\r\n```\r\n\r\n* `LogErrorMessageWithValue` is a defined L:ogger message Action.\r\n* `LogMessageFormatString` is the constant logger format string.\r\n* `LogStringFormatConverter` is the copy of `LogValuesFormatter`.\r\n\r\nNow I can simply call `FormatStringFromInput` with the constant and the expected input values, to generate the **exact string**  that I\u0027m looking for, and not mess around with Contains and crafted formatting of log entries that should be human readable.\r\n\r\nAnd if I want different text... I just change the constant and the Unit Test passes.\r\n\r\nIt\u0027s also written so a new instance of `LogStringFormatConverter` takes in, and pre-converts the logger format string, and I can just call `converter.FormatString(\"One\")` to generate the string with a whole slew of different inputs to confirm that the right values are being generated.\r\n\r\n`LogValuesFormatter` should not be private, because it\u0027s a _better human understandable way to do format strings_ than the one we\u0027ve had for 20 years with {0}{1} etc.\r\n\r\nAnyway, as with most things the .NET framework should do but doesn\u0027t, I went back to \u0027roll my own copy by duplicating the private code in the framework.\u0027",
                                           "updatedAt":  "2023-07-03T02:54:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5g6ZUI",
                                           "createdAt":  "2023-07-07T19:08:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODAIfXg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "silkfire",
                                                                               "createdAt":  "2023-07-07T19:12:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "seantleonard",
                                           "body":  "\u003e I think unit testing should be done using the interface (`IReadOnlyList\u003cKeyValuePair\u003cstring, object\u003e\u003e`). I now think the most valid reason for these methods is for re-implementing your own log methods, not unit testing.\r\n\r\n@davidfowl , Your suggestion pointed me in the right direction (at least from my perspective in order to achieve the validation behavior I was seeking). I was attempting to validate the originally formatted error message, which contains variable(s) surrounded by curly brackets `{variable}` when using structured logging. The originally formatted error is present in FormattedLogValues collection.\r\n\r\nI used examples other suggested for how to use Moq to verify the logging invocation, combined with a helper function to parse out and validate the key value pair contents:\r\n```csharp\r\n            loggerMock.Verify(\r\n                x =\u003e x.Log(\r\n                LogLevel.Error,\r\n                It.IsAny\u003cEventId\u003e(),\r\n                It.Is\u003cIt.IsAnyType\u003e((o, t) =\u003e ValidateLoggedState(o, t)),\r\n                It.IsAny\u003cException?\u003e(),\r\n                (Func\u003cIt.IsAnyType, Exception?, string\u003e)It.IsAny\u003cobject\u003e()\r\n                ),\r\n                Times.Once\r\n            );\r\n```\r\nand\r\n```csharp\r\n    public bool ValidateLoggedState(object o, Type t)\r\n    {\r\n        // Cast FormattedLogValues (internal class) to a list of key/value pairs.\r\n        IReadOnlyList\u003cKeyValuePair\u003cstring, object\u003e\u003e loggedValues = (IReadOnlyList\u003cKeyValuePair\u003cstring, object\u003e\u003e)o;\r\n\r\n        // Validate that a log with the expected message template is present.\r\n        bool expectedErrorMsgTemplateExists = loggedValues.Any(kvp =\u003e kvp.Key == \"{OriginalFormat}\" \u0026\u0026 kvp.Value.ToString() == ErrorMessages.ERRMESSAGEFILEEXISTS);\r\n\r\n        //Validate that the expected variable was used for filling the template.\r\n        //For demonstration purposes since there may not be a point to doing this.\r\n        bool formattedErrorMsgExists = loggedValues.Any(kvp =\u003e kvp.Key == \"runtimeConfigFile\");\r\n\r\n        // Validation result.\r\n        return expectedErrorMsgTemplateExists \u0026\u0026 formattedErrorMsgExists;\r\n    }\r\n```\r\n\r\n",
                                           "updatedAt":  "2023-07-07T19:08:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jnPUO",
                                           "createdAt":  "2023-08-09T12:25:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "slaneyrw",
                                           "body":  "With the author of Moq now added a dependency on SponsorLink, which appears to violate a lot of jurisdiction\u0027s privacy legislation, we are hunting around for an alterative library for Moq.\r\n\r\nNSubstitute does not contain an alternative for It.IsAnyType, nor does any other of the major testing libraries.\r\n\r\nIMHO If published extensions use a public interface method with generic type arguments, it must do so with only public type definitions.  Of course implementations can be internal.  The use of an internal type makes unit testing of this impossible using (most) mocking libraries.\r\n\r\nThe Logger source generator is also guilty of this.  It generates a private struct in the GenericMessages generated code and passes that to the Log method at the TState type argument.\r\n\r\n@StingyJack We are not trying to test the implementation of ILogger, but verify the invocation.  We need the Type of TState type argument to ILogger.Log in order to verify.",
                                           "updatedAt":  "2023-08-09T12:25:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jyApN",
                                           "createdAt":  "2023-08-10T23:36:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@slaneyrw Can NSubstitute mock generic methods?\r\n",
                                           "updatedAt":  "2023-08-10T23:36:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jz-Ky",
                                           "createdAt":  "2023-08-11T11:00:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "slaneyrw",
                                           "body":  "Yes, but as it doesn\u0027t have the concept of It.IsAnyType, it needs the type in advance - hence internal and private types cannot be mocked",
                                           "updatedAt":  "2023-08-11T11:31:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j1cfa",
                                           "createdAt":  "2023-08-11T15:15:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e Yes, but as it doesn\u0027t have the concept of It.IsAnyType, it needs the type in advance \r\n\r\nWhat does mocking a generic methods that takes T look like with NSubstitute for ILogger.Log\\\u003cT\\\u003e call?",
                                           "updatedAt":  "2023-08-11T18:57:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j6Ieu",
                                           "createdAt":  "2023-08-13T01:51:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "slaneyrw",
                                           "body":  "In the case of the ILogger, you don\u0027t set up the call, but verify the\r\ninvocation.   But the principle is the same\r\n\r\ni.e.\r\n\r\nmockLogger.Received().Log\u003cFormattedLogValues\u003e( ... )\r\n\r\nIn Moq, FormattedLogValues generic argument is replaced with \"It.IsAnyType\"\r\n\r\nAs you know generic methods type cannot be co/contravariant so we need the\r\nexact type.\r\n\r\nThere are 2 choices here... either make FormattedLogValues public again, or\r\nexplicitly specify the generic type using a known public interface/base of\r\nFormattedLogValues.  IReadOnlyList\u003cKeyValuePair\u003cstring, object?\u003e\u003e could be\r\na good candidate.\r\n\r\n\r\nOn Sat, 12 Aug 2023, 1:15 am David Fowler, ***@***.***\u003e wrote:\r\n\r\n\u003e Yes, but as it doesn\u0027t have the concept of It.IsAnyType, it needs the type\r\n\u003e in advance\r\n\u003e\r\n\u003e What does mocking a generic methods that takes T look like with\r\n\u003e NSubstitute?\r\n\u003e\r\n\u003e —\r\n\u003e Reply to this email directly, view it on GitHub\r\n\u003e \u003chttps://github.com/dotnet/runtime/issues/67577#issuecomment-1674954714\u003e,\r\n\u003e or unsubscribe\r\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AAUOINAHZRNB32UGT22N6H3XUZEBNANCNFSM5SRSQVEA\u003e\r\n\u003e .\r\n\u003e You are receiving this because you were mentioned.Message ID:\r\n\u003e ***@***.***\u003e\r\n\u003e\r\n",
                                           "updatedAt":  "2023-08-13T01:51:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kWh9L",
                                           "createdAt":  "2023-08-18T09:26:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arkadeepsaha-ten",
                                           "body":  "I am facing a similar issue that was described earlier.\r\n\r\nI have a method which has a line as follows:\r\n\r\n```C#\r\n_logger.LogError(exception, $\"Encountered {exception.GetType().Name}. Unable to verify user with id {user.UserId}\");\r\n```\r\n\r\nThis has a corresponding unit test with the following assertion:\r\n\r\n```C#\r\nvar logger = Substitute.For\u003cILogger\u003cSyncService\u003e\u003e();\r\n\r\n// other Arrange, Act, Assert steps\r\n\r\nlogger.Received(1).LogError(exception, \"Encountered NullReferenceException. Unable to verify user with id 1\");\r\n```\r\n\r\nThis test was running fine.\r\n\r\nHowever, due to some issues we encountered, this log now needs to be converted into a structured log.\r\n\r\nSo now the line in the class looks as follows:\r\n```C#\r\n_logger.LogError(exception, \"Encountered {exceptionType}. Unable to verify user with id {userId}\", exception.GetType().Name, user.UserId);\r\n```\r\n\r\nBut now when I changed the assertion to the following, the test fails:\r\n```C#\r\nlogger.Received(1).LogError(exception, \"Encountered {exceptionType}. Unable to verify user with id {userId}\", \"NullReferenceException\", 1);\r\n```\r\n\r\nThe error message is as follows. I have removed the unwanted stack traces to highlight only the important parts:\r\n```\r\nNSubstitute.Exceptions.ReceivedCallsException : Expected to receive exactly 1 call matching:\r\n\tLog\u003cFormattedLogValues\u003e(Error, 0, Encountered NullReferenceException. Unable to verify user with id 1, System.NullReferenceException: Test Exception\r\n   at NSubstitute.ExceptionExtensions.ExceptionExtensions.\u003c\u003ec__DisplayClass0_0.\u003cThrows\u003eb__0(CallInfo _)\r\n\r\n   ...// complete stack trace ...\r\n\r\nActually received no matching calls.\r\n\r\nReceived 1 non-matching call (non-matching arguments indicated with \u0027*\u0027 characters):\r\n\tLog\u003cFormattedLogValues\u003e(Error, 0, *Encountered NullReferenceException. Unable to verify user with id 1*, System.NullReferenceException: Test Exception\r\n   at NSubstitute.ExceptionExtensions.ExceptionExtensions.\u003c\u003ec__DisplayClass0_0.\u003cThrows\u003eb__0(CallInfo _)\r\n```\r\n\r\nI was initially unable to figure out what I am doing incorrectly. From the 2 messages it seems like the correct method is being called with the correct parameters, but the message is still flagged as non-matching.\r\n\r\nBut after some digging I came to realize the flagged message is actually a `ToString()` call to `FormattedLogValues`\r\n\r\nBut I am unable to refer this type directly in my test to be able to appropriately mock it assert to it.\r\n",
                                           "updatedAt":  "2023-08-18T09:28:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kdTn2",
                                           "createdAt":  "2023-08-20T21:43:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StingyJack",
                                           "body":  "@arkadeepsaha-ten a lot of the trouble you were facing and some solutions for it are detailed in this thread. There are examples of how to mock ILogger to use for unit tests starting at about [this comment](https://github.com/dotnet/runtime/issues/67577#issuecomment-1536457175).   \r\n\r\nIf still having trouble with the matching, try figuring out how the string coming form the logger actually ends. Is it some non-printable or whitespace character following the `1`?  That\u0027s where its reporting the non-matching part.",
                                           "updatedAt":  "2023-08-20T21:43:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5keWAs",
                                           "createdAt":  "2023-08-21T05:36:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arkadeepsaha-ten",
                                           "body":  "@StingyJack Hi, thanks for the suggestion. I eventually implemented my own instance of ILogger, just for unit testing, but wanted to post my experience here to provide a valid use case for the discussion.\r\n\r\nAs for why the test was failing, it was because I was trying to assert a `string` against a `FormattedLogValues`, the message itself was same. Like you said in your example, the extension methods internally use `FormattedLogValues` which is is not exposed outside the package.\r\n\r\nIf anyone is interested, this is my StackOverflow question about the topic along with the resolution:\r\nhttps://stackoverflow.com/questions/76928114/how-to-unit-test-structured-logging-calls-using-nsubstitute",
                                           "updatedAt":  "2023-08-21T06:05:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lp2Of",
                                           "createdAt":  "2023-09-04T15:45:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StingyJack",
                                           "body":  "Part of the problem that many who come to this thread are facing is that methods like `LogError()` are actually not part of `ILogger` or its concretions.  We try to mock a call to `ILogger.LogError()` so that we can catch the messages sent as errors to assert them in unit tests, but it doesn\u0027t work because the functions are actually [extension methods for ILogger](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.loggerextensions?view=dotnet-plat-ext-7.0) and static functions cannot be mocked (probably).   Most of the complaints here are trying to compare the message string sent to the logger. \r\n\r\nSo I think at least one of the solutions to this problem would be to add the signatures those extension methods provide to ILogger (sans the `this` param). I tried this out by doing the commonly used `LogError(string, params object[])` \r\n\r\n``` csharp\r\npublic interface IMyLogger : ILogger\r\n{\r\n    void LogError(string? message, params object?[] args);        \r\n}\r\n\r\n```\r\nWhich lets me test the string being sent to the logger in a way that is more recognizable with other things being mocked for testing, and avoids the need to touch `FormattedLogValues`.\r\n\r\n```csharp\r\n\r\n[TestMethod]\r\npublic void LogErrorTest()\r\n{\r\n    var logger = new Mock\u003cIMyLogger\u003e();\r\n    var collectedMessages = new List\u003cstring\u003e();\r\n    logger.Setup(s =\u003e s.LogError(It.IsAny\u003cstring\u003e(), It.IsAny\u003cobject[]\u003e()))\r\n                .Callback((string s, object[] parameters) =\u003e\r\n                {\r\n                    collectedMessages.Add(s);\r\n                });\r\n\r\n    logger.Object.LogError(nameof(LogErrorTest));\r\n\r\n    Assert.AreEqual(1, collectedMessages.Count);\r\n    Assert.AreEqual(nameof(LogErrorTest), collectedMessages[0]);\r\n}\r\n\r\n```\r\n\r\nIt is good that the extension methods were made available because many would have probably avoided using ILogger without them. It is probably time to consider promoting them to interface members anyway.\r\n\r\n\r\nFor unit testing, I think I would still opt for implementing an ILogger cos its going to be less keystrokes, but even with that I could avoid needing to use FormattedLogValues.\r\n\r\n\r\n",
                                           "updatedAt":  "2023-09-04T15:45:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lyABn",
                                           "createdAt":  "2023-09-06T03:38:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD3897Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "perringaiden",
                                                                               "createdAt":  "2023-09-06T03:58:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EKataskin",
                                                                               "createdAt":  "2024-10-24T17:59:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "slaneyrw",
                                           "body":  "@StingyJack The problem is trying to mock/substitute/verify the `Log\u003cTState\u003e` method.  We need to know the exact type passed in some libraries.  You are using Moq, which has the concept of It.IsAnyType.  We\u0027ve just switched to NSubstitute (due to Moq author\u0027s recent actions) that doesn\u0027t have this type of concept.\r\n\r\nTState can be switched to `IReadOnlyDictionary\u003cstring, object?\u003e` ( an implemented interface of FormattedLogValues ), with corresponding parameter changes.  We can\u0027t use this type from the outside as, (I\u0027m sure you are aware), generic types cannot be contra/co-variant.\r\n",
                                           "updatedAt":  "2023-09-06T03:38:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lyCsK",
                                           "createdAt":  "2023-09-06T03:55:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "perringaiden",
                                           "body":  "\u003e Part of the problem that many who come to this thread are facing is that methods like `LogError()` are actually not part of `ILogger` or its concretions. \r\n\r\nThe vast majority, except for a few minor (and generally irrelevant cases) of the logging I do is using `LoggerMessage.Define` and preformatted messages.  Most coding guides from Microsoft as well as advice from across the web is to *avoid* use of `LogError`, `LogInformation` etc unless your message is a fixed constant string (thus formatting isn\u0027t needed).  That\u0027s why it\u0027s not part of the standard interface.  \r\n\r\nIf we could mock the `ILogger.Log` method itself, that should be what unit tests do, because all extensions go through that, as well as all the pre-defined format messaging infrastructure.  You shouldn\u0027t be trying to track specifically `LogError` but rather `.Log` with a `LogLevel.Error`.\r\n\r\nBut because of `TState` being an internal type, we can\u0027t.  That\u0027s the problem that needs addressing.",
                                           "updatedAt":  "2023-09-06T03:58:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mp-ko",
                                           "createdAt":  "2023-09-16T17:42:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StingyJack",
                                           "body":  "\u003e Most coding guides from Microsoft as well as advice from across the web is to avoid use of LogError, LogInformation etc unless your message is a fixed constant string (thus formatting isn\u0027t needed). That\u0027s why it\u0027s not part of the standard interface\r\n\r\n@perringaiden - You mean [this](https://learn.microsoft.com/en-us/dotnet/core/extensions/high-performance-logging), right? I havent needed to go that deep WRT logging performance.  The extension methods have always been good enough. Usually the perf problems with logging systems are towards the middle/end of the logging stack (when log requests arent batched when writing to the repo/sink/store, or the ILogger implementation holds the calling thread for too long, etc). But thanks for pointing this out to me, I wouldn\u0027t have gone looking for it otherwise.\r\n\r\n\u003e  We\u0027ve just switched to NSubstitute (due to Moq author\u0027s recent actions) \r\n\r\n@slaneyrw  - We just blocked Moq versions 4.20 and later from our package feeds. At worst we would stay on 4.18 forever (which is fine as it does everything we need). At best the community backlash was going to prompt the reverting of the Sponsorlink. which I think is happening. ",
                                           "updatedAt":  "2023-09-16T17:42:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uxPBa",
                                           "createdAt":  "2023-12-15T19:41:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tsawyer999",
                                           "body":  "I am disappointed this struct is still internal after more than a year and somebody even opened a PR.\r\n\r\nIt is already a hard job to convince some team members and management about the good of unit tests. It makes harder to defend unit tests when a team member stumble on something like this that should have been trivial to mock. It even blocks some developers on this thread from using other tools than Moq.\r\n\r\nDotnet seems to take in account the community, multiple peoples raise an issue about this, the negative impacts seems low, pretty please, is it possible to take a moment to review the accessibility of FormattedLogValues?\r\n\r\nThank you",
                                           "updatedAt":  "2023-12-15T21:07:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ux4sa",
                                           "createdAt":  "2023-12-15T22:35:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODaT3bg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "bdovaz",
                                                                               "createdAt":  "2023-12-16T15:17:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "precisionconage",
                                                                               "createdAt":  "2024-03-12T18:55:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I think that\u0027s fair that the impact is pretty low for making this public, even if this is the wrong way to test your logs, [this](https://github.com/dotnet/runtime/issues/67577#issuecomment-1330289514) use case is valid.",
                                           "updatedAt":  "2023-12-15T22:35:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5u0RFP",
                                           "createdAt":  "2023-12-17T14:59:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tsawyer999",
                                           "body":  "Curiosity, the issue is open from April 2022 and there is a tag \"triage\", is there any plan to review it in 2024? Thanks!",
                                           "updatedAt":  "2023-12-17T14:59:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xBpG5",
                                           "createdAt":  "2024-01-17T17:18:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkosmala87",
                                           "body":  "This is really problematic in tests while the change is really tiny and it seems it does not have negative impact but would help many people",
                                           "updatedAt":  "2024-01-17T17:18:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zEEAj",
                                           "createdAt":  "2024-02-06T17:37:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEWRDUw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HurburghJamesP",
                                                                               "createdAt":  "2025-06-11T22:24:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "int3ro",
                                           "body":  "Another use case is custom attribute formatting for custom ILogger.\r\nWe are trying to transition away from a complete custom logging implementation to the standard ILogger interface. However, for backwards compatibility we require a custom format for DateTime and float/doubles in particular.\r\n\r\nWe were hoping to justs implement a custom ILogger and ILoggerProvider that iterates through the TState object when it is an IEnumerable and handle the object accordingy.\r\n\r\n```\r\n    public void Log\u003cTState\u003e(LogLevel logLevel, EventId eventId, TState state, Exception? exception,\r\n        Func\u003cTState, Exception?, string\u003e formatter)\r\n    {\r\n        if (!IsEnabled(logLevel))\r\n            return;\r\n\r\n        string message;\r\n        if (state is IEnumerable\u003cKeyValuePair\u003cstring, object\u003e\u003e structuredState)\r\n        {\r\n            var newState = structuredState.Select(kv =\u003e\r\n            {\r\n                return kv.Value switch\r\n                {\r\n                    string str        =\u003e (kv.Key, string.IsNullOrEmpty(str) ? \"NULL\" : str),\r\n                    DateTime dateTime =\u003e (kv.Key, dateTime.ToString(\"dd.MM.yyyy HH:mm:ss\")),\r\n                    double d          =\u003e (kv.Key, d.ToString(\"0.000\")),\r\n                    float f           =\u003e (kv.Key, f.ToString(\"0.000\")),\r\n                    _                 =\u003e (kv.Key, kv.Value)\r\n                };\r\n            });\r\n            message = formatter(newState, exception);\r\n        }\r\n        else\r\n        {\r\n            message = formatter(state, exception);\r\n        }\r\n\r\n        ...\r\n```\r\n\r\nThis does not work, however, because the TState can\u0027t be modified...\r\n\r\nI haven\u0027t found any other way to implement this using the default ILogger.",
                                           "updatedAt":  "2024-02-06T17:37:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52dUHJ",
                                           "createdAt":  "2024-03-10T23:06:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "duongphuhiep",
                                           "body":  "1) if anybody want to Assert log messages in a Unit test then checkout my Nuget:\r\n\r\nhttps://github.com/duongphuhiep/ToolsPack.NetCore/tree/master/src/ToolsPack.Logging#mocklogger\r\n\r\n(While Asserting the log events) I also explained How to display logs message in the Test Output =\u003e so you are no longer \"blind\" when diagnostic a failed test..\r\n\r\n2) comeback to the subject, I got an \"unusual\" situation where I wanted to \"decorate\" an existence ILogger:\r\n\r\n```C#\r\nusing LoggingFormatted = Microsoft.Extensions.Logging.Formatted;\r\n\r\npublic class DecoratedLogger : ILogger\r\n    private ILogger core;\r\n\r\n    public void Log\u003cTState\u003e(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func\u003cTState, Exception?, string\u003e formatter)\r\n    {\r\n        if (typeof(LoggingFormatted).IsAssignableFrom(typeof(TState)))\r\n        {\r\n            var currentState = state as LoggingFormatted;\r\n            newState = new LoggingFormatted(currentState); // clone the currentState\r\n            newState.AddMoreValue(newKey, newValue); //enrich the currentState\r\n            \r\n            core.Log(logLevel, eventId, newState, exception, formatter);\r\n        }\r\n        else {\r\n            core.Log(logLevel, eventId, state, exception, formatter);\r\n        }\r\n    }\r\n}\r\n```\r\nI can\u0027t do it today because the Microsoft.Extensions.Logging.Formatted is not public, so I will have to find other way. \r\nThat\u0027s said, my situation is quite special, maybe I will find a more proper way to deal with it, without resorting to this kind of DecoratedLogger",
                                           "updatedAt":  "2024-03-10T23:06:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56T5JZ",
                                           "createdAt":  "2024-04-12T15:59:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thomaslevesque",
                                           "body":  "\u003e I think that\u0027s fair that the impact is pretty low for making this public, even if **this is the wrong way to test your logs**, [this](https://github.com/dotnet/runtime/issues/67577#issuecomment-1330289514) use case is valid.\r\n\r\n@davidfowl this is an interesting statement. What *would* be the right way to test your logs?",
                                           "updatedAt":  "2024-04-12T15:59:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56T7SG",
                                           "createdAt":  "2024-04-12T16:03:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEWMGvw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "delixfe",
                                                                               "createdAt":  "2024-12-01T16:37:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thomaslevesque",
                                                                               "createdAt":  "2025-06-11T11:48:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Using this package https://github.com/dotnet/extensions/tree/main/src/Libraries/Microsoft.Extensions.Diagnostics.Testing",
                                           "updatedAt":  "2024-04-12T16:03:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56T8lO",
                                           "createdAt":  "2024-04-12T16:05:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thomaslevesque",
                                           "body":  "I wasn\u0027t aware of this package. Thanks, I\u0027ll look into it!",
                                           "updatedAt":  "2024-04-12T16:05:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56Utfx",
                                           "createdAt":  "2024-04-12T18:19:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD9HPzA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "duongphuhiep",
                                                                               "createdAt":  "2024-04-15T00:13:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cbersch",
                                                                               "createdAt":  "2024-04-22T08:39:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "delixfe",
                                                                               "createdAt":  "2024-12-01T16:37:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "silkfire",
                                           "body":  "\u003e \u003e I think that\u0027s fair that the impact is pretty low for making this public, even if **this is the wrong way to test your logs**, [this](https://github.com/dotnet/runtime/issues/67577#issuecomment-1330289514) use case is valid.\r\n\u003e \r\n\u003e @davidfowl this is an interesting statement. What _would_ be the right way to test your logs?\r\n\r\nI think the introduction of the new and excellent `FakeLogger` class in .NET Platform Extensions 8.0 has rendered this discussion completely irrelevant. It makes it so easy to test and assert your logs.\r\n\r\nIf you were a regular reader of the .NET Blog you\u0027d know about it :)\r\n\r\nhttps://devblogs.microsoft.com/dotnet/fake-it-til-you-make-it-to-production/\r\n\r\nNuGet package:\r\n[Microsoft.Extensions.Diagnostics.Testing](https://www.nuget.org/packages/Microsoft.Extensions.Diagnostics.Testing)",
                                           "updatedAt":  "2024-04-12T18:21:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56U7PT",
                                           "createdAt":  "2024-04-12T18:48:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODeA3zA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "silkfire",
                                                                               "createdAt":  "2024-04-12T18:52:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "thomaslevesque",
                                           "body":  "@silkfire yes, that\u0027s what @davidfowl mentioned.\r\nIn fact, I probably read this article, but I had completely forgotten about it.",
                                           "updatedAt":  "2024-04-12T18:48:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58D3n_",
                                           "createdAt":  "2024-04-28T08:24:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD5PyqA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "c4bhuf",
                                                                               "createdAt":  "2024-04-29T07:02:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "duongphuhiep",
                                                                               "createdAt":  "2024-04-29T09:55:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EKataskin",
                                                                               "createdAt":  "2024-10-24T18:07:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tridattran",
                                                                               "createdAt":  "2024-11-03T22:30:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "ghord",
                                           "body":  "Please do not close this discussion. There are other use cases than unit testing for this request.\r\n\r\nI\u0027ve had the issue where I wanted to preprocess parameters passed to logger before logging them to console, specifically I wanted to add custom escaping for `SyntaxNode` before logging them using custom `ILogger` that uses `Spectre.Console`. This library uses markup syntax for coloring, and logging anything with `[]` values breaks it.\r\n\r\nThis would be possible if I could take existing `FormattedLogValues` instance, and construct new one with some of the values replaced by different types/strings. This would be very easy if only `FormattedLogValues` constructor was public. \r\n\r\nWhat I had to do is to use reflection hack for this:\r\n```c#\r\npublic static class FormattedLogValuesHelper\r\n{\r\n   private static Type _formattedLogValues = Type.GetType(\"Microsoft.Extensions.Logging.FormattedLogValues, Microsoft.Extensions.Logging.Abstractions\") ?? throw new Exception(\"Cannot find FormattedLogValues type\");\r\n\r\n   public static bool TryMapParameters\u003cTState\u003e(ref TState state, Func\u003cstring, object?, object?\u003e mapper)\r\n   {\r\n       if (typeof(TState) != _formattedLogValues)\r\n       {\r\n           return false;\r\n       }\r\n\r\n       var values = state as IReadOnlyList\u003cKeyValuePair\u003c string, object?\u003e\u003e;\r\n\r\n       if (values is null)\r\n       {\r\n           return false;\r\n       }\r\n\r\n       var list = new object?[values.Count - 1];\r\n       bool anyChanged = false;\r\n\r\n       for (var i = 0; i \u003c values.Count - 1; i++)\r\n       {\r\n           var value = values[i];\r\n\r\n           list[i] = mapper(value.Key, value.Value);\r\n\r\n           if (list[i] != value.Value)\r\n           {\r\n               anyChanged = true;\r\n           }\r\n       }\r\n\r\n       if (!anyChanged)\r\n           return false;\r\n\r\n       var formatString = values[values.Count - 1].Value;\r\n       \r\n       if(Activator.CreateInstance(_formattedLogValues, formatString, list) is TState newState)\r\n       {\r\n           state = newState;\r\n           return true;\r\n       }\r\n       else\r\n       {\r\n           return false;\r\n       }\r\n   }\r\n}\r\n```\r\nWith usage:\r\n```c#\r\npublic void Log\u003cTState\u003e(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func\u003cTState, Exception?, string\u003e formatter)\r\n{\r\n    FormattedLogValuesHelper.TryMapParameters(ref state, (name, value) =\u003e\r\n    {\r\n        if (value is SyntaxNode syntaxNode)\r\n        {\r\n            // escape every SyntaxNode so that it does not break formatting\r\n            return Markup.Escape(syntaxNode.ToString());\r\n        }\r\n\r\n        return value;\r\n    });\r\n\r\n    // use formatter to get the message\r\n    AnsiConsole.MarkupLine(formatter(state, exception));\r\n}\r\n```",
                                           "updatedAt":  "2024-04-28T08:55:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58HdA5",
                                           "createdAt":  "2024-04-29T10:01:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "duongphuhiep",
                                           "body":  "yes I had the same request, I wished to \"enrich\" or to modify the LoggingFormatted as well\r\n\r\n```c#\r\nusing LoggingFormatted = Microsoft.Extensions.Logging.Formatted;\r\n\r\npublic class DecoratedLogger : ILogger\r\n    private ILogger core;\r\n\r\n    public void Log\u003cTState\u003e(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func\u003cTState, Exception?, string\u003e formatter)\r\n    {\r\n        if (typeof(LoggingFormatted).IsAssignableFrom(typeof(TState)))\r\n        {\r\n            var currentState = state as LoggingFormatted;\r\n            newState = new LoggingFormatted(currentState); // clone the currentState\r\n            newState.AddMoreValue(newKey, newValue); //enrich the currentState\r\n            \r\n            core.Log(logLevel, eventId, newState, exception, formatter);\r\n        }\r\n        else {\r\n            core.Log(logLevel, eventId, state, exception, formatter);\r\n        }\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2024-04-29T10:02:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58POf0",
                                           "createdAt":  "2024-04-30T04:39:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Or you can use the enrichment (or redaction) support added by https://github.com/dotnet/extensions/tree/main/src/Libraries/Microsoft.Extensions.Telemetry#logging-enhancements",
                                           "updatedAt":  "2024-04-30T04:40:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ik1M3",
                                           "createdAt":  "2024-08-15T14:19:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD56MCA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gigi81",
                                                                               "createdAt":  "2024-08-24T13:56:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bangonkali",
                                                                               "createdAt":  "2024-10-22T17:18:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tridattran",
                                                                               "createdAt":  "2024-11-03T22:30:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dzhukovsky",
                                                                               "createdAt":  "2024-11-07T21:18:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "kwerty",
                                           "body":  "Here\u0027s an ILogger wrapper which adds a prefix of your choosing (with templating), if anyone\u0027s interested. Thanks @duongphuhiep for providing the secret sauce!\r\n\r\n```\r\npublic class PrefixedLogger(ILogger logger, string prefixFormat, params object[] prefixValues) : ILogger\r\n{\r\n    readonly static Type formattedLogValuesType = Type.GetType(\"Microsoft.Extensions.Logging.FormattedLogValues, Microsoft.Extensions.Logging.Abstractions\");\r\n\r\n    public IDisposable BeginScope\u003cTState\u003e(TState state) where TState : notnull\r\n        =\u003e logger.BeginScope(state);\r\n\r\n    public bool IsEnabled(LogLevel logLevel)\r\n        =\u003e logger.IsEnabled(logLevel);\r\n\r\n    public void Log\u003cTState\u003e(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func\u003cTState, Exception, string\u003e formatter)\r\n    {\r\n        if (typeof(TState) == formattedLogValuesType)\r\n        {\r\n            var s = (IReadOnlyList\u003cKeyValuePair\u003cstring, object\u003e\u003e)state;\r\n\r\n            var format = prefixFormat + \" \" + s[s.Count - 1].Value;\r\n\r\n            var values = new object[prefixValues.Length + (s.Count - 1)];\r\n            Array.Copy(prefixValues, values, prefixValues.Length);\r\n            var o = prefixValues.Length;\r\n            for (var i = 0; i \u003c s.Count - 1; i++)\r\n            {\r\n                values[o + i] = s[i].Value;\r\n            }\r\n\r\n            state = (TState)Activator.CreateInstance(formattedLogValuesType, format, values);\r\n        }\r\n\r\n        logger.Log(logLevel, eventId, state, exception, formatter);\r\n    }\r\n}\r\n```\r\n\r\nHere\u0027s how you use it -\r\n\r\n```\r\nvar prefixedLogger = new PrefixedLogger(logger, \"MyPrefix\")\r\nvar prefixedLogger = new PrefixedLogger(logger, \"{prefix1}\", someValue1);\r\nvar prefixedLogger = new PrefixedLogger(logger, \"{prefix1} {prefix2}\", someValue1, someValue2);\r\n```\r\n",
                                           "updatedAt":  "2024-08-15T14:20:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wi9OC",
                                           "createdAt":  "2025-06-11T09:39:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndreReise",
                                           "body":  "3rd-party libraries that integrate MEL with other logging systems (e.g., Serilog) and/or `ILogger` implementations with custom formatting could benefit if `FormattedLogValues` type were made public.\n\nWhen the state object is a structured value represented by `FormattedLogValues`, accessing it via `IReadOnlyList\u003cKeyValuePair\u003cstring, object?\u003e\u003e` causes the struct to be boxed. If the type were public, it would be possible to access values directly using the indexer, avoiding boxing.",
                                           "updatedAt":  "2025-06-11T09:39:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FE7qY",
                                           "createdAt":  "2025-09-18T09:12:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "parched",
                                           "body":  "My use case is the \"bug\" function I have\n```csharp\n    public static void Bug(this ILogger logger, Exception? exception, string? message, params object?[] args)\n    {\n        Debug.Fail(message is null ? null : string.Format(CultureInfo.InvariantCulture, message, args));\n        logger.LogError(exception, message, args);\n    }\n```\nwhich I\u0027ve realised is incorrect because `string.Format` doesn\u0027t used named placeholders.\n\nI\u0027m just going to copy the FormattedLogValues to my code for now.",
                                           "updatedAt":  "2025-09-18T09:12:14Z"
                                       }
                                   ],
                         "totalCount":  63
                     },
        "title":  "FormattedLogValues struct should be public",
        "labels":  [
                       "api-needs-work",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/69981",
        "createdAt":  "2022-05-30T09:45:40Z",
        "number":  69981,
        "author":  "KalleOlaviNiemitalo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-14T22:09:23Z",
        "body":  "### Description\n\nThe indexer of Microsoft.Extensions.Logging.LoggerMessage.LogValues throws `new IndexOutOfRangeException(nameof(index))` if the index is out of range:\r\n\r\n\u003chttps://github.com/dotnet/runtime/blob/70ae3df4a6f3c92fb6b315afc405edd10ff38579/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/LoggerMessage.cs#L485\u003e\r\n\r\nHowever, the [IndexOutOfRangeException(string) constructor](https://docs.microsoft.com/dotnet/api/system.indexoutofrangeexception.-ctor?view=net-6.0#system-indexoutofrangeexception-ctor(system-string)) uses the string as Exception.Message, not as a parameter name. `nameof(index)` is not really suitable for Exception.Message. Perhaps the indexer should instead use the IndexOutOfRangeException() or ArgumentOutOfRangeException(string) constructor. Changing the type of the exception would have a higher risk of breaking something.\r\n\r\nThe same bug is in the generic LogValues classes, and also in the source generator:\r\n\r\n\u003chttps://github.com/dotnet/runtime/blob/70ae3df4a6f3c92fb6b315afc405edd10ff38579/src/libraries/Microsoft.Extensions.Logging.Abstractions/gen/LoggerMessageGenerator.Emitter.cs#L170\u003e\n\n### Reproduction Steps\n\nLoggerMessageOutOfRange.csproj:\r\n\r\n```XML\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet6.0\u003c/TargetFramework\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Logging.Abstractions\" Version=\"6.0.1\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\nProgram.cs:\r\n\r\n```C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Action\u003cILogger, string, Exception?\u003e message = LoggerMessage.Define\u003cstring\u003e(\r\n            LogLevel.Information,\r\n            new EventId(1, \"Event\"),\r\n            \"{Param}\");\r\n        message(new BrokenLogger(), \"dummy\", null);\r\n    }\r\n}\r\n\r\nclass BrokenLogger : ILogger\r\n{\r\n    public IDisposable? BeginScope\u003cTState\u003e(TState state) =\u003e null;\r\n\r\n    public bool IsEnabled(LogLevel logLevel) =\u003e true;\r\n\r\n    public void Log\u003cTState\u003e(\r\n        LogLevel logLevel,\r\n        EventId eventId,\r\n        TState state,\r\n        Exception? exception,\r\n        Func\u003cTState, Exception?, string\u003e formatter)\r\n    {\r\n        if (state is IReadOnlyList\u003cKeyValuePair\u003cstring, object?\u003e\u003e structured)\r\n        {\r\n            // IReadOnlyList\u003cT\u003e.Item[Int32] documentation does not say\r\n            // whether this should throw ArgumentOutOfRangeException\r\n            // (like IList\u003cT\u003e.Item[Int32]) or IndexOutOfRangeException.\r\n            _ = structured[structured.Count + 1];\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`dotnet run`\n\n### Expected behavior\n\nException.Message should be a sentence.\r\n\r\n```\r\nUnhandled exception. System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at Microsoft.Extensions.Logging.LoggerMessage.LogValues`1.get_Item(Int32 index)\r\n   at BrokenLogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter) in C:\\Projects\\Kalle\\LoggerMessageOutOfRange\\Program.cs:line 35\r\n   at Microsoft.Extensions.Logging.LoggerMessage.\u003c\u003ec__DisplayClass10_0`1.\u003cDefine\u003eg__Log|0(ILogger logger, T1 arg1, Exception exception)\r\n   at Microsoft.Extensions.Logging.LoggerMessage.\u003c\u003ec__DisplayClass10_0`1.\u003cDefine\u003eb__1(ILogger logger, T1 arg1, Exception exception)\r\n   at Program.Main() in C:\\Projects\\Kalle\\LoggerMessageOutOfRange\\Program.cs:line 13\r\n```\n\n### Actual behavior\n\nException.Message is just the identifier `index`.\r\n\r\n```\r\nUnhandled exception. System.IndexOutOfRangeException: index\r\n   at Microsoft.Extensions.Logging.LoggerMessage.LogValues`1.get_Item(Int32 index)\r\n   at BrokenLogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter) in C:\\Projects\\Kalle\\LoggerMessageOutOfRange\\Program.cs:line 35\r\n   at Microsoft.Extensions.Logging.LoggerMessage.\u003c\u003ec__DisplayClass10_0`1.\u003cDefine\u003eg__Log|0(ILogger logger, T1 arg1, Exception exception)\r\n   at Microsoft.Extensions.Logging.LoggerMessage.\u003c\u003ec__DisplayClass10_0`1.\u003cDefine\u003eb__1(ILogger logger, T1 arg1, Exception exception)\r\n   at Program.Main() in C:\\Projects\\Kalle\\LoggerMessageOutOfRange\\Program.cs:line 13\r\n```\n\n### Regression?\n\nNo, it worked this way already in \u003chttps://github.com/aspnet/Logging/pull/338\u003e.\n\n### Known Workarounds\n\nImplement the logger correctly so that it won\u0027t use an out-of-range index.\r\n\r\nOr catch the exception and throw a better one.\n\n### Configuration\n\n.NET SDK 6.0.300, runtime 6.0.5, on win10-x64.\r\nWindows 10 Pro version 21H2 (OS Build 19044.1706).\r\nNot specific to this configuration.\r\n\n\n### Other information\n\nI noticed this in the source code when looking for advice on how to support structured logging in a TState type. I was not using LoggerMessage because I wanted to specify the LogLevel in the logging call (mapping it from another logging system). The bug is unlikely to be hit in any production code, but it seems like something that should have been flagged by an analyzer and fixed.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORFcOMw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5EAWOd",
                                           "createdAt":  "2022-05-30T09:45:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe indexer of Microsoft.Extensions.Logging.LoggerMessage.LogValues throws `new IndexOutOfRangeException(nameof(index))` if the index is out of range:\r\n\r\n\u003chttps://github.com/dotnet/runtime/blob/70ae3df4a6f3c92fb6b315afc405edd10ff38579/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/LoggerMessage.cs#L485\u003e\r\n\r\nHowever, the [IndexOutOfRangeException(string) constructor](https://docs.microsoft.com/dotnet/api/system.indexoutofrangeexception.-ctor?view=net-6.0#system-indexoutofrangeexception-ctor(system-string)) uses the string as Exception.Message, not as a parameter name. `nameof(index)` is not really suitable for Exception.Message. Perhaps the indexer should instead use the IndexOutOfRangeException() or ArgumentOutOfRangeException(string) constructor. Changing the type of the exception would have a higher risk of breaking something.\r\n\r\nThe same bug is in the generic LogValues classes, and also in the source generator:\r\n\r\n\u003chttps://github.com/dotnet/runtime/blob/70ae3df4a6f3c92fb6b315afc405edd10ff38579/src/libraries/Microsoft.Extensions.Logging.Abstractions/gen/LoggerMessageGenerator.Emitter.cs#L170\u003e\n\n### Reproduction Steps\n\nLoggerMessageOutOfRange.csproj:\r\n\r\n```XML\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet6.0\u003c/TargetFramework\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Logging.Abstractions\" Version=\"6.0.1\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\nProgram.cs:\r\n\r\n```C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Action\u003cILogger, string, Exception?\u003e message = LoggerMessage.Define\u003cstring\u003e(\r\n            LogLevel.Information,\r\n            new EventId(1, \"Event\"),\r\n            \"{Param}\");\r\n        message(new BrokenLogger(), \"dummy\", null);\r\n    }\r\n}\r\n\r\nclass BrokenLogger : ILogger\r\n{\r\n    public IDisposable? BeginScope\u003cTState\u003e(TState state) =\u003e null;\r\n\r\n    public bool IsEnabled(LogLevel logLevel) =\u003e true;\r\n\r\n    public void Log\u003cTState\u003e(\r\n        LogLevel logLevel,\r\n        EventId eventId,\r\n        TState state,\r\n        Exception? exception,\r\n        Func\u003cTState, Exception?, string\u003e formatter)\r\n    {\r\n        if (state is IReadOnlyList\u003cKeyValuePair\u003cstring, object?\u003e\u003e structured)\r\n        {\r\n            // IReadOnlyList\u003cT\u003e.Item[Int32] documentation does not say\r\n            // whether this should throw ArgumentOutOfRangeException\r\n            // (like IList\u003cT\u003e.Item[Int32]) or IndexOutOfRangeException.\r\n            _ = structured[structured.Count + 1];\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`dotnet run`\n\n### Expected behavior\n\nException.Message should be a sentence.\r\n\r\n```\r\nUnhandled exception. System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at Microsoft.Extensions.Logging.LoggerMessage.LogValues`1.get_Item(Int32 index)\r\n   at BrokenLogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter) in C:\\Projects\\Kalle\\LoggerMessageOutOfRange\\Program.cs:line 35\r\n   at Microsoft.Extensions.Logging.LoggerMessage.\u003c\u003ec__DisplayClass10_0`1.\u003cDefine\u003eg__Log|0(ILogger logger, T1 arg1, Exception exception)\r\n   at Microsoft.Extensions.Logging.LoggerMessage.\u003c\u003ec__DisplayClass10_0`1.\u003cDefine\u003eb__1(ILogger logger, T1 arg1, Exception exception)\r\n   at Program.Main() in C:\\Projects\\Kalle\\LoggerMessageOutOfRange\\Program.cs:line 13\r\n```\n\n### Actual behavior\n\nException.Message is just the identifier `index`.\r\n\r\n```\r\nUnhandled exception. System.IndexOutOfRangeException: index\r\n   at Microsoft.Extensions.Logging.LoggerMessage.LogValues`1.get_Item(Int32 index)\r\n   at BrokenLogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter) in C:\\Projects\\Kalle\\LoggerMessageOutOfRange\\Program.cs:line 35\r\n   at Microsoft.Extensions.Logging.LoggerMessage.\u003c\u003ec__DisplayClass10_0`1.\u003cDefine\u003eg__Log|0(ILogger logger, T1 arg1, Exception exception)\r\n   at Microsoft.Extensions.Logging.LoggerMessage.\u003c\u003ec__DisplayClass10_0`1.\u003cDefine\u003eb__1(ILogger logger, T1 arg1, Exception exception)\r\n   at Program.Main() in C:\\Projects\\Kalle\\LoggerMessageOutOfRange\\Program.cs:line 13\r\n```\n\n### Regression?\n\nNo, it worked this way already in \u003chttps://github.com/aspnet/Logging/pull/338\u003e.\n\n### Known Workarounds\n\nImplement the logger correctly so that it won\u0027t use an out-of-range index.\r\n\r\nOr catch the exception and throw a better one.\n\n### Configuration\n\n.NET SDK 6.0.300, runtime 6.0.5, on win10-x64.\r\nWindows 10 Pro version 21H2 (OS Build 19044.1706).\r\nNot specific to this configuration.\r\n\n\n### Other information\n\nI noticed this in the source code when looking for advice on how to support structured logging in a TState type. I was not using LoggerMessage because I wanted to specify the LogLevel in the logging call (mapping it from another logging system). The bug is unlikely to be hit in any production code, but it seems like something that should have been flagged by an analyzer and fixed.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eKalleOlaviNiemitalo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-30T09:45:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EVw4z",
                                           "createdAt":  "2022-06-04T07:14:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCh2aPA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2022-06-14T22:09:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I was implementing similar code and got this warning:\r\n\r\n\u003e warning CA1065: get_Item creates an exception of type IndexOutOfRangeException, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property\u0027s logic so that it no longer raises an exception.\r\n\r\nRelated:\r\n\r\n* [CA1065: Do not raise exceptions in unexpected locations](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1065)\r\n* \u003chttps://github.com/dotnet/roslyn-analyzers/blob/e52a3f1c0b45684ddaa041f26a980fa451ea9001/src/NetAnalyzers/Core/Microsoft.CodeQuality.Analyzers/ApiDesignGuidelines/DoNotRaiseExceptionsInUnexpectedLocations.cs#L170-L175\u003e\r\n\r\nSo, I\u0027ll use ArgumentOutOfRangeException(string paramName) in my own code. I assume this would be too much of a breaking change for .NET Runtime, though.",
                                           "updatedAt":  "2022-06-04T07:14:53Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "LogValues[int] throws new IndexOutOfRangeException(message: nameof(index))",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73328",
        "createdAt":  "2022-08-03T19:30:36Z",
        "number":  73328,
        "author":  "verdie-g",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqpfcQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VoX",
                                            "createdAt":  "2022-09-19T23:24:09Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-08-04T16:40:37Z",
        "body":  "### Background and motivation\n\nHere is a log of my application using JsonConsoleFormatter:\r\n```json\r\n{\r\n  \"Timestamp\":\"2022-08-03T18:41:29.7447618\\u002B00:00\",\r\n  \"EventId\":0,\r\n  \"LogLevel\":\"Information\",\r\n  \"Category\":\"Crpg.Application.Items.Commands.BuyItemCommand\",\r\n  \"Message\":\"User \\u00271\\u0027 bought item \\u0027banner_big\\u0027\",\r\n  \"State\":{\r\n    \"Message\":\"User \\u00271\\u0027 bought item \\u0027banner_big\\u0027\",\r\n    \"0\":1,\r\n    \"1\":\"banner_big\",\r\n    \"{OriginalFormat}\":\"User \\u0027{0}\\u0027 bought item \\u0027{1}\\u0027\"\r\n  },\r\n  \"Scopes\":[\r\n    {\r\n      \"Message\":\"SpanId:167980b069a14d3f, TraceId:00000000000000005bd6a38e4825e09e, ParentId:66b1523eea668af4\",\r\n      \"SpanId\":\"167980b069a14d3f\",\r\n      \"TraceId\":\"00000000000000005bd6a38e4825e09e\",\r\n      \"ParentId\":\"66b1523eea668af4\"\r\n    },\r\n    {\r\n      \"Message\":\"ConnectionId:0HMJK1853J2KC\",\r\n      \"ConnectionId\":\"0HMJK1853J2KC\"\r\n    },\r\n    {\r\n      \"Message\":\"RequestPath:/users/self/items RequestId:0HMJK1853J2KC:00000002\",\r\n      \"RequestId\":\"0HMJK1853J2KC:00000002\",\r\n      \"RequestPath\":\"/users/self/items\"\r\n    },\r\n    {\r\n      \"Message\":\"Crpg.WebApi.Controllers.UsersController.BuyItem (Crpg.WebApi)\",\r\n      \"ActionId\":\"27b7d110-505e-4296-b234-1ced1d9b69dd\",\r\n      \"ActionName\":\"Crpg.WebApi.Controllers.UsersController.BuyItem (Crpg.WebApi)\"\r\n    },\r\n    {\r\n      \"Message\":\"System.Collections.Generic.KeyValuePair\\u00602[System.String,System.Object][]\",\r\n      \"enduser.id\":1,\r\n      \"enduser.role\":\"User\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nIn my log collector I would like to filter logs by `enduser.id` but its key depends on the request. Here it\u0027s `Scopes.4.enduser.id` but it could also be `Scopes.3.enduser.id`. Also if for some reason, a middleware decides that the user is actually someone else and create a new scope I don\u0027t want to see two `enduser.id` in my scope but only the last one. For those reasons I would like my scopes merged like this:\r\n```json\r\n{\r\n  \"Timestamp\":\"2022-08-03T18:41:29.7447618\\u002B00:00\",\r\n  \"EventId\":0,\r\n  \"LogLevel\":\"Information\",\r\n  \"Category\":\"Crpg.Application.Items.Commands.BuyItemCommand\",\r\n  \"Message\":\"User \\u00271\\u0027 bought item \\u0027banner_big\\u0027\",\r\n  \"State\":{\r\n    \"Message\":\"User \\u00271\\u0027 bought item \\u0027banner_big\\u0027\",\r\n    \"0\":1,\r\n    \"1\":\"banner_big\",\r\n    \"{OriginalFormat}\":\"User \\u0027{0}\\u0027 bought item \\u0027{1}\\u0027\"\r\n  },\r\n  \"Scope\":{\r\n    \"SpanId\":\"167980b069a14d3f\",\r\n    \"TraceId\":\"00000000000000005bd6a38e4825e09e\",\r\n    \"ParentId\":\"66b1523eea668af4\",\r\n    \"ConnectionId\":\"0HMJK1853J2KC\",\r\n    \"RequestId\":\"0HMJK1853J2KC:00000002\",\r\n    \"RequestPath\":\"/users/self/items\",\r\n    \"ActionId\":\"27b7d110-505e-4296-b234-1ced1d9b69dd\",\r\n    \"ActionName\":\"Crpg.WebApi.Controllers.UsersController.BuyItem (Crpg.WebApi)\",\r\n    \"enduser.id\":1,\r\n    \"enduser.role\":\"User\"\r\n  }\r\n}\r\n```\r\n Here I can easily filter by `Scope.enduser.id`.\n\n### API Proposal\n\n```diff\r\n  public class ConsoleFormatterOptions\r\n  {\r\n      public ConsoleFormatterOptions() { }\r\n\r\n      public bool IncludeScopes { get; set; }\r\n+     public bool MergeScopes { get; set; }\r\n      public string? TimestampFormat { get; set; }\r\n      public bool UseUtcTimestamp { get; set; }\r\n  }\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR9SF6Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HyX3q",
                                           "createdAt":  "2022-08-03T19:30:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-08-03T19:30:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H1IXp",
                                           "createdAt":  "2022-08-04T11:09:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nHere is a log of my application using JsonConsoleFormatter:\r\n```json\r\n{\r\n  \"Timestamp\":\"2022-08-03T18:41:29.7447618\\u002B00:00\",\r\n  \"EventId\":0,\r\n  \"LogLevel\":\"Information\",\r\n  \"Category\":\"Crpg.Application.Items.Commands.BuyItemCommand\",\r\n  \"Message\":\"User \\u00271\\u0027 bought item \\u0027banner_big\\u0027\",\r\n  \"State\":{\r\n    \"Message\":\"User \\u00271\\u0027 bought item \\u0027banner_big\\u0027\",\r\n    \"0\":1,\r\n    \"1\":\"banner_big\",\r\n    \"{OriginalFormat}\":\"User \\u0027{0}\\u0027 bought item \\u0027{1}\\u0027\"\r\n  },\r\n  \"Scopes\":[\r\n    {\r\n      \"Message\":\"SpanId:167980b069a14d3f, TraceId:00000000000000005bd6a38e4825e09e, ParentId:66b1523eea668af4\",\r\n      \"SpanId\":\"167980b069a14d3f\",\r\n      \"TraceId\":\"00000000000000005bd6a38e4825e09e\",\r\n      \"ParentId\":\"66b1523eea668af4\"\r\n    },\r\n    {\r\n      \"Message\":\"ConnectionId:0HMJK1853J2KC\",\r\n      \"ConnectionId\":\"0HMJK1853J2KC\"\r\n    },\r\n    {\r\n      \"Message\":\"RequestPath:/users/self/items RequestId:0HMJK1853J2KC:00000002\",\r\n      \"RequestId\":\"0HMJK1853J2KC:00000002\",\r\n      \"RequestPath\":\"/users/self/items\"\r\n    },\r\n    {\r\n      \"Message\":\"Crpg.WebApi.Controllers.UsersController.BuyItem (Crpg.WebApi)\",\r\n      \"ActionId\":\"27b7d110-505e-4296-b234-1ced1d9b69dd\",\r\n      \"ActionName\":\"Crpg.WebApi.Controllers.UsersController.BuyItem (Crpg.WebApi)\"\r\n    },\r\n    {\r\n      \"Message\":\"System.Collections.Generic.KeyValuePair\\u00602[System.String,System.Object][]\",\r\n      \"enduser.id\":1,\r\n      \"enduser.role\":\"User\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nIn my log collector I would like to filter logs by `enduser.id` but its key depends on the request. Here it\u0027s `Scopes.4.enduser.id` but it could also be `Scopes.3.enduser.id`. Also if for some reason, a middleware decides that the user is actually someone else and create a new scope I don\u0027t want to see two `enduser.id` in my scope but only the last one. For those reasons I would like my scopes merged like this:\r\n```json\r\n{\r\n  \"Timestamp\":\"2022-08-03T18:41:29.7447618\\u002B00:00\",\r\n  \"EventId\":0,\r\n  \"LogLevel\":\"Information\",\r\n  \"Category\":\"Crpg.Application.Items.Commands.BuyItemCommand\",\r\n  \"Message\":\"User \\u00271\\u0027 bought item \\u0027banner_big\\u0027\",\r\n  \"State\":{\r\n    \"Message\":\"User \\u00271\\u0027 bought item \\u0027banner_big\\u0027\",\r\n    \"0\":1,\r\n    \"1\":\"banner_big\",\r\n    \"{OriginalFormat}\":\"User \\u0027{0}\\u0027 bought item \\u0027{1}\\u0027\"\r\n  },\r\n  \"Scope\":{\r\n    \"SpanId\":\"167980b069a14d3f\",\r\n    \"TraceId\":\"00000000000000005bd6a38e4825e09e\",\r\n    \"ParentId\":\"66b1523eea668af4\",\r\n    \"ConnectionId\":\"0HMJK1853J2KC\",\r\n    \"RequestId\":\"0HMJK1853J2KC:00000002\",\r\n    \"RequestPath\":\"/users/self/items\",\r\n    \"ActionId\":\"27b7d110-505e-4296-b234-1ced1d9b69dd\",\r\n    \"ActionName\":\"Crpg.WebApi.Controllers.UsersController.BuyItem (Crpg.WebApi)\",\r\n    \"enduser.id\":1,\r\n    \"enduser.role\":\"User\"\r\n  }\r\n}\r\n```\r\n Here I can easily filter by `Scope.enduser.id`.\n\n### API Proposal\n\n```diff\r\n  public class ConsoleFormatterOptions\r\n  {\r\n      public ConsoleFormatterOptions() { }\r\n\r\n      public bool IncludeScopes { get; set; }\r\n+     public bool MergeScopes { get; set; }\r\n      public string? TimestampFormat { get; set; }\r\n      public bool UseUtcTimestamp { get; set; }\r\n  }\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003everdie-g\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-04T11:09:20Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: ConsoleFormatterOptions.MergeScopes",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75764",
        "createdAt":  "2022-09-15T19:08:01Z",
        "number":  75764,
        "author":  "The-Futurist",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-26T20:26:45Z",
        "body":  "I\u0027ve spent several hours scouring the web and found precious little. I want an appname to be included in every logged message but it seems this is simply not supported.\r\n\r\nAll I can find is \"category\" but again I cannot find if that can be specified in appsettings or must be done in code.\r\n\r\nI am surprised that this is not supported, identifying the app that logs a message is surely rather a basic requirement?\r\n\r\nIn my case I\u0027m using event log but that that shouldn\u0027t matter (I don\u0027t want to rely on event log \"Source\" either as that\u0027s specific to the windows event log).\r\n\r\nHere\u0027s an example - the question our support desk will ask is \"Which application logged this?\"\r\n\r\n![image](https://user-images.githubusercontent.com/12262952/190490198-3e9f57d1-bf78-4d93-8967-f3c9e48e8cc3.png)\r\n\r\nOr look at this from a short run:\r\n\r\n![image](https://user-images.githubusercontent.com/12262952/190510956-5bd50c34-6329-43c8-99bd-912422d0fcd1.png)\r\n\r\nHow is anyone to know what app wrote these? how can anyone even know if they are from the same app?\r\n\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSwSNYQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5KezTH",
                                           "createdAt":  "2022-09-16T17:01:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI\u0027ve spent several hours scouring the web and found precious little. I want an appname to be included in every logged message but it seems this is simply not supported.\r\n\r\nAll I can find is \"category\" but again I cannot find if that can be specified in appsettings or must be done in code.\r\n\r\nI am surprised that this is not supported, identifying the app that logs a message is surely rather a basic requirement?\r\n\r\nIn my case I\u0027m using event log but that that shouldn\u0027t matter (I don\u0027t want to rely on event log \"Source\" either as that\u0027s specific to the windows event log).\r\n\r\nHere\u0027s an example - the question our support desk will ask is \"Which application logged this?\"\r\n\r\n![image](https://user-images.githubusercontent.com/12262952/190490198-3e9f57d1-bf78-4d93-8967-f3c9e48e8cc3.png)\r\n\r\nOr look at this from a short run:\r\n\r\n![image](https://user-images.githubusercontent.com/12262952/190510956-5bd50c34-6329-43c8-99bd-912422d0fcd1.png)\r\n\r\nHow is anyone to know what app wrote these? how can anyone even know if they are from the same app?\r\n\r\n\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eKorporal\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-16T17:01:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LBI1h",
                                           "createdAt":  "2022-09-26T20:26:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "\u003e All I can find is \"category\" but again I cannot find if that can be specified in appsettings or must be done in code.\r\n\r\nYou can set the category either in appsettings file or in code but as you figured in this case, you don\u0027t want to use category. Category is meant to allow the capability of categorizing different sets of logs in an app together so e.g. logging syncs could later filter them down if needed.\r\n\r\nYou\u0027d want to use log scopes instead. Logs that are wrapped around scopes would allow extra information (the scopes) be attached with those logs. Check out some usages of scopes in this doc for example: https://learn.microsoft.com/en-us/dotnet/core/extensions/console-log-formatter (look for code samples there with `IncludeScopes` and `BeginScope`).\r\n\r\nHope this helps.",
                                           "updatedAt":  "2022-09-26T20:26:37Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Logging - How to always have application name or moniker included in logged messages",
        "labels":  [
                       "question",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76119",
        "createdAt":  "2022-09-24T11:52:30Z",
        "number":  76119,
        "author":  "Youssef1313",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1et5Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austindrenski",
                                            "createdAt":  "2022-10-13T21:16:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-01-28T13:17:54Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-26T10:40:35Z",
        "body":  "### Description\n\nhttps://github.com/dotnet/runtime/blob/985eedd68df0b4fb3f541fe266c95fa0a1bc4a0a/src/libraries/Microsoft.Extensions.Logging.Abstractions/gen/LoggerMessageGenerator.Roslyn4.0.cs#L34-L35\r\n\r\nI think having the Compilation in the generator pipeline will cause it to fully run on every change, so this is losing the benefits of being incremental.\r\n\r\ncc @333fred\n\n### Reproduction Steps\n\n-\n\n### Expected behavior\n\nGenerator pipeline shouldn\u0027t have a `Compilation` or `ISymbol`s, etc.\n\n### Actual behavior\n\n-\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh2oX-g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5K645r",
                                           "createdAt":  "2022-09-24T11:52:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nhttps://github.com/dotnet/runtime/blob/985eedd68df0b4fb3f541fe266c95fa0a1bc4a0a/src/libraries/Microsoft.Extensions.Logging.Abstractions/gen/LoggerMessageGenerator.Roslyn4.0.cs#L34-L35\r\n\r\nI think having the Compilation in the generator pipeline will cause it to fully run on every change, so this is losing the benefits of being incremental.\r\n\r\ncc @333fred\n\n### Reproduction Steps\n\n-\n\n### Expected behavior\n\nGenerator pipeline shouldn\u0027t have a `Compilation` or `ISymbol`s, etc.\n\n### Actual behavior\n\n-\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eYoussef1313\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-24T11:52:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LAPAM",
                                           "createdAt":  "2022-09-26T17:05:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCs5g3A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2022-09-27T17:00:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Note that the exact same line exists in the System.Text.Json source generator:\r\n\r\nhttps://github.com/dotnet/runtime/blob/985eedd68df0b4fb3f541fe266c95fa0a1bc4a0a/src/libraries/System.Text.Json/gen/JsonSourceGenerator.Roslyn4.0.cs#L39-L40\r\n\r\nSo if a change is needed here - it should be made in both places.\r\n\r\ncc @CyrusNajmabadi @joperezr ",
                                           "updatedAt":  "2022-09-26T17:05:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LAPbY",
                                           "createdAt":  "2022-09-26T17:07:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Youssef1313",
                                           "body":  "Yeah, I think a change is needed to JsonSourceGenerator too.",
                                           "updatedAt":  "2022-09-26T17:07:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hahf6",
                                           "createdAt":  "2024-08-06T18:17:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Related https://github.com/dotnet/runtime/issues/93309\r\n\r\nWe discussed improving the incremental characteristics of the runtime source generators and scoped it out of 9.0",
                                           "updatedAt":  "2024-08-06T18:17:45Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Improve `LoggerMessageGenerator` incrementality",
        "labels":  [
                       "area-Extensions-Logging",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76556",
        "createdAt":  "2022-10-03T19:10:11Z",
        "number":  76556,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-10-05T22:12:49Z",
        "body":  "### Description\r\n\r\nWhen trying to configure console logging, in order to for `FormatterOptions` properties to be picked up, you need to also set `\"FormatterName\": \"simple\"`. This shouldn\u0027t be necessary - you should just be able to set `FormatterOptions`, and they should be picked up.\r\n\r\n### Reproduction Steps\r\n\r\n1. `dotnet new worker`\r\n2. Edit the appsettings.json file to be:\r\n```json\r\n{\r\n  \"Logging\": {\r\n    \"LogLevel\": {\r\n      \"Default\": \"Information\",\r\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\r\n    },\r\n    \"Console\": {\r\n      \"FormatterOptions\": {\r\n        \"UseUtcTimestamp\": true,\r\n        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss.ffffff\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n3. `dotnet run`\r\n\r\n### Expected behavior\r\n\r\nThe console log should have a time stamp at the beginning of the message:\r\n\r\n```\r\n2022-10-03 19:07:49.879151info: HostingTest.Worker[0]\r\n      Worker running at: 10/03/2022 14:07:49 -05:00\r\n2022-10-03 19:07:49.888352info: Microsoft.Hosting.Lifetime[0]\r\n      Application started. Press Ctrl+C to shut down.\r\n2022-10-03 19:07:49.888468info: Microsoft.Hosting.Lifetime[0]\r\n      Hosting environment: Development\r\n2022-10-03 19:07:49.888501info: Microsoft.Hosting.Lifetime[0]\r\n      Content root path: C:\\DotNetTest\\HostingTest\r\nAttempting to cancel the build...\r\n2022-10-03 19:07:50.585107info: Microsoft.Hosting.Lifetime[0]\r\n      Application is shutting down...\r\n```\r\n\r\n### Actual behavior\r\n\r\nThe console log doesn\u0027t contain a time stamp:\r\n\r\n```\r\ninfo: HostingTest.Worker[0]\r\n      Worker running at: 10/03/2022 14:08:39 -05:00\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Application started. Press Ctrl+C to shut down.\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Hosting environment: Development\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Content root path: C:\\DotNetTest\\HostingTest\r\ninfo: HostingTest.Worker[0]\r\n      Worker running at: 10/03/2022 14:08:40 -05:00\r\ninfo: HostingTest.Worker[0]\r\n      Worker running at: 10/03/2022 14:08:41 -05:00\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Application is shutting down...\r\nAttempting to cancel the build...\r\n```\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nTo workaround this, you need to also add `\"FormatterName\": \"simple\",` under the `Console` node in the config.\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOS3Qx-w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5LdDH7",
                                           "createdAt":  "2022-10-03T19:10:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen trying to configure console logging, in order to for `FormatterOptions` properties to be picked up, you need to also set `\"FormatterName\": \"simple\"`. This shouldn\u0027t be necessary - you should just be able to set `FormatterOptions`, and they should be picked up.\n\n### Reproduction Steps\n\n1. `dotnet new worker`\r\n2. Edit the appsettings.json file to be:\r\n```json\r\n{\r\n  \"Logging\": {\r\n    \"LogLevel\": {\r\n      \"Default\": \"Information\",\r\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\r\n    },\r\n    \"Console\": {\r\n      \"FormatterOptions\": {\r\n        \"UseUtcTimestamp\": true,\r\n        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss.ffffff\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n3. dotnet run\n\n### Expected behavior\n\nThe console log should have a time stamp at the beginning of the message:\r\n\r\n```\r\n2022-10-03 19:07:49.879151info: HostingTest.Worker[0]\r\n      Worker running at: 10/03/2022 14:07:49 -05:00\r\n2022-10-03 19:07:49.888352info: Microsoft.Hosting.Lifetime[0]\r\n      Application started. Press Ctrl+C to shut down.\r\n2022-10-03 19:07:49.888468info: Microsoft.Hosting.Lifetime[0]\r\n      Hosting environment: Development\r\n2022-10-03 19:07:49.888501info: Microsoft.Hosting.Lifetime[0]\r\n      Content root path: C:\\DotNetTest\\HostingTest\r\nAttempting to cancel the build...\r\n2022-10-03 19:07:50.585107info: Microsoft.Hosting.Lifetime[0]\r\n      Application is shutting down...\r\n```\n\n### Actual behavior\n\nThe console log doesn\u0027t contain a time stamp:\r\n\r\n```\r\ninfo: HostingTest.Worker[0]\r\n      Worker running at: 10/03/2022 14:08:39 -05:00\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Application started. Press Ctrl+C to shut down.\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Hosting environment: Development\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Content root path: C:\\DotNetTest\\HostingTest\r\ninfo: HostingTest.Worker[0]\r\n      Worker running at: 10/03/2022 14:08:40 -05:00\r\ninfo: HostingTest.Worker[0]\r\n      Worker running at: 10/03/2022 14:08:41 -05:00\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Application is shutting down...\r\nAttempting to cancel the build...\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nTo workaround this, you need to also add `\"FormatterName\": \"simple\",` under the `Console` node in the config.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-03T19:10:20Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Configuring Console Logging FormatterOptions doesn\u0027t work without setting FormatterName",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77210",
        "createdAt":  "2022-10-19T10:32:32Z",
        "number":  77210,
        "author":  "gokhanabatay",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-15T22:51:28Z",
        "body":  "Before `lock(_sync)` does it needs to check if logger already exists or not for better locking otherwise every `CreateLogger(string)` needs to lock one time.\r\n\r\nTo overcome this issue does we need to cache loggers and check if before creating.\r\n\r\n`ILogger\u003cT\u003e` registration is singleton I understand that if its already resolved then that does not hit this lock issue. But its not safe `CreteLogger(string)` for locking issue.\r\n\r\nSuggested code with double checks\r\n```c#\r\npublic ILogger CreateLogger(string categoryName)\r\n{\r\n    if (CheckDisposed())\r\n    {\r\n        throw new ObjectDisposedException(nameof(LoggerFactory));\r\n    }\r\n\r\n    if (!_loggers.TryGetValue(categoryName, out Logger? logger))\r\n    {\r\n        lock (_sync)\r\n        {\r\n            if (!_loggers.TryGetValue(categoryName, out logger))\r\n            {\r\n                logger = new Logger(CreateLoggers(categoryName));\r\n\r\n                (logger.MessageLoggers, logger.ScopeLoggers) = ApplyFilters(logger.Loggers);\r\n\r\n                _loggers[categoryName] = logger;\r\n            }\r\n        }\r\n    }\r\n    return logger;\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTMbmyA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5MhQi5",
                                           "createdAt":  "2022-10-19T10:32:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nBefore lock(_sync) does it needs to check if logger already exists or not for better locking otherwise every CreateLogger(string) needs to lock one time.\r\n\r\nTo overcome this issue does we need to cache loggers and check if before creating.\r\n\r\nILogger\u003cT\u003e registration is singleton I understand that if its already resolved then that does not hit this lock issue. But its not safe CreteLogger(string) for locking issue.\r\n\r\nSuggested code with double checks\r\n```c#\r\npublic ILogger CreateLogger(string categoryName)\r\n{\r\n    if (CheckDisposed())\r\n    {\r\n        throw new ObjectDisposedException(nameof(LoggerFactory));\r\n    }\r\n\r\n    if (!_loggers.TryGetValue(categoryName, out Logger? logger))\r\n    {\r\n        lock (_sync)\r\n        {\r\n            if (!_loggers.TryGetValue(categoryName, out logger))\r\n            {\r\n                logger = new Logger(CreateLoggers(categoryName));\r\n\r\n                (logger.MessageLoggers, logger.ScopeLoggers) = ApplyFilters(logger.Loggers);\r\n\r\n                _loggers[categoryName] = logger;\r\n            }\r\n        }\r\n    }\r\n    return logger;\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003egokhanabatay\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-19T10:32:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Mpd9m",
                                           "createdAt":  "2022-10-20T17:58:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Nick-Stanton",
                                           "body":  "Hi, do you have any perf numbers to share for this? Is `CreateLogger()` a bottleneck for your application?",
                                           "updatedAt":  "2022-10-20T17:58:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MpeBQ",
                                           "createdAt":  "2022-10-20T17:58:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2022-10-20T17:58:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MxubI",
                                           "createdAt":  "2022-10-23T12:38:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gokhanabatay",
                                           "body":  "\u003e Hi, do you have any perf numbers to share for this? Is `CreateLogger()` a bottleneck for your application?\r\n\r\nI don’t have any performance numbers after I see code I have implemented wrapper class that caches ILogger because every call to CreateLogger acquires lock. This code relies on fact that to CreateLogger is not used multi thread access under high load. To make it right I have posted above code that check wheter ILogger already exists before locking. If we use ILogger\u003cT\u003e there will be no problem because its registered to ioc as singleton.",
                                           "updatedAt":  "2022-10-23T12:38:56Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "LoggerFactory class registration is singleton create performance issue for manuel resolve",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77253",
        "createdAt":  "2022-10-20T08:44:41Z",
        "number":  77253,
        "author":  "Bouke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC50Ssw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KalleOlaviNiemitalo",
                                            "createdAt":  "2024-07-11T15:59:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ReubenBond",
                                            "createdAt":  "2024-07-31T01:46:09Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-30T18:55:46Z",
        "body":  "I want to pass structured data to `ILogger.Log` and have this represented in a human-readable format in the message string, and store the structured data deconstructed. The structured data I\u0027m passing in can be anything, amongst which types that implement `IEnumerable`.\r\n\r\nHowever this collides with `LogValuesFormatter` which performs [`ToString()` on the elements produced by `IEnumerable`][0]. For highly-structured data this often provides non-human readable output, e.g.```[SomeType, System.Collections.Generic.List`1[SomeOtherType]]```. Calling `ToString()` on the enumerated values is not ideal, as it doesn\u0027t pass any log format specifiers.\r\n\r\nThere is currently no way to opt-out of this undesired behaviour. The runtime does have an interface available to control how objects are represented as strings, namely `IFormattable`. As a user I would expect that implementing this interface for my structured data would use that instead of trying to be \"smart\" about my data by enumerating it.\r\n\r\nSo what I propose is the ability to control how structured data is formatted in the message. The runtime already has an interface to do opt-in to this behaviour: `IFormattable`. `LogValuesFormatter` would check for this interface and skip enumerating:\r\n\r\n```cs\r\n// don\u0027t enumerate values that are formattable\r\nif (value is IFormattable)\r\n{\r\n    return value;\r\n}\r\n```\r\n\r\n[0]: https://github.com/dotnet/runtime/blob/12f9f91031224a45c146812a7f4a41e8cdb87e1c/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/LogValuesFormatter.cs#L215-L247",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwRYxqQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5MmfSJ",
                                           "createdAt":  "2022-10-20T08:44:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-10-20T08:44:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MmwdP",
                                           "createdAt":  "2022-10-20T09:34:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI want to pass structured data to `ILogger.Log` and have this represented in a human-readable format in the message string, and store the structured data deconstructed. The structured data I\u0027m passing in can be anything, amongst which types that implement `IEnumerable`.\r\n\r\nHowever this collides with `LogValuesFormatter` which performs [`ToString()` on the elements produced by `IEnumerable`][0]. For highly-structured data this often provides non-human readable output, e.g.```[SomeType, System.Collections.Generic.List`1[SomeOtherType]]```. Calling `ToString()` on the enumerated values is not ideal, as it doesn\u0027t pass any log format specifiers.\r\n\r\nThere is currently no way to opt-out of this undesired behaviour. The runtime does have an interface available to control how objects are represented as strings, namely `IFormattable`. As a user I would expect that implementing this interface for my structured data would use that instead of trying to be \"smart\" about my data by enumerating it.\r\n\r\nSo what I propose is the ability to control how structured data is formatted in the message. The runtime already has an interface to do opt-in to this behaviour: `IFormattable`. `LogValuesFormatter` would check for this interface and skip enumerating:\r\n\r\n```cs\r\n// don\u0027t enumerate values that are formattable\r\nif (value is IFormattable)\r\n{\r\n    return value;\r\n}\r\n```\r\n\r\n[0]: https://github.com/dotnet/runtime/blob/12f9f91031224a45c146812a7f4a41e8cdb87e1c/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/LogValuesFormatter.cs#L215-L247\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eBouke\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-20T09:34:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MvJN5",
                                           "createdAt":  "2022-10-21T20:53:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Related to https://github.com/dotnet/runtime/issues/35995",
                                           "updatedAt":  "2022-10-21T20:53:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MvN6L",
                                           "createdAt":  "2022-10-21T21:19:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "@Bouke what do you think about the suggestion provided by @wekempf in https://github.com/dotnet/runtime/issues/35995#issuecomment-857297900 for this case?\r\n\r\n\u003e So what I propose is the ability to control how structured data is formatted in the message. The runtime already has an interface to do opt-in to this behaviour: IFormattable. LogValuesFormatter would check for this interface and skip enumerating:\r\n\r\nAre you suggesting to add an opt out flag? what would the runtime do otherwise when the opt out flag is set?",
                                           "updatedAt":  "2022-10-21T21:23:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MvOYn",
                                           "createdAt":  "2022-10-21T21:22:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "cc @JakenVeina who added this comment https://github.com/dotnet/runtime/issues/35995#issuecomment-864356753 in the other issue.",
                                           "updatedAt":  "2022-10-21T21:22:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Mwf37",
                                           "createdAt":  "2022-10-22T12:49:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Bouke",
                                           "body":  "\u003e @Bouke what do you think about the suggestion provided by @wekempf in [#35995 (comment)](https://github.com/dotnet/runtime/issues/35995#issuecomment-857297900) for this case?\r\n\r\nThat\u0027s something different, that issue is about adding structured data that _shouldn\u0027t_ affect the formatted message, and discussing whether additional APIs are needed to support that.\r\n\r\nThis is about LogValuesFormatter trying to be smart when creating log messages. It enumerates `IEnumerable`s and calls their `ToString()`, which is ok for simple arrays (`int[]`, `string[]` etc), but not so when the value is structured data. My proposal is to honour `IFormattable`: \r\n\r\n\u003e Provides functionality to format the value of an object into a string representation.\r\n\r\n.\r\n \r\n\u003e Are you suggesting to add an opt out flag? what would the runtime do otherwise when the opt out flag is set?\r\n\r\nYes. When opting out, the value will be passed as-is into the [string formatter][1] and thus use the `IFormattable` implementation of that value.\r\n\r\n[1]: https://github.com/dotnet/runtime/blob/215b39abf947da7a40b0cb137eab4bceb24ad3e3/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/LogValuesFormatter.cs#L151",
                                           "updatedAt":  "2022-10-22T12:49:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M9WLu",
                                           "createdAt":  "2022-10-25T21:12:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "@Bouke would you like to recommend an API suggestion and sample usages to go with a small repro code?\r\n\r\nPlease check out our [API review process](https://github.com/dotnet/runtime/blob/main/docs/project/api-review-process.md) and the [suggested format](https://github.com/dotnet/runtime/issues/new?assignees=\u0026labels=api-suggestion\u0026template=02_api_proposal.yml\u0026title=%5BAPI+Proposal%5D%3A+)\r\n\r\n",
                                           "updatedAt":  "2022-10-25T21:12:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EhZAS",
                                           "createdAt":  "2024-07-11T16:14:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Another way to implement this would be to make LogValuesFormatter check for a colon in the format item.\r\n\r\n```csharp\r\ninternal sealed class LoggableDurationList : List\u003cTimeSpan\u003e\r\n{\r\n    public override string ToString()\r\n    {\r\n        TimeSpan total = TimeSpan.Zero;\r\n        foreach (TimeSpan duration in this)\r\n        {\r\n            total += duration;\r\n        }\r\n        return $\"Total {total}\";\r\n    }\r\n}\r\n```\r\n\r\n```csharp\r\nILogger logger;\r\nvar durations = new LoggableDurationList() { TimeSpan.FromSeconds(42), TimeSpan.FromSeconds(69) };\r\n\r\n// No change in behavior.\r\n// Does not call LoggableDurationList.ToString().\r\n// Formats as a comma-delimited list of TimeSpan.ToString().\r\n// As in: string.Format(Processing duration: {0}\", string.Join(\", \", durations));\r\nlogger.LogInformation(\"Processing duration: {Durations}\", durations)\r\n\r\n// No change in behavior.\r\n// Formats the list as above, and then pads it to 30 characters.\r\n// As in: string.Format(Processing duration: {0,-30}\", string.Join(\", \", durations));\r\nlogger.LogInformation(\"Processing duration: {Durations,-30}\", durations)\r\n\r\n// NEW: Ignores IEnumerable and calls LoggableDurationList.ToString().\r\n// Discards the format string \"\" because LoggableDurationList does not implement IFormattable.\r\n// As in: string.Format(Processing duration: {0:}\", durations)\r\nlogger.LogInformation(\"Processing duration: {Durations:}\", durations);\r\n```\r\n\r\n",
                                           "updatedAt":  "2024-07-11T17:28:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BFjGp",
                                           "createdAt":  "2025-08-30T18:55:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I hit this today when logging instances of `Newtonsoft.Json.Linq.JValue`, where the underlying value could be `int` or `string`.  That type implements both IEnumerable and IFormattable, but enumerating the IEnumerable found no items, so the value was not logged.  If LogValuesFormatter had checked for IFormattable, I think I would have got the output I wanted.",
                                           "updatedAt":  "2025-08-30T18:55:46Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Control how LogValuesFormatter formats structured data, or: opt-out of enumerating structured data",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78112",
        "createdAt":  "2022-11-09T16:48:56Z",
        "number":  78112,
        "author":  "spottedmahn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-09T22:28:36Z",
        "body":  "Why do `Debug` \u0026 `Trace` level events go as `Information` level events when logging to Event Viewer? Event Viewer has a `Verbose` level so it would seem one or both could be mapped to that, no?  Doesn\u0027t that make more sense? 🤔\r\n\r\n![image](https://user-images.githubusercontent.com/14079228/200890157-efd75660-2863-4c1b-9d0c-0fb25b411deb.png)\r\n\r\nreference: [Microsoft.Extensions.Logging.EventLog.EventLogLogger::GetEventLogEntryType()](https://github.com/dotnet/runtime/blob/bd7e1cb81d763589b95f7bfbaa2a96dd364e9103/src/libraries/Microsoft.Extensions.Logging.EventLog/src/EventLogLogger.cs#L185)\r\n\r\n```csharp\r\nprivate static EventLogEntryType GetEventLogEntryType(LogLevel level)\r\n{\r\n\tswitch (level)\r\n\t{\r\n\t\tcase LogLevel.Information:\r\n\t\tcase LogLevel.Debug:\r\n\t\tcase LogLevel.Trace:\r\n\t\t\treturn EventLogEntryType.Information;\r\n\t\tcase LogLevel.Warning:\r\n\t\t\treturn EventLogEntryType.Warning;\r\n\t\tcase LogLevel.Critical:\r\n\t\tcase LogLevel.Error:\r\n\t\t\treturn EventLogEntryType.Error;\r\n\t\tdefault:\r\n\t\t\treturn EventLogEntryType.Information;\r\n\t}\r\n}\r\n```\r\n\r\nusage of `ILogger`:\r\n```csharp\r\nlogger.LogTrace(\"trace\");\r\nlogger.LogDebug(\"debug\");\r\nlogger.LogInformation(\"info\");\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTgleow==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5OCV6j",
                                           "createdAt":  "2022-11-09T19:11:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhy do `Debug` \u0026 `Trace` level events go as `Information` level events when logging to Event Viewer? Event Viewer has a `Verbose` level so it would seem one or both could be mapped to that, no?  Doesn\u0027t that make more sense? 🤔\r\n\r\n![image](https://user-images.githubusercontent.com/14079228/200890157-efd75660-2863-4c1b-9d0c-0fb25b411deb.png)\r\n\r\nreference: [Microsoft.Extensions.Logging.EventLog.EventLogLogger::GetEventLogEntryType()](https://github.com/dotnet/runtime/blob/bd7e1cb81d763589b95f7bfbaa2a96dd364e9103/src/libraries/Microsoft.Extensions.Logging.EventLog/src/EventLogLogger.cs#L185)\r\n\r\n```csharp\r\nprivate static EventLogEntryType GetEventLogEntryType(LogLevel level)\r\n{\r\n\tswitch (level)\r\n\t{\r\n\t\tcase LogLevel.Information:\r\n\t\tcase LogLevel.Debug:\r\n\t\tcase LogLevel.Trace:\r\n\t\t\treturn EventLogEntryType.Information;\r\n\t\tcase LogLevel.Warning:\r\n\t\t\treturn EventLogEntryType.Warning;\r\n\t\tcase LogLevel.Critical:\r\n\t\tcase LogLevel.Error:\r\n\t\t\treturn EventLogEntryType.Error;\r\n\t\tdefault:\r\n\t\t\treturn EventLogEntryType.Information;\r\n\t}\r\n}\r\n```\r\n\r\nusage of `ILogger`:\r\n```csharp\r\nlogger.LogTrace(\"trace\");\r\nlogger.LogDebug(\"debug\");\r\nlogger.LogInformation(\"info\");\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003espottedmahn\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-09T19:11:14Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Change Event Viewer Log Level Mapping for Debug and/or Trace",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78406",
        "createdAt":  "2022-11-15T17:48:41Z",
        "number":  78406,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9GR1g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "grosch-intl",
                                            "createdAt":  "2023-12-14T08:30:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "delixfe",
                                            "createdAt":  "2024-12-01T15:57:52Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-06-20T23:01:44Z",
        "body":  "Just as we have a regex source generator analyzer that flags use of Regex and creates a replacement that uses the source generator, we should consider an analyzer that will push code to use the logging source generator.  The analyzer would flag direct use of LoggerExtensions.Log* methods and recommend replacing them with use of the logging generator, with the fixer generating a partial method stub for the generator and changing the call site to use it.\r\n\r\n[Performance rules Category](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/performance-warnings)\r\n[Severity = none](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-options#severity-level) (off by default)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYpP5EQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Oa3q3",
                                           "createdAt":  "2022-11-15T17:48:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nJust as we have a regex source generator analyzer that flags use of Regex and creates a replacement that uses the source generator, we should consider an analyzer that will push code to use the logging source generator.  The analyzer would flag direct use of LoggerExtensions.Log* methods and recommend replacing them with use of the logging generator, with the fixer generating a partial method stub for the generator and changing the call site to use it.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-15T17:48:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Oa60x",
                                           "createdAt":  "2022-11-15T18:01:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I\u0027ll be careful doing that. using `LoggerExtensions.Log` still legitimate and many users already using it.  Even producing analyzer info and not warning for this is not desirable for the users. I wouldn\u0027t mind having this analyzer, but it should be off by default. @stephentoub what you think about that? \r\n\r\nCC @ericstj @Youssef1313 ",
                                           "updatedAt":  "2022-11-15T18:01:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Obvwi",
                                           "createdAt":  "2022-11-15T21:39:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvpOPA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2022-11-15T21:41:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pinkfloydx33",
                                           "body":  "Please off by default...especially for quick utility apps that don\u0027t really care about perf gains from logging. I\u0027d hate to suddenly have a ton of diagnostics... at any level. Regex is one thing, but log messages are typically at a totally different scale.\r\n\r\nAnd *please* not before fixing issues with object destructuring syntax in the logger messages, ie. `\"My {@Thing} did something\"` and the various other requests still open that prevent using the generator in some cases. ",
                                           "updatedAt":  "2022-11-15T23:10:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ObwaJ",
                                           "createdAt":  "2022-11-15T21:42:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I\u0027d hate to suddenly have a ton of analyzer warnings (or broken builds with TreatWarningsAsErrors) like I did with the Regex generator\r\n\r\nThe regex analyzer defaults to info level; that wouldn\u0027t show up in command-line builds at all, and in VS would show up only as suggestions.  Unless you changed the default level, it should never break the build.  If we added an analyzer for logging it similarly wouldn\u0027t be warning or error; none of our performance-focused analyzers are.\r\n\r\n\u003e And please not before fixing issues with object destructuring syntax in the logger messages, ie. \"My {@Thing} did something\" and the various other requests still open that prevent using the generator in some cases.\r\n\r\nAn analyzer shouldn\u0027t fire if it the thing it\u0027s targeting can\u0027t actually be replaced.  For example, the regex analyzer won\u0027t raise a diagnostic if the pattern isn\u0027t a const, because that can\u0027t be rewritten to use the source generator.  Similarly, if there are messages that can\u0027t statically be proven to work with the logging generator, the analyzer shouldn\u0027t raise a diagnostic.",
                                           "updatedAt":  "2022-11-15T21:44:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Obxv2",
                                           "createdAt":  "2022-11-15T21:48:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e or logging it similarly wouldn\u0027t be warning or error\r\n\r\nLogging users didn\u0027t even like suggestions to be shown either and they were confused between suggestions and warning. For this rule, I believe it should be off by default and users can opt-in using it. The suggested methods we need to analyze are used a lot across the board and are still legitimate to use.",
                                           "updatedAt":  "2022-11-15T21:48:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OcGQP",
                                           "createdAt":  "2022-11-15T23:07:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pinkfloydx33",
                                           "body":  "\u003e The regex analyzer defaults to info level;\r\n\r\nYou\u0027re right... my mistake. But the info messages that *didn\u0027t* show up when building locally triggered during Sonar Cloud analysis and apparently they\u0027re picking up SYSLIB info messages as code smells, failing my build. Sorry, Misinterpreted what happened on my end....\r\n\r\nI fixed the regex generator ones anyways, so all good. But I\u0027d hate to have a ton of info/suggestion-level diags for all the logger calls showing up in VS (or apparently angering sonar cloud!)",
                                           "updatedAt":  "2022-11-15T23:09:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O02NE",
                                           "createdAt":  "2022-11-21T18:24:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I have edited the description to have this analyzer `off by default` and will be part of performance category. Let me know if you have any concerns about that.",
                                           "updatedAt":  "2022-11-21T18:24:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O02Zv",
                                           "createdAt":  "2022-11-21T18:24:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @Youssef1313 ",
                                           "updatedAt":  "2022-11-21T18:24:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O7Na3",
                                           "createdAt":  "2022-11-22T19:28:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "Looks good as proposed.\r\n\r\nSince the fixer will have trouble creating the partial method + attribute when the message template is not a string literal, a different diagnostic ID should be used for literal templates and non-literal templates.\r\n\r\nConsider using a second pair of diagnostic IDs for LoggerMessage.Define-based logging.\r\n\r\nCategory:Performance\r\nSeverity:none (requires manual opt-in)",
                                           "updatedAt":  "2022-11-22T19:28:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ij9HF",
                                           "createdAt":  "2023-07-27T13:07:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrahhal",
                                           "body":  "Have a clarifying question before deciding to work on this.\r\n\r\nThe fixer would have to create a partial method stub as explained, but this needs to be in a partial class (in the [docs](https://learn.microsoft.com/en-us/dotnet/core/extensions/logger-message-generator#basic-usage), this is shown as a static partial `Log` class). How do we know where to generate this method stub in?\r\n\r\nJust tried SYSLIB1045 (regex) in code, and it seems to simply add `partial` to the current class. Guessing we can just do the same?",
                                           "updatedAt":  "2023-07-27T13:07:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ik_kR",
                                           "createdAt":  "2023-07-27T15:35:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@mrahhal yes, please mimic regex behavior and include the method inside the current class with adding partial specifier. ",
                                           "updatedAt":  "2023-07-27T15:35:54Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[Analyzer] Replacing direct LoggerExtensions.Log* usage with source-generated logging methods",
        "labels":  [
                       "api-approved",
                       "help wanted",
                       "code-analyzer",
                       "code-fixer",
                       "area-Extensions-Logging",
                       "partner-impact"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79028",
        "createdAt":  "2022-11-30T09:37:54Z",
        "number":  79028,
        "author":  "wazzamatazz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0455A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ericstj",
                                            "createdAt":  "2023-05-23T21:17:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Micke3rd",
                                            "createdAt":  "2023-12-30T10:34:23Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-11-30T18:41:54Z",
        "body":  "### Background and motivation\n\nWhen using source-generated logging methods in a type that may have multiple instances at runtime, it is currently required to manually call `ILogger.BeginScope` if you want to apply a scope to the logger: \r\n\r\n```cs\r\n\r\nvoid DoStuff() {\r\n    var stopwatch = Stopwatch.StartNew();\r\n\r\n    try {\r\n      // ...\r\n    }\r\n    catch (Exception e) {\r\n      using (_logger.BeginScope(_instanceId)) {\r\n        LogOperationFaulted(e, \"Do Stuff\", stopwatch.Elapsed);\r\n      }\r\n    }\r\n}\r\n\r\n[LoggerMessage(EventId = 0, Level = LogLevel.Error, Message = \"Operation \u0027{name}\u0027 faulted after {elapsed}.\")]\r\npartial void LogOperationFaulted(Exception e, string name, TimeSpan elapsed);\r\n```\r\n\r\nHowever, the source-generated logger method might not actually log anything due to its logging threshold, meaning that the scope\u0027s `IDisposable` was created for no reason. The block can be wrapped in an `if (_logger.IsEnabled(LogLevel.SomeValue)) { ... }` to avoid this but this removes one of the benefits of having source-generated logging methods in the first place.\r\n\r\nBy allowing the `partial` log method signature to annotate one of its parameters with an attribute or similar, the generated method could create the scope for the duration of the method call if the log level was enabled.\n\n### API Proposal\n\n```csharp\r\nnamespace Microsoft.Extensions.Logging\r\n\r\n[AttributeUsage(AttributeTargets.Parameter, Inherited = false, AllowMultiple = false)]\r\npublic class LoggerScopeAttribute : Attribute { }\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n// Declare a partial logger method\r\n[LoggerMessage(EventId = 0, Level = LogLevel.Error, Message = \"Operation \u0027{name}\u0027 faulted after {elapsed}.\")]\r\npartial void LogOperationFaulted([LoggerScope] string scope, Exception e, string name, TimeSpan elapsed);\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOT2LaKg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PYtoq",
                                           "createdAt":  "2022-11-30T09:38:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nWhen using source-generated logging methods in a type that may have multiple instances at runtime, it is currently required to manually call `ILogger.BeginScope` if you want to apply a scope to the logger: \r\n\r\n```cs\r\n\r\nvoid DoStuff() {\r\n    var stopwatch = Stopwatch.StartNew();\r\n\r\n    try {\r\n      // ...\r\n    }\r\n    catch (Exception e) {\r\n      using (_logger.BeginScope(_instanceId)) {\r\n        LogOperationFaulted(e, \"Do Stuff\", stopwatch.Elapsed);\r\n      }\r\n    }\r\n}\r\n\r\n[LoggerMessage(EventId = 0, Level = LogLevel.Error, Message = \"Operation \u0027{name}\u0027 faulted after {elapsed}.\")]\r\npartial void LogOperationFaulted(Exception e, string name, TimeSpan elapsed);\r\n```\r\n\r\nHowever, the source-generated logger method might not actually log anything due to its logging threshold, meaning that the scope\u0027s `IDisposable` was created for no reason. The block can be wrapped in an `if (_logger.IsEnabled(LogLevel.SomeValue)) { ... }` to avoid this but this removes one of the benefits of having source-generated logging methods in the first place.\r\n\r\nBy allowing the `partial` log method signature to annotate one of its parameters with an attribute or similar, the generated method could create the scope for the duration of the method call if the log level was enabled.\n\n### API Proposal\n\n```csharp\r\nnamespace Microsoft.Extensions.Logging\r\n\r\n[AttributeUsage(AttributeTargets.Parameter, Inherited = false, AllowMultiple = false)]\r\npublic class LoggerScopeAttribute : Attribute { }\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n// Declare a partial logger method\r\n[LoggerMessage(EventId = 0, Level = LogLevel.Error, Message = \"Operation \u0027{name}\u0027 faulted after {elapsed}.\")]\r\npartial void LogOperationFaulted([LoggerScope] string scope, Exception e, string name, TimeSpan elapsed);\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ewazzamatazz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-30T09:38:02Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: Allow source generated logging methods to receive a scope parameter",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80530",
        "createdAt":  "2023-01-12T00:11:42Z",
        "number":  80530,
        "author":  "nickdevore",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-12T14:24:34Z",
        "body":  "### Background and motivation\n\nExtend the `LogError` of `ILogger` to allow for a typed `Exception` to be passed in AND returned so that it can be thrown all in one call.  Currently, in order to create log an exception, you have to generate the exception, log it, then throw it.  \r\n\r\n```csharp\r\npublic void SomeReallyAmazingFunction()\r\n{\r\n    // Doing something amazing but bump up against something that throws an exception\r\n    if (badScenario == true)\r\n    {\r\n         var e = new InvalidOperationException(\"You did something wrong\");\r\n        _logger.LogError(e, \"The user did something bad for id {0}\", new { id });\r\n        throw e;\r\n    }\r\n}\r\n```\r\n\r\nIf you provided an overload that took in the exception as a type and returned that type, then it could be combined into a single call\n\n### API Proposal\n\n```csharp\r\npublic static class ILoggerExtensions\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Formats and writes an error log message.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"logger\"\u003eThe \u003csee cref=\"ILogger\"/\u003e to write to.\u003c/param\u003e\r\n        /// \u003cparam name=\"exception\"\u003eThe exception to log.\u003c/param\u003e\r\n        /// \u003cparam name=\"message\"\u003eFormat string of the log message in message template format. Example: \u003cc\u003e\"User {User} logged in from {Address}\"\u003c/c\u003e\u003c/param\u003e\r\n        /// \u003cparam name=\"args\"\u003eAn object array that contains zero or more objects to format.\u003c/param\u003e\r\n        /// \u003cexample\u003elogger.LogError(0, exception, \"Error while processing request from {Address}\", address)\u003c/example\u003e\r\n        /// \u003creturns\u003eThe \u003cparamref name=\"exception\"/\u003e passed in\u003c/returns\u003e\r\n        public static TException LogError\u003cTException\u003e(this ILogger logger, TException exception, string? message, params? object[] args) where TException : Exception\r\n        {\r\n            logger.Log(LogLevel.Error, exception, message, args);\r\n            return exception;\r\n        }\r\n\r\n        /// \u003csummary\u003e\r\n        /// Formats and writes an error log message.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"logger\"\u003eThe \u003csee cref=\"ILogger\"/\u003e to write to.\u003c/param\u003e\r\n        /// \u003cparam name=\"exception\"\u003eThe exception to log.\u003c/param\u003e\r\n        /// \u003cexample\u003elogger.LogError(0, exception, \"Error while processing request from {Address}\", address)\u003c/example\u003e\r\n        /// \u003creturns\u003eThe \u003cparamref name=\"exception\"/\u003e passed in\u003c/returns\u003e\r\n        public static TException LogError\u003cTException\u003e(this ILogger logger, TException exception) where TException : Exception\r\n        {\r\n            logger.Log(LogLevel.Error, exception, null, null);\r\n            return exception;\r\n        }\r\n    }\r\n```\r\n\n\n### API Usage\n\n```csharp\r\npublic class AmazingProcess\r\n{\r\n    private ILogger _logger;\r\n\r\n    public void SomeReallyAmazingFunction()\r\n    {\r\n        // Doing something amazing but bump up against something that throws an exception\r\n        if (badScenario == true)\r\n        {\r\n            throw _logger.LogError(new SomethingReallyBadHappenedException(\"This is the really bad thing that happened\"));\r\n        }\r\n    }\r\n}\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUjuwQA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5SO7BA",
                                           "createdAt":  "2023-01-12T00:11:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nExtend the `LogError` of `ILogger` to allow for a typed `Exception` to be passed in AND returned so that it can be thrown all in one call.  Currently, in order to create log an exception, you have to generate the exception, log it, then throw it.  \r\n\r\n```csharp\r\npublic void SomeReallyAmazingFunction()\r\n{\r\n    // Doing something amazing but bump up against something that throws an exception\r\n    if (badScenario == true)\r\n    {\r\n         var e = new InvalidOperationException(\"You did something wrong\");\r\n        _logger.LogError(e, \"The user did something bad for id {0}\", new { id });\r\n        throw e;\r\n    }\r\n}\r\n```\r\n\r\nIf you provided an overload that took in the exception as a type and returned that type, then it could be combined into a single call\n\n### API Proposal\n\n```csharp\r\npublic static class ILoggerExtensions\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Formats and writes an error log message.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"logger\"\u003eThe \u003csee cref=\"ILogger\"/\u003e to write to.\u003c/param\u003e\r\n        /// \u003cparam name=\"exception\"\u003eThe exception to log.\u003c/param\u003e\r\n        /// \u003cparam name=\"message\"\u003eFormat string of the log message in message template format. Example: \u003cc\u003e\"User {User} logged in from {Address}\"\u003c/c\u003e\u003c/param\u003e\r\n        /// \u003cparam name=\"args\"\u003eAn object array that contains zero or more objects to format.\u003c/param\u003e\r\n        /// \u003cexample\u003elogger.LogError(0, exception, \"Error while processing request from {Address}\", address)\u003c/example\u003e\r\n        /// \u003creturns\u003eThe \u003cparamref name=\"exception\"/\u003e passed in\u003c/returns\u003e\r\n        public static TException LogError\u003cTException\u003e(this ILogger logger, TException exception, string? message, params? object[] args) where TException : Exception\r\n        {\r\n            logger.Log(LogLevel.Error, exception, message, args);\r\n            return exception;\r\n        }\r\n\r\n        /// \u003csummary\u003e\r\n        /// Formats and writes an error log message.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"logger\"\u003eThe \u003csee cref=\"ILogger\"/\u003e to write to.\u003c/param\u003e\r\n        /// \u003cparam name=\"exception\"\u003eThe exception to log.\u003c/param\u003e\r\n        /// \u003cexample\u003elogger.LogError(0, exception, \"Error while processing request from {Address}\", address)\u003c/example\u003e\r\n        /// \u003creturns\u003eThe \u003cparamref name=\"exception\"/\u003e passed in\u003c/returns\u003e\r\n        public static TException LogError\u003cTException\u003e(this ILogger logger, TException exception) where TException : Exception\r\n        {\r\n            logger.Log(LogLevel.Error, exception, null, null);\r\n            return exception;\r\n        }\r\n    }\r\n```\r\n\n\n### API Usage\n\n```csharp\r\npublic class AmazingProcess\r\n{\r\n    private ILogger _logger;\r\n\r\n    public void SomeReallyAmazingFunction()\r\n    {\r\n        // Doing something amazing but bump up against something that throws an exception\r\n        if (badScenario == true)\r\n        {\r\n            throw _logger.LogError(new SomethingReallyBadHappenedException(\"This is the really bad thing that happened\"));\r\n        }\r\n    }\r\n}\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enickdevore\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-12T00:11:51Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: Add a LogError overload that returns the exception argument.",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80724",
        "createdAt":  "2023-01-16T17:52:04Z",
        "number":  80724,
        "author":  "KeithHenry",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9iT7g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kachalkov",
                                            "createdAt":  "2023-06-23T13:53:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RayKoopa",
                                            "createdAt":  "2024-11-08T14:20:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StefanGreve",
                                            "createdAt":  "2024-11-21T13:09:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nticotet",
                                            "createdAt":  "2024-12-17T12:45:41Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-03-31T22:40:41Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\n`WebApplication.CreateBuilder` checks for whether it is running on Windows, and if it is then it calls `AddEventLog()` with settings from `Logging:EventLog`\r\n\r\nIf you set `Logging:EventLog:LogLevel` those settings are honoured.\r\n\r\nIf you set `Logging:EventLog:SourceName` in `appsettings.json` it is ignored, logs write as `\".NET Runtime\"`.\r\n\r\nI can work around this by manually re-registering the event logger provider:\r\n\r\n```c#\r\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\r\n    public static void SetEventLogConfig(WebApplicationBuilder builder) {\r\n        string? eventLog = builder.Configuration[\"Logging:EventLog:SourceName\"];\r\n        if(eventLog is not null)\r\n            builder.Logging.AddEventLog(c =\u003e c.SourceName = eventLog);\r\n    }\r\n\r\n// then in program.cs\r\nvar builder = WebApplication.CreateBuilder(args);\r\n...\r\nif(RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\r\n    SetEventLogConfig(builder);\r\n```\n\n### Expected Behavior\n\nIf you set `Logging:EventLog:SourceName` it should be used by the logging provider.\r\n\r\nEither `WebApplication.CreateBuilder` should pick up the `appsettings.json` for `AddEventLog()`, or it should not call it at all. \r\n\r\nSome better documentation on what is supported in this logger would be extremely helpful.\n\n### Steps To Reproduce\n\n- Create any basic project with .NET 6 or above\u0027s `WebApplication.CreateBuilder` \r\n- Add a call after `app = builder.Build()` to `app.Logger.LogCritical(\"test message\")`.\r\n- Add this to `appsettings.json`:\r\n```json\r\n  \"Logging\": {\r\n    \"EventLog\": {\r\n      \"LogLevel\": {\r\n        \"Default\": \"Warning\"\r\n      },\r\n      \"SourceName\": \"testLog\"\r\n    }\r\n  }\r\n```\r\n- Register the new log source on the server with:\r\n```powershell\r\nnew-eventlog -LogName Application -source testLog\r\n```\r\n- Run your app\r\n- Check Event Viewer \u003e Application and the _\"test message\"_ will be under `\".NET Runtime\"`, they should be under source `\"testLog\"`\n\n### Exceptions (if any)\n\nNone\n\n### .NET Version\n\n7.0.101\n\n### Anything else?\n\nTested with VS 2022 and VSCode on different machines, but mine has:\r\n\r\n```\r\ndotnet --info\r\n.NET SDK:\r\n Version:   7.0.101\r\n Commit:    bb24aafa11\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.101\\\r\n\r\nHost:\r\n  Version:      7.0.1\r\n  Architecture: x64\r\n  Commit:       97203d38ba\r\n\r\n.NET SDKs installed:\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.818 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.401 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.304 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.307 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  arm64 [C:\\Program Files\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\arm64\\InstallLocation]\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpPTS4w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Si0_t",
                                           "createdAt":  "2023-01-17T05:41:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-01-17T05:41:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SjMnB",
                                           "createdAt":  "2023-01-17T07:46:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KeithHenry",
                                           "body":  " @dotnet-issue-labeler I don\u0027t, but I\u0027d guess `[area-Extensions-Logging]`",
                                           "updatedAt":  "2023-01-17T07:46:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SjPnK",
                                           "createdAt":  "2023-01-17T07:52:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\n`WebApplication.CreateBuilder` checks for whether it is running on Windows, and if it is then it calls `AddEventLog()` with settings from `Logging:EventLog`\r\n\r\nIf you set `Logging:EventLog:LogLevel` those settings are honoured.\r\n\r\nIf you set `Logging:EventLog:SourceName` in `appsettings.json` it is ignored, logs write as `\".NET Runtime\"`.\r\n\r\nI can work around this by manually re-registering the event logger provider:\r\n\r\n```c#\r\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\r\n    public static void SetEventLogConfig(WebApplicationBuilder builder) {\r\n        string? eventLog = builder.Configuration[\"Logging:EventLog:SourceName\"];\r\n        if(eventLog is not null)\r\n            builder.Logging.AddEventLog(c =\u003e c.SourceName = eventLog);\r\n    }\r\n\r\n// then in program.cs\r\nvar builder = WebApplication.CreateBuilder(args);\r\n...\r\nif(RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\r\n    SetEventLogConfig(builder);\r\n```\n\n### Expected Behavior\n\nIf you set `Logging:EventLog:SourceName` it should be used by the logging provider.\r\n\r\nEither `WebApplication.CreateBuilder` should pick up the `appsettings.json` for `AddEventLog()`, or it should not call it at all. \r\n\r\nSome better documentation on what is supported in this logger would be extremely helpful.\n\n### Steps To Reproduce\n\n- Create any basic project with .NET 6 or above\u0027s `WebApplication.CreateBuilder` \r\n- Add a call after `app = builder.Build()` to `app.Logger.LogCritical(\"test message\")`.\r\n- Add this to `appsettings.json`:\r\n```json\r\n  \"Logging\": {\r\n    \"EventLog\": {\r\n      \"LogLevel\": {\r\n        \"Default\": \"Warning\"\r\n      },\r\n      \"SourceName\": \"testLog\"\r\n    }\r\n  }\r\n```\r\n- Register the new log source on the server with:\r\n```powershell\r\nnew-eventlog -LogName Application -source testLog\r\n```\r\n- Run your app\r\n- Check Event Viewer \u003e Application and the _\"test message\"_ will be under `\".NET Runtime\"`, they should be under source `\"testLog\"`\n\n### Exceptions (if any)\n\nNone\n\n### .NET Version\n\n7.0.101\n\n### Anything else?\n\nTested with VS 2022 and VSCode on different machines, but mine has:\r\n\r\n```\r\ndotnet --info\r\n.NET SDK:\r\n Version:   7.0.101\r\n Commit:    bb24aafa11\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.101\\\r\n\r\nHost:\r\n  Version:      7.0.1\r\n  Architecture: x64\r\n  Commit:       97203d38ba\r\n\r\n.NET SDKs installed:\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.818 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.401 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.304 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.307 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  arm64 [C:\\Program Files\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\arm64\\InstallLocation]\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eKeithHenry\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-17T07:52:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gpcY7",
                                           "createdAt":  "2023-07-05T10:25:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7BHeg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nelsonmorais",
                                                                               "createdAt":  "2024-02-14T16:24:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "toso06",
                                                                               "createdAt":  "2024-02-29T13:55:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tramhuynhtd",
                                                                               "createdAt":  "2024-06-13T06:46:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonhagser",
                                                                               "createdAt":  "2024-06-24T11:36:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RayKoopa",
                                                                               "createdAt":  "2024-11-08T14:40:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StefanGreve",
                                                                               "createdAt":  "2024-11-15T09:30:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "KeithHenry",
                                           "body":  "What\u0027s happening on this? It\u0027s been 6 months.",
                                           "updatedAt":  "2023-07-05T10:25:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BBibx",
                                           "createdAt":  "2024-06-13T06:47:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD8FPig==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RayKoopa",
                                                                               "createdAt":  "2024-11-08T14:40:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Moorepheus",
                                                                               "createdAt":  "2024-11-22T12:22:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tramhuynhtd",
                                           "body":  "Hi, Is there any update on this?",
                                           "updatedAt":  "2024-06-13T06:47:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S60KG",
                                           "createdAt":  "2024-11-08T14:23:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD8FPhg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Moorepheus",
                                                                               "createdAt":  "2024-11-22T12:22:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "RayKoopa",
                                           "body":  "Any update would be appreciated, setting up Windows Event Log logging has always been a painful experience to me from \"silent failures\" when setting it up (for example, setting `LogName` requiring admin rights, or settings `SourceName` preventing all logging, or not being respected at all as laid out in this issue).",
                                           "updatedAt":  "2024-11-08T14:23:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6k9NLj",
                                           "createdAt":  "2025-03-31T21:57:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xemed-ahope",
                                           "body":  "IMHO, the main problem is that there\u0027s no obvious way to discover the mechanism intended for the desired use case. The workaround in the issue description isn\u0027t required. As implemented, `EventLogSettings` can either be hardcoded (as a concrete instance or `Action\u003cEventLogSettings\u003e`) or drawn from configuration via the options pattern. The former is perfectly clear from the `AddEventLog` overloads, but the latter requires an extra, unintuitive step.\n\nThe \"missing\" step is registering `IOptions\u003cEventLogSettings\u003e` explicitly. That may not be best handled with an additional overload, but does at least merit a comment in the minimal `AddEventLog` overload.\n\n```csharp\npublic const string EventLogConfigSectionPath = \"Logging:EventLog\";\n\n/// \u003cinheritdoc cref=\"EventLoggerFactoryExtensions.AddEventLog(ILoggingBuilder)\"/\u003e\n/// \u003cparam name=\"useOptions\"\u003eWhether to bind EventLogSettings via the options pattern\u003c/param\u003e\npublic static ILoggingBuilder AddEventLog(this ILoggingBuilder builder, bool useOptions)\n{\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n    {\n        if (useOptions)\n            builder.Services.AddOptions\u003cEventLogSettings\u003e().BindConfiguration(EventLogConfigSectionPath);\n        builder.AddEventLog();\n    }\n    return builder;\n}\n```\n\nOne caveat with the `IOptions\u003cEventLogSettings\u003e` setup to keep in mind is that `AddWindowsService` (and `UseWindowsService`) supply a sensible default value for `SourceName` by injecting a `IConfigureOptions\u003cEventLogSettings\u003e`. I mention it because injecting my own default was my next stumbling block! Easy to work around that once you know.",
                                           "updatedAt":  "2025-03-31T22:40:40Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "WebApplication.CreateBuilder ignores Logging:EventLog:SourceName",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81730",
        "createdAt":  "2023-02-06T23:08:42Z",
        "number":  81730,
        "author":  "dpk83",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCw32SQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "virzak",
                                            "createdAt":  "2023-06-22T18:53:45Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-03-26T20:10:53Z",
        "body":  "### Background and motivation\n\n.NET uses source generation to provide high performance logging via LoggerMessage attribute. Source generation opens up a lot of flexibility to do more things in an efficient manner. We have a telemetry solution that is used by services across our orgs, as part of our solution we have expanded the LoggerMessage to support the following features\r\n- **Logging of complex object** i.e. If you have an object let\u0027s say ErrorDetails and developer needs to log the details of the error. Today it is achieved by individually logging all members of the object e.g. `logger.Log(\"Failed to fetch data due to error: {0}, {1}, {2}\", errorDetails.operationId, errorDetails.Type, errorDetails.Message);`. Instead with the support of complex object logging in LoggerMessage attribute developer can log the object directly i.e. `logger.DataFetchFailed(errorDetails)`. This will perform the expansion of the errorDetails object as part of the compile time source generation in an efficient way (i.e. no runtime cost)\r\n- **Redacting sensitive data**: Services has need to not log sensitive data in telemetry. Today developers need to redact the data before the information is logged and in order to redact the data they need to know which fields are redacted and copy over the logic to redact it. Often times the redaction is not done in a performant way. \n\n### API Proposal\n\nIntroduce `LogPropertiesAttribute` which is used to annotate an object that needs to be expanded for logging.\r\n\r\n```csharp\r\n\r\n[AttributeUsage(AttributeTargets.Parameter)]\r\n[Conditional(\"CODE_GENERATION_ATTRIBUTES\")]\r\npublic sealed class LogPropertiesAttribute : Attribute\r\n{\r\n  ...\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n\r\npublic class Operation\r\n{\r\n  public string Id {get; set;}\r\n  public string Name {get; set;}\r\n}\r\n\r\npublic class ErrorDetails\r\n{\r\n   public Operation Operation {get; set;}\r\n   public ErrorType Type {get; set;}\r\n   public string ErrorMessage {get; set;}\r\n}\r\n\r\npublic static partial class Log\r\n{\r\n    [LoggerMessage(\r\n        EventId = 0,\r\n        Level = LogLevel.Error,\r\n        Message = \"Could not open socket\")]\r\n    public static partial void CouldNotOpenSocket(\r\n        this ILogger logger, [LogProperties] error);\r\n}\r\n\r\n// log the error\r\nvar errorDetails = ...\r\nlogger.CouldNotOpenSocket(error);\r\n```\r\n\r\nThis will result in all parameters of the error details logged as `error_Operation_Id`, `error_Operation_Name`, `error_Type`, `error_ErrorMessage`.\r\n\r\nThis is a simplistic example. LogProperties can have parameters that extends its functionality with more options.\r\n\r\nThe above can be augmented via some attributes to indicate sensitive data so the generated code takes care of redacting it appropriately.\r\n\r\n```csharp\r\npublic static partial class Log\r\n{\r\n    [LoggerMessage(\r\n        EventId = 0,\r\n        Level = LogLevel.Information,\r\n        Message = \"Fetching profile failed for {user}\")]\r\n    public static partial void ProfileFetchFailed(\r\n        this ILogger logger, IRedactorProvider redactorProvider, [XYZ] user); // XYZ here is a placeholder for the data classification attribute, I am intentionally omitting the real attributes\r\n}\r\n\r\n// Generated code will use redactorProvider to redact the `userId` according to the data class XYZ\r\n// Usage is\r\nlogger.ProfileFetchFailed(redactorProvider, userId);\r\n```\r\n\r\nSimilarly the attribute XYZ can be added to the members of the complex object and the generated code should be able to know and redact it.\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWHc9pg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Uoi7k",
                                           "createdAt":  "2023-02-06T23:08:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\n.NET uses source generation to provide high performance logging via LoggerMessage attribute. Source generation opens up a lot of flexibility to do more things in an efficient manner. We have a telemetry solution that is used by services across our orgs, as part of our solution we have expanded the LoggerMessage to support the following features\r\n- **Logging of complex object** i.e. If you have an object let\u0027s say ErrorDetails and developer needs to log the details of the error. Today it is achieved by individually logging all members of the object e.g. `logger.Log(\"Failed to fetch data due to error: {0}, {1}, {2}\", errorDetails.operationId, errorDetails.Type, errorDetails.Message);`. Instead with the support of complex object logging in LoggerMessage attribute developer can log the object directly i.e. `logger.DataFetchFailed(errorDetails)`. This will perform the expansion of the errorDetails object as part of the compile time source generation in an efficient way (i.e. no runtime cost)\r\n- **Redacting sensitive data**: Services has need to not log sensitive data in telemetry. Today developers need to redact the data before the information is logged and in order to redact the data they need to know which fields are redacted and copy over the logic to redact it. Often times the redaction is not done in a performant way. \n\n### API Proposal\n\nIntroduce `LogPropertiesAttribute` which is used to annotate an object that needs to be expanded for logging.\r\n\r\n```csharp\r\n\r\n[AttributeUsage(AttributeTargets.Parameter)]\r\n[Conditional(\"CODE_GENERATION_ATTRIBUTES\")]\r\npublic sealed class LogPropertiesAttribute : Attribute\r\n{\r\n  ...\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n\r\npublic class Operation\r\n{\r\n  public string Id {get; set;}\r\n  public string Name {get; set;}\r\n}\r\n\r\npublic class ErrorDetails\r\n{\r\n   public Operation Operation {get; set;}\r\n   public ErrorType Type {get; set;}\r\n   public string ErrorMessage {get; set;}\r\n}\r\n\r\npublic static partial class Log\r\n{\r\n    [LoggerMessage(\r\n        EventId = 0,\r\n        Level = LogLevel.Error,\r\n        Message = \"Could not open socket\")]\r\n    public static partial void CouldNotOpenSocket(\r\n        this ILogger logger, [LogProperties] error);\r\n}\r\n\r\n// log the error\r\nvar errorDetails = ...\r\nlogger.CouldNotOpenSocket(error);\r\n```\r\n\r\nThis will result in all parameters of the error details logged as `error_Operation_Id`, `error_Operation_Name`, `error_Type`, `error_ErrorMessage`.\r\n\r\nThis is a simplistic example. LogProperties can have parameters that extends its functionality with more options.\r\n\r\nThe above can be augmented via some attributes to indicate sensitive data so the generated code takes care of redacting it appropriately.\r\n\r\n```csharp\r\npublic static partial class Log\r\n{\r\n    [LoggerMessage(\r\n        EventId = 0,\r\n        Level = LogLevel.Information,\r\n        Message = \"Fetching profile failed for {user}\")]\r\n    public static partial void ProfileFetchFailed(\r\n        this ILogger logger, IRedactorProvider redactorProvider, [XYZ] user); // XYZ here is a placeholder for the data classification attribute, I am intentionally omitting the real attributes\r\n}\r\n\r\n// Generated code will use redactorProvider to redact the `userId` according to the data class XYZ\r\n// Usage is\r\nlogger.ProfileFetchFailed(redactorProvider, userId);\r\n```\r\n\r\nSimilarly the attribute XYZ can be added to the members of the complex object and the generated code should be able to know and redact it.\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edpk83\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-06T23:08:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UojDC",
                                           "createdAt":  "2023-02-06T23:09:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1jBXA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2023-02-06T23:11:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dpk83",
                                           "body":  "@tarekgh @geeknoid ",
                                           "updatedAt":  "2023-02-06T23:09:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UomS6",
                                           "createdAt":  "2023-02-06T23:22:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1jDSQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "reyang",
                                                                               "createdAt":  "2023-02-06T23:23:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @reyang @CodeBlanch @davidfowl ",
                                           "updatedAt":  "2023-02-06T23:22:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UooB4",
                                           "createdAt":  "2023-02-06T23:30:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e LogProperties can have parameters that extends its functionality with more options.\r\n\r\nDo we have more details about the behavior in general? This is a kind of serialization and needs to define the full scope of this serialization. For example, does it retrieve all properties which have getters either public or nonpublic inside the object? What do you expect to do when having types like collections (and which collections we should support)? What to expect if there is a cyclic reference? .... etc. ",
                                           "updatedAt":  "2023-02-06T23:30:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UovBS",
                                           "createdAt":  "2023-02-07T00:00:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxgPoQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "reyang",
                                                                               "createdAt":  "2023-02-07T00:03:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kl1mm",
                                                                               "createdAt":  "2023-07-07T07:17:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "UrsKroell",
                                                                               "createdAt":  "2023-08-23T11:32:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Dreamescaper",
                                                                               "createdAt":  "2024-09-09T10:49:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "pinkfloydx33",
                                           "body":  "Much prefer structured logging support of `@`-prefix destructuring and then handling in your logging provider. For example Serilog supports this, as do other structured logging providers. If source-gen supported it (there\u0027s some open issues for it) it would be a matter of just adapting your logging provider, I think. ",
                                           "updatedAt":  "2023-02-07T00:00:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Uov0l",
                                           "createdAt":  "2023-02-07T00:04:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6Q2KA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xakep139",
                                                                               "createdAt":  "2023-04-20T11:56:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dpk83",
                                           "body":  "\u003e Do we have more details about the behavior in general? This is a kind of serialization and needs to define the full scope of this serialization. For example, does it retrieve all properties which have getters either public or nonpublic inside the object? What do you expect to do when having types like collections (and which collections we should support)? What to expect if there is a cyclic reference? .... etc.\r\n\r\n@tarekgh \r\n- Retrieves all the public properties \r\n- Walks up and down the hierarchy i.e. base classes and containing objects\r\n- Having a limit to the depth it walks is something we don\u0027t have it yet but should be added\r\n- Attribute for ignoring a property from logging while logging complex object.\r\n- Here are few things that we generate errors on\r\n   - cyclic reference detection\r\n   - Applying attribute on non complex object\r\n   - property name collision \r\n   - There are more related to data classifications\r\n   - There are checks that are related to the custom provider (where if custom provider constructor or required properties are not accessible etc.)\r\n- Ability to omit the parameter name prefix\r\n- Ability to provide the separator (currently we use _ as the default separator e.g. `error_Operation_Id`)\r\n\r\n\u003e Much prefer structured logging support of @-prefix destructuring and then handling in your logging provider. For example Serilog supports this, as do other structured logging providers. If source-gen supported it (there\u0027s some open issues for it) it would be a matter of just adapting your logging provider, I think.\r\n\r\n[pinkfloydx33](https://github.com/pinkfloydx33) Doing this in source generation provides the performance benefits as all of this expansion is done at the compile time as opposed the runtime. I am not saying that support for logging complex object shouldn\u0027t be added for the normal logging provider but with source generation we should utilize it for extracting the best performance out.",
                                           "updatedAt":  "2023-02-07T00:04:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ydz2m",
                                           "createdAt":  "2023-03-26T20:10:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@dpk83 per discussion I moved this issue to the future release.",
                                           "updatedAt":  "2023-03-26T20:10:52Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[API Proposal]: Enhance LoggerMessage attribute to support logging complex object and redaction",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging",
                       "partner-impact"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85116",
        "createdAt":  "2023-04-20T16:45:08Z",
        "number":  85116,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4jw_A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2023-06-26T17:54:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2024-06-12T02:15:29Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-04-25T17:24:21Z",
        "body":  "When only using `AddSimpleConsole()`, it shouldn\u0027t pull in the other inbox console logging formatters. This leads to unnecessary app size bloat when publishing trimmed or AOT.\r\n\r\n### Repro Steps\r\n`dotnet publish --sc` the following app:\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cInvariantGlobalization\u003etrue\u003c/InvariantGlobalization\u003e\r\n    \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"8.0.0-preview.4.23214.1\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n```C#\r\nusing Microsoft.Extensions.Logging;\r\n\r\nILoggerFactory loggerFactory = LoggerFactory.Create(builder =\u003e builder.AddSimpleConsole());\r\n\r\nILogger logger = loggerFactory.CreateLogger\u003cobject\u003e();\r\n\r\nlogger.LogInformation(\"Hi\");\r\n\r\nConsole.ReadLine();\r\n```\r\n\r\nInspect the publish folder. Load all the `.dll`s in ILSpy.\r\n\r\n### Expected results\r\n\r\n1. `System.Text.Json.dll` shouldn\u0027t be in the output, as the app doesn\u0027t use JSON.\r\n2. In ILSpy, the `Microsoft.Extensions.Logging.Console.JsonConsoleFormatter` and `Microsoft.Extensions.Logging.Console.SystemdConsoleFormatter` classes should be trimmed.\r\n\r\n### Actual results\r\n\r\n1. `System.Text.Json.dll` is in the publish output folder\r\n2. These classes are still left in the app:\r\n![image](https://user-images.githubusercontent.com/8291187/233432336-3807e241-bb0b-499e-93f9-99f9c07e5ad9.png)\r\n\r\n### Notes\r\n\r\n1. I think these are being rooted by:\r\n\r\nhttps://github.com/dotnet/runtime/blob/bd37436f887c48554f401014573fd58076f1db87/src/libraries/Microsoft.Extensions.Logging.Console/src/ConsoleLoggerProvider.cs#L101-L106\r\n\r\n2. From a local prototype, I\u0027ve measured around 120KB+ (of the ~8MB) in a BasicMinimalApi app coming from these unnecessary formatters being left in the app.\r\n\r\n3. I believe this would be a breaking change, since previously if an app just does `AddSimpleConsole()`, but the configures the Json formatter to be used through appsettings.json (or other), the Json formatter would be used. The simple fix for that would be to just call `AddConsole()` instead and let the configuration win.\r\n\r\nSee discussion in https://github.com/dotnet/aspnetcore/pull/47797#discussion_r1172770039.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYyF5aA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5aZiIY",
                                           "createdAt":  "2023-04-20T16:45:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen only using `AddSimpleConsole()`, it shouldn\u0027t pull in the other inbox console logging formatters. This leads to unnecessary app size bloat when publishing trimmed or AOT.\r\n\r\n### Repro Steps\r\n`dotnet publish --sc` the following app:\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cInvariantGlobalization\u003etrue\u003c/InvariantGlobalization\u003e\r\n    \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"8.0.0-preview.4.23214.1\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n```C#\r\nusing Microsoft.Extensions.Logging;\r\n\r\nILoggerFactory loggerFactory = LoggerFactory.Create(builder =\u003e builder.AddSimpleConsole());\r\n\r\nILogger logger = loggerFactory.CreateLogger\u003cobject\u003e();\r\n\r\nlogger.LogInformation(\"Hi\");\r\n\r\nConsole.ReadLine();\r\n```\r\n\r\nInspect the publish folder. Load all the `.dll`s in ILSpy.\r\n\r\n### Expected results\r\n\r\n1. `System.Text.Json.dll` shouldn\u0027t be in the output, as the app doesn\u0027t use JSON.\r\n2. In ILSpy, the `Microsoft.Extensions.Logging.Console.JsonConsoleFormatter` and `Microsoft.Extensions.Logging.Console.SystemdConsoleFormatter` classes should be trimmed.\r\n\r\n### Actual results\r\n\r\n1. `System.Text.Json.dll` is in the publish output folder\r\n2. These classes are still left in the app:\r\n![image](https://user-images.githubusercontent.com/8291187/233432336-3807e241-bb0b-499e-93f9-99f9c07e5ad9.png)\r\n\r\n### Notes\r\n\r\n1. I think these are being rooted by:\r\n\r\nhttps://github.com/dotnet/runtime/blob/bd37436f887c48554f401014573fd58076f1db87/src/libraries/Microsoft.Extensions.Logging.Console/src/ConsoleLoggerProvider.cs#L101-L106\r\n\r\n2. From a local prototype, I\u0027ve measured around 120KB+ (of the ~8MB) in a BasicMinimalApi app coming from these unnecessary formatters being left in the app.\r\n\r\n3. I believe this would be a breaking change, since previously if an app just does `AddSimpleConsole()`, but the configures the Json formatter to be used through appsettings.json (or other), the Json formatter would be used. The simple fix for that would be to just call `AddConsole()` instead and let the configuration win.\r\n\r\nSee discussion in https://github.com/dotnet/aspnetcore/pull/47797#discussion_r1172770039.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`breaking-change`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-20T16:45:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aZiJv",
                                           "createdAt":  "2023-04-20T16:45:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Added `needs-breaking-change-doc-created` label because this issue has the `breaking-change` label. \n\n1. [ ] Create and link to this issue a matching issue in the dotnet/docs repo using the [breaking change documentation template](https://aka.ms/dotnet/docs/new-breaking-change-issue), then remove this `needs-breaking-change-doc-created` label.\n\nTagging @dotnet/compat for awareness of the breaking change.",
                                           "updatedAt":  "2023-04-20T16:45:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aZiQg",
                                           "createdAt":  "2023-04-20T16:45:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027size-reduction\u0027: @eerhardt, @SamMonoRT, @marek-safar\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen only using `AddSimpleConsole()`, it shouldn\u0027t pull in the other inbox console logging formatters. This leads to unnecessary app size bloat when publishing trimmed or AOT.\r\n\r\n### Repro Steps\r\n`dotnet publish --sc` the following app:\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cInvariantGlobalization\u003etrue\u003c/InvariantGlobalization\u003e\r\n    \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"8.0.0-preview.4.23214.1\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n```C#\r\nusing Microsoft.Extensions.Logging;\r\n\r\nILoggerFactory loggerFactory = LoggerFactory.Create(builder =\u003e builder.AddSimpleConsole());\r\n\r\nILogger logger = loggerFactory.CreateLogger\u003cobject\u003e();\r\n\r\nlogger.LogInformation(\"Hi\");\r\n\r\nConsole.ReadLine();\r\n```\r\n\r\nInspect the publish folder. Load all the `.dll`s in ILSpy.\r\n\r\n### Expected results\r\n\r\n1. `System.Text.Json.dll` shouldn\u0027t be in the output, as the app doesn\u0027t use JSON.\r\n2. In ILSpy, the `Microsoft.Extensions.Logging.Console.JsonConsoleFormatter` and `Microsoft.Extensions.Logging.Console.SystemdConsoleFormatter` classes should be trimmed.\r\n\r\n### Actual results\r\n\r\n1. `System.Text.Json.dll` is in the publish output folder\r\n2. These classes are still left in the app:\r\n![image](https://user-images.githubusercontent.com/8291187/233432336-3807e241-bb0b-499e-93f9-99f9c07e5ad9.png)\r\n\r\n### Notes\r\n\r\n1. I think these are being rooted by:\r\n\r\nhttps://github.com/dotnet/runtime/blob/bd37436f887c48554f401014573fd58076f1db87/src/libraries/Microsoft.Extensions.Logging.Console/src/ConsoleLoggerProvider.cs#L101-L106\r\n\r\n2. From a local prototype, I\u0027ve measured around 120KB+ (of the ~8MB) in a BasicMinimalApi app coming from these unnecessary formatters being left in the app.\r\n\r\n3. I believe this would be a breaking change, since previously if an app just does `AddSimpleConsole()`, but the configures the Json formatter to be used through appsettings.json (or other), the Json formatter would be used. The simple fix for that would be to just call `AddConsole()` instead and let the configuration win.\r\n\r\nSee discussion in https://github.com/dotnet/aspnetcore/pull/47797#discussion_r1172770039.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`breaking-change`, `untriaged`, `area-Extensions-Logging`, `needs-breaking-change-doc-created`, `size-reduction`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-20T16:45:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jIXlo",
                                           "createdAt":  "2023-08-03T00:41:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "layomia",
                                           "body":  "Triage: we can address this in vNext cc @eerhardt @tarekgh.",
                                           "updatedAt":  "2023-08-03T00:41:06Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Logging AddSimpleConsole should allow for trimming Json and Systemd formatters",
        "labels":  [
                       "breaking-change",
                       "area-Extensions-Logging",
                       "size-reduction"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85514",
        "createdAt":  "2023-04-28T11:21:31Z",
        "number":  85514,
        "author":  "bartlomiejgawel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7zkZQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wojciechrak",
                                            "createdAt":  "2023-04-28T11:43:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dreamescaper",
                                            "createdAt":  "2024-10-14T13:56:35Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-08-29T07:07:51Z",
        "body":  "### Description\r\n\r\nConsider the following code:\r\n```csharp\r\nvar serviceProvider = new ServiceCollection()\r\n    .AddLogging(options =\u003e\r\n    {\r\n        options.AddJsonConsole(jsonOptions =\u003e\r\n        {\r\n            jsonOptions.IncludeScopes = true;\r\n            jsonOptions.JsonWriterOptions = new JsonWriterOptions { Indented = true };\r\n        });\r\n    })\r\n    .BuildServiceProvider();\r\n\r\nvar logger = serviceProvider.GetRequiredService\u003cILogger\u003cProgram\u003e\u003e();\r\n\r\nusing (logger.BeginScope(new Dictionary\u003cstring, object\u003e { [\"Id\"] = \"Value\" }))\r\n{\r\n    logger.LogInformation(\"Test\");\r\n}\r\n```\r\n\r\nYou want to add an additional property by using the `BeginScope` method. It works but it also adds an unnecessary node `Message` for no reason:\r\n```json\r\n{\r\n  \"EventId\": 0,\r\n  \"LogLevel\": \"Information\",\r\n  \"Category\": \"Program\",\r\n  \"Message\": \"Test\",\r\n  \"State\": {\r\n    \"Message\": \"Test\",\r\n    \"{OriginalFormat}\": \"Test\"\r\n  },\r\n  \"Scopes\": [\r\n    {\r\n      \"Message\": \"System.Collections.Generic.Dictionary\\u00602[System.String,System.Object]\",\r\n      \"Id\": \"Value\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nIt would be nice to either remove that `Message` node or add a flag to remove it:\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Logging.Console/src/JsonConsoleFormatter.cs#L111\r\n\r\n### Reproduction Steps\r\n\r\nYou can test it [here](https://dotnetfiddle.net/0DPwjl) or by running the following code:\r\n```csharp\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Logging;\r\nusing System.Collections.Generic;\r\nusing System.Text.Json;\r\n\r\npublic class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        var serviceProvider = new ServiceCollection()\r\n            .AddLogging(options =\u003e\r\n            {\r\n                options.AddJsonConsole(jsonOptions =\u003e\r\n                {\r\n                    jsonOptions.IncludeScopes = true;\r\n                    jsonOptions.JsonWriterOptions = new JsonWriterOptions { Indented = true };\r\n                });\r\n            })\r\n            .BuildServiceProvider();\r\n\r\n        var logger = serviceProvider.GetRequiredService\u003cILogger\u003cProgram\u003e\u003e();\r\n\r\n        using (logger.BeginScope(new Dictionary\u003cstring, object\u003e { [\"Id\"] = \"Value\" }))\r\n        {\r\n            logger.LogInformation(\"Test\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nIt would be nice to have the following output:\r\n```json\r\n{\r\n  \"EventId\": 0,\r\n  \"LogLevel\": \"Information\",\r\n  \"Category\": \"Program\",\r\n  \"Message\": \"Test\",\r\n  \"State\": {\r\n    \"Message\": \"Test\",\r\n    \"{OriginalFormat}\": \"Test\"\r\n  },\r\n  \"Scopes\": [\r\n    {\r\n      \"Id\": \"Value\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n### Actual behavior\r\n\r\nCurrently, it prints the following result:\r\n```json\r\n{\r\n  \"EventId\": 0,\r\n  \"LogLevel\": \"Information\",\r\n  \"Category\": \"Program\",\r\n  \"Message\": \"Test\",\r\n  \"State\": {\r\n    \"Message\": \"Test\",\r\n    \"{OriginalFormat}\": \"Test\"\r\n  },\r\n  \"Scopes\": [\r\n    {\r\n      \"Message\": \"System.Collections.Generic.Dictionary\\u00602[System.String,System.Object]\",\r\n      \"Id\": \"Value\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOihiWaw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5bColb",
                                           "createdAt":  "2023-04-28T11:21:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nConsider the following code:\r\n```csharp\r\nvar serviceProvider = new ServiceCollection()\r\n    .AddLogging(options =\u003e\r\n    {\r\n        options.AddJsonConsole(options =\u003e\r\n        {\r\n            options.IncludeScopes = true;\r\n            options.JsonWriterOptions = new JsonWriterOptions { Indented = true };\r\n        });\r\n    })\r\n    .BuildServiceProvider();\r\n\r\nvar logger = serviceProvider.GetRequiredService\u003cILogger\u003cProgram\u003e\u003e();\r\n\r\nusing (logger.BeginScope(new Dictionary\u003cstring, object\u003e { [\"Id\"] = \"Value\" }))\r\n{\r\n    logger.LogInformation(\"Test\");\r\n}\r\n```\r\n\r\nYou want to add an additional property by using the `BeginScope` method. It works but it also adds an unnecessary node `Message` for no reason:\r\n```json\r\n{\r\n  \"EventId\": 0,\r\n  \"LogLevel\": \"Information\",\r\n  \"Category\": \"Program\",\r\n  \"Message\": \"Test\",\r\n  \"State\": {\r\n    \"Message\": \"Test\",\r\n    \"{OriginalFormat}\": \"Test\"\r\n  },\r\n  \"Scopes\": [\r\n    {\r\n      \"Message\": \"System.Collections.Generic.Dictionary\\u00602[System.String,System.Object]\",\r\n      \"Id\": \"Value\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nIt would be nice to either remove that `Message` node or add a flag to remove it:\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Logging.Console/src/JsonConsoleFormatter.cs#L111\n\n### Reproduction Steps\n\nYou can test it [here](https://dotnetfiddle.net/f9q1tC) or by running the following code:\r\n```csharp\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Logging;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text.Json;\r\n\r\npublic class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        var serviceProvider = new ServiceCollection()\r\n            .AddLogging(options =\u003e\r\n            {\r\n                options.AddJsonConsole(options =\u003e\r\n                {\r\n                    options.IncludeScopes = true;\r\n                    options.JsonWriterOptions = new JsonWriterOptions { Indented = true };\r\n                });\r\n            })\r\n            .BuildServiceProvider();\r\n\r\n        var logger = serviceProvider.GetRequiredService\u003cILogger\u003cProgram\u003e\u003e();\r\n\r\n        using (logger.BeginScope(new Dictionary\u003cstring, object\u003e { [\"Id\"] = \"Value\" }))\r\n        {\r\n            logger.LogInformation(\"Test\");\r\n        }\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\nIt would be nice to have the following output:\r\n```json\r\n{\r\n  \"EventId\": 0,\r\n  \"LogLevel\": \"Information\",\r\n  \"Category\": \"Program\",\r\n  \"Message\": \"Test\",\r\n  \"State\": {\r\n    \"Message\": \"Test\",\r\n    \"{OriginalFormat}\": \"Test\"\r\n  },\r\n  \"Scopes\": [\r\n    {\r\n      \"Message\": \"System.Collections.Generic.Dictionary\\u00602[System.String,System.Object]\",\r\n      \"Id\": \"Value\"\r\n    }\r\n  ]\r\n}\r\n```\n\n### Actual behavior\n\nCurrently, it prints the following result:\r\n```json\r\n{\r\n  \"EventId\": 0,\r\n  \"LogLevel\": \"Information\",\r\n  \"Category\": \"Program\",\r\n  \"Message\": \"Test\",\r\n  \"State\": {\r\n    \"Message\": \"Test\",\r\n    \"{OriginalFormat}\": \"Test\"\r\n  },\r\n  \"Scopes\": [\r\n    {\r\n      \"Id\": \"Value\"\r\n    }\r\n  ]\r\n}\r\n```\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebartlomiejgawel\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-28T11:21:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KGJZr",
                                           "createdAt":  "2024-08-29T07:07:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "centur",
                                           "body":  "What is worse, this behaviour produces invalid JSON in output.\r\nAccording to [RFC8259](https://www.rfc-editor.org/rfc/rfc8259#section-4) \r\n\u003eThe names within an object SHOULD be unique.\r\n\r\nAnd it\u0027s very easy to trigger if Scope dictionary is built on some filtered external values - like HTTP request headers or keys from other log systems (which often may use \"Message\" as a json key).\r\n\r\nIf Scope\u0027s Dictionary would contain key \"Message\" like this:\r\n```\r\nusing (logger.BeginScope(new Dictionary\u003cstring, object\u003e { [\"Message\"] = \"SomeText\",  [\"Id\"] = \"Value\"}))\r\n{\r\n  logger.LogInformation(\"Test\");\r\n}\r\n```\r\nActual output in such case will have 2 keys with non-unique names:\r\n```\r\n...\r\n\"Scopes\":[\r\n {\r\n  \"Message\":\"System.Collections.Generic.Dictionary\\u00602[System.String,System.Object]\",\r\n  \"Message\":\"SomeText\",\r\n  \"Id\":\"Value\"\r\n}]\r\n...\r\n```\r\n\r\nLooks like a bug, not just some extra details written in output.\r\n\r\n\r\n",
                                           "updatedAt":  "2024-08-29T07:07:50Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Microsoft.Extensions.Logging.Console logs an unnecessary Message node in a Scopes node",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87250",
        "createdAt":  "2023-06-08T04:08:07Z",
        "number":  87250,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-25T23:19:20Z",
        "body":  "We\u0027d like to eliminate https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry.Console/Logging/LoggingConsoleExporter.cs. Martin wants to bring some functionality over to the inbox console logger concurrently. We need to identify what that functionality is.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOby_Mkw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5eSUzV",
                                           "createdAt":  "2023-06-08T04:08:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe\u0027d like to eliminate https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry.Console/Logging/LoggingConsoleExporter.cs. Martin wants to bring some functionality over to the inbox console logger concurrently. We need to identify what that functionality is.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enoahfalk\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003egeeknoid\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-08T04:08:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eXikm",
                                           "createdAt":  "2023-06-08T19:41:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@geeknoid can you please add more details about bringing these to the runtime? I am seeing these are currently internal in the extension\u0027s repo. Why can\u0027t these stay there? Thanks!\r\n",
                                           "updatedAt":  "2023-06-08T19:41:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eYWjQ",
                                           "createdAt":  "2023-06-08T21:57:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "geeknoid",
                                           "body":  "It\u0027s public. Here are the options: https://github.com/dotnet/extensions/pull/4017/files#diff-fc1e1bc2b0ec5f224700c054d81993fb7b35367bd5ff65d265a444aa57a78982.\r\n\r\nI\u0027ll do a more detailed comparison tonight.",
                                           "updatedAt":  "2023-06-08T21:57:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5excbD",
                                           "createdAt":  "2023-06-13T21:00:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "geeknoid",
                                           "body":  "Sorry for the late follow-up. The differences between what we have in dotnet/extensions vs. what\u0027s already in the platform is reflected through the options, which I pasted below. The dotnet/extesnions design was created to provide a first class experience for developers using the console in every day work. But in brief:\r\n\r\n* Support for outputting log entry dimensions\r\n\r\n* Control over which parts of log messages to output (IncludeLogLevel, IncludeTimeStamp, IncludeCategory, IncludeSpanId, IncludeTraceId, IncludeDimensions, IncludeExceptionStackTrace)\r\n\r\n* Control over color output (the *Color properties).\r\n\r\n\r\n```csharp\r\npublic class LoggingConsoleOptions\r\n{\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets a value indicating whether to display scopes.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cvalue\u003e\r\n    /// Defaults to \u003csee langword=\"true\"/\u003e.\r\n    /// \u003c/value\u003e\r\n    public bool IncludeScopes { get; set; } = true;\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets the format string used to format timestamps in logging messages.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cvalue\u003e\r\n    /// Defaults to \u003cc\u003eyyyy-MM-dd HH:mm:ss.fff\u003c/c\u003e.\r\n    /// \u003c/value\u003e\r\n    public string? TimestampFormat { get; set; } = \"yyyy-MM-dd HH:mm:ss.fff\";\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets a value indicating whether or not UTC timezone should be used for timestamps in logging messages.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cvalue\u003e\r\n    /// Defaults to \u003csee langword=\"false\"/\u003e.\r\n    /// \u003c/value\u003e\r\n    public bool UseUtcTimestamp { get; set; }\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets a value indicating whether to display the timestamp.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cvalue\u003e\r\n    /// Defaults to \u003csee langword=\"true\"/\u003e.\r\n    /// \u003c/value\u003e\r\n    public bool IncludeTimestamp { get; set; } = true;\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets a value indicating whether to display the log level.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cvalue\u003e\r\n    /// Defaults to \u003csee langword=\"true\"/\u003e.\r\n    /// \u003c/value\u003e\r\n    public bool IncludeLogLevel { get; set; } = true;\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets a value indicating whether to display the category.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cvalue\u003e\r\n    /// Defaults to \u003csee langword=\"true\"/\u003e.\r\n    /// \u003c/value\u003e\r\n    public bool IncludeCategory { get; set; } = true;\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets a value indicating whether to display the stack trace.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cvalue\u003e\r\n    /// Defaults to \u003csee langword=\"true\"/\u003e.\r\n    /// \u003c/value\u003e\r\n    public bool IncludeExceptionStacktrace { get; set; } = true;\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets a value indicating whether to display the activity TraceId.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cvalue\u003e\r\n    /// The default value is \u003csee langword=\"true\"/\u003e.\r\n    /// \u003c/value\u003e\r\n    public bool IncludeTraceId { get; set; } = true;\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets a value indicating whether to display the activity SpanId.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cvalue\u003e\r\n    /// The default value is \u003csee langword=\"true\"/\u003e.\r\n    /// \u003c/value\u003e\r\n    public bool IncludeSpanId { get; set; } = true;\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets a value indicating whether colors are enabled or not.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cvalue\u003e\r\n    /// Defaults to \u003csee langword=\"true\"/\u003e.\r\n    /// \u003c/value\u003e\r\n    public bool ColorsEnabled { get; set; } = true;\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets the color to use for dimmed text.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cvalue\u003eDefaults to \u003csee cref=\"ConsoleColor.DarkGray\"/\u003e.\u003c/value\u003e\r\n    public ConsoleColor DimmedColor { get; set; } = ConsoleColor.DarkGray;\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets the color to use for dimmed text background.\r\n    /// \u003c/summary\u003e\r\n    public ConsoleColor? DimmedBackgroundColor { get; set; }\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets the color to use for exception text.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cvalue\u003eDefaults to \u003csee cref=\"ConsoleColor.Red\"/\u003e.\u003c/value\u003e\r\n    public ConsoleColor ExceptionColor { get; set; } = ConsoleColor.Red;\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets the color to use for exception text background.\r\n    /// \u003c/summary\u003e\r\n    public ConsoleColor? ExceptionBackgroundColor { get; set; }\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets the color to use for exception stack trace text.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cvalue\u003eDefaults to \u003csee cref=\"ConsoleColor.DarkRed\"/\u003e.\u003c/value\u003e\r\n    public ConsoleColor ExceptionStackTraceColor { get; set; } = ConsoleColor.DarkRed;\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets the color to use for exception stack trace text background.\r\n    /// \u003c/summary\u003e\r\n    public ConsoleColor? ExceptionStackTraceBackgroundColor { get; set; }\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets a value indicating whether to include dimension name/value pairs with each log record.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cvalue\u003eDefaults to \u003csee langword=\"false\"/\u003e.\u003c/value\u003e\r\n    public bool IncludeDimensions { get; set; }\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets the color to use for dimension text.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cvalue\u003eDefaults to \u003csee cref=\"ConsoleColor.DarkGreen\"/\u003e.\u003c/value\u003e\r\n    public ConsoleColor DimensionsColor { get; set; } = ConsoleColor.DarkGreen;\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets the color to use for dimension text background.\r\n    /// \u003c/summary\u003e\r\n    public ConsoleColor? DimensionsBackgroundColor { get; set; }\r\n}\r\n```\r\n\r\n",
                                           "updatedAt":  "2023-06-14T18:40:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5exnSI",
                                           "createdAt":  "2023-06-13T21:45:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Edited\r\n~~I think you meant `ConsoleFormatterOptions` and not `LoggingConsoleOptions`.~~\r\n\r\n~~For trace/span ids we already have [ActivityTrackingOptions](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.activitytrackingoptions?view=dotnet-plat-ext-7.0)~~",
                                           "updatedAt":  "2023-06-13T23:39:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eyCGM",
                                           "createdAt":  "2023-06-13T23:08:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "https://github.com/dotnet/extensions/blob/6e1d1c0e48dbc62d861f1ad2b631ecc42c3957ae/src/Libraries/Microsoft.Extensions.Telemetry.Console/Logging/LoggingConsoleOptions.cs#L14",
                                           "updatedAt":  "2023-06-13T23:08:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5e4T00",
                                           "createdAt":  "2023-06-14T18:58:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "geeknoid",
                                           "body":  "Note that the console logging feature from dotnet/extensions is being removed as of this PR: https://github.com/dotnet/extensions/pull/4076. This is to eliminate redundancy, so we don\u0027t have N console loggers floating around.\r\n\r\nWhen it comes time to implement this functionality, please go dig into the history of the extensions repo for reference.",
                                           "updatedAt":  "2023-06-14T18:58:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vL8yT",
                                           "createdAt":  "2023-12-21T02:52:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQXtLA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xakep139",
                                                                               "createdAt":  "2023-12-22T10:27:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "geeknoid",
                                           "body":  "@joperezr This is the item I mentioned would be important to do in support of structured logging. Otherwise, an app using structured logging sees nothing coming out on the console during development.",
                                           "updatedAt":  "2023-12-21T02:52:42Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Integrate ConsoleLogExporter functionality from dotnet/extensions",
        "labels":  [
                       "area-Extensions-Logging",
                       "partner-impact"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87253",
        "createdAt":  "2023-06-08T04:27:27Z",
        "number":  87253,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-21T21:36:09Z",
        "body":  "https://github.com/dotnet/runtime/issues/84902 is planning to update some of the logging interfaces with support for attributes that drive redaction and some modifications for higher performance and we want to support that with updated source generation.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXllQrA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5eSXzN",
                                           "createdAt":  "2023-06-08T04:27:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://github.com/dotnet/runtime/issues/87252 is planning to update some of the logging interfaces with support for attributes that drive redaction and some modifications for higher performance and we want to support that with updated source generation.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enoahfalk\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003esebastienros\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Meta`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-08T04:27:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eWVCs",
                                           "createdAt":  "2023-06-08T15:58:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://github.com/dotnet/runtime/issues/84902 is planning to update some of the logging interfaces with support for attributes that drive redaction and some modifications for higher performance and we want to support that with updated source generation.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enoahfalk\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003esebastienros\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-08T15:58:49Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Source generation support for new ILogger work",
        "labels":  [
                       "area-Extensions-Logging",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87747",
        "createdAt":  "2023-06-18T15:23:18Z",
        "number":  87747,
        "author":  "abbotware",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCy9hRA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KrisVandermotten",
                                            "createdAt":  "2023-10-01T12:15:01Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-06-20T17:23:09Z",
        "body":  "### Background and motivation\r\n\r\nAdd support for ILogger detection and use via a property in addition to field;\r\n\r\nMotivation - allow the use of LoggerMessage without having to change existing base classes that use protected ILogger properties instead of fields.  By requiring the use of a non-private field, this pattern is in violation of:\r\n- **CA1051:Do not declare visible instance fields**\r\n- **SA1401: Field should be private**\r\n\r\nUnless there is a general consensus that ILogger **properties** are a bad practice (if yes please provide relevant doc / links) this should be a straightforward enhancement.\r\n\r\n### API Proposal\r\n\r\nThis function would need to be updated:\r\n\r\nhttps://github.com/dotnet/dotnet/blob/cc80a55289b1069ffb69cdc891556cc5c4a6bfa8/src/runtime/src/libraries/Microsoft.Extensions.Logging.Abstractions/gen/LoggerMessageGenerator.Parser.cs#L411\r\n\r\nas well as the messages:\r\nhttps://github.com/dotnet/docs/blob/9564767df2b9623ac21a7b52a4596c36ad3e5f15/docs/fundamentals/syslib-diagnostics/syslib1019.md?plain=1#L9\r\n\r\nand probably this:\r\nhttps://learn.microsoft.com/en-us/dotnet/core/extensions/logger-message-generator\r\n\r\n### API Usage\r\n\r\nno change to the usage - just support for more scenarios:\r\n\r\n#### Example of Current Usage (violates CA1051 and SA1401)\r\n\r\n```\r\npublic class BaseWithLoggerField\r\n{\r\n\t// this violates rule CA1051:Do not declare visible instance fields\r\n\t// this violates rule SA1401: Field should be private\r\n\tprotected readonly ILogger logger;\r\n\r\n\tpublic BaseWithLoggerField(ILogger\u003cBaseWithLoggerField\u003e logger)\r\n\t{\r\n\t\tthis.logger = logger;\r\n\t}\r\n}\r\n\r\npublic partial class Derived : BaseWithLoggerField\r\n{\r\n\tpublic Derived(ILogger\u003cDerived\u003e logger) : base(logger)\r\n\t{\r\n\t}\r\n\r\n\t[LoggerMessage(Level = LogLevel.Debug, Message = \"Logged: {something}\")]\r\n\tprivate partial void LogSomething(string something);\r\n}\r\n```\r\n\r\n\r\n#### Example of Usage with API Modification\r\n\r\nThis usage does not violate CA1051 / SA1401 and would be backwards compatible with current implementations above\r\n\r\n```\r\npublic class BaseWithLoggerProperty\r\n{\r\n\tpublic BaseWithLoggerProperty(ILogger\u003cBaseWithLoggerProperty\u003e logger)\r\n\t{\r\n\t\tthis.Logger = logger;\r\n\t}\r\n\r\n\tprotected ILogger Logger { get; }\r\n}\r\n\r\npublic partial class Derived : BaseWithLoggerProperty\r\n{\r\n\tpublic Derived(ILogger\u003cDerived\u003e logger) : base(logger)\r\n\t{\r\n\t}\r\n\r\n\t// currently, this produces error:\r\n\t// SYSLIB1019: Couldn\u0027t find a field of type Microsoft.Extensions.Logging.ILogger in class\r\n\t[LoggerMessage(Level = LogLevel.Debug, Message = \"Logged: {something}\")]\r\n\tprivate partial void LogSomething(string something);\r\n}\r\n```\r\n\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nNone ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOX1IIZw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5fI9G4",
                                           "createdAt":  "2023-06-18T15:23:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nAdd support for ILogger detection and use via a property in addition to field;\r\n\r\nMotivation - allow the use of LoggerMessage without having to change existing base classes that use protected ILogger properties instead of fields.  \r\n\r\nUnless there is a general consensus that ILogger **properties** are a bad practice (if yes please provide relevant doc / links) this should be a straightforward enhancement.\n\n### API Proposal\n\nThis function would need to be updated:\r\n\r\nhttps://github.com/dotnet/dotnet/blob/cc80a55289b1069ffb69cdc891556cc5c4a6bfa8/src/runtime/src/libraries/Microsoft.Extensions.Logging.Abstractions/gen/LoggerMessageGenerator.Parser.cs#L411\r\n\r\nas well as the messages:\r\nhttps://github.com/dotnet/docs/blob/9564767df2b9623ac21a7b52a4596c36ad3e5f15/docs/fundamentals/syslib-diagnostics/syslib1019.md?plain=1#L9\r\n\r\nand probably this:\r\nhttps://learn.microsoft.com/en-us/dotnet/core/extensions/logger-message-generator\n\n### API Usage\n\nno change to the usage - just support for more scenarios.\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nNone \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eabbotware\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-18T15:23:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fJD_7",
                                           "createdAt":  "2023-06-18T17:10:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@abbotware could you please talk more about the benefit of the proposed change on the outcome result of the generator? ",
                                           "updatedAt":  "2023-06-18T17:10:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fJEBv",
                                           "createdAt":  "2023-06-18T17:10:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-06-18T17:10:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fJN_6",
                                           "createdAt":  "2023-06-18T20:03:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abbotware",
                                           "body":  "using a protected field violates: CA1051:Do not declare visible instance fields",
                                           "updatedAt":  "2023-06-18T20:03:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fJOVO",
                                           "createdAt":  "2023-06-18T20:11:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e using a protected field violates: CA1051:Do not declare visible instance fields\r\n\r\nTo be clear, do you have code example trigger that in your app? ",
                                           "updatedAt":  "2023-06-18T20:11:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fJOWN",
                                           "createdAt":  "2023-06-18T20:11:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-06-18T20:11:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fJOnA",
                                           "createdAt":  "2023-06-18T20:15:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abbotware",
                                           "body":  "@tarekgh - updated API Usage with an example",
                                           "updatedAt":  "2023-06-18T20:15:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fJTRX",
                                           "createdAt":  "2023-06-18T21:25:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Thanks @abbotware. \r\nI am wondering why you can\u0027t write the code like:\r\n\r\n```C#\r\npublic class BaseWithLoggerField\r\n{\r\n\tprivate ILogger _logger;\r\n\r\n\tpublic BaseWithLoggerField(ILogger\u003cBaseWithLoggerField\u003e logger)\r\n\t{\r\n\t\tthis. Logger = logger;\r\n\t}\r\n\t\r\n\tprotected ILogger Logger { get =\u003e _logger;  set =\u003e _logger = value; }\r\n}\r\n```\r\n\r\nI am inquiring about the possibility of adding support for the logger property. However, implementing this feature might introduce complications if the class declares both a field and a property. It would not be appropriate to disallow this or generate an error when both are present, as it is possible to have a legitimate use case for such a scenario without necessarily knowing the intention behind the property implementation.",
                                           "updatedAt":  "2023-06-18T21:26:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fJTR1",
                                           "createdAt":  "2023-06-18T21:25:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-06-18T21:25:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fJcJE",
                                           "createdAt":  "2023-06-18T23:51:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abbotware",
                                           "body":  "@tarekgh -  that does nothing to address the problem: As the class name implies, it is **Base** class.  The problem I am running into is not in the base class, but the derived classes:\r\n\r\n```\r\npublic partial class Derived : BaseWithLoggerField\r\n{\r\n\tpublic Derived(ILogger\u003cDerived\u003e logger) : base(logger)\r\n\t{\r\n\t}\r\n\r\n\t// this does not work given your proposal:\r\n\t[LoggerMessage(Level = LogLevel.Debug, Message = \"Logged: {something}\")]\r\n\tprivate partial void LogSomething(string something);\r\n}\r\n```",
                                           "updatedAt":  "2023-06-18T23:55:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fJeEG",
                                           "createdAt":  "2023-06-19T00:11:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@abbotware you don\u0027t have access to the base class code? I was suggesting updating the base class which will make the derived class work fine. no?",
                                           "updatedAt":  "2023-06-19T00:11:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fJgsO",
                                           "createdAt":  "2023-06-19T00:36:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abbotware",
                                           "body":  "@tarekgh  - I do have access, but what you are proposing does not work- did you try to add a [LoggerMessage] method in a derived class? \r\n\r\n",
                                           "updatedAt":  "2023-06-19T00:36:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fJjkv",
                                           "createdAt":  "2023-06-19T01:08:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "The possible workaround here is to define the logger field as internal in the base class. I know this is not the best, but it should work.\r\n```\r\n        internal ILogger _logger;\r\n```\r\n\r\nthe other idea is just disabling this warning in the base class \r\n\r\n```\r\n        #pragma warning disable CA1051\r\n        protected ILogger _logger;\r\n        #pragma warning restore CA1051\r\n```\r\n\r\nThis is reasonable to do. We\u0027ll keep this issue open to see what that is best can be done here. ",
                                           "updatedAt":  "2023-06-19T01:09:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fKAOE",
                                           "createdAt":  "2023-06-19T04:03:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abbotware",
                                           "body":  "No, it is **not reasonable**: You are telling me to **redesign** my base classes - this is a potentially **breaking** change.\r\n\r\nThe entire point of this proposal was to avoid doing exactly what you are suggesting.\r\n",
                                           "updatedAt":  "2023-06-19T04:03:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fNmrT",
                                           "createdAt":  "2023-06-19T15:41:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e No, it is not reasonable: You are telling me to redesign my base classes - this is a potentially breaking change.\r\n\r\nWhy is this the case if you add ` #pragma warning disable CA1051`? nothing to redesign and not even a breaking change. This is what I meant by reasonable for now. I am keeping the issue to find a better solution. ",
                                           "updatedAt":  "2023-06-19T15:41:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fUC8X",
                                           "createdAt":  "2023-06-20T16:05:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@tarekgh if you don\u0027t own the base class (its in a library that you can\u0027t change for e.g.), then that approach is problematic.",
                                           "updatedAt":  "2023-06-20T16:05:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fUghn",
                                           "createdAt":  "2023-06-20T17:23:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Understand, my suggestion was specifically for @abbotware case who own the base class too. as I mentioned I am keeping this issue open to find a solution that work for everyone. ",
                                           "updatedAt":  "2023-06-20T17:23:08Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "[API Proposal]:  LoggerMessage - support ILogger property in addition to fields",
        "labels":  [
                       "area-Extensions-Logging",
                       "needs-further-triage",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88599",
        "createdAt":  "2023-07-05T08:30:05Z",
        "number":  88599,
        "author":  "niuzheng168",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODMTr3g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "svengeance",
                                            "createdAt":  "2025-08-22T15:53:59Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-22T15:53:53Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI\u0027d like to change log level in runtime for a single request.\r\nMy scenario is  when customer report a bug that can only repro in PROD, they can send a request with additional parameter debug=1 like `https://mywebservice.com/request?para1=value1\u0026debug=1`\r\n\r\nAnd in runtime, I will create a logger with LogLevel = Debug, and very thing will be logged. \r\n\r\nChange the log level in environment variable or appsettings.json will impact other queries, but we are not allowed to touch any customer data.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nI\u0027d like to have an overload method with additional parameter in ILoggerFactory.CreateLogger\u003cT\u003e(LogLevel loglevel)\r\n\r\n### Additional context\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv57VqA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5hFciK",
                                           "createdAt":  "2023-07-05T10:45:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODAPoYg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "martincostello",
                                                                               "createdAt":  "2023-07-05T15:25:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gfoidl",
                                           "body":  "Why not log a separate entry (i.e. with level Info or Warning) when `debug=1` is set?\r\nI.e. don\u0027t use the default request logging for this, rather use custom logging.",
                                           "updatedAt":  "2023-07-05T10:45:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hFciU",
                                           "createdAt":  "2023-07-05T19:39:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Related:\r\nhttps://github.com/dotnet/aspnetcore/issues/39200\r\nhttps://github.com/dotnet/runtime/issues/82465",
                                           "updatedAt":  "2023-07-05T19:39:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hFcih",
                                           "createdAt":  "2023-07-10T08:05:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "niuzheng168",
                                           "body":  "\u003e Why not log a separate entry (i.e. with level Info or Warning) when `debug=1` is set? I.e. don\u0027t use the default request logging for this, rather use custom logging.\r\n\r\nThis sounds a just workaround. I\u0027d like reuse same logger but just a log level change.",
                                           "updatedAt":  "2023-07-10T08:05:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hFck1",
                                           "createdAt":  "2023-07-10T11:57:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI\u0027d like to change log level in runtime for a single request.\r\nMy scenario is  when customer report a bug that can only repro in PROD, they can send a request with additional parameter debug=1 like `https://mywebservice.com/request?para1=value1\u0026debug=1`\r\n\r\nAnd in runtime, I will create a logger with LogLevel = Debug, and very thing will be logged. \r\n\r\nChange the log level in environment variable or appsettings.json will impact other queries, but we are not allowed to touch any customer data.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nI\u0027d like to have an overload method with additional parameter in ILoggerFactory.CreateLogger\u003cT\u003e(LogLevel loglevel)\r\n\r\n### Additional context\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eniuzheng168\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-10T11:57:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_ntWo",
                                           "createdAt":  "2025-08-22T15:53:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svengeance",
                                           "body":  "Also desirable on my part. We would like to annotate certain customers as needing additional logging to help troubleshoot ongoing issues, with log verbosity that isn\u0027t sustainable to enable for all customers.",
                                           "updatedAt":  "2025-08-22T15:53:53Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Change LogLevel in runtime for single request",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90226",
        "createdAt":  "2023-08-09T12:43:43Z",
        "number":  90226,
        "author":  "slaneyrw",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-20T18:50:05Z",
        "body":  "### Description\r\n\r\nUsing the LoggerMessageGenerator source generator for logger messages generates code that is hard ( or impossible depending on the mocking library ) to using in Unit testing as the generated code allows the compiler to infer the type for TState.\r\n\r\nThe generator can create a private struct that encapsulates all the logger msg template\u0027s arguments and uses that as the TState argument.  Otherwise the default `LoggerMessage.Define` is used\r\n\r\nUsing LoggerMessage.Define directly causes the type argument to other private/internal types including Microsoft.Extensions.Logging.FormattedLogValues, Microsoft.Extensions.Logging.LogValuesFormatter or Microsoft.Extensions.Logging.LoggerMessage.LogValues flavors, \r\n\r\nThere is a discussion about whether these should be made public again for the same testing reasons.\r\n\r\nhttps://github.com/dotnet/runtime/issues/67577\r\n\r\n\r\nPlease specify the type argument for TState explicitly to `IReadOnlyList\u003cKeyValuePair\u003cstring, object\u003e\u003e`.\r\n\r\n### Reproduction Steps\r\n\r\nAdd a LoggerMessage attribute to a ILogger extension method as per current recommentations.  \r\n\r\nInspect generated source.  Invocation to logger.Log relies on implicit compiler inference.\r\n\r\n### Expected behavior\r\n\r\nAll calls to `ILogger.Log\u003cTState\u003e(...) ` should use public type definitions for the TState argument\r\n\r\n### Actual behavior\r\n\r\nprivate generated struct used as the TState type argument\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\nNone known\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\nAnother possibility is to make the types internal.  This would then allow the use of InternalsVisibleTo for known test projects and allow the type is to be used directly.\r\n\r\nThis is only a stop-gap as this pattern fails for library references as InternalsVisibleTo can not know the assembly(s) in advanced",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY51cRA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jnVxE",
                                           "createdAt":  "2023-08-09T12:43:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nUsing the LoggerMessageGenerator source generator for logger messages generates code that is hard ( or impossible depending on the mocking library ) to using in Unit testing as the generated code allows the compiler to infer the type for TState.\r\n\r\nThe generator creates a private struct that encapsulates all the logger msg template\u0027s arguments and using that as the TState argument.  Using the Logger extension methods directly causes the type argument to be Microsoft.Extensions.Logging.FormattedLogValues, which was made internal  There is a discussion about whether is should be made public again for the same testing reasons.\r\n\r\nhttps://github.com/dotnet/runtime/issues/67577\r\n\r\n\r\nPlease specify the type argument for TState explicitly to `IReadOnlyList\u003cKeyValuePair\u003cstring, object\u003e\u003e`.\n\n### Reproduction Steps\n\nAdd a LoggerMessage attribute to a ILogger extension method as per current recommentations.  \r\n\r\nInspect generated source.  Invocation to logger.Log relies on implicit compiler inference.\n\n### Expected behavior\n\nAll calls to `ILogger.Log\u003cTState\u003e(...) ` should use public type definitions for the TState argument\n\n### Actual behavior\n\nprivate generated struct used as the TState type argument\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\nNone known\n\n### Configuration\n\n_No response_\n\n### Other information\n\nAnother possibility is to make the types internal.  This would then allow the use of InternalsVisibleTo for known test projects and allow the type is to be used directly.\r\n\r\nThis is only a stop-gap as this pattern fails for library references as InternalsVisibleTo can not know the assembly(s) in advanced\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eslaneyrw\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-09T12:43:50Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "LoggerMessageGenerator uses a private struct as the TState type argument to ILogger.Log",
        "labels":  [
                       "area-Extensions-Logging",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90589",
        "createdAt":  "2023-08-15T11:30:10Z",
        "number":  90589,
        "author":  "alexrp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODFTc1w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "delixfe",
                                            "createdAt":  "2024-12-01T16:39:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Meir017",
                                            "createdAt":  "2024-12-20T06:38:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fvilches17",
                                            "createdAt":  "2025-02-04T11:47:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mephistofeles",
                                            "createdAt":  "2025-02-11T21:27:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "qfyra",
                                            "createdAt":  "2025-03-26T09:11:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kodaniel",
                                            "createdAt":  "2025-05-16T11:06:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "voroninp",
                                            "createdAt":  "2025-07-01T13:38:29Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2023-11-20T18:49:08Z",
        "body":  "From [this](https://learn.microsoft.com/en-us/dotnet/core/extensions/logger-message-generator#log-method-constraints) section:\r\n\r\n\u003e Logging methods cannot be generic.\r\n\r\nThis seems to be an unnecessary restriction that also works against the whole notion of high-performance logging.\r\n\r\nI would like to be able to write a logging method like so:\r\n\r\n```csharp\r\n[LoggerMessage(0, LogLevel.Trace, \"C -\u003e S {EndPoint}: {Channel}:{Code} ({Length} bytes)\")]\r\npublic static partial void PacketReceived\u003cTCode\u003e(ILogger logger, IPEndPoint endPoint, ConnectionChannel channel, TCode code, int length)\r\n    where TCode : struct, Enum;\r\n```\r\n\r\nHere, the type argument for `TCode` depends on the value of `Channel`. Of course, I could make the logging method non-generic and accept an `Enum`-typed value, but then I get unconditional boxing... certainly not what I want when logging in a fairly hot path. Alternatively, I could duplicate the method for as many `TCode`s as I have (which is what I\u0027ll do for now), but this is not great either, for all the expected maintenance reasons.\r\n\r\nI think this restriction should just be lifted. Maybe there\u0027s a good reason for it, but if there is, it\u0027s not obvious to me.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZBAz0g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kEDPS",
                                           "createdAt":  "2023-08-15T11:30:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFrom [this](https://learn.microsoft.com/en-us/dotnet/core/extensions/logger-message-generator#log-method-constraints) section:\r\n\r\n\u003e Logging methods cannot be generic.\r\n\r\nThis seems to be an unnecessary restriction that also works against the whole notion of high-performance logging.\r\n\r\nI would like to be able to write a logging method like so:\r\n\r\n```csharp\r\n[LoggerMessage(0, LogLevel.Trace, \"C -\u003e S {EndPoint}: {Channel}:{Code} ({Length} bytes)\")]\r\npublic static partial void PacketReceived\u003cTCode\u003e(ILogger logger, IPEndPoint endPoint, ConnectionChannel channel, TCode code, int length)\r\n    where TCode : struct, Enum;\r\n```\r\n\r\nHere, the type argument for `TCode` depends on the value of `Channel`. Of course, I could make the logging method non-generic and accept an `Enum`-typed value, but then I get unconditional boxing... certainly not what I want when logging in a fairly hot path. Alternatively, I could duplicate the method for as many `TCode`s as I have (which is what I\u0027ll do for now), but this is not great either, for all the expected maintenance reasons.\r\n\r\nI think this restriction should just be lifted. Maybe there\u0027s a good reason for it, but if there is, it\u0027s not obvious to me.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ealexrp\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-15T11:30:20Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Logging source generator should support generic methods (`SYSLIB1011` should be lifted)",
        "labels":  [
                       "area-Extensions-Logging",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90629",
        "createdAt":  "2023-08-15T19:06:44Z",
        "number":  90629,
        "author":  "paulomorgado",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9GTew==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "delixfe",
                                            "createdAt":  "2024-12-01T16:42:46Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-12-02T15:40:05Z",
        "body":  "### Background and motivation\n\n[Logging guidance for .NET library authors - Use `IsEnabled` to avoid expensive parameter evaluation](https://learn.microsoft.com/en-us/dotnet/core/extensions/logging-library-authors#use-isenabled-to-avoid-expensive-parameter-evaluation) advises to use a `IsEnabled` guard to avoid expensive parameter evaluations when they won\u0027t be needed.\r\n\r\nHowever, that causes the logging level needing to be coded at least, 2 places. (https://github.com/dotnet/docs/issues/36703)\r\n\r\n\n\n### API Proposal\n\n```csharp\r\nnamespace System.Collections.Generic;\r\n\r\npublic class MyFancyCollection\u003cT\u003e : IEnumerable\u003cT\u003e\r\n{\r\n    public void Fancy(T item);\r\n}\r\n```\r\n\r\nInstead of just generating the code for the logger message and its invocation, the generator could generate a `XXXIsEnabled` method to evaluate if logging is enabled for that message.\r\n\n\n### API Usage\n\nInstead of:\r\n\r\n```csharp\r\nif (_logger.IsEnabled(LogLevel.Information))\r\n{\r\n    // Expensive parameter evaluation\r\n    var description = product.GetFriendlyProductDescription();\r\n\r\n    _logger.LogProductSaleDetails(\r\n        quantity,\r\n        description);\r\n}\r\n```\r\n\r\nThe user would write this code:\r\n\r\n```csharp\r\nif (_logger.LogProductSaleDetailsIsEnabled())\r\n{\r\n    // Expensive parameter evaluation\r\n    var description = product.GetFriendlyProductDescription();\r\n\r\n    _logger.LogProductSaleDetails(\r\n        quantity,\r\n        description);\r\n}\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlbg-PA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kGugn",
                                           "createdAt":  "2023-08-15T19:31:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\n[Logging guidance for .NET library authors - Use `IsEnabled` to avoid expensive parameter evaluation](https://learn.microsoft.com/en-us/dotnet/core/extensions/logging-library-authors#use-isenabled-to-avoid-expensive-parameter-evaluation) advises to use a `IsEnabled` guard to avoid expensive parameter evaluations when they won\u0027t be needed.\r\n\r\nHowever, that causes the logging level needing to be coded at least, 2 places. (https://github.com/dotnet/docs/issues/36703)\r\n\r\n\n\n### API Proposal\n\n```csharp\r\nnamespace System.Collections.Generic;\r\n\r\npublic class MyFancyCollection\u003cT\u003e : IEnumerable\u003cT\u003e\r\n{\r\n    public void Fancy(T item);\r\n}\r\n```\r\n\r\nInstead of just generating the code for the logger message and its invocation, the generator could generate a `XXXIsEnabled` method to evaluate if logging is enabled for that message.\r\n\n\n### API Usage\n\nInstead of:\r\n\r\n```csharp\r\nif (_logger.IsEnabled(LogLevel.Information))\r\n{\r\n    // Expensive parameter evaluation\r\n    var description = product.GetFriendlyProductDescription();\r\n\r\n    _logger.LogProductSaleDetails(\r\n        quantity,\r\n        description);\r\n}\r\n```\r\n\r\nThe user would write this code:\r\n\r\n```csharp\r\nif (_logger.LogProductSaleDetailsIsEnabled())\r\n{\r\n    // Expensive parameter evaluation\r\n    var description = product.GetFriendlyProductDescription();\r\n\r\n    _logger.LogProductSaleDetails(\r\n        quantity,\r\n        description);\r\n}\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epaulomorgado\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-15T19:31:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kGz1V",
                                           "createdAt":  "2023-08-15T19:46:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "geeknoid",
                                           "body":  "Interesting idea. \r\n\r\nCalling _logger.IsEnabled is relatively expensive in itself, since it\u0027s doing an interface dispatch and there is some shenanigans in the implementation which makes it non-trivial. To help mitigate this overhead, the newer generated code will omit the IsEnabled check entirely when logging at warning and error levels, with the assumption that those log messages are almost always enabled in a production environment.\r\n\r\nThe pattern you show here is another case where the generated code should omit the explicit IsEnabled check, since the check is being done by the calling code. Where I\u0027m getting to is that we could have an option on [LoggerMessage] that means \"Please generate a dedicated IsEnabledXXX method to allow apps-level enablement checks, and don\u0027t generate the IsEnabled check\".",
                                           "updatedAt":  "2023-08-15T19:47:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m0sRH",
                                           "createdAt":  "2023-09-19T08:52:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "paulomorgado",
                                           "body":  "Checking if the log level is enabled is usually done to avoid processing that would only be done if logging is enabled for that log event.\r\n\r\nA generated check method would avoid the check being out of sync with the logging, like [here](https://source.dot.net/#Microsoft.AspNetCore.DataProtection/KeyManagement/KeyRingBasedDataProtector.cs,221), where **debug** level is being checked but logging is done in **trace** level.",
                                           "updatedAt":  "2023-09-19T08:52:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53Ma8r",
                                           "createdAt":  "2024-03-15T14:06:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODauEdw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2024-03-15T14:11:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "IEvangelist",
                                           "body":  "Please correct me if I\u0027m wrong, but for source-generated logging, when using the `LoggerMessage` attribute, there\u0027s an option to [`SkipEnabledCheck`](https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.loggermessageattribute.skipenabledcheck?view=dotnet-plat-ext-8.0). I\u0027d assume that when it\u0027s `true`, the check only happens once, when done manually — making this code perfectly valid:\r\n\r\n```cs\r\nif (_logger.IsEnabled(LogLevel.Information))\r\n{\r\n    // Expensive parameter evaluation\r\n    var description = product.GetFriendlyProductDescription();\r\n\r\n    _logger.LogProductSaleDetails(\r\n        quantity,\r\n        description);\r\n}\r\n```",
                                           "updatedAt":  "2024-03-15T14:06:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53MylE",
                                           "createdAt":  "2024-03-15T14:55:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "paulomorgado",
                                           "body":  "@IEvangelist,\r\n\r\nThe problem with that code is that, if `_logger.IsEnabled(LogLevel.Information)` is `true`, the log level enable might be checked more than once.\r\n\r\nEven if you want to set `SkipEnabledCheck` to `true` and retrieve the description from inside a logger method, you have to specify the log level in the attribute and in the check. And that might become out of sync.",
                                           "updatedAt":  "2024-03-15T14:55:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53NH5P",
                                           "createdAt":  "2024-03-15T15:38:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IEvangelist",
                                           "body":  "\u003e The problem with that code is that, if `_logger.IsEnabled(LogLevel.Information)` is `true`, the log level enable might be checked more than once.\r\n\r\nI\u0027m not sure I follow, with each invocation of the calling generated method, sure, it would be called each time. But that\u0027s expected behavior, as log level can change, think `IOptionsMonitor` for example, right? Each time it would need to be evaluated.\r\n\r\n\u003e Even if you want to set `SkipEnabledCheck` to `true` and retrieve the description from inside a logger method, _you have to specify the log level in the attribute_ and in the check. And that might become out of sync.\r\n\r\nThat\u0027s not true, you do not have to specific the log level at the attribute level, but yes, it is an option. You can, however; accept the `LogLevel` as a parameter on the method, and that\u0027s what is used as the check in the generated code, consider the following:\r\n\r\n```cs\r\nusing System.Text.Json;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nusing ILoggerFactory loggerFactory = LoggerFactory.Create(\r\n    builder =\u003e\r\n    builder.AddJsonConsole(\r\n        options =\u003e\r\n        options.JsonWriterOptions = new JsonWriterOptions()\r\n        {\r\n            Indented = true\r\n        }));\r\n\r\nILogger\u003cSampleObject\u003e logger = loggerFactory.CreateLogger\u003cSampleObject\u003e();\r\nlogger.PlaceOfResidence(logLevel: LogLevel.Information, name: \"Liana\", city: \"Seattle\");\r\n\r\nreadonly file record struct SampleObject { }\r\n\r\npublic static partial class Log\r\n{\r\n    [LoggerMessage(EventId = 23, Message = \"{Name} lives in {City}.\")]\r\n    public static partial void PlaceOfResidence(\r\n        this ILogger logger,\r\n        LogLevel logLevel,\r\n        string name,\r\n        string city);\r\n}\r\n```\r\n\r\nAnd here\u0027s the generated source:\r\n\r\n```cs\r\n// \u003cauto-generated/\u003e\r\n#nullable enable\r\n\r\n    partial class Log\r\n    {\r\n        /// \u003csummary\u003e This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. \u003c/summary\u003e\r\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"8.0.9.3103\")]\r\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]\r\n        private readonly struct __PlaceOfResidenceStruct : global::System.Collections.Generic.IReadOnlyList\u003cglobal::System.Collections.Generic.KeyValuePair\u003cstring, object?\u003e\u003e\r\n        {\r\n            private readonly global::System.String _name;\r\n            private readonly global::System.String _city;\r\n\r\n            public __PlaceOfResidenceStruct(global::System.String name, global::System.String city)\r\n            {\r\n                this._name = name;\r\n                this._city = city;\r\n\r\n            }\r\n\r\n            public override string ToString()\r\n            {\r\n                var Name = this._name;\r\n                var City = this._city;\r\n\r\n                return $\"{Name} lives in {City}.\";\r\n            }\r\n\r\n            public static readonly global::System.Func\u003c__PlaceOfResidenceStruct, global::System.Exception?, string\u003e Format = (state, ex) =\u003e state.ToString();\r\n\r\n            public int Count =\u003e 3;\r\n\r\n            public global::System.Collections.Generic.KeyValuePair\u003cstring, object?\u003e this[int index]\r\n            {\r\n                get =\u003e index switch\r\n                {\r\n                    0 =\u003e new global::System.Collections.Generic.KeyValuePair\u003cstring, object?\u003e(\"Name\", this._name),\r\n                    1 =\u003e new global::System.Collections.Generic.KeyValuePair\u003cstring, object?\u003e(\"City\", this._city),\r\n                    2 =\u003e new global::System.Collections.Generic.KeyValuePair\u003cstring, object?\u003e(\"{OriginalFormat}\", \"{Name} lives in {City}.\"),\r\n\r\n                    _ =\u003e throw new global::System.IndexOutOfRangeException(nameof(index)),  // return the same exception LoggerMessage.Define returns in this case\r\n                };\r\n            }\r\n\r\n            public global::System.Collections.Generic.IEnumerator\u003cglobal::System.Collections.Generic.KeyValuePair\u003cstring, object?\u003e\u003e GetEnumerator()\r\n            {\r\n                for (int i = 0; i \u003c 3; i++)\r\n                {\r\n                    yield return this[i];\r\n                }\r\n            }\r\n\r\n            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() =\u003e GetEnumerator();\r\n        }\r\n\r\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"8.0.9.3103\")]\r\n        public static partial void PlaceOfResidence(this global::Microsoft.Extensions.Logging.ILogger logger, global::Microsoft.Extensions.Logging.LogLevel logLevel, global::System.String name, global::System.String city)\r\n        {\r\n            if (logger.IsEnabled(logLevel))\r\n            {\r\n                logger.Log(\r\n                    logLevel,\r\n                    new global::Microsoft.Extensions.Logging.EventId(23, nameof(PlaceOfResidence)),\r\n                    new __PlaceOfResidenceStruct(name, city),\r\n                    null,\r\n                    __PlaceOfResidenceStruct.Format);\r\n            }\r\n        }\r\n    }\r\n```",
                                           "updatedAt":  "2024-03-15T15:38:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53Nhxi",
                                           "createdAt":  "2024-03-15T16:35:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "paulomorgado",
                                           "body":  "My request is that the source generator would avoid the need to hand-code methods like [this](https://source.dot.net/#Microsoft.AspNetCore.DataProtection/LoggingExtensions.cs):\r\n\r\n```csharp\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\npublic static bool IsDebugLevelEnabled([NotNullWhen(true)] this ILogger? logger)\r\n{\r\n\treturn IsLogLevelEnabledCore(logger, LogLevel.Debug);\r\n}\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\npublic static bool IsTraceLevelEnabled([NotNullWhen(true)] this ILogger? logger)\r\n{\r\n\treturn IsLogLevelEnabledCore(logger, LogLevel.Trace);\r\n}\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\nprivate static bool IsLogLevelEnabledCore([NotNullWhen(true)] ILogger? logger, LogLevel level)\r\n{\r\n\treturn (logger != null \u0026\u0026 logger.IsEnabled(level));\r\n}\r\n```\r\n\r\nwhich is even worst when used like [this](https://source.dot.net/#Microsoft.AspNetCore.DataProtection/KeyManagement/KeyRingBasedDataProtector.cs,101):\r\n\r\n```csharp\r\nif (_logger.IsDebugLevelEnabled())\r\n{\r\n    _logger.PerformingProtectOperationToKeyWithPurposes(defaultKeyId, JoinPurposesForLog(Purposes));\r\n}\r\n```\r\n\r\nNothing in `PerformingProtectOperationToKeyWithPurposes` tells me that I should be checking if logging is enabled for `Debug`.\r\n\r\nThis would be easier to understand:\r\n\r\n```csharp\r\nif (_logger.IsPerformingProtectOperationToKeyWithPurposesLoggingEnabled())\r\n{\r\n    _logger.PerformingProtectOperationToKeyWithPurposes(defaultKeyId, JoinPurposesForLog(Purposes));\r\n}\r\n```\r\n\r\nBut hand-coding that may become out-of-sync with the logging method. So a source generator generated method would be a nice thing to have.",
                                           "updatedAt":  "2024-03-15T16:35:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VnDd2",
                                           "createdAt":  "2024-12-01T17:06:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD9M9KQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-12-02T13:24:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "delixfe",
                                           "body":  "What about supporting a `Func\u003cT\u003e` as argument? \n\n```csharp\n\n[LoggerMessage(LogLevel.Debug, \"SalesDetails: {quantity} {descritpion}\"]\npartial void LogProductSaleDetails(int quantity, Func\u003cstring\u003e description);\n\nvoid Execute(Product product)\n{\n   _logger.LogProductSaleDetails(\n        quantity,\n        ()=\u003e product.GetFriendlyProductDescription());\n}\n```\n\nThis would solve the synchronization between the calling code and the `LoggerMessage` definition.\n\nAdditionally, any checks are opaque to the caller. Thus the source generator can optimize the implementation.",
                                           "updatedAt":  "2024-12-01T17:06:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VndWb",
                                           "createdAt":  "2024-12-01T17:49:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "paulomorgado",
                                           "body":  "Admitedly, checking logging level is not for free, but neither is delegate instantiation and invocation.\n\nAnd for something like your example, I\u0027m doing something like:\n\n```csharp\ninternal static class LoggingExtensions\n{\n  [LoggerMessage(LogLevel.Debug, \"SalesDetails: {quantity} {descritpion}\", SkipEnabledCheck = true]\n  private static partial void LogProductSaleDetailsImpl(int quantity, Func\u003cstring\u003e description);\n  \n  public static void LogProductSaleDetails(this ILogger logger, int quantity, Product product)\n  {\n    if (logger.IsEnabled(LogLevel.Debug))\n    {\n        logger.LogProductSaleDetailsImpl(quantity, product.GetFriendlyProductDescription());\n    }\n  }\n}\n```\n\nAnd that\u0027s precisely one of the places where this would be useful to keep the log level test in synch with what\u0027s declared in the attribute.",
                                           "updatedAt":  "2024-12-01T17:49:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Vsxvh",
                                           "createdAt":  "2024-12-02T13:26:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@paulomorgado I assume that\u0027s actually what you meant in your example?\n```diff\n-logger.LogProductSaleDetailsImpl(quantity, product.GetFriendlyProductDescription());\n+logger.LogProductSaleDetailsImpl(quantity, product.GetFriendlyProductDescription);\n```\n\n\n",
                                           "updatedAt":  "2024-12-02T13:26:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VuD48",
                                           "createdAt":  "2024-12-02T15:40:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "paulomorgado",
                                           "body":  "\u003e [@paulomorgado](https://github.com/paulomorgado) I assume that\u0027s actually what you meant in your example?\n\u003e \n\u003e -logger.LogProductSaleDetailsImpl(quantity, product.GetFriendlyProductDescription());\n\u003e +logger.LogProductSaleDetailsImpl(quantity, product.GetFriendlyProductDescription);\n\nNope! I don\u0027t use delegates, unless there\u0027s no other way.",
                                           "updatedAt":  "2024-12-02T15:40:04Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Add XXXIsEnabled method generation to the LoggerMessage generator",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91178",
        "createdAt":  "2023-08-27T17:54:37Z",
        "number":  91178,
        "author":  "NinoFloris",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9GUlg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-01-28T13:18:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "delixfe",
                                            "createdAt":  "2024-12-01T17:08:02Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-26T10:44:33Z",
        "body":  "Looking at a size trace of an asp.net app using Npgsql and I\u0027m seeing a few things around logging that add significant bloat.\r\n\r\nOur messages: \r\nhttps://github.com/npgsql/npgsql/blob/274a1d174b44640d727f57751921541f335d6ffb/src/Npgsql/LogMessages.cs#L20\r\n\r\nWe easily add 100+ kb for Npgsql because of: https://github.com/dotnet/runtime/issues/85116. Good to see it\u0027s being tracked for 9.0.\r\n\r\nNext I noticed some of our methods have method parameters but no corresponding structured message parameter. Regardless LoggerMessageGenerator generates a TState struct and adds generic code bloat.\r\n\r\nContinuing analysis of LoggerMessageGenerator codegen I noticed we have a ton of messages all logging the same parameters, today each gets their own struct and resulting generic code bloat throughout the logging stack. It would be useful if a Type to be used could be passed to the attribute allowing us to share definitions, or alternatively the generator might be able to do deduplication within an assembly automatically.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOue7aBA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5lA3YK",
                                           "createdAt":  "2023-08-27T17:54:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nLooking at a size trace of an asp.net app using Npgsql and I\u0027m seeing a few things around logging that add significant bloat.\r\n\r\nOur messages: \r\nhttps://github.com/npgsql/npgsql/blob/274a1d174b44640d727f57751921541f335d6ffb/src/Npgsql/LogMessages.cs#L20\r\n\r\nWe easily add 100+ kb for Npgsql because of: https://github.com/dotnet/runtime/issues/85116. Good to see it\u0027s being tracked for 9.0.\r\n\r\nNext I noticed some of our methods have method parameters but no corresponding structured message parameter. Regardless LoggerMessageGenerator generates a TState struct and adds generic code bloat.\r\n\r\nContinuing analysis of LoggerMessageGenerator codegen I noticed we have a ton of messages all logging the same parameters, today each gets their own struct and resulting generic code bloat throughout the logging stack. It would be useful if a Type to be used could be passed to the attribute allowing us to share definitions, or alternatively the generator might be able to do deduplication within an assembly automatically.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNinoFloris\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-27T17:54:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc656cgs",
                                           "createdAt":  "2025-07-25T16:16:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "@tarekgh would you accept PRs for this?",
                                           "updatedAt":  "2025-07-25T16:16:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc657toE",
                                           "createdAt":  "2025-07-25T16:51:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@NinoFloris We appreciate that. \n\nPlease note that we cannot accept any changes to public APIs at this stage for .NET 10. If your changes involve any public surface area, they will most likely need to wait for a future release. Additionally, it would be helpful if you could provide some benchmark numbers to demonstrate the gains from your changes. Thanks again for your willingness to contribute!",
                                           "updatedAt":  "2025-07-25T16:51:59Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "LoggerMessageGenerator optimizations",
        "labels":  [
                       "area-Extensions-Logging",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91268",
        "createdAt":  "2023-08-29T13:10:20Z",
        "number":  91268,
        "author":  "Alex-Sob",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9GUxw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "delixfe",
                                            "createdAt":  "2024-12-01T17:14:12Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-08-30T15:57:12Z",
        "body":  "[IExternalScopeProvider](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/IExternalScopeProvider.cs) contains `ForEachScope` method that takes a delegate to execute for each scope object. It\u0027s often needed to access `this` or some variables declared outside of the delegate, it\u0027s easy to write code that will make two unnecessary allocations (a delegate and a closure object). Even though there\u0027s TState parameter, not every developer is aware of the cost of the delegates and closures and therefore they will pay this overhead. Also multiple loggers are used in an app, this will be multiplied by the number of loggers. This seems to be a considerable footprint left by each logging call.\r\n\r\nAdditionally, consider this example where it\u0027s not possible to avoid a closure:\r\n\r\n```cs\r\nStringBuilder builder = null;\r\n\r\nthis.ExternalScopeProvider.ForEachScope((scope, _) =\u003e\r\n{\r\n    // We would like to create a StringBuilder only if necessary, but it\u0027s not possible without closing over the variable\r\n}, builder);\r\n\r\nif (builder != null) Use(builder);\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZT-wFA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5lLJIa",
                                           "createdAt":  "2023-08-29T13:11:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n[IExternalScopeProvider](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Logging.Abstractions/src/IExternalScopeProvider.cs) contains `ForEachScope` method that takes a delegate to execute for each scope object. It\u0027s often needed to access `this` or some variables declared outside of the delegate, it\u0027s easy to write code that will make two unnecessary allocations (a delegate and a closure object). Even though there\u0027s TState parameter, not every developer is aware of the cost of the delegates and closures and therefore they will pay this overhead.\r\n\r\nAdditionally, consider this example where it\u0027s not possible to avoid a closure:\r\n\r\n```cs\r\nStringBuilder builder = null;\r\n\r\nthis.ExternalScopeProvider.ForEachScope((scope, _) =\u003e\r\n{\r\n    // We would like to create a StringBuilder only if necessary, but it\u0027s not possible without closing over the variable\r\n}, builder);\r\n\r\nif (builder != null) Use(builder);\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAlex-Sob\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tenet-performance`, `untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-29T13:11:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lMoFi",
                                           "createdAt":  "2023-08-29T16:48:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "This issue is generic to any API that takes a delegate and state object and not specific to logging only. Maybe adding some doc section for that or having analyzer for it if it is not already there. I found the analyzer https://marketplace.visualstudio.com/items?itemName=MukulSabharwal.ClrHeapAllocationAnalyzer that can help in such cases. @Alex-Sob could you try it and let\u0027s know if it helps address your scenario? ",
                                           "updatedAt":  "2023-08-29T17:11:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lMvpb",
                                           "createdAt":  "2023-08-29T17:12:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-08-29T17:12:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lP7AU",
                                           "createdAt":  "2023-08-30T07:52:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Alex-Sob",
                                           "body":  "@tarekgh My point is that an API taking a delegate just seems to add a little more unnecessary complexity for user, and the user should be very careful to use it \u0027right\u0027, otherwise it will result in unexpected overhead (and I suspect this is quite common, based on real experience). Moreover, in some cases it\u0027s impossible to avoid overhead (as in example from the description). And logging is an important component to many apps and performance matters considering that it may be called frequently.\r\n\r\nI think that just providing `IEnumerable\u003cobject\u003e` instead of the delegate-based API will simplify things and avoid potential pitfalls. Maybe you could consider deprecating `ForEachScope`.",
                                           "updatedAt":  "2023-08-30T07:56:28Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "IExternalScopeProvider API is not \u0027performance-friendly\u0027",
        "labels":  [
                       "tenet-performance",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91678",
        "createdAt":  "2023-09-06T15:39:18Z",
        "number":  91678,
        "author":  "abrca",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-06T17:01:15Z",
        "body":  "### Description\n\nUsing \u0027params\u0027 keyword in method parameters \"params object?[] args\" in partial class under [LoggerMessage] attribute cause Compiler Error CS0758 - in generated code \u0027params\u0027 keyword is absent\n\n### Reproduction Steps\n\n```\r\nusing Microsoft.Extensions.Logging;\r\n\r\ninternal static partial class LogMessages\r\n{\r\n    [LoggerMessage(Message = \"Message: {message}, {args}\", Level = LogLevel.Information)]\r\n    internal static partial void MSG(this ILogger logger, string? message, params object?[] args);\r\n}\r\n\r\n```\r\n\r\n\n\n### Expected behavior\n\nCompile\n\n### Actual behavior\n\nin source-generated file LoggerMessage.g.cs, \u0027params\u0027 keyword is absent in method parameters \"global::System.Object?[] args\"\r\n\r\n```\r\npartial class LogMessages\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"7.0.7.1805\")]\r\n    private static readonly global::System.Action\u003cglobal::Microsoft.Extensions.Logging.ILogger, global::System.String?, global::System.Object?[], global::System.Exception?\u003e __MSGCallback =\r\n        global::Microsoft.Extensions.Logging.LoggerMessage.Define\u003cglobal::System.String?, global::System.Object?[]\u003e(global::Microsoft.Extensions.Logging.LogLevel.Information, new global::Microsoft.Extensions.Logging.EventId(-1, nameof(MSG)), \"Message: {message}, {args}\", new global::Microsoft.Extensions.Logging.LogDefineOptions() { SkipEnabledCheck = true }); \r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"7.0.7.1805\")]\r\n    internal static partial void MSG(this global::Microsoft.Extensions.Logging.ILogger logger, global::System.String? message, global::System.Object?[] args)\r\n    {\r\n        if (logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Information))\r\n        {\r\n            __MSGCallback(logger, message, args, null);\r\n        }\r\n    }\r\n}\r\n```\r\n\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 7.0\r\nWindows 10 x64\r\nVisual Studio Community 2022\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh2gKQQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5l16Wy",
                                           "createdAt":  "2023-09-06T15:39:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nUsing \u0027params\u0027 keyword in method parameters \"params object?[] args\" in partial class under [LoggerMessage] attribute cause Compiler Error CS0758 - in generated code \u0027params\u0027 keyword is absent\n\n### Reproduction Steps\n\n```\r\nusing Microsoft.Extensions.Logging;\r\n\r\ninternal static partial class LogMessages\r\n{\r\n    [LoggerMessage(Message = \"Message: {message}, {args}\", Level = LogLevel.Information)]\r\n    internal static partial void MSG(this ILogger logger, string? message, params object?[] args);\r\n}\r\n\r\n```\r\n\r\n\n\n### Expected behavior\n\nCompile\n\n### Actual behavior\n\nin source-generated file LoggerMessage.g.cs, \u0027params\u0027 keyword is absent in method parameters \"global::System.Object?[] args\"\r\n\r\n```\r\npartial class LogMessages\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"7.0.7.1805\")]\r\n    private static readonly global::System.Action\u003cglobal::Microsoft.Extensions.Logging.ILogger, global::System.String?, global::System.Object?[], global::System.Exception?\u003e __MSGCallback =\r\n        global::Microsoft.Extensions.Logging.LoggerMessage.Define\u003cglobal::System.String?, global::System.Object?[]\u003e(global::Microsoft.Extensions.Logging.LogLevel.Information, new global::Microsoft.Extensions.Logging.EventId(-1, nameof(MSG)), \"Message: {message}, {args}\", new global::Microsoft.Extensions.Logging.LogDefineOptions() { SkipEnabledCheck = true }); \r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"7.0.7.1805\")]\r\n    internal static partial void MSG(this global::Microsoft.Extensions.Logging.ILogger logger, global::System.String? message, global::System.Object?[] args)\r\n    {\r\n        if (logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Information))\r\n        {\r\n            __MSGCallback(logger, message, args, null);\r\n        }\r\n    }\r\n}\r\n```\r\n\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 7.0\r\nWindows 10 x64\r\nVisual Studio Community 2022\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eabrca\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-06T15:39:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HaApB",
                                           "createdAt":  "2024-08-06T17:01:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Maybe we could emit a better message here, but I don\u0027t think params are supported or useful here.  The way they\u0027re listed in the template wouldn\u0027t format the actual values.",
                                           "updatedAt":  "2024-08-06T17:01:04Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Source generation error in LoggerMessageAttribute in Microsoft.Extensions.Logging.Abstractions",
        "labels":  [
                       "enhancement",
                       "area-Extensions-Logging",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93309",
        "createdAt":  "2023-10-10T17:58:20Z",
        "number":  93309,
        "author":  "ericstj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1et5A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tarekgh",
                                            "createdAt":  "2023-10-10T18:07:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-01-28T13:17:44Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-26T10:44:36Z",
        "body":  "### Description\r\n\r\nSee more detail in https://github.com/dotnet/runtime/issues/92914.\r\n\r\n### Reproduction Steps\r\n\r\nCreate a project that uses Logging source generator.  Observe it\u0027s execution pattern - either in the debugger or through ETW.\r\n\r\n### Expected behavior\r\n\r\nChanges unrelated to the logging code and it\u0027s type closure should not trigger regeneration of the logging source.\r\n\r\n### Actual behavior\r\n\r\nEvery change causes the entire pipeline to rerun.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\nWe haven\u0027t had reports of the performance here being a blocker, but that could be due to lack of use.  The amount of work done on keypress will depend on whether or not the generator has work to do.  If it has a lot of work to do, then it will be doing that work on every change.\r\n \r\nDisable the logging generator from design-time builds (this will result in errors where the generator is used, which are design time only errors).\r\nWorkaround:\r\n```xml\r\n  \u003cTarget Name=\"_disableLoggingGeneratorInDesignTime\" BeforeTargets=\"ResolveOffByDefaultAnalyzers\"\u003e\r\n    \u003cItemGroup Condition=\"\u0027$(DesignTimeBuild)\u0027 == \u0027true\u0027 OR \u0027$(BuildingProject)\u0027 != \u0027true\u0027\"\u003e\r\n      \u003cOffByDefaultAnalyzer Include=\"Microsoft.Extensions.Logging.Generators.dll\"\r\n                            IsEnabled=\"$(EnableLoggingGenerator)\"/\u003e\r\n    \u003c/ItemGroup\u003e\r\n  \u003c/Target\u003e\r\n```\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh2pZlA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5oqcHV",
                                           "createdAt":  "2023-10-10T17:58:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nSee more detail in https://github.com/dotnet/runtime/issues/92914.\r\n\n\n### Reproduction Steps\n\nCreate a project that uses Logging source generator.  Observe it\u0027s execution pattern - either in the debugger or through ETW.\n\n### Expected behavior\n\nChanges unrelated to the logging code and it\u0027s type closure should not trigger regeneration of the logging source.\n\n### Actual behavior\n\nEvery change causes the entire pipeline to rerun.\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\nWe haven\u0027t had reports of the performance here being a blocker, but that could be due to lack of use.  The amount of work done on keypress will depend on whether or not the generator has work to do.  If it has a lot of work to do, then it will be doing that work on every change.\r\n \r\nDisable the logging generator from design-time builds (this will result in errors where the generator is used, which are design time only errors).\r\nWorkaround:\r\n```xml\r\n  \u003cTarget Name=\"_disableLoggingGeneratorInDesignTime\" BeforeTargets=\"ResolveOffByDefaultAnalyzers\"\u003e\r\n    \u003cItemGroup Condition=\"\u0027$(DesignTimeBuild)\u0027 == \u0027true\u0027 OR \u0027$(BuildingProject)\u0027 != \u0027true\u0027\"\u003e\r\n      \u003cOffByDefaultAnalyzer Include=\"Microsoft.Extensions.Logging.Generators.dll\"\r\n                            IsEnabled=\"$(EnableLoggingGenerator)\"/\u003e\r\n    \u003c/ItemGroup\u003e\r\n  \u003c/Target\u003e\r\n```\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eericstj\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-10T17:58:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HZ3xe",
                                           "createdAt":  "2024-08-06T16:39:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "We discussed improving the incremental characteristics of the runtime source generators and scoped it out of 9.0",
                                           "updatedAt":  "2024-08-06T16:39:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HalmU",
                                           "createdAt":  "2024-08-06T18:27:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Youssef1313",
                                           "body":  "@ericstj Note: Maybe for design-time builds, the generator could generate minimal code (partial method definitions without implementation), which could be fast and incremental, and fixes IntelliSense. And for actual builds the implementation is generated.\r\n\r\nOne potential consideration that I\u0027m not sure about is, in what context does a build for EnC/HotReload happens? Is it a design-time build or non-design-time?",
                                           "updatedAt":  "2024-08-06T18:27:00Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Logging source generator reruns code generation phase on keypress.",
        "labels":  [
                       "area-Extensions-Logging",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93562",
        "createdAt":  "2023-10-16T17:48:11Z",
        "number":  93562,
        "author":  "DavidThielen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-18T23:08:01Z",
        "body":  "### Description\r\n\r\nI have one ILoggerProvider that works perfectly (in Blazor server). The other does not get the configuration settings.\r\n\r\nEven weirder, if you define the `[Blob]` provider to be passed FileLoggerOptions, it then gets the File options, event though it\u0027s defined with `[ProviderAlias(\"Blob\")]`\r\n\r\n### Reproduction Steps\r\n\r\n[I have a very simple example here](https://www.dropbox.com/scl/fi/bdwwcazwqvn4pcgtfazv1/Blazor_Logger_bug.zip?rlkey=g27gdzvp4ehg8zy3fwc573oez\u0026dl=1).\r\n\r\nSet a breakpoint on the constructors. You will see that BlobLoggerOptions is not populated:\r\n\r\n```cs\r\n\t\tpublic BlobLoggerProvider(IOptionsMonitor\u003cBlobLoggerOptions\u003e options) : this(options.CurrentValue)\r\n\t\t{\r\n\t\t\tSettingsChangeToken = options.OnChange(opt =\u003e { Options = opt; });\r\n\t\t}\r\n\r\n\t\tpublic BlobLoggerProvider(BlobLoggerOptions options)\r\n\t\t{\r\n\t\t\tOptions = options;\r\n\t\t\tOptions = new BlobLoggerOptions\r\n\t\t\t{\r\n\t\t\t\tPath = \"log/{yyyy-MM-dd}.txt\",\r\n\t\t\t\tInterval = \"day\",\r\n\t\t\t\tAzureStorage = \"UseDevelopmentStorage=true\"\r\n\t\t\t};\r\n\t\t\tInterval = GetInterval(Options.Interval);\r\n\r\n\t\t\tStart();\r\n\t\t}\r\n```\r\n\r\nSet breakpoints in the constructors for FileLoggerProvider and you will see that FileLoggerOptions is populated.\r\n\r\n**Please note** (maybe I shouldn\u0027t have done this), the BlobLoggerProvider constructor sets explicit values for the options. I have that so the logger can run - but that is there because the passed in `options` parameter has all null values. It should not be necessary to set these explicit values.\r\n\r\nSo there\u0027s some bug in when the appsettings.json file settings are populated in the options.\r\n\r\nIn addition (let me know if this is connected or if I need to create a 2nd bug report) - neither `Dispose()` not `AsyncDispose()` is called when the application ends.\r\n\r\n\r\n### Expected behavior\r\n\r\nBlobLoggerOptions is populated when passed to the BlobLoggerProvider() constructor.\r\n\r\n### Actual behavior\r\n\r\nBlobLoggerOptions is all nulls.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nHard code the properties in the code (not a good solution).\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaXkeOg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5pM29x",
                                           "createdAt":  "2023-10-16T17:48:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI have one ILoggerProvider that works perfectly (in Blazor server). The other does not get the configuration settings.\r\n\r\nEven weirder, if you define the `[Blob]` provider to be passed FileLoggerOptions, it then gets the File options, event though it\u0027s defined with `[ProviderAlias(\"Blob\")]`\n\n### Reproduction Steps\n\n[I have a very simple example here](https://www.dropbox.com/scl/fi/bdwwcazwqvn4pcgtfazv1/Blazor_Logger_bug.zip?rlkey=g27gdzvp4ehg8zy3fwc573oez\u0026dl=1).\r\n\r\nSet a breakpoint on the constructors. You will see that BlobLoggerOptions is not populated:\r\n\r\n```cs\r\n\t\tpublic BlobLoggerProvider(IOptionsMonitor\u003cBlobLoggerOptions\u003e options) : this(options.CurrentValue)\r\n\t\t{\r\n\t\t\tSettingsChangeToken = options.OnChange(opt =\u003e { Options = opt; });\r\n\t\t}\r\n\r\n\t\tpublic BlobLoggerProvider(BlobLoggerOptions options)\r\n\t\t{\r\n\t\t\tOptions = options;\r\n\t\t\tOptions = new BlobLoggerOptions\r\n\t\t\t{\r\n\t\t\t\tPath = \"log/{yyyy-MM-dd}.txt\",\r\n\t\t\t\tInterval = \"day\",\r\n\t\t\t\tAzureStorage = \"UseDevelopmentStorage=true\"\r\n\t\t\t};\r\n\t\t\tInterval = GetInterval(Options.Interval);\r\n\r\n\t\t\tStart();\r\n\t\t}\r\n```\r\n\r\nSet breakpoints in the constructors for FileLoggerProvider and you will see that FileLoggerOptions is populated.\r\n\r\nSo there\u0027s some bug in when the appsettings.json file settings are populated in the options.\r\n\n\n### Expected behavior\n\nBlobLoggerOptions is populated when passed to the BlobLoggerProvider() constructor.\n\n### Actual behavior\n\nBlobLoggerOptions is all nulls.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nHard code the properties in the code (not a good solution).\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDavidThielen\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-16T17:48:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5peR46",
                                           "createdAt":  "2023-10-18T23:08:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DavidThielen",
                                           "body":  "It was a (very subtle) bug in my code. No bug in LoggingProvider.\r\n\r\n```cs\r\n\tinternal class BlobLoggerOptionsSetup : ConfigureFromConfigurationOptions\u003cBlobLoggerOptions\u003e\r\n\t{\r\n\t\tpublic BlobLoggerOptionsSetup(ILoggerProviderConfiguration\u003cBlobLoggerProvider\u003e providerConfiguration)\r\n\t\t\t: base(providerConfiguration.Configuration)\r\n\t\t{\r\n\t\t}\r\n\t}\r\n```",
                                           "updatedAt":  "2023-10-18T23:08:00Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ILoggerProvider implementation - does not read the config settings",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93924",
        "createdAt":  "2023-10-24T13:59:15Z",
        "number":  93924,
        "author":  "kimsey0",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODA5hbw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "siewers",
                                            "createdAt":  "2023-10-24T15:09:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xpl0itR",
                                            "createdAt":  "2024-07-06T06:32:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ByteclubCode",
                                            "createdAt":  "2024-07-09T09:10:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Meir017",
                                            "createdAt":  "2025-04-06T06:21:32Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2023-10-27T16:20:35Z",
        "body":  "### Background and motivation\n\n#51064 introduced a new LoggingGenerator source generator which allows writing code like\r\n\r\n```csharp\r\npublic partial class LoggingSample3\r\n{\r\n    private readonly ILogger _logger;\r\n\r\n    public LoggingSample3(ILogger logger)\r\n    {\r\n        _logger = logger;\r\n    }\r\n\r\n    [LoggerMessage(EventId = 0, Level = LogLevel.Information, Message = \"Hello {name}\")]\r\n    public partial void LogName(string name);\r\n}\r\n```\r\n\r\nand having an implementation using `LoggerMessage.Define` generated like\r\n\r\n```csharp\r\npartial class LoggingSample3\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"1.0.0.0\")]\r\n    private static readonly global::System.Action\u003cglobal::Microsoft.Extensions.Logging.ILogger, string, global::System.Exception?\u003e _LogNameCallback =\r\n        global::Microsoft.Extensions.Logging.LoggerMessage.Define\u003cstring\u003e(global::Microsoft.Extensions.Logging.LogLevel.Information, new global::Microsoft.Extensions.Logging.EventId(0, nameof(LogName)), \"Hello {name}\", skipEnabledCheck: true);\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"1.0.0.0\")]\r\n    public partial void LogName(string name)\r\n    {\r\n        if (_logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Information))\r\n        {\r\n            _LogNameCallback(_logger, name, null);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nHowever, this doesn\u0027t support the other method for high-performance logging, `LoggerMessage.DefineScope`. This means that, if you use scopes, you will have manual calls to `LoggerMessage.DefineScope` and the requisite delegate fields side-by-side with the new source generator approach:\r\n\r\n```csharp\r\n[LoggerMessage(EventId = 0, Level = LogLevel.Information, Message = \"Hello {name}\")]\r\npublic partial void LogName(string name);\r\n\r\nprivate static readonly Func\u003cILogger, string, int, IDisposable?\u003e ScopeCallback =\r\n    LoggerMessage.DefineScope\u003cstring, int\u003e(\"Value={Value};OtherValue={OtherValue}\");\r\n\r\npublic IDisposable? Scope(string value, int otherValue) =\u003e ScopeCallback(_logger, value, otherValue);\r\n```\n\n### API Proposal\n\nI suggest adding a new attribute side-by-side with the existing `LoggerMessageAttribute`\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Logging;\r\n\r\n[AttributeUsage(AttributeTargets.Method)]\r\npublic sealed partial class LoggerMessageScopeAttribute : Attribute\r\n{\r\n    public LoggerMessageScopeAttribute();\r\n    public string Message { get; set; } = \"\";\r\n}\r\n```\r\n\r\nand having LoggingGenerator generate calls to `LoggerMessage.DefineScope`, similar to the way it currently generates them for `LoggerMessage.Define`.\n\n### API Usage\n\nThis will allow defining logger messages and scopes in the same way:\r\n\r\n```csharp\r\n[LoggerMessage(EventId = 0, Level = LogLevel.Information, Message = \"Hello {name}\")]\r\npublic partial void LogName(string name);\r\n\r\n[LoggerMessageScope(Message = \"Value={Value};OtherValue={OtherValue}\")]\r\npublic partial IDisposable? Scope(string value, int otherValue);\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOakk1Sw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5p7wL-",
                                           "createdAt":  "2023-10-24T13:59:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\n#51064 introduced a new LoggingGenerator source generator which allows writing code like\r\n\r\n```csharp\r\npublic partial class LoggingSample3\r\n{\r\n    private readonly ILogger _logger;\r\n\r\n    public LoggingSample3(ILogger logger)\r\n    {\r\n        _logger = logger;\r\n    }\r\n\r\n    [LoggerMessage(EventId = 0, Level = LogLevel.Information, Message = \"Hello {name}\")]\r\n    public partial void LogName(string name);\r\n}\r\n```\r\n\r\nand having an implementation using `LoggerMessage.Define` generated like\r\n\r\n```csharp\r\npartial class LoggingSample3\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"1.0.0.0\")]\r\n    private static readonly global::System.Action\u003cglobal::Microsoft.Extensions.Logging.ILogger, string, global::System.Exception?\u003e _LogNameCallback =\r\n        global::Microsoft.Extensions.Logging.LoggerMessage.Define\u003cstring\u003e(global::Microsoft.Extensions.Logging.LogLevel.Information, new global::Microsoft.Extensions.Logging.EventId(0, nameof(LogName)), \"Hello {name}\", skipEnabledCheck: true);\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"1.0.0.0\")]\r\n    public partial void LogName(string name)\r\n    {\r\n        if (_logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Information))\r\n        {\r\n            _LogNameCallback(_logger, name, null);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nHowever, this doesn\u0027t support the other method for high-performance logging, `LoggerMessage.DefineScope`. This means that, if you use scopes, you will have manual calls to `LoggerMessage.DefineScope` and the requisite delegate fields side-by-side with the new source generator approach:\r\n\r\n```csharp\r\n[LoggerMessage(EventId = 0, Level = LogLevel.Information, Message = \"Hello {name}\")]\r\npublic partial void LogName(string name);\r\n\r\nprivate static readonly Func\u003cILogger, string, int, IDisposable?\u003e ScopeCallback =\r\n    LoggerMessage.DefineScope\u003cstring, int\u003e(\"Value={Value};OtherValue={OtherValue}\");\r\n\r\npublic IDisposable? Scope(string value, int otherValue) =\u003e ScopeCallback(_logger, value, otherValue);\r\n```\n\n### API Proposal\n\nI suggest adding a new attribute side-by-side with the existing `LoggerMessageAttribute`\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Logging;\r\n\r\n[AttributeUsage(AttributeTargets.Method)]\r\npublic sealed partial class LoggerMessageScopeAttribute : Attribute\r\n{\r\n    public LoggerMessageScopeAttribute();\r\n    public string Message { get; set; } = \"\";\r\n}\r\n```\r\n\r\nand having LoggingGenerator generate calls to `LoggerMessage.DefineScope`, similar to the way it currently generates them for `LoggerMessage.Define`.\n\n### API Usage\n\nThis will allow defining logger messages and scopes in the same way:\r\n\r\n```csharp\r\n[LoggerMessage(EventId = 0, Level = LogLevel.Information, Message = \"Hello {name}\")]\r\npublic partial void LogName(string name);\r\n\r\n[LoggerMessageScope(Message = \"Value={Value};OtherValue={OtherValue}\")]\r\npublic partial IDisposable? Scope(string value, int otherValue);\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekimsey0\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-24T13:59:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qBNDC",
                                           "createdAt":  "2023-10-25T07:46:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kimsey0",
                                           "body":  "@geeknoid and @maryamariyan, maybe you have some input on this based on your work on the current LoggingGenerator? Is this as straightforward as I see it?",
                                           "updatedAt":  "2023-10-25T07:46:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qEaO-",
                                           "createdAt":  "2023-10-25T15:30:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "geeknoid",
                                           "body":  "Technically, this seems reasonable.\r\n\r\nHowever, I thought that the logging scope thing was somewhat abandoned at this point. I think it was @davidfowl that mentioned this to me.",
                                           "updatedAt":  "2023-10-25T15:30:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qJmJV",
                                           "createdAt":  "2023-10-26T11:05:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kimsey0",
                                           "body":  "I didn\u0027t know scopes were being abandoned. There\u0027s nothing in [the logging documentation](https://learn.microsoft.com/en-us/dotnet/core/extensions/logging#log-scopes) nor [the high-performance logging](https://learn.microsoft.com/en-us/dotnet/core/extensions/high-performance-logging#define-logger-message-scope) that indicates this. But if that\u0027s the case, this issue might not make sense. Perhaps instead the documentation should be updated to advice against using scopes.",
                                           "updatedAt":  "2023-10-26T11:05:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qNVUn",
                                           "createdAt":  "2023-10-26T20:53:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "This looks a duplicate of https://github.com/dotnet/runtime/issues/79028.",
                                           "updatedAt":  "2023-10-26T20:53:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qNZQr",
                                           "createdAt":  "2023-10-26T21:07:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kimsey0",
                                           "body":  "@tarekgh: Looking at #79028, this doesn\u0027t look to be a duplicate of it. #79028 proposes to add a scope parameter to generated `[LoggerMessage]` methods. This asks to add separately generated methods for `LoggerMessage.DefineScope`. Can we reopen it until we\u0027ve determined if scopes are being deprecated altogether?",
                                           "updatedAt":  "2023-10-26T21:07:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qNgkb",
                                           "createdAt":  "2023-10-26T21:34:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I am not aware the scope is abandoned. I see the scope is used heavily in all internal and external logger providers.\r\n\r\n@kimsey0 do you think make sense merging the two proposals? I mean this one and https://github.com/dotnet/runtime/issues/79028? I am thinking of collecting all related scope scenarios together to support in the source gen. Ensure all of them work nicely together. ",
                                           "updatedAt":  "2023-10-26T21:37:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qOuHc",
                                           "createdAt":  "2023-10-27T03:46:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "geeknoid",
                                           "body":  "I\u0027d love to hear what @davidfowl has to say on the general subject of logging scopes and their usefulness in general.",
                                           "updatedAt":  "2023-10-27T03:46:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qOwy_",
                                           "createdAt":  "2023-10-27T04:02:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD6cVJw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "christiannagel",
                                                                               "createdAt":  "2024-11-12T06:47:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I\u0027ve been personally attempting to abandoning scopes (https://github.com/dotnet/aspnetcore/pull/44873) in favor of activities and distributed tracing. I know it doesn\u0027t cover all scenarios but I think it works well for most cases. This just enrichment done with a more generic and less efficient api.",
                                           "updatedAt":  "2023-10-27T04:03:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qPtOU",
                                           "createdAt":  "2023-10-27T08:21:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kimsey0",
                                           "body":  "@tarekgh: I can\u0027t really see how the API proposed in #79028 would work. It suggests allowing a `[LoggerScope] scope` parameter in `[LoggerMessage]` methods, but doesn\u0027t address how to pass in arguments for the scope message format. I think it would be complicated and confusing to match parameters in the original declaration to placeholders in both the scope and log messages - what for example if both use the same placeholder with different casing? It seems limiting if it doesn\u0027t support arguments for the scope message at all. And in the first place, I don\u0027t understand the use case for a scope around just one message.\r\n\r\nHowever, if you think both make sense to implement and to do together, I defer to your judgement.",
                                           "updatedAt":  "2023-10-27T08:21:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qSTVL",
                                           "createdAt":  "2023-10-27T16:20:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLKmlQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kimsey0",
                                                                               "createdAt":  "2023-10-27T16:23:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2023-10-27T16:56:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e if you think both make sense to implement and to do together, I defer to your judgement.\r\n\r\nI am not pushing to have both at all. All I am trying to say is we need to ensure what makes sense to do with the scope in general and ensure we have a full story. We didn\u0027t have chance look deeply at https://github.com/dotnet/runtime/issues/79028. You may ignore it then for now. ",
                                           "updatedAt":  "2023-10-27T16:20:35Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[API Proposal]: Extend LoggingGenerator to support scopes",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95057",
        "createdAt":  "2023-11-21T10:08:44Z",
        "number":  95057,
        "author":  "luiscantero",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1vHaQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AndreyFedorovIID",
                                            "createdAt":  "2024-02-08T13:18:18Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-11-23T19:31:56Z",
        "body":  "### Description\n\nThe code below fails to compile depending on the order of the placeholders in the template. It only happens when a C# keyword with an @ prefix is included.\n\n### Reproduction Steps\n\n```c#\r\nprivate readonly ILogger _logger = new LoggerFactory().CreateLogger(\"SomeNamespace\");\r\n\r\nstatic void Main(string[] args) { }\r\n\r\n[LoggerMessage(eventId: 1, LogLevel.Information, \"Resource: {resource}. Namespace: {namespace}.\")]\r\npartial void LogEvent(string @namespace, string resource);\r\n```\r\n\r\nThe above generates the following invalid code (see unescaped variable `namespace`):\r\n```c#\r\npublic override string ToString()\r\n{\r\n    var resource = this._resource;\r\n    var namespace = this.@namespace;\r\n\r\n    return $\"Resource: {resource}. Namespace: {namespace}.\";\r\n}\r\n```\n\n### Expected behavior\n\nThe generator should generate valid escaped code to reference the c# keywords.\n\n### Actual behavior\n\nSome of the warnings and errors include:\r\n```\r\nWarning\tS3251: Supply an implementation for this partial method.\r\nerror CS0759: No defining declaration found for implementing declaration of partial method \u0027\u003cinvalid-global-code\u003e.LogEvent(string, string)\u0027\r\nerror CS0751: A partial method must be declared within a partial type\r\nerror CS0116: A namespace cannot directly contain members such as fields, methods or statements\r\nerror CS0246: The type or namespace name \u0027namespace\u0027 could not be found (are you missing a using directive or an assembly reference?)\r\nerror CS0246: The type or namespace name \u0027__LogEventStruct\u0027 could not be found (are you missing a using directive or an assembly reference?)\r\nerror CS0540: \u0027\u003cinvalid-global-code\u003e.IEnumerable.GetEnumerator()\u0027: containing type does not implement interface \u0027IEnumerable\u0027\r\nerror CS0548: \u0027\u003cinvalid-global-code\u003e.this[namespace]\u0027: property or indexer must have at least one accessor\r\nerror CS0535: \u0027Program.__LogEventStruct\u0027 does not implement interface member \u0027IReadOnlyList\u003cKeyValuePair\u003cstring, object?\u003e\u003e.this[int]\u0027\r\nerror CS0535: \u0027Program.__LogEventStruct\u0027 does not implement interface member \u0027IReadOnlyCollection\u003cKeyValuePair\u003cstring, object?\u003e\u003e.Count\u0027\r\nerror CS0535: \u0027Program.__LogEventStruct\u0027 does not implement interface member \u0027IEnumerable\u003cKeyValuePair\u003cstring, object?\u003e\u003e.GetEnumerator()\u0027\r\nerror CS0535: \u0027Program.__LogEventStruct\u0027 does not implement interface member \u0027IEnumerable.GetEnumerator()\u0027\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nThe order of the placeholders should match the order of the parameters. The following compiles and works fine:\r\n```c#\r\n[LoggerMessage(eventId: 1, LogLevel.Information, \"Namespace: {namespace}. Resource: {resource}.\")]\r\npartial void LogEvent(string @namespace, string resource);\r\n```\r\n\r\nIf the placeholder for the C# keyword uses PascalCase as recommended by [CA1727](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1727), it also works fine:\r\n```c#\r\n[LoggerMessage(eventId: 1, LogLevel.Information, \"Resource: {resource}. Namespace: {Namespace}.\")]\r\npartial void LogEvent(string @namespace, string resource);\r\n```\n\n### Configuration\n\nReproduced with:\r\n* .NET 7\r\n* Microsoft.Extensions.Logging `7.0.0` and `8.0.0`\r\n* Microsoft.Extensions.Logging.Abstractions `7.0.0`, `7.0.1` and `8.0.0`\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObMTwTQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5shDrA",
                                           "createdAt":  "2023-11-21T10:09:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe code below fails to compile depending on the order of the placeholders in the template. It only happens when a C# keyword with an @ prefix is included.\n\n### Reproduction Steps\n\n```c#\r\nprivate readonly ILogger _logger = new LoggerFactory().CreateLogger(\"SomeNamespace\");\r\n\r\nstatic void Main(string[] args) { }\r\n\r\n[LoggerMessage(eventId: 1, LogLevel.Information, \"Resource: {resource}. Namespace: {namespace}.\")]\r\npartial void LogEvent(string @namespace, string resource);\r\n```\r\n\r\nThe above generates the following invalid code (see unescaped variable `namespace`):\r\n```c#\r\npublic override string ToString()\r\n{\r\n    var resource = this._resource;\r\n    var namespace = this.@namespace;\r\n\r\n    return $\"Resource: {resource}. Namespace: {namespace}.\";\r\n}\r\n```\n\n### Expected behavior\n\nThe generator should generate valid escaped code to reference the c# keywords.\n\n### Actual behavior\n\nSome of the warnings and errors include:\r\n```\r\nWarning\tS3251: Supply an implementation for this partial method.\r\nerror CS0759: No defining declaration found for implementing declaration of partial method \u0027\u003cinvalid-global-code\u003e.LogEvent(string, string)\u0027\r\nerror CS0751: A partial method must be declared within a partial type\r\nerror CS0116: A namespace cannot directly contain members such as fields, methods or statements\r\nerror CS0246: The type or namespace name \u0027namespace\u0027 could not be found (are you missing a using directive or an assembly reference?)\r\nerror CS0246: The type or namespace name \u0027__LogEventStruct\u0027 could not be found (are you missing a using directive or an assembly reference?)\r\nerror CS0540: \u0027\u003cinvalid-global-code\u003e.IEnumerable.GetEnumerator()\u0027: containing type does not implement interface \u0027IEnumerable\u0027\r\nerror CS0548: \u0027\u003cinvalid-global-code\u003e.this[namespace]\u0027: property or indexer must have at least one accessor\r\nerror CS0535: \u0027Program.__LogEventStruct\u0027 does not implement interface member \u0027IReadOnlyList\u003cKeyValuePair\u003cstring, object?\u003e\u003e.this[int]\u0027\r\nerror CS0535: \u0027Program.__LogEventStruct\u0027 does not implement interface member \u0027IReadOnlyCollection\u003cKeyValuePair\u003cstring, object?\u003e\u003e.Count\u0027\r\nerror CS0535: \u0027Program.__LogEventStruct\u0027 does not implement interface member \u0027IEnumerable\u003cKeyValuePair\u003cstring, object?\u003e\u003e.GetEnumerator()\u0027\r\nerror CS0535: \u0027Program.__LogEventStruct\u0027 does not implement interface member \u0027IEnumerable.GetEnumerator()\u0027\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nThe order of the placeholders should match the order of the parameters. The following compiles and works fine:\r\n```c#\r\n[LoggerMessage(eventId: 1, LogLevel.Information, \"Namespace: {namespace}. Resource: {resource}.\")]\r\npartial void LogEvent(string @namespace, string resource);\r\n```\r\n\r\nIf the placeholder for the C# keyword uses PascalCase as recommended by [CA1727](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1727), it also works fine:\r\n```c#\r\n[LoggerMessage(eventId: 1, LogLevel.Information, \"Resource: {resource}. Namespace: {Namespace}.\")]\r\npartial void LogEvent(string @namespace, string resource);\r\n```\n\n### Configuration\n\nReproduced with:\r\n* .NET 7\r\n* Microsoft.Extensions.Logging `7.0.0` and `8.0.0`\r\n* Microsoft.Extensions.Logging.Abstractions `7.0.0`, `7.0.1` and `8.0.0`\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eluiscantero\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-21T10:09:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5skwGy",
                                           "createdAt":  "2023-11-21T19:43:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@luiscantero did you try to prefix the `namespace` with `@` in the message template? \r\n\r\n```C#\r\n[LoggerMessage(eventId: 1, LogLevel.Information, \"Resource: {resource}. Namespace: {@namespace}.\")]\r\n```\r\n\r\nThe problem is when using template not matching the logger message parameter order, the generator generates a struct to encapsulate the data. The `namespace` will be a field inside the struct which causes the errors because `namespace` is a C# keyword. I agree this can be fixed inside the source generator, but it is easy to work around it which makes this issue low priority. ",
                                           "updatedAt":  "2023-11-21T19:48:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5skwOc",
                                           "createdAt":  "2023-11-21T19:44:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-11-21T19:44:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5soOJ-",
                                           "createdAt":  "2023-11-22T10:18:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luiscantero",
                                           "body":  "Hi @tarekgh, using namespace with prefix @ works in the simple case above. But in our actual project it shows SYSLIB1014 and SYSLIB1015:\r\n![image](https://github.com/dotnet/runtime/assets/1353540/5decabff-6738-4551-a3e4-b795b2ffef3c)\r\n",
                                           "updatedAt":  "2023-11-22T10:20:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sqvTC",
                                           "createdAt":  "2023-11-22T16:54:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Could you try providing a sample code that produces the issue? Additionally, is it feasible to provide the segment of the generated code that triggered the diagnostic errors?",
                                           "updatedAt":  "2023-11-22T16:54:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sqvZc",
                                           "createdAt":  "2023-11-22T16:54:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-11-22T16:54:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5strbT",
                                           "createdAt":  "2023-11-23T07:26:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNel7g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2023-11-23T19:25:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "luiscantero",
                                           "body":  "@tarekgh I just did some tests and we see SYSLIB1014 and SYSLIB1015 when using @ namespace in our project because we are still using Microsoft.Extensions.Logging 7.0.0 and Microsoft.Extensions.Logging.Abstractions 7.0.1 there. With 8.0.0 the warnings don\u0027t show. ",
                                           "updatedAt":  "2023-11-23T07:26:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxPBN",
                                           "createdAt":  "2023-11-23T19:30:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNgiww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "luiscantero",
                                                                               "createdAt":  "2023-11-24T08:14:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@luiscantero Indeed, in .NET 8.0, we have addressed issues related to @ support. I believe you should be in good shape now if you are using .NET 8.0.",
                                           "updatedAt":  "2023-11-23T19:30:32Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  " Logging Source Generator fails to compile using keyword parameters with @ prefixes depending on the placeholder order",
        "labels":  [
                       "area-Extensions-Logging",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96128",
        "createdAt":  "2023-12-18T11:09:44Z",
        "number":  96128,
        "author":  "paulomorgado",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-18T12:06:36Z",
        "body":  "### Background and motivation\n\nEven though the contract for `ILogger.BeginScope\u003cTState\u003e(TState)` states the the return value can be `null` (`IDisposable?`), actually returning `null` should be avoided.\r\n\r\nThe correct usage of the API should be something like:\r\n\r\n```csharp\r\nvar loggingScope = logger.BeginScope(...);\r\ntry\r\n{\r\n    // ...\r\n}\r\nfinally\r\n{\r\n    loggingScope?.Dispose();\r\n}\r\n```\n\n### API Proposal\n\n```csharp\r\nusing Microsoft.Extensions.Logging;\r\n \r\nnamespace Microsoft.AspNetCore.Grpc.JsonTranscoding.IntegrationTests.Infrastructure;\r\n \r\ninternal class ForwardingLoggerProvider : ILoggerProvider\r\n{\r\n    private readonly LogMessage _logAction;\r\n \r\n    public ForwardingLoggerProvider(LogMessage logAction)\r\n    {\r\n        _logAction = logAction;\r\n    }\r\n \r\n    public ILogger CreateLogger(string categoryName)\r\n    {\r\n        return new ForwardingLogger(categoryName, _logAction);\r\n    }\r\n \r\n    public void Dispose()\r\n    {\r\n    }\r\n \r\n    internal class ForwardingLogger : ILogger\r\n    {\r\n        private readonly string _categoryName;\r\n        private readonly LogMessage _logAction;\r\n \r\n        public ForwardingLogger(string categoryName, LogMessage logAction)\r\n        {\r\n            _categoryName = categoryName;\r\n            _logAction = logAction;\r\n        }\r\n \r\n        public IDisposable? BeginScope\u003cTState\u003e(TState state) where TState : notnull\r\n        {\r\n            return NullScope.Instance!;\r\n        }\r\n \r\n        public bool IsEnabled(LogLevel logLevel)\r\n        {\r\n            return true;\r\n        }\r\n \r\n        public void Log\u003cTState\u003e(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func\u003cTState, Exception?, string\u003e formatter)\r\n        {\r\n            _logAction(logLevel, _categoryName, eventId, formatter(state, exception), exception);\r\n        }\r\n\r\n        private sealed class NullScope : IDisposable\r\n        {\r\n            public static NullScope Instance { get; } = new NullScope();\r\n \r\n            private NullScope()\r\n            {\r\n            }\r\n \r\n            /// \u003cinheritdoc /\u003e\r\n            public void Dispose()\r\n            {\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nusing var loggingScope = logger.BeginScope(...);\r\n\r\n// ...\r\n```\r\n\n\n### Alternative Designs\n\nProvide an empty `IDisposable` implementation in the BCL to avoid reimplementation and external dependencies.\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcSaeCw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5u4BAY",
                                           "createdAt":  "2023-12-18T11:09:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nEven though the contract for `ILogger.BeginScope\u003cTState\u003e(TState)` states the the return value can be `null` (`IDisposable?`), actually returning `null` should be avoided.\r\n\r\nThe correct usage of the API should be something like:\r\n\r\n```csharp\r\nvar loggingScope = logger.BeginScope(...);\r\ntry\r\n{\r\n    // ...\r\n}\r\nfinally\r\n{\r\n    loggingScope?.Dispose();\r\n}\r\n```\n\n### API Proposal\n\n```csharp\r\nusing Microsoft.Extensions.Logging;\r\n \r\nnamespace Microsoft.AspNetCore.Grpc.JsonTranscoding.IntegrationTests.Infrastructure;\r\n \r\ninternal class ForwardingLoggerProvider : ILoggerProvider\r\n{\r\n    private readonly LogMessage _logAction;\r\n \r\n    public ForwardingLoggerProvider(LogMessage logAction)\r\n    {\r\n        _logAction = logAction;\r\n    }\r\n \r\n    public ILogger CreateLogger(string categoryName)\r\n    {\r\n        return new ForwardingLogger(categoryName, _logAction);\r\n    }\r\n \r\n    public void Dispose()\r\n    {\r\n    }\r\n \r\n    internal class ForwardingLogger : ILogger\r\n    {\r\n        private readonly string _categoryName;\r\n        private readonly LogMessage _logAction;\r\n \r\n        public ForwardingLogger(string categoryName, LogMessage logAction)\r\n        {\r\n            _categoryName = categoryName;\r\n            _logAction = logAction;\r\n        }\r\n \r\n        public IDisposable? BeginScope\u003cTState\u003e(TState state) where TState : notnull\r\n        {\r\n            return NullScope.Instance!;\r\n        }\r\n \r\n        public bool IsEnabled(LogLevel logLevel)\r\n        {\r\n            return true;\r\n        }\r\n \r\n        public void Log\u003cTState\u003e(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func\u003cTState, Exception?, string\u003e formatter)\r\n        {\r\n            _logAction(logLevel, _categoryName, eventId, formatter(state, exception), exception);\r\n        }\r\n\r\n        private sealed class NullScope : IDisposable\r\n        {\r\n            public static NullScope Instance { get; } = new NullScope();\r\n \r\n            private NullScope()\r\n            {\r\n            }\r\n \r\n            /// \u003cinheritdoc /\u003e\r\n            public void Dispose()\r\n            {\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nusing var loggingScope = logger.BeginScope(...);\r\n\r\n// ...\r\n```\r\n\n\n### Alternative Designs\n\nProvide an empty `IDisposable` implementation in the BCL to avoid reimplementation and external dependencies.\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epaulomorgado\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-18T11:09:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5u4cDK",
                                           "createdAt":  "2023-12-18T11:55:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODTHPLA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "paulomorgado",
                                                                               "createdAt":  "2023-12-18T14:11:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nazar554",
                                                                               "createdAt":  "2023-12-18T14:15:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vcsjones",
                                                                               "createdAt":  "2023-12-18T14:31:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-12-19T20:19:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "qsdfplkj",
                                                                               "createdAt":  "2024-01-18T11:59:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "pinkfloydx33",
                                           "body":  "I don\u0027t understand why this would be necessary. If used in a `using` the compiler already inserts a `null` check on the disposable before calling `Dispose`. [SharpLab](https://sharplab.io/#v2:D4AQTADAsAUOCMtYggAgG4EMBOqAuqAvKgCoCmAzngBQCUA3MvAJzUBEgPBuAg+2w0jAEkAIgEsKABwD2FTACMANmQD8pSjVpEAfKgB2AV3nz6QA)",
                                           "updatedAt":  "2023-12-18T11:55:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5u5uo9",
                                           "createdAt":  "2023-12-18T14:20:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQHNjQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "paulomorgado",
                                                                               "createdAt":  "2023-12-18T14:26:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-12-19T20:19:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "skyoxZ",
                                           "body":  "Some info there: https://github.com/dotnet/runtime/issues/63867",
                                           "updatedAt":  "2023-12-18T14:20:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xJp4L",
                                           "createdAt":  "2024-01-18T12:06:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "qsdfplkj",
                                           "body":  "Not all loggers do support scopes. This might give the false impression there is a scope so now we have to check if the returned object is a nullscope v.s. checking for null?",
                                           "updatedAt":  "2024-01-18T12:06:35Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: Consider making all implementations of ILogger.BeginScope\u003cTState\u003e(TState) return a non-null value",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98200",
        "createdAt":  "2024-02-09T00:11:35Z",
        "number":  98200,
        "author":  "fededim",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-20T23:15:05Z",
        "body":  "### Background and motivation\r\n\r\nHi,\r\n\r\nI noticed that `ILogger.Log` method has as [input parameter](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Logging.Abstractions/ref/Microsoft.Extensions.Logging.Abstractions.cs#L33) a `Func\u003cTState, System.Exception?, string\u003e formatter` _which is great since it could support the skipping of the calculation and formatting of the message string when the log must not be done_ (e.g. you use `LogDebug `in code and in configuration you have set to log `Info `or above).\r\n\r\nUnluckily this possibility is thwarted by the [extensions methods](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Logging.Abstractions/ref/Microsoft.Extensions.Logging.Abstractions.cs#L67-L90) in **Microsoft.Extensions.Logging.LoggerExtensions** which have always as input parameters a `string message,  params object?[] args` which are always evaluated before making the `Log` function call (e.g. call-by-value).\r\n\r\nWhat about providing also extension methods with `Lazy\u003cFormattedLogValues\u003e` or `Func\u003cFormattedLogValues\u003e` and a language construct to quickly create with a short syntax a general `new Lazy\u003cT\u003e( () =\u003e return object/struct of type t)` ? This could be a great speedup in performance since sometimes when you call the `Log[Critical|Debug|Error|Information|Trace|Warning]` methods the `args` parameters you pass might contain function calls which are always evaluated even when the log entry must not be written.\r\n\r\nSumming up the main idea behind this suggestion is that Log function should only pass by value or reference the data needed to evaluate if the log entry must be written or not and if needed then call a function in order to format the message with parameters. Moreover the short syntax language construct for creating a Lazy could be useful in order context too.\r\n\r\n\r\n### API Proposal\r\n\r\n```csharp\r\npublic static partial class LoggerExtensions\r\n    {\r\n        public static System.IDisposable? BeginScope(this Microsoft.Extensions.Logging.ILogger logger, string messageFormat, params object?[] args) { throw null; }\r\n        public static void Log(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void Log(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void Log(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.LogLevel logLevel, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void Log(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.LogLevel logLevel, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogCritical(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogCritical(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogCritical(this Microsoft.Extensions.Logging.ILogger logger, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogCritical(this Microsoft.Extensions.Logging.ILogger logger, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogDebug(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogDebug(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogDebug(this Microsoft.Extensions.Logging.ILogger logger, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogDebug(this Microsoft.Extensions.Logging.ILogger logger, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogError(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogError(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogError(this Microsoft.Extensions.Logging.ILogger logger, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogError(this Microsoft.Extensions.Logging.ILogger logger, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogInformation(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogInformation(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogInformation(this Microsoft.Extensions.Logging.ILogger logger, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogInformation(this Microsoft.Extensions.Logging.ILogger logger, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogTrace(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogTrace(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogTrace(this Microsoft.Extensions.Logging.ILogger logger, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogTrace(this Microsoft.Extensions.Logging.ILogger logger, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogWarning(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogWarning(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogWarning(this Microsoft.Extensions.Logging.ILogger logger, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogWarning(this Microsoft.Extensions.Logging.ILogger logger, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n    }\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nILogger log;\r\n\r\nlog.LogInformation(new Lazy\u003cFormattedLogValues\u003e(() =\u003e new FormattedLogValues(message,args));\r\n\r\nthe short syntax might be [(message,args)] where the Lazy type would be inferred from the function signature and what is inside the square brackets would be passed to its constructor (it\u0027s just the first thing I came up with, obviously you can use whatever you think is the best with the objective of being as shortest as possible), so the above method could be easily rewritten as\r\n\r\nlog.LogInformation([(message,args)]);\r\n\r\n\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nAn alternative design would be add the call-by-name to C# language, but I fear it would be quite demanding and troublesome; with this however you would achieve the performance improvement without even changing the signature.\r\n\r\n### Risks\r\n\r\nNo breaking changes since the new api are overloads.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdIuBtg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5zV7G3",
                                           "createdAt":  "2024-02-09T00:11:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nHi,\r\n\r\nI noticed that `ILogger.Log` method has as [input parameter](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Logging.Abstractions/ref/Microsoft.Extensions.Logging.Abstractions.cs#L33) a `Func\u003cTState, System.Exception?, string\u003e formatter` _which is great since it could support the skipping of the calculation and formatting of the message string when the log must not be done_ (e.g. you use `LogDebug `in code and in configuration you have set to log `Info `or above).\r\n\r\nUnluckily this possibility is thwarted by the [extensions methods](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Logging.Abstractions/ref/Microsoft.Extensions.Logging.Abstractions.cs#L67-L90) in **Microsoft.Extensions.Logging.LoggerExtensions** which have always as input parameters a `string message,  params object?[] args` which are always evaluated before making the `Log` function call (e.g. call-by-value).\r\n\r\nWhat about providing also extension methods with `Lazy\u003cFormattedLogValues\u003e` or `Func\u003cFormattedLogValues\u003e` and a language construct to quickly create with a short syntax a general `new Lazy\u003cT\u003e( () =\u003e return object/struct of type t)` ? This could be a great speedup in performance since sometimes when you call the `Log[Critical|Debug|Error|Information|Trace|Warning]` methods the `args` parameters you pass might contain function calls which are always evaluated even when the log entry must not be written.\r\n\r\nSumming up the main idea behind this suggestion is that Log function should only pass by value or reference the data needed to evaluate if the log entry must be written or not and if needed then call a function in order to format the message with parameters. Moreover the short syntax language construct for creating a Lazy could be useful in order context too.\r\n\n\n### API Proposal\n\n```csharp\r\nnamespace System.Collections.Generic;\r\n\r\npublic class MyFancyCollection\u003cT\u003e : IEnumerable\u003cT\u003e\r\n{\r\n    public void Fancy(T item);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\npublic static partial class LoggerExtensions\r\n    {\r\n        public static System.IDisposable? BeginScope(this Microsoft.Extensions.Logging.ILogger logger, string messageFormat, params object?[] args) { throw null; }\r\n        public static void Log(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void Log(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void Log(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.LogLevel logLevel, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void Log(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.LogLevel logLevel, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogCritical(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogCritical(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogCritical(this Microsoft.Extensions.Logging.ILogger logger, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogCritical(this Microsoft.Extensions.Logging.ILogger logger, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogDebug(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogDebug(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogDebug(this Microsoft.Extensions.Logging.ILogger logger, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogDebug(this Microsoft.Extensions.Logging.ILogger logger, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogError(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogError(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogError(this Microsoft.Extensions.Logging.ILogger logger, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogError(this Microsoft.Extensions.Logging.ILogger logger, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogInformation(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogInformation(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogInformation(this Microsoft.Extensions.Logging.ILogger logger, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogInformation(this Microsoft.Extensions.Logging.ILogger logger, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogTrace(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogTrace(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogTrace(this Microsoft.Extensions.Logging.ILogger logger, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogTrace(this Microsoft.Extensions.Logging.ILogger logger, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogWarning(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogWarning(this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogWarning(this Microsoft.Extensions.Logging.ILogger logger, System.Exception? exception, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n        public static void LogWarning(this Microsoft.Extensions.Logging.ILogger logger, Lazy\u003cFormattedLogValues\u003e messageWithArgs) { }\r\n    }\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nNo breaking changes since the new api are overloads.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efededim\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-09T00:11:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50h4s8",
                                           "createdAt":  "2024-02-20T20:37:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vladd",
                                           "body":  "I assume, it’s possible with interpolated string handlers, like it’s outlined [here](https://devblogs.microsoft.com/dotnet/string-interpolation-in-c-10-and-net-6/) (see chapter _Debug.Assert Without The Overhead_). Interpolated string handlers implement a kind of call-by-need. However, a new overload with an interpolated string would be needed.",
                                           "updatedAt":  "2024-02-20T20:49:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50i4G2",
                                           "createdAt":  "2024-02-20T23:15:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vladd",
                                           "body":  "Actually, there is a complete example with the code [here](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/interpolated-string-handler).",
                                           "updatedAt":  "2024-02-20T23:15:04Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Add support for lazy evalution of message and args parameters in Microsoft.Extensions.Logging.LoggerExtensions to improve performance",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98702",
        "createdAt":  "2024-02-20T16:10:08Z",
        "number":  98702,
        "author":  "cd21h",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-22T02:02:10Z",
        "body":  "There is an opportunity to remove memory application by replacing string with shared buffer:\r\n\r\nhttps://github.com/dotnet/runtime/blob/2df640c9cb9cd3b50225b9a4fa65e8f414f50bdf/src/libraries/Microsoft.Extensions.Logging.Console/src/JsonConsoleFormatter.cs#L79\r\n`textWriter.Write(Encoding.UTF8.GetString(output.WrittenMemory.Span));`\r\n\r\ncan be replaced with \r\n\r\n```csharp\r\nvar messageBytes = writerBuffer.WrittenMemory.Span;\r\nbuffer = ArrayPool\u003cchar\u003e.Shared.Rent(Encoding.UTF8.GetCharCount(messageBytes));\r\nvar charsWritten = Encoding.UTF8.GetChars(messageBytes, buffer);\r\ntextWriter.Write(buffer, 0, charsWritten);\r\nArrayPool\u003cchar\u003e.Shared.Return(buffer);\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdLy73g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc50gBdn",
                                           "createdAt":  "2024-02-20T16:10:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-memory\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThere is an opportunity to remove memory application by replacing string with shared buffer:\r\n\r\nhttps://github.com/dotnet/runtime/blob/2df640c9cb9cd3b50225b9a4fa65e8f414f50bdf/src/libraries/Microsoft.Extensions.Logging.Console/src/JsonConsoleFormatter.cs#L79\r\n`textWriter.Write(Encoding.UTF8.GetString(output.WrittenMemory.Span));`\r\n\r\ncan be replaced with \r\n\r\n```csharp\r\nvar messageBytes = writerBuffer.WrittenMemory.Span;\r\nbuffer = ArrayPool\u003cchar\u003e.Shared.Rent(Encoding.UTF8.GetCharCount(messageBytes));\r\nvar charsWritten = Encoding.UTF8.GetChars(messageBytes, buffer);\r\ntextWriter.Write(buffer, 0, charsWritten);\r\nArrayPool\u003cchar\u003e.Shared.Return(buffer);\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eshatl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Memory`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-20T16:10:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50mUdp",
                                           "createdAt":  "2024-02-21T09:13:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThere is an opportunity to remove memory application by replacing string with shared buffer:\r\n\r\nhttps://github.com/dotnet/runtime/blob/2df640c9cb9cd3b50225b9a4fa65e8f414f50bdf/src/libraries/Microsoft.Extensions.Logging.Console/src/JsonConsoleFormatter.cs#L79\r\n`textWriter.Write(Encoding.UTF8.GetString(output.WrittenMemory.Span));`\r\n\r\ncan be replaced with \r\n\r\n```csharp\r\nvar messageBytes = writerBuffer.WrittenMemory.Span;\r\nbuffer = ArrayPool\u003cchar\u003e.Shared.Rent(Encoding.UTF8.GetCharCount(messageBytes));\r\nvar charsWritten = Encoding.UTF8.GetChars(messageBytes, buffer);\r\ntextWriter.Write(buffer, 0, charsWritten);\r\nArrayPool\u003cchar\u003e.Shared.Return(buffer);\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eshatl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Logging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-21T09:13:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50qPep",
                                           "createdAt":  "2024-02-21T16:36:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@shatl the suggested code will not compile for netstandard2.0/NET Framework. But it is possible to optimize it for these two targets by using unsafe code. Are you interested to submit a PR for that? ",
                                           "updatedAt":  "2024-02-21T16:37:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50vLve",
                                           "createdAt":  "2024-02-22T02:02:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODXvxeA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2024-02-22T02:11:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "cd21h",
                                           "body":  "Will do",
                                           "updatedAt":  "2024-02-22T02:02:09Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "JsonConsoleFormatter memory optimization opportunity",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100759",
        "createdAt":  "2024-04-08T09:54:03Z",
        "number":  100759,
        "author":  "Abdragiz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-20T17:19:25Z",
        "body":  "### Background and motivation\r\n\r\nCurrently, it seems that using resource strings with the logging source generator is not possible. I suggest adding the ```ResourceName``` and ```ResourceType``` properties to the ```[LoggerMessageAttribute]```, similar to the ```ErrorMessageResourceName``` and ```ErrorMessageResourceType``` properties used in the ```ValidationAttribute```.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\npublic LoggerMessageAttribute (int eventId, Microsoft.Extensions.Logging.LogLevel level, Type resourceType, string resourceName);\r\n```\r\n\r\n\r\n### API Usage\r\n\r\nGiven ```LoggingResource.resx``` resource strings file and ```UnexpectedError``` name, the new API could be used like this:\r\n\r\n```csharp\r\npublic static class LoggingExtensions\r\n{\r\n    [LoggerMessage(LogLevel.Error, 0, typeof(LoggingResource), nameof(LoggingResource.UnexpectedError))]\r\n    public partial void UnexpectedError(this ILogger, Exception exception);\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOebuGCA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc55u4YI",
                                           "createdAt":  "2024-04-08T09:54:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-08T09:54:25Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: Add the ResourceType and ResourceName properties to the [LoggerMessageAttribute]",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101687",
        "createdAt":  "2024-04-29T16:21:05Z",
        "number":  101687,
        "author":  "reyang",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:47:07Z",
        "body":  "### Description\n\nWhen using compile-time logging source generation from `Micrososft.Extensions.Logging.Abstraction` version 8.0 and the message template provided:\r\n\r\n```csharp\r\ninternal static partial class LoggerExtensions\r\n{\r\n    [LoggerMessage(LogLevel.Critical)]\r\n    public static partial void FoodRecallNotice(\r\n        this ILogger logger,\r\n        string brandName,\r\n        string productDescription,\r\n        string productType,\r\n        string recallReasonDescription,\r\n        string companyName);\r\n}\r\n\r\nlogger.FoodRecallNotice(\r\n    brandName: \"Contoso\",\r\n    productDescription: \"Salads\",\r\n    productType: \"Food \u0026 Beverages\",\r\n    recallReasonDescription: \"due to a possible health risk from Listeria monocytogenes\",\r\n    companyName: \"Contoso Fresh Vegetables, Inc.\");\r\n```\r\n\r\n1. The warning message seems to be confusing:\r\n```text\r\nD:\\repo\\opentelemetry-dotnet\\docs\\logs\\getting-started-console\\Program.cs(39,16): warning SYSLIB1015: Argument \u0027brandNa\r\nme\u0027 is not referenced from the logging message (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/sysl\r\nib1015) [D:\\repo\\opentelemetry-dotnet\\docs\\logs\\getting-started-console\\getting-started-console.csproj::TargetFramework\r\n=net8.0]\r\nD:\\repo\\opentelemetry-dotnet\\docs\\logs\\getting-started-console\\Program.cs(40,16): warning SYSLIB1015: Argument \u0027product\r\nDescription\u0027 is not referenced from the logging message (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnos\r\ntics/syslib1015) [D:\\repo\\opentelemetry-dotnet\\docs\\logs\\getting-started-console\\getting-started-console.csproj::Target\r\nFramework=net8.0]\r\nD:\\repo\\opentelemetry-dotnet\\docs\\logs\\getting-started-console\\Program.cs(41,16): warning SYSLIB1015: Argument \u0027product\r\nType\u0027 is not referenced from the logging message (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/sy\r\nslib1015) [D:\\repo\\opentelemetry-dotnet\\docs\\logs\\getting-started-console\\getting-started-console.csproj::TargetFramewo\r\nrk=net8.0]\r\nD:\\repo\\opentelemetry-dotnet\\docs\\logs\\getting-started-console\\Program.cs(42,16): warning SYSLIB1015: Argument \u0027recallR\r\neasonDescription\u0027 is not referenced from the logging message (https://learn.microsoft.com/dotnet/fundamentals/syslib-di\r\nagnostics/syslib1015) [D:\\repo\\opentelemetry-dotnet\\docs\\logs\\getting-started-console\\getting-started-console.csproj::T\r\nargetFramework=net8.0]\r\nD:\\repo\\opentelemetry-dotnet\\docs\\logs\\getting-started-console\\Program.cs(43,16): warning SYSLIB1015: Argument \u0027company\r\nName\u0027 is not referenced from the logging message (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/sy\r\nslib1015) [D:\\repo\\opentelemetry-dotnet\\docs\\logs\\getting-started-console\\getting-started-console.csproj::TargetFramewo\r\nrk=net8.0]\r\n```\r\n\r\n2. The console output doesn\u0027t seem to be helpful:\r\n```text\r\ncrit: Program[1338249384]\r\n```\n\n### Reproduction Steps\n\nCheck https://github.com/open-telemetry/opentelemetry-dotnet/pull/5553#issuecomment-2067316752\n\n### Expected behavior\n\nInstead of giving 5 warnings, it\u0027ll be better to provide 1 INFO level message (e.g. \"The message template is not specified; a default template will be generated\"). In addition, the console logger provider should output all the key-value pairs.\r\n\r\nAlternatively, aligning with `Microsoft.Extensions.Logging.Abstraction`, as described in https://github.com/open-telemetry/opentelemetry-dotnet/pull/5553#issuecomment-2067320523.\n\n### Actual behavior\n\nUser gets 5 warnings, which normally break the build due to \"treat warnings as errors\" setting.\r\nThe console output only shows `crit: Program[1338249384]` without any key-value pairs.\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\nProvide a message template with all the key-value pairs.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh2bJSg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc58KpYa",
                                           "createdAt":  "2024-04-29T16:25:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-29T16:25:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HZmFq",
                                           "createdAt":  "2024-08-06T15:59:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@reyang @tarekgh is this behavior change a must-have for 9.0, or could we move this out?",
                                           "updatedAt":  "2024-08-06T15:59:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HZslK",
                                           "createdAt":  "2024-08-06T16:14:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I moved this to .NET 10.",
                                           "updatedAt":  "2024-08-06T16:14:03Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Strange behavior while using compile-time logging source generation without message template",
        "labels":  [
                       "area-Extensions-Logging",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101698",
        "createdAt":  "2024-04-29T21:42:08Z",
        "number":  101698,
        "author":  "Kritner",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4llog==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-06-12T22:22:11Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-01-24T21:50:40Z",
        "body":  "Posting this issue to this repo as per the suggestion of @tarekgh \r\n\r\nhttps://github.com/dotnet/roslyn-analyzers/issues/7285\r\nhttps://github.com/dotnet/roslyn-analyzers/pull/7286\r\n\r\n\r\ntldr: Invalid braces in a message template aren\u0027t caught by `CA2017`, and when encountered lead to runtime exceptions.\r\n\r\nThe PR and issues (linked and relevant snippets below) go about introducing a new analyzer `CA2023` because the changes introduced in some ways change the existing \"meaning\" of `CA2017`.  Additionally this seems like it should probably be a compiler error rather than warning since otherwise a runtime exception occurs - though tbf i don\u0027t recall if having too few or too many message template `params` lead to the same thing or not\r\n\r\nSuggested category: Reliability (and related to) https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2017\r\nSuggested severity: warning (https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-options#severity-level)\r\n\r\n-----\r\n\r\nIssue:\r\n\r\nmalformed message template strings for at a minimum logged messages should be throwing compiler errors IMO, rather than the current runtime errors seen with .net8.\r\n\r\nRepro:\r\nhttps://github.com/Kritner/MessageTemplateNet8\r\n\r\n```cs\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nHostApplicationBuilder builder = Host.CreateApplicationBuilder(args);\r\nbuilder.Services.AddLogging(loggingBuilder =\u003e loggingBuilder.AddConsole());\r\n\r\nvar host = builder.Build();\r\n\r\nvar logger = host.Services.GetRequiredService\u003cILogger\u003cProgram\u003e\u003e();\r\n\r\nlogger.LogInformation(\"Hello world\");\r\n\r\nvar i = 5;\r\nlogger.LogInformation(\"My value {i}}\", i);\r\n```\r\n\r\n![image](https://github.com/dotnet/runtime/assets/8814983/c717fe5c-eae9-43f3-bc71-329b731fda55)\r\n\r\n-----\r\n\r\n\u003e \u003e I feel like this needs to be a compiler error, lest you run into the same run time errors I\u0027ve encountered.\r\n\u003e \r\n\u003e It seems this scenario is already covered with https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2017 @Kritner could you enable that analyzer in your repo (it is enabled and warns by default, but the rule might disabled for your project) and check the diagnostics?\r\n\r\nYeah so it\u0027s weird... we\u0027re not `NoWarn`ing against this particular \"CA2017\", but we don\u0027t get the string template being flagged as a CA2017... I can easily make the CA2017 appear (and get a compiler error yay) if I change...\r\n\r\n```cs\r\nlogger.LogInformation(\"My value {i}}\", i);\r\n```\r\n\r\nto\r\n\r\n```cs\r\nlogger.LogInformation(\"My value {i}\", i, i+1);\r\n```\r\n\r\n![image](https://github.com/dotnet/runtime/assets/8814983/e905ae3a-81c7-49f1-a872-0904df312371)\r\n\r\n-----\r\n\r\nMore relevant comments:\r\nhttps://github.com/dotnet/roslyn-analyzers/issues/7285#issuecomment-2047947844\r\nhttps://github.com/dotnet/roslyn-analyzers/issues/7285#issuecomment-2048017489\r\nhttps://github.com/dotnet/roslyn-analyzers/pull/7286#discussion_r1561828622",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiFJXYA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc58Mz9x",
                                           "createdAt":  "2024-04-29T21:42:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-29T21:42:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58M6Tk",
                                           "createdAt":  "2024-04-29T22:01:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@Kritner \r\n\r\n\u003e Suggested severity: error (https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-options#severity-level)\r\n\r\nThinking loud, would it be better to have this as a warning instead of error? I recall some external logger allow mismatches. ",
                                           "updatedAt":  "2024-04-29T22:01:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58NAqd",
                                           "createdAt":  "2024-04-29T22:20:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kritner",
                                           "body":  "\u003e Thinking loud, would it be better to have this as a warning instead of error? I recall some external logger allow mismatches.\r\n\r\nI’m sure that’s fine - i don’t know offhand what constitutes one over the other, just seemed like an error since failure to correct leads to runtime exceptions\r\n\r\nbut i guess that can be up to the consuming library, the built in net logging however does experience the exception",
                                           "updatedAt":  "2024-04-29T22:21:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58NGkX",
                                           "createdAt":  "2024-04-29T22:41:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODf_7xA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kritner",
                                                                               "createdAt":  "2024-04-29T23:06:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I changed it to warning and we can discuss that in the review.",
                                           "updatedAt":  "2024-04-29T22:41:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A-wel",
                                           "createdAt":  "2024-06-12T21:30:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kritner",
                                           "body":  "Hey i just wanted to check in to make sure there wasn\u0027t anything needed from me - i\u0027m not totally clear on what \"the review\" mentioned is.  Is this something that\u0027s done on a scheduled basis and internal, or something i\u0027m somehow involved with, something else?",
                                           "updatedAt":  "2024-06-12T21:30:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A-0_3",
                                           "createdAt":  "2024-06-12T21:44:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODld5IA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kritner",
                                                                               "createdAt":  "2024-06-12T22:06:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "No action is required from you at this time. The issue has been marked as ready for design review, but it is not a priority compared to other work currently under review. Therefore, it may take some time before it is scheduled for review. Thanks for checking.",
                                           "updatedAt":  "2024-06-12T21:44:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ITfEf",
                                           "createdAt":  "2024-08-13T17:55:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "[Video](https://www.youtube.com/watch?v=PNvzs8aBGD4\u0026t=0h43m3s)\n\nThis analyzer makes sense. Should probably be a different diagnostic ID but can likely be handled inside the existing analyzer for the argument validation.\r\n\r\nWe should use same category and same severity as for the other one that validates number of arguments.",
                                           "updatedAt":  "2024-08-13T18:31:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IT1xg",
                                           "createdAt":  "2024-08-13T18:47:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@Kritner this is approved now. We can proceed with the implementation. Thanks for willing to help here.",
                                           "updatedAt":  "2024-08-13T18:47:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IUEp2",
                                           "createdAt":  "2024-08-13T19:17:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODt4VFg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2024-08-13T19:22:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Kritner",
                                           "body":  "Sounds good!  I guess i just need to dust off the ol PR and get it updated with latest from main?  ... and install VS and all my tools again cuz i got a new computer since this convo started :D ",
                                           "updatedAt":  "2024-08-13T19:17:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IUldg",
                                           "createdAt":  "2024-08-13T20:38:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kritner",
                                           "body":  "https://github.com/dotnet/roslyn-analyzers/pull/7286 has been updated with a merge from main, marked the PR ready for review",
                                           "updatedAt":  "2024-08-13T20:38:38Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "[Analyzer] Flagging issues in logger message templates w/ incomplete braces pairs",
        "labels":  [
                       "api-approved",
                       "help wanted",
                       "code-analyzer",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102633",
        "createdAt":  "2024-05-23T21:19:20Z",
        "number":  102633,
        "author":  "alrz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJ0BfQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "istipeti",
                                            "createdAt":  "2025-05-01T15:59:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "slang25",
                                            "createdAt":  "2025-08-04T20:57:22Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-08-17T19:49:39Z",
        "body":  "LoggerMessageAttribute was introduced to make it easier to use LoggerMessage.Define, however it still needs a partial declaration for each log line to migrate. \r\n\r\nUsing roslyn interceptors, each callsite can be replaced with a helper that calls into a LoggerMessage delegate, generated specifically for each usage.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh6DWvg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5-10Wc",
                                           "createdAt":  "2024-05-23T21:19:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-23T21:19:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HoNa-",
                                           "createdAt":  "2024-08-08T10:17:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQdjJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "istipeti",
                                                                               "createdAt":  "2025-05-01T15:59:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alrz",
                                           "body":  "I think as part of this, LogPropertiesAttribute could be integrated so that using some syntax like `@`-prefix, the logger logs properties the same way LogPropertiesAttribute does. I think that would require some of the functionality to be pulled to runtime, or perhaps host this generator in dotnet/extensions?",
                                           "updatedAt":  "2024-08-17T19:49:39Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "LoggerMessage interceptor for LoggerExtension methods",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Logging",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106692",
        "createdAt":  "2024-08-20T13:50:22Z",
        "number":  106692,
        "author":  "GerardSmit",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-01T15:49:21Z",
        "body":  "### Background and motivation\r\n\r\nCurrently the console logger will always print exceptions:\r\n\r\nhttps://github.com/dotnet/runtime/blob/9876ed1b72bb82018cdf18f0e8780c721cf806cd/src/libraries/Microsoft.Extensions.Logging.Console/src/SimpleConsoleFormatter.cs#L121-L125\r\n\r\nWhen I publish my .NET app with PublishAot without stack traces, the stack trace doesn\u0027t add any additional information:\r\n\r\n```\r\nwarn: FtpServer.PassiveSocket[0]\r\n      Could not discover NAT device\r\n      SharpOpenNat.NatDeviceNotFoundException: Exception_WasThrown, SharpOpenNat.NatDeviceNotFoundException\r\n         at FtpServer!\u003cBaseAddress\u003e+0xe65b4\r\n      --- End of stack trace from previous location ---\r\n         at FtpServer!\u003cBaseAddress\u003e+0x24d648\r\n         at FtpServer!\u003cBaseAddress\u003e+0x24f7d2\r\n         at FtpServer!\u003cBaseAddress\u003e+0x24f6f3\r\n         at FtpServer!\u003cBaseAddress\u003e+0xaf55e\r\n```\r\n\r\nIn this case I want to hide the stack trace. However, this isn\u0027t possible in the SimpleConsoleLogger. The only thing I can do is copy-paste the source code of SimpleConsole, but then `textWriter.WriteColoredMessage` can\u0027t be resolved because it\u0027s internal.\r\n\r\nThis is why I propose a new option so the stacktrace can be excluded. We currently already have an option called `IncludeScopes`, so to follow the naming convention the new property will be called `IncludeExceptions`.\r\n\r\nBy default, this property is set to `true` for backward compatibility. When the property is set to `false`, the exceptions will be excluded. The console message will be as following:\r\n\r\n```\r\nwarn: FtpServer.PassiveSocket[0]\r\n      Could not discover NAT device\r\n```\r\n\r\n---\r\n\r\nThe proposal is set to the class `ConsoleFormatterOptions`, so next to SimpleConsoleFormatter the class SystemdConsoleFormatter and JsonConsoleFormatter should also implement the new property:\r\n\r\nhttps://github.com/dotnet/runtime/blob/9876ed1b72bb82018cdf18f0e8780c721cf806cd/src/libraries/Microsoft.Extensions.Logging.Console/src/SystemdConsoleFormatter.cs#L97-L101\r\n\r\nhttps://github.com/dotnet/runtime/blob/9876ed1b72bb82018cdf18f0e8780c721cf806cd/src/libraries/Microsoft.Extensions.Logging.Console/src/JsonConsoleFormatter.cs#L76-L79\r\n\r\n### API Proposal\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.Logging.Console;\r\n\r\npublic partial class ConsoleFormatterOptions\r\n{\r\n    public ConsoleFormatterOptions() { }\r\n+   public bool IncludeExceptions { get; set; } = true;\r\n    public bool IncludeScopes { get; set; }\r\n    [System.Diagnostics.CodeAnalysis.StringSyntaxAttribute(\"DateTimeFormat\")]\r\n    public string? TimestampFormat { get; set; }\r\n    public bool UseUtcTimestamp { get; set; }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nvar builder = Host.CreateEmptyApplicationBuilder(new HostApplicationBuilderSettings { Args = args });\r\n\r\nbuilder.Logging.AddSimpleConsole(options =\u003e\r\n{\r\n    // Excludes exceptions from the console\r\n    options.IncludeExceptions = false;\r\n});\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nInstead of `ConsoleFormatterOptions` the property can be added to `SimpleConsoleFormatterOptions`:\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.Logging.Console;\r\n\r\npublic partial class SimpleConsoleFormatterOptions : Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions\r\n{\r\n    public SimpleConsoleFormatterOptions() { }\r\n    public Microsoft.Extensions.Logging.Console.LoggerColorBehavior ColorBehavior { get; set; }\r\n+   public bool IncludeExceptions { get; set; } = true;\r\n    public bool SingleLine { get; set; }\r\n}\r\n```\r\n\r\nThen the implementation should only be added to `SimpleConsoleFormatter`.\r\n\r\n### Risks\r\n\r\nThe only performance regression could be the new check if the option is set to true, but this can be checked after the `exception != null` which would be most of the times `false`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlZk5-g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6JBqqJ",
                                           "createdAt":  "2024-08-20T13:50:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-20T13:50:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VmTn6",
                                           "createdAt":  "2024-12-01T15:49:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "delixfe",
                                           "body":  "@GerardSmit Have a look at [Microsoft.Extensions.Telemetry](https://www.nuget.org/packages/Microsoft.Extensions.Telemetry). [This allows you to disable the stack trace](https://github.com/dotnet/extensions/blob/release/9.0/src/Libraries/Microsoft.Extensions.Telemetry/Logging/LoggerEnrichmentOptions.cs?plain=1).",
                                           "updatedAt":  "2024-12-01T15:49:20Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: ConsoleFormatterOptions.IncludeExceptions",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108239",
        "createdAt":  "2024-09-25T13:58:40Z",
        "number":  108239,
        "author":  "skorczyk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-26T18:24:14Z",
        "body":  "### Describe the bug\r\nNo LogInformation is written.\r\n\r\n### To Reproduce\r\nIn the following code no logInformationMessage in method WorkThroughInvoiceFiles() is written.\r\n\r\n```C#\r\nusing Microsoft.Extensions.Logging;\r\n\r\nnamespace ProofOfPerformanceInvoiceMatch\r\n{\r\n    internal class InvoiceFilesInvestigation(ILogger\u003cInvoiceFilesInvestigation\u003e logger)\r\n    {\r\n        private List\u003cstring\u003e? invoiceFilesNameAndPathList;\r\n\r\n        public InvoiceFilesInvestigation(ILogger\u003cInvoiceFilesInvestigation\u003e logger, List\u003cstring\u003e? invoiceFilesNameAndPathList) : this(logger)\r\n        {\r\n            this.invoiceFilesNameAndPathList = invoiceFilesNameAndPathList;\r\n        }\r\n\r\n        internal void WorkThroughInvoiceFiles()\r\n        {\r\n            string logInformationMessage;\r\n            logInformationMessage = \"Untersuche die Rechnungen\";\r\n            logger.LogInformation(logInformationMessage);\r\n            foreach (string oneInvoiceFilesNameAndPath in invoiceFilesNameAndPathList)\r\n            {\r\n                logInformationMessage = \"PDF-Datei »\" + oneInvoiceFilesNameAndPath + \"«\";\r\n                logger.LogInformation(logInformationMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```\r\n      Untersuche die Rechnungen\r\ninfo: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\n      PDF-Datei »H:\\source\\repos\\ProofOfPerformanceInvoiceMatch\\ProofOfPerformanceInvoiceMatch\\bin\\Debug\\net8.0\\Rechnungen\\RGRG+24-1-00024_AN1000236287_b-next engineering GmbH.PDF«\r\ninfo: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\n      PDF-Datei »H:\\source\\repos\\ProofOfPerformanceInvoiceMatch\\ProofOfPerformanceInvoiceMatch\\bin\\Debug\\net8.0\\Rechnungen\\RGRG+24-1-00025_AN1000236292_b-next engineering GmbH.PDF«\r\ninfo: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\n      PDF-Datei »H:\\source\\repos\\ProofOfPerformanceInvoiceMatch\\ProofOfPerformanceInvoiceMatch\\bin\\Debug\\net8.0\\Rechnungen\\RGRG+24-1-00026_AN1000236293_b-next engineering GmbH.PDF«\r\ninfo: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\n      PDF-Datei »H:\\source\\repos\\ProofOfPerformanceInvoiceMatch\\ProofOfPerformanceInvoiceMatch\\bin\\Debug\\net8.0\\Rechnungen\\RGRG+24-1-00027_AN1000236294_b-next engineering GmbH.PDF«\r\ninfo: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\n      PDF-Datei »H:\\source\\repos\\ProofOfPerformanceInvoiceMatch\\ProofOfPerformanceInvoiceMatch\\bin\\Debug\\net8.0\\Rechnungen\\RGRG+24-1-00028_AN1000236296_b-next engineering GmbH.PDF«\r\n\r\nH:\\source\\repos\\ProofOfPerformanceInvoiceMatch\\ProofOfPerformanceInvoiceMatch\\bin\\Debug\\net8.0\\ProofOfPerformanceInvoiceMatch.exe (Prozess \"5152\") wurde mit Code \"0\" (0x0) beendet.\r\nUm die Konsole beim Beenden des Debuggens automatisch zu schließen, aktivieren Sie \"Extras\" \u003e \"Optionen\" \u003e \"Debuggen\" \u003e \"Konsole beim Beenden des Debuggings automatisch schließen\".\r\nDrücken Sie eine beliebige Taste, um dieses Fenster zu schließen.\r\n\r\n\r\nIt works on Docker.\r\n\r\nproofofperformanceinvoicematch01  |       Untersuche die Rechnungen\r\nproofofperformanceinvoicematch01  | info: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\nproofofperformanceinvoicematch01  |       PDF-Datei »/app/Rechnungen/RGRG+24-1-00030_AN1000236298_b-next engineering GmbH.PDF«\r\nproofofperformanceinvoicematch01  | info: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\nproofofperformanceinvoicematch01  |       PDF-Datei »/app/Rechnungen/RGRG+24-1-00026_AN1000236293_b-next engineering GmbH.PDF«\r\nproofofperformanceinvoicematch01  | info: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\nproofofperformanceinvoicematch01  |       PDF-Datei »/app/Rechnungen/RGRG+24-1-00025_AN1000236292_b-next engineering GmbH.PDF«\r\nproofofperformanceinvoicematch01  | info: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\nproofofperformanceinvoicematch01  |       PDF-Datei »/app/Rechnungen/RGRG+24-1-00027_AN1000236294_b-next engineering GmbH.PDF«\r\nproofofperformanceinvoicematch01  | info: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\nproofofperformanceinvoicematch01  |       PDF-Datei »/app/Rechnungen/RGRG+24-1-00028_AN1000236296_b-next engineering GmbH.PDF«\r\nproofofperformanceinvoicematch01  | info: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\nproofofperformanceinvoicematch01  |       PDF-Datei »/app/Rechnungen/RGRG+24-1-00029_AN1000236297_b-next engineering GmbH.PDF«\r\nproofofperformanceinvoicematch01  | info: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\nproofofperformanceinvoicematch01  |       PDF-Datei »/app/Rechnungen/RGRG+24-1-00024_AN1000236287_b-next engineering GmbH.PDF«\r\nproofofperformanceinvoicematch01  | info: ProofOfPerformanceInvoiceMatch.ProofOfPerformanceFilesInvestigation[0]\r\nproofofperformanceinvoicematch01  |       Untersuche die Leistungsnachweise\r\nproofofperformanceinvoicematch01  | info: ProofOfPerformanceInvoiceMatch.ProofOfPerformanceFilesInvestigation[0]\r\nproofofperformanceinvoicematch01  |       PDF-Datei »/app/Leistungsnachweise/b-next Leistungsnachweis_Projekt BaFin_Vertragserweiterung_2021 0655-001.pdf«\r\nproofofperformanceinvoicematch01 exited with code 0\r\nPS H:\\source\\repos\\ProofOfPerformanceInvoiceMatch\u003e\r\n```\r\n\r\nIf I add System.Threading.Thread.Sleep(1) it works on Windows platform\r\n\r\n```C#\r\n      internal void WorkThroughProofOfPerformanceFiles()\r\n      {\r\n          System.Threading.Thread.Sleep(1);\r\n          string logInformationMessage;\r\n          logInformationMessage = \"Untersuche die Leistungsnachweise\";\r\n          logger.LogInformation(logInformationMessage);\r\n          foreach (string oneProofOfPerformanceFilesNameAndPath in proofOfPerformanceFilesNameAndPathList)\r\n          {\r\n              logInformationMessage = \"PDF-Datei »\" + oneProofOfPerformanceFilesNameAndPath + \"«\";\r\n              logger.LogInformation(logInformationMessage);\r\n          }\r\n      }\r\n```\r\n\r\n```\r\n      Untersuche die Rechnungen\r\ninfo: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\n      PDF-Datei »H:\\source\\repos\\ProofOfPerformanceInvoiceMatch\\ProofOfPerformanceInvoiceMatch\\bin\\Debug\\net8.0\\Rechnungen\\RGRG+24-1-00024_AN1000236287_b-next engineering GmbH.PDF«\r\ninfo: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\n      PDF-Datei »H:\\source\\repos\\ProofOfPerformanceInvoiceMatch\\ProofOfPerformanceInvoiceMatch\\bin\\Debug\\net8.0\\Rechnungen\\RGRG+24-1-00025_AN1000236292_b-next engineering GmbH.PDF«\r\ninfo: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\n      PDF-Datei »H:\\source\\repos\\ProofOfPerformanceInvoiceMatch\\ProofOfPerformanceInvoiceMatch\\bin\\Debug\\net8.0\\Rechnungen\\RGRG+24-1-00026_AN1000236293_b-next engineering GmbH.PDF«\r\ninfo: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\n      PDF-Datei »H:\\source\\repos\\ProofOfPerformanceInvoiceMatch\\ProofOfPerformanceInvoiceMatch\\bin\\Debug\\net8.0\\Rechnungen\\RGRG+24-1-00027_AN1000236294_b-next engineering GmbH.PDF«\r\ninfo: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\n      PDF-Datei »H:\\source\\repos\\ProofOfPerformanceInvoiceMatch\\ProofOfPerformanceInvoiceMatch\\bin\\Debug\\net8.0\\Rechnungen\\RGRG+24-1-00028_AN1000236296_b-next engineering GmbH.PDF«\r\ninfo: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\n      PDF-Datei »H:\\source\\repos\\ProofOfPerformanceInvoiceMatch\\ProofOfPerformanceInvoiceMatch\\bin\\Debug\\net8.0\\Rechnungen\\RGRG+24-1-00029_AN1000236297_b-next engineering GmbH.PDF«\r\ninfo: ProofOfPerformanceInvoiceMatch.InvoiceFilesInvestigation[0]\r\n      PDF-Datei »H:\\source\\repos\\ProofOfPerformanceInvoiceMatch\\ProofOfPerformanceInvoiceMatch\\bin\\Debug\\net8.0\\Rechnungen\\RGRG+24-1-00030_AN1000236298_b-next engineering GmbH.PDF«\r\ninfo: ProofOfPerformanceInvoiceMatch.ProofOfPerformanceFilesInvestigation[0]\r\n      Untersuche die Leistungsnachweise\r\ninfo: ProofOfPerformanceInvoiceMatch.ProofOfPerformanceFilesInvestigation[0]\r\n      PDF-Datei »H:\\source\\repos\\ProofOfPerformanceInvoiceMatch\\ProofOfPerformanceInvoiceMatch\\bin\\Debug\\net8.0\\Leistungsnachweise\\b-next Leistungsnachweis_Projekt BaFin_Vertragserweiterung_2021 0655-001.pdf«\r\n\r\nH:\\source\\repos\\ProofOfPerformanceInvoiceMatch\\ProofOfPerformanceInvoiceMatch\\bin\\Debug\\net8.0\\ProofOfPerformanceInvoiceMatch.exe (Prozess \"6996\") wurde mit Code \"0\" (0x0) beendet.\r\nUm die Konsole beim Beenden des Debuggens automatisch zu schließen, aktivieren Sie \"Extras\" \u003e \"Optionen\" \u003e \"Debuggen\" \u003e \"Konsole beim Beenden des Debuggings automatisch schließen\".\r\nDrücken Sie eine beliebige Taste, um dieses Fenster zu schließen.\r\n```\r\n\r\n### Further technical details\r\nPS C:\\\u003e dotnet --info\r\n.NET SDK:\r\n Version:           8.0.401\r\n Commit:            811edcc344\r\n Workload version:  8.0.400-manifests.251308be\r\n MSBuild version:   17.11.4+37eb419ad\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.20348\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.401\\\r\n\r\n.NET workloads installed:\r\nConfigured to use loose manifests when installing new manifests.\r\n [maui-windows]\r\n   Installation Source: VS 17.11.35312.102\r\n   Manifest Version:    8.0.82/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maui\\8.0.82\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [maccatalyst]\r\n   Installation Source: VS 17.11.35312.102\r\n   Manifest Version:    17.5.8030/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maccatalyst\\17.5.8030\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [ios]\r\n   Installation Source: VS 17.11.35312.102\r\n   Manifest Version:    17.5.8030/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.ios\\17.5.8030\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [android]\r\n   Installation Source: VS 17.11.35312.102\r\n   Manifest Version:    34.0.113/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.android\\34.0.113\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [wasm-tools-net6]\r\n   Installation Source: VS 17.11.35312.102\r\n   Manifest Version:    8.0.8/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.workload.mono.toolchain.net6\\8.0.8\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [wasm-tools-net7]\r\n   Installation Source: VS 17.11.35312.102\r\n   Manifest Version:    8.0.8/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.workload.mono.toolchain.net7\\8.0.8\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [wasm-tools]\r\n   Installation Source: VS 17.11.35312.102\r\n   Manifest Version:    8.0.8/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.workload.mono.toolchain.current\\8.0.8\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n\r\nHost:\r\n  Version:      8.0.8\r\n  Architecture: x64\r\n  Commit:       08338fcaa5\r\n\r\n.NET SDKs installed:\r\n  8.0.400 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\nPS C:\\\u003e\r\n\r\nMicrosoft Visual Studio Professional 2022\r\nVersion 17.11.4\r\nVisualStudio.17.Release/17.11.4+35312.102\r\nMicrosoft .NET Framework\r\nVersion 4.8.09037\r\n\r\nInstallierte Version: Professional\r\n\r\nVisual C++ 2022   00483-10902-10922-AA422\r\nMicrosoft Visual C++ 2022\r\n\r\nASP.NET and Web Tools   17.11.231.19466\r\nASP.NET and Web Tools\r\n\r\nAzure App Service-Tools v3.0.0   17.11.231.19466\r\nAzure App Service-Tools v3.0.0\r\n\r\nAzure Functions and Web Jobs Tools   17.11.231.19466\r\nAzure Functions and Web Jobs Tools\r\n\r\nC#-Tools   4.11.0-3.24460.3+5649376e0e5f5db3743a94a62b073f2cce4be5d9\r\nC#-Komponenten, die in der IDE verwendet werden. Abhängig von Ihrem Projekttyp und den zugehörigen Einstellungen kann eine andere Version des Compilers verwendet werden.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nDotfuscator Community Edition   6.5.3+7f0b0a9d18\r\nPreEmptive Protection - Dotfuscator CE\r\n\r\nExtensibility Message Bus   1.4.39 (main@e8108eb)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMono Debugging for Visual Studio   17.11.3 (ba13144)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNode.js-Tools   1.5.60329.1 Commit Hash:15fce86a17f9f33e5bd7ca7ccb9b216aff149252\r\nFügt Unterstützung für das Entwickeln und Debuggen von Node.js-Apps in Visual Studio hinzu\r\n\r\nNuGet-Paket-Manager   6.11.0\r\nNuGet-Paket-Manager in Visual Studio. Weitere Informationen zu NuGet finden Sie unter https://docs.nuget.org/.\r\n\r\nRazor (ASP.NET Core)   17.11.3.2442001+68650a7d94261bc56a1f4bc522c2ee35314b1abb\r\nStellt Sprachdienste für ASP.NET Core Razor bereit.\r\n\r\nSQL Server Data Tools   17.11.47.0\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript-Tools   17.0.30715.2002\r\nTypeScript-Tools für Microsoft Visual Studio\r\n\r\nVisual Basic-Tools   4.11.0-3.24460.3+5649376e0e5f5db3743a94a62b073f2cce4be5d9\r\nVisual Basic-Komponenten, die in der IDE verwendet werden. Abhängig von Ihrem Projekttyp und den zugehörigen Einstellungen kann eine andere Version des Compilers verwendet werden.\r\n\r\nVisual F# Tools   17.11.0-beta.24421.7+af2f522de602281d4ef5a7b71507c428e814c5c1\r\nMicrosoft Visual F# Tools\r\n\r\nVisualStudio.DeviceLog   1.0\r\nInformationen zum Paket\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nVSPackage-Erweiterung   1.0\r\nDetaillierte Informationen zur VSPackage Visual Studio-Erweiterung\r\n\r\nXamarin   17.11.0.98 (d17-11@86652fe)\r\nVisual Studio-Erweiterung, um Entwicklung für Xamarin.iOS und Xamarin.Android zu ermöglichen.\r\n\r\nXamarin Designer   17.11.3.11 (remotes/origin/d17-11@cdbb0a4fdd)\r\nVisual Studio-Erweiterung zum Aktivieren der Xamarin Designer-Tools in Visual Studio.\r\n\r\nXamarin Templates   17.9.0 (38e87ba)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   13.2.2.0 (d17-5/45b0e14)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n    Mono: d9a6e87\r\n    Java.Interop: xamarin/java.interop/d17-5@149d70fe\r\n    SQLite: xamarin/sqlite/3.40.1@68c69d8\r\n    Xamarin.Android Tools: xamarin/xamarin-android-tools/d17-5@ca1552d\r\n\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   16.4.0.23 (9defd91b3)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOja7hfQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6NgyRQ",
                                           "createdAt":  "2024-09-25T14:01:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baronfel",
                                           "body":  "Since this is a question about the behavior of the Microsoft.Extensions.Logging library, I\u0027m moving this to runtime.",
                                           "updatedAt":  "2024-09-25T14:01:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Nikig",
                                           "createdAt":  "2024-09-25T16:59:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@skorczyk could you please share a compliable project reproduce your issue? We need to know which logger you are using. Thanks!",
                                           "updatedAt":  "2024-09-25T16:59:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NruF9",
                                           "createdAt":  "2024-09-26T13:54:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "skorczyk",
                                           "body":  "[ProofOfPerformanceInvoiceMatch.zip](https://github.com/user-attachments/files/17149776/ProofOfPerformanceInvoiceMatch.zip)\r\n",
                                           "updatedAt":  "2024-09-26T13:54:56Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "No LogInformation is written.",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108264",
        "createdAt":  "2024-09-26T02:46:51Z",
        "number":  108264,
        "author":  "universorum",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:50:41Z",
        "body":  "### Description\r\n\r\nWhen use the `LoggerMessage` attribute with `ILogger` in primary constructors, compiler hint CS9107 if `ILogger` also pass to the base class. `ILogger\u003cT\u003e` does not affected.\r\n\r\n### Reproduction Steps\r\n\r\n```C#\r\npublic class MyServiceTemplate(ILogger logger);\r\n\r\npublic partial class MyService1(ILogger logger) : MyServiceTemplate(logger) // CS9107\r\n{\r\n    [LoggerMessage(LogLevel.Error, \"Log\")]\r\n    private partial void Log();\r\n}\r\n\r\npublic partial class MyService2(ILogger\u003cMyService2\u003e logger) : MyServiceTemplate(logger)\r\n{\r\n    [LoggerMessage(LogLevel.Error, \"Log\")]\r\n    private partial void Log();\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nBoth code will have same result: CS9107 or none.\r\n\r\n### Actual behavior\r\n\r\nILogger =\u003e CS9107\r\nILogger\\\u003cT\\\u003e =\u003e None\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nSDK 9.0.100-rc.1.24452.12\r\nMSBuild 17.12.0-preview-24422-09+d17ec720d\r\nmacOS 15\r\nRider 2024.3 EAP 1\r\n\r\n### Other information\r\n\r\nGenerated code\r\n```C#\r\n// \u003cauto-generated/\u003e\r\n#nullable enable\r\n\r\nnamespace ConsoleLab\r\n{\r\n    partial class MyService2\r\n    {\r\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"9.0.10.43107\")]\r\n        private static readonly global::System.Action\u003cglobal::Microsoft.Extensions.Logging.ILogger, global::System.Exception?\u003e __LogCallback =\r\n            global::Microsoft.Extensions.Logging.LoggerMessage.Define(global::Microsoft.Extensions.Logging.LogLevel.Error, new global::Microsoft.Extensions.Logging.EventId(1579320335, nameof(Log)), \"Log\", new global::Microsoft.Extensions.Logging.LogDefineOptions() { SkipEnabledCheck = true }); \r\n\r\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"9.0.10.43107\")]\r\n        private partial void Log()\r\n        {\r\n            if (logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Error))\r\n            {\r\n                __LogCallback(logger, null);\r\n            }\r\n        }\r\n    }\r\n}\r\nnamespace ConsoleLab\r\n{\r\n    partial class MyService1\r\n    {\r\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"9.0.10.43107\")]\r\n        private static readonly global::System.Action\u003cglobal::Microsoft.Extensions.Logging.ILogger, global::System.Exception?\u003e __LogCallback =\r\n            global::Microsoft.Extensions.Logging.LoggerMessage.Define(global::Microsoft.Extensions.Logging.LogLevel.Error, new global::Microsoft.Extensions.Logging.EventId(1579320335, nameof(Log)), \"Log\", new global::Microsoft.Extensions.Logging.LogDefineOptions() { SkipEnabledCheck = true }); \r\n\r\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"9.0.10.43107\")]\r\n        private partial void Log()\r\n        {\r\n            if (logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Error))\r\n            {\r\n                __LogCallback(logger, null);\r\n            }\r\n        }\r\n    }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjZoD3g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6NmgPe",
                                           "createdAt":  "2024-09-26T02:47:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-26T02:47:21Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Logging source generator: CS9107 ILogger parameter is captured when use ILogger without generic ",
        "labels":  [
                       "area-Extensions-Logging",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108993",
        "createdAt":  "2024-10-17T19:00:24Z",
        "number":  108993,
        "author":  "TheBrambleShark",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC77lFA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-10-17T19:04:48Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-10-21T18:58:31Z",
        "body":  "### Background and motivation\n\nWhen writing a custom logging provider, it\u0027s not uncommon to want to provide a default logging scope backed by [NullExternalScopeProvider](https://github.com/dotnet/runtime/blob/main/src/libraries/Common/src/Extensions/Logging/NullExternalScopeProvider.cs)/[NullScope](https://github.com/dotnet/runtime/blob/main/src/libraries/Common/src/Extensions/Logging/NullScope.cs). This provides a good default for log providers or situations that either don\u0027t require scope support or where a sane default is required and can be replaced later (e.g. by the logger provider implementing `ISupportExternalScope`).\n\n### API Proposal\n\nNullExternalScopeProvider and NullScope should change their visibility from `internal` to `public`.\n\n```diff\n/// \u003csummary\u003e\n/// An empty scope without any logic\n/// \u003c/summary\u003e\n- internal sealed class NullScope : IDisposable\n+ public sealed class NullScope : IDisposable\n}\n```\n```diff\n/// \u003csummary\u003e\n/// Scope provider that does nothing.\n/// \u003c/summary\u003e\n- internal sealed class NullExternalScopeProvider : IExternalScopeProvider\n+ public sealed class NullExternalScopeProvider : IExternalScopeProvider\n```\n\nBecause these types are specifically designed as no-op replacements, no additional changes or considerations are required.\n\n### API Usage\n\nThis example assumes that `NullExternalScopeProvider.Instance` is passed in the logger provider\u0027s CreateScope instance. It features support for later updating the scope provider should the logger provider implement `ISupportExternalScope`\n```csharp\npublic sealed class MyLogger(IExternalScopeProvider? scopeProvider)\n{\n    internal IExternalScopeProvider? ScopeProvider { get; set; } = scopeProvider;\n\n    public IDisposable? BeginScope\u003cTState\u003e(TState state) where TState : notnull\n        =\u003e ScopeProvider?.Push(state) ?? NullScope.Instance;\n\n    // Remaining members excluded for brevity.\n}\n```\n\n### Alternative Designs\n\nCurrently, consumers of M.E.L that intend to write their own logger provider are required to implement their own no-op scope and scope provider types, should they wish for this functionality.\n\n### Risks\n\nNo expected risks. These no-op scope and scope provider types are agnostic to the ultimate destination of the logger.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkK6fcA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6QQxuV",
                                           "createdAt":  "2024-10-17T19:00:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-17T19:00:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QQ5wd",
                                           "createdAt":  "2024-10-17T19:20:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheBrambleShark",
                                           "body":  "Honorable mentions: https://github.com/dotnet/runtime/issues/96128",
                                           "updatedAt":  "2024-10-17T19:20:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Qrp9w",
                                           "createdAt":  "2024-10-21T17:53:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheBrambleShark",
                                           "body":  "I\u0027m willing to take on this change. Will this need a champion or would a simple PR suffice, given that this isn\u0027t really a new feature per se?",
                                           "updatedAt":  "2024-10-21T17:53:22Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Expose NullExternalScopeProvider and NullScope",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109726",
        "createdAt":  "2024-11-12T11:01:48Z",
        "number":  109726,
        "author":  "esbenbjerre",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBF3Cg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2024-11-16T01:24:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xor-el",
                                            "createdAt":  "2025-04-11T01:25:03Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-11-12T16:52:03Z",
        "body":  "### Background and motivation\n\nWhen the JSON console log formatter is used properties are formatted with PascalCase\n```\n{\"EventId\":15,\"LogLevel\":\"Warning\",\"Category\":\"Microsoft.AspNetCore.Hosting.Diagnostics\",\"Message\":\"Overriding HTTP_PORTS...\"},\"Scopes\":[]}\n```\n\nI would like an option to use camelCase instead\n```\n{\"eventId\":15,\"logLevel\":\"Warning\",\"category\":\"Microsoft.AspNetCore.Hosting.Diagnostics\",\"message\":\"Overriding HTTP_PORTS...\"},\"scopes\":[]}\n```\n\n### API Proposal\n\nAdd a `NamingPolicy` property to `JsonWriterOptions`.\n\n### API Usage\n\n```csharp\nusing System.Text.Json;\n\nHostApplicationBuilder builder = Host.CreateApplicationBuilder(args);\n\nbuilder.Logging.AddJsonConsole(options =\u003e\n{\n    options.IncludeScopes = false;\n    options.TimestampFormat = \"HH:mm:ss \";\n    options.JsonWriterOptions = new JsonWriterOptions\n    {\n        Indented = true\n        NamingPolicy = JsonNamingPolicy.CamelCase;\n    };\n});\n\n}\n```\nor\n```\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\"\n    },\n    \"Console\": {\n      \"LogLevel\": {\n        \"Default\": \"Information\",\n        \"Microsoft\": \"Warning\"\n      },\n      \"FormatterName\": \"json\",\n      \"FormatterOptions\": {\n        \"SingleLine\": true,\n        \"IncludeScopes\": true,\n        \"NamingPolicy\": \"CamelCase\"\n      }\n    }\n  }\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkzzjCA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6TPLya",
                                           "createdAt":  "2024-11-12T11:02:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json, @gregsdennis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-12T11:02:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TPOMI",
                                           "createdAt":  "2024-11-12T11:07:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-12T11:07:04Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add camelCase option to the JSON console log formatter",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110570",
        "createdAt":  "2024-12-10T13:05:20Z",
        "number":  110570,
        "author":  "stbychkov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBAEzQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-12-10T13:33:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StephenHidem",
                                            "createdAt":  "2025-02-26T19:17:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Meir017",
                                            "createdAt":  "2025-04-09T05:32:40Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-12-10T17:44:47Z",
        "body":  "### Background and motivation\n\nCurrently, the `LoggerMessage` source generator requires `EventId` to be hardcoded in the attribute at compile time. I agree that this approach is effective for many scenarios but doesn\u0027t support cases where `EventId` needs to be determined dynamically. I created a library that generates `LoggerMessage` methods on the fly based on the `LoggerExtensions.Log*` invocations (example [here](https://github.com/stbychkov/AutoLoggerMessage)) and users can provide `EventId` as a non-constant parameter. However, the current implementation of the source generator ignores this parameter and instead generates it based on the hash value. \n\nThis is not a significant issue in most cases as usually `EventId` is configured globally and not passed in every call, but still, there are a few scenarios where it\u0027s applicable. Another example is presented in [this](https://github.com/dotnet/runtime/discussions/110364#discussioncomment-11450680) discussion on a related topic, where `EventId` can be treated as a contract where you can version your `EventId` parameter based on some conditions.\n\nThe existing implementation of the source generator already supports dynamic log levels, I propose that it should behave in a similar way for `EventId`, as illustrated below:\n\n```mermaid\nflowchart TD\n    Start[LoggerMessage] --\u003e IsEventIdParameter{Is EventId provided as a method parameter?}\n    \n    subgraph \"New logic\"\n        IsEventIdParameter --\u003e |Yes| HasProvidedAttributeValues{Is EventId or EventName provided in the attribute?}:::newChange\n        HasProvidedAttributeValues --\u003e |No| UseEventId[Use provided event id parameter]:::newChange\n\n    end\n    \n    subgraph \"Existing logic\"\n        IsEventIdParameter --\u003e |No| IsEventIdProvided\n        HasProvidedAttributeValues --\u003e |Yes| IsEventIdProvided{Is EventId provided in the attribute?}\n    \n        IsEventIdProvided --\u003e |Yes| UseProvidedEventId[Use provided event id parameter]\n    \n        UseProvidedEventId --\u003e IsEventNameProvided{Is EventName provided in the attribute?}\n        IsEventIdProvided --\u003e |No| CalcHashFromEventName[Set event id as hash of event/method name]\n\n        CalcHashFromEventName --\u003e \n        IsEventNameProvided --\u003e |Yes| UseProvidedEventName[Use provided event name parameter]\n        IsEventNameProvided --\u003e |No| UseMethodName[Set event name as method name]\n    end\n```\n\nThe change itself is quite small and simple, so I already did it [here](https://github.com/stbychkov/runtime/commit/a0e9cfcfabc2a1b72a3d80efe539dad4ebbd6dbf) (excluding docs) for your reference, but according to the contributing rules, the issue must be approved before PR, so I believe it\u0027s better to link it here\n\n### API Proposal\n\n```csharp\nnamespace Microsoft.Extensions.Logging;\n\npublic partial static class Logger\n{\n    [LoggerMessage(Level = LogLevel.Information, Message = \"Event has been processed in {Time} ms\")]\n    public void LogEvent(EventId eventId, double time);\n}\n```\n\nIt has to generate the following code:\n```csharp\nprivate readonly struct __LogEventStruct : IReadOnlyList\u003cKeyValuePair\u003cstring, object?\u003e\u003e\n{\n    private readonly global::System.Double _time;\n\n    public override string ToString()\n    {\n        var Time = this._time;\n        return $\"Event has been processed in {Time} ms\";\n    }\n\n    public static readonly global::System.Func\u003c__LogEventStruct, global::System.Exception?, string\u003e Format = (state, ex) =\u003e state.ToString();\n\n    ...\n}\n\n\npublic static partial void LogEvent(ILogger logger, EventId eventId /* \u003c-- this parameter */, System.Double time)\n{\n    if (logger.IsEnabled(Microsoft.Extensions.Logging.LogLevel.Information))\n    {\n        logger.Log(\n            Microsoft.Extensions.Logging.LogLevel.Information,\n            eventId, // \u003c-- has to be passed here\n            new __LogEventStruct(time),\n            null,\n            __LogEventStruct.Format);\n    }\n}\n```\n\n\n### API Usage\n\n```csharp\n\nILogger logger;\n\nLogger.LogEvent(logger, new EventId(42, \"SomeEvent\"), 43);\n\npublic partial static class Logger\n{\n    [LoggerMessage(Level = LogLevel.Information, Message = \"Event has been processed in {Time} ms\")]\n    public void LogEvent(EventId eventId, double time);\n}\n\n```\n\n\n### Alternative Designs\n\nGiven that `LoggerMessage.Define` is public API and it doesn\u0027t support dynamic `LogLevel` and `EventId` and the existing implementation already uses a generated structure to handle dynamic `LogLevel`, I believe the most consistent and effective approach is to extend this design to support dynamic `EventId` the same way. This would ensure coherence across the API and maintainability in the source generator\u0027s implementation\n\n### Risks\n\nI think the risk associated with this change is quite low. Currently, if `EventId` is provided as a non-template parameter, it is completely ignored and overwritten with a hash value, which is unexpected behavior from my point of view. The proposed change ensures that when a value is provided, it is correctly utilized.\n\nThis change is opt-in, so existing generated code will remain fully functional. Users who don\u0027t include an eventId parameter in their logging methods will continue to benefit from the current behavior with hardcoded/generated `EventId`s",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOluX-0A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6W5O9r",
                                           "createdAt":  "2024-12-10T13:05:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-10T13:05:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W5f7Q",
                                           "createdAt":  "2024-12-10T13:35:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVy7Vw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StephenHidem",
                                                                               "createdAt":  "2025-02-26T19:17:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ReubenBond",
                                                                               "createdAt":  "2025-04-09T16:16:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Meir017",
                                                                               "createdAt":  "2025-06-07T19:32:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e Currently, if `EventId` is provided as a non-template parameter, it is completely ignored and overwritten with a hash value, which is unexpected behavior from my point of view.\n\nCompletely agree on this especially considering how `LogLevel` is treated today. Not honoring a passed-in `EventId` value is a principle of least astonishment violation.",
                                           "updatedAt":  "2024-12-10T13:35:03Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: Support for Dynamic Event IDs in LoggerMessage Source Generator",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110737",
        "createdAt":  "2024-12-16T13:11:36Z",
        "number":  110737,
        "author":  "rmannibucau",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-16T20:07:12Z",
        "body":  "Logger frameworks log the source of the log message.\nIn can be (file+method) or (class+method) - optionally with line number - but this is key to have some usefulness of the logs until you do it manually everywhere.\n\nThere are some options to do it and I think injecting this data in a scope is not that bad. Using caller attributes appended to `LoggerExtensions` can make sense but will break the `params` parameter.\nUsing an extension/stackframe to get the caller is too expensive (perf).\n\nIdeally the scope option would be neat if scope is included in the formatters of the logger providers (purely for perf).\n\nSide note: making it compatible with the logger source generator would be good as well - can use the caller attribute option.\n\nWhat stays key is to 1. have it and 2. have it structured (when logging in JSON for example) and not in the log message.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOl7rBAQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6XusEB",
                                           "createdAt":  "2024-12-16T13:12:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-16T13:12:05Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "logging API should expose file or class name + method name at least",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110793",
        "createdAt":  "2024-12-17T19:46:34Z",
        "number":  110793,
        "author":  "rmannibucau",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-17T20:43:21Z",
        "body":  "### Background and motivation\n\nAdd a toggle (maybe an enum instead of current toggle which would be deprecated) to enable to use single line formatting except for the exception stacktrace which is always more readable not inline.\nIt is the best of both worlds: you can read exceptions and you can read messages.\n\n### API Proposal\n\n`simpleFormatterOptions.FormatException = true;` - note i don\u0027t care much of the name and if it should true/false by default\n\n### API Usage\n\nsame as previous block\n\n### Alternative Designs\n\nuse another formatter but it wouldn\u0027t make the deliverable consistent\n\n### Risks\n\nnone with a new toggle",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOl_dQLQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6X9sdY",
                                           "createdAt":  "2024-12-17T20:19:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@rmannibucau can you elaborate why the current format is not good for you?",
                                           "updatedAt":  "2024-12-17T20:19:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6X9vtq",
                                           "createdAt":  "2024-12-17T20:25:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmannibucau",
                                           "body":  "@julealgon when you enable single line mode the exceptions - going through the logger - are inlined as well it seems, here is what i\u0027m using\n\n```\n        builder.Logging.AddSimpleConsole(options =\u003e\n        {\n            options.IncludeScopes = false;\n            options.SingleLine = true; // \u003c-- this\n            options.TimestampFormat = \"yyyy-MM-ddTHH:mm:ssZ \";\n        });\n```",
                                           "updatedAt":  "2024-12-17T20:25:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6X91At",
                                           "createdAt":  "2024-12-17T20:34:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-17T20:34:52Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: simple console logger should support singleline except for exception use case",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110890",
        "createdAt":  "2024-12-22T14:43:05Z",
        "number":  110890,
        "author":  "KalleOlaviNiemitalo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-24T00:56:00Z",
        "body":  "### Description\n\nIn Microsoft.Extensions.Logging, if LoggerFilterRule.CategoryName includes the wildcard `*`, then it matches categories that have the correct prefix and the correct suffix.  However, it should not match categories in which the prefix overlaps the suffix.  For example, LoggerFilterRule.CategoryName = \"Environment*Mentalist\" matches \"Environmentalist\" but it should not.\n\n### Reproduction Steps\n\nLogCategoryWildcardDemo.csproj:\n\n```XML\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\n\n  \u003cPropertyGroup\u003e\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\n  \u003c/PropertyGroup\u003e\n\n  \u003cItemGroup\u003e\n    \u003cPackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"8.0.1\" /\u003e\n    \u003cPackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"8.0.1\" /\u003e\n  \u003c/ItemGroup\u003e\n\n\u003c/Project\u003e\n```\n\nProgram.cs:\n\n```csharp\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\n\nnamespace LogCategoryWildcardDemo\n{\n    internal static class Program\n    {\n        private static void Main()\n        {\n            var serviceCollection = new ServiceCollection();\n            serviceCollection.AddLogging(\n                (ILoggingBuilder logging) =\u003e\n                {\n                    logging.SetMinimumLevel(LogLevel.Critical);\n                    logging.AddFilter(category: \"Environment*Mentalist\", LogLevel.Information);\n                    logging.AddSimpleConsole();\n                });\n\n            using (ServiceProvider serviceProvider = serviceCollection.BuildServiceProvider())\n            {\n                ILoggerFactory loggerFactory = serviceProvider.GetRequiredService\u003cILoggerFactory\u003e();\n\n                LogAtEachLevel(\"Environmentalist\");\n                LogAtEachLevel(\"Environment.Mentalist\");\n                LogAtEachLevel(\"Spectacle\");\n\n                void LogAtEachLevel(string categoryName)\n                {\n                    ILogger logger = loggerFactory.CreateLogger(categoryName);\n                    for (LogLevel level = 0; level \u003c LogLevel.None; level++)\n                    {\n                        logger.Log(level, $\"{level} message from {categoryName}\");\n                    }\n                }\n\n                // Close the service provider so that all logs are flushed.\n            }\n        }\n    }\n}\n```\n\n`dotnet run`\n\n\n### Expected behavior\n\nThe \"Environment*Mentalist\" filter rule should not apply to the \"Environmentalist\" category, whose log level should then be LogLevel.Critical, as configured using SetMinimumLevel.\n\n```\ncrit: Environmentalist[0]\n      Critical message from Environmentalist\ninfo: Environment.Mentalist[0]\n      Information message from Environment.Mentalist\nwarn: Environment.Mentalist[0]\n      Warning message from Environment.Mentalist\nfail: Environment.Mentalist[0]\n      Error message from Environment.Mentalist\ncrit: Environment.Mentalist[0]\n      Critical message from Environment.Mentalist\ncrit: Spectacle[0]\n      Critical message from Spectacle\n```\n\n\n### Actual behavior\n\nThe \"Environment*Mentalist\" filter rule incorrectly applies to the \"Environmentalist\" category and changes its log level to LogLevel.Information.\n\n```\ninfo: Environmentalist[0]\n      Information message from Environmentalist\nwarn: Environmentalist[0]\n      Warning message from Environmentalist\nfail: Environmentalist[0]\n      Error message from Environmentalist\ncrit: Environmentalist[0]\n      Critical message from Environmentalist\ninfo: Environment.Mentalist[0]\n      Information message from Environment.Mentalist\nwarn: Environment.Mentalist[0]\n      Warning message from Environment.Mentalist\nfail: Environment.Mentalist[0]\n      Error message from Environment.Mentalist\ncrit: Environment.Mentalist[0]\n      Critical message from Environment.Mentalist\ncrit: Spectacle[0]\n      Critical message from Spectacle\n```\n\n\n### Regression?\n\nNot a regression; it worked like this ever since support for wildcards was added in \u003chttps://github.com/aspnet/logging/pull/924\u003e, between .NET Core 2.2 and 3.0.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET SDK 9.0.101 on Windows 10 x64. \n.NET Runtime 8.0.11.\nNuGet package versions are shown in Reproduction Steps.\n\n### Other information\n\nThe bug is around here: \u003chttps://github.com/dotnet/runtime/blob/9cb3b725e3ad2b57ddc9fb2dd48d2d170563a8f5/src/libraries/Microsoft.Extensions.Logging/src/LoggerRuleSelector.cs#L73-L77\u003e\n\nCould add a separate `category.Length \u003c prefix.Length + suffix.Length` check, or perhaps use `category.AsSpan(prefix.Length).EndsWith(suffix, StringComparison.OrdinalIgnoreCase)`.\n\nAlso noted in \u003chttps://github.com/dotnet/extensions/pull/5635#discussion_r1894532005\u003e, as the pull request was introducing the same bug to that repository.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmJ354Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Yf0vu",
                                           "createdAt":  "2024-12-22T14:43:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-22T14:43:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ynfnh",
                                           "createdAt":  "2024-12-24T00:55:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEA0jsQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "evgenyfedorov2",
                                                                               "createdAt":  "2025-01-02T15:05:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "IIRC, this was discussed long ago and kept the behavior for app compatibility reason. Even I recall the same done in the metric configuration too. \n\nhttps://github.com/dotnet/runtime/pull/90559#pullrequestreview-1579412401\nCC @noahfalk @Tratcher ",
                                           "updatedAt":  "2024-12-24T00:55:59Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "LoggerFilterRule.CategoryName matches overlapping prefix and suffix",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111187",
        "createdAt":  "2025-01-08T06:26:57Z",
        "number":  111187,
        "author":  "tmds",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-08T17:38:33Z",
        "body":  "For example:\n\n```cs\nusing Microsoft.Extensions.Logging;\n\nforeach (bool useJsonLogger in new[] { false, true })\n{\n    using ILoggerFactory loggerFactory = LoggerFactory.Create(\n        builder =\u003e\n        {\n            if (useJsonLogger)\n            {\n                builder.AddJsonConsole();\n            }\n            else\n            {\n                builder.AddConsole();\n            }\n        });\n\n    var logger = loggerFactory.CreateLogger(\"Logger\");\n\n    logger.LogValues(Enumerable.Range(1, 5));\n}\n\nstatic partial class Logger\n{\n    [LoggerMessage(\n        EventId = 1,\n        Level = LogLevel.Information,\n        Message = \"Values are {Values}\")]\n    public static partial void LogValues(this ILogger logger, IEnumerable\u003cint\u003e values);\n}\n```\n\nOutputs:\n\n```\ninfo: Logger[1]\n      Values are 1, 2, 3, 4, 5\n{\"EventId\":1,\"LogLevel\":\"Information\",\"Category\":\"Logger\",\"Message\":\"Values are 1, 2, 3, 4, 5\",\"State\":{\"Message\":\"Values are 1, 2, 3, 4, 5\",\"Values\":\"System.Linq.Enumerable\\u002BRangeIterator\",\"{OriginalFormat}\":\"Values are {Values}\"}}\n```\n\nThe message contains the items of the enumerable (`1, 2, 3, 4, 5`) while the JSON `State` contains `ToString` of the enumerable: (`\"Values\":\"System.Linq.Enumerable\\u002BRangeIterator\"`).\n\nThe behavior I expect is for the JSON `State` to include the enumerable items in a JSON array (`\"Values\": [1, 2, 3, 4, 5]`).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmZeT2g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Zl5Pa",
                                           "createdAt":  "2025-01-08T06:27:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-08T06:27:32Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "JSON Console Logger does not serialize enumerable items in State",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112528",
        "createdAt":  "2025-02-13T09:31:25Z",
        "number":  112528,
        "author":  "kobruleht",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-13T16:55:56Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nASP.NET Core 9 MVC application runs as a service in Debian and logs into a journal.\n\n`Program.cs`:\n\n    using Microsoft.Extensions.Hosting.Systemd;\n    \n    var builder = WebApplication.CreateBuilder(args);\n    \n    // Add services to the container.\n    builder.Services.AddControllersWithViews();\n    \n    builder.Host.UseSystemd();\n    \n    var app = builder.Build();\n    ...\n\nLogging from controller:\n\n    public class ContextLessLogger(ILogger\u003cContextLessLogger\u003e syslog)\n    {\n        public void Log() \n        {\n            StringBuilder viga = new();\n            viga.AppendLine(\"Line 1\");\n            viga.AppendLine(\"Line 2\");\n            syslog.Log(LogLevel.Warning, viga.ToString());\n        }\n    }\n\n`journalctl` shows Line 1 and Line 2 in single line:\n\n    veebr 12 22:33:52 myhost MyService[268922]: Eeva.Service.ContextLessLogger[0] Line 1  Line 2\n\nDescription in \n\nhttps://learn.microsoft.com/en-us/dotnet/core/extensions/console-log-formatter\n\nspecifies that it always logs messages in a single line:\n\n\u003e Systemd The ConsoleFormatterNames.Systemd console logger:\n\u003e \n\u003e Uses the \"Syslog\" log level format and severities does not format\n\u003e messages with colors Always logs messages in a single line\n\n### Describe the solution you\u0027d like\n\nEach li ne shoud appear as separate line in journal like other daemos do.\nFor example postgres creates multi line logs:\n\n    veebr 12 16:21:56 postgres[259580]: 2025-02-12 16:21:56 EET 1.2.3.3 stanislavs@sba ERROR:  permission denied \u003e\n                                        2025-02-12 16:21:56 EET 1.2.10.3 stanislavs@sba CONTEXT:  unnamed portal w\u003e\n                                        2025-02-12 16:21:56 EET 15.24.13.3 stanislavs@sba STATEMENT:  update kasutaj\u003e\n                                                where firmad=\u002715\u0027 and kasutaja\u003c\u003e\u0027LEAI\u0027 and $2  is distinct from \u0027Ja\u0027 \u003e\n\njournalctl output should be in two lines like in postgresql log:\n\n    veebr 12 22:33:52 myhost MyService[268922]: Eeva.Service.ContextLessLogger[0] Line 1  \n                                                                                  Line 2\n\nDiscussed in \nhttps://stackoverflow.com/questions/79434420/how-to-write-multi-line-entry-to-linux-log\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnmEwFQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6eYJij",
                                           "createdAt":  "2025-02-13T09:34:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "martincostello",
                                           "body":  "Looks like this issue should be transferred to [dotnet/runtime](https://github.com/dotnet/runtime) as it doesn\u0027t appear to be specific to ASP.NET Core as [Console logging code is in that repository](https://github.com/dotnet/runtime/tree/main/src/libraries/Microsoft.Extensions.Logging.Console).\n",
                                           "updatedAt":  "2025-02-13T09:34:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eYTAV",
                                           "createdAt":  "2025-02-13T16:40:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-13T16:40:47Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "UseSystemd should allow to create multi-line logs in journal",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116487",
        "createdAt":  "2025-06-10T16:30:29Z",
        "number":  116487,
        "author":  "AlgorithmsAreCool",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-11T14:51:00Z",
        "body":  "### Background and motivation\n\nToday we have `LoggerMessage[Attribute]` which gives us a convenient way to structure logging and get great performance. However there is a friction point with regards to expensive message formatting.\n\nWhen using traditional `ILogger`, a typical pattern is to guard some logging messages behind `ILogger.IsEnabled` to avoid expensive formatting that would be wasted if that log level wasn\u0027t enabled. We can\u0027t do that easily now.\n\nNow we could just guard calls to Foo behind `ILogger.IsEnabled` but then the question becomes, what log level are we guarding? With a traditional guard+ a logger method, there are now two places to specify the log level for each log, which allows them to fall out of sync if the logging level is changed. I argue that it would be better to have a single source of truth for the level of each log, enforced by the generated code.\n\nNow it should be noted that internally, the generated code from LoggerMessage, does in fact perform this guard, but that doesn\u0027t help if the arguments that we are passing into the logging method are expensive to generate.\n\n### API Proposal\n\nMy proposal is that for each partial method `Foo` emitted by the `LoggerMessageAttribute` source generator, we should also emit a bool property called `FooIsEnabled` that allows us to guard calls to Foo. \n\n- The accessibility of the property should match the accessibility of the logging method.\n- If there is an existing member with a conflicting name, the generation should not emit the new member\n\n### API Usage\n```csharp\npublic class MyClass(ILogger\u003cMyClass\u003e logger)\n{\n    public void CurrentFlow()\n    {\n        var errorMessage = FormatErrorMessage(\"An error occurred\", \"Additional details\");\n        LogFoo(errorMessage);\n    }\n\n    public void BetterButAwkwardFlow()\n    {\n        //the log level must be specified both here and in the method attribute\n        if (logger.IsEnabled(LogLevel.Debug))\n        {\n            var errorMessage = FormatErrorMessage(\"An error occurred\", \"Additional details\");\n            LogFoo(errorMessage);\n        }\n    }\n\n    public void ProposedFlow()\n    {\n        if (LogFooIsEnabled)//the log level is specified only in the method attribute\n        {\n            var errorMessage = FormatErrorMessage(\"An error occurred\", \"Additional details\");\n            LogFoo(errorMessage);\n        }\n    }\n\n\n    [LoggerMessage(EventId = 1, Level = LogLevel.Debug, Message = \"This is a log message with a parameter: {expensiveParameter}\")]\n    private partial void LogFoo(string expensiveParameter);\n}\n\n\npublic class MyClass(ILogger\u003cMyClass\u003e logger)\n{\n    //This is a common pattern for me, encapsulating the log messages in a struct\n    //so that they are separated from the class logic and are easier to recognize.\n    private readonly LogMessages _log = new(logger);\n\n    public void CurrentFlow()\n    {\n        var errorMessage = FormatErrorMessage(\"An error occurred\", \"Additional details\");\n        _log.LogFoo(errorMessage);\n    }\n\n    public void BetterButAwkwardFlow()\n    {\n        //When wrapping the log messages in a struct, we can\u0027t access the logger directly,\n        //so this pattern can\u0027t be used easily without also exposing the logger\n        if (logger.IsEnabled(LogLevel.Debug))\n        {\n            var errorMessage = FormatErrorMessage(\"An error occurred\", \"Additional details\");\n            _log.LogFoo(errorMessage);\n        }\n    }\n\n    public void ProposedFlow()\n    {\n        if (_log.LogFooIsEnabled)//the log level is specified only in the method attribute\n        {\n            var errorMessage = FormatErrorMessage(\"An error occurred\", \"Additional details\");\n            _log.LogFoo(errorMessage);\n        }\n    }\n\n    private readonly struct LogMessages(ILogger\u003cMyClass\u003e logger)\n    {\n        [LoggerMessage(EventId = 1, Level = LogLevel.Debug, Message = \"This is a log message with a parameter: {expensiveParameter}\")]\n        public partial void LogFoo(string expensiveParameter);\n    }  \n}\n```\n\n### Alternative Designs\n\nStick with the current situation\n\n### Risks\n\n- More generator complexity\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsJ4D2w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6wbPwa",
                                           "createdAt":  "2025-06-10T16:31:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-10T16:31:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wbvEa",
                                           "createdAt":  "2025-06-10T17:22:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e We can\u0027t do that easily now.\n\nI\u0027m curious—why is that the case? Couldn\u0027t you simply call something like `logger.IsEnabled(LogLevel.Information)`? Since the log level used in the LoggerMessage is already known, it should be straightforward to check.",
                                           "updatedAt":  "2025-06-10T17:22:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wbvc7",
                                           "createdAt":  "2025-06-10T17:23:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-10T17:23:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wbvgt",
                                           "createdAt":  "2025-06-10T17:23:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @geeknoid ",
                                           "updatedAt":  "2025-06-10T17:23:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wb5_t",
                                           "createdAt":  "2025-06-10T17:38:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEWFxBA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlgorithmsAreCool",
                                                                               "createdAt":  "2025-06-10T18:47:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "geeknoid",
                                           "body":  "I considered adding this functionality when first creating the logging generator, but I never got around to it.\n\n@tarekgh the reason doing it explicitly with logger.IsEnabled is annoying is because it forces you to copy the log level. It will appear in the [LoggerMessage] attribute, and it will also appear in the calling code that invokes logger.IsEnabled(\u003clog level\u003e). This means the two places can get out of sync. Having a single generated property guarantees cohesiveness.\n\n\n",
                                           "updatedAt":  "2025-06-10T17:38:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wckMk",
                                           "createdAt":  "2025-06-10T18:47:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlgorithmsAreCool",
                                           "body":  "geeknoid exactly captures my friction point with the existing solution",
                                           "updatedAt":  "2025-06-10T18:47:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wckue",
                                           "createdAt":  "2025-06-10T18:48:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "It would be cleaner if we could introduce an overload to `LoggerMessage` that accepts a `Func\u003cstring\u003e` parameter instead of a plain string—for example:\n\n```C#\n    [LoggerMessage(EventId = 1, Level = LogLevel.Debug, Message = \"This is a log message with a parameter: {expensiveParameter}\")]\n    private partial void LogFoo(Func\u003cstring\u003e expensiveParameter);\n```\n\nThe generated code already calls `IsEnabled` before proceeding with logging, and it will only invoke the Func if logging is enabled. We can consider passing extra parameters to the Func if we need to for the sake of optimization and avoid closures. This will make the calling code much cleaner and not to have to worry about calling IsEnabled properties manually.\n\nWould that work?\n\n",
                                           "updatedAt":  "2025-06-10T18:50:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wcmUM",
                                           "createdAt":  "2025-06-10T18:51:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlgorithmsAreCool",
                                           "body":  "Yes that would work great! The key goal here is to allow expensive logging to be pay-for-play. ",
                                           "updatedAt":  "2025-06-10T18:51:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wdGvx",
                                           "createdAt":  "2025-06-10T19:50:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "Why are you formatting your log message instead of just using structured logging?",
                                           "updatedAt":  "2025-06-10T19:50:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wdYCT",
                                           "createdAt":  "2025-06-10T20:22:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEWGfhg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-06-10T20:38:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AlgorithmsAreCool",
                                           "body":  "Structured logging is great and i use it a ton. But sometimes I either want greater control over formatting, which might take using a StringBuilder or something, or other times I need to perform some expensive operation to get the data to log. \n\nFor example, I have some code that will print out the body of a response at the Trace logging level. Reading the value of the response as a string is expensive, so i only want to do that if i know the log level is actually enabled. If it isn\u0027t i can shave time off of the hot path.",
                                           "updatedAt":  "2025-06-10T20:22:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wjBHZ",
                                           "createdAt":  "2025-06-11T09:44:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "What if you do\n\n```csharp\n    private const LogLevel LogLevelFoo = LogLevel.Debug;\n\n    [LoggerMessage(EventId = 1, Level = LogLevelFoo, Message = \"This is a log message with a parameter: {expensiveParameter}\")]\n    private partial void LogFoo(string expensiveParameter);\n```\n\nand then `logger.IsEnabled(LogLevelFoo)`?\n\nThat is a bit more typing than a generated LogFooIsEnabled property, if the logging methods are getting the ILogger from a field; but the amount of IL code and metadata might be smaller.",
                                           "updatedAt":  "2025-06-11T09:44:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wngPb",
                                           "createdAt":  "2025-06-11T14:51:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlgorithmsAreCool",
                                           "body":  "This works but i still need to get access to the `ILogger` instance to call `IsEnabled`, which makes the \"log class\" style a little messier since i now have to expose the `ILogger`. See my second example code with the `LogMessages` struct.\n\nI guess it comes down to where do people want the complexity, to me it makes more sense to push that complexity into the source generator rather than asking the developer to write more code, since automating code is what source generators do best. But I imagine others would feel differently.",
                                           "updatedAt":  "2025-06-11T14:51:00Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "[API Proposal]: Add *IsEnabled properties to LoggerMessageAttribute",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117209",
        "createdAt":  "2025-07-01T17:24:28Z",
        "number":  117209,
        "author":  "ArturDorochowicz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-01T18:19:28Z",
        "body":  "### Description\n\nThere is an issue in the new LoggerMessage method generator from Microsoft.Extensions.Telemetry.Abstractions. It internally uses a static lambda with a parameter that is always named \"s\". This causes a compilation error if the user wants to use a parameter with the same name on their LoggerMessage method.\n\n\n### Reproduction Steps\n\n```\ndotnet new classlib\ndotnet add package Microsoft.Extensions.Telemetry.Abstractions\n```\n\nChange `Class1.cs` to read:\n```csharp\nusing Microsoft.Extensions.Logging;\n\npartial class Class1\n{\n    [LoggerMessage( Level = LogLevel.Information, Message = \"Hello, {S}!\")]\n    static partial void Hello(ILogger l, string s);\n}\n```\n\nBuilding with `dotnet build` results in a compilation error:\n```\nRestore complete (0.7s)\n  dotnet-6 failed with 2 error(s) (0.3s)\n    [...]/Microsoft.Gen.Logging/Microsoft.Gen.Logging.LoggingGenerator/Logging.g.cs(31,21): error CS0136: A local or parameter named \u0027s\u0027 cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\n    [...]/Microsoft.Gen.Logging/Microsoft.Gen.Logging.LoggingGenerator/Logging.g.cs(31,25): error CS0841: Cannot use local variable \u0027s\u0027 before it is declared\n```\n\nGenerated code:\n```csharp\n// \u003cauto-generated/\u003e\n#nullable enable\n#pragma warning disable CS1591 // Compensate for https://github.com/dotnet/roslyn/issues/54103\npartial class Class1\n{\n    /// \u003csummary\u003e\n    /// Logs \"Hello, {S}!\" at \"Information\" level.\n    /// \u003c/summary\u003e\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Gen.Logging\", \"9.6.0.0\")]\n    static partial void Hello(global::Microsoft.Extensions.Logging.ILogger l, string s)\n    {\n        if (!l.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Information))\n        {\n            return;\n        }\n\n        var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;\n\n        _ = state.ReserveTagSpace(2);\n        state.TagArray[1] = new(\"{OriginalFormat}\", \"Hello, {S}!\");\n        state.TagArray[0] = new(\"S\", s);\n\n        l.Log(\n            global::Microsoft.Extensions.Logging.LogLevel.Information,\n            new(1490813634, nameof(Hello)),\n            state,\n            null,\n            [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Gen.Logging\", \"9.6.0.0\")] static string (s, _) =\u003e\n            {\n                var s = s.TagArray[0].Value ?? \"(null)\";\n                #if NET\n                return string.Create(global::System.Globalization.CultureInfo.InvariantCulture, $\"Hello, {s}!\");\n                #else\n                return global::System.FormattableString.Invariant($\"Hello, {s}!\");\n                #endif\n            });\n\n        state.Clear();\n    }\n}\n```\n\n### Expected behavior\n\nIt\u0027s not a big issue, but it\u0027d be nice to be free to use any parameter name. \n\nNote that there\u0027s no problem using parameter named \"state\" as the generator renames the variable name in the generated code from \"state\" to \"state_\". It seems that the same renaming algorithm is not applied to the lambda parameter \"s\" (by mistake?).  \n\n### Actual behavior\n\nCompilation error as listed above.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtE7g7w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc60TKOJ",
                                           "createdAt":  "2025-07-01T17:25:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-01T17:25:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60Tqsl",
                                           "createdAt":  "2025-07-01T18:13:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArturDorochowicz",
                                           "body":  "Hi @tarekgh, I have one more issue in the new generator, but I created it directly in the extensions repo. It\u0027s not getting much attention there. Not sure if it could/should be moved here. Thanks.\nhttps://github.com/dotnet/extensions/issues/6498 \n",
                                           "updatedAt":  "2025-07-01T18:13:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60TuDv",
                                           "createdAt":  "2025-07-01T18:19:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEYvWWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ArturDorochowicz",
                                                                               "createdAt":  "2025-07-01T18:20:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Hi @ArturDorochowicz,\n\nYou have opened it in the right place and should stay there as the fix should come from the extensions repo. I pinged there the owner who may point at who can help. Also, if you are interested, you may submit a PR to fix it. ",
                                           "updatedAt":  "2025-07-01T18:19:28Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Compilation error with new LoggerMessage generator for parameter named \"s\"",
        "labels":  [
                       "area-Extensions-Logging",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118164",
        "createdAt":  "2025-07-29T13:14:09Z",
        "number":  118164,
        "author":  "fabsenet",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODKwhJQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2025-07-30T13:37:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AoshiW",
                                            "createdAt":  "2025-08-01T20:06:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cklutz",
                                            "createdAt":  "2025-08-04T08:18:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gfoidl",
                                            "createdAt":  "2025-08-11T19:30:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2025-08-11T21:13:01Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-08-11T19:36:10Z",
        "body":  "### Background and motivation\n\nI started using the LoggerMessage attributes to source generate logging calls. I would ask you to make it generate a documentation which includes at least the actual message and the log level.\n\nI am constantly wondering in bigger classes what it would output and a simple mouseover would help me here!\n\nYou did this recently for the RegExAttribute source generator and was always the case for strings in resource files as long as i can remember.\n\n### API Proposal\n\nsimple sample:\n```csharp\n    public sealed partial class Sample(ILogger logger)\n    {\n        [LoggerMessage(Message = \"Hello {Name}]\", Level = LogLevel.Information)]\n        public partial void LogHello(string name);\n\n        public void DoSomething()\n        {\n            LogHello(\"World\");\n        }\n    }\n```\n\ngenerated partial call:\n```csharp\n    partial class Sample\n    {\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"9.0.12.31616\")]\n        private static readonly global::System.Action\u003cglobal::Microsoft.Extensions.Logging.ILogger, global::System.String, global::System.Exception?\u003e __LogHelloCallback =\n            global::Microsoft.Extensions.Logging.LoggerMessage.Define\u003cglobal::System.String\u003e(global::Microsoft.Extensions.Logging.LogLevel.Information, new global::Microsoft.Extensions.Logging.EventId(871370049, nameof(LogHello)), \"Hello {Name}]\", new global::Microsoft.Extensions.Logging.LogDefineOptions() { SkipEnabledCheck = true }); \n\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"9.0.12.31616\")]\n        public partial void LogHello(global::System.String name)\n        {\n            if (logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Information))\n            {\n                __LogHelloCallback(logger, name, null);\n            }\n        }\n    }\n```\n\n### API Usage\n\n(I faked it here)\n\nBut i want the mouse over to look like this:\n\n\u003cimg width=\"529\" height=\"332\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/84d2f6f5-d8a8-4acd-acf3-ba28b6a75ddb\" /\u003e\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nOnly the documentation would change, so risk should be minimal. Not sure, what to do if the partial declaration already has documentation?!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvVdNeg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc66tkpI",
                                           "createdAt":  "2025-07-29T13:18:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-29T13:18:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69V016",
                                           "createdAt":  "2025-08-11T19:36:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEd5rEA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RenderMichael",
                                                                               "createdAt":  "2025-08-11T21:12:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gfoidl",
                                           "body":  "The logging generator in [Microsoft.Extensions.Telemetry.Abstractions](https://github.com/dotnet/extensions/tree/main/src/Libraries/Microsoft.Extensions.Telemetry.Abstractions#enhanced-logging-capabilities) does what you want.\nThis package / generator is a drop-in-replacement for the .NET logging generator, and add some enhanced features.\nSo short: it should be safe and easy to just add the package and re-compile the code.\n\nBut: I have to admit that it\u0027s a bit odd that there\u0027s the .NET logging generator here, and in the same dotnet-org another logging generator (that isn\u0027t as easy discoverable anyway). Maybe the goodness should be merged into just one logging generator.\n\n",
                                           "updatedAt":  "2025-08-11T19:36:10Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: Better Source comments on generated code from LoggerMessageAttribute",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119238",
        "createdAt":  "2025-09-01T06:09:44Z",
        "number":  119238,
        "author":  "CoenraadS",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-01T15:40:25Z",
        "body":  "### Background and motivation\n\nThe \u0027SimpleConsoleLogger\u0027 is not very simple, including EventID in each log message:\n\n``` \ninfo: Program[0] Hello World\n```\n\nThe desired result is:\n\n``` \ninfo: Program Hello World\n```\n\nThis is currently not configurable, see:\n\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Logging.Console/src/SimpleConsoleFormatter.cs#L98-L108\n\nI would like to propose the following property be added to `SimpleConsoleFormatterOptions`\n\n`public bool IncludeEventID  { get; set; } = true`\n\nBy defaulting to `true`, there is no behaviour change to the current implementation.\nSetting it to `false` would remove the event id from being included.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwUjO2w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7BLcGa",
                                           "createdAt":  "2025-09-01T06:21:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-01T06:21:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BSM7b",
                                           "createdAt":  "2025-09-01T15:40:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I\u0027d actually like the opposite: show the event name in addition to the ID number.  Thus:\n\n```diff\n namespace Microsoft.Extensions.Logging.Console\n {\n     public partial class SimpleConsoleFormatterOptions\n     {\n+        // Whether EventId.Id is formatted.\n+        public bool IncludeEventId { get; set; } = true;\n \n+        // Whether EventId.Name is formatted.\n+        public bool IncludeEventName { get; set; } = false;\n     }\n }\n```\n",
                                           "updatedAt":  "2025-09-01T15:40:25Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add \u0027IncludeEventID\u0027 to \u0027SimpleConsoleFormatterOptions\u0027",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119587",
        "createdAt":  "2025-09-11T15:55:44Z",
        "number":  119587,
        "author":  "omsmith",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQQsvg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cbortos-d2l",
                                            "createdAt":  "2025-09-11T17:43:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TimothyJCowen",
                                            "createdAt":  "2025-09-12T11:31:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "j3parker",
                                            "createdAt":  "2025-09-12T11:50:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2025-09-12T16:31:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2025-09-13T04:23:25Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-09-12T11:32:17Z",
        "body":  "### Description\n\nThe ordering of source code generated by LoggerMessageGenerator is unstable, leading to non-deterministic builds.\n\n### Reproduction Steps\n\nReproduction repo: https://github.com/omsmith/UnstableLoggerMessageGenerator\nWorkflow run showing the output changes between builds: https://github.com/omsmith/UnstableLoggerMessageGenerator/actions/runs/17649313698/job/50155741046\n\n### Expected behavior\n\nI would expect the generator to produce stable, consistent, output in order to contribute to a deterministic build output.\n\n### Actual behavior\n\nGenerated output varies between generator runs:\n\n```diff\ndiff --git a/sums1 b/sums2\nindex c57fc00..7212393 100644\n--- a/sums1\n+++ b/sums2\n@@ -1,4 +1,4 @@\n-0cbf1d2ffda033884441cff20838d1297f1ea7a3bc7e4170a7cfe59a68b6515d  generated/Microsoft.Extensions.Logging.Generators/Microsoft.Extensions.Logging.Generators.LoggerMessageGenerator/LoggerMessage.g.cs\n+81ce9fd64ffb27eeb2091027a9c5f881d3e94444ef5bec144e79381b069ff65c  generated/Microsoft.Extensions.Logging.Generators/Microsoft.Extensions.Logging.Generators.LoggerMessageGenerator/LoggerMessage.g.cs\n 2b32257e1f1322ba7aff78f09fa4b07ee6c30bc0fd1ab714fd18326ad10750e7  published/Consumer.deps.json\n ceea04c4d35fa3f007b87d2d91ec96fbc03f8b22e36d71c49dbb51f9d5bc1357  published/Consumer.dll\n e4bb0c3c38a7e35488b9775938096c158e393ddc416ad61b254370e9417aaf68  published/Consumer.pdb\n@@ -6,5 +6,5 @@ e4bb0c3c38a7e35488b9775938096c158e393ddc416ad61b254370e9417aaf68  published/Cons\n 622cf6cafd1d5a402c12574515dfaab8ce99018a8b1d324045487ed7a5dfbb62  published/Microsoft.Extensions.Logging.Abstractions.dll\n 84cbe6b2d711d9634cdea73c5614d43f11d569a2de0df5dd48f2ac26980993ca  published/StableDep.dll\n a86eb98c5ed0f9b41e431ef6d7620f0031c2b6bd649f21f3e89c411d9dd69d92  published/StableDep.pdb\n-d748fbfd0a99b86cbc8b875147c3316a3a76b6c5a3c7c9365363e62a5077c286  published/UnstableDep.dll\n-dec237d698d2f25329fda3321d6595fe82b2165921256911059111779972a548  published/UnstableDep.pdb\n+4e41796882705baa91f0d855700d6234e4b1cb377c0e1ad6a8611664cf5a5374  published/UnstableDep.dll\n+fb1e5ab124a6a13e9b941c7caa05eb3ae3f0b1d06d2af8debcac6e4709e0e99c  published/UnstableDep.pdb\n```\n\n```diff\ndiff --git a/generated1/Microsoft.Extensions.Logging.Generators/Microsoft.Extensions.Logging.Generators.LoggerMessageGenerator/LoggerMessage.g.cs b/generated2/Microsoft.Extensions.Logging.Generators/Microsoft.Extensions.Logging.Generators.LoggerMessageGenerator/LoggerMessage.g.cs\nindex 72cea2c..4f4dc0a 100644\n--- a/generated1/Microsoft.Extensions.Logging.Generators/Microsoft.Extensions.Logging.Generators.LoggerMessageGenerator/LoggerMessage.g.cs\n+++ b/generated2/Microsoft.Extensions.Logging.Generators/Microsoft.Extensions.Logging.Generators.LoggerMessageGenerator/LoggerMessage.g.cs\n@@ -3,7 +3,7 @@\n \n namespace UnstableDep\n {\n-    partial class X\n+    partial class Z\n     {\n         [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"9.0.12.41916\")]\n         private static readonly global::System.Action\u003cglobal::Microsoft.Extensions.Logging.ILogger, global::System.Exception?\u003e __LogFooCallback =\n@@ -21,7 +21,7 @@ namespace UnstableDep\n }\n namespace UnstableDep\n {\n-    partial class Z\n+    partial class R\n     {\n         [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"9.0.12.41916\")]\n         private static readonly global::System.Action\u003cglobal::Microsoft.Extensions.Logging.ILogger, global::System.Exception?\u003e __LogFooCallback =\n@@ -39,7 +39,7 @@ namespace UnstableDep\n }\n namespace UnstableDep\n {\n-    partial class R\n+    partial class P\n     {\n         [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"9.0.12.41916\")]\n         private static readonly global::System.Action\u003cglobal::Microsoft.Extensions.Logging.ILogger, global::System.Exception?\u003e __LogFooCallback =\n@@ -57,7 +57,7 @@ namespace UnstableDep\n }\n namespace UnstableDep\n {\n-    partial class P\n+    partial class Y\n     {\n         [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"9.0.12.41916\")]\n         private static readonly global::System.Action\u003cglobal::Microsoft.Extensions.Logging.ILogger, global::System.Exception?\u003e __LogFooCallback =\n@@ -93,7 +93,7 @@ namespace UnstableDep\n }\n namespace UnstableDep\n {\n-    partial class Y\n+    partial class X\n     {\n         [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"9.0.12.41916\")]\n         private static readonly global::System.Action\u003cglobal::Microsoft.Extensions.Logging.ILogger, global::System.Exception?\u003e __LogFooCallback =\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nSDK 9.0.304\nubuntu-24.04\nMicrosoft.Extensions.Logging.Abstractions 9.0.9\n\n### Other information\n\nA straight-forward solution should be to order the `GetLogClasses` `results` list by their full class name:\n\nhttps://github.com/dotnet/runtime/blob/3823740196db425fbceef96fc5f29c6ae78b411b/src/libraries/Microsoft.Extensions.Logging.Abstractions/gen/LoggerMessageGenerator.Parser.cs#L601\n\nSimilar to JsonSourceGenerator:\n\nhttps://github.com/dotnet/runtime/blob/3823740196db425fbceef96fc5f29c6ae78b411b/src/libraries/System.Text.Json/gen/JsonSourceGenerator.Parser.cs#L156",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw8vksA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7DmPCI",
                                           "createdAt":  "2025-09-11T15:56:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-logging\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-11T15:56:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Dy-Sw",
                                           "createdAt":  "2025-09-12T11:32:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TimothyJCowen",
                                           "body":  "++ on this issue.",
                                           "updatedAt":  "2025-09-12T11:32:17Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "LoggerMessageGenerator output order is unstable/non-deterministic",
        "labels":  [
                       "area-Extensions-Logging"
                   ]
    }
]
