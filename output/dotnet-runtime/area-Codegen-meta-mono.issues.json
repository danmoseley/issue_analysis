[
    {
        "url":  "https://github.com/dotnet/runtime/issues/45471",
        "createdAt":  "2020-12-01T20:51:36Z",
        "number":  45471,
        "author":  "ivanivanyuk1993",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCYArVg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ivanivanyuk1993",
                                            "createdAt":  "2020-12-05T19:52:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Thaina",
                                            "createdAt":  "2022-04-14T04:51:14Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-04-19T22:24:30Z",
        "body":  "\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\n--\u003e\r\n\r\n### Is your feature request related to a problem? Please describe.\r\nI am trying to do an app for inside use for enterprise in Blazor - https://fir-ec434.web.app/. While it runs great on desktop, it feels laggy on mobiles. My simple measures show that C# runs ~50 times slower than JS, so I had to move performance critical parts(like url state persisting, which can grow up to O(5000) for every state change which uses UrlReactiveValueProvider or its\u0027 ChildValueExtractingReactiveValueProvider-s) to JS\r\n\r\n### Describe the solution you\u0027d like\r\nMy app doesn\u0027t care about initial loading time, it would tolerate loading of whole 200mb JIT-runtime on first load as long as performance is native and long loading happens once and then app uses cache\r\n\r\nHence, my app would benefit from loading performant JIT instead of using interpreter\r\n\r\n### Additional context\r\nBy the way, described feature would be better than native apps for many use cases, like games\r\nMy typical user experience with AppStore and PlayStore games\r\n- Click install\r\n- Wait for load/install, while waiting browse the web or do other stuff\r\n- Close/Swipe from memory AppStore/PlayStore\r\n- Find app in menu\r\n- Click app to open it\r\n\r\nFor Blazor my expected user experience is:\r\n- Open url\r\n- Wait for load, while waiting browse the web or do other stuff\r\n- Open url with loaded app again\r\n\r\nIf you are interested in my simple measure, which shows ~50 times performance difference\r\n```cs\r\n            // C# benchmark\r\n            // var a = 0;\r\n            // var s = DateTime.Now;\r\n            // for (var i = 0; i \u003c 1e7; i++)\r\n            // {\r\n            //     ++a;\r\n            // }\r\n            // var f = DateTime.Now;\r\n            // Console.WriteLine((f - s).TotalMilliseconds);\r\n            // Console.WriteLine(a);\r\n            //\r\n            // JS benchmark\r\n            // var a = 0; var s = Date.now(); for (var i = 0; i \u003c 1e7; i++) { ++a }; var f = Date.now(); console.log(f - s); console.log(a);",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQcHk2g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzExOTU1NQ==",
                                           "createdAt":  "2020-12-02T09:51:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@ivanivanyuk1993 thanks for contacting us.\r\n\r\nWe are moving this issue to the runtime repository since we don\u0027t own the underlying .NET runtime.\r\n\r\n/cc: @danroth27",
                                           "updatedAt":  "2020-12-02T09:51:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzExOTgxNA==",
                                           "createdAt":  "2020-12-02T09:51:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-12-02T09:51:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzE3MjI0NQ==",
                                           "createdAt":  "2020-12-02T11:29:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "the browser can support jit mode?",
                                           "updatedAt":  "2020-12-02T11:29:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzE3NjI2NA==",
                                           "createdAt":  "2020-12-02T11:38:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanivanyuk1993",
                                           "body":  "@srxqds \r\nWell, since clr is written in C++, I think it\u0027s not a problem to download it and run it in wasm",
                                           "updatedAt":  "2020-12-02T11:38:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzMyOTUxNw==",
                                           "createdAt":  "2020-12-02T16:07:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: \nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\n--\u003e\r\n\r\n### Is your feature request related to a problem? Please describe.\r\nI am trying to do an app for inside use for enterprise in Blazor - https://fir-ec434.web.app/. While it runs great on desktop, it feels laggy on mobiles. My simple measures show that C# runs ~50 times slower than JS, so I had to move performance critical parts(like url state persisting, which can grow up to O(5000) for every state change which uses UrlReactiveValueProvider or its\u0027 ChildValueExtractingReactiveValueProvider-s) to JS\r\n\r\n### Describe the solution you\u0027d like\r\nMy app doesn\u0027t care about initial loading time, it would tolerate loading of whole 200mb JIT-runtime on first load as long as performance is native and long loading happens once and then app uses cache\r\n\r\nHence, my app would benefit from loading performant JIT instead of using interpreter\r\n\r\n### Additional context\r\nBy the way, described feature would be better than native apps for many use cases, like games\r\nMy typical user experience with AppStore and PlayStore games\r\n- Click install\r\n- Wait for load/install, while waiting browse the web or do other stuff\r\n- Close/Swipe from memory AppStore/PlayStore\r\n- Find app in menu\r\n- Click app to open it\r\n\r\nFor Blazor my expected user experience is:\r\n- Open url\r\n- Wait for load, while waiting browse the web or do other stuff\r\n- Open url with loaded app again\r\n\r\nIf you are interested in my simple measure, which shows ~50 times performance difference\r\n```cs\r\n            // C# benchmark\r\n            // var a = 0;\r\n            // var s = DateTime.Now;\r\n            // for (var i = 0; i \u003c 1e7; i++)\r\n            // {\r\n            //     ++a;\r\n            // }\r\n            // var f = DateTime.Now;\r\n            // Console.WriteLine((f - s).TotalMilliseconds);\r\n            // Console.WriteLine(a);\r\n            //\r\n            // JS benchmark\r\n            // var a = 0; var s = Date.now(); for (var i = 0; i \u003c 1e7; i++) { ++a }; var f = Date.now(); console.log(f - s); console.log(a);\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eivanivanyuk1993\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-Codegen-meta-mono`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-12-02T16:07:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MjgzMjI3Mw==",
                                           "createdAt":  "2021-06-17T00:58:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "The WebAssembly runtime is by design much more limited than a normal execution environment and anything approaching just in time compilation for a CLR would be extremely difficult.",
                                           "updatedAt":  "2021-06-17T00:58:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48cD3Z",
                                           "createdAt":  "2022-01-17T00:21:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "redradist",
                                           "body":  "Is there any work in this area ?",
                                           "updatedAt":  "2022-01-17T00:21:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48jatd",
                                           "createdAt":  "2022-01-18T23:13:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danroth27",
                                           "body":  "\u003e Is there any work in this area ?\r\n\r\nNot currently due to web platform limitations. Our focus instead is on ahead-of-time (AOT) compilation.",
                                           "updatedAt":  "2022-01-18T23:13:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AXfS-",
                                           "createdAt":  "2022-03-27T10:20:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SupinePandora43",
                                           "body":  "\u003e \u003e Is there any work in this area ?\n\u003e \n\u003e Not currently due to web platform limitations. Our focus instead is on ahead-of-time (AOT) compilation.\n\nWill we get NativeAOT or NativeAOT-llvm in blazor?",
                                           "updatedAt":  "2022-03-27T10:20:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ArsBU",
                                           "createdAt":  "2022-03-31T22:33:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danroth27",
                                           "body":  "\u003e Will we get NativeAOT or NativeAOT-llvm in blazor?\r\n\r\nThere are no immediate plans to switch Blazor WebAssembly to NativeAOT. Blazor WebAssembly currently uses the Mono AOT toolchain, the same toolchain used for .NET apps on iOS. Currently the NativeAOT support for WebAssembly is experimental.",
                                           "updatedAt":  "2022-03-31T22:33:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BfPhl",
                                           "createdAt":  "2022-04-14T04:57:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "\u003e \u003e Will we get NativeAOT or NativeAOT-llvm in blazor?\r\n\u003e \r\n\u003e There are no immediate plans to switch Blazor WebAssembly to NativeAOT. Blazor WebAssembly currently uses the Mono AOT toolchain, the same toolchain used for .NET apps on iOS. Currently the NativeAOT support for WebAssembly is experimental.\r\n\r\nThanks for the info. Are there issue and roadmap about this experimental? Do we have guideline to enable it?\r\n\r\nBut actually I am more concern about full JIT support in browser wasm. I can\u0027t see why we need AoT in browser when browser actually could support loading and generating code at runtime anyway?",
                                           "updatedAt":  "2022-04-14T04:57:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BweTa",
                                           "createdAt":  "2022-04-19T22:24:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCYwhrQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Thaina",
                                                                               "createdAt":  "2022-04-20T01:41:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danroth27",
                                           "body":  "\u003e Are there issue and roadmap about this experimental? Do we have guideline to enable it?\r\n\r\nNo, experimental means there isn\u0027t a committed roadmap for this functionality. See https://github.com/dotnet/runtimelab/blob/feature/NativeAOT-LLVM/docs/using-nativeaot/compiling.md#webassembly or additional details.\r\n\r\n\u003e I am more concern about full JIT support in browser wasm. I can\u0027t see why we need AoT in browser when browser actually could support loading and generating code at runtime anyway?\r\n\r\nFrom what I understand there is still a limitation in browsers that prevents the runtime generation and loading of WebAssembly modules in a manner suitable for JIT compilation.",
                                           "updatedAt":  "2022-04-19T22:24:30Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Blazor support JIT-runtime in browser",
        "labels":  [
                       "arch-wasm",
                       "tenet-performance",
                       "area-Codegen-meta-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49904",
        "createdAt":  "2021-03-19T20:47:40Z",
        "number":  49904,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T09:46:05Z",
        "body":  "Implement support for [static interface methods](https://github.com/dotnet/runtime/pull/49558) (csharp design: https://github.com/dotnet/csharplang/issues/4436)\r\n\r\n\r\nKnown issues for .NET 7\r\n- [ ] Disabled runtime tests https://github.com/dotnet/runtime/blob/6f30425664e452170a67072fff5462caf556c796/src/tests/issues.targets#L1532-L1537\r\n   - [x] Triage and create individual issues\r\n   - [x] `GenericContext`   https://github.com/dotnet/runtime/pull/66739\r\n   - [ ] `InterfaceVariance`\r\n   - [ ] `NegativeTestCases`\r\n- [ ] #67540\r\n- [x] #61920\r\n- [x] #61672\r\n- [x] support AOT with generic sharing https://github.com/dotnet/runtime/issues/54910\r\n- [x] generic sharing failure with `contstrained.call` https://github.com/dotnet/runtime/issues/65002 and https://github.com/dotnet/runtime/pull/60905\r\n- [x] https://github.com/dotnet/runtime/issues/65394\r\n- [x] https://github.com/dotnet/runtime/issues/65384\r\n- [x] https://github.com/dotnet/runtime/issues/60447\r\n\r\nWork items completed in .net 6:\r\n- [x] metadata updates\r\n   - allow `virtual` on `static` methods in interfaces  (can borrow this and JIT from [partydonk prototype](https://github.com/Partydonk/runtime/commits/dev/abock/asim))\r\n   - implement *implements-all-static-interface-methods-of* relation\r\n   - possibly implement a static vtable for `MonoClass` (partydonk just puts static methods into the instance vtable and also does matching by name)\r\n- [x] unconditionally enable JIT support \r\n   - [x] `constrained.call`\r\n- [x] unconditionally enable interpreter support\r\n   - [x] `constrained.call`\r\n   - [x] `constrained.ldftn`\r\n- [x] support for the `RuntimeFeature` flag https://github.com/dotnet/runtime/issues/49905 for statics in interfaces.\r\n---\r\n\r\n\r\nRelated CoreCLR work items over at https://github.com/dotnet/runtime/issues/50129",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSAXkqA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTkxNjEyOQ==",
                                           "createdAt":  "2021-03-24T15:21:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "@vargaz I think we\u0027re probably going to need static vtables.  The ecma spec addendum says the static interface methods are going to be in the methodimpl table.  The partydonk prototype completely ignores that and does matching by name.  But we should just add a `PROP_STATIC_VTABLE` to `InfrequentDataKind` and just write down the impls from the MethodImpl in there when setting up the class.  It can be completely separate from instance vtable layout.  What do you think?",
                                           "updatedAt":  "2021-03-24T15:21:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MjY3MjYzNQ==",
                                           "createdAt":  "2021-05-17T22:04:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBrTJ9A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lambdageek",
                                                                               "createdAt":  "2021-05-18T18:52:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "There is now a working implmentation of all of this for CoreCLR checked in. Tests are disabled for mono, but otherwise it should be ready for implementation work to begin in Mono.",
                                           "updatedAt":  "2021-05-17T22:04:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjM2ODM2OA==",
                                           "createdAt":  "2021-06-01T18:58:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Zoltan implemented the initial version in #53465 \r\n\r\nNotably generic sharing does not work correctly, so the AOT support isn\u0027t quite there yet.",
                                           "updatedAt":  "2021-06-01T18:58:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41XZa3",
                                           "createdAt":  "2021-08-09T15:36:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Remaining work pushed back to .net 7",
                                           "updatedAt":  "2021-08-09T15:36:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc451aT7",
                                           "createdAt":  "2021-11-16T14:00:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "@tannergooding @stephentoub I think in general Mono is in good shape to use static virtual methods in libraries.  There may be bugs, but the only remaining completely unimplemented functionality that I\u0027m aware of is the `constrained . ldftn` opcode - ie `\u0026T.StaticMethod`  and creation of delegates from static virtual methods from inside another generic method.",
                                           "updatedAt":  "2021-11-16T14:00:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H3B2f",
                                           "createdAt":  "2022-08-04T18:15:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@lambdageek @BrzVlad - There are a couple unchecked ones. Are these required for 7.0 or can this be moved to 8.0.0 ?",
                                           "updatedAt":  "2022-08-04T18:15:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IBeSo",
                                           "createdAt":  "2022-08-08T16:30:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrzVlad",
                                           "body":  "Moving to 8.0 since only corner cases from runtime tests are left implementing ",
                                           "updatedAt":  "2022-08-08T16:30:57Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[Mono] implement static virtual methods in interfaces support",
        "labels":  [
                       "area-Codegen-meta-mono",
                       "Bottom Up Work"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53032",
        "createdAt":  "2021-05-20T15:50:24Z",
        "number":  53032,
        "author":  "imhameed",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBrna2A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SamMonoRT",
                                            "createdAt":  "2021-05-20T15:51:49Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-08-05T17:03:26Z",
        "body":  "Mostly a general tracking issue so that I don\u0027t forget about this. The Mono amd64 intrinsics implementation should use some of the lines-of-code-reducing stuff introduced as part of the implementation of arm64 intrinsics. While SSE and the numerous revisions thereof aren\u0027t as uniform as NEON, there\u0027s still a good deal of cleanup that can be done. Less .text, more .rodata, fewer special cases, etc.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYVFHZQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5FLCKz",
                                           "createdAt":  "2022-06-20T14:31:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@fanyang-mono - assigning to you, mostly to help plan for amd64 intrinsic work later this summer.",
                                           "updatedAt":  "2022-06-20T14:31:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FLCUF",
                                           "createdAt":  "2022-06-20T14:32:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "Moving to 8.0 as low priority for current release",
                                           "updatedAt":  "2022-06-20T14:32:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hUUdl",
                                           "createdAt":  "2023-07-12T15:06:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "Low priority. Moving to .NET9",
                                           "updatedAt":  "2023-07-12T15:06:30Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[mono] Intrinsics cleanup",
        "labels":  [
                       "area-Codegen-meta-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54867",
        "createdAt":  "2021-06-28T22:45:06Z",
        "number":  54867,
        "author":  "imhameed",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-28T16:41:11Z",
        "body":  "`JIT/Intrinsics/TypeIntrinsics_il` fails on every configuration, while `JIT/Intrinsics/TypeIntrinsics_r` and `JIT/Intrinsics/TypeIntrinsics_ro` only fail in the interpreter (or on wasm).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYVIWCQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc40ig2B",
                                           "createdAt":  "2021-07-16T13:46:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "Moving to 7.0.0",
                                           "updatedAt":  "2021-07-16T13:46:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HpFp4",
                                           "createdAt":  "2022-08-02T02:48:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "Moving to 8.0.0",
                                           "updatedAt":  "2022-08-02T02:48:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hUhYJ",
                                           "createdAt":  "2023-07-12T15:37:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "Moving to 9.0.0",
                                           "updatedAt":  "2023-07-12T15:37:10Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[mono] TypeIntrinsics runtime test failures",
        "labels":  [
                       "area-Codegen-meta-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57352",
        "createdAt":  "2021-08-13T15:30:15Z",
        "number":  57352,
        "author":  "imhameed",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-16T17:40:54Z",
        "body":  "Several runtime tests (which can be found by searching issues.targets for this issue number) fail to pass with this message:\r\n\r\n```\r\nRan out of trampolines of type [X]\r\n```\r\n\r\nMaybe we should precreate more trampolines. Or we could use the iOS \"infinite trampoline\" hack on Linux.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[mono] FullAOT runtime test failures: Ran out of trampolines",
        "labels":  [
                       "area-Codegen-meta-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57353",
        "createdAt":  "2021-08-13T15:34:20Z",
        "number":  57353,
        "author":  "imhameed",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-13T15:36:28Z",
        "body":  "Seen in `JIT/Directed/nullabletypes/Desktop/boxunboxvaluetype_*` and `JIT/Directed/nullabletypes/castclassvaluetype_*`.\r\n\r\nFor all these tests, the output log contains:\r\n```\r\n        Test FailedSystem.Exception: [False]!=[True]: BoxUnboxToNQGenC\r\n           at Assert.AreEqual(Boolean result, Boolean expected, String comment)\r\n           at NullableTest30.Run()\r\n           at Test.Main()\r\n        System.Exception: [False]!=[True]: BoxUnboxToNQGenC\r\n           at Assert.AreEqual(Boolean result, Boolean expected, String comment)\r\n           at NullableTest30.Run()\r\n           at Test.Main()\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[mono] FullAOT runtime test failures: False != True",
        "labels":  [
                       "area-Codegen-meta-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57362",
        "createdAt":  "2021-08-13T18:30:51Z",
        "number":  57362,
        "author":  "imhameed",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-16T17:43:18Z",
        "body":  "`Interop/UnmanagedCallersOnly/UnmanagedCallersOnlyTest/UnmanagedCallersOnlyTest.dll` crashes on attempts to FullAOT compile it on x64 with:\r\n```\r\nMONO_ENV_OPTIONS=\"--aot=full,llvm,llvm-path=$MONO_PFX,mattr=sse4.2,mattr=popcnt,mattr=lzcnt,mattr=bmi,mattr=bmi2,mattr=pclmul,mattr=aes\"\r\n```\r\nand arm64 with:\r\n```\r\nMONO_ENV_OPTIONS=\"--aot=full,llvm,llvm-path=$MONO_PFX,mattr=crc,mattr=crypto\"\r\n```\r\n\r\nThe following output is produced:\r\n\r\n```\r\n* Assertion at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/mini/aot-compiler.c:5142, condition `is_ok (error)\u0027 not met, function:add_wrappers, method Program:CallbackMethodNonBlittable (bool) with UnmanagedCallersOnlyAttribute has non-blittable parameters or return type assembly:\u003cunknown assembly\u003e type:\u003cunknown type\u003e member:(null)\r\n\r\n\r\n=================================================================\r\n\tNative Crash Reporting\r\n=================================================================\r\nGot a SIGABRT while executing native code. This usually indicates\r\na fatal error in the mono runtime or one of the native libraries \r\nused by your application.\r\n=================================================================\r\n\r\n=================================================================\r\n\tNative stacktrace:\r\n=================================================================\r\n\t0x7f528b41c2da - Unknown\r\n\t0x7f528b41c251 - Unknown\r\n\t0x7f528b329178 - Unknown\r\n\t0x7f528b41b9c2 - Unknown\r\n\t0x7f528d2e0730 - Unknown\r\n\t0x7f528ce237bb - Unknown\r\n\t0x7f528ce0e535 - Unknown\r\n\t0x7f528b4db3e2 - Unknown\r\n\t0x7f528b13c7ae - Unknown\r\n\t0x7f528b1394dc - Unknown\r\n\t0x7f528b4dc05a - Unknown\r\n\t0x7f528b4dba8e - Unknown\r\n\t0x7f528b4dbdb4 - Unknown\r\n\t0x7f528b2f2a92 - Unknown\r\n\t0x7f528b2e96a9 - Unknown\r\n\t0x7f528b2e643e - Unknown\r\n\t0x7f528b2dcd33 - Unknown\r\n\t0x7f528b2db71f - Unknown\r\n\t0x7f528b3977d7 - Unknown\r\n\t0x7f528b20b512 - Unknown\r\n\t0x562fc2fa14ab - Unknown\r\n\t0x7f528ce1009b - Unknown\r\n\t0x562fc2f9d41a - Unknown\r\n\r\n=================================================================\r\n\tTelemetry Dumper:\r\n=================================================================\r\nNo threads attached to runtime.\r\n\r\n=================================================================\r\n\tExternal Debugger Dump:\r\n=================================================================\r\n[New LWP 60850]\r\nBFD: /usr/lib/debug/.build-id/d3/583c742dd47aaa860c5ae0c0c5bdbcd2d54f61.debug: unable to initialize decompress status for section .debug_aranges\r\nBFD: /usr/lib/debug/.build-id/d3/583c742dd47aaa860c5ae0c0c5bdbcd2d54f61.debug: unable to initialize decompress status for section .debug_aranges\r\nwarning: File \"/usr/lib/debug/.build-id/d3/583c742dd47aaa860c5ae0c0c5bdbcd2d54f61.debug\" has no build-id, file skipped\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\r\nBFD: /usr/lib/debug/.build-id/88/5dda4b4a5cea600e7b5b98c1ad86996c8d2299.debug: unable to initialize decompress status for section .debug_aranges\r\nBFD: /usr/lib/debug/.build-id/88/5dda4b4a5cea600e7b5b98c1ad86996c8d2299.debug: unable to initialize decompress status for section .debug_aranges\r\nwarning: File \"/usr/lib/debug/.build-id/88/5dda4b4a5cea600e7b5b98c1ad86996c8d2299.debug\" has no build-id, file skipped\r\nBFD: /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug: unable to initialize decompress status for section .debug_aranges\r\nBFD: /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug: unable to initialize decompress status for section .debug_aranges\r\nwarning: File \"/usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug\" has no build-id, file skipped\r\nBFD: /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accae8c0732b711.debug: unable to initialize decompress status for section .debug_aranges\r\nBFD: /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accae8c0732b711.debug: unable to initialize decompress status for section .debug_aranges\r\nwarning: File \"/usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accae8c0732b711.debug\" has no build-id, file skipped\r\nBFD: /usr/lib/debug/.build-id/5d/cf98ad684962be494af28a1051793fd39e4ebc.debug: unable to initialize decompress status for section .debug_aranges\r\nBFD: /usr/lib/debug/.build-id/5d/cf98ad684962be494af28a1051793fd39e4ebc.debug: unable to initialize decompress status for section .debug_aranges\r\nwarning: File \"/usr/lib/debug/.build-id/5d/cf98ad684962be494af28a1051793fd39e4ebc.debug\" has no build-id, file skipped\r\n0x00007f528d2e00ca in __waitpid (pid=60852, stat_loc=0x7ffc1f7f983c, options=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30\r\n30\t../sysdeps/unix/sysv/linux/waitpid.c: No such file or directory.\r\n  Id   Target Id         Frame \r\n* 1    Thread 0x7f528cde7740 (LWP 60848) \"corerun\" 0x00007f528d2e00ca in __waitpid (pid=60852, stat_loc=0x7ffc1f7f983c, options=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30\r\n  2    Thread 0x7f52893ff700 (LWP 60850) \"SGen worker\" futex_wait_cancelable (private=0, expected=0, futex_word=0x7f528cdacd38 \u003cwork_cond+40\u003e) at ../sysdeps/unix/sysv/linux/futex-internal.h:88\r\n\r\nThread 2 (Thread 0x7f52893ff700 (LWP 60850)):\r\n#0  futex_wait_cancelable (private=0, expected=0, futex_word=0x7f528cdacd38 \u003cwork_cond+40\u003e) at ../sysdeps/unix/sysv/linux/futex-internal.h:88\r\n#1  __pthread_cond_wait_common (abstime=0x0, mutex=0x7f528cdacce8 \u003clock\u003e, cond=0x7f528cdacd10 \u003cwork_cond\u003e) at pthread_cond_wait.c:502\r\n#2  __pthread_cond_wait (cond=0x7f528cdacd10 \u003cwork_cond\u003e, mutex=0x7f528cdacce8 \u003clock\u003e) at pthread_cond_wait.c:655\r\n#3  0x00007f528b1f7a4d in mono_os_cond_wait (cond=0x7f528cdacd10 \u003cwork_cond\u003e, mutex=0x7f528cdacce8 \u003clock\u003e) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/mini/../../mono/utils/mono-os-mutex.h:219\r\n#4  0x00007f528b1f85bf in get_work (worker_index=0, work_context=0x7f52893feee0, do_idle=0x7f52893feed4, job=0x7f52893feec8) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/sgen/sgen-thread-pool.c:167\r\n#5  0x00007f528b1f75ab in thread_func (data=0x0) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/sgen/sgen-thread-pool.c:198\r\n#6  0x00007f528d2d5fa3 in start_thread (arg=\u003coptimized out\u003e) at pthread_create.c:486\r\n#7  0x00007f528cee54cf in clone () from /lib/x86_64-linux-gnu/libc.so.6\r\n\r\nThread 1 (Thread 0x7f528cde7740 (LWP 60848)):\r\n#0  0x00007f528d2e00ca in __waitpid (pid=60852, stat_loc=0x7ffc1f7f983c, options=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30\r\n#1  0x00007f528b41c773 in dump_native_stacktrace (signal=0x7f528a622247 \"SIGABRT\", mctx=0x7ffc1f7fa448) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/mini/mini-posix.c:981\r\n#2  0x00007f528b41c251 in mono_dump_native_crash_info (signal=0x7f528a622247 \"SIGABRT\", mctx=0x7ffc1f7fa448, info=0x7ffc1f7fa730) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/mini/mini-posix.c:1025\r\n#3  0x00007f528b329178 in mono_handle_native_crash (signal=0x7f528a622247 \"SIGABRT\", mctx=0x7ffc1f7fa448, info=0x7ffc1f7fa730) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/mini/mini-exceptions.c:3382\r\n#4  0x00007f528b41b9c2 in sigabrt_signal_handler (_dummy=6, _info=0x7ffc1f7fa730, context=0x7ffc1f7fa600) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/mini/mini-posix.c:227\r\n#5  \u003csignal handler called\u003e\r\n#6  0x00007f528ce237bb in raise () from /lib/x86_64-linux-gnu/libc.so.6\r\n#7  0x00007f528ce0e535 in abort () from /lib/x86_64-linux-gnu/libc.so.6\r\n#8  0x00007f528b4db3e2 in monoeg_assert_abort () at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/eglib/goutput.c:57\r\n#9  0x00007f528b13c7ae in mono_log_write_logfile (log_domain=0x0, level=G_LOG_LEVEL_ERROR, hdr=0, message=0x562fc3122b60 \"* Assertion at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/mini/aot-compiler.c:5142, condition `is_ok (error)\u0027 not met, function:add_wrappers, method Program:CallbackMethodNonBlittable (bool) with U\"...) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/utils/mono-log-common.c:136\r\n#10 0x00007f528b1394dc in structured_log_adapter (log_domain=0x0, log_level=G_LOG_LEVEL_ERROR, message=0x562fc3122b60 \"* Assertion at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/mini/aot-compiler.c:5142, condition `is_ok (error)\u0027 not met, function:add_wrappers, method Program:CallbackMethodNonBlittable (bool) with U\"..., user_data=0x0) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/utils/mono-logger.c:461\r\n#11 0x00007f528b4dc05a in monoeg_g_logstr (log_domain=0x0, log_level=G_LOG_LEVEL_ERROR, msg=0x562fc3122b60 \"* Assertion at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/mini/aot-compiler.c:5142, condition `is_ok (error)\u0027 not met, function:add_wrappers, method Program:CallbackMethodNonBlittable (bool) with U\"...) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/eglib/goutput.c:151\r\n#12 0x00007f528b4dba8e in monoeg_g_logv_nofree (log_domain=0x0, log_level=G_LOG_LEVEL_ERROR, format=0x7f528a9d93c9 \"* Assertion at %s:%d, condition `%s\u0027 not met, function:%s, %s\\n\", args=0x7ffc1f7fb160) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/eglib/goutput.c:166\r\n#13 0x00007f528b4dbdb4 in monoeg_assertion_message (format=0x7f528a9d93c9 \"* Assertion at %s:%d, condition `%s\u0027 not met, function:%s, %s\\n\") at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/eglib/goutput.c:207\r\n#14 0x00007f528b2f2a92 in add_wrappers (acfg=0x562fc30f2310) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/mini/aot-compiler.c:5142\r\n#15 0x00007f528b2e96a9 in collect_methods (acfg=0x562fc30f2310) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/mini/aot-compiler.c:12292\r\n#16 0x00007f528b2e643e in mono_compile_assembly (ass=0x562fc30eff50, opts=374434303, aot_options=0x562fc306c470 \"full,llvm,llvm-path=/home/imran/ms/dnr-11.x/runtime/artifacts/bin/mono/Linux.x64.Release,mattr=sse4.2,mattr=popcnt,mattr=lzcnt,mattr=bmi,mattr=bmi2,mattr=pclmul,mattr=aes\", global_aot_state=0x7ffc1f7fbbd8) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/mini/aot-compiler.c:14053\r\n#17 0x00007f528b2dcd33 in main_thread_handler (user_data=0x7ffc1f7fbf30) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/mini/driver.c:1431\r\n#18 0x00007f528b2db71f in mono_main (argc=3, argv=0x562fc3089d80) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/mini/driver.c:2679\r\n#19 0x00007f528b3977d7 in monovm_execute_assembly (argc=0, argv=0x562fc3063140, managedAssemblyPath=0x562fc3063200 \"/home/imran/ms/dnr-11.x/runtime/artifacts/tests/coreclr/Linux.x64.Release/Interop/UnmanagedCallersOnly/UnmanagedCallersOnlyTest/UnmanagedCallersOnlyTest.dll\", exitCode=0x7ffc1f7fc0bc) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/mini/monovm.c:270\r\n#20 0x00007f528b20b512 in coreclr_execute_assembly (hostHandle=0x0, domainId=0, argc=0, argv=0x562fc3063140, managedAssemblyPath=0x562fc3063200 \"/home/imran/ms/dnr-11.x/runtime/artifacts/tests/coreclr/Linux.x64.Release/Interop/UnmanagedCallersOnly/UnmanagedCallersOnlyTest/UnmanagedCallersOnlyTest.dll\", exitCode=0x7ffc1f7fc0bc) at /home/imran/ms/dnr-11.x/runtime/src/mono/mono/mini/main-core.c:81\r\n#21 0x0000562fc2fa14ab in run (config=...) at /home/imran/ms/dnr-11.x/runtime/src/coreclr/hosts/corerun/corerun.cpp:372\r\n#22 main (argc=\u003coptimized out\u003e, argv=\u003coptimized out\u003e) at /home/imran/ms/dnr-11.x/runtime/src/coreclr/hosts/corerun/corerun.cpp:554\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[mono] FullAOT runtime test failures: UnmanagedCallersOnlyTest",
        "labels":  [
                       "area-Codegen-meta-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57369",
        "createdAt":  "2021-08-13T18:54:04Z",
        "number":  57369,
        "author":  "imhameed",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-13T18:55:34Z",
        "body":  "These tests crash in LLVM opt due to bad IR generated by Mono--for the same reason, with nearly identical backtraces--on FullAOT compilation attempts:\r\n- `JIT/Methodical/eh/deadcode/deadoponerrorinfunclet_r/deadoponerrorinfunclet_r.dll`\r\n- `JIT/Methodical/eh/deadcode/deadoponerrorinfunclet_r/deadoponerrorinfunclet_d.dll`\r\n- `JIT/Methodical/ELEMENT_TYPE_IU/_il_relu_conv/_il_relu_conv.dll`\r\n\r\nThe compilation flags used are:\r\n```\r\nMONO_ENV_OPTIONS=\"--aot=full,llvm,llvm-path=$MONO_PFX,mattr=sse4.2,mattr=popcnt,mattr=lzcnt,mattr=bmi,mattr=bmi2,mattr=pclmul,mattr=aes\"\r\n```\r\n\r\nThe following output is produced:\r\n\r\n```\r\nMono Ahead of Time compiler - compiling assembly /home/imran/ms/dnr-11.x/runtime/artifacts/tests/coreclr/Linux.x64.Release/JIT/Methodical/eh/deadcode/deadoponerrorinfunclet_r/deadoponerrorinfunclet_r.dll\r\nAOTID 7047A330-D7FF-087D-658D-F2720340E11E\r\nExecuting opt: \"/home/imran/ms/dnr-11.x/runtime/artifacts/bin/mono/Linux.x64.Release/opt\" -f -O2 -disable-tail-calls -place-safepoints -spp-all-backedges -mattr=sse4.2,popcnt,lzcnt,bmi,bmi2,pclmul,aes -o \"mono_aot_GnlcXa/temp.opt.bc\" \"mono_aot_GnlcXa/temp.bc\"\r\nBasic Block in function \u0027hello_Class1_Main_string__\u0027 does not have terminator!\r\nlabel %NOTINITED_BB15\r\nLLVM ERROR: Broken module found, compilation aborted!\r\nPLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace.\r\nStack dump:\r\n0.      Program arguments: /home/imran/ms/dnr-11.x/runtime/artifacts/bin/mono/Linux.x64.Release/opt -f -O2 -disable-tail-calls -place-safepoints -spp-all-backedges -mattr=sse4.2,popcnt,lzcnt,bmi,bmi2,pclmul,aes -o mono_aot_GnlcXa/temp.opt.bc mono_aot_GnlcXa/temp.bc\r\n/home/imran/ms/dnr-11.x/runtime/artifacts/bin/mono/Linux.x64.Release/opt(_ZN4llvm3sys15PrintStackTraceERNS_11raw_ostreamE+0x1f)[0x2cf88df]\r\n/home/imran/ms/dnr-11.x/runtime/artifacts/bin/mono/Linux.x64.Release/opt(_ZN4llvm3sys17RunSignalHandlersEv+0x50)[0x2cf6ac0]\r\n/home/imran/ms/dnr-11.x/runtime/artifacts/bin/mono/Linux.x64.Release/opt[0x2cf8d35]\r\n/lib/x86_64-linux-gnu/libpthread.so.0(+0x12730)[0x7f92ac9dd730]\r\n/lib/x86_64-linux-gnu/libc.so.6(gsignal+0x10b)[0x7f92ac2c37bb]\r\n/lib/x86_64-linux-gnu/libc.so.6(abort+0x121)[0x7f92ac2ae535]\r\n/home/imran/ms/dnr-11.x/runtime/artifacts/bin/mono/Linux.x64.Release/opt[0x2c812a3]\r\n/home/imran/ms/dnr-11.x/runtime/artifacts/bin/mono/Linux.x64.Release/opt[0x2c810d8]\r\n/home/imran/ms/dnr-11.x/runtime/artifacts/bin/mono/Linux.x64.Release/opt[0x2507164]\r\n/home/imran/ms/dnr-11.x/runtime/artifacts/bin/mono/Linux.x64.Release/opt[0x34771bc]\r\n/home/imran/ms/dnr-11.x/runtime/artifacts/bin/mono/Linux.x64.Release/opt(_ZN4llvm6Module14materializeAllEv+0x2a)[0x261ca8a]\r\n/home/imran/ms/dnr-11.x/runtime/artifacts/bin/mono/Linux.x64.Release/opt(_ZN4llvm13BitcodeModule13getModuleImplERNS_11LLVMContextEbbbNS_12function_refIFNS_8OptionalINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9StringRefEEEE+0xb43)[0x34701b3]\r\n/home/imran/ms/dnr-11.x/runtime/artifacts/bin/mono/Linux.x64.Release/opt(_ZN4llvm16parseBitcodeFileENS_15MemoryBufferRefERNS_11LLVMContextENS_12function_refIFNS_8OptionalINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9StringRefEEEE+0x8b)[0x347426b]\r\n/home/imran/ms/dnr-11.x/runtime/artifacts/bin/mono/Linux.x64.Release/opt(_ZN4llvm7parseIRENS_15MemoryBufferRefERNS_12SMDiagnosticERNS_11LLVMContextENS_12function_refIFNS_8OptionalINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9StringRefEEEE+0x130)[0x27cbe70]\r\n/home/imran/ms/dnr-11.x/runtime/artifacts/bin/mono/Linux.x64.Release/opt(_ZN4llvm11parseIRFileENS_9StringRefERNS_12SMDiagnosticERNS_11LLVMContextENS_12function_refIFNS_8OptionalINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES0_EEE+0xa3)[0x27cc2d3]\r\n/home/imran/ms/dnr-11.x/runtime/artifacts/bin/mono/Linux.x64.Release/opt(main+0x831)[0x1777231]\r\n/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xeb)[0x7f92ac2b009b]\r\n/home/imran/ms/dnr-11.x/runtime/artifacts/bin/mono/Linux.x64.Release/opt(_start+0x2a)[0x176602a]\r\nAborted\r\nAOT of image /home/imran/ms/dnr-11.x/runtime/artifacts/tests/coreclr/Linux.x64.Release/JIT/Methodical/eh/deadcode/deadoponerrorinfunclet_r/deadoponerrorinfunclet_r.dll failed.\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[mono] FullAOT runtime test failures: Basic Block in function \u0027...\u0027 does not have terminator!",
        "labels":  [
                       "area-Codegen-meta-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59260",
        "createdAt":  "2021-09-17T12:54:36Z",
        "number":  59260,
        "author":  "danmoseley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-28T16:40:04Z",
        "body":  "\r\n```\r\nConsole log: \u0027JIT.Directed\u0027 from job e1917e03-c5e2-4421-aa84-aaad597cfd27 workitem acadb29a-ffe9-4ccf-91ac-a1108fc76ffd (ubuntu.1804.amd64.open.svc) executed on machine a001216\r\n+ export CORE_ROOT=/datadisks/disk1/work/AAF6099E/p\r\n+ export __TestEnv=/datadisks/disk1/work/AAF6099E/w/CF0E0AF5/u/SetStressModes_normal.sh\r\n+ export __TestTimeout=600000\r\n+ export __CollectDumps=1\r\n+ export __CrashDumpFolder=/home/helixbot/dotnetbuild/dumps\r\n+ cat /datadisks/disk1/work/AAF6099E/w/CF0E0AF5/u/SetStressModes_normal.sh\r\n#!/usr/bin/env bash\r\nexport COMPlus_DbgEnableMiniDump=1\r\nexport COMPlus_DbgMiniDumpName=$HELIX_DUMP_FOLDER/coredump.%d.dmp\r\nexport MONO_ENV_OPTIONS=--llvm\r\n+ export PATH=/datadisks/disk1/work/AAF6099E/p/dotnet-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\r\n+ export DOTNET_ROOT=/datadisks/disk1/work/AAF6099E/p/dotnet-cli\r\n+ export DOTNET_CLI_TELEMETRY_OPTOUT=1\r\n+ export DOTNET_CLI_HOME=/datadisks/disk1/work/AAF6099E/w/CF0E0AF5/e/.dotnet\r\n+ export NUGET_PACKAGES=/datadisks/disk1/work/AAF6099E/w/CF0E0AF5/e/.nuget\r\n+ dotnet /datadisks/disk1/work/AAF6099E/p/xunit/xunit.console.dll JIT/Directed/JIT.Directed.XUnitWrapper.dll -parallel collections -nocolor -noshadow -xml testResults.xml -trait TestGroup=JIT.Directed\r\nMicrosoft.DotNet.XUnitConsoleRunner v2.5.0 (64-bit .NET 6.0.0-rc.1.21430.1)\r\n  Discovering: JIT.Directed.XUnitWrapper (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  JIT.Directed.XUnitWrapper (found 131 test cases)\r\n  Starting:    JIT.Directed.XUnitWrapper (parallel test collections = on, max threads = 2)\r\n    JIT/Directed/Misc/function_pointer/MutualThdRecur-fptr/MutualThdRecur-fptr.sh [FAIL]\r\n      \r\n      Unhandled Exception:\r\n      System.NullReferenceException: Object reference not set to an instance of an object.\r\n         at \u003cModule\u003e.?Function1_1@@YAXH@Z(Int32 A_0)\r\n         at Thread_EA.Run()\r\n         at System.Threading.Thread.StartCallback()\r\n      \r\n      Unhandled Exception:\r\n      System.NullReferenceException: Object reference not set to an instance of an object.\r\n         at \u003cModule\u003e.?Function1_1@@YAXH@Z(Int32 A_0)\r\n         at Thread_EA.Run()\r\n         at System.Threading.Thread.StartCallback()\r\n      \r\n      Unhandled Exception:\r\n      System.NullReferenceException: Object reference not set to an instance of an object.\r\n         at \u003cModule\u003e.?Function1_1@@YAXH@Z(Int32 A_0)\r\n         at Thread_EA.Run()\r\n         at System.Threading.Thread.StartCallback()\r\n      [ERROR] FATAL UNHANDLED EXCEPTION: System.NullReferenceException: Object reference not set to an instance of an object.\r\n         at \u003cModule\u003e.?Function1_1@@YAXH@Z(Int32 A_0)\r\n         at Thread_EA.Run()\r\n         at System.Threading.Thread.StartCallback()\r\n      \r\n      Return code:      1\r\n      Raw output file:      /datadisks/disk1/work/AAF6099E/w/CF0E0AF5/uploads/Reports/JIT.Directed/Misc/function_pointer/MutualThdRecur-fptr/MutualThdRecur-fptr.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /datadisks/disk1/work/AAF6099E/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false MutualThdRecur-fptr.dll \u0027\u0027\r\n      test started\r\n      on thread finished\r\n      on thread finished\r\n      on thread finished\r\n      on thread finished\r\n      on thread finished\r\n      on thread finished\r\n      on thread finished\r\n      Expected: 100\r\n      Actual: 1\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/datadisks/disk1/work/AAF6099E/p\r\n      \u003e /datadisks/disk1/work/AAF6099E/w/CF0E0AF5/e/JIT/Directed/Misc/function_pointer/MutualThdRecur-fptr/MutualThdRecur-fptr.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at JIT_Directed._Misc_function_pointer_MutualThdRecur_fptr_MutualThdRecur_fptr_._Misc_function_pointer_MutualThdRecur_fptr_MutualThdRecur_fptr_sh()\r\n      Output:\r\n        \r\n        Unhandled Exception:\r\n        System.NullReferenceException: Object reference not set to an instance of an object.\r\n           at \u003cModule\u003e.?Function1_1@@YAXH@Z(Int32 A_0)\r\n           at Thread_EA.Run()\r\n           at System.Threading.Thread.StartCallback()\r\n        \r\n        Unhandled Exception:\r\n        System.NullReferenceException: Object reference not set to an instance of an object.\r\n           at \u003cModule\u003e.?Function1_1@@YAXH@Z(Int32 A_0)\r\n           at Thread_EA.Run()\r\n           at System.Threading.Thread.StartCallback()\r\n        \r\n        Unhandled Exception:\r\n        System.NullReferenceException: Object reference not set to an instance of an object.\r\n           at \u003cModule\u003e.?Function1_1@@YAXH@Z(Int32 A_0)\r\n           at Thread_EA.Run()\r\n           at System.Threading.Thread.StartCallback()\r\n        [ERROR] FATAL UNHANDLED EXCEPTION: System.NullReferenceException: Object reference not set to an instance of an object.\r\n           at \u003cModule\u003e.?Function1_1@@YAXH@Z(Int32 A_0)\r\n           at Thread_EA.Run()\r\n           at System.Threading.Thread.StartCallback()\r\n        \r\n        Return code:      1\r\n        Raw output file:      /datadisks/disk1/work/AAF6099E/w/CF0E0AF5/uploads/Reports/JIT.Directed/Misc/function_pointer/MutualThdRecur-fptr/MutualThdRecur-fptr.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /datadisks/disk1/work/AAF6099E/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false MutualThdRecur-fptr.dll \u0027\u0027\r\n        test started\r\n        on thread finished\r\n        on thread finished\r\n        on thread finished\r\n        on thread finished\r\n        on thread finished\r\n        on thread finished\r\n        on thread finished\r\n        Expected: 100\r\n        Actual: 1\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/datadisks/disk1/work/AAF6099E/p\r\n        \u003e /datadisks/disk1/work/AAF6099E/w/CF0E0AF5/e/JIT/Directed/Misc/function_pointer/MutualThdRecur-fptr/MutualThdRecur-fptr.sh\r\n  Finished:    JIT.Directed.XUnitWrapper\r\n=== TEST EXECUTION SUMMARY ===\r\n   JIT.Directed.XUnitWrapper  Total: 131, Errors: 0, Failed: 1, Skipped: 0, Time: 248.631s\r\n```\r\nhttps://github.com/dotnet/runtime/pull/59194",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONwfzwQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc428Sd4",
                                           "createdAt":  "2021-09-17T12:54:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\n```\r\nConsole log: \u0027JIT.Directed\u0027 from job e1917e03-c5e2-4421-aa84-aaad597cfd27 workitem acadb29a-ffe9-4ccf-91ac-a1108fc76ffd (ubuntu.1804.amd64.open.svc) executed on machine a001216\r\n+ export CORE_ROOT=/datadisks/disk1/work/AAF6099E/p\r\n+ export __TestEnv=/datadisks/disk1/work/AAF6099E/w/CF0E0AF5/u/SetStressModes_normal.sh\r\n+ export __TestTimeout=600000\r\n+ export __CollectDumps=1\r\n+ export __CrashDumpFolder=/home/helixbot/dotnetbuild/dumps\r\n+ cat /datadisks/disk1/work/AAF6099E/w/CF0E0AF5/u/SetStressModes_normal.sh\r\n#!/usr/bin/env bash\r\nexport COMPlus_DbgEnableMiniDump=1\r\nexport COMPlus_DbgMiniDumpName=$HELIX_DUMP_FOLDER/coredump.%d.dmp\r\nexport MONO_ENV_OPTIONS=--llvm\r\n+ export PATH=/datadisks/disk1/work/AAF6099E/p/dotnet-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\r\n+ export DOTNET_ROOT=/datadisks/disk1/work/AAF6099E/p/dotnet-cli\r\n+ export DOTNET_CLI_TELEMETRY_OPTOUT=1\r\n+ export DOTNET_CLI_HOME=/datadisks/disk1/work/AAF6099E/w/CF0E0AF5/e/.dotnet\r\n+ export NUGET_PACKAGES=/datadisks/disk1/work/AAF6099E/w/CF0E0AF5/e/.nuget\r\n+ dotnet /datadisks/disk1/work/AAF6099E/p/xunit/xunit.console.dll JIT/Directed/JIT.Directed.XUnitWrapper.dll -parallel collections -nocolor -noshadow -xml testResults.xml -trait TestGroup=JIT.Directed\r\nMicrosoft.DotNet.XUnitConsoleRunner v2.5.0 (64-bit .NET 6.0.0-rc.1.21430.1)\r\n  Discovering: JIT.Directed.XUnitWrapper (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  JIT.Directed.XUnitWrapper (found 131 test cases)\r\n  Starting:    JIT.Directed.XUnitWrapper (parallel test collections = on, max threads = 2)\r\n    JIT/Directed/Misc/function_pointer/MutualThdRecur-fptr/MutualThdRecur-fptr.sh [FAIL]\r\n      \r\n      Unhandled Exception:\r\n      System.NullReferenceException: Object reference not set to an instance of an object.\r\n         at \u003cModule\u003e.?Function1_1@@YAXH@Z(Int32 A_0)\r\n         at Thread_EA.Run()\r\n         at System.Threading.Thread.StartCallback()\r\n      \r\n      Unhandled Exception:\r\n      System.NullReferenceException: Object reference not set to an instance of an object.\r\n         at \u003cModule\u003e.?Function1_1@@YAXH@Z(Int32 A_0)\r\n         at Thread_EA.Run()\r\n         at System.Threading.Thread.StartCallback()\r\n      \r\n      Unhandled Exception:\r\n      System.NullReferenceException: Object reference not set to an instance of an object.\r\n         at \u003cModule\u003e.?Function1_1@@YAXH@Z(Int32 A_0)\r\n         at Thread_EA.Run()\r\n         at System.Threading.Thread.StartCallback()\r\n      [ERROR] FATAL UNHANDLED EXCEPTION: System.NullReferenceException: Object reference not set to an instance of an object.\r\n         at \u003cModule\u003e.?Function1_1@@YAXH@Z(Int32 A_0)\r\n         at Thread_EA.Run()\r\n         at System.Threading.Thread.StartCallback()\r\n      \r\n      Return code:      1\r\n      Raw output file:      /datadisks/disk1/work/AAF6099E/w/CF0E0AF5/uploads/Reports/JIT.Directed/Misc/function_pointer/MutualThdRecur-fptr/MutualThdRecur-fptr.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /datadisks/disk1/work/AAF6099E/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false MutualThdRecur-fptr.dll \u0027\u0027\r\n      test started\r\n      on thread finished\r\n      on thread finished\r\n      on thread finished\r\n      on thread finished\r\n      on thread finished\r\n      on thread finished\r\n      on thread finished\r\n      Expected: 100\r\n      Actual: 1\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/datadisks/disk1/work/AAF6099E/p\r\n      \u003e /datadisks/disk1/work/AAF6099E/w/CF0E0AF5/e/JIT/Directed/Misc/function_pointer/MutualThdRecur-fptr/MutualThdRecur-fptr.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at JIT_Directed._Misc_function_pointer_MutualThdRecur_fptr_MutualThdRecur_fptr_._Misc_function_pointer_MutualThdRecur_fptr_MutualThdRecur_fptr_sh()\r\n      Output:\r\n        \r\n        Unhandled Exception:\r\n        System.NullReferenceException: Object reference not set to an instance of an object.\r\n           at \u003cModule\u003e.?Function1_1@@YAXH@Z(Int32 A_0)\r\n           at Thread_EA.Run()\r\n           at System.Threading.Thread.StartCallback()\r\n        \r\n        Unhandled Exception:\r\n        System.NullReferenceException: Object reference not set to an instance of an object.\r\n           at \u003cModule\u003e.?Function1_1@@YAXH@Z(Int32 A_0)\r\n           at Thread_EA.Run()\r\n           at System.Threading.Thread.StartCallback()\r\n        \r\n        Unhandled Exception:\r\n        System.NullReferenceException: Object reference not set to an instance of an object.\r\n           at \u003cModule\u003e.?Function1_1@@YAXH@Z(Int32 A_0)\r\n           at Thread_EA.Run()\r\n           at System.Threading.Thread.StartCallback()\r\n        [ERROR] FATAL UNHANDLED EXCEPTION: System.NullReferenceException: Object reference not set to an instance of an object.\r\n           at \u003cModule\u003e.?Function1_1@@YAXH@Z(Int32 A_0)\r\n           at Thread_EA.Run()\r\n           at System.Threading.Thread.StartCallback()\r\n        \r\n        Return code:      1\r\n        Raw output file:      /datadisks/disk1/work/AAF6099E/w/CF0E0AF5/uploads/Reports/JIT.Directed/Misc/function_pointer/MutualThdRecur-fptr/MutualThdRecur-fptr.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /datadisks/disk1/work/AAF6099E/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false MutualThdRecur-fptr.dll \u0027\u0027\r\n        test started\r\n        on thread finished\r\n        on thread finished\r\n        on thread finished\r\n        on thread finished\r\n        on thread finished\r\n        on thread finished\r\n        on thread finished\r\n        Expected: 100\r\n        Actual: 1\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/datadisks/disk1/work/AAF6099E/p\r\n        \u003e /datadisks/disk1/work/AAF6099E/w/CF0E0AF5/e/JIT/Directed/Misc/function_pointer/MutualThdRecur-fptr/MutualThdRecur-fptr.sh\r\n  Finished:    JIT.Directed.XUnitWrapper\r\n=== TEST EXECUTION SUMMARY ===\r\n   JIT.Directed.XUnitWrapper  Total: 131, Errors: 0, Failed: 1, Skipped: 0, Time: 248.631s\r\n```\r\nhttps://github.com/dotnet/runtime/pull/59194\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edanmoseley\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CodeGen-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-17T12:54:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc428WxI",
                                           "createdAt":  "2021-09-17T13:19:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "cc @BruceForstall PTAL. It is multithreading related issue.",
                                           "updatedAt":  "2021-09-17T13:19:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42832U",
                                           "createdAt":  "2021-09-17T16:28:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "This is a Mono failure, not a RyuJIT failure.\r\n\r\nLog file for the failure: https://dev.azure.com/dnceng/public/_build/results?buildId=1367894\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=39931020\u0026resultId=101135\u0026paneView=debug\r\n\r\n",
                                           "updatedAt":  "2021-09-17T16:28:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Bl13",
                                           "createdAt":  "2021-09-20T18:15:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "cc @vargaz @lambdageek - not certain what this is about - any ideas ?",
                                           "updatedAt":  "2021-09-20T18:15:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43B_PB",
                                           "createdAt":  "2021-09-20T20:22:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "(Aside: the wacky method names are not a bug - that\u0027s what they\u0027re called in the .il file)\r\n\r\nThe code is doing a `ldftn` and then passing the managed function pointer to a \"Dispatch\" function that does `ldarg` and then a `calli`.  The thing that\u0027s a little bit unexpected is that it\u0027s an `ldftn` of a static method but the callsite says `method explicit instance` for the function pointer.  @vargaz Does this seem problematic?\r\n\r\n\r\nThe code is like this:\r\n\r\n```\r\n  .method public static void Dispatch(method explicit instance void *(int32), int32)\r\n  {\r\n    .maxstack  8\r\n    ldarg 1\r\n    ldarg 0\r\n    calli void (int32)\r\n    ret\r\n  }\r\n```\r\n\r\nIn `Run`:\r\n\r\n```\r\n              ldftn      void ?Function1_1@@YAXH@Z(int32)\r\n    IL_0006:  ldloc.0\r\n    IL_0007:  ldc.i4     0x1\r\n    IL_000c:  add\r\n     call       void Thread_EA::Dispatch(method explicit instance void *(int32), int32)\r\n```\r\n\r\nThe `?Function1_1@@YAXH@Z` method:\r\n\r\n```\r\n.method public static void ?Function1_1@@YAXH@Z(int32 A_0) il managed\r\n{\r\n```\r\n",
                                           "updatedAt":  "2021-09-20T20:22:48Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "MutualThdRecur-fptr.sh failed with NullReferenceException on Ubuntu ",
        "labels":  [
                       "area-Codegen-meta-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60068",
        "createdAt":  "2021-10-06T14:45:54Z",
        "number":  60068,
        "author":  "imhameed",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-09T15:33:23Z",
        "body":  "In particular this should work for FFI calls, so we should respect the target platform\u0027s common calling convention(s).\r\n\r\nAn similar example is 128-bit vectors for amd64.\r\n\r\nHandles input arguments:\r\n- [x] LLVM\r\n  - [x] Arm64\r\n  - [x] Amd64\r\n- [ ] mini\r\n  - [x] Arm64\r\n  - [ ] Amd64\r\n- [ ] interpreter\r\n\r\nHandles return argument:\r\n- [ ] LLVM\r\n  - [ ] Arm64\r\n  - [ ] Amd64\r\n- [ ] mini\r\n  - [ ] Arm64\r\n  - [ ] Amd64\r\n- [ ] interpreter",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOc1tOPg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc430LqM",
                                           "createdAt":  "2021-10-06T14:52:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Would allow us to run these tests https://github.com/dotnet/runtime/tree/main/src/tests/Interop/PInvoke/Generics and implement mono/mono#17868\r\n\r\nA related issue #9578 is tracking the CoreCLR work to unblock passing Vector128\u003cT\u003e/Vector256\u003cT\u003e by value to P/Invokes. It\u0027s currently blocked (with a bad error message about the types not being blittable) due to CoreCLR incorrectly marshalling vector return values on Windows x64.\r\n\r\nA related issue is for CoreCLR to implement support for `__vectorcall` on Windows https://github.com/dotnet/runtime/issues/8300",
                                           "updatedAt":  "2021-10-06T14:52:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc430NGi",
                                           "createdAt":  "2021-10-06T14:54:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "A specific use-case is to be able to call Apple platform APIs that have some arguments that have types with a `__ext_vector_type` attribute.  (see the Mono issue linked above)",
                                           "updatedAt":  "2021-10-06T14:54:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc430OSl",
                                           "createdAt":  "2021-10-06T14:55:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "We would need this across the board: LLVM, mini and interp should support it.",
                                           "updatedAt":  "2021-10-06T14:55:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Bz1i1",
                                           "createdAt":  "2022-04-20T16:02:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "When using LLVM as codegen backend, LLVM is able to does the work of sending the data to SIMD register before the operation. Here is an example from x64\r\n\r\nc# code\r\n```\r\nusing System;\r\nusing System.Runtime.Intrinsics;\r\nusing System.Runtime.Intrinsics.Arm;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Numerics;\r\n\r\nnamespace HelloWorld\r\n{\r\n    internal class Program\r\n    {\r\n        [MethodImpl(MethodImplOptions.NoInlining)]\r\n        private static Vector128\u003cint\u003e test(Vector128\u003cint\u003e a, Vector128\u003cint\u003e b, Vector128\u003cint\u003e c)\r\n        {\r\n            return Vector128.Min(a,b);\r\n        }\r\n\r\n        private static void Main(string[] args)\r\n        {\r\n            Vector128\u003cint\u003e A = Vector128.Create((int)3.1);\r\n            Vector128\u003cint\u003e B = Vector128.Create((int)5.7);\r\n            Vector128\u003cint\u003e C = Vector128.Create((int)50);\r\n\r\n            var result = test(A, B, C);\r\n            Console.WriteLine(result);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWhen LLVM is enabled:\r\n```\r\n*** ASM for HelloWorld.Program:test (System.Runtime.Intrinsics.Vector128`1\u003cint\u003e,System.Runtime.Intrinsics.Vector128`1\u003cint\u003e,System.Runtime.Intrinsics.Vector128`1\u003cint\u003e) ***\r\n/var/folders/9q/30znkg553fb1vt7_qnx2v0040000gn/T/.44S0Ml:\r\n(__TEXT,__text) section\r\nloWorld_Program_test__System_Runtime_Intrinsics_Vector128_1_int__System_Runtime_Intrinsics_Vector128_1_int__System_Runtime_Intrinsics_Vector128_1_int__:\r\n0000000000000000\tvmovq\t%rdx, %xmm0\r\n0000000000000005\tvmovq\t%rsi, %xmm1\r\n000000000000000a\tvpunpcklqdq\t%xmm0, %xmm1, %xmm0\r\n000000000000000e\tvmovq\t%r8, %xmm1\r\n0000000000000013\tvmovq\t%rcx, %xmm2\r\n0000000000000018\tvpunpcklqdq\t%xmm1, %xmm2, %xmm1\r\n000000000000001c\tvpminsd\t%xmm1, %xmm0, %xmm0\r\n0000000000000021\tvmovdqu\t%xmm0, (%rdi)\r\n0000000000000025\tretq\r\n```\r\n\r\nThus, this work actually only apply to mini and interp.",
                                           "updatedAt":  "2022-05-25T19:59:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B4yW9",
                                           "createdAt":  "2022-04-21T15:50:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "@fanyang-mono \r\nIn your example see how the arguments are actually passed in `%rdx` and `%rsi` and then moved into `%xmm0` and `%xmm1`:\r\n```\r\n0000000000000000\tvmovq\t%rdx, %xmm0\r\n0000000000000005\tvmovq\t%rsi, %xmm1\r\n```\r\n\r\nWhat this issue is about is two things:\r\n1. making managed-to-managed calls utilize a calling convention where those `Vector128\u003cint\u003e` arguments oculd be passed in SIMD registers directly (so those movs aren\u0027t needed - the arguments would already be in `%xmm0` and `%xmm1).\r\n2. The same thing but for PInvokes (ie managed calling unmanaged).  Which is also what https://github.com/mono/mono/issues/17868 is about.\r\n\r\nThese two problems could be tackled separately: we could just do the managed-to-managed calls first.  But we would still need to do something for LLVM (as your example shows)",
                                           "updatedAt":  "2022-04-21T15:50:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B4ymb",
                                           "createdAt":  "2022-04-21T15:51:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "Gotcha!",
                                           "updatedAt":  "2022-04-21T15:51:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HrtqT",
                                           "createdAt":  "2022-08-02T14:03:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "Nice to have, moving to 8.0.0",
                                           "updatedAt":  "2022-08-02T14:03:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hUOp0",
                                           "createdAt":  "2023-07-12T14:54:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "This is a tracking issue. Moving it to .NET9.",
                                           "updatedAt":  "2023-07-12T14:54:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zW04-",
                                           "createdAt":  "2024-02-09T05:37:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "cc @steveisok @vargaz ",
                                           "updatedAt":  "2024-02-09T05:37:39Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[mono] Pass Vector64, Vector128, and Vector256 in SIMD registers whenever possible",
        "labels":  [
                       "area-Codegen-meta-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63746",
        "createdAt":  "2022-01-13T16:06:08Z",
        "number":  63746,
        "author":  "MaximLipnin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-08T04:43:21Z",
        "body":  "\r\n```\r\n\u003ctest name=\"System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests.Vector128NIntSumTest\" type=\"System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests\" method=\"Vector128NIntSumTest\" time=\"0.0060218\" result=\"Fail\"\u003e\r\n    \u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n        \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure\\nExpected: 2\\nActual:   40452]]\u003e\u003c/message\u003e\r\n        \u003cstack-trace\u003e\u003c![CDATA[   at System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests.Vector128NIntSumTest()\r\n    at System.Reflection.RuntimeMethodInfo.InvokeWorker(Object obj, BindingFlags invokeAttr, Span`1 parameters)]]\u003e\u003c/stack-trace\u003e\r\n    \u003c/failure\u003e\r\n\u003c/test\u003e\r\n\u003ctest name=\"System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests.Vector128NUIntSumTest\" type=\"System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests\" method=\"Vector128NUIntSumTest\" time=\"0.0017315\" result=\"Fail\"\u003e\r\n    \u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n        \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure\\nExpected: 2\\nActual:   40452]]\u003e\u003c/message\u003e\r\n        \u003cstack-trace\u003e\u003c![CDATA[   at System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests.Vector128NUIntSumTest()\r\n    at System.Reflection.RuntimeMethodInfo.InvokeWorker(Object obj, BindingFlags invokeAttr, Span`1 parameters)]]\u003e\u003c/stack-trace\u003e\r\n    \u003c/failure\u003e\r\n\u003c/test\u003e\r\n```\r\n\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=1550469\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=43767104\u0026resultId=112398\u0026paneView=dotnet-dnceng.dnceng-anon-build-release-tasks.helix-anon-test-information-tab\r\n\r\n@steveisok @akoeplinger ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPG2TAQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48ViPt",
                                           "createdAt":  "2022-01-13T16:06:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime-intrinsics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\n```\r\n\u003ctest name=\"System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests.Vector128NIntSumTest\" type=\"System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests\" method=\"Vector128NIntSumTest\" time=\"0.0060218\" result=\"Fail\"\u003e\r\n    \u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n        \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure\\nExpected: 2\\nActual:   40452]]\u003e\u003c/message\u003e\r\n        \u003cstack-trace\u003e\u003c![CDATA[   at System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests.Vector128NIntSumTest()\r\n    at System.Reflection.RuntimeMethodInfo.InvokeWorker(Object obj, BindingFlags invokeAttr, Span`1 parameters)]]\u003e\u003c/stack-trace\u003e\r\n    \u003c/failure\u003e\r\n\u003c/test\u003e\r\n\u003ctest name=\"System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests.Vector128NUIntSumTest\" type=\"System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests\" method=\"Vector128NUIntSumTest\" time=\"0.0017315\" result=\"Fail\"\u003e\r\n    \u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n        \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure\\nExpected: 2\\nActual:   40452]]\u003e\u003c/message\u003e\r\n        \u003cstack-trace\u003e\u003c![CDATA[   at System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests.Vector128NUIntSumTest()\r\n    at System.Reflection.RuntimeMethodInfo.InvokeWorker(Object obj, BindingFlags invokeAttr, Span`1 parameters)]]\u003e\u003c/stack-trace\u003e\r\n    \u003c/failure\u003e\r\n\u003c/test\u003e\r\n```\r\n\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=1550469\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=43767104\u0026resultId=112398\u0026paneView=dotnet-dnceng.dnceng-anon-build-release-tasks.helix-anon-test-information-tab\r\n\r\n@steveisok @akoeplinger \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMaximLipnin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime.Intrinsics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-13T16:06:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48ViVn",
                                           "createdAt":  "2022-01-13T16:06:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-tvos\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\n```\r\n\u003ctest name=\"System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests.Vector128NIntSumTest\" type=\"System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests\" method=\"Vector128NIntSumTest\" time=\"0.0060218\" result=\"Fail\"\u003e\r\n    \u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n        \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure\\nExpected: 2\\nActual:   40452]]\u003e\u003c/message\u003e\r\n        \u003cstack-trace\u003e\u003c![CDATA[   at System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests.Vector128NIntSumTest()\r\n    at System.Reflection.RuntimeMethodInfo.InvokeWorker(Object obj, BindingFlags invokeAttr, Span`1 parameters)]]\u003e\u003c/stack-trace\u003e\r\n    \u003c/failure\u003e\r\n\u003c/test\u003e\r\n\u003ctest name=\"System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests.Vector128NUIntSumTest\" type=\"System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests\" method=\"Vector128NUIntSumTest\" time=\"0.0017315\" result=\"Fail\"\u003e\r\n    \u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n        \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure\\nExpected: 2\\nActual:   40452]]\u003e\u003c/message\u003e\r\n        \u003cstack-trace\u003e\u003c![CDATA[   at System.Runtime.Intrinsics.Tests.Vectors.Vector128Tests.Vector128NUIntSumTest()\r\n    at System.Reflection.RuntimeMethodInfo.InvokeWorker(Object obj, BindingFlags invokeAttr, Span`1 parameters)]]\u003e\u003c/stack-trace\u003e\r\n    \u003c/failure\u003e\r\n\u003c/test\u003e\r\n```\r\n\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=1550469\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=43767104\u0026resultId=112398\u0026paneView=dotnet-dnceng.dnceng-anon-build-release-tasks.helix-anon-test-information-tab\r\n\r\n@steveisok @akoeplinger \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMaximLipnin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime.Intrinsics`, `untriaged`, `os-tvos`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-13T16:06:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48VjCo",
                                           "createdAt":  "2022-01-13T16:09:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@tannergooding ",
                                           "updatedAt":  "2022-01-13T16:09:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48VquR",
                                           "createdAt":  "2022-01-13T16:44:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "fyi - tvOS arm64 is our device run.",
                                           "updatedAt":  "2022-01-13T16:44:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Vru8",
                                           "createdAt":  "2022-01-13T16:48:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "@vargaz do you think this is going to work as expected at all on the device?",
                                           "updatedAt":  "2022-01-13T16:48:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Vsid",
                                           "createdAt":  "2022-01-13T16:52:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I\u0027m curious about the expected VectorNN story on devices and WASM as well.",
                                           "updatedAt":  "2022-01-13T16:52:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48VtiG",
                                           "createdAt":  "2022-01-13T16:57:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "imhameed",
                                           "body":  "\u003e @vargaz do you think this is going to work as expected at all on the device?\r\n\r\n\u003e I\u0027m curious about the expected VectorNN story on devices\r\n\r\nNEON is a part of ARMv8-A so Vector64/Vector128 should be fully supported on arm64 tvOS devices. These tests all passed on arm64 Linux hardware on CI, when the LLVM AOT and LLVM FullAOT lanes were still enabled per-PR. Additionally they passed when I ran them by hand last year on an arm64 Linux machine and on an arm64 Linux VM running on an M1 mac. I have an Apple TV device on hand so I can look into this.\r\n\r\nNo idea about Wasm though.\r\n\r\n",
                                           "updatedAt":  "2022-01-13T16:57:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48VypT",
                                           "createdAt":  "2022-01-13T17:21:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCJ0hKA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "imhameed",
                                                                               "createdAt":  "2022-01-13T17:29:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e NEON is a part of ARMv8-A so Vector64/Vector128 should be fully supported on arm64 tvOS devices\r\n\r\nJust noting that these APIs in particular are new and have software fallbacks. They won\u0027t be accelerated on Mono yet and so the software fallback is what\u0027s likely failing here.\r\n\r\nThe software fallback is: https://source.dot.net/#System.Private.CoreLib/Vector128.cs,f8444b31977d1b83:\r\n```csharp\r\n[Intrinsic]\r\npublic static T Sum\u003cT\u003e(Vector128\u003cT\u003e vector)\r\n    where T : struct\r\n{\r\n    T sum = default;\r\n\r\n    for (int index = 0; index \u003c Vector128\u003cT\u003e.Count; index++)\r\n    {\r\n        sum = Scalar\u003cT\u003e.Add(sum, vector.GetElementUnsafe(index));\r\n    }\r\n\r\n    return sum;\r\n}\r\n```\r\n\r\nThe `Scalar\u003cT\u003e.Add` method is ultimately going to be doing:\r\n```csharp\r\n// ...\r\nelse if (typeof(T) == typeof(nint))\r\n{\r\n    return (T)(object)((nint)(object)left + (nint)(object)right);\r\n}\r\nelse if (typeof(T) == typeof(nuint))\r\n{\r\n    return (T)(object)((nuint)(object)left + (nuint)(object)right);\r\n}\r\n// ...\r\n```\r\n\r\nAnd `GetElementUnsafe` is doing:\r\n```csharp\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\ninternal static T GetElementUnsafe\u003cT\u003e(in this Vector128\u003cT\u003e vector, int index)\r\n    where T : struct\r\n{\r\n    Debug.Assert((index \u003e= 0) \u0026\u0026 (index \u003c Vector128\u003cT\u003e.Count));\r\n    return Unsafe.Add(ref Unsafe.As\u003cVector128\u003cT\u003e, T\u003e(ref Unsafe.AsRef(in vector)), index);\r\n}\r\n```\r\n\r\nAlso noting however that this is the \"safe\" fallback implementation used by `Vector\u003cT\u003e` which has been running and passing for several months now.",
                                           "updatedAt":  "2022-01-13T17:21:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48bZMB",
                                           "createdAt":  "2022-01-16T05:26:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "There is another set of test failures on tvos which appears related:\r\nhttps://github.com/dotnet/runtime/issues/61920",
                                           "updatedAt":  "2022-01-16T05:26:12Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[tvOS][arm64] Vector128Tests.Vector128NIntSumTest/Vector128NUIntSumTest failed on the rolling build",
        "labels":  [
                       "area-Codegen-meta-mono",
                       "os-tvos"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65695",
        "createdAt":  "2022-02-22T09:53:19Z",
        "number":  65695,
        "author":  "lateralusX",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-05T14:49:02Z",
        "body":  "### Description\r\n\r\nMono runtime currently fails to execute the following CoreCLR runtime tests:\r\n\r\nInterop/StructMarshalling/ReversePInvoke/MarshalExpStruct/DelegatePInvoke/DelegatePInvokeTest\r\nInterop/StructMarshalling/ReversePInvoke/MarshalExpStruct/ReversePInvokeManaged/ReversePInvokeTest\r\n\r\nThese tests fails since Mono marshals structs using explicit layout as blitable types, meaning no marshaling is done if struct includes types that needs specific marshaling logic, like strings.\r\n\r\nThese tests have been marked as not supported on none Windows platforms have not been previously run on Mono. Issue detected when enabling CoreCLR runtime tests running on Mono Windows, https://github.com/dotnet/runtime/pull/64281. As part of that PR, the tests have been disabled on Mono and marked with this issue for future tracking.\r\n\r\n### Reproduction Steps\r\n\r\nBuild and run individual runtime tests on Windows Mono as described here, https://github.com/dotnet/runtime/blob/main/docs/workflow/testing/mono/testing.md\r\n\r\n### Expected behavior\r\n\r\nFollowing tests should pass:\r\n\r\nInterop/StructMarshalling/ReversePInvoke/MarshalExpStruct/DelegatePInvoke/DelegatePInvokeTest\r\nInterop/StructMarshalling/ReversePInvoke/MarshalExpStruct/ReversePInvokeManaged/ReversePInvokeTest\r\n\r\n### Actual behavior\r\n\r\nFollowing tests fails and have been disabled due to this issue:\r\n\r\nInterop/StructMarshalling/ReversePInvoke/MarshalExpStruct/DelegatePInvoke/DelegatePInvokeTest\r\nInterop/StructMarshalling/ReversePInvoke/MarshalExpStruct/ReversePInvokeManaged/ReversePInvokeTest\r\n\r\n### Regression?\r\n\r\nNo, this has never worked on Mono.\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[Mono]: Marshaling structs using explicit layout including strings not supported on Mono.",
        "labels":  [
                       "area-Codegen-meta-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65698",
        "createdAt":  "2022-02-22T10:25:27Z",
        "number":  65698,
        "author":  "lateralusX",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-18T09:29:29Z",
        "body":  "### Description\r\n\r\nMono runtime currently fails to execute the following CoreCLR runtime tests:\r\n\r\nInterop/StringMarshalling/VBByRefStr/VBByRefStrTest\r\n\r\nThe test fails since Mono marshaler won\u0027t handle MarshalAs(UnmanagedType.VBByRefStr) as Unicode when used in a DllImport together with CharSet = CharSet.Unicode, Mono always handles MarshalAs(UnmanagedType.VBByRefStr) as a LPSTR.\r\n\r\nThese tests have been marked as not supported on none Windows platforms have not been previously run on Mono. Issue detected when enabling CoreCLR runtime tests running on Mono Windows, https://github.com/dotnet/runtime/pull/64281. As part of that PR, the tests have been disabled on Mono and marked with this issue for future tracking.\r\n\r\n### Reproduction Steps\r\n\r\nBuild and run individual runtime test on Windows Mono as described here, https://github.com/dotnet/runtime/blob/main/docs/workflow/testing/mono/testing.md\r\n\r\n### Expected behavior\r\n\r\nFollowing tests should pass:\r\n\r\nInterop/StringMarshalling/VBByRefStr/VBByRefStrTest\r\n\r\n### Actual behavior\r\n\r\nFollowing tests fails and have been disabled due to this issue:\r\n\r\nInterop/StringMarshalling/VBByRefStr/VBByRefStrTest\r\n\r\n### Regression?\r\n\r\nNo, this has never worked on Mono.\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[Mono]: DllImport using MarshalAs(UnmanagedType.VBByRefStr) and CharSet = CharSet.Unicode not supported on Mono.",
        "labels":  [
                       "area-Codegen-meta-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66392",
        "createdAt":  "2022-03-09T14:18:39Z",
        "number":  66392,
        "author":  "fanyang-mono",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-09T15:32:32Z",
        "body":  "### `System.Numerics.Vector`:\r\n- IsHardwareAccelerated\r\n   - [x] amd64\r\n- Abs\r\n   - [ ] amd64\r\n- Add\r\n   - [ ] amd64\r\n- AndNot\r\n   - [ ] amd64\r\n- As\r\n   - [ ] amd64\r\n- AsVectorByte\r\n   - [ ] amd64\r\n- AsVectorDouble\r\n   - [ ] amd64\r\n- AsVectorInt16\r\n   - [ ] amd64\r\n- AsVectorInt32\r\n   - [ ] amd64\r\n- AsVectorInt64\r\n   - [ ] amd64\r\n- AsVectorNInt\r\n   - [ ] amd64\r\n- AsVectorNUInt\r\n   - [ ] amd64\r\n- AsVectorSByte\r\n   - [ ] amd64\r\n- AsVectorSingle\r\n   - [ ] amd64\r\n- AsVectorUInt16\r\n   - [ ] amd64\r\n- AsVectorUInt32\r\n   - [ ] amd64\r\n- AsVectorUInt64\r\n   - [ ] amd64\r\n- BitwiseAnd\r\n   - [ ] amd64\r\n- BitwiseOr\r\n   - [ ] amd64\r\n- Ceiling\r\n   - [ ] amd64\r\n- ConditionalSelect\r\n   - [ ] amd64\r\n- ConvertToDouble\r\n   - [ ] amd64\r\n- ConvertToInt32\r\n   - [x] amd64\r\n- ConvertToInt64\r\n   - [ ] amd64\r\n- ConvertToSingle\r\n   - [x] amd64\r\n- ConvertToUInt32\r\n   - [ ] amd64\r\n- ConvertToUInt64\r\n   - [ ] amd64\r\n- Divide\r\n   - [ ] amd64\r\n- Dot\r\n   - [ ] amd64\r\n- Equals\r\n   - [ ] amd64\r\n- EqualsAll\r\n   - [ ] amd64\r\n- EqualsAny\r\n   - [ ] amd64\r\n- Floor\r\n   - [ ] amd64\r\n- GreaterThan\r\n   - [ ] amd64\r\n- GreaterThanAll\r\n   - [ ] amd64\r\n- GreaterThanAny\r\n   - [ ] amd64\r\n- GreaterThanOrEqual\r\n   - [ ] amd64\r\n- GreaterThanOrEqualAll\r\n   - [ ] amd64\r\n- GreaterThanOrEqualAny\r\n   - [ ] amd64\r\n- LessThan\r\n   - [ ] amd64\r\n- LessThanAll\r\n   - [ ] amd64\r\n- LessThanAny\r\n   - [ ] amd64\r\n- LessThanOrEqual\r\n   - [ ] amd64\r\n- LessThanOrEqualAll\r\n   - [ ] amd64\r\n- LessThanOrEqualAny\r\n   - [ ] amd64\r\n- Max\r\n   - [ ] amd64\r\n- Min\r\n   - [ ] amd64\r\n- Multiply\r\n   - [ ] amd64\r\n- Narrow\r\n   - [ ] amd64\r\n- Negate\r\n   - [ ] amd64\r\n- OnesComplement\r\n   - [ ] amd64\r\n- SquareRoot\r\n   - [ ] amd64\r\n- Subtract\r\n   - [ ] amd64\r\n- Sum\r\n   - [ ] amd64\r\n- Widen\r\n   - [ ] amd64\r\n- Xor\r\n   - [ ] amd64\r\n\r\n### `System.Numerics.Vector\u003cT\u003e`:\r\n- Operator `+` (one operand)\r\n   - [ ] amd64\r\n- Operator `-` (one operand)\r\n   - [ ] amd64\r\n- Operator `~`\r\n   - [ ] amd64\r\n- Operator `+`\r\n   - [x] amd64\r\n- Operator `-`\r\n   - [x] amd64\r\n- Operator `*`\r\n   - [x] amd64\r\n- Operator `/`\r\n   - [x] amd64\r\n- Operator `==`\r\n   - [x] amd64\r\n- Operator `!=`\r\n   - [x] amd64\r\n- Operator `\u0026`\r\n   - [x] amd64\r\n- Operator `|`\r\n   - [x] amd64\r\n- Operator `^`\r\n   - [x] amd64\r\n\r\n### `System.Runtime.Intrinsics.Vector128`:\r\n- IsHardwareAccelerated\r\n   - [x] amd64\r\n- Abs\r\n   - [x] amd64\r\n- Add\r\n   - [x] amd64\r\n- AndNot\r\n   - [x] amd64\r\n- BitwiseAnd\r\n   - [x] amd64\r\n- BitwiseOr\r\n   - [x] amd64\r\n- Ceiling\r\n   - [x] amd64\r\n- ConditionalSelect\r\n   - [x] amd64\r\n- ConvertToDouble\r\n   - [x] amd64\r\n- ConvertToInt32\r\n   - [x] amd64\r\n- ConvertToInt64\r\n   - [x] amd64\r\n- ConvertToSingle\r\n   - [x] amd64\r\n- ConvertToUInt32\r\n   - [x] amd64\r\n- ConvertToUInt64\r\n   - [x] amd64\r\n- Divide\r\n   - [x] amd64\r\n- Dot\r\n   - [x] amd64\r\n- Equals\r\n   - [x] amd64\r\n- EqualsAll\r\n   - [x] amd64\r\n- EqualsAny\r\n   - [x] amd64\r\n- Floor\r\n   - [x] amd64\r\n- GreaterThan\r\n   - [x] amd64\r\n- GreaterThanAll\r\n   - [x] amd64\r\n- GreaterThanAny\r\n   - [x] amd64\r\n- GreaterThanOrEqual\r\n   - [x] amd64\r\n- GreaterThanOrEqualAll\r\n   - [x] amd64\r\n- GreaterThanOrEqualAny\r\n   - [x] amd64\r\n- LessThan\r\n   - [x] amd64\r\n- LessThanAll\r\n   - [x] amd64\r\n- LessThanAny\r\n   - [x] amd64\r\n- LessThanOrEqual\r\n   - [x] amd64\r\n- LessThanOrEqualAll\r\n   - [x] amd64\r\n- LessThanOrEqualAny\r\n   - [x] amd64\r\n- Max\r\n   - [x] amd64\r\n- Min\r\n   - [x] amd64\r\n- Multiply\r\n   - [x] amd64\r\n- Narrow\r\n   - [ ] amd64\r\n- Negate\r\n   - [x] amd64\r\n- OnesComplement\r\n   - [x] amd64\r\n- Sqrt \r\n   - [x] amd64\r\n- Subtract\r\n   - [x] amd64\r\n- Sum \r\n   - [x] amd64\r\n- Widen\r\n   - [ ] amd64\r\n- Xor\r\n   - [x] amd64\r\n\r\n### `System.Runtime.Intrinsics.Vector128\u003cT\u003e`:\r\n- Operator `+` (one operand)\r\n   - [x] amd64\r\n- Operator `-` (one operand)\r\n   - [x] amd64\r\n- Operator `~`\r\n   - [x] amd64\r\n- Operator `+`\r\n   - [x] amd64\r\n- Operator `-`\r\n   - [x] amd64\r\n- Operator `*`\r\n   - [x] amd64\r\n- Operator `/`\r\n   - [x] amd64\r\n- Operator `==`\r\n   - [x] amd64\r\n- Operator `!=`\r\n   - [x] amd64\r\n- Operator `\u0026`\r\n   - [x] amd64\r\n- Operator `|`\r\n   - [x] amd64\r\n- Operator `^`\r\n   - [x] amd64\r\n\r\n### `System.Runtime.Intrinsics.Vector256`:\r\n- IsHardwareAccelerated\r\n   - [ ] amd64\r\n- Abs\r\n   - [ ] amd64\r\n- Add\r\n   - [ ] amd64\r\n- AndNot\r\n   - [ ] amd64\r\n- BitwiseAnd\r\n   - [ ] amd64\r\n- BitwiseOr\r\n   - [ ] amd64\r\n- Ceiling\r\n   - [ ] amd64\r\n- ConditionalSelect\r\n   - [ ] amd64\r\n- ConvertToDouble\r\n   - [ ] amd64\r\n- ConvertToInt32\r\n   - [ ] amd64\r\n- ConvertToInt64\r\n   - [ ] amd64\r\n- ConvertToSingle\r\n   - [ ] amd64\r\n- ConvertToUInt32\r\n   - [ ] amd64\r\n- ConvertToUInt64\r\n   - [ ] amd64\r\n- CopyTo\r\n   - [ ] amd64\r\n- Divide\r\n   - [ ] amd64\r\n- Dot\r\n   - [ ] amd64\r\n- Equals\r\n   - [ ] amd64\r\n- EqualsAll\r\n   - [ ] amd64\r\n- EqualsAny\r\n   - [ ] amd64\r\n- Floor\r\n   - [ ] amd64\r\n- GreaterThan\r\n   - [ ] amd64\r\n- GreaterThanAll\r\n   - [ ] amd64\r\n- GreaterThanAny\r\n   - [ ] amd64\r\n- GreaterThanOrEqual\r\n   - [ ] amd64\r\n- GreaterThanOrEqualAll\r\n   - [ ] amd64\r\n- GreaterThanOrEqualAny\r\n   - [ ] amd64\r\n- LessThan\r\n   - [ ] amd64\r\n- LessThanAll\r\n   - [ ] amd64\r\n- LessThanAny\r\n   - [ ] amd64\r\n- LessThanOrEqual\r\n   - [ ] amd64\r\n- LessThanOrEqualAll\r\n   - [ ] amd64\r\n- LessThanOrEqualAny\r\n   - [ ] amd64\r\n- Max\r\n   - [ ] amd64\r\n- Min\r\n   - [ ] amd64\r\n- Multiply\r\n   - [ ] amd64\r\n- Narrow\r\n   - [ ] amd64\r\n- Negate\r\n   - [ ] amd64\r\n- OnesComplement\r\n   - [ ] amd64\r\n- SquareRoot\r\n   - [ ] amd64\r\n- Subtract\r\n   - [ ] amd64\r\n- Sum\r\n   - [ ] amd64\r\n- TryCopyTo\r\n   - [ ] amd64\r\n- Widen\r\n   - [ ] amd64\r\n- Xor\r\n   - [ ] amd64\r\n\r\n### `System.Runtime.Intrinsics.Vector256\u003cT\u003e`:\r\n- Operator `+` (one operand)\r\n   - [ ] amd64\r\n- Operator `-` (one operand)\r\n   - [ ] amd64\r\n- Operator `~`\r\n   - [ ] amd64\r\n- Operator `+`\r\n   - [ ] amd64\r\n- Operator `-`\r\n   - [ ] amd64\r\n- Operator `*`\r\n   - [ ] amd64\r\n- Operator `/`\r\n   - [ ] amd64\r\n- Operator `==`\r\n   - [ ] amd64\r\n- Operator `!=`\r\n   - [ ] amd64\r\n- Operator `\u0026`\r\n   - [ ] amd64\r\n- Operator `|`\r\n   - [ ] amd64\r\n- Operator `^`\r\n   - [ ] amd64",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYVCoMw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5FLCcI",
                                           "createdAt":  "2022-06-20T14:32:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "https://github.com/dotnet/runtime/issues/53032 is related",
                                           "updatedAt":  "2022-06-20T14:32:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hUKgz",
                                           "createdAt":  "2023-07-12T14:49:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "The main focus for .NET8 was Arm64. Moving this to .NET9.",
                                           "updatedAt":  "2023-07-12T14:49:46Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[Mono] Intrinsify API\u0027s of System.Numerics.Vector and new API\u0027s of System.Runtime.Intrinsics.{128,256} on Amd64 with LLVM backend",
        "labels":  [
                       "area-Codegen-meta-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71210",
        "createdAt":  "2022-06-16T05:49:44Z",
        "number":  71210,
        "author":  "david-maw",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODB65JA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeffputz",
                                            "createdAt":  "2024-05-20T00:41:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlexBar",
                                            "createdAt":  "2025-03-04T11:33:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hawkerm",
                                            "createdAt":  "2025-05-01T05:40:31Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-12-10T11:58:57Z",
        "body":  "### Description\n\nA piece of code which executes in under 100 ms in Xamarin forms on Android or Windows and under 50 ms in Windows MAUI takes over 30 seconds in Android MAUI. \n\n### Steps to Reproduce\n\n1. Clone repository https://github.com/david-maw/ResizeImageMaui.git from github\r\n2. Build the project\r\n3. Run it on Windows\r\n4. Click the button, on Windows the image will be converted to greyscale in under a second (50 ms in my case).\r\n5. Try it again on Android, this time the conversion will take much longer (in my case it was over 30 seconds but less than a minute.\r\n\r\nFYI there\u0027s a similar Xamarin Forms project at https://github.com/david-maw/ResizeImageXamarin.git, in my testing this took about 90 ms to load on Window (so MAUI was almost twice as fast), and just under a second on the Android emulator (so MAUI was 30+ times slower).\r\n\r\nThis uses SixLabors.ImageSharp to do the image processing so it is likely the implementation of something in that library that\u0027s wildly slow on .NET 6 on Android.\n\n### Version with bug\n\n6.0 Release Candidate 3\n\n### Last version that worked well\n\nUnknown/Other\n\n### Affected platforms\n\nAndroid, I was *not* able test on other platforms\n\n### Affected platform versions\n\nAndroid 11\n\n### Did you find any workaround?\n\nNo\n\n### Relevant log output\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWrqTNw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Fajpz",
                                           "createdAt":  "2022-06-16T09:16:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jfversluis",
                                           "body":  "@jonathanpeppers this seems like something for you :)",
                                           "updatedAt":  "2022-06-16T09:16:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fajp6",
                                           "createdAt":  "2022-06-16T10:16:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janseris",
                                           "body":  "Did you try Release configuration for the benchmarking? ",
                                           "updatedAt":  "2022-06-16T10:16:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fajp8",
                                           "createdAt":  "2022-06-16T13:34:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "@david-maw yes you should try a `Release` build, and maybe try \"full\" AOT:\r\n```xml\r\n\u003cPropertyGroup Condition=\" \u0027$(Configuration)\u0027 == \u0027Release\u0027 \"\u003e\r\n  \u003cRunAOTCompilation\u003etrue\u003c/RunAOTCompilation\u003e\r\n  \u003cAndroidEnableProfiledAot\u003efalse\u003c/AndroidEnableProfiledAot\u003e\r\n\u003c/PropertyGroup\u003e\r\n```\r\n`Release` builds use profiled AOT by default, and SixLabors.ImageSharp would not be in our built-in profile.",
                                           "updatedAt":  "2022-06-16T13:35:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FajqC",
                                           "createdAt":  "2022-06-16T15:28:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCjZT-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "janseris",
                                                                               "createdAt":  "2022-06-16T15:38:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "NonameMissingNo",
                                           "body":  "@jonathanpeppers \r\nMi 11i (Android):\r\nDebug: 35.841 Seconds\r\nRelease: 7.212 Seconds (2nd run: 7.137 Seconds)\r\nRelease with full AOT: 7.151 Seconds\r\n\r\nFor reference Windows (Ryzen 5 5500U): \r\nDebug: 210 ms\r\nRelease: 165 ms",
                                           "updatedAt":  "2022-06-16T15:28:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FajqI",
                                           "createdAt":  "2022-06-23T15:54:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-06-23T15:54:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FajqJ",
                                           "createdAt":  "2022-06-16T15:29:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NonameMissingNo",
                                           "body":  "Release is a lot better, but I don\u0027t think it should be 43 times slower than the windows Release build",
                                           "updatedAt":  "2022-06-16T15:31:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FajqL",
                                           "createdAt":  "2022-06-16T16:02:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "@NonameMissingNo did you already get a `.speedscope` file, to see where the problem is?\r\n\r\nhttps://github.com/xamarin/xamarin-android/blob/main/Documentation/guides/tracing.md\r\n\r\nI\u0027ll do this myself when I get a chance to look at this, but that might point out specifically where the problem is.",
                                           "updatedAt":  "2022-06-16T16:02:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FajqN",
                                           "createdAt":  "2022-06-16T16:34:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "david-maw",
                                           "body":  "@janseris no, I wasn\u0027t actually trying to benchmark, I was trying to debug some code which calls SixLabors.ImageSharp, I did give it a try with the additions suggested by @jonathanpeppers though, alas release builds do not seem to be working for me. This one fails with \r\n\r\n```\r\n1\u003eC:\\Program Files\\dotnet\\packs\\Microsoft.Android.Sdk.Windows\\32.0.415\\targets\\Microsoft.Android.Sdk.Aot.targets(78,5): error : Mono Ahead of Time compiler - compiling assembly C:\\Users\\david\\Documents\\Develop\\Samples\\ResizeImageMaui\\ResizeImageMaui\\obj\\Release\\net6.0-android\\android-arm\\aot-in\\Mono.Android.dll\r\n1\u003eC:\\Program Files\\dotnet\\packs\\Microsoft.Android.Sdk.Windows\\32.0.415\\targets\\Microsoft.Android.Sdk.Aot.targets(78,5): error : AOTID AE96AD80-0388-6F60-8F1D-297A5B9027D9\r\n1\u003eC:\\Program Files\\dotnet\\packs\\Microsoft.Android.Sdk.Windows\\32.0.415\\targets\\Microsoft.Android.Sdk.Aot.targets(78,5): error : Compiled: 155736/155736\r\n1\u003eC:\\Program Files\\dotnet\\packs\\Microsoft.Android.Sdk.Windows\\32.0.415\\targets\\Microsoft.Android.Sdk.Aot.targets(78,5): error : Executing the native assembler: \"C:\\Program Files\\dotnet\\packs\\Microsoft.Android.Sdk.Windows\\32.0.415\\tools\\binutils\\arm-linux-androideabi-as\"   -mfpu=vfp3 -o obj\\Release\\net6.0-android\\android-arm\\aot\\armeabi-v7a\\Mono.Android\\temp.s.o obj\\Release\\net6.0-android\\android-arm\\aot\\armeabi-v7a\\Mono.Android\\temp.s\r\n1\u003eDone building project \"ResizeImageMaui.csproj\" -- FAILED.\r\n```\r\n\r\nNot much of a problem for me actually, I\u0027m mostly interested in debug builds, I don\u0027t move to a release build until the pre-release performance checks.\r\n\r\nJust as well @NonameMissingNo  tested it, thanks for that.",
                                           "updatedAt":  "2022-06-16T16:34:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FajqR",
                                           "createdAt":  "2022-06-16T16:44:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "@david-maw if a general `Release` build fails, you might file an issue here with a [diagnostic MSBuild log](https://docs.microsoft.com/xamarin/android/troubleshooting/troubleshooting#diagnostic-msbuild-output):\r\n\r\nhttps://github.com/xamarin/xamarin-android/issues\r\n\r\nThanks!",
                                           "updatedAt":  "2022-06-16T16:44:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FajqW",
                                           "createdAt":  "2022-06-16T16:54:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NonameMissingNo",
                                           "body":  "@jonathanpeppers It would seem like that the ImageSharp is the one doing the work\r\n![image](https://user-images.githubusercontent.com/40233496/174124940-dd06e0b3-979f-4a09-b825-fcf7002b810d.png)\r\n[maui-app_20220616_184909.speedscope.zip](https://github.com/dotnet/maui/files/8920905/maui-app_20220616_184909.speedscope.zip)\r\n\r\n",
                                           "updatedAt":  "2022-06-16T16:54:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fajqa",
                                           "createdAt":  "2022-06-16T17:32:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCjZUAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "janseris",
                                                                               "createdAt":  "2022-06-16T17:52:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "Thanks!\r\n\r\nSo I wonder if the code here:\r\n\r\nhttps://github.com/SixLabors/ImageSharp/blob/7bd0e03792d2b5141fcfb046cb92329e9c0df582/src/ImageSharp/Processing/Processors/Transforms/Resize/ResizeWorker.cs#L168-L199\r\n\r\nI bet there are some runtime optimizations for Span/Vector4 that we have on Windows + CoreClr, and we don\u0027t have those in Mono.",
                                           "updatedAt":  "2022-06-16T17:32:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fajqe",
                                           "createdAt":  "2022-06-16T19:29:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "david-maw",
                                           "body":  "@jonathanpeppers \r\n\r\nThanks for the hint on the diagnostic MSBuild Log. I\u0027ll look into the Release build issue a bit more and file a bug if it does not seem to be a local problem. The issue was building the MAUI Android version, not Xamarin.Forms Android. The error was in the AOT compiler which is presumably why the Debug build was ok. \r\n\r\nBack to the original topic,\r\n\r\nThe Xamarin.Forms Android Release Build completed the second and subsequent image conversions in under 500 ms and a Debug build took 1.5 s, both a far cry from the MAUI Android numbers (just over 33 s for Debug, I can\u0027t test Release).\r\n\r\nIf the Android performance differential is a mono limitation why is the performance of the same app in Xamarin so much better? Is it that it is a different Mono version?",
                                           "updatedAt":  "2022-06-16T19:29:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fajqf",
                                           "createdAt":  "2022-06-16T19:52:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "Debug builds also default to `UseInterpreter=true` (this enables hot reload). This isn\u0027t an option at all in Xamarin.\r\n\r\nSo you could turn it off in your project, but then hot reload wouldn\u0027t work either.",
                                           "updatedAt":  "2022-06-16T19:52:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fajqi",
                                           "createdAt":  "2022-06-16T20:34:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "david-maw",
                                           "body":  "Thanks, that would probably work for the occasional test but so far at least it looks easier said than done, since for now \u003cUseInterpreter\u003e isn\u0027t recognized (I note there are a number of Issues relating to handling it for multi-targeted project files.",
                                           "updatedAt":  "2022-06-16T20:34:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fajqm",
                                           "createdAt":  "2022-06-23T15:54:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCjbDcw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "janseris",
                                                                               "createdAt":  "2022-06-23T16:02:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "david-maw",
                                                                               "createdAt":  "2022-06-23T18:28:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "I had a conversation with some of the Mono folks -- going to move this to dotnet/runtime.",
                                           "updatedAt":  "2022-06-23T15:54:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Faj99",
                                           "createdAt":  "2022-06-23T15:55:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "/cc @steveisok @lambdageek ",
                                           "updatedAt":  "2022-06-23T15:55:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FawD5",
                                           "createdAt":  "2022-06-23T16:44:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "1. We should try running this on the net7 runtime packs. There\u0027s been arm64 intrinsics work in net7 in mono.\r\n2. The code that @jonathanpeppers pointed out (https://github.com/SixLabors/ImageSharp/blob/7bd0e03792d2b5141fcfb046cb92329e9c0df582/src/ImageSharp/Processing/Processors/Transforms/Resize/ResizeWorker.cs#L168-L199) looks like it could be tested in a console app.  that should make it easier to look at what the JIT is doing.",
                                           "updatedAt":  "2022-06-23T16:44:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FsikF",
                                           "createdAt":  "2022-06-28T21:43:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nA piece of code which executes in under 100 ms in Xamarin forms on Android or Windows and under 50 ms in Windows MAUI takes over 30 seconds in Android MAUI. \n\n### Steps to Reproduce\n\n1. Clone repository https://github.com/david-maw/ResizeImageMaui.git from github\r\n2. Build the project\r\n3. Run it on Windows\r\n4. Click the button, on Windows the image will be converted to greyscale in under a second (50 ms in my case).\r\n5. Try it again on Android, this time the conversion will take much longer (in my case it was over 30 seconds but less than a minute.\r\n\r\nFYI there\u0027s a similar Xamarin Forms project at https://github.com/david-maw/ResizeImageXamarin.git, in my testing this took about 90 ms to load on Window (so MAUI was almost twice as fast), and just under a second on the Android emulator (so MAUI was 30+ times slower).\r\n\r\nThis uses SixLabors.ImageSharp to do the image processing so it is likely the implementation of something in that library that\u0027s wildly slow on .NET 6 on Android.\n\n### Version with bug\n\n6.0 Release Candidate 3\n\n### Last version that worked well\n\nUnknown/Other\n\n### Affected platforms\n\nAndroid, I was *not* able test on other platforms\n\n### Affected platform versions\n\nAndroid 11\n\n### Did you find any workaround?\n\nNo\n\n### Relevant log output\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavid-maw\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CoreLib-mono`, `os-ios`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-28T21:43:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GC4_o",
                                           "createdAt":  "2022-07-05T14:59:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nA piece of code which executes in under 100 ms in Xamarin forms on Android or Windows and under 50 ms in Windows MAUI takes over 30 seconds in Android MAUI. \n\n### Steps to Reproduce\n\n1. Clone repository https://github.com/david-maw/ResizeImageMaui.git from github\r\n2. Build the project\r\n3. Run it on Windows\r\n4. Click the button, on Windows the image will be converted to greyscale in under a second (50 ms in my case).\r\n5. Try it again on Android, this time the conversion will take much longer (in my case it was over 30 seconds but less than a minute.\r\n\r\nFYI there\u0027s a similar Xamarin Forms project at https://github.com/david-maw/ResizeImageXamarin.git, in my testing this took about 90 ms to load on Window (so MAUI was almost twice as fast), and just under a second on the Android emulator (so MAUI was 30+ times slower).\r\n\r\nThis uses SixLabors.ImageSharp to do the image processing so it is likely the implementation of something in that library that\u0027s wildly slow on .NET 6 on Android.\n\n### Version with bug\n\n6.0 Release Candidate 3\n\n### Last version that worked well\n\nUnknown/Other\n\n### Affected platforms\n\nAndroid, I was *not* able test on other platforms\n\n### Affected platform versions\n\nAndroid 11\n\n### Did you find any workaround?\n\nNo\n\n### Relevant log output\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavid-maw\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`os-android`, `area-Codegen-meta-mono`, `os-ios`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-05T14:59:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GN2Cf",
                                           "createdAt":  "2022-07-07T18:19:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "@mkhamoyan The work we did for arm64 intrinsics only applies for AOT+LLVM.  Android currently does not use LLVM when they run profiled AOT.  That is something @jonathanpeppers is going to work on.  Once he enables it, we can pick this back up and validate against .NET 7.",
                                           "updatedAt":  "2022-07-07T18:19:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GN8XQ",
                                           "createdAt":  "2022-07-07T18:40:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwUlyA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "charlesroddie",
                                                                               "createdAt":  "2022-11-29T00:00:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "You can set `\u003cEnableLLVM\u003etrue\u003c/EnableLLVM\u003e` in your project, if you would like to try it in the current .NET 6 release.\r\n\r\nWe\u0027re investigating if this can be on by default, because not many would use it otherwise.",
                                           "updatedAt":  "2022-07-07T18:40:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G8aQu",
                                           "createdAt":  "2022-07-20T12:44:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eddyjd",
                                           "body":  "Any progress with this? I\u0027m having very poor ImageSharp performance in MAUI Android as well. Just opening a jpg takes between 40 and 50 seconds.\r\n\r\nThis is the code that appears to takes long in the HuffmanScanDecoder.cs module:\r\n\r\n        private void ParseBaselineDataInterleaved()\r\n        {\r\n            int mcu = 0;\r\n            int mcusPerColumn = this.frame.McusPerColumn;\r\n            int mcusPerLine = this.frame.McusPerLine;\r\n            ref JpegBitReader buffer = ref this.scanBuffer;\r\n\r\n            for (int j = 0; j \u003c mcusPerColumn; j++)\r\n            {\r\n                this.cancellationToken.ThrowIfCancellationRequested();\r\n\r\n                // decode from binary to spectral\r\n                for (int i = 0; i \u003c mcusPerLine; i++)\r\n                {\r\n                    // Scan an interleaved mcu... process components in order\r\n                    int mcuCol = mcu % mcusPerLine;\r\n                    for (int k = 0; k \u003c this.scanComponentCount; k++)\r\n                    {\r\n                        int order = this.frame.ComponentOrder[k];\r\n                        var component = this.components[order] as JpegComponent;\r\n\r\n                        ref HuffmanTable dcHuffmanTable = ref this.dcHuffmanTables[component.DcTableId];\r\n                        ref HuffmanTable acHuffmanTable = ref this.acHuffmanTables[component.AcTableId];\r\n\r\n                        int h = component.HorizontalSamplingFactor;\r\n                        int v = component.VerticalSamplingFactor;\r\n\r\n                        // Scan out an mcu\u0027s worth of this component; that\u0027s just determined\r\n                        // by the basic H and V specified for the component\r\n                        for (int y = 0; y \u003c v; y++)\r\n                        {\r\n                            Span\u003cBlock8x8\u003e blockSpan = component.SpectralBlocks.DangerousGetRowSpan(y);\r\n                            ref Block8x8 blockRef = ref MemoryMarshal.GetReference(blockSpan);\r\n\r\n                            for (int x = 0; x \u003c h; x++)\r\n                            {\r\n                                if (buffer.NoData)\r\n                                {\r\n                                    // It is very likely that some spectral data was decoded before we\u0027ve encountered \u0027end of scan\u0027\r\n                                    // so we need to decode what\u0027s left and return (or maybe throw?)\r\n                                    this.spectralConverter.ConvertStrideBaseline();\r\n                                    return;\r\n                                }\r\n\r\n                                int blockCol = (mcuCol * h) + x;\r\n\r\n                                this.DecodeBlockBaseline(\r\n                                    component,\r\n                                    ref Unsafe.Add(ref blockRef, blockCol),\r\n                                    ref dcHuffmanTable,\r\n                                    ref acHuffmanTable);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // After all interleaved components, that\u0027s an interleaved MCU,\r\n                    // so now count down the restart interval\r\n                    mcu++;\r\n                    this.HandleRestart();\r\n                }\r\n\r\n                // Convert from spectral to actual pixels via given converter\r\n                this.spectralConverter.ConvertStrideBaseline();\r\n            }\r\n        }",
                                           "updatedAt":  "2022-07-20T12:44:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G8bl0",
                                           "createdAt":  "2022-07-20T12:49:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eddyjd",
                                           "body":  "During my testing mcusPerColumn = 120 and mcusPerLine = 252\r\nSo the \"// decode from binary to spectral\" section loops 30240 times.",
                                           "updatedAt":  "2022-07-20T12:49:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HBXFZ",
                                           "createdAt":  "2022-07-21T14:14:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "@eddyjd did you try a `Release` build with `EnableLLVM` enabled? https://github.com/dotnet/runtime/issues/71210#issuecomment-1178060240",
                                           "updatedAt":  "2022-07-21T14:14:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HB06l",
                                           "createdAt":  "2022-07-21T15:55:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eddyjd",
                                           "body":  "Just tried that, huge improvement. The whole process of what I was trying to do (which includes sending the image to a remote server) now only takes about 8 seconds. I can live with performance issue while debugging. Thanks.",
                                           "updatedAt":  "2022-07-21T15:55:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HB2Q_",
                                           "createdAt":  "2022-07-21T16:01:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "Ok, great. We\u0027re thinking `EnableLLVM=true` is the solution here for Android, as that is where you\u0027ll get better support for \"vectorization\" like ImageSharp is using.\r\n\r\nWe\u0027re looking into making `EnableLLVM=true` the default in a future .NET release.",
                                           "updatedAt":  "2022-07-21T16:01:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HB9lE",
                                           "createdAt":  "2022-07-21T16:26:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "This is ~likely~ could be caused by the mono runtime running generic code that is not \"pre-seeded\". See #52559. The mono runtime falls back to extremely slow implementations to run such code.",
                                           "updatedAt":  "2022-07-21T16:46:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HCC7s",
                                           "createdAt":  "2022-07-21T16:50:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "Glad you found enabling LLVM to make things faster.  Most of our perf gains will be found with LLVM on.  As a result, I\u0027m going to close this issue.",
                                           "updatedAt":  "2022-07-21T16:50:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HCV-o",
                                           "createdAt":  "2022-07-21T18:19:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "david-maw",
                                           "body":  "@steveisok when I tried enabling LLVM and rebuilding the example I provided earlier using a release build the build failed (abbreviated output below). Since MAUI in .NET 6 has enough open problems I can\u0027t go to production with it anyway I\u0027d decided to wait until .NET 7 to worry about this issue, but just in case it matters...\r\n  \r\n```\r\nBuild started...\r\n1\u003e------ Build started: Project: ResizeImageMaui, Configuration: Release Any CPU ------\r\n1\u003eYou are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n1\u003eSkipping analyzers to speed up the build. You can execute \u0027Build\u0027 or \u0027Rebuild\u0027 command to run analyzers.\r\n1\u003eResizeImageMaui -\u003e C:\\Users\\david\\Documents\\Develop\\Samples\\ResizeImageMaui\\ResizeImageMaui\\bin\\Release\\net6.0-android\\ResizeImageMaui.dll\r\n1\u003e[1/266] ResizeImageMaui.dll -\u003e ResizeImageMaui.dll.so\r\n1\u003e[1/266] System.Net.NameResolution.dll -\u003e System.Net.NameResolution.dll.so, System.Net.NameResolution.dll-llvm.o\r\n1\u003e[1/266] ResizeImageMaui.dll -\u003e ResizeImageMaui.dll.so, ResizeImageMaui.dll-llvm.o\r\n1\u003e[2/266] Microsoft.CSharp.dll -\u003e Microsoft.CSharp.dll.so\r\n.\r\n.\r\n.\r\n1\u003e[262/266] Xamarin.Kotlin.StdLib.Jdk7.dll -\u003e Xamarin.Kotlin.StdLib.Jdk7.dll.so, Xamarin.Kotlin.StdLib.Jdk7.dll-llvm.o\r\n1\u003e[263/266] Xamarin.Kotlin.StdLib.Jdk8.dll -\u003e Xamarin.Kotlin.StdLib.Jdk8.dll.so, Xamarin.Kotlin.StdLib.Jdk8.dll-llvm.o\r\n1\u003e[264/266] Xamarin.KotlinX.Coroutines.Android.dll -\u003e Xamarin.KotlinX.Coroutines.Android.dll.so, Xamarin.KotlinX.Coroutines.Android.dll-llvm.o\r\n1\u003e[265/266] Xamarin.KotlinX.Coroutines.Core.Jvm.dll -\u003e Xamarin.KotlinX.Coroutines.Core.Jvm.dll.so, Xamarin.KotlinX.Coroutines.Core.Jvm.dll-llvm.o\r\n1\u003e[266/266] System.Private.CoreLib.dll -\u003e System.Private.CoreLib.dll.so, System.Private.CoreLib.dll-llvm.o\r\n1\u003e[Mono.Android.dll] Exec (with response file contents expanded) in C:\\Users\\david\\Documents\\Develop\\Samples\\ResizeImageMaui\\ResizeImageMaui: MONO_PATH=C:\\Users\\david\\Documents\\Develop\\Samples\\ResizeImageMaui\\ResizeImageMaui\\obj\\Release\\net6.0-android\\android-arm\\aot-in; MONO_ENV_OPTIONS= C:\\Program Files\\dotnet\\packs\\Microsoft.NETCore.App.Runtime.AOT.win-x64.Cross.android-arm\\6.0.6\\Sdk\\..\\tools\\mono-aot-cross.exe --debug --llvm \"--aot=asmwriter,temp-path=obj\\Release\\net6.0-android\\android-arm\\aot\\armeabi-v7a\\Mono.Android,nodebug,llvm-path=C:\\Program Files\\dotnet\\packs\\Microsoft.NETCore.App.Runtime.AOT.win-x64.Cross.android-arm\\6.0.6\\Sdk\\..\\tools,mtriple=armv7-linux-gnueabi,tool-prefix=C:\\Program Files (x86)\\Android\\android-sdk\\ndk-bundle\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin\\arm-linux-androideabi-,outfile=obj\\Release\\net6.0-android\\android-arm\\aot\\Mono.Android.dll.so,llvm-outfile=obj\\Release\\net6.0-android\\android-arm\\aot\\Mono.Android.dll-llvm.o,ld-name=ld.EXE,ld-flags=\\\"-LC:\\Program Files (x86)\\Android\\android-sdk\\ndk-bundle\\toolchains\\llvm\\prebuilt\\windows-x86_64\\lib\\gcc\\arm-linux-androideabi\\4.9.x\\\";\\\"-LC:\\Program Files (x86)\\Android\\android-sdk\\ndk-bundle\\platforms\\android-21\\arch-arm\\usr\\lib\\\";\\\"-LC:\\Program Files (x86)\\Android\\android-sdk\\ndk-bundle\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin\\..\\sysroot\\usr\\lib\\arm-linux-androideabi\\\";\\\"C:\\Program Files (x86)\\Android\\android-sdk\\ndk-bundle\\toolchains\\llvm\\prebuilt\\windows-x86_64\\lib\\gcc\\arm-linux-androideabi\\4.9.x\\libgcc.a\\\";\\\"C:\\Program Files (x86)\\Android\\android-sdk\\ndk-bundle\\platforms\\android-21\\arch-arm\\usr\\lib\\libc.so\\\";\\\"C:\\Program Files (x86)\\Android\\android-sdk\\ndk-bundle\\platforms\\android-21\\arch-arm\\usr\\lib\\libm.so\\\" -s\" \"obj\\Release\\net6.0-android\\android-arm\\aot-in\\Mono.Android.dll\"\r\n1\u003eC:\\Program Files\\dotnet\\packs\\Microsoft.Android.Sdk.Windows\\32.0.415\\targets\\Microsoft.Android.Sdk.Aot.targets(78,5): error : Precompiling failed for C:\\Users\\david\\Documents\\Develop\\Samples\\ResizeImageMaui\\ResizeImageMaui\\obj\\Release\\net6.0-android\\android-arm\\aot-in\\Mono.Android.dll.\r\n1\u003eC:\\Program Files\\dotnet\\packs\\Microsoft.Android.Sdk.Windows\\32.0.415\\targets\\Microsoft.Android.Sdk.Aot.targets(78,5): error : C:\\Program Files (x86)\\Android\\android-sdk\\ndk-bundle\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin\\arm-linux-androideabi-ld.EXE: internal error in arm_branch_common, at /buildbot/src/android/binutils/toolchain/binutils/binutils-2.27/gold/arm.cc:4063\r\n1\u003eC:\\Program Files\\dotnet\\packs\\Microsoft.Android.Sdk.Windows\\32.0.415\\targets\\Microsoft.Android.Sdk.Aot.targets(78,5): error : AOT of image obj\\Release\\net6.0-android\\android-arm\\aot-in\\Mono.Android.dll failed.\r\n1\u003eC:\\Program Files\\dotnet\\packs\\Microsoft.Android.Sdk.Windows\\32.0.415\\targets\\Microsoft.Android.Sdk.Aot.targets(78,5): error : Mono Ahead of Time compiler - compiling assembly C:\\Users\\david\\Documents\\Develop\\Samples\\ResizeImageMaui\\ResizeImageMaui\\obj\\Release\\net6.0-android\\android-arm\\aot-in\\Mono.Android.dll\r\n1\u003eC:\\Program Files\\dotnet\\packs\\Microsoft.Android.Sdk.Windows\\32.0.415\\targets\\Microsoft.Android.Sdk.Aot.targets(78,5): error : AOTID 30948110-ED14-453C-C97F-9C54458A4135\r\n1\u003eC:\\Program Files\\dotnet\\packs\\Microsoft.Android.Sdk.Windows\\32.0.415\\targets\\Microsoft.Android.Sdk.Aot.targets(78,5): error : Executing opt: \"C:\\Program Files\\dotnet\\packs\\Microsoft.NETCore.App.Runtime.AOT.win-x64.Cross.android-arm\\6.0.6\\Sdk\\..\\tools\\opt\" -f -O2 -disable-tail-calls -place-safepoints -spp-all-backedges -o \"obj\\Release\\net6.0-android\\android-arm\\aot\\armeabi-v7a\\Mono.Android\\temp.opt.bc\" \"obj\\Release\\net6.0-android\\android-arm\\aot\\armeabi-v7a\\Mono.Android\\temp.bc\"\r\n1\u003eC:\\Program Files\\dotnet\\packs\\Microsoft.Android.Sdk.Windows\\32.0.415\\targets\\Microsoft.Android.Sdk.Aot.targets(78,5): error : Executing llc: \"C:\\Program Files\\dotnet\\packs\\Microsoft.NETCore.App.Runtime.AOT.win-x64.Cross.android-arm\\6.0.6\\Sdk\\..\\tools\\llc\"  -enable-implicit-null-checks -disable-fault-maps -mattr=+vfp2,-neon -asm-verbose=false -mtriple=armv7-linux-gnueabi -disable-gnu-eh-frame -enable-mono-eh-frame -mono-eh-frame-symbol=mono_aot_Mono_Android_eh_frame -disable-tail-calls -relocation-model=pic -filetype=obj -o \"obj\\Release\\net6.0-android\\android-arm\\aot\\armeabi-v7a\\Mono.Android\\temp-llvm.o\" \"obj\\Release\\net6.0-android\\android-arm\\aot\\armeabi-v7a\\Mono.Android\\temp.opt.bc\"\r\n1\u003eC:\\Program Files\\dotnet\\packs\\Microsoft.Android.Sdk.Windows\\32.0.415\\targets\\Microsoft.Android.Sdk.Aot.targets(78,5): error : Compiled: 155741/155741\r\n1\u003eC:\\Program Files\\dotnet\\packs\\Microsoft.Android.Sdk.Windows\\32.0.415\\targets\\Microsoft.Android.Sdk.Aot.targets(78,5): error : Executing the native assembler: \"C:\\Program Files (x86)\\Android\\android-sdk\\ndk-bundle\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin\\arm-linux-androideabi-as\"   -mfpu=vfp3 -o obj\\Release\\net6.0-android\\android-arm\\aot\\armeabi-v7a\\Mono.Android\\temp.s.o obj\\Release\\net6.0-android\\android-arm\\aot\\armeabi-v7a\\Mono.Android\\temp.s\r\n1\u003eC:\\Program Files\\dotnet\\packs\\Microsoft.Android.Sdk.Windows\\32.0.415\\targets\\Microsoft.Android.Sdk.Aot.targets(78,5): error : Executing the native linker: \"C:\\Program Files (x86)\\Android\\android-sdk\\ndk-bundle\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin\\arm-linux-androideabi-ld.EXE\" -Bsymbolic -shared -o obj\\Release\\net6.0-android\\android-arm\\aot\\Mono.Android.dll.so.tmp \"obj\\Release\\net6.0-android\\android-arm\\aot\\armeabi-v7a\\Mono.Android\\temp-llvm.o\" obj\\Release\\net6.0-android\\android-arm\\aot\\armeabi-v7a\\Mono.Android\\temp.s.o \"-LC:\\Program Files (x86)\\Android\\android-sdk\\ndk-bundle\\toolchains\\llvm\\prebuilt\\windows-x86_64\\lib\\gcc\\arm-linux-androideabi\\4.9.x\" \"-LC:\\Program Files (x86)\\Android\\android-sdk\\ndk-bundle\\platforms\\android-21\\arch-arm\\usr\\lib\" \"-LC:\\Program Files (x86)\\Android\\android-sdk\\ndk-bundle\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin\\..\\sysroot\\usr\\lib\\arm-linux-androideabi\" \"C:\\Program Files (x86)\\Android\\android-sdk\\ndk-bundle\\toolchains\\llvm\\prebuilt\\windows-x86_64\\lib\\gcc\\arm-linux-androideabi\\4.9.x\\libgcc.a\" \"C:\\Program Files (x86)\\Android\\android-sdk\\ndk-bundle\\platforms\\android-21\\arch-arm\\usr\\lib\\libc.so\" \"C:\\Program Files (x86)\\Android\\android-sdk\\ndk-bundle\\platforms\\android-21\\arch-arm\\usr\\lib\\libm.so\" -s\r\n1\u003eDone building project \"ResizeImageMaui.csproj\" -- FAILED.\r\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\r\n========== Deploy: 0 succeeded, 0 failed, 0 skipped ==========\r\n```\r\n",
                                           "updatedAt":  "2022-07-21T18:19:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HCbCd",
                                           "createdAt":  "2022-07-21T18:43:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janseris",
                                           "body":  "\u003e Just tried that, huge improvement. The whole process of what I was trying to do (which includes sending the image to a remote server) now only takes about 8 seconds. I can live with performance issue while debugging. Thanks.\r\n\r\nWhy cant you resize using MAUI Graphics? Resize now works on Android (or in next release, cant remember)",
                                           "updatedAt":  "2022-07-21T18:43:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HCcmW",
                                           "createdAt":  "2022-07-21T18:50:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eddyjd",
                                           "body":  "\u003e \u003e Just tried that, huge improvement. The whole process of what I was trying to do (which includes sending the image to a remote server) now only takes about 8 seconds. I can live with performance issue while debugging. Thanks.\r\n\u003e \r\n\u003e Why cant you resize using MAUI Graphics? Resize now works on Android (or in next release, cant remember)\r\n\r\nIf you\u0027re replying to me, my use is different than david-maw\u0027s. All I wanted to do was modify the Exif data for an image and ImageSharp is the only way I\u0027ve been able to get it done so far. ",
                                           "updatedAt":  "2022-07-21T18:50:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HCemb",
                                           "createdAt":  "2022-07-21T19:01:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "david-maw",
                                           "body":  "As far as i know you can resize using MAUI graphics in my case I needed to resize and convert to greyscale to minimize the image size. It also turned out I had to correct the orientation value in the EXIF data, but I think that was probably a bug.\r\n\r\nI was experimenting with migrating existing code to MAUI so rewriting it wasn\u0027t the objective, when MAUI gets to the point where I can consider using it in production (which is a few bug fixes away, for me at least) image processing is on the list of things I could do differently there.",
                                           "updatedAt":  "2022-07-21T19:01:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HDJV1",
                                           "createdAt":  "2022-07-21T22:49:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC-s3yA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2022-07-21T23:48:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andreinitescu",
                                                                               "createdAt":  "2022-07-22T05:14:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "janseris",
                                                                               "createdAt":  "2022-07-22T05:40:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "3egirlsdream",
                                                                               "createdAt":  "2023-04-25T05:32:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "georg-jung",
                                                                               "createdAt":  "2023-05-26T06:55:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Cekayy95",
                                                                               "createdAt":  "2023-06-22T11:52:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "JimBobSquarePants",
                                           "body":  "Are we sure closing this is wise? Even with LLVM enabled those numbers are alarmingly high.",
                                           "updatedAt":  "2022-07-21T22:49:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HD40v",
                                           "createdAt":  "2022-07-22T05:37:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janseris",
                                           "body":  "\u003e \u003e \u003e Just tried that, huge improvement. The whole process of what I was trying to do (which includes sending the image to a remote server) now only takes about 8 seconds. I can live with performance issue while debugging. Thanks.\r\n\u003e \u003e \r\n\u003e \u003e \r\n\u003e \u003e Why cant you resize using MAUI Graphics? Resize now works on Android (or in next release, cant remember)\r\n\u003e \r\n\u003e If you\u0027re replying to me, my use is different than david-maw\u0027s. All I wanted to do was modify the Exif data for an image and ImageSharp is the only way I\u0027ve been able to get it done so far.\r\n\r\nTrue,  MAUI graphics just silently drops all exif data (most importantly, the rotation/orientation property) (reported) and does not offer a way to read/save/modify.\r\nI am however using ExifLibrary successfully for that with relatively good performance. Maybe you can try that one.  (my use case is manually reading exif before jpg resize and putting it back after resize) ",
                                           "updatedAt":  "2022-07-22T05:41:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HGQXz",
                                           "createdAt":  "2022-07-22T18:11:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "\u003e This is ~likely~ could be caused by the mono runtime running generic code that is not \"pre-seeded\". See #52559. The mono runtime falls back to extremely slow implementations to run such code.\r\n\r\nThat issue is for ios which doesn\u0027t have a JIT so it has to aot all instantiations, android does have a JIT.",
                                           "updatedAt":  "2022-07-22T18:11:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HGnZH",
                                           "createdAt":  "2022-07-22T20:35:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "Some code like this only supports avx:\r\nhttps://github.com/SixLabors/ImageSharp/blob/main/src/ImageSharp/Formats/Jpeg/Components/Block8x8F.cs#L163\r\nand the fallback to Vector4 is not intrinsified on mono in 6.0.",
                                           "updatedAt":  "2022-07-22T20:35:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HHOJw",
                                           "createdAt":  "2022-07-23T07:05:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCoWY2Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2022-07-25T14:47:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JimBobSquarePants",
                                                                               "createdAt":  "2022-07-25T15:26:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vargaz",
                                           "body":  "\u003e \u003e This is ~likely~ could be caused by the mono runtime running generic code that is not \"pre-seeded\". See #52559. The mono runtime falls back to extremely slow implementations to run such code.\r\n\u003e \r\n\u003e That issue is for ios which doesn\u0027t have a JIT so it has to aot all instantiations, android does have a JIT.\r\n\r\nSo it does look like that problem is related, because to get good performance requires AOTing with LLVM, and the AOT compiler might not AOT these instantiations.\r\n",
                                           "updatedAt":  "2022-07-23T07:05:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HLNjm",
                                           "createdAt":  "2022-07-25T14:26:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCoWY8Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JimBobSquarePants",
                                                                               "createdAt":  "2022-07-25T15:27:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mkhamoyan",
                                           "body":  "Assigning to @vargaz as issues are related.",
                                           "updatedAt":  "2022-07-25T14:26:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ILmu_",
                                           "createdAt":  "2022-08-10T17:04:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqZ6aw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "JimBobSquarePants",
                                                                               "createdAt":  "2022-08-11T10:53:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "From the mono runtime side - There is ongoing work to fix some issues in 7.0 causing some failures with LVM on Android. Along with that, we recently added Vector4 Intrinsics for Arm64 platform. We should re-evaluate the perf numbers once we fix the llvm related issues.\r\n\r\ncc @BrzVlad - related to slower interpreter comments above.",
                                           "updatedAt":  "2022-08-10T17:04:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IOxWV",
                                           "createdAt":  "2022-08-11T10:54:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JimBobSquarePants",
                                           "body":  "\u003eVector4 Intrinsics for Arm64 platform\r\n\r\nNow I just need to add ARM64 intrinsics and somehow snag a CI platform to test them in!",
                                           "updatedAt":  "2022-08-11T10:54:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IQl3s",
                                           "createdAt":  "2022-08-11T18:03:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqrPeA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JimBobSquarePants",
                                                                               "createdAt":  "2022-08-17T01:37:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "Arm64 intrinsics for Vector4 has been added via https://github.com/dotnet/runtime/pull/72124",
                                           "updatedAt":  "2022-08-11T18:03:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ie97m",
                                           "createdAt":  "2022-08-16T02:38:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hez2010",
                                           "body":  "Maybe in long term we can extend CoreCLR and NativeAOT to support mobile platforms, so that we won\u0027t need to suffer from plenty of performance issues of mono?",
                                           "updatedAt":  "2022-08-16T02:38:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PRHZT",
                                           "createdAt":  "2022-11-28T23:35:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwWMFA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "janseris",
                                                                               "createdAt":  "2022-11-29T09:42:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jjxtra",
                                           "body":  "Seeing same poor performance on iOS release builds. Takes 20 seconds to load a png that is 1024x1024. Very odd. Using MAUI .NET 7 in VC MAC 2022, AOT and LLVM enabled.",
                                           "updatedAt":  "2022-11-28T23:40:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QRADB",
                                           "createdAt":  "2022-12-12T14:47:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCxGj_Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "fanyang-mono",
                                                                               "createdAt":  "2022-12-12T15:58:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jjxtra",
                                           "body":  "Switched to skiasharp and performance is 100x better",
                                           "updatedAt":  "2022-12-12T14:47:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QTr4S",
                                           "createdAt":  "2022-12-12T21:14:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JimBobSquarePants",
                                           "body":  "That’s expected since the actual operating code is not powered by the runtime and doesn’t suffer from this issue.  On a desktop with a working JIT ImageSharp will comfortably beat SkiaSharp’s performance for both resizing and matrix color transformation ",
                                           "updatedAt":  "2022-12-12T21:19:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ajhl9",
                                           "createdAt":  "2023-04-24T01:48:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "3egirlsdream",
                                           "body":  "when can fix this bug?",
                                           "updatedAt":  "2023-04-24T01:48:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ajqdA",
                                           "createdAt":  "2023-04-24T02:37:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERE5ng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "JimBobSquarePants",
                                                                               "createdAt":  "2023-04-24T06:55:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "3egirlsdream",
                                                                               "createdAt":  "2023-04-25T05:36:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "georg-jung",
                                                                               "createdAt":  "2023-05-26T06:59:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Cekayy95",
                                                                               "createdAt":  "2023-06-22T11:55:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Sergio0694",
                                                                               "createdAt":  "2023-08-17T10:53:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "beeradmoore",
                                                                               "createdAt":  "2025-05-07T00:18:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "jjxtra",
                                           "body":  "Use skiasharp",
                                           "updatedAt":  "2023-04-24T02:37:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5akZui",
                                           "createdAt":  "2023-04-24T06:58:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JimBobSquarePants",
                                           "body":  "That’s not a very productive answer is it? \r\n\r\nManaged code should work well cross platform. If there are issues then that is due to limitations of the AOT compiler. ",
                                           "updatedAt":  "2023-04-24T06:58:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aknzk",
                                           "createdAt":  "2023-04-24T07:42:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hez2010",
                                           "body":  "\u003e is due to limitations of the AOT compiler\n\nThe issue is mono-specific, not AOT-specific. I tried NativeAOT and didn\u0027t find any performance issues with ImageSharp. The performance of given repro in the top post is parity between RyuJIT and NativeAOT (both under 50ms).  ",
                                           "updatedAt":  "2023-04-24T07:45:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aupM3",
                                           "createdAt":  "2023-04-25T17:44:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjsb212",
                                           "body":  "Just ran into this same issue when I ported my Xamarin project to MAUI. Tested with .net 6 \u0026 7 (MAUI) running on ANDROID.  ImageSharp loading any files is SUPER SLOW - On XAMARIN everything still loads fine as expected. The original Xamarin code ported to MAUI:  \r\n            \r\nFileStream fs = new FileStream(file.FullPath, FileMode.Open, FileAccess.Read);\r\nImage\u003cRgb24\u003e image = SixLabors.ImageSharp.Image.Load\u003cRgb24\u003e(fs);\r\n\r\n...Takes about 20 - 30 SECONDS to load any image into stream",
                                           "updatedAt":  "2023-04-25T17:58:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aurJv",
                                           "createdAt":  "2023-04-25T17:51:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "This issue won\u0027t be fixed in net6 or 7 any changes are too large to to backport.  There have been changes in net8 that will likely impact the performance positively.",
                                           "updatedAt":  "2023-04-25T17:51:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aur3A",
                                           "createdAt":  "2023-04-25T17:54:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjsb212",
                                           "body":  "So in .net 8 this will be fixed? I switched to SkiSharp as others said \u0026 performance is 100x better...but I love imagesharp for many things so this is a bummer",
                                           "updatedAt":  "2023-04-25T17:54:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pRICQ",
                                           "createdAt":  "2023-10-17T10:08:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EvgenyMuryshkin",
                                           "body":  "Same issue.\r\nNative MAUI Downsize works, but rotates image. \r\nSkiaSharp works, but also rotates images.\r\n\r\nImageSharp is the only one that works and does not rotate, but slow :(\r\nHope for MAUI 8, migration journey has been terrible.",
                                           "updatedAt":  "2023-10-17T10:08:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pRNP3",
                                           "createdAt":  "2023-10-17T10:20:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hallatore",
                                           "body":  "@EvgenyMuryshkin Are you trying to load an image with rotation metadata?\r\n\r\nTry load it with image instead of bitmap. That ensures correct rotation.\r\n\r\n```c#\r\nusing var image = SKImage.FromEncodedData(imageStream);\r\nreturn SKBitmap.FromImage(image);\r\n``` ",
                                           "updatedAt":  "2023-10-17T10:20:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pXpKt",
                                           "createdAt":  "2023-10-18T07:07:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EvgenyMuryshkin",
                                           "body":  "\u003e @EvgenyMuryshkin Are you trying to load an image with rotation metadata?\r\n\u003e \r\n\u003e Try load it with image instead of bitmap. That ensures correct rotation.\r\n\u003e \r\n\u003e ```cs\r\n\u003e using var image = SKImage.FromEncodedData(imageStream);\r\n\u003e return SKBitmap.FromImage(image);\r\n\u003e ```\r\n\r\nDoes not work on iPad, Android seems ok",
                                           "updatedAt":  "2023-10-18T07:07:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5v6Yzc",
                                           "createdAt":  "2024-01-04T18:34:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "e012345678",
                                           "body":  "Is there any workaround for the slow performance in ImageSharp for MAUI as of now 2024?",
                                           "updatedAt":  "2024-01-04T18:34:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5v69Zz",
                                           "createdAt":  "2024-01-04T20:35:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JimBobSquarePants",
                                           "body":  "You’re asking the wrong people. Ask the Maui team. \r\n\r\nEDIT. Note to self. Never use GitHub on your mobile. I thought the previous comment was in the ImageSharp downstream issue. ",
                                           "updatedAt":  "2024-01-05T10:08:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5v8tzd",
                                           "createdAt":  "2024-01-05T06:25:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e You’re asking the wrong people. Ask the Maui team.\r\n\r\nMono team, is there a way to rule out this is not (or confirm it is) caused by gsharedvt? Are there any events generated when gsharedvt code is hot? ImageSharp is generic heavy, it also uses generic virtual methods. Notice the hot stacks have methods instantiated over structs like [Rgba32](https://github.com/SixLabors/ImageSharp/blob/efd0c8e24e3f1ab3f78fa0d374fc913d7861e599/src/ImageSharp/PixelFormats/PixelImplementations/Rgba32.cs). I could easily see the perf being atrocious if every operation on a pixel changes from \"load 32 bits into a register\" to \"memcpy a statically unknown number of bytes from X to Y\". AFAIK Mono AOT lacks the analysis to figure out all necessary generic virtual method bodies and we often end up running gsharedvt versions.",
                                           "updatedAt":  "2024-01-05T06:25:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5v87Th",
                                           "createdAt":  "2024-01-05T07:25:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "gsharedvt is only used on ios, not on android.\r\n",
                                           "updatedAt":  "2024-01-05T07:25:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wCkbP",
                                           "createdAt":  "2024-01-06T15:00:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Redth",
                                           "body":  "@SamMonoRT @steveisok any updates / progress in this area? It would be great to have ImageSharp running well on MAUI platforms and WASM!",
                                           "updatedAt":  "2024-01-06T15:00:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wCniq",
                                           "createdAt":  "2024-01-06T15:46:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "Does this really affect wasm ? I tried:\r\n```\r\n        for (int i = 0; i \u003c 10; ++i) {\r\n            var fs = typeof (Test).Assembly.GetManifestResourceStream (\"Wasm.Console.V8.Sample.foo.jpg\");\r\n            var image = SixLabors.ImageSharp.Image.Load(fs);\r\n        }\r\n```\r\nAnd it runs in about 2s on wasm in AOT mode on a 2000x1500 image, so each decode takes about 0.2s.",
                                           "updatedAt":  "2024-01-06T15:46:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wCvvl",
                                           "createdAt":  "2024-01-06T17:55:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "The wasm AOT performance can probably be improved by pre seeding more generics, some methods are still interpreted because the AOT compiler doesn\u0027t know about them, like:\r\n```void SixLabors.ImageSharp.Formats.Jpeg.Components.Decoder.JpegImagePostProcessor:ConvertColorsInto\u003cSixLabors.ImageSharp.PixelFormats.Rgba32\u003e (SixLabors.ImageSharp.ImageFrame`1\u003cSixLabors.ImageSharp.PixelFormats.Rgba32\u003e)```",
                                           "updatedAt":  "2024-01-06T17:55:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wDlmN",
                                           "createdAt":  "2024-01-07T08:09:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JimBobSquarePants",
                                           "body":  "How did you determine which method required pre seeding? We’ve added a lot of method seeding to the library already but it’s been without guidance. \r\n\r\nWhat are the plans going forward to remove the requirement for pre seeding? It feels like a horrible hacky workaround. I would expect compiler analysis to do much better. ",
                                           "updatedAt":  "2024-01-07T08:09:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xai19",
                                           "createdAt":  "2024-01-21T22:15:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODiNJCA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "warappa",
                                                                               "createdAt":  "2024-04-26T10:20:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "sharpwood",
                                                                               "createdAt":  "2024-05-17T14:39:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vargaz",
                                           "body":  "The AOT compiler does appear to have problems figuring out which instances to generate. In this specific case, the caller is \r\n```ImageDecoderUtilities:Decode\u003cRgba32\u003e``` which calls ```IImageDecoderInternals::Decode``` on an argument. So in theory, the aot compiler could figure out that the call could possible go to ```JpegDecoderCore::Decode\u003cRgba32\u003e``` and generate that instance. Currently, this kind of analysis is not done.\r\n\r\nThe ImageSharp codebases unfortunately makes heavy use of generics, interfaces, valuetype generic arguments, etc., which is not very friendly to static compilation.\r\n\r\n",
                                           "updatedAt":  "2024-01-21T22:16:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-RQpk",
                                           "createdAt":  "2024-05-17T22:32:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JimBobSquarePants",
                                           "body":  "I can see that this has been removed from a performance backlog and nobody is now assigned. What can be done to change this state? ",
                                           "updatedAt":  "2024-05-17T22:32:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-RbwI",
                                           "createdAt":  "2024-05-17T23:49:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sharpwood",
                                           "body":  "This is a serious issue: ImageSharp cannot be used at all on MAUI Android.",
                                           "updatedAt":  "2024-05-17T23:49:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-W71e",
                                           "createdAt":  "2024-05-20T08:28:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e I can see that this has been removed from a performance backlog and nobody is now assigned. What can be done to change this state?\r\n\r\nCc @vitek-karas ",
                                           "updatedAt":  "2024-05-20T08:28:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6D3d0y",
                                           "createdAt":  "2024-07-07T07:35:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JimBobSquarePants",
                                           "body":  "Since there\u0027s been no movement here, I\u0027ve created a potential workaround for this particular issue in the ImageSharp codebase, but I have no means to test my changes. Would anyone be able to compile and test the code in this PR\r\n\r\nhttps://github.com/SixLabors/ImageSharp/pull/2762",
                                           "updatedAt":  "2024-07-07T07:35:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EHQkv",
                                           "createdAt":  "2024-07-09T04:35:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JimBobSquarePants",
                                           "body":  "The sample projects are gone!! 😔",
                                           "updatedAt":  "2024-07-09T04:35:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GuoHn",
                                           "createdAt":  "2024-07-31T12:08:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JimBobSquarePants",
                                           "body":  "I\u0027d like to note.  @beeradmoore has been helping me investigate Android performance issues with MAUI and we\u0027ve measured that release mode with LLVM performs adequately with the following configuration.\r\n\r\n```xml\r\n\u003cPropertyGroup Condition=\"$([MSBuild]::GetTargetPlatformIdentifier(\u0027$(TargetFramework)\u0027)) == \u0027android\u0027 AND \u0027$(Configuration)\u0027 == \u0027Release\u0027\"\u003e\r\n    \u003cEnableLLVM\u003etrue\u003c/EnableLLVM\u003e\r\n    \u003cRunAOTCompilation\u003etrue\u003c/RunAOTCompilation\u003e\r\n    \u003cAndroidEnableProfiledAot\u003efalse\u003c/AndroidEnableProfiledAot\u003e\r\n\u003c/PropertyGroup\u003e\r\n```\r\n\r\nHowever, we saw the significant performance issues highlighted in this issue running Android in Debug. I\u0027m unsure whether removing the Release configuration condiftion here allows the library to build and run correctly. Guidance here would be appreciated.\r\n\r\nRelevant discussion here:\r\n\r\nhttps://github.com/SixLabors/ImageSharp/pull/2762",
                                           "updatedAt":  "2024-07-31T12:08:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GvcJF",
                                           "createdAt":  "2024-07-31T13:53:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "@JimBobSquarePants the configuration above looks correct to me for `Release`-mode for ImageSharp usage: \"AOT everything\" + LLVM.\r\n\r\nIn Debug-mode, we have the interpreter enabled by default, which probably doesn\u0027t play nice with hardware intrinsics / vector-based math. Does `UseIntepreter=false` make things any better? This will, of course, prevent C# hot reload from working.",
                                           "updatedAt":  "2024-07-31T13:53:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GzRGt",
                                           "createdAt":  "2024-07-31T22:46:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JimBobSquarePants",
                                           "body":  "\u003e @JimBobSquarePants the configuration above looks correct to me for `Release`-mode for ImageSharp usage: \"AOT everything\" + LLVM.\r\n\u003e \r\n\u003e In Debug-mode, we have the interpreter enabled by default, which probably doesn\u0027t play nice with hardware intrinsics / vector-based math. Does `UseIntepreter=false` make things any better? This will, of course, prevent C# hot reload from working.\r\n\r\nThanks @jonathanpeppers  I don\u0027t actually have the tooling to check but this sample application can be used to test against https://github.com/beeradmoore/ImageSharpMAUITest/tree/main",
                                           "updatedAt":  "2024-07-31T22:46:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GzgXf",
                                           "createdAt":  "2024-07-31T23:22:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODsW-Rw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "JimBobSquarePants",
                                                                               "createdAt":  "2024-07-31T23:36:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "beeradmoore",
                                           "body":  "I added this which I changed from true to false to confirm it was being applied.\r\n\r\n```xml\r\n\u003cPropertyGroup Condition=\"$([MSBuild]::GetTargetPlatformIdentifier(\u0027$(TargetFramework)\u0027)) == \u0027android\u0027 AND \u0027$(Configuration)\u0027 == \u0027Debug\u0027\"\u003e\r\n    \u003cUseInterpreter\u003etrue\u003c/UseInterpreter\u003e\r\n\u003c/PropertyGroup\u003e\r\n```\r\n\r\n| Test run                | JpgLoad       |  JpgResize    | PngLoad     | PngResize   |\r\n|-------------------------|---------------|---------------|-------------|-------------|\r\n| UseInterpreter=true      | 14289.9ms     | 18556.9ms     | 123.4ms     | 344.7ms     |\r\n| ~~UseIntepreter=false~~ | ~~14285.8ms~~ | ~~18491.2ms~~ | ~~122.9ms~~ | ~~349.3ms~~ |\r\n| UseInterpreter=false    | 1157.9ms      |  1387.3ms     | 35.4ms      | 42.2ms      |\r\n\r\nWhat\u0027s interesting (and I guess explains it) is in my local source I still had this line enabled \r\n```csharp\r\n Console.WriteLine(\"Vector.IsHardwareAccelerated: \" + (System.Numerics.Vector.IsHardwareAccelerated ? \"True\" : \"False\"));\r\n ```\r\n \r\n~~This was true for my last set of release mode tests. I just checked and both of these debug modes~~\r\n \r\n\u003e ~~Vector.IsHardwareAccelerated: False~~\r\n\r\nWith `UseInterpreter=true` `Vector.IsHardwareAccelerated` is false, but with `UseInterpreter=false` `Vector.IsHardwareAccelerated` is true.\r\n\r\n\r\nEDIT: This comment was updated to fix the typo `UseIntepreter` to `UseInterpreter` and then tests were re-run.",
                                           "updatedAt":  "2024-08-01T22:26:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Gzjr5",
                                           "createdAt":  "2024-07-31T23:38:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JimBobSquarePants",
                                           "body":  "Why would intrinsics be turned off for debug mode? Not-only is that a performance concern but it also vastly transforms the profile of the running code, limiting the ability to identify codegen issues. ",
                                           "updatedAt":  "2024-07-31T23:38:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G6qN1",
                                           "createdAt":  "2024-08-01T16:53:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "@beeradmoore did I misspell above `UseIntepreter`? Sorry. Should be `UseInterpreter`?\r\n\r\nSomeone on the Mono team can comment, but it looks like hardware intrinsics for Vector is not implemented for the interpreter. It *may* be implemented for JIT on Android, if `UseInterpreter=false` (spelled correctly) makes things faster.",
                                           "updatedAt":  "2024-08-01T16:53:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G88dA",
                                           "createdAt":  "2024-08-01T22:29:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "beeradmoore",
                                           "body":  "Comment updated and tests re-run with correct spelling. Performance is a lot better, as expected `Vector.IsHardwareAccelerated` is also reporting true.\r\n\r\nAside from hot reload, is there anything else to consider when using `UseInterpreter=false`?",
                                           "updatedAt":  "2024-08-01T22:29:22Z"
                                       }
                                   ],
                         "totalCount":  76
                     },
        "title":  "Very Poor ImageSharp Performance in MAUI Android",
        "labels":  [
                       "tenet-performance",
                       "os-android",
                       "area-Codegen-meta-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85984",
        "createdAt":  "2023-05-09T16:12:09Z",
        "number":  85984,
        "author":  "fanyang-mono",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-05T17:53:42Z",
        "body":  "Add a test to `src/libraries/System.Runtime.Loader/tests/ApplyUpdateTests.cs` to do some reflection stuff with parameters",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYkJEEg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5iQkQS",
                                           "createdAt":  "2023-07-24T19:47:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "Moving to 9.0.0",
                                           "updatedAt":  "2023-07-24T19:47:12Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[Mono] Add a hot reload test for modifying parameter name",
        "labels":  [
                       "area-Codegen-meta-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86978",
        "createdAt":  "2023-05-31T21:54:45Z",
        "number":  86978,
        "author":  "SingleAccretion",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-12T17:14:23Z",
        "body":  "Reproduction:\r\n```cs\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\n\r\nvoid OuterDispatch()\r\n{\r\n    bool OuterFilter()\r\n    {\r\n        const int Size = 4096;\r\n        byte* stk = stackalloc byte[Size];\r\n        Unsafe.InitBlock(stk, 0, Size);\r\n\r\n        Console.WriteLine(\"In outer dispatch\");\r\n        return true;\r\n    }\r\n\r\n    bool doCatch = false;\r\n    try\r\n    {\r\n        void InnerDispatch()\r\n        {\r\n            bool isInInner = false;\r\n\r\n            try\r\n            {\r\n                try\r\n                {\r\n                    throw new Exception(\"Inner exception\");\r\n                }\r\n                finally\r\n                {\r\n                    doCatch = true;\r\n                    throw new Exception(\"Inner fault exception\");\r\n                }\r\n            }\r\n            catch (Exception e) when (doCatch)\r\n            {\r\n                isInInner = true;\r\n                Console.WriteLine(e.Message);\r\n            }\r\n\r\n            Console.WriteLine($\"Inner dispatch returns normally ({isInInner})!\");\r\n        }\r\n\r\n        InnerDispatch();\r\n    }\r\n    catch when (OuterFilter())\r\n    {\r\n    }\r\n}\r\n\r\nOuterDispatch();\r\n```\r\n```sh\r\n; Vanilla \u0027dotnet new wasmbrowser` adapted to work with Node\r\ndotnet publish -c Release /p:RunAOTCompilation=true /p:WasmNativeStrip=false\r\nnode --stack-trace-limit=10000 AppBundle\\main.js\r\n```\r\nExpected result (desktop CoreCLR):\r\n```\r\nIn outer dispatch\r\nInner fault exception\r\nInner dispatch returns normally (True)!\r\n```\r\nActual result:\r\n```\r\nIn outer dispatch\r\nRangeError: Maximum call stack size exceeded\r\n    at memset (wasm://wasm/04b6393e:wasm-function[31904]:0x53ea1a)\r\n    at mono_interp_exec_method (wasm://wasm/04b6393e:wasm-function[20983]:0x34c791)\r\n    at interp_entry (wasm://wasm/04b6393e:wasm-function[21059]:0x35b961)\r\n    at interp_entry_static_ret_1 (wasm://wasm/04b6393e:wasm-function[21091]:0x35c52b)\r\n    at aot_instances_aot_wrapper_gsharedvt_in_sig_obj_obj (wasm://wasm/04b6393e:wasm-function[20059]:0x323f55)\r\n    at corlib_System_SR_InternalGetResourceString_string (wasm://wasm/04b6393e:wasm-function[4148]:0xa0bc6)\r\n    at corlib_System_SR_GetResourceString_string (wasm://wasm/04b6393e:wasm-function[4150]:0xa0cea)\r\n    at corlib_System_SR_get_Arg_NullReferenceException (wasm://wasm/04b6393e:wasm-function[3586]:0x8bc3a)\r\n    at corlib_System_NullReferenceException__ctor (wasm://wasm/04b6393e:wasm-function[3585]:0x8bbad)\r\n    at aot_instances_aot_wrapper_gsharedvt_out_sig_void_this_ (wasm://wasm/04b6393e:wasm-function[19305]:0x302502)\r\n    at jit_call_cb (wasm://wasm/04b6393e:wasm-function[21107]:0x35d2aa)\r\n    at wasm://wasm/c7cbb3c6:wasm-function[1]:0x56\r\n    at do_jit_call (wasm://wasm/04b6393e:wasm-function[20993]:0x359370)\r\n    at mono_interp_exec_method (wasm://wasm/04b6393e:wasm-function[20983]:0x34d140)\r\n    at interp_runtime_invoke (wasm://wasm/04b6393e:wasm-function[21023]:0x35a1db)\r\n    at mono_jit_runtime_invoke (wasm://wasm/04b6393e:wasm-function[24739]:0x419e16)\r\n    at do_runtime_invoke (wasm://wasm/04b6393e:wasm-function[23717]:0x3e985d)\r\n    at mono_runtime_invoke_checked (wasm://wasm/04b6393e:wasm-function[23716]:0x3e9819)\r\n    at mono_runtime_object_init_handle (wasm://wasm/04b6393e:wasm-function[23715]:0x3e9799)\r\n    at mono_exception_new_by_name (wasm://wasm/04b6393e:wasm-function[22749]:0x3bbd47)\r\n    at mono_exception_from_name_domain (wasm://wasm/04b6393e:wasm-function[22748]:0x3bbc4c)\r\n    at mono_get_exception_null_reference (wasm://wasm/04b6393e:wasm-function[22761]:0x3bc557)\r\n    at interp_get_exception_null_reference (wasm://wasm/04b6393e:wasm-function[20996]:0x35953f)\r\n    at mono_interp_exec_method (wasm://wasm/04b6393e:wasm-function[20983]:0x3527c7)\r\n    at interp_run_filter (wasm://wasm/04b6393e:wasm-function[21029]:0x35a73d)\r\n    at mono_handle_exception_internal (wasm://wasm/04b6393e:wasm-function[24970]:0x429e3e)\r\n    at mono_handle_exception (wasm://wasm/04b6393e:wasm-function[24991]:0x42bd3f)\r\n    at interp_throw (wasm://wasm/04b6393e:wasm-function[21099]:0x35c8c5)\r\n    at interp_throw_ex_general (wasm://wasm/04b6393e:wasm-function[20985]:0x3588e6)\r\n    at mono_interp_exec_method (wasm://wasm/04b6393e:wasm-function[20983]:0x3527d3)\r\n    at interp_run_filter (wasm://wasm/04b6393e:wasm-function[21029]:0x35a73d)\r\n    at mono_handle_exception_internal (wasm://wasm/04b6393e:wasm-function[24970]:0x429e3e)\r\n    at mono_handle_exception (wasm://wasm/04b6393e:wasm-function[24991]:0x42bd3f)\r\n    at interp_throw (wasm://wasm/04b6393e:wasm-function[21099]:0x35c8c5)\r\n    at interp_throw_ex_general (wasm://wasm/04b6393e:wasm-function[20985]:0x3588e6)\r\n    at mono_interp_exec_method (wasm://wasm/04b6393e:wasm-function[20983]:0x3527d3)\r\n    at interp_run_filter (wasm://wasm/04b6393e:wasm-function[21029]:0x35a73d)\r\n    at mono_handle_exception_internal (wasm://wasm/04b6393e:wasm-function[24970]:0x429e3e)\r\n    at mono_handle_exception (wasm://wasm/04b6393e:wasm-function[24991]:0x42bd3f)\r\n    at interp_throw (wasm://wasm/04b6393e:wasm-function[21099]:0x35c8c5)\r\n    at interp_throw_ex_general (wasm://wasm/04b6393e:wasm-function[20985]:0x3588e6)\r\n    at mono_interp_exec_method (wasm://wasm/04b6393e:wasm-function[20983]:0x3527d3)\r\n    at interp_run_filter (wasm://wasm/04b6393e:wasm-function[21029]:0x35a73d)\r\n    at mono_handle_exception_internal (wasm://wasm/04b6393e:wasm-function[24970]:0x429e3e)\r\n    at mono_handle_exception (wasm://wasm/04b6393e:wasm-function[24991]:0x42bd3f)\r\n    at interp_throw (wasm://wasm/04b6393e:wasm-function[21099]:0x35c8c5)\r\n    at interp_throw_ex_general (wasm://wasm/04b6393e:wasm-function[20985]:0x3588e6)\r\n    at mono_interp_exec_method (wasm://wasm/04b6393e:wasm-function[20983]:0x3527d3)\r\n    at interp_run_filter (wasm://wasm/04b6393e:wasm-function[21029]:0x35a73d)\r\n    at mono_handle_exception_internal (wasm://wasm/04b6393e:wasm-function[24970]:0x429e3e)\r\n    at mono_handle_exception (wasm://wasm/04b6393e:wasm-function[24991]:0x42bd3f)\r\n    at interp_throw (wasm://wasm/04b6393e:wasm-function[21099]:0x35c8c5)\r\n    at interp_throw_ex_general (wasm://wasm/04b6393e:wasm-function[20985]:0x3588e6)\r\n    at mono_interp_exec_method (wasm://wasm/04b6393e:wasm-function[20983]:0x3527d3)\r\n    at interp_run_filter (wasm://wasm/04b6393e:wasm-function[21029]:0x35a73d)\r\n    at mono_handle_exception_internal (wasm://wasm/04b6393e:wasm-function[24970]:0x429e3e)\r\n    at mono_handle_exception (wasm://wasm/04b6393e:wasm-function[24991]:0x42bd3f)\r\n    ...\r\n    at interp_throw (wasm://wasm/04b627b2:wasm-function[21097]:0x35c823)\r\n    at interp_throw_ex_general (wasm://wasm/04b627b2:wasm-function[20983]:0x358844)\r\n    at mono_interp_exec_method (wasm://wasm/04b627b2:wasm-function[20981]:0x352aa1)\r\n    at interp_run_clause_with_il_state (wasm://wasm/04b627b2:wasm-function[21028]:0x35aa01)\r\n    at mono_handle_exception_internal (wasm://wasm/04b627b2:wasm-function[24968]:0x42a8ab)\r\n    at mini_llvmonly_throw_exception (wasm://wasm/04b627b2:wasm-function[24964]:0x42933c)\r\n    at BrowserConsole_Benchmarks__Maing__InnerDispatch_2_2_Benchmarks__c__DisplayClass2_0_ (wasm://wasm/04b627b2:wasm-function[78]:0x18c0d)\r\n    at BrowserConsole_Benchmarks__Maing__OuterDispatch_2_0 (wasm://wasm/04b627b2:wasm-function[77]:0x18adc)\r\n    at BrowserConsole_Benchmarks_Main (wasm://wasm/04b627b2:wasm-function[76]:0x18a44)\r\n```\r\nWas testing this in the context of how throwing fault handlers can essentially allow control to travel down the native stack, so the program tries to induce stack corruption, but I don\u0027t actually know if that is what\u0027s happening here.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYSQ_Qw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5do8YM",
                                           "createdAt":  "2023-05-31T21:54:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nReproduction:\r\n```cs\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\n\r\nvoid OuterDispatch()\r\n{\r\n    bool OuterFilter()\r\n    {\r\n        const int Size = 4096;\r\n        byte* stk = stackalloc byte[Size];\r\n        Unsafe.InitBlock(stk, 0, Size);\r\n\r\n        Console.WriteLine(\"In outer dispatch\");                \r\n        return true;\r\n    }\r\n\r\n    bool doCatch = false;\r\n    try\r\n    {\r\n        void InnerDispatch()\r\n        {\r\n            bool isInInner = false;\r\n\r\n            try\r\n            {\r\n                try\r\n                {\r\n                    throw new Exception(\"Inner exception\");\r\n                }\r\n                finally\r\n                {\r\n                    doCatch = true;\r\n                    throw new Exception(\"Inner fault exception\");\r\n                }\r\n            }\r\n            catch (Exception e) when (doCatch)\r\n            {\r\n                isInInner = true;\r\n                Console.WriteLine(e.Message);\r\n            }\r\n\r\n            Console.WriteLine($\"Inner dispatch returns normally ({isInInner})!\");\r\n        }\r\n\r\n        InnerDispatch();\r\n    }\r\n    catch when (OuterFilter())\r\n    {\r\n    }\r\n}\r\n\r\nOuterDispatch();\r\n```\r\n```sh\r\n; Vanilla \u0027dotnet new wasmbrowser` adapted to work with Node\r\ndotnet publish -c Release /p:RunAOTCompilation=true /p:WasmNativeStrip=false\r\nnode --stack-trace-limit=100 AppBundle\\main.js\r\n```\r\nExpected result (desktop CoreCLR):\r\n```\r\nIn outer dispatch\r\nInner fault exception\r\nInner dispatch returns normally (True)!\r\n```\r\nActual result:\r\n```\r\nIn outer dispatch\r\nRangeError: Maximum call stack size exceeded\r\n    at memset (wasm://wasm/04b6393e:wasm-function[31904]:0x53ea1a)\r\n    at mono_interp_exec_method (wasm://wasm/04b6393e:wasm-function[20983]:0x34c791)\r\n    at interp_entry (wasm://wasm/04b6393e:wasm-function[21059]:0x35b961)\r\n    at interp_entry_static_ret_1 (wasm://wasm/04b6393e:wasm-function[21091]:0x35c52b)\r\n    at aot_instances_aot_wrapper_gsharedvt_in_sig_obj_obj (wasm://wasm/04b6393e:wasm-function[20059]:0x323f55)\r\n    at corlib_System_SR_InternalGetResourceString_string (wasm://wasm/04b6393e:wasm-function[4148]:0xa0bc6)\r\n    at corlib_System_SR_GetResourceString_string (wasm://wasm/04b6393e:wasm-function[4150]:0xa0cea)\r\n    at corlib_System_SR_get_Arg_NullReferenceException (wasm://wasm/04b6393e:wasm-function[3586]:0x8bc3a)\r\n    at corlib_System_NullReferenceException__ctor (wasm://wasm/04b6393e:wasm-function[3585]:0x8bbad)\r\n    at aot_instances_aot_wrapper_gsharedvt_out_sig_void_this_ (wasm://wasm/04b6393e:wasm-function[19305]:0x302502)\r\n    at jit_call_cb (wasm://wasm/04b6393e:wasm-function[21107]:0x35d2aa)\r\n    at wasm://wasm/c7cbb3c6:wasm-function[1]:0x56\r\n    at do_jit_call (wasm://wasm/04b6393e:wasm-function[20993]:0x359370)\r\n    at mono_interp_exec_method (wasm://wasm/04b6393e:wasm-function[20983]:0x34d140)\r\n    at interp_runtime_invoke (wasm://wasm/04b6393e:wasm-function[21023]:0x35a1db)\r\n    at mono_jit_runtime_invoke (wasm://wasm/04b6393e:wasm-function[24739]:0x419e16)\r\n    at do_runtime_invoke (wasm://wasm/04b6393e:wasm-function[23717]:0x3e985d)\r\n    at mono_runtime_invoke_checked (wasm://wasm/04b6393e:wasm-function[23716]:0x3e9819)\r\n    at mono_runtime_object_init_handle (wasm://wasm/04b6393e:wasm-function[23715]:0x3e9799)\r\n    at mono_exception_new_by_name (wasm://wasm/04b6393e:wasm-function[22749]:0x3bbd47)\r\n    at mono_exception_from_name_domain (wasm://wasm/04b6393e:wasm-function[22748]:0x3bbc4c)\r\n    at mono_get_exception_null_reference (wasm://wasm/04b6393e:wasm-function[22761]:0x3bc557)\r\n    at interp_get_exception_null_reference (wasm://wasm/04b6393e:wasm-function[20996]:0x35953f)\r\n    at mono_interp_exec_method (wasm://wasm/04b6393e:wasm-function[20983]:0x3527c7)\r\n    at interp_run_filter (wasm://wasm/04b6393e:wasm-function[21029]:0x35a73d)\r\n    at mono_handle_exception_internal (wasm://wasm/04b6393e:wasm-function[24970]:0x429e3e)\r\n    at mono_handle_exception (wasm://wasm/04b6393e:wasm-function[24991]:0x42bd3f)\r\n    at interp_throw (wasm://wasm/04b6393e:wasm-function[21099]:0x35c8c5)\r\n    at interp_throw_ex_general (wasm://wasm/04b6393e:wasm-function[20985]:0x3588e6)\r\n    at mono_interp_exec_method (wasm://wasm/04b6393e:wasm-function[20983]:0x3527d3)\r\n    at interp_run_filter (wasm://wasm/04b6393e:wasm-function[21029]:0x35a73d)\r\n    at mono_handle_exception_internal (wasm://wasm/04b6393e:wasm-function[24970]:0x429e3e)\r\n    at mono_handle_exception (wasm://wasm/04b6393e:wasm-function[24991]:0x42bd3f)\r\n    at interp_throw (wasm://wasm/04b6393e:wasm-function[21099]:0x35c8c5)\r\n    at interp_throw_ex_general (wasm://wasm/04b6393e:wasm-function[20985]:0x3588e6)\r\n    at mono_interp_exec_method (wasm://wasm/04b6393e:wasm-function[20983]:0x3527d3)\r\n    at interp_run_filter (wasm://wasm/04b6393e:wasm-function[21029]:0x35a73d)\r\n    at mono_handle_exception_internal (wasm://wasm/04b6393e:wasm-function[24970]:0x429e3e)\r\n    at mono_handle_exception (wasm://wasm/04b6393e:wasm-function[24991]:0x42bd3f)\r\n    at interp_throw (wasm://wasm/04b6393e:wasm-function[21099]:0x35c8c5)\r\n    at interp_throw_ex_general (wasm://wasm/04b6393e:wasm-function[20985]:0x3588e6)\r\n    at mono_interp_exec_method (wasm://wasm/04b6393e:wasm-function[20983]:0x3527d3)\r\n    at interp_run_filter (wasm://wasm/04b6393e:wasm-function[21029]:0x35a73d)\r\n    at mono_handle_exception_internal (wasm://wasm/04b6393e:wasm-function[24970]:0x429e3e)\r\n    at mono_handle_exception (wasm://wasm/04b6393e:wasm-function[24991]:0x42bd3f)\r\n    at interp_throw (wasm://wasm/04b6393e:wasm-function[21099]:0x35c8c5)\r\n    at interp_throw_ex_general (wasm://wasm/04b6393e:wasm-function[20985]:0x3588e6)\r\n    at mono_interp_exec_method (wasm://wasm/04b6393e:wasm-function[20983]:0x3527d3)\r\n    at interp_run_filter (wasm://wasm/04b6393e:wasm-function[21029]:0x35a73d)\r\n    at mono_handle_exception_internal (wasm://wasm/04b6393e:wasm-function[24970]:0x429e3e)\r\n    at mono_handle_exception (wasm://wasm/04b6393e:wasm-function[24991]:0x42bd3f)\r\n    at interp_throw (wasm://wasm/04b6393e:wasm-function[21099]:0x35c8c5)\r\n    at interp_throw_ex_general (wasm://wasm/04b6393e:wasm-function[20985]:0x3588e6)\r\n    at mono_interp_exec_method (wasm://wasm/04b6393e:wasm-function[20983]:0x3527d3)\r\n    at interp_run_filter (wasm://wasm/04b6393e:wasm-function[21029]:0x35a73d)\r\n    at mono_handle_exception_internal (wasm://wasm/04b6393e:wasm-function[24970]:0x429e3e)\r\n    at mono_handle_exception (wasm://wasm/04b6393e:wasm-function[24991]:0x42bd3f)\r\n```\r\nWas testing this in the context of how throwing fault handlers can essentially allow control to travel down the native stack, so the program essentially tries to induce stack corruption, but I don\u0027t actually know if that is what\u0027s happening here.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eSingleAccretion\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`bug`, `arch-wasm`, `area-Codegen-meta-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-31T21:54:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dpem9",
                                           "createdAt":  "2023-06-01T00:54:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "cc @BrzVlad ",
                                           "updatedAt":  "2023-06-01T00:54:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dpnno",
                                           "createdAt":  "2023-06-01T01:30:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "This is unrelated to the test objective, if OuterFilter () is removed, it still crashes.\r\n",
                                           "updatedAt":  "2023-06-01T01:30:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dpwKp",
                                           "createdAt":  "2023-06-01T02:21:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "Looks like this line:\r\n                catch (Exception e) when (doCatch) {\r\nwhich is compiled to:\r\n```\r\n      IL_002c:  ldarg.0\r\n      IL_002d:  ldfld      bool Test/\u0027\u003c\u003ec__DisplayClass0_0\u0027::doCatch\r\n      IL_0032:  ldc.i4.0\r\n      IL_0033:  cgt.un\r\n      IL_0035:  endfilter\r\n```\r\nis causing a nullref for some reason, and the EH code tries to run the filter again, causing a stack overflow.",
                                           "updatedAt":  "2023-06-01T02:21:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dqAXX",
                                           "createdAt":  "2023-06-01T03:46:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "The crash itself is caused by this line in interp_run_clause_with_il_state ():\r\n```\r\n\tframe.stack = sp;\r\n\tframe.retval = sp;\r\n```\r\nframe.retval is going to have the same address as the first argument, so ENDFILTER will overwrite the first argument, then we will copy the overwritten value back to the corresponding argument in the AOTed method.\r\n\r\nEven if this is fixed, the test still fails.",
                                           "updatedAt":  "2023-06-01T03:46:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hJD9D",
                                           "createdAt":  "2023-07-10T21:37:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "@vargaz is this something we should keep on the table for net8?",
                                           "updatedAt":  "2023-07-10T21:37:49Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Interpreter stack overflows when trying to execute a particular EH pattern with AOT",
        "labels":  [
                       "bug",
                       "arch-wasm",
                       "area-Codegen-meta-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88066",
        "createdAt":  "2023-06-23T18:50:10Z",
        "number":  88066,
        "author":  "akurone",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-16T14:23:56Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nType layout below causes `System.TypeInitializationException` to be thrown in WASM (same code can run in a server-type project):\r\n```csharp\r\npublic sealed class TwistedType {\r\n  public static IEnumerable\u003cTwistedType\u003e TheTroubleMaker = NestedStatic.ArrayOfTwistedType.Prepend(new());\r\n\r\n  public static class NestedStatic {\r\n    public static TwistedType[] ArrayOfTwistedType = { new() };\r\n  }\r\n\r\n  public string World { get; } = \"World\";\r\n}\r\n```\r\nThe relevant member of `NestedStatic` type is referenced like:\r\n```razor\r\n\u003ch1\u003eHello, @TwistedType.NestedStatic.ArrayOfTwistedType[0].World!\u003c/h1\u003e\r\n```\n\n### Expected Behavior\n\nType initialization should be successful in WASM as in server.\n\n### Steps To Reproduce\n\nClone [this](https://github.com/akurone/BlzWasmTypeInitRepro) repo and run.\r\nVersions:\r\n- Chrome: 116.0.5829.0\r\n- .net: 7.0.304\n\n### Exceptions (if any)\n\n```console\r\nMicrosoft.AspNetCore.Components.WebAssembly.Rendering.WebAssemblyRenderer[100]\r\n      Unhandled exception rendering component: The type initializer for \u0027NestedStatic\u0027 threw an exception.\r\nSystem.TypeInitializationException: The type initializer for \u0027NestedStatic\u0027 threw an exception.\r\n ---\u003e System.TypeInitializationException: The type initializer for \u0027BlzWasmTypeInitRepro.TwistedType\u0027 threw an exception.\r\n ---\u003e System.ArgumentNullException: Value cannot be null. (Parameter \u0027source\u0027)\r\n   at System.Linq.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)\r\n   at System.Linq.Enumerable.Prepend[TwistedType](IEnumerable`1 source, TwistedType element)\r\n   at BlzWasmTypeInitRepro.TwistedType..cctor() in BlzWasmTypeInitRepro\\Types.cs:line 5\r\n   --- End of inner exception stack trace ---\r\n   at BlzWasmTypeInitRepro.TwistedType.NestedStatic..cctor() in BlzWasmTypeInitRepro\\Types.cs:line 9\r\n   --- End of inner exception stack trace ---\r\n   at BlzWasmTypeInitRepro.Pages.Index.BuildRenderTree(RenderTreeBuilder __builder) in BlzWasmTypeInitRepro\\Pages\\Index.razor:line 3\r\n   at Microsoft.AspNetCore.Components.ComponentBase.\u003c.ctor\u003eb__6_0(RenderTreeBuilder builder)\r\n   at Microsoft.AspNetCore.Components.Rendering.ComponentState.RenderIntoBatch(RenderBatchBuilder batchBuilder, RenderFragment renderFragment, Exception\u0026 renderFragmentException)\r\n```\n\n### .NET Version\n\n7.0.304\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY_8X4w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5iPRLG",
                                           "createdAt":  "2023-07-24T15:46:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nType layout below causes `System.TypeInitializationException` to be thrown in WASM (same code can run in a server-type project):\r\n```csharp\r\npublic sealed class TwistedType {\r\n  public static IEnumerable\u003cTwistedType\u003e TheTroubleMaker = NestedStatic.ArrayOfTwistedType.Prepend(new());\r\n\r\n  public static class NestedStatic {\r\n    public static TwistedType[] ArrayOfTwistedType = { new() };\r\n  }\r\n\r\n  public string World { get; } = \"World\";\r\n}\r\n```\r\nThe relevant member of `NestedStatic` type is referenced like:\r\n```razor\r\n\u003ch1\u003eHello, @TwistedType.NestedStatic.ArrayOfTwistedType[0].World!\u003c/h1\u003e\r\n```\n\n### Expected Behavior\n\nType initialization should be successful in WASM as in server.\n\n### Steps To Reproduce\n\nClone [this](https://github.com/akurone/BlzWasmTypeInitRepro) repo and run.\r\nVersions:\r\n- Chrome: 116.0.5829.0\r\n- .net: 7.0.304\n\n### Exceptions (if any)\n\n```console\r\nMicrosoft.AspNetCore.Components.WebAssembly.Rendering.WebAssemblyRenderer[100]\r\n      Unhandled exception rendering component: The type initializer for \u0027NestedStatic\u0027 threw an exception.\r\nSystem.TypeInitializationException: The type initializer for \u0027NestedStatic\u0027 threw an exception.\r\n ---\u003e System.TypeInitializationException: The type initializer for \u0027BlzWasmTypeInitRepro.TwistedType\u0027 threw an exception.\r\n ---\u003e System.ArgumentNullException: Value cannot be null. (Parameter \u0027source\u0027)\r\n   at System.Linq.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)\r\n   at System.Linq.Enumerable.Prepend[TwistedType](IEnumerable`1 source, TwistedType element)\r\n   at BlzWasmTypeInitRepro.TwistedType..cctor() in BlzWasmTypeInitRepro\\Types.cs:line 5\r\n   --- End of inner exception stack trace ---\r\n   at BlzWasmTypeInitRepro.TwistedType.NestedStatic..cctor() in BlzWasmTypeInitRepro\\Types.cs:line 9\r\n   --- End of inner exception stack trace ---\r\n   at BlzWasmTypeInitRepro.Pages.Index.BuildRenderTree(RenderTreeBuilder __builder) in BlzWasmTypeInitRepro\\Pages\\Index.razor:line 3\r\n   at Microsoft.AspNetCore.Components.ComponentBase.\u003c.ctor\u003eb__6_0(RenderTreeBuilder builder)\r\n   at Microsoft.AspNetCore.Components.Rendering.ComponentState.RenderIntoBatch(RenderBatchBuilder batchBuilder, RenderFragment renderFragment, Exception\u0026 renderFragmentException)\r\n```\n\n### .NET Version\n\n7.0.304\n\n### Anything else?\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eakurone\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `untriaged`, `area-VM-meta-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-24T15:46:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iPRaY",
                                           "createdAt":  "2023-07-24T15:47:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "/cc @lambdageek ",
                                           "updatedAt":  "2023-07-24T15:47:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iPXXb",
                                           "createdAt":  "2023-07-24T16:02:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Repros in console app using mono as the runtime:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Linq;\r\nusing System.Collections.Generic;\r\n\r\nConsole.WriteLine ($\"Hello {TwistedType.NestedStatic.ArrayOfTwistedType[0].World}\");\r\n\r\npublic sealed class TwistedType {\r\n  public static IEnumerable\u003cTwistedType\u003e TheTroubleMaker = NestedStatic.ArrayOfTwistedType.Prepend(new());\r\n\r\n  public static class NestedStatic {\r\n    public static TwistedType[] ArrayOfTwistedType = { new() };\r\n  }\r\n\r\n  public string World { get; } = \"World\";\r\n}\r\n```\r\n\r\n```console\r\n$ dotnet run --self-contained -p:UseMonoRuntime=true -r osx-arm64\r\n```\r\n\r\nAt first glance, I think this might be allowed by ECMA you cannot depend on the order of execution for static constructors...",
                                           "updatedAt":  "2023-07-24T16:02:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iPdor",
                                           "createdAt":  "2023-07-24T16:18:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "CoreCLR is also quite fragile here.  change `#if true` to `#if false` below to see a difference - the first one runs, the second one throws\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nConsole.WriteLine ($\"Hello {SecondOne.ArrayOfFirstOne[0].World}\");\r\n\r\n\r\npublic static class Helper\r\n{\r\n    public static FirstOne[] Prepend(FirstOne[] coll, FirstOne oneMore)\r\n    {\r\n        var copy = new FirstOne[coll.Length + 1];\r\n        copy[0] = oneMore;\r\n        for (int i = 0; i \u003c coll.Length; ++i)\r\n            copy[i+1] = coll[i];\r\n        return copy;\r\n    }\r\n}\r\n\r\npublic sealed class FirstOne {\r\n#if true\r\n    // this works\r\n    \r\n    public static IEnumerable\u003cFirstOne\u003e TheTroubleMaker = Helper.Prepend (SecondOne.ArrayOfFirstOne, new());\r\n\r\n#else\r\n    // this throws\r\n    \r\n    public static IEnumerable\u003cFirstOne\u003e TheTroubleMaker;\r\n\r\n    static FirstOne() {\r\n        //Console.WriteLine (\"FirstOne .cctor\");\r\n        TheTroubleMaker = Helper.Prepend (SecondOne.ArrayOfFirstOne, new());\r\n    }\r\n#endif\r\n\r\n    public string World { get; } = \"World\";\r\n}\r\n\r\n\r\npublic static class SecondOne {\r\n    public static FirstOne[] ArrayOfFirstOne = { new () };\r\n\r\n    //static SecondOne() {\r\n    //    Console.WriteLine (\"SecondOne .cctor\");\r\n    //    ArrayOfFirstOne = new FirstOne[] { new() };\r\n    //}\r\n}\r\n```",
                                           "updatedAt":  "2023-07-24T16:18:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iPodC",
                                           "createdAt":  "2023-07-24T16:51:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Hmm... comparing the IL for the working and broken versions of `FirstOne`, it looks like the working version has `beforefieldinit` and the broken one doesn\u0027t.",
                                           "updatedAt":  "2023-07-24T16:51:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iPyKz",
                                           "createdAt":  "2023-07-24T17:21:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Ok, this isn\u0027t one of the cases where ECMA allows us some leeway because of circular dependencies.  Rather, this is a case where the cctor must run \"at or before static field access\" and mono is leaning on the \"or before\" (specifically I think we run it when the instance constructor for `FirstOne` is called)\r\n\r\nIt looks like mono is calling a `beforefieldinit` static constructor even if we never touch the static fields of that class\r\n\r\n```csharp\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Collections.Generic;\r\n\r\nobject o  = SecondOne.ArrayOfFirstOne[0];\r\nConsole.WriteLine ($\"Hello {o!=null}\");\r\n\r\npublic static class Helper\r\n{\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    public static FirstOne[] PrependOne(FirstOne[] coll)\r\n    {\r\n        throw new Exception (\"Called\");\r\n    }\r\n}\r\n\r\npublic sealed class FirstOne {\r\n    public static IEnumerable\u003cFirstOne\u003e TheTroubleMaker = Helper.PrependOne (SecondOne.ArrayOfFirstOne);\r\n\r\n    public FirstOne() {}\r\n\r\n    public string World() =\u003e \"World\";\r\n}\r\n\r\npublic static class SecondOne {\r\n    public static FirstOne[] ArrayOfFirstOne = { new () };\r\n}\r\n```\r\n\r\nIt looks like we\u0027re running the cctor for `FirstOne` when `SecondOne` tries to instantiate it.  But constructor invocation for a `beforefieldinit` class is not sufficient.  _Only_ static field access (or explicit cctor invocation) should trigger it, I think.\r\n\r\nThere is a variant where instead of calling the instance constructor, we call a static method from `FirstOne`.  In this case, too, CoreCLR doesn\u0027t call the cctor for `FirstOne`\r\n\r\n\u003cdetails\u003e\r\n\u003cpre\u003e\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Collections.Generic;\r\n\r\nobject o  = SecondOne.ArrayOfFirstOne[0];\r\nConsole.WriteLine ($\"Hello {o!=null}\");\r\n\r\n\r\npublic static class Helper\r\n{\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    public static FirstOne[] PrependOne(FirstOne[] coll)\r\n    {\r\n        throw new Exception (\"Called\");\r\n    }\r\n}\r\n\r\npublic sealed class FirstOne {\r\n    public static IEnumerable\u003cFirstOne\u003e TheTroubleMaker = Helper.PrependOne (SecondOne.ArrayOfFirstOne);\r\n\r\n    public FirstOne() {}\r\n\r\n    public string World() =\u003e \"World\";\r\n\r\n    public static FirstOne SomeStaticMethod() { return null; }\r\n}\r\n\r\n\r\npublic static class SecondOne {\r\n    public static FirstOne[] ArrayOfFirstOne = { FirstOne.SomeStaticMethod () };\r\n}\r\n\u003c/pre\u003e\r\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-24T17:24:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iP0ht",
                                           "createdAt":  "2023-07-24T17:27:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "@vargaz @BrzVlad I see some calls to `mono_class_is_before_field_init` in method-to-ir, so we\u0027re aware that sometimes `beforefieldinit` means we shouldn\u0027t run the cctor.  But it looks like we do it anyway.  In the interpreter I don\u0027t see anything that looks at `beforefieldinit`, so it\u0027s probably too eager, also.\r\n",
                                           "updatedAt":  "2023-07-24T17:27:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iQCkD",
                                           "createdAt":  "2023-07-24T18:09:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "Probably a dup of:\r\nhttps://github.com/dotnet/runtime/issues/77513\r\n",
                                           "updatedAt":  "2023-07-24T18:09:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iRcAl",
                                           "createdAt":  "2023-07-24T23:04:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "I think #77513 is not quite the same. In that one, the bad static field is used in the body of a called method - it\u0027s just not on an executed path. In this one, the bad static field is not used at all in any JITted method.\nFixing 77513 seems harder",
                                           "updatedAt":  "2023-07-24T23:04:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j_xfj",
                                           "createdAt":  "2023-08-14T16:28:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LeVladIonescu",
                                           "body":  "Moving this to `Postponed to .Net9` with high priority.",
                                           "updatedAt":  "2023-08-14T16:28:01Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "[mono] Class constructor for `beforefieldinit` class runs even if static fields are not accessed",
        "labels":  [
                       "area-Codegen-meta-mono",
                       "JitUntriaged",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90092",
        "createdAt":  "2023-08-07T09:26:42Z",
        "number":  90092,
        "author":  "ivanpovazan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-21T16:24:49Z",
        "body":  "Based on discussion in: https://github.com/dotnet/runtime/issues/87924 investigate performance and size impact of enabling https://github.com/dotnet/runtime/blob/4415472b81adecf3a12b24f8c808da3f33de966b/src/libraries/System.Linq.Expressions/src/System/Dynamic/Utils/DelegateHelpers.cs#L16 to respect `DynamicCodeSupport` feature switch setting, ie:\r\n```cs\r\ninternal static bool CanEmitObjectArrayDelegate =\u003e RuntimeFeature.IsDynamicCodeSupported;;\r\n```\r\n\r\nThis means that in AOT mode the property becomes: `CanEmitObjectArrayDelegate=false` and in order to support this setting Mono would have to implement a private CoreLib API which: \r\n- creates a strongly typed Delegate (e.g. `Func\u003cint, int\u003e`) that boxes all it\u0027s arguments\r\n- puts the arguments into an array\r\n- dispatches to a `Func\u003cobject?[], object?\u003e` delegate to do the actual work, and finally\r\n- unboxes the result \r\n\r\nReferences: [comment1](https://github.com/dotnet/runtime/issues/87924#issuecomment-1614012858) and [comment2](https://github.com/dotnet/runtime/pull/61952#discussion_r756524006). \r\n\r\nThis would also align how `System.Linq.Expressions` is supported in other AOT compilers - NativeAOT.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[mono] Investigate enabling `CanEmitObjectArrayDelegate` to respect `DynamicCodeSupport` feature switch in `System.Linq.Expressions` library",
        "labels":  [
                       "area-Codegen-meta-mono",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90232",
        "createdAt":  "2023-08-09T14:31:26Z",
        "number":  90232,
        "author":  "fanyang-mono",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-04T14:30:56Z",
        "body":  "This way, we could have an idea how much space we could save at most. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhkslKQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5joVhL",
                                           "createdAt":  "2023-08-09T14:37:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @directhex\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis way, we could have an idea how much space we could save at most. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efanyang-mono\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003efanyang-mono\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Infrastructure-mono`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-09T14:37:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kDmsk",
                                           "createdAt":  "2023-08-15T09:39:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODD1Rfg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fanyang-mono",
                                                                               "createdAt":  "2023-08-16T17:02:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "Not sure if this is related to AOT compilation, but there is: https://github.com/dotnet/runtime/blob/1eb702ce1efe3581488a37704cee47603a291069/src/mono/mono/mini/aot-compiler.c#L15257 which might help you with this.",
                                           "updatedAt":  "2023-08-15T09:39:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GSyUp",
                                           "createdAt":  "2024-07-26T16:09:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "Nice to have... Moving to .NET10",
                                           "updatedAt":  "2024-07-26T16:09:50Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[Mono] Add the functionality to analyze the size of all compiled methods",
        "labels":  [
                       "area-Codegen-meta-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102891",
        "createdAt":  "2024-05-30T18:48:07Z",
        "number":  102891,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-30T20:27:24Z",
        "body":  "The IL opcodes `ldftn` / `calli` (for methods without an `[UnmanagedCallersOnly]` attribute) are compiled differently in mono in some scenarios:\r\n\r\n1. In purely JITed and non-\"llvmonly\" AOT environments, `ldftn` returns a pointer to native code and `calli` is just an indirect call. (In generic sharing there is a trampoline involved to pass an additional runtime generic context that isn\u0027t part of the normal platform calling convention)\r\n2. In \"llvmonly\" AOTed environments, `ldftn` returns a `MonoFtnDesc*` structure (used to pair up the code pointer and the rgctx arg and the `MonoMethod*`)and `calli` consumes such a thing and invokes the underlying method together with the extra arg).\r\n3. In purely interpreted non-llvmonly environments, `ldftn` returns a (sometimes tagged) `InterpMethod*` pointer that `calli` uses to adjust the interpreter state and enter into the method.\r\n4. In interpreted llvmonly environments we use `MonoFtnDesc*` for interpreted methods too, by also storing an `InterpMethod*` in the `MonoFtnDesc*` and making a decision about whether the method is AOT or interpreted.\r\n\r\nThe problem is that in a mixed AOT+interp non-\"llvmonly\" environment, we might use a combination of (1) and (3): for example we might AOT part of the app that includes an API like:\r\n\r\n```csharp\r\nnamespace MyFramework;\r\npublic class FrameworkClass\r\n{\r\n    public unsafe static int FrameworkMethod(delegate *\u003cint, int\u003e func) =\u003e func (1);\r\n}\r\n```\r\n\r\nand we might call it from interpreted use code:\r\n\r\n```csharp\r\npublic class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        unsafe\r\n        {\r\n              Console.WriteLine (MyFramework.FrameworkClass.FrameworkMethod (\u0026Helper)); // prints 2\r\n        }\r\n    }\r\n\r\n    private static int Helper(int n) =\u003e n + 1;\r\n}\r\n```\r\n\r\nThe problem is that when we interpret `Program` we will pass an `InterpMethod*` to `FrameworkMethod` whereas it expects a pointer to executable machine code, resulting in a hard to diagnose crash.\r\n\r\nThe reverse is also possible - we might be doing the `ldftn` in AOTed code (and get back a native code pointer), while the `calli` might be in interpreted code - which will expect an `InterpMethod*`.\r\n\r\nIn both cases the result is a crash",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOf5ow1w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5_l--S",
                                           "createdAt":  "2024-05-30T18:48:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @lambdageek\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-30T18:48:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_l_Gz",
                                           "createdAt":  "2024-05-30T18:48:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "FYI @BrzVlad ",
                                           "updatedAt":  "2024-05-30T18:48:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_mCBB",
                                           "createdAt":  "2024-05-30T18:52:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Not sure if we need to fix this right away or not. Since C# function pointers are `unsafe`, it seems like these kinds of mixed mode scenarios might be rare.  Also it seems like \"llvmonly\" mixed mode wouldn\u0027t have a problem.\r\n\r\nIf we can\u0027t think of a way to fix the problem without sacrificing efficiency in AOT code, it would be nice to at least detect that something has gone wrong and throw an `ExecutionEngineException` rather than having a native crash.",
                                           "updatedAt":  "2024-05-30T18:52:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_mE9R",
                                           "createdAt":  "2024-05-30T18:59:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "For targets that can JIT (Android, browser WASM), we could manufacture real ftn ptrs (trampolines?) on demand for interp code and use ftn ptrs everywhere, I think. I don\u0027t know what we\u0027d do on iOS and WASI.",
                                           "updatedAt":  "2024-05-30T18:59:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_mcOy",
                                           "createdAt":  "2024-05-30T20:06:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "\u003e  use ftn ptrs everywhere\r\n\r\nthe problem is that we\u0027d then repeatedly enter/exit the interpreter (growing/shrinking the native stack).  Currently the interpreter tries to be non-recursive and just manipulates `InterpFrames` in a loop.",
                                           "updatedAt":  "2024-05-30T20:06:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_mjDX",
                                           "createdAt":  "2024-05-30T20:27:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "\u003e \u003e use ftn ptrs everywhere\r\n\u003e \r\n\u003e the problem is that we\u0027d then repeatedly enter/exit the interpreter (growing/shrinking the native stack). Currently the interpreter tries to be non-recursive and just manipulates `InterpFrames` in a loop.\r\n\r\nwe would probably want to attach information to the trampoline that points to the interpmethod... good point though, that\u0027s messy.",
                                           "updatedAt":  "2024-05-30T20:27:24Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[Mono] Using managed function pointers in non-llvm mixed AOT + interpreted environments leads to crashes",
        "labels":  [
                       "area-Codegen-meta-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109245",
        "createdAt":  "2024-10-25T21:52:11Z",
        "number":  109245,
        "author":  "johnW-ret",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-12T16:19:52Z",
        "body":  "### Description\n\nReferencing F# code that utilizes tail calls in a C# WASM app does not perform TCO at runtime and a large enough stack will result in a `StackOverflowException`.\n\n### Reproduction Steps\nSee [johnW-ret/FsDataStackOverflowBug000](https://github.com/johnW-ret/FsDataStackOverflowBug000) reproduction.\n\n1. \n   ```pwsh\n   mkdir uselessdelete\n   cd uselessdelete\n   \n   dotnet new blazorwasm -o blazor\n   dotnet new classlib -o library -lang F#\n   \n   dotnet new sln\n   dotnet sln add blazor\n   dotnet sln add classlib\n   \n   cd blazorwasm\n   dotnet add reference ../classlib\n   ```\n2. add some F# code that should not stack overflow with TCO but would otherwise\n3. call it from the Blazor app\n4. \n   ```pwsh\n   cd ../blazor\n   dotnet run -c Release\n   ```\n\n### Expected behavior\n\n(See repro) Weather.razor L31 should not throw a `StackOverflowException`\n\n### Actual behavior\n\n(See repro) Weather.razor L31 throws a `StackOverflowException`\n\n### Regression?\n\nAround 2024-10-03, the exceptions would not be throw on `Release` configuration but they would on `Debug`. I am not sure if this was a regression at the time or not but it fixed my issue. Now it happens on all configurations.\n\n### Known Workarounds\n\nIn theory, I could pass `--tailcalls-` to `fsc` to avoid emitting the `tail.` op, but the tail call is part of a library I am consuming and I do not want to setup a git submodule and rebuild the library.\n\n### Configuration\n\n```\ndotnet --list-sdks\n6.0.427 [C:\\Program Files\\dotnet\\sdk]\n8.0.403 [C:\\Program Files\\dotnet\\sdk]\n```\n\n- Microsoft Windows [Version 10.0.26100.2033]\n- x64\n- Blazor: Microsoft Edge\n\n### Other information\n\nNo matter whether I pass `true` or `false` for `BlazorWebAssemblyJiterpreter`, the exception is still thrown.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOklVXdg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6RX8MP",
                                           "createdAt":  "2024-10-25T22:36:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @lambdageek\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-25T22:36:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RaQ4m",
                                           "createdAt":  "2024-10-26T13:15:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-26T13:15:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RaROJ",
                                           "createdAt":  "2024-10-26T13:19:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "In theory the interpreter should be able to handle tailcalls, but maybe we regressed? or there\u0027s some non-obvious interaction with AOT?",
                                           "updatedAt":  "2024-10-26T13:19:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SVVdW",
                                           "createdAt":  "2024-11-04T15:48:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @brzvlad, @kotlarmilos\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-04T15:48:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SVVd2",
                                           "createdAt":  "2024-11-04T15:48:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @lambdageek\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-04T15:48:44Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "`StackOverflowException` for WASM app with `tail.` instruction",
        "labels":  [
                       "arch-wasm",
                       "area-Codegen-meta-mono",
                       "area-Codegen-Interpreter-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109338",
        "createdAt":  "2024-10-29T13:09:04Z",
        "number":  109338,
        "author":  "RReverser",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-19T12:25:02Z",
        "body":  "### Description\n\nWe\u0027re using `DllImport` / `UnmanagedCallersOnly` to build Wasm libraries for a custom host API.\n\nI noticed that some of our functions crash when invoked as Wasm exports, and through further experimentation with .NET 9 I finally pinpointed it to the number of arguments - any function with \u003c= 8 arguments works fine with `UnmanagedCallersOnly` but those with 9+ crash.\n\n### Reproduction Steps\n\nI\u0027m having trouble extracting minimal config since we use a build that stubs out all the WASI imports, but I imagine the config used for https://github.com/dotnet/runtime/blob/9873d40043d3739e4b7efa99a4dbd47a8922603b/src/mono/wasi/testassets/Native.cs should reproduce the issue in exactly the same way.\n\nAs for the code, a minimal repro is:\n\n```cs\nusing System.Runtime.InteropServices;\n\npublic static class Methods\n{\n    [UnmanagedCallersOnly(EntryPoint = \"test8\")]\n    public static void Test8(uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7, uint a8) {}\n\n    [UnmanagedCallersOnly(EntryPoint = \"test9\")]\n    public static void Test9(uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7, uint a8, uint a9) {}\n}\n```\n\nThis is a sample script I\u0027m using when WASI imports are stubbed out:\n\n```js\nvar bin = require(\u0027fs\u0027).readFileSync(\n  `bin/Release/net9.0/AppBundle/StdbModule.wasm`\n);\nvar mod = new WebAssembly.Module(bin);\nvar inst = new WebAssembly.Instance(mod, {});\nconsole.log(\u0027Test 8:\u0027);\nconsole.log(inst.exports.test8());\nconsole.log(\u0027Test 9:\u0027);\nconsole.log(inst.exports.test9());\n```\n\n### Expected behavior\n\nWhen invoked with `0, 0, 0, ...`, both functions execute successfully.\n\n### Actual behavior\n\n```\n\u003e node test\nTest 8:\nundefined\nTest 9:\nwasm://wasm/01610672:1\n\n\nRuntimeError: null function or function signature mismatch\n    at wasm://wasm/01610672:wasm-function[7]:0x5be3\n    at Object.\u003canonymous\u003e (D:\\testwasm\\test.js:9:26)\n    at Module._compile (node:internal/modules/cjs/loader:1568:14)\n    at Object..js (node:internal/modules/cjs/loader:1711:10)\n    at Module.load (node:internal/modules/cjs/loader:1328:32)\n    at Function._load (node:internal/modules/cjs/loader:1138:12)\n    at TracingChannel.traceSync (node:diagnostics_channel:315:14)\n    at wrapModuleLoad (node:internal/modules/cjs/loader:218:24)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:170:5)\n    at node:internal/main/run_main_module:36:49\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 9.0.0-rc.2.24473.5\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkbH1LA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Rr9DY",
                                           "createdAt":  "2024-10-29T13:22:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-29T13:22:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Rr9e4",
                                           "createdAt":  "2024-10-29T13:23:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @lambdageek\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-29T13:23:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RsfUs",
                                           "createdAt":  "2024-10-29T14:00:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RReverser",
                                           "body":  "\u003e Known Workarounds\n\nLooks like, as a temporary workaround, I can at least add a custom wrapper on the C side that collects all arguments into a struct, passes that struct by reference to the actual C# method, and exports itself instead:\n\n```c\ntypedef struct {\n  int32_t a1;\n  int32_t a2;\n  int32_t a3;\n  int32_t a4;\n  int32_t a5;\n  int32_t a6;\n  int32_t a7;\n  int32_t a8;\n  int32_t a9;\n} Args9;\n\nextern int32_t test9_impl(const Args9* args);\n\n__attribute__((export_name(\"test9\")))\nvoid test9(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9) {\n  Args9 args = { a1, a2, a3, a4, a5, a6, a7, a8, a9 };\n  test9_impl(\u0026args);\n}\n```\n\n```cs\n[StructLayout(LayoutKind.Sequential)]\npublic ref struct Args9\n{\n    public uint a1;\n    public uint a2;\n    public uint a3;\n    public uint a4;\n    public uint a5;\n    public uint a6;\n    public uint a7;\n    public uint a8;\n    public uint a9;\n}\n\n[UnmanagedCallersOnly(EntryPoint = \"test9_impl\")]\npublic static unsafe void Test9(Args9* args9) {}\n```\n\nThis approach works when C is linked via `\u003cNativeLibrary\u003e`, but, of course this is pretty noisy and brittle.\n\nAs a side-note: why do I have to use `Args9*` on C# side? When I accept the struct itself, I\u0027m getting stack overflow inside Wasm, even though from the Wasm C ABI standpoint both usages should be equivalent (it mandates that structs with \u003e1 item are always passed by reference).",
                                           "updatedAt":  "2024-10-29T14:00:12Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Wasm UnmanagedCallersOnly doesn\u0027t work for \u003e8 arguments",
        "labels":  [
                       "arch-wasm",
                       "area-Codegen-meta-mono",
                       "os-wasi"
                   ]
    }
]
