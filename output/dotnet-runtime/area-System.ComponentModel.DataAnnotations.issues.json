[
    {
        "url":  "https://github.com/dotnet/runtime/issues/40408",
        "createdAt":  "2020-08-05T20:04:59Z",
        "number":  40408,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7RO_Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Zerotask",
                                            "createdAt":  "2020-08-06T22:17:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "teemka",
                                            "createdAt":  "2020-11-15T21:52:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Therzok",
                                            "createdAt":  "2021-05-01T16:16:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kjanos0502",
                                            "createdAt":  "2021-05-10T07:59:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ViIvanov",
                                            "createdAt":  "2021-09-12T08:21:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PumaMargo",
                                            "createdAt":  "2022-06-13T17:15:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austeja-bentley",
                                            "createdAt":  "2022-12-05T12:15:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "warnaa",
                                            "createdAt":  "2023-07-31T08:31:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rabadash8820",
                                            "createdAt":  "2023-08-08T05:13:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "syoguran",
                                            "createdAt":  "2023-10-13T09:20:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sibusten",
                                            "createdAt":  "2023-11-15T19:46:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ActJV",
                                            "createdAt":  "2024-02-01T13:05:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-07-11T14:24:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nunohpinheiro",
                                            "createdAt":  "2024-08-06T10:41:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aetos382",
                                            "createdAt":  "2024-09-24T11:09:01Z"
                                        }
                                    ],
                          "totalCount":  15
                      },
        "updatedAt":  "2024-09-24T11:11:08Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/1077458/add-minvalueattribute-and-maxvalueattribute-for-mo.html)._\n\n---\n\u003cp\u003eLet\u0027s say we have a model with a string property \u003cstrong\u003eName\u003c/strong\u003e. You can define attributes like \u003ca href=\"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.minlengthattribute?view=netcore-3.1\" target=_blank\u003eMinLength\u003c/a\u003e or \u003ca href=\"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.maxlengthattribute?view=netcore-3.1\" target=_blank\u003eMaxLength\u003c/a\u003e (which are part of \u003ca href=\"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations?view=netcore-3.1\" target=_blank\u003eSystem.ComponentModel.DataAnnotations\u003c/a\u003e).\u003c/p\u003e\u003cpre\u003e[MaxLength(40)]\n[MinLength(4)]\npublic string Name { get; set; }\n\u003c/pre\u003e\u003cp\u003eNow we add an int property \u003cstrong\u003eAge\u003c/strong\u003e and want to specify a min value of 21. At the moment you would have to use the RangeAttribute like the following examples show (or create your own attribute class), because there is no way to define a minimum or maximum value.\u003c/p\u003e\u003cpre\u003e[Range(21, Int32.MaxValue)]\npublic int Age { get; set; }\n\u003c/pre\u003e\u003cp\u003eor if we want to say the max value is 40\u003c/p\u003e\u003cpre\u003e[Range(0, 40)]\npublic int Age { get; set; }\n\u003c/pre\u003e\u003cp\u003eThere might also be cases where you don\u0027t want to allow the int value 0. Then you would write that like\u003c/p\u003e\u003cpre\u003e[Range(1, Int32.MaxValue)]\npublic int Age { get; set; }\n\u003c/pre\u003e\u003cp\u003eWe always have to define a range and have to specify additional information. Sometimes you don\u0027t want to specify the other range part or you don\u0027t know it.\u003c/p\u003e\u003cp\u003eIt would be easier to read and write and more similar to string validation, if there would be the attributes \u003cstrong\u003eMinValue\u003c/strong\u003e and \u003cstrong\u003eMaxValue\u003c/strong\u003e, so you can define the 3 previous examples like this:\u003c/p\u003e\u003cpre\u003e[MinValue(21)]\npublic int Age { get; set; }\n\u003c/pre\u003e\u003cpre\u003e[MaxValue(40)]\npublic int Age { get; set; }\u003c/pre\u003e\u003cpre\u003e[MinValue(1)]\npublic int Age { get; set; }\n\u003c/pre\u003e\n\n---\n### Original Comments\n\n#### Feedback Bot on 6/15/2020, 02:51 AM: \n\nThank you for taking the time to provide your suggestion.\u0026nbsp; We will do some preliminary checks to make sure we can proceed further.\u0026nbsp; We\u0027ll provide an update once the issue has been triaged by the product team.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjVH94Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2OTQ3MTc2Ng==",
                                           "createdAt":  "2020-08-05T20:05:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-05T20:05:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C7XFF",
                                           "createdAt":  "2022-05-10T21:03:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vmonatko",
                                           "body":  "Like this idea because possible to add different ErrorMessage when the value is greater than or less than limits.",
                                           "updatedAt":  "2022-05-10T21:03:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YUKnN",
                                           "createdAt":  "2023-03-23T18:15:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yigdo",
                                           "body":  "This idea would simplify the process a lot. I like it.",
                                           "updatedAt":  "2023-03-23T18:15:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Edg0e",
                                           "createdAt":  "2024-07-11T08:23:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpR1oA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "ActJV",
                                                                               "createdAt":  "2024-07-11T08:26:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gabrielgfaria",
                                           "body":  "I\u0027m interested in this one, can I start working on it?",
                                           "updatedAt":  "2024-07-11T08:23:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NUf3h",
                                           "createdAt":  "2024-09-24T11:11:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aetos382",
                                           "body":  "It is a duplicate of #38548",
                                           "updatedAt":  "2024-09-24T11:11:07Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Add MinValueAttribute and MaxValueAttribute for Model Validation - [MinValue()] [MaxValue()]",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43652",
        "createdAt":  "2020-10-20T13:23:51Z",
        "number":  43652,
        "author":  "MarkTMcp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-28T16:51:00Z",
        "body":  "Under RC2 the following exception is raised trying to validate an instance of an EF entity:\r\nEither ErrorMessageString or ErrorMessageResourceName must be set, but not both.\r\nThis worked correctly in RC1\r\n\r\n```c#\r\n            try\r\n            {\r\n                var validationResults = new List\u003cValidationResult\u003e();\r\n                if (!Validator.TryValidateObject(Task, new ValidationContext(Task), validationResults, true))\r\n                {\r\n                    foreach (ValidationResult vresult in validationResults)\r\n                    {\r\n                        string fieldnames = \"\";\r\n                        foreach (string field in vresult.MemberNames)\r\n                        {\r\n                            fieldnames += field + \",\";\r\n                        }\r\n                        fieldnames = fieldnames.Substring(0, fieldnames.Length - 1);\r\n                        _validationErrors.Add(fieldnames + \" - \" + vresult.ErrorMessage);\r\n                    }\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _validationErrors.Add(ex.Message);\r\n            }\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWKYKkg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMzA3Njk4MA==",
                                           "createdAt":  "2020-10-20T19:06:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mairaw",
                                           "body":  "@JeremyLikness @ajcvickers would this be your area?",
                                           "updatedAt":  "2020-10-20T19:06:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMzA3ODUyNQ==",
                                           "createdAt":  "2020-10-20T19:09:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@mairaw This isn\u0027t related to EF. It could be related to the validation change that @pranavkm made for Blazer. /cc @mkArtakMSFT ",
                                           "updatedAt":  "2020-10-20T19:09:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMzA4NjI2NQ==",
                                           "createdAt":  "2020-10-20T19:24:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-20T19:24:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMzA5NjgwMA==",
                                           "createdAt":  "2020-10-20T19:44:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarkTMcp",
                                           "body":  "I uncovered this error in a WPF .NET 5 RC2.",
                                           "updatedAt":  "2020-10-20T19:44:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTMxODE2MQ==",
                                           "createdAt":  "2021-07-13T18:47:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@pranavkm @mkArtakMSFT Did you get a chance to look at this?",
                                           "updatedAt":  "2021-07-13T18:47:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YpgqS",
                                           "createdAt":  "2023-03-28T16:51:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nick-acosta",
                                           "body":  "Any update on this?",
                                           "updatedAt":  "2023-03-28T16:51:00Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Validator.TryValidateObject failed",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/46495",
        "createdAt":  "2021-01-01T08:51:35Z",
        "number":  46495,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-12T17:39:15Z",
        "body":  "`\u003cGenerateResxSourceIncludeDefaultValues\u003etrue\u003c/GenerateResxSourceIncludeDefaultValues \u003e` in combinations with `UseSystemResourceKeys` produces messages like this:\r\n\r\n`Unhandled Exception: System.Exception: Exception of type \u0027{0}\u0027 was thrown., System.Exception` - we don\u0027t run String.Format in `SR.Format` when `UseSystemResourceKeys` is set because we don\u0027t expect that string to have formatting characters.\r\n\r\nhttps://github.com/dotnet/runtime/pull/42274 is probably not the right fix without changes to the SR class.\r\n\r\nFound this by accident when doing something in NativeAOT branch and GenerateResxSourceIncludeDefaultValues  was causing me trouble.\r\n\r\nCc @eerhardt ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLYJdaA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MzI4ODExMw==",
                                           "createdAt":  "2021-01-01T08:51:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n`\u003cGenerateResxSourceIncludeDefaultValues\u003etrue\u003c/GenerateResxSourceIncludeDefaultValues \u003e` in combinations with `UseSystemResourceKeys` produces messages like this:\r\n\r\n`Unhandled Exception: System.Exception: Exception of type \u0027{0}\u0027 was thrown., System.Exception` - we don\u0027t run String.Format in `SR.Format` when `UseSystemResourceKeys` is set because we don\u0027t expect that string to have formatting characters.\r\n\r\nhttps://github.com/dotnet/runtime/pull/42274 is probably not the right fix without changes to the SR class.\r\n\r\nFound this by accident when doing something in NativeAOT branch and GenerateResxSourceIncludeDefaultValues  was causing me trouble.\r\n\r\nCc @eerhardt \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-01T08:51:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MzE0NDM2Nw==",
                                           "createdAt":  "2021-01-19T21:12:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "tagging @joperezr \r\n\r\nThinking off the top of my head, we could possibly:\r\n\r\n1. Introduce a new internal \"feature switch\" to `SR` that is set when `GenerateResxSourceIncludeDefaultValues` is set on a library that tells `SR.Format` to ignore if `UsingResourceKeys()` is set and always call `string.Format`.\r\n2. We could change `SR.Format` when `UsingResourceKeys()` is set to look for literally `{0`, and use `string.Format` if it sees an argument placeholder.\r\n3. To fix this specific case, we could change all usages of `SR.Format` in `ComponentModel.DataAnnotations` to call `string.Format` directly.",
                                           "updatedAt":  "2021-01-19T21:12:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MzUxODMxMg==",
                                           "createdAt":  "2021-01-20T10:51:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "We should ideally avoid bringing an unconditional reference to `string.Format` - besides the formatting implementation itself, it brings in implementations of `IFormattable` on everything. It\u0027s not very trim friendly. `UsingResourceKeys` should ideally be as low overhead as possible.\r\n\r\nI would lean towards 3 - the reason why we have SR.Format in the first place is to make things work when UsingResourceKeys, and here we explicitly don\u0027t want that behavior.\r\n\r\nIt would be great if we could add some sort of poison that would cause a build break if someone \"fixes\" this back to `SR.Format`. Maybe we could put `SR.Format` implementation in the common directory under an `#ifndef NO_SR_FORMAT` and define that symbol for the DataAnnotations assembly.",
                                           "updatedAt":  "2021-01-20T10:51:47Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ComponentModel.DataAnnotations resources are probably not formatted right",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47278",
        "createdAt":  "2021-01-21T15:37:21Z",
        "number":  47278,
        "author":  "TjeuKayim",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-12T17:42:01Z",
        "body":  "### Describe the bug\r\n\r\nThe validation for a `uint` query parameter with `RangeAttribute` can cause `System.OverflowException` instead of responding with status code 400 Bad Request.\r\n\r\n### To Reproduce\r\n\r\nCreate a new ASP.NET 5 Web API project, add this method to the controller:\r\n\r\n```cs\r\n[HttpGet(\"/echo\")]\r\npublic uint Echo([FromQuery, Range(0, 7)] uint a)\r\n{\r\n    return a;\r\n}\r\n```\r\n\r\n```\r\ndotnet run\r\ncurl https://localhost:5001/echo?a=4000000000\r\n```\r\n\r\n### Exceptions\r\n\r\n```log\r\nfail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[1]\r\n      An unhandled exception has occurred while executing the request.\r\n      System.OverflowException: Value was either too large or too small for an Int32.\r\n         at System.Convert.ThrowInt32OverflowException()\r\n         at System.UInt32.System.IConvertible.ToInt32(IFormatProvider provider)\r\n         at System.Convert.ToInt32(Object value, IFormatProvider provider)\r\n         at System.ComponentModel.DataAnnotations.RangeAttribute.\u003c\u003ec.\u003cSetupConversion\u003eb__29_0(Object v)\r\n         at System.ComponentModel.DataAnnotations.RangeAttribute.IsValid(Object value)\r\n         at System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(Object value, ValidationContext validationContext)\r\n         at System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(Object value, ValidationContext validationContext)\r\n         at Microsoft.AspNetCore.Mvc.DataAnnotations.DataAnnotationsModelValidator.Validate(ModelValidationContext validationContext)\r\n         at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.ValidateNode()\r\n         at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.VisitSimpleType()\r\n         at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.VisitImplementation(ModelMetadata\u0026 metadata, String\u0026 key, Object model)\r\n         at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Visit(ModelMetadata metadata, String key, Object model)\r\n         at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Validate(ModelMetadata metadata, String key, Object model, Boolean alwaysValidateAtTopLevel, Object container)\r\n         at Microsoft.AspNetCore.Mvc.ModelBinding.ObjectModelValidator.Validate(ActionContext actionContext, ValidationStateDictionary validationState, String prefix, Object model, ModelMetadata metadata, Object container)\r\n         at Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.EnforceBindRequiredAndValidate(ObjectModelValidator baseObjectValidator, ActionContext actionContext, ParameterDescriptor parameter, ModelMetadata metadata, ModelBindingContext modelBindingContext, ModelBindingResult modelBindingResult, Object container)\r\n         at Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.BindModelAsync(ActionContext actionContext, IModelBinder modelBinder, IValueProvider valueProvider, ParameterDescriptor parameter, ModelMetadata metadata, Object value, Object container)\r\n         at Microsoft.AspNetCore.Mvc.Controllers.ControllerBinderDelegateProvider.\u003c\u003ec__DisplayClass0_0.\u003c\u003cCreateBinderDelegate\u003eg__Bind|0\u003ed.MoveNext()\r\n```\r\n\r\n### Further technical details\r\n\r\n- ASP.NET version 5\r\n- Output of `dotnet --info`\r\n\r\n```txt\r\ndotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.200-preview.20601.7\r\n Commit:    b3b934bbf2\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.200-preview.20601.7\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.2\r\n  Commit:  cb5f173b96\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLZa7ow==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NDc2MjA0Mg==",
                                           "createdAt":  "2021-01-21T16:18:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Describe the bug\r\n\r\nThe validation for a `uint` query parameter with `RangeAttribute` can cause `System.OverflowException` instead of responding with status code 400 Bad Request.\r\n\r\n### To Reproduce\r\n\r\nCreate a new ASP.NET 5 Web API project, add this method to the controller:\r\n\r\n```cs\r\n[HttpGet(\"/echo\")]\r\npublic uint Echo([FromQuery, Range(0, 7)] uint a)\r\n{\r\n    return a;\r\n}\r\n```\r\n\r\n```\r\ndotnet run\r\ncurl https://localhost:5001/echo?a=4000000000\r\n```\r\n\r\n### Exceptions\r\n\r\n```log\r\nfail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[1]\r\n      An unhandled exception has occurred while executing the request.\r\n      System.OverflowException: Value was either too large or too small for an Int32.\r\n         at System.Convert.ThrowInt32OverflowException()\r\n         at System.UInt32.System.IConvertible.ToInt32(IFormatProvider provider)\r\n         at System.Convert.ToInt32(Object value, IFormatProvider provider)\r\n         at System.ComponentModel.DataAnnotations.RangeAttribute.\u003c\u003ec.\u003cSetupConversion\u003eb__29_0(Object v)\r\n         at System.ComponentModel.DataAnnotations.RangeAttribute.IsValid(Object value)\r\n         at System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(Object value, ValidationContext validationContext)\r\n         at System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(Object value, ValidationContext validationContext)\r\n         at Microsoft.AspNetCore.Mvc.DataAnnotations.DataAnnotationsModelValidator.Validate(ModelValidationContext validationContext)\r\n         at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.ValidateNode()\r\n         at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.VisitSimpleType()\r\n         at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.VisitImplementation(ModelMetadata\u0026 metadata, String\u0026 key, Object model)\r\n         at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Visit(ModelMetadata metadata, String key, Object model)\r\n         at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Validate(ModelMetadata metadata, String key, Object model, Boolean alwaysValidateAtTopLevel, Object container)\r\n         at Microsoft.AspNetCore.Mvc.ModelBinding.ObjectModelValidator.Validate(ActionContext actionContext, ValidationStateDictionary validationState, String prefix, Object model, ModelMetadata metadata, Object container)\r\n         at Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.EnforceBindRequiredAndValidate(ObjectModelValidator baseObjectValidator, ActionContext actionContext, ParameterDescriptor parameter, ModelMetadata metadata, ModelBindingContext modelBindingContext, ModelBindingResult modelBindingResult, Object container)\r\n         at Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.BindModelAsync(ActionContext actionContext, IModelBinder modelBinder, IValueProvider valueProvider, ParameterDescriptor parameter, ModelMetadata metadata, Object value, Object container)\r\n         at Microsoft.AspNetCore.Mvc.Controllers.ControllerBinderDelegateProvider.\u003c\u003ec__DisplayClass0_0.\u003c\u003cCreateBinderDelegate\u003eg__Bind|0\u003ed.MoveNext()\r\n```\r\n\r\n### Further technical details\r\n\r\n- ASP.NET version 5\r\n- Output of `dotnet --info`\r\n\r\n```txt\r\ndotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.200-preview.20601.7\r\n Commit:    b3b934bbf2\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.200-preview.20601.7\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.2\r\n  Commit:  cb5f173b96\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTjeuKayim\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-21T16:18:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NDg0NjU4OA==",
                                           "createdAt":  "2021-01-21T18:24:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "This happens because `Range(0, 7)` is using the `Range(int, int)` constructor.  As such, it\u0027s trying to convert the supplied uint value of 4,000,000,000 to an int, which results in an overflow.  I don\u0027t know whether that\u0027s the desired behavior for RangeValidator.IsValid, but presumably it should just have another catch for OverflowException at:\r\nhttps://github.com/dotnet/runtime/blob/5761dd49339911241209c1ffd61105a94edb6df1/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/RangeAttribute.cs#L124-L135\r\n\r\nRegardless, as a workaround you should be able to use `Range(typeof(uint), \"0\", \"7\")` instead.",
                                           "updatedAt":  "2021-01-21T18:25:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NDg1MzE1NQ==",
                                           "createdAt":  "2021-01-21T18:36:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TjeuKayim",
                                           "body":  "Thanks for the explanation!",
                                           "updatedAt":  "2021-01-21T18:36:30Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Validating uint with Range causes OverflowException",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47602",
        "createdAt":  "2021-01-28T21:24:37Z",
        "number":  47602,
        "author":  "onionhammer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3X82A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "triforcely",
                                            "createdAt":  "2023-08-03T11:37:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CaringDev",
                                            "createdAt":  "2023-08-07T21:22:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dynamikus",
                                            "createdAt":  "2024-04-21T16:01:38Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2023-08-07T21:21:10Z",
        "body":  "In .NET 5, with a record like this:\r\n\r\nthe properties are validated\r\n```C#\r\n\r\n    public record SomeConfiguration() : PartnerEndpoint()\r\n    {\r\n        [Required, RegularExpression(@\"^https?:\\/\\/.+$\")]\r\n        [Display(Name = \"Endpoint\")]\r\n        public string Endpoint { get; init; }\r\n        \r\n        [Required, MinLength(5)]\r\n        [Display(Name = \"API Key\")]\r\n        public string APIKey { get; init; }\r\n        \r\n        [Required, Display(Name = \"Lender Id\")]\r\n        public string LenderId { get; init; }\r\n    }\r\n```\r\nbut like this the attributes are not validated:\r\n\r\n```C#\r\n    public record SomeConfiguration(\r\n        [Required, RegularExpression(@\"^https?:\\/\\/.+$\")]\r\n        [Display(Name = \"Endpoint\")]\r\n        string Endpoint,\r\n\r\n        [Required, MinLength(5)]\r\n        [Display(Name = \"API Key\")]\r\n        string APIKey,\r\n        \r\n        [Required, Display(Name = \"Lender Id\")]\r\n        string LenderId\r\n) : PartnerEndpoint();\r\n```\r\n\r\nusing `System.ComponentModel.DataAnnotations.Validator.TryValidateObject`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY3Sy1Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTQyNDgzMg==",
                                           "createdAt":  "2021-01-28T21:55:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-01-28T21:55:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTQyNDkyNQ==",
                                           "createdAt":  "2021-01-28T21:55:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn .NET 5, with a record like this:\r\n\r\nthe properties are validated\r\n```C#\r\n\r\n    public record SomeConfiguration() : PartnerEndpoint()\r\n    {\r\n        [Required, RegularExpression(@\"^https?:\\/\\/.+$\")]\r\n        [Display(Name = \"Endpoint\")]\r\n        public string Endpoint { get; init; }\r\n        \r\n        [Required, MinLength(5)]\r\n        [Display(Name = \"API Key\")]\r\n        public string APIKey { get; init; }\r\n        \r\n        [Required, Display(Name = \"Lender Id\")]\r\n        public string LenderId { get; init; }\r\n    }\r\n```\r\nbut like this the attributes are not validated:\r\n\r\n```C#\r\n    public record SomeConfiguration(\r\n        [Required, RegularExpression(@\"^https?:\\/\\/.+$\")]\r\n        [Display(Name = \"Endpoint\")]\r\n        string Endpoint,\r\n\r\n        [Required, MinLength(5)]\r\n        [Display(Name = \"API Key\")]\r\n        string APIKey,\r\n        \r\n        [Required, Display(Name = \"Lender Id\")]\r\n        string LenderId\r\n) : PartnerEndpoint();\r\n```\r\n\r\nusing `System.ComponentModel.DataAnnotations.Validator.TryValidateObject`\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eonionhammer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-28T21:55:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTQyNTcxNQ==",
                                           "createdAt":  "2021-01-28T21:56:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pranavkm",
                                           "body":  "MVC added support for validating constructor parameters, but data annotations does not support validating constructor argumments (including primary constructors). This is a feature ask.",
                                           "updatedAt":  "2021-01-28T21:56:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3OTA3OTQ5Nw==",
                                           "createdAt":  "2021-02-15T09:15:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CaringDev",
                                           "body":  "As a (hopefully temporary) workaround I resorted to `public record Foo([property: Required] string Bar)`",
                                           "updatedAt":  "2021-02-15T09:15:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jZxFt",
                                           "createdAt":  "2023-08-07T11:40:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e As a (hopefully temporary) workaround\r\n\r\nThat\u0027s not a workaround, it\u0027s how you annotate properties in positional records (attributes without the `property:` qualifier annotate the equivalent constructor parameters). Closing as addressed.",
                                           "updatedAt":  "2023-08-07T11:40:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jaqBA",
                                           "createdAt":  "2023-08-07T14:09:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CaringDev",
                                           "body":  "\u003e \u003e As a (hopefully temporary) workaround\n\u003e \n\u003e \n\u003e \n\u003e That\u0027s not a workaround, it\u0027s how you annotate properties in positional records (attributes without the `property:` qualifier annotate the equivalent constructor parameters). Closing as addressed.\n\nI was hoping for DA to eventually support ctor attributes. That\u0027s why I mentioned \"temporary\"... so \u0027addressed\u0027 == \u0027won\u0027t fix\u0027 as mentioned elsewhere.",
                                           "updatedAt":  "2023-08-07T14:09:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jdLLV",
                                           "createdAt":  "2023-08-07T21:21:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODC8fGw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "CaringDev",
                                                                               "createdAt":  "2023-08-07T21:23:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I think I misunderstood the ask then, my mistake.",
                                           "updatedAt":  "2023-08-07T21:21:10Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Record parameters with data annotations not validated",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49765",
        "createdAt":  "2021-03-17T16:22:04Z",
        "number":  49765,
        "author":  "alexj123",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-12T17:46:29Z",
        "body":  "\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\n--\u003e\r\n\r\n### The problem\r\nI am manually validating my object using the `Validator.cs` class, which populates a list of `ValidationResult`. However, when combining this with localization, the error messages of these validation results are not translated.\r\n\r\nE.g. I have an object `Example` with the following validation attribute:\r\n```csharp\r\n        [RegularExpression(@\"\\d+\", ErrorMessage = \"{0} must be a number.\")]\r\n        public string Id { get; set; } = null!;\r\n```\r\nWhere \"{0} must be a number.\" is the key in the default culture for translation. It translates to for example dutch and I validate the object in the following way:\r\n```csharp\r\n        // o is an object with a validation attribute, such a RegularExpressionAttribute.\r\n        var o = new Example { Id = \"abc\" };\r\n        var vc = new ValidationContext(o);\r\n        var results = new List\u003cValidationResult\u003e();\r\n            \r\n        var r = Validator.TryValidateObject(o, vc, results, true);\r\n```\r\nThe error message for the validation attribute of the regular expression will always be \"Id must be a number.\", thus not using the default (or any other) culture to correctly localize the message. \r\n\r\nThis only an issue when manually validating an object, the message is correctly translated when it is automatically validated by .net (in a controller).\r\n\r\n### A possible solution\r\n\r\nA solution to this would be the option to add some way of telling the `ValidationContext` which culture, resource, or localizer to use. \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOL8GvAQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMTIyMjQwMQ==",
                                           "createdAt":  "2021-03-17T16:23:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\n--\u003e\r\n\r\n### The problem\r\nI am manually validating my object using the `Validator.cs` class, which populates a list of `ValidationResult`. However, when combining this with localization, the error messages of these validation results are not translated.\r\n\r\nE.g. I have an object `Example` with the following validation attribute:\r\n```csharp\r\n        [RegularExpression(@\"\\d+\", ErrorMessage = \"{0} must be a number.\")]\r\n        public string Id { get; set; } = null!;\r\n```\r\nWhere \"{0} must be a number.\" is the key in the default culture for translation. It translates to for example dutch and I validate the object in the following way:\r\n```csharp\r\n        // o is an object with a validation attribute, such a RegularExpressionAttribute.\r\n        var o = new Example { Id = \"abc\" };\r\n        var vc = new ValidationContext(o);\r\n        var results = new List\u003cValidationResult\u003e();\r\n            \r\n        var r = Validator.TryValidateObject(o, vc, results, true);\r\n```\r\nThe error message for the validation attribute of the regular expression will always be \"Id must be a number.\", thus not using the default (or any other) culture to correctly localize the message. \r\n\r\nThis only an issue when manually validating an object, the message is correctly translated when it is automatically validated by .net (in a controller).\r\n\r\n### A possible solution\r\n\r\nA solution to this would be the option to add some way of telling the `ValidationContext` which culture, resource, or localizer to use. \r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ealexj123\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-17T16:23:11Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add localizer support for Validator.cs",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54481",
        "createdAt":  "2021-06-21T11:47:02Z",
        "number":  54481,
        "author":  "Timo-Weike",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-13T18:30:37Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nIf you run a program like \r\n~~~\r\nusing System;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing System.Collections.Generic;\r\n\t\t\t\t\t\r\npublic class Program\r\n{\r\n\tpublic static void Main()\r\n\t{\r\n\t\tConsole.WriteLine(\"Hello World\");\r\n\t\t\r\n\t\tvar instance = new Foo();\r\n\t\tvar res = new List\u003cValidationResult\u003e();\r\n\t\tvar b = Validator.TryValidateObject(instance, new ValidationContext(instance), res, true);\r\n\t}\r\n}\r\n\r\npublic class Foo \r\n{\r\n\tpublic int Id { get; set; }\r\n\t\r\n\t[MaxLength(20)]\r\n\tpublic int SomeInt { get; set; }\r\n}\r\n~~~\r\n\r\nYou get an unexpected/undocumented `InvalidCastException` from the `MaxLength` attribute on a property which is not supported. However the documentation for the `Validator.TryValidateObject` does not state that exceptions produced by the `Validate` calls of the attributes get bubbled up, nor does the documentation for the `MaxLength` state that this exception will be produced if used on a property that is not of an array-like type.\r\n\r\nAlso the fact that the exception does not get wrapped up in a `ValidationResult` does not help in finding the root cause of the problem if a validation attribute is not setup correctly.\r\n\r\nI would suggest wrapping any Exception coming from any validation attribute to be wrapped in a `ValidationResult` with an added property `OriginalException` set to the caught exception.\r\n\r\n### Configuration\r\n\r\nJust run the above program in e.g. [dotnetfiddle](https://dotnetfiddle.net/b6BRpc) with .Net 5\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONGkvAQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDk2ODc5Ng==",
                                           "createdAt":  "2021-06-21T11:47:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nIf you have run a program like \r\n~~~\r\nusing System;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing System.Collections.Generic;\r\n\t\t\t\t\t\r\npublic class Program\r\n{\r\n\tpublic static void Main()\r\n\t{\r\n\t\tConsole.WriteLine(\"Hello World\");\r\n\t\t\r\n\t\tvar instance = new Foo();\r\n\t\tvar res = new List\u003cValidationResult\u003e();\r\n\t\tvar b = Validator.TryValidateObject(instance, new ValidationContext(instance), res, true);\r\n\t}\r\n}\r\n\r\npublic class Foo \r\n{\r\n\tpublic int Id { get; set; }\r\n\t\r\n\t[MaxLength(20)]\r\n\tpublic int SomeInt { get; set; }\r\n}\r\n~~~\r\n\r\nYou get an unexpected/undocumented `InvalidCastException` from the `MaxLength` attribute on a property which is not supported. However the documentation for the `Validator.TryValidateObject` does not state that exceptions produced by the `Validate` calls of the attributes get bubble up nor does the documentation for the `MaxLength` state that this exception will be produced if used on a property that is not of type an array-like type.\r\n\r\nAlso the fact that the Exception does not get wrapped up in a `ValidationResult` does not help in finding the root cause of the problem if a  validation attribute is not setup correctly.\r\n\r\nI would suggest wrapping any Exception coming from any validation attribute to be wrapped in a `ValidationResult` with an added property `OriginalException` set to the caught exception.\r\n\r\n### Configuration\r\n\r\nJust run the above program in e.g. [dotnetfiddle](https://dotnetfiddle.net/b6BRpc) with .Net 5\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTimo-Weike\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-21T11:47:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTMwODU0NQ==",
                                           "createdAt":  "2021-07-13T18:30:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "Notes from triage: We agree that fixing the documentation would be useful. We are unlikely to change the exception type, since exceptions are commonly caught in validation code and so this would be a breaking change for existing applications.",
                                           "updatedAt":  "2021-07-13T18:30:30Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Unexpected/undocumented Exception in Validator.TryValidateObject",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55218",
        "createdAt":  "2021-07-06T17:42:47Z",
        "number":  55218,
        "author":  "Socolin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9A7Hg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "christianrondeau",
                                            "createdAt":  "2021-08-02T21:15:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "flebap",
                                            "createdAt":  "2021-08-02T21:23:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jcoqueret",
                                            "createdAt":  "2021-08-02T21:25:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IAMManuel",
                                            "createdAt":  "2021-08-03T11:56:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Etiennepicard",
                                            "createdAt":  "2021-08-03T14:51:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AndreyFedorovIID",
                                            "createdAt":  "2024-02-26T14:32:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Brunni",
                                            "createdAt":  "2024-11-27T17:27:26Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2021-07-13T18:27:58Z",
        "body":  "Hello,\r\n\r\nWhen using `ValidateDataAnnotations` the error messages when there is an error validating some configuration is not  as helful as it could.\r\n\r\nFor example, if I have a class like\r\n\r\n```cs\r\nclass MyOptions {\r\n  [Required]\r\n  public string XXXX {get; set;}\r\n\r\n  [Required]\r\n  public string YYYY {get; set;}\r\n}\r\n\r\nservices.AddOptions\u003cMyOptions\u003e()\r\n    .BindConfiguration(\"SomeKey\")\r\n    .ValidateDataAnnotations();\r\n```\r\n\r\nI\u0027ll get an error message like\r\n\r\n```\r\nException: Microsoft.Extensions.Options.OptionsValidationException:\r\nDataAnnotation validation failed for members: \u0027XXXX\u0027 with the error: \u0027The XXXX field is required.\u0027.;\r\nDataAnnotation validation failed for members: \u0027YYYY\u0027 with the error: \u0027The YYYY field is required.\u0027.\r\n```\r\n\r\nSince I registered multiple time options with similar properties. like `SomeOtherKey:XXXX` \r\n I cannot determine if the missing configuration is `SomeKey:XXXX` or  `SomeOtherKey:XXXX`\r\n\r\nIt would help to display the type of the class being validated, then with message like\r\n\r\n```\r\nDataAnnotation validation failed for members: \u0027MyOptions.XXXX\u0027 with the error: \u0027The XXXX field is required.\u0027.;\r\n```\r\nor \r\n\r\n```\r\nDataAnnotation validation failed for members: \u0027XXXX\u0027 or class `MyOptions` with the error: \u0027The XXXX field is required.\u0027.;\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONCbJkQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NDk1NzIwMQ==",
                                           "createdAt":  "2021-07-06T17:42:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHello,\r\n\r\nWhen using `ValidateDataAnnotations` the error messages when there is an error validating some configuration is not  as helful as it could.\r\n\r\nFor example, if I have a class like\r\n\r\n```\r\nclass MyOptions {\r\n  public string XXXX {get; set;}\r\n  public string YYYY {get; set;}\r\n}\r\n\r\nservices.AddOptions\u003cMyOptions\u003e()\r\n    .BindConfiguration(\"SomeKey\")\r\n    .ValidateDataAnnotations();\r\n```\r\n\r\nI\u0027ll get an error message like\r\n\r\n```\r\nException: Microsoft.Extensions.Options.OptionsValidationException:\r\nDataAnnotation validation failed for members: \u0027XXXX\u0027 with the error: \u0027The XXXX field is required.\u0027.;\r\nDataAnnotation validation failed for members: \u0027YYYY\u0027 with the error: \u0027The YYYY field is required.\u0027.\r\n```\r\n\r\nSince I registered multiple time options with similar properties. like `SomeOtherKey:XXXX` \r\n I cannot determine if the missing configuration is `SomeKey:XXXX` or  `SomeOtherKey:XXXX`\r\n\r\nIt would help to display the type of the class being validated, then with message like\r\n\r\n```\r\nDataAnnotation validation failed for members: \u0027MyOptions.XXXX\u0027 with the error: \u0027The XXXX field is required.\u0027.;\r\n```\r\nor \r\n\r\n```\r\nDataAnnotation validation failed for members: \u0027XXXX\u0027 or class `MyOptions` with the error: \u0027The XXXX field is required.\u0027.;\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eSocolin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-06T17:42:50Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Improve ValidateDataAnnotations error message",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56415",
        "createdAt":  "2021-07-27T18:53:36Z",
        "number":  56415,
        "author":  "bricelam",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-03T18:41:58Z",
        "body":  "### Description\r\n\r\nIn .NET Framework, System.ComponentModel.DataAnnotations.ValidationContext has special handling for service providers that implement System.ComponentModel.Design.IServiceContainer. This logic is missing (including the `ServiceContainer ` property) in the .NET Core version.\r\n\r\n### Regression?\r\n\r\nYes, from .NET Framework.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONOoL2A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc406gvY",
                                           "createdAt":  "2021-07-27T18:53:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nIn .NET Framework, System.ComponentModel.DataAnnotations.ValidationContext has special handling for service providers that implemented System.ComponentModel.Design.IServiceContainer. This logic is missing (including the `ServiceContainer ` property) in the .NET Core version.\r\n\r\n### Regression?\r\n\r\nYes, from .NET Framework.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebricelam\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-27T18:53:38Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ValidationContext doesn\u0027t use IServiceContainer",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56418",
        "createdAt":  "2021-07-27T19:06:52Z",
        "number":  56418,
        "author":  "bricelam",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-08T16:56:17Z",
        "body":  "### Description\r\n\r\nThe System.ComponentModel.DataAnnotations.ScaffoldTableAttribute type is missing in .NET Core. However, ScaffoldColumnAttribute is present. 🤷\r\n\r\nIt looks like this was previously discussed in #20200.\r\n\r\n### Regression?\r\n\r\nYes, from .NET Framework.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONOouTw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc406i5P",
                                           "createdAt":  "2021-07-27T19:06:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nThe System.ComponentModel.DataAnnotations.ScaffoldTableAttribute type is missing in .NET Core. However, ScaffoldColumnAttribute is present. 🤷\r\n\r\nIt looks like this was previously discussed in #20200.\r\n\r\n### Regression?\r\n\r\nYes, from .NET Framework.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebricelam\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-27T19:06:54Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ScaffoldTableAttribute not found",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56419",
        "createdAt":  "2021-07-27T19:11:19Z",
        "number":  56419,
        "author":  "bricelam",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-02-02T18:11:59Z",
        "body":  "### Description\r\n\r\nThe value of the TypeId property on System.ComponentModel.DataAnnotations.UIHintAttribute and FilterUIHintAttribute is different on .NET Core from .NET Framework. I have no idea what the functional implications of this are. 🙂 ...and the types are obsolete anyway.\r\n\r\n### Regression?\r\n\r\nYes, from .NET Framework.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONOo5eQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc406jl5",
                                           "createdAt":  "2021-07-27T19:11:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nThe value of the TypeId property on System.ComponentModel.DataAnnotations.UIHintAttribute and FilterUIHintAttribute is different on .NET Core from .NET Framework. I have no idea what the functional implications of this are. 🙂 ...and the types are obsolete anyway.\r\n\r\n### Regression?\r\n\r\nYes, from .NET Framework.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebricelam\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-27T19:11:22Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Value of TypeId on UIHintAttribute is different from .NET Framework",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57897",
        "createdAt":  "2021-08-22T14:10:43Z",
        "number":  57897,
        "author":  "drieseng",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-09-09T15:32:39Z",
        "body":  "In PR #56753 usage of Linq was reduced in **System.ComponentModel.Annotations**.\r\nMy first attempt to reduce this further (PR #57392) failed miserably, so I\u0027d like to first indicate some other opportunities before I spend time implementing and benchmarking these.\r\n\r\nThe changes I\u0027m proposing should:\r\n* improve performance\r\n* reduce allocations\r\n* make **System.ComponentModel.Annotations** more linker friendly by avoiding to bring in **System.Linq**.\r\n\r\nOnce these opportunities have been validated, I\u0027ll implement the changes and use benchmarks to show the effect these changes have. I understand of course that - even after initial validation - some changes may still be rejected.\r\nI only hope that the probability will be a lot lower.\r\n\r\nHere are the changes I\u0027m proposing:\r\n\r\n**AssociatedMetadataTypeTypeDescriptor**\r\n\r\n* We should be able to improve performance [here](https://github.com/dotnet/runtime/blob/13d992760f221bda9066c674dc2e13ee29a84613/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/AssociatedMetadataTypeTypeDescriptor.cs#L143) by \"manually\" creating HashSets for _mainTypeMemberNames_ and _buddyTypeMembers_. To be validated with a benchmark of course.\r\n* We can avoid creating a new array [here](https://github.com/dotnet/runtime/blob/13d992760f221bda9066c674dc2e13ee29a84613/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/AssociatedMetadataTypeTypeDescriptor.cs#L158) and just pass the **HashSet\\\u003cstring\\\u003e**. The code probably dates back from when `String.Join(String, IEnumerable\u003cString\u003e)` didn\u0027t exist.\r\n* We can avoid using `Enumerable.FirstOrDefault\u003cTSource\u003e(this System.Collections.Generic.IEnumerable\u003cTSource\u003e source)` [here](https://github.com/dotnet/runtime/blob/13d992760f221bda9066c674dc2e13ee29a84613/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/AssociatedMetadataTypeTypeDescriptor.cs#L178) and just check if `Type.GetMember(...)` returned an array with one or more entries.\r\n* Use `AttributeCollection.CopyTo(Array array, int index)` [here]( https://github.com/dotnet/runtime/blob/63f646160039838bee0f35babde4b2fd7cf802a1/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/AssociatedMetadataTypeTypeDescriptor.cs#L90) to obtain array of attributes.\r\n\r\n**CustomValidationAttribute**\r\n* Use `Type.GetMethod(String, BindingFlags)` to retrieve the **MethodInfo**. This is both a performance optimalization and a minor bug fix. After this change we’ll throw the same exception as .NET Framework.\r\n   I’ll of course add a corresponding unit test.\r\n\r\n**FileExtensionsAttribute**\r\n* Use `String.Join(String, IEnumerable\u003cString\u003e)` [here]( https://github.com/dotnet/runtime/blob/63f646160039838bee0f35babde4b2fd7cf802a1/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/FileExtensionsAttribute.cs#L32) to avoid Linq.\r\n* Use a regular foreach with yield return [here]( https://github.com/dotnet/runtime/blob/63f646160039838bee0f35babde4b2fd7cf802a1/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/FileExtensionsAttribute.cs#L39) to avoid Linq.\r\n* Use a regular foreach with an InvariantCultureIgnoreCase comparison [here]( https://github.com/dotnet/runtime/blob/63f646160039838bee0f35babde4b2fd7cf802a1/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/FileExtensionsAttribute.cs#L50) to avoid Linq and avoid the extra allocation of `String.ToLowerInvariant()`.\r\n\r\n**Validator**\r\n* Update `GetObjectPropertyValidationErrors(…)` and `GetPropertyValues(…)` to return **List\\\u003cT\\\u003e** instead of respectively **IEnumerable\\\u003cValidationError\\\u003e** and **ICollection\\\u003cKeyValuePair\\\u003cValidationContext, object?\\\u003e\\\u003e**. This avoids interface dispatch and allow us to directly use the result [here]( https://github.com/dotnet/runtime/blob/63f646160039838bee0f35babde4b2fd7cf802a1/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/Validator.cs#L423) and [here]( https://github.com/dotnet/runtime/blob/63f646160039838bee0f35babde4b2fd7cf802a1/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/Validator.cs#L434). This in turn eliminates allocation of an extra list (and the `List\u003cT\u003e.AddRange(…)` invocations).\r\n* Check if **Count** is greater than zero [here]( https://github.com/dotnet/runtime/blob/63f646160039838bee0f35babde4b2fd7cf802a1/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/Validator.cs#L539) instead of using `Enumerable.Any()`.\r\n\r\n**ValidationAttributeStore**\r\n* Lazily scan the attributes [here]( https://github.com/dotnet/runtime/blob/63f646160039838bee0f35babde4b2fd7cf802a1/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/ValidationAttributeStore.cs#L157) to distinguish attributes of type **ValidationAttributes** and **DisplayAttribute** without use of Linq and change the type of **StoreItem.ValidationAttributes** from **IEnumerable\\\u003cValidationAttribute\\\u003e** to **List\\\u003cValidationAttribute\\\u003e**. I used the volatite/Interlock.CompareExchange \"trick\" to lazily get the attributes, and BDN reported a saving of 5 KB for a single **TypeStoreItem** (I temporily disabled caching of **TypeStoreItem** to run the benchmark).  To be discussed and investigated in detail.\r\n* Immediately initialize the dictionary [here](https://github.com/dotnet/runtime/blob/69bdfaaa14b719ee95e4ebd1270084c5a2bd2f32/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/ValidationAttributeStore.cs#L221) with the correct capacity.\r\n\r\nFor those changes that are validated, please indicate which changes - if any - can be grouped in a single PR.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONeDRiA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc411uKy",
                                           "createdAt":  "2021-08-22T14:10:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers, @bricelam, @roji\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\nIn PR #56753 usage of Linq was reduced in **System.ComponentModel.Annotations**.\r\nMy first attempt to reduce this further (PR #57392) failed miserably, so I\u0027d like to first indicate some other opportunities before I spend time implementing and benchmarking these.\r\n\r\nThe changes I\u0027m proposing should:\r\n* improve performance\r\n* reduce allocations\r\n* make **System.ComponentModel.Annotations** more linker friendly by avoiding to bring in **System.Linq**.\r\n\r\nOnce these opportunities have been validated, I\u0027ll implement the changes and use benchmarks to show the effect these changes have. I understand of course that - even after initial validation - some changes may still be rejected.\r\nI only hope that the probability will be a lot lower.\r\n\r\nHere are the changes I\u0027m proposing:\r\n\r\n**AssociatedMetadataTypeTypeDescriptor**\r\n\r\n* We should be able to improve performance [here](https://github.com/dotnet/runtime/blob/13d992760f221bda9066c674dc2e13ee29a84613/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/AssociatedMetadataTypeTypeDescriptor.cs#L143) by \"manually\" creating HashSets for _mainTypeMemberNames_ and _buddyTypeMembers_. To be validated with a benchmark of course.\r\n* We can avoid creating a new array [here](https://github.com/dotnet/runtime/blob/13d992760f221bda9066c674dc2e13ee29a84613/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/AssociatedMetadataTypeTypeDescriptor.cs#L158) and just pass the **HashSet\u003cstring\u003e**. The code probably dates back from when `String.Join(String, IEnumerable\u003cString\u003e)` didn\u0027t exist.\r\n* We can avoid using `Enumerable.FirstOrDefault\u003cTSource\u003e(this System.Collections.Generic.IEnumerable\u003cTSource\u003e source)` [here](https://github.com/dotnet/runtime/blob/13d992760f221bda9066c674dc2e13ee29a84613/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/AssociatedMetadataTypeTypeDescriptor.cs#L178) and just check if `Type.GetMember(...)` returned an array with one or more entries.\r\n* Use `AttributeCollection.CopyTo(Array array, int index)` [here]( https://github.com/dotnet/runtime/blob/63f646160039838bee0f35babde4b2fd7cf802a1/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/AssociatedMetadataTypeTypeDescriptor.cs#L90) to obtain array of attributes.\r\n\r\n**CustomValidationAttribute**\r\n* Use `Type.GetMethod(String, BindingFlags)` to retrieve the **MethodInfo**. This is both a performance optimalization and a minor bug fix. After this change we’ll throw the same exception as .NET Framework.\r\n   I’ll of course add a corresponding unit test.\r\n\r\n**FileExtensionsAttribute**\r\n* Use `String.Join(String, IEnumerable\u003cString\u003e)` [here]( https://github.com/dotnet/runtime/blob/63f646160039838bee0f35babde4b2fd7cf802a1/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/FileExtensionsAttribute.cs#L32) to avoid Linq.\r\n* Use a regular foreach with yield return [here]( https://github.com/dotnet/runtime/blob/63f646160039838bee0f35babde4b2fd7cf802a1/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/FileExtensionsAttribute.cs#L39) to avoid Linq.\r\n* Use a regular foreach with an InvariantCultureIgnoreCase comparison [here]( https://github.com/dotnet/runtime/blob/63f646160039838bee0f35babde4b2fd7cf802a1/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/FileExtensionsAttribute.cs#L50) to avoid Linq and avoid the extra allocation of `String.ToLowerInvariant()`.\r\n\r\n**Validator**\r\n* Update `GetObjectPropertyValidationErrors(…)` and `GetPropertyValues(…)` to return **List\u003cT\u003e** instead of respectively **IEnumerable\u003cValidationError\u003e** and **ICollection\u003cKeyValuePair\u003cValidationContext, object?\u003e\u003e**. This avoids interface dispatch and allow us to directly use the result [here]( https://github.com/dotnet/runtime/blob/63f646160039838bee0f35babde4b2fd7cf802a1/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/Validator.cs#L423) and [here]( https://github.com/dotnet/runtime/blob/63f646160039838bee0f35babde4b2fd7cf802a1/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/Validator.cs#L434). This in turn eliminates allocation of an extra list (and the `List\u003cT\u003e.AddRange(…)` invocations).\r\n* Check if **Count** is greater than zero [here]( https://github.com/dotnet/runtime/blob/63f646160039838bee0f35babde4b2fd7cf802a1/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/Validator.cs#L539) instead of using `Enumerable.Any()`.\r\n\r\n**ValidationAttributeStore**\r\n* Lazily scan the attributes [here]( https://github.com/dotnet/runtime/blob/63f646160039838bee0f35babde4b2fd7cf802a1/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/ValidationAttributeStore.cs#L157) to distinguish attributes of type **ValidationAttributes** and **DisplayAttribute** without use of Linq and we can also change the type of **StoreItem.ValidationAttributes** from **IEnumerable\u003cValidationAttribute\u003e** to **List\u003cValidationAttribute\u003e**. I used the volatite/Interlock.CompareExchange \"trick\" to lazily get the attributes, and BDN reported a saving of 5 KB for a single **TypeStoreItem** (I temporily disabled caching of **TypeStoreItem** to run the benchmark).  To be discussed and investigated in detail.\r\n* Immediately initialize the dictionary [here](https://github.com/dotnet/runtime/blob/69bdfaaa14b719ee95e4ebd1270084c5a2bd2f32/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/ValidationAttributeStore.cs#L221) with the correct capacity.\r\n\r\nFor those changes that are accepted, please indicate which changes - if any - can be grouped in a single PR.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edrieseng\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-22T14:10:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4135EO",
                                           "createdAt":  "2021-08-23T14:50:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB3ZS5w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2021-08-23T15:24:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ajcvickers",
                                                                               "createdAt":  "2021-08-23T15:40:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Thanks, @drieseng.\r\n\r\nI\u0027m not convinced throughput improvements to System.ComponentModel.Annotations matter, though I\u0027m happy to be convinced otherwise with data.  Does any of this code show on hot paths?  Does it show up on startup paths where these changes will help reduce startup, maybe by reducing JIT\u0027ing or something like that?\r\n\r\nIf there are places where the use of LINQ is gratuitous, and the same functionality can be implemented without LINQ and with minimal additional (or even less) code, I\u0027m all for replacing it.  I skimmed your list and some of your examples fall into this category.\r\n\r\nWith regards to linker friendliness, it\u0027s important to keep in mind that all it takes is one call anywhere in an app to a given method, and that method needs to then be kept.  So if we delete all of our use of method M in order to enable M to be trimmed away but then the app uses M, it can\u0027t be trimmed away.  Worse, if we delete our use of M by replacing it with a lot of custom code, not only do we now have more code to maintain, but if M does end up getting used by the app, we\u0027ve actually increased code size, as now the app has to carry both M and our custom replacement for it.",
                                           "updatedAt":  "2021-08-23T14:50:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4139bv",
                                           "createdAt":  "2021-08-23T15:11:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "drieseng",
                                           "body":  "I can\u0027t help but get the impression that my email address has the wrong domain name.\r\nWhy are changes in - for example - #56753 that different (except for the fact that no benchmark results were provided at all)?",
                                           "updatedAt":  "2021-08-23T15:11:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc413-f4",
                                           "createdAt":  "2021-08-23T15:16:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Why are changes in - for example - #56753 that different\r\n\r\nThey\u0027re not.  For example, it replaced use of `Any()` with use of `Length \u003e 0`, and use of `enumType.GetCustomAttributes(typeof(FlagsAttribute), false).Any();` with `IsDefined`, and use of `Cast` by just using the propertly typed variable, etc.  Those are all good examples of \"If there are places where the use of LINQ is gratuitous, and the same functionality can be implemented without LINQ and with minimal additional (or even less) code, I\u0027m all for replacing it.\"  You can also see @eerhardt\u0027s comment about the issue it was helping to fix.\r\n\r\n\u003e I can\u0027t help but get the impression that my email address has the wrong domain name.\r\n\r\nI don\u0027t know what that means...?",
                                           "updatedAt":  "2021-08-23T15:16:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc414Fk8",
                                           "createdAt":  "2021-08-23T15:50:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "drieseng",
                                           "body":  "Changes from people with the microsoft domain are just more readily accepted. I can even understand this to some degree.\r\n\r\nI was trying to give something back, but instead it appears I\u0027ve been wasting mine and your time.",
                                           "updatedAt":  "2021-08-23T15:50:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc414G9J",
                                           "createdAt":  "2021-08-23T15:58:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "\u003e Changes from people with the microsoft domain are just more readily accepted.\r\n\r\nFrom what I\u0027ve seen internal suggestions are held to the same standard but much of the discussion can be had in person instead of on github. Watch some of the api review meetings on youtube and you\u0027ll see that there\u0027s a lot of pushback internally and the quality bar is strictly upheld for everyone.\r\n\r\nSome of your suggestions are good. I\u0027d advise removing some of the smaller uses of linq in a PR and seeing what review feedback you get. Any negative reviews will have to explain their reasoning and you\u0027ll be able to use that feedback to either iterate or help you better understand the boundaries or what will be acceptable in future PR\u0027s.",
                                           "updatedAt":  "2021-08-23T15:58:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc414HA1",
                                           "createdAt":  "2021-08-23T15:58:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB3ZjVA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ajcvickers",
                                                                               "createdAt":  "2021-08-23T16:06:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I was trying to give something back, but instead it appears I\u0027ve been wasting mine and your time.\r\n\r\nI\u0027m sorry that\u0027s the impression you\u0027re getting; that is not what I\u0027ve been trying to convey.  I explicitly wrote:\r\n\"If there are places where the use of LINQ is gratuitous, and the same functionality can be implemented without LINQ and with minimal additional (or even less) code, I\u0027m all for replacing it. I skimmed your list and some of your examples fall into this category.\" If you\u0027d like to submit PRs for these, we\u0027d happily accept them.\r\n\r\nFor the broader cases, where there are tradeoffs to be made, there needs to be good reason to churn the code.  If such reasons exist, we\u0027d also happily accept such fixes, too, but it\u0027ll involve more discussion to understand the benefits vs cost.",
                                           "updatedAt":  "2021-08-23T15:59:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc414M3q",
                                           "createdAt":  "2021-08-23T16:25:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "drieseng",
                                           "body":  "@stephentoub Let me apologize for taking the feedback too negatively then. It\u0027s mostly the first paragraph that gave me the impression that even the smallest change had to be strongly motivated (more on this below). I did not, and do not, expect all the changes I identified to be validated (meaning, even considered for a PR).\r\n\r\nIs it ok if I number each change, so you can indicate for which changes you\u0027d accept a PR? I don\u0027t want to submit 10 PRs, and get that first paragraph as feedback for each of them. I created this issue to make sure I don\u0027t implement changes that don\u0027t even have a chance of being accepted.\r\n\r\nI already mentioned this in the other PR: I\u0027m definitely not a (heavy) user of **System.ComponentModel.Annotations**. I actually have close to zero benefit in improving it for myself (or even zero, unless through unintenional usage). I just though it was a low bar entry into contributing to .NET. If you expect another motivation other than the items I listed in the main description and altruism, then I\u0027ll have to disappoint you.",
                                           "updatedAt":  "2021-08-23T16:25:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc414NGI",
                                           "createdAt":  "2021-08-23T16:26:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Is it ok if I number each change\r\n\r\nSure",
                                           "updatedAt":  "2021-08-23T16:26:37Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Further reduce Linq usage in ComponentModel.Annotations",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58813",
        "createdAt":  "2021-09-08T15:30:07Z",
        "number":  58813,
        "author":  "3GDXC",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-09-09T15:33:35Z",
        "body":  "### Description\r\nUrlAttribute not validating sftp://, ftps:// or other valid URLs  \r\n\r\n### Configuration\r\n\r\n### Regression?\r\n\r\n### Other information\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONo84fA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42jwQN",
                                           "createdAt":  "2021-09-08T15:30:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers, @bricelam, @roji\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\nUrlAttribute not validating sftp://, ftps:// or other valid URLs  \r\n\r\n### Configuration\r\n\r\n### Regression?\r\n\r\n### Other information\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003e3GDXC\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-08T15:30:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42jzh8",
                                           "createdAt":  "2021-09-08T15:47:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "3GDXC",
                                           "body":  "urls with username/password also fail validation, while I understand the need to not break compatibility this implementation is poor and should IMHO be deprecated in favor of a UriAttribute the has more complete validation of standard URL/URI values ",
                                           "updatedAt":  "2021-09-08T15:47:10Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "DataAnnotations UrlAttribute validating Url incorrectly",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58867",
        "createdAt":  "2021-09-09T12:33:07Z",
        "number":  58867,
        "author":  "weifenluo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-09-23T10:51:35Z",
        "body":  "In the demo project (full source code here: https://github.com/weifenluo/TestCustomTypeDescriptor), there is a `DataClass` that implements `ICustomTypeDescriptor`, with one `Name` property decorated with `Required` attribute:\r\n```\r\nusing System;\r\nusing System.ComponentModel;\r\nusing System.ComponentModel.DataAnnotations;\r\n\r\nnamespace TestCustomTypeDescriptor\r\n{\r\n    public class DataClass : ICustomTypeDescriptor\r\n    {\r\n        private string _name;\r\n        public string GetName() =\u003e _name;\r\n\r\n        public string SetName(string value) =\u003e _name = value;\r\n\r\n        AttributeCollection ICustomTypeDescriptor.GetAttributes() =\u003e CustomTypeDescriptor.GetAttributes();\r\n\r\n        string ICustomTypeDescriptor.GetClassName() =\u003e CustomTypeDescriptor.GetClassName();\r\n\r\n        string ICustomTypeDescriptor.GetComponentName() =\u003e CustomTypeDescriptor.GetComponentName();\r\n\r\n        TypeConverter ICustomTypeDescriptor.GetConverter() =\u003e CustomTypeDescriptor.GetConverter();\r\n\r\n        EventDescriptor ICustomTypeDescriptor.GetDefaultEvent() =\u003e CustomTypeDescriptor.GetDefaultEvent();\r\n\r\n        PropertyDescriptor ICustomTypeDescriptor.GetDefaultProperty() =\u003e CustomTypeDescriptor.GetDefaultProperty();\r\n\r\n        object ICustomTypeDescriptor.GetEditor(Type editorBaseType) =\u003e CustomTypeDescriptor.GetEditor(editorBaseType);\r\n\r\n        EventDescriptorCollection ICustomTypeDescriptor.GetEvents() =\u003e CustomTypeDescriptor.GetEvents();\r\n\r\n        EventDescriptorCollection ICustomTypeDescriptor.GetEvents(Attribute[] attributes) =\u003e CustomTypeDescriptor.GetEvents(attributes);\r\n\r\n        PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties() =\u003e CustomTypeDescriptor.GetProperties();\r\n\r\n        PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties(Attribute[] attributes) =\u003e CustomTypeDescriptor.GetProperties(attributes);\r\n\r\n        object ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd) =\u003e CustomTypeDescriptor.GetPropertyOwner(pd);\r\n\r\n        private sealed class DataClassTypeDescriptor : CustomTypeDescriptor\r\n        {\r\n            private sealed class NameProperty : PropertyDescriptor\r\n            {\r\n                public static readonly NameProperty Singleton = new NameProperty();\r\n\r\n                private NameProperty()\r\n                    : base(\"Name\", new Attribute[] { new RequiredAttribute() })\r\n                {\r\n                }\r\n\r\n                public override Type PropertyType =\u003e typeof(string);\r\n\r\n                public override Type ComponentType =\u003e typeof(DataClass);\r\n\r\n                public override bool IsReadOnly =\u003e false;\r\n\r\n                public override object GetValue(object component) =\u003e ((DataClass)component).GetName();\r\n\r\n                public override void SetValue(object component, object value) =\u003e ((DataClass)component).SetName((string)value);\r\n\r\n                public override bool CanResetValue(object component) =\u003e true;\r\n\r\n                public override void ResetValue(object component) =\u003e ((DataClass)component).SetName(null);\r\n\r\n                public override bool ShouldSerializeValue(object component) =\u003e false;\r\n            }\r\n\r\n            public static readonly DataClassTypeDescriptor Singleton = new DataClassTypeDescriptor();\r\n\r\n            private DataClassTypeDescriptor()\r\n            {\r\n                Properties = new PropertyDescriptorCollection(new PropertyDescriptor[] { NameProperty.Singleton });\r\n            }\r\n\r\n            private PropertyDescriptorCollection Properties { get; }\r\n\r\n            public override PropertyDescriptorCollection GetProperties()\r\n            {\r\n                return GetProperties(null);\r\n            }\r\n\r\n            public override PropertyDescriptorCollection GetProperties(Attribute[] attributes)\r\n            {\r\n                bool filtering = attributes != null \u0026\u0026 attributes.Length \u003e 0;\r\n                if (!filtering)\r\n                    return Properties;\r\n\r\n                var result = new PropertyDescriptorCollection(null);\r\n                foreach (PropertyDescriptor prop in Properties)\r\n                {\r\n                    if (prop.Attributes.Contains(attributes))\r\n                        result.Add(prop);\r\n                }\r\n\r\n                return result;\r\n            }\r\n        }\r\n\r\n        private static ICustomTypeDescriptor CustomTypeDescriptor =\u003e DataClassTypeDescriptor.Singleton;\r\n    }\r\n}\r\n```\r\n\r\nThis `DataClass` should be equivalent to:\r\n```\r\npublic class DataClass\r\n{\r\n    [Required]\r\n    public string Name { get; set; }\r\n}\r\n```\r\n\r\nThe following unit test failed:\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing Xunit;\r\n\r\nnamespace TestCustomTypeDescriptor\r\n{\r\n    public class UnitTest1\r\n    {\r\n        [Fact]\r\n        public void Test1()\r\n        {\r\n            var data = new DataClass();\r\n\r\n            Assert.Null(data.GetName());\r\n\r\n            Assert.Single(TypeDescriptor.GetProperties(data));\r\n            Assert.Single(TypeDescriptor.GetProperties(data, new Attribute[] { new RequiredAttribute() }));\r\n\r\n\r\n            var validationContext = new ValidationContext(data, null, null);\r\n            var validationResults = new List\u003cValidationResult\u003e();\r\n            Validator.TryValidateObject(data, validationContext, validationResults, validateAllProperties: true);\r\n            Assert.Single(validationResults);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWhen targeting .Net Framework 4.6.1, it throws an exception:\r\n```\r\nSystem.ArgumentException : The type \u0027DataClass\u0027 does not contain a public property named \u0027Name\u0027.\r\nParameter name: propertyName\"\r\n```\r\n\r\nWhen targeting .Net 5, it failed the last assert:\r\n```\r\nThe collection was expected to contain a single element, but it was empty.\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONum5KA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42mdDQ",
                                           "createdAt":  "2021-09-09T12:33:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-09-09T12:33:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42mvt3",
                                           "createdAt":  "2021-09-09T14:01:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn the demo project (full source code here: https://github.com/weifenluo/TestCustomTypeDescriptor), there is a `DataClass` that implements `ICustomTypeDescriptor`, with one `Name` property decorated with `Required` attribute:\r\n```\r\nusing System;\r\nusing System.ComponentModel;\r\nusing System.ComponentModel.DataAnnotations;\r\n\r\nnamespace TestCustomTypeDescriptor\r\n{\r\n    public class DataClass : ICustomTypeDescriptor\r\n    {\r\n        private string _name;\r\n        public string GetName() =\u003e _name;\r\n\r\n        public string SetName(string value) =\u003e _name = value;\r\n\r\n        AttributeCollection ICustomTypeDescriptor.GetAttributes() =\u003e CustomTypeDescriptor.GetAttributes();\r\n\r\n        string ICustomTypeDescriptor.GetClassName() =\u003e CustomTypeDescriptor.GetClassName();\r\n\r\n        string ICustomTypeDescriptor.GetComponentName() =\u003e CustomTypeDescriptor.GetComponentName();\r\n\r\n        TypeConverter ICustomTypeDescriptor.GetConverter() =\u003e CustomTypeDescriptor.GetConverter();\r\n\r\n        EventDescriptor ICustomTypeDescriptor.GetDefaultEvent() =\u003e CustomTypeDescriptor.GetDefaultEvent();\r\n\r\n        PropertyDescriptor ICustomTypeDescriptor.GetDefaultProperty() =\u003e CustomTypeDescriptor.GetDefaultProperty();\r\n\r\n        object ICustomTypeDescriptor.GetEditor(Type editorBaseType) =\u003e CustomTypeDescriptor.GetEditor(editorBaseType);\r\n\r\n        EventDescriptorCollection ICustomTypeDescriptor.GetEvents() =\u003e CustomTypeDescriptor.GetEvents();\r\n\r\n        EventDescriptorCollection ICustomTypeDescriptor.GetEvents(Attribute[] attributes) =\u003e CustomTypeDescriptor.GetEvents(attributes);\r\n\r\n        PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties() =\u003e CustomTypeDescriptor.GetProperties();\r\n\r\n        PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties(Attribute[] attributes) =\u003e CustomTypeDescriptor.GetProperties(attributes);\r\n\r\n        object ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd) =\u003e CustomTypeDescriptor.GetPropertyOwner(pd);\r\n\r\n        private sealed class DataClassTypeDescriptor : CustomTypeDescriptor\r\n        {\r\n            private sealed class NameProperty : PropertyDescriptor\r\n            {\r\n                public static readonly NameProperty Singleton = new NameProperty();\r\n\r\n                private NameProperty()\r\n                    : base(\"Name\", new Attribute[] { new RequiredAttribute() })\r\n                {\r\n                }\r\n\r\n                public override Type PropertyType =\u003e typeof(string);\r\n\r\n                public override Type ComponentType =\u003e typeof(DataClass);\r\n\r\n                public override bool IsReadOnly =\u003e false;\r\n\r\n                public override object GetValue(object component) =\u003e ((DataClass)component).GetName();\r\n\r\n                public override void SetValue(object component, object value) =\u003e ((DataClass)component).SetName((string)value);\r\n\r\n                public override bool CanResetValue(object component) =\u003e true;\r\n\r\n                public override void ResetValue(object component) =\u003e ((DataClass)component).SetName(null);\r\n\r\n                public override bool ShouldSerializeValue(object component) =\u003e false;\r\n            }\r\n\r\n            public static readonly DataClassTypeDescriptor Singleton = new DataClassTypeDescriptor();\r\n\r\n            private DataClassTypeDescriptor()\r\n            {\r\n                Properties = new PropertyDescriptorCollection(new PropertyDescriptor[] { NameProperty.Singleton });\r\n            }\r\n\r\n            private PropertyDescriptorCollection Properties { get; }\r\n\r\n            public override PropertyDescriptorCollection GetProperties()\r\n            {\r\n                return GetProperties(null);\r\n            }\r\n\r\n            public override PropertyDescriptorCollection GetProperties(Attribute[] attributes)\r\n            {\r\n                bool filtering = attributes != null \u0026\u0026 attributes.Length \u003e 0;\r\n                if (!filtering)\r\n                    return Properties;\r\n\r\n                var result = new PropertyDescriptorCollection(null);\r\n                foreach (PropertyDescriptor prop in Properties)\r\n                {\r\n                    if (prop.Attributes.Contains(attributes))\r\n                        result.Add(prop);\r\n                }\r\n\r\n                return result;\r\n            }\r\n        }\r\n\r\n        private static ICustomTypeDescriptor CustomTypeDescriptor =\u003e DataClassTypeDescriptor.Singleton;\r\n    }\r\n}\r\n```\r\n\r\nThis `DataClass` should be equivalent to:\r\n```\r\npublic class DataClass\r\n{\r\n    [Required]\r\n    public string Name { get; set; }\r\n}\r\n```\r\n\r\nThe following unit test failed:\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing Xunit;\r\n\r\nnamespace TestCustomTypeDescriptor\r\n{\r\n    public class UnitTest1\r\n    {\r\n        [Fact]\r\n        public void Test1()\r\n        {\r\n            var data = new DataClass();\r\n\r\n            Assert.Null(data.GetName());\r\n\r\n            Assert.Single(TypeDescriptor.GetProperties(data));\r\n            Assert.Single(TypeDescriptor.GetProperties(data, new Attribute[] { new RequiredAttribute() }));\r\n\r\n\r\n            var validationContext = new ValidationContext(data, null, null);\r\n            var validationResults = new List\u003cValidationResult\u003e();\r\n            Validator.TryValidateObject(data, validationContext, validationResults, validateAllProperties: true);\r\n            Assert.Single(validationResults);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWhen targeting .Net Framework 4.6.1, it throws an exception:\r\n```\r\nSystem.ArgumentException : The type \u0027DataClass\u0027 does not contain a public property named \u0027Name\u0027.\r\nParameter name: propertyName\"\r\n```\r\n\r\nWhen targeting .Net 5, it failed the last assert:\r\n```\r\nThe collection was expected to contain a single element, but it was empty.\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eweifenluo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-09T14:01:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc426bko",
                                           "createdAt":  "2021-09-16T22:06:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers, @bricelam, @roji\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn the demo project (full source code here: https://github.com/weifenluo/TestCustomTypeDescriptor), there is a `DataClass` that implements `ICustomTypeDescriptor`, with one `Name` property decorated with `Required` attribute:\r\n```\r\nusing System;\r\nusing System.ComponentModel;\r\nusing System.ComponentModel.DataAnnotations;\r\n\r\nnamespace TestCustomTypeDescriptor\r\n{\r\n    public class DataClass : ICustomTypeDescriptor\r\n    {\r\n        private string _name;\r\n        public string GetName() =\u003e _name;\r\n\r\n        public string SetName(string value) =\u003e _name = value;\r\n\r\n        AttributeCollection ICustomTypeDescriptor.GetAttributes() =\u003e CustomTypeDescriptor.GetAttributes();\r\n\r\n        string ICustomTypeDescriptor.GetClassName() =\u003e CustomTypeDescriptor.GetClassName();\r\n\r\n        string ICustomTypeDescriptor.GetComponentName() =\u003e CustomTypeDescriptor.GetComponentName();\r\n\r\n        TypeConverter ICustomTypeDescriptor.GetConverter() =\u003e CustomTypeDescriptor.GetConverter();\r\n\r\n        EventDescriptor ICustomTypeDescriptor.GetDefaultEvent() =\u003e CustomTypeDescriptor.GetDefaultEvent();\r\n\r\n        PropertyDescriptor ICustomTypeDescriptor.GetDefaultProperty() =\u003e CustomTypeDescriptor.GetDefaultProperty();\r\n\r\n        object ICustomTypeDescriptor.GetEditor(Type editorBaseType) =\u003e CustomTypeDescriptor.GetEditor(editorBaseType);\r\n\r\n        EventDescriptorCollection ICustomTypeDescriptor.GetEvents() =\u003e CustomTypeDescriptor.GetEvents();\r\n\r\n        EventDescriptorCollection ICustomTypeDescriptor.GetEvents(Attribute[] attributes) =\u003e CustomTypeDescriptor.GetEvents(attributes);\r\n\r\n        PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties() =\u003e CustomTypeDescriptor.GetProperties();\r\n\r\n        PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties(Attribute[] attributes) =\u003e CustomTypeDescriptor.GetProperties(attributes);\r\n\r\n        object ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd) =\u003e CustomTypeDescriptor.GetPropertyOwner(pd);\r\n\r\n        private sealed class DataClassTypeDescriptor : CustomTypeDescriptor\r\n        {\r\n            private sealed class NameProperty : PropertyDescriptor\r\n            {\r\n                public static readonly NameProperty Singleton = new NameProperty();\r\n\r\n                private NameProperty()\r\n                    : base(\"Name\", new Attribute[] { new RequiredAttribute() })\r\n                {\r\n                }\r\n\r\n                public override Type PropertyType =\u003e typeof(string);\r\n\r\n                public override Type ComponentType =\u003e typeof(DataClass);\r\n\r\n                public override bool IsReadOnly =\u003e false;\r\n\r\n                public override object GetValue(object component) =\u003e ((DataClass)component).GetName();\r\n\r\n                public override void SetValue(object component, object value) =\u003e ((DataClass)component).SetName((string)value);\r\n\r\n                public override bool CanResetValue(object component) =\u003e true;\r\n\r\n                public override void ResetValue(object component) =\u003e ((DataClass)component).SetName(null);\r\n\r\n                public override bool ShouldSerializeValue(object component) =\u003e false;\r\n            }\r\n\r\n            public static readonly DataClassTypeDescriptor Singleton = new DataClassTypeDescriptor();\r\n\r\n            private DataClassTypeDescriptor()\r\n            {\r\n                Properties = new PropertyDescriptorCollection(new PropertyDescriptor[] { NameProperty.Singleton });\r\n            }\r\n\r\n            private PropertyDescriptorCollection Properties { get; }\r\n\r\n            public override PropertyDescriptorCollection GetProperties()\r\n            {\r\n                return GetProperties(null);\r\n            }\r\n\r\n            public override PropertyDescriptorCollection GetProperties(Attribute[] attributes)\r\n            {\r\n                bool filtering = attributes != null \u0026\u0026 attributes.Length \u003e 0;\r\n                if (!filtering)\r\n                    return Properties;\r\n\r\n                var result = new PropertyDescriptorCollection(null);\r\n                foreach (PropertyDescriptor prop in Properties)\r\n                {\r\n                    if (prop.Attributes.Contains(attributes))\r\n                        result.Add(prop);\r\n                }\r\n\r\n                return result;\r\n            }\r\n        }\r\n\r\n        private static ICustomTypeDescriptor CustomTypeDescriptor =\u003e DataClassTypeDescriptor.Singleton;\r\n    }\r\n}\r\n```\r\n\r\nThis `DataClass` should be equivalent to:\r\n```\r\npublic class DataClass\r\n{\r\n    [Required]\r\n    public string Name { get; set; }\r\n}\r\n```\r\n\r\nThe following unit test failed:\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing Xunit;\r\n\r\nnamespace TestCustomTypeDescriptor\r\n{\r\n    public class UnitTest1\r\n    {\r\n        [Fact]\r\n        public void Test1()\r\n        {\r\n            var data = new DataClass();\r\n\r\n            Assert.Null(data.GetName());\r\n\r\n            Assert.Single(TypeDescriptor.GetProperties(data));\r\n            Assert.Single(TypeDescriptor.GetProperties(data, new Attribute[] { new RequiredAttribute() }));\r\n\r\n\r\n            var validationContext = new ValidationContext(data, null, null);\r\n            var validationResults = new List\u003cValidationResult\u003e();\r\n            Validator.TryValidateObject(data, validationContext, validationResults, validateAllProperties: true);\r\n            Assert.Single(validationResults);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWhen targeting .Net Framework 4.6.1, it throws an exception:\r\n```\r\nSystem.ArgumentException : The type \u0027DataClass\u0027 does not contain a public property named \u0027Name\u0027.\r\nParameter name: propertyName\"\r\n```\r\n\r\nWhen targeting .Net 5, it failed the last assert:\r\n```\r\nThe collection was expected to contain a single element, but it was empty.\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eweifenluo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-16T22:06:02Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "System.ComponentModel.DataAnnotations.Validator.TryValidateObject does not work with ICustomTypeDescriptor",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59076",
        "createdAt":  "2021-09-14T10:54:35Z",
        "number":  59076,
        "author":  "anttikes",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-09-17T11:34:13Z",
        "body":  "### Description\r\n\r\nValidation attributes such as EmailAddressAttribute make use of the \"is\" keyword. The problem with this keyword is that it completely ignores user-defined conversion operators.\r\n\r\nThe following example comes from our own implementation where we support JSON Merge Patch:\r\n```\r\n[JsonConverter(typeof(OptionalConverterFactory))]\r\npublic record Optional\u003cT\u003e\r\n{\r\n    internal Optional(T value)\r\n    {\r\n        Value = value;\r\n        HasValue = true;\r\n    }\r\n\r\n    public T Value { get; internal set; }\r\n    public bool HasValue { get; internal set; }\r\n\r\n    public static implicit operator Optional\u003cT\u003e(T value) =\u003e new(value);\r\n\r\n    public static implicit operator T(Optional\u003cT\u003e value)\r\n    {\r\n        if (value.HasValue)\r\n            return value.Value;\r\n\r\n        return default;\r\n    }\r\n}\r\n```\r\nThe OptionalConverterFactory mentioned in the code, and the generic converter class behind it are not relevant to this discussion as they have already been verified to work correctly.\r\n\r\nThe problem comes when we attempt to use this new record type with the existing validation attributes. Consider the following request class:\r\n```\r\npublic class UpdateRequest\r\n{\r\n    [EmailAddress]\r\n    public Optional\u003cstring\u003e Email { get; init; }\r\n\r\n    [Phone]\r\n    public Optional\u003cstring\u003e NotProvidedInTheRequest { get; init; }\r\n}\r\n```\r\nAnd a Json-based \"merge patch\" request coming in to an ASP.NET Core Web API:\r\n```\r\n{\r\n    \"email\": \"new-address@foo.com\"\r\n}\r\n```\r\nThe result is that the validation always fails because the EmailAddressAttribute uses the \u0027is\u0027 keyword. This keyword completely ignores the user-provided conversion operator, and thus [line 25 of the attribute\u0027s validation](https://github.com/dotnet/runtime/blob/main/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/EmailAddressAttribute.cs#L25) code will always return false.\r\n\r\n### Expected behavior\r\n\r\nI would expect the validation attributes work correctly even when wrappers are used. Ironically, the [\u0027is\u0027 operator](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#is-operator) is hard-wired to support the Nullable struct but unfortunately for us, Nullable only allows value type parameters. So, we cannot use it as a replacement for the Optional record which allows both value and reference types.\r\n\r\nWe cannot \"do away\" without the Optional class as there doesn\u0027t seem to be a way to distinguish between \"value was not provided\" and \"value was set to null\", especially when using the System.String type.\r\n\r\n### Configuration\r\n\r\n.NET Version: .NET Core v5.0.9\r\nOS info: Windows 10, with all the latest Windows Update patches\r\nArchitecture: x64\r\n\r\nAnalysis suggests that this issue is not specific to the OS or architecture configuration. The attribute\u0027s validation code is the same everywhere.\r\n\r\n### Regression?\r\n\r\nNot a regression. The .NET Framework [counterpart](https://referencesource.microsoft.com/#System.ComponentModel.DataAnnotations/DataAnnotations/EmailAddressAttribute.cs,21) uses the \u0027as\u0027 keyword which suffers from the same problem.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONtKsVg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42x3A6",
                                           "createdAt":  "2021-09-14T10:54:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers, @bricelam, @roji\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nValidation attributes such as [EmailAddressAttribute](https://github.com/dotnet/runtime/blob/main/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/EmailAddressAttribute.cs#L25) make use of the \"is\" keyword. The problem with this keyword is that it completely ignores user-defined conversion operators.\r\n\r\nThe following example comes from our own implementation where we support JSON Merge Patch:\r\n```\r\n[JsonConverter(typeof(OptionalConverterFactory))]\r\npublic record Optional\u003cT\u003e\r\n{\r\n    internal Optional(T value)\r\n    {\r\n        Value = value;\r\n        HasValue = true;\r\n    }\r\n\r\n    public T Value { get; internal set; }\r\n    public bool HasValue { get; internal set; }\r\n\r\n    public static implicit operator Optional\u003cT\u003e(T value) =\u003e new(value);\r\n\r\n    public static implicit operator T(Optional\u003cT\u003e value)\r\n    {\r\n        if (value.HasValue)\r\n            return value.Value;\r\n\r\n        return default;\r\n    }\r\n}\r\n```\r\nThe OptionalConverterFactory mentioned in the code, and the generic converter class behind it are not relevant to this discussion as they have already been verified to work correctly.\r\n\r\nThe problem comes when we attempt to use this new record type with the existing validation attributes. Consider the following request class:\r\n```\r\npublic class UpdateRequest\r\n{\r\n    [EmailAddress]\r\n    public Optional\u003cstring\u003e Email { get; init; }\r\n\r\n    [Phone]\r\n    public Optional\u003cstring\u003e NotProvidedInTheRequest { get; init; }\r\n}\r\n```\r\nAnd a Json-based \"merge patch\" request coming in to an ASP.NET Core Web API:\r\n```\r\n{\r\n    \"email\": \"new-address@foo.com\"\r\n}\r\n```\r\nThe result is that the validation always fails because the EmailAddressAttribute uses the \u0027is\u0027 keyword. This keyword completely ignores the user-provided conversion operator, and thus line 25 of the attribute\u0027s validation code will always return false.\r\n\r\n### Expected behavior\r\n\r\nI would expect the validation attributes work correctly even when wrappers are used. Ironically, the [\u0027is\u0027 operator](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#is-operator) is hard-wired to support the Nullable struct but unfortunately for us, Nullable only allows value type parameters. So, we cannot use it as a replacement for Optional.\r\n\r\nWe cannot \"do away\" without the Optional class as there doesn\u0027t seem to be a way to distinguish between \"value was not provided\" and \"value was set to null\", especially when using the System.String type.\r\n\r\n### Configuration\r\n\r\n.NET Version: .NET Core v5.0.9\r\nOS info: Windows 10, with all the latest Windows Update patches\r\nArchitecture: x64\r\n\r\nAnalysis suggests that this issue is not specific to the OS or architecture configuration. The attribute\u0027s validation code is the same everywhere.\r\n\r\n### Regression?\r\n\r\nNot a regression. The .NET Framework [counterpart](https://referencesource.microsoft.com/#System.ComponentModel.DataAnnotations/DataAnnotations/EmailAddressAttribute.cs,21) uses the \u0027as\u0027 keyword which suffers from the same problem.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eanttikes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-14T10:54:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42zWq_",
                                           "createdAt":  "2021-09-14T18:59:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "anttikes",
                                           "body":  "I am already aware of one common workaround, and it is to implement IValidatableObject on the request class, and then in the body of the validation method to manually instantiate each of the validation attributes and provide the \"value to be validated\" from the Value property of the Optional record.\r\n\r\nThis workaround works but from the code perspective it is just plain ugly.",
                                           "updatedAt":  "2021-09-14T18:59:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc420qxW",
                                           "createdAt":  "2021-09-15T07:38:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "anttikes",
                                           "body":  "I also found out that not all of the \"string\"-based built-in validation attributes follow a similar suite. For example:\r\n- RegularExpressionAttribute uses the Convert class\r\n- StringLengthAttribute uses a cast operation\r\n\r\nIt is unclear why there\u0027s a difference in behavior between the attributes. Logically thinking they should all follow the same approach.",
                                           "updatedAt":  "2021-09-15T07:38:22Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Unable to use wrapper types with built-in validation attributes",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60716",
        "createdAt":  "2021-10-21T03:27:51Z",
        "number":  60716,
        "author":  "ti994a7",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCrLMbA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lukasan",
                                            "createdAt":  "2022-02-23T10:48:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HGjuanh",
                                            "createdAt":  "2022-10-26T17:23:03Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-02-02T18:16:53Z",
        "body":  "Adding the Required data annotation to a string always adds the \u0027data-val-required\u0027 attribute on the html input element when using the \u0027asp-for\u0027 tag helper (even if the AllowEmptyStrings property is set to true), which causes a client side validation error if the value is left empty.  It was possible to work around this issue before .NET 5 by creating a custom validator that inherited from the RequiredAttribute, however I believe that the change on line 40 of ValidationAttributeAdapterProvider.cs from \u0027else if (type == typeof(RequiredAttribute))\u0027 to \u0027else if (typeof(RequiredAttribute).IsAssignableFrom(type))\u0027 is now preventing that work around from functioning.  I believe that it could be resolved by changing the line to read \u0027else if (typeof(RequiredAttribute).IsAssignableFrom(type) \u0026\u0026 !((RequiredAttribute)attribute).AllowEmptyStrings)\u0027, which would essentially remove the required client side validation.  It could also be handled in the RequiredAttributeAdapter.cs class.  The reason that I have the required attribute on the property is to create the column as non-nullable in code-first migrations, however I would like to allow empty strings on the page.  I also have DisplayFormat(ConvertEmptyStringToNull = false), and the server side validation passes, but the client side fails.  I know that I could use a separate model for the page, however in this case I would prefer not to, and either way it seems to make more sense for the client side validation to match the server side validation behavior, which is to pass with an empty string if the AllowEmptyStrings property is set to true.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOOEGWA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44jJw5",
                                           "createdAt":  "2021-10-21T15:42:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAdding the Required data annotation to a string always adds the \u0027data-val-required\u0027 attribute on the html input element when using the \u0027asp-for\u0027 tag helper (even if the AllowEmptyStrings property is set to true), which causes a client side validation error if the value is left empty.  It was possible to work around this issue before .NET 5 by creating a custom validator that inherited from the RequiredAttribute, however I believe that the change on line 40 of ValidationAttributeAdapterProvider.cs from \u0027else if (type == typeof(RequiredAttribute))\u0027 to \u0027else if (typeof(RequiredAttribute).IsAssignableFrom(type))\u0027 is now preventing that work around from functioning.  I believe that it could be resolved by changing the line to read \u0027else if (typeof(RequiredAttribute).IsAssignableFrom(type) \u0026\u0026 !((RequiredAttribute)attribute).AllowEmptyStrings)\u0027, which would essentially remove the required client side validation.  It could also be handled in the RequiredAttributeAdapter.cs class.  The reason that I have the required attribute on the property is to create the column as non-nullable in code-first migrations, however I would like to allow empty strings on the page.  I also have DisplayFormat(ConvertEmptyStringToNull = false), and the server side validation passes, but the client side fails.  I know that I could use a separate model for the page, however in this case I would prefer not to, and either way it seems to make more sense for the client side validation to match the server side validation behavior, which is to pass with an empty string if the AllowEmptyStrings property is set to true.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eti994a7\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-21T15:42:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc444QZY",
                                           "createdAt":  "2021-10-28T22:25:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers, @bricelam, @roji\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAdding the Required data annotation to a string always adds the \u0027data-val-required\u0027 attribute on the html input element when using the \u0027asp-for\u0027 tag helper (even if the AllowEmptyStrings property is set to true), which causes a client side validation error if the value is left empty.  It was possible to work around this issue before .NET 5 by creating a custom validator that inherited from the RequiredAttribute, however I believe that the change on line 40 of ValidationAttributeAdapterProvider.cs from \u0027else if (type == typeof(RequiredAttribute))\u0027 to \u0027else if (typeof(RequiredAttribute).IsAssignableFrom(type))\u0027 is now preventing that work around from functioning.  I believe that it could be resolved by changing the line to read \u0027else if (typeof(RequiredAttribute).IsAssignableFrom(type) \u0026\u0026 !((RequiredAttribute)attribute).AllowEmptyStrings)\u0027, which would essentially remove the required client side validation.  It could also be handled in the RequiredAttributeAdapter.cs class.  The reason that I have the required attribute on the property is to create the column as non-nullable in code-first migrations, however I would like to allow empty strings on the page.  I also have DisplayFormat(ConvertEmptyStringToNull = false), and the server side validation passes, but the client side fails.  I know that I could use a separate model for the page, however in this case I would prefer not to, and either way it seems to make more sense for the client side validation to match the server side validation behavior, which is to pass with an empty string if the AllowEmptyStrings property is set to true.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eti994a7\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel`, `area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-28T22:25:58Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[Required(AllowEmptyStrings = true)] data annotation causes client side validation error on empty strings",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61441",
        "createdAt":  "2021-11-10T22:51:01Z",
        "number":  61441,
        "author":  "voroninp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-02-02T18:17:16Z",
        "body":  "My expectation was that `System.ComponentModel.DataAnnotations.Validator` class behavior is aligned with the one of serializers, model binders or ef core.\r\n\r\nYet validator is ok when property with non-nullable reference type has `null` as its value.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOZEwLQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45kTAt",
                                           "createdAt":  "2021-11-10T22:51:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers, @bricelam, @roji\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nMy expectation was that `System.ComponentModel.DataAnnotations.Validator` class behavior is aligned with the one of serializers, model binders or ef core.\r\n\r\nYet validator is ok when property with non-nullable reference type has `null` as its value.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evoroninp\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-10T22:51:07Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Should Validator.Validate treat non-nullable reference types as required?",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61770",
        "createdAt":  "2021-11-18T09:06:39Z",
        "number":  61770,
        "author":  "Frisch12",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-14T08:48:15Z",
        "body":  "### Description\n\nDataAnnotations that are present multiple times are filtered and only the last one is evaluated in validation. \n\n### Reproduction Steps\n\nWrite a custom DataAnnotation attribute and annotate a property twice with it. \n\n### Expected behavior\n\nAll DataAnnotation attributes got evaluated\n\n### Actual behavior\n\nOnly the last occurrence is evaluated when you do a validation. \n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nWrite your Attributes that you don\u0027t need to define them multiple times. \n\n### Configuration\n\nVersion: .NET 6.0.100 \r\nOS: macOS, Windows, Linux\r\nArchitecture: x64\r\n\r\nIt is not specific to that configuration. It\u0027s a bug in the library \"System.ComponentModel.Annotations\"\n\n### Other information\n\nThe bug got added with this commit: https://github.com/dotnet/runtime/commit/5d42771f7e79c03f65607216b37049a39d6f535e#diff-7b93b4f02cacbea8897ffd239c7c260c5ca6384d8b09f9c2ad3719b6e9a2eea8\r\n\r\nThere the `TypeDescriptor.GetAttributes` gets called wich filters for uniqueness.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSks8gQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45-b8K",
                                           "createdAt":  "2021-11-18T09:06:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers, @bricelam, @roji\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nDataAnnotations that are present multiple times are filtered and only the last one is evaluated in validation. \n\n### Reproduction Steps\n\nWrite a custom DataAnnotation attribute and annotate a property twice with it. \n\n### Expected behavior\n\nAll DataAnnotation attributes got evaluated\n\n### Actual behavior\n\nOnly the last occurrence is evaluated when you do a validation. \n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nWrite your Attributes that you don\u0027t need to define them multiple times. \n\n### Configuration\n\nVersion: .NET 6.0.100 \r\nOS: macOS, Windows, Linux\r\nArchitecture: x64\r\n\r\nIt is not specific to that configuration. It\u0027s a bug in the library \"System.ComponentModel.Annotations\"\n\n### Other information\n\nThe bug got added with this commit: https://github.com/dotnet/runtime/commit/5d42771f7e79c03f65607216b37049a39d6f535e#diff-7b93b4f02cacbea8897ffd239c7c260c5ca6384d8b09f9c2ad3719b6e9a2eea8\r\n\r\nThere the `TypeDescriptor.GetAttributes` gets called wich filters for uniqueness.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eFrisch12\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-18T09:06:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45-cWD",
                                           "createdAt":  "2021-11-18T09:08:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Frisch12",
                                           "body":  "I\u0027ll happy to provide a fix for this. However I firstly want to check what the backgrounds are for that change, also for \"designing\" a good solution for that.\r\n\r\nCurrently this breaks our whole validation in .NET-6",
                                           "updatedAt":  "2021-11-18T09:12:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45-dho",
                                           "createdAt":  "2021-11-18T09:14:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCDFlpQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "TROEERI",
                                                                               "createdAt":  "2021-11-18T09:27:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Frisch12",
                                           "body":  "@Xaeco maybe you have any thoughts on that? ",
                                           "updatedAt":  "2021-11-18T09:14:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46AOLj",
                                           "createdAt":  "2021-11-18T18:20:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Xaeco",
                                           "body":  "\u003e @Xaeco maybe you have any thoughts on that? \n\nI had the same question when I worked on this. \n\nThe difficulty is what to do with conflicts when you overlay multiple attributes.\n\nIf you were to have multiple MaxLength attributes, which is correct? \n\nI believe the current behaviour is sound as the end result is a culmination of what you\u0027ve asked it to do based on the order of operations. \n\nWhat attribute types would you expect to have multiple of and how would you envisage they be processed in a predictable manner?",
                                           "updatedAt":  "2021-11-18T18:20:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46DEFo",
                                           "createdAt":  "2021-11-19T09:00:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCsHXkg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fedotovsi",
                                                                               "createdAt":  "2022-09-13T08:33:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Frisch12",
                                           "body":  "Thank you for your answer. \r\n\r\nIn our software we use conditional attributes like `RequiredIf` and `NotEmptyWhen`. With that we implement complex validation logic, so the \"uniqueness\" breaks our whole validation process. \r\n\r\nYou are absolutely right. Multiple `MaxLength` attributes will result in a conflict. I\u0027m not sure how we can circumnavigate that while allow for multiple. Maybe by \"ordering\" or \"overwriting\" them like the painter principle when the `AllowMultiple` flag is `false`. So the closest to the actual implementation get respected. ",
                                           "updatedAt":  "2021-11-19T09:00:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KNlIa",
                                           "createdAt":  "2022-09-13T08:29:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCsKUdQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Frisch12",
                                                                               "createdAt":  "2022-09-13T19:02:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fedotovsi",
                                           "body":  "Hello,\r\nWe also have this issue after upgrading from 3.1\r\nWe are using custom attributes derived from ValidationAttribute in something similar situations as @Frisch12 does, e.g. RequiredWhen, UseRegexWhen, etc...\r\nSo whole validation mechanism didn\u0027t work for us, likely, we had covered with unit tests so we spotted it without going to production :) \r\nPersonally, I don\u0027t see a point to restrict attributes to be unique as almost all standard attribute have allowMultiple = false so there is no way to use them twice anyhow and if some one decides  to use a custom attribute twice on the same property I don\u0027t see reason why he should not ? do you ?",
                                           "updatedAt":  "2022-09-13T08:34:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KSzyB",
                                           "createdAt":  "2022-09-14T08:48:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCsRC9w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fedotovsi",
                                                                               "createdAt":  "2022-09-15T08:04:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Znahar",
                                           "body":  "For anyone who will be looking for a solution. Description is in bug #63195\r\nAdd following to your custom attribute and TypeDescriptor will not skip them\r\npublic override object TypeId =\u003e this;",
                                           "updatedAt":  "2022-09-14T08:48:15Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "DataAnnotations are filtered for uniqueness",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61778",
        "createdAt":  "2021-11-18T15:00:20Z",
        "number":  61778,
        "author":  "sokolovsa",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9Dn_A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aetos382",
                                            "createdAt":  "2024-11-29T05:49:01Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-11-29T05:57:03Z",
        "body":  "### Description\n\nNuget package System.ComponentModel.Annotations\r\nversions:\r\n6.0.0-preview.4.21253.7\r\n5.0.0\r\n4.7.0\r\n\r\nref assembly in package subfolder ref/netstandard2.0\r\nand assembly in subfolder lib/netstandard2.0\r\nhave different AssemblyVersion attribute\r\nref assembly has AssemblyVersion=4.2.0\r\nreal assembly has AssemblyVersion=4.2.1\n\n### Reproduction Steps\n\n* create any .net standard 2.0 dll project and add package reference to System.ComponentModel.Annotations  5.0.0\r\n* build the project\r\n* inspect the output dll in reflector/dotpeek etc\n\n### Expected behavior\n\nthe output dll has reference to System.ComponentModel.Annotations v 4.2.1\n\n### Actual behavior\n\nthe output dll has reference to System.ComponentModel.Annotations v 4.2.0\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.net standard 2.0\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlW_lfw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45_fdt",
                                           "createdAt":  "2021-11-18T15:00:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers, @bricelam, @roji\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nNuget package System.ComponentModel.Annotations\r\nversions:\r\n6.0.0-preview.4.21253.7\r\n5.0.0\r\n4.7.0\r\n\r\nref assembly in package subfolder ref/netstandard2.0\r\nand assembly in subfolder lib/netstandard2.0\r\nhave different AssemblyVersion attribute\r\nref assembly has AssemblyVersion=4.2.0\r\nreal assembly has AssemblyVersion=4.2.1\n\n### Reproduction Steps\n\n* create any .net standard 2.0 dll project and add package reference to System.ComponentModel.Annotations  5.0.0\r\n* build the project\r\n* inspect the output dll in reflector/dotpeek etc\n\n### Expected behavior\n\nthe output dll has reference to System.ComponentModel.Annotations v 4.2.1\n\n### Actual behavior\n\nthe output dll has reference to System.ComponentModel.Annotations v 4.2.0\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.net standard 2.0\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esokolovsa\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-18T15:00:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48VrtJ",
                                           "createdAt":  "2022-01-13T16:48:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bormm",
                                           "body":  "I think this is a duplicate of https://github.com/dotnet/runtime/issues/41221 unfortunately Microsoft has created a bigger issue than described. So closing it and blocking from comments was not very nice.\r\nIt is not possible to do a binding redirect for a PowerShell (non-Core) module of course just easily as descripted. So we got in dependency hell again because this version mess. We have to do the redirect now via code as descripted here https://devblogs.microsoft.com/powershell/resolving-powershell-module-assembly-dependency-conflicts/",
                                           "updatedAt":  "2022-01-14T09:41:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E3-qC",
                                           "createdAt":  "2024-07-15T19:52:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aparajit-pratap",
                                           "body":  "I opened a similar issue [here](https://github.com/dotnet/runtime/issues/104910) before realizing this one already existed. Linking the issue here for more details.",
                                           "updatedAt":  "2024-07-15T19:52:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E4NWW",
                                           "createdAt":  "2024-07-15T20:18:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "There is an ask to add some public doc explaining the issue and workarounds. ",
                                           "updatedAt":  "2024-07-15T20:18:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Vb-V_",
                                           "createdAt":  "2024-11-29T05:57:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aetos382",
                                           "body":  "I referenced this package using my own Roslyn Analyzer.\nIn this case, the analyzer is loaded into csc.exe, which runs on the .NET Framework.\nIs there a workaround for this (other than referencing an older version of the package)?\n`\u003cAutoGenerateBindingRedirects\u003etrue\u003c/AutoGenerateBindingRedirects\u003e` did not work.\n\n",
                                           "updatedAt":  "2024-11-29T05:57:01Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Invalid AssemblyVersion in ref subfolder of System.ComponentModel.Annotations package",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63195",
        "createdAt":  "2021-12-29T15:32:25Z",
        "number":  63195,
        "author":  "Rutix",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqhZ9A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StacyCash",
                                            "createdAt":  "2022-01-24T10:56:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "n-shay",
                                            "createdAt":  "2022-03-28T19:08:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "y-vitly",
                                            "createdAt":  "2022-04-12T20:50:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AraHaan",
                                            "createdAt":  "2022-09-10T06:22:02Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2022-12-10T10:03:30Z",
        "body":  "### Description\r\n\r\nWe are upgrading our solutions from .NET 5 and .NET 6 and it went well until in one solutions a lot of unittests started failing. It seems that when you use `TryValidateObject` from `System.ComponentModel.DataAnnotations` it won\u0027t go through all the (custom) validation attributes of the same type when there are multiple on a property. While debugging in .NET 5 you go through the `IsValid` method as many times as you have added the attribute but in .NET 6 it will only call the `IsValid` and it seems to be of the last attribute.\r\n\r\n### Reproduction Steps\r\n\r\nI have tried to make an as minimal repo as possible:\r\n\r\n.NET 5:\r\nhttps://github.com/Rutix/ValidationTest/blob/main/ValidationTest.Unittest/UnitTest1.cs\r\n\r\nRunning this will pass the test.\r\n\r\n.NET 6:\r\nhttps://github.com/Rutix/ValidationTest/blob/net6/ValidationTest.Unittest/UnitTest1.cs\r\n\r\nRunning this will fail the test.\r\n\r\n### Expected behavior\r\n\r\nThe expected behavior (unless i missed a breaking change) would be the behavior which we get in .NET 5.\r\n\r\n### Actual behavior\r\n\r\nIsValid isn\u0027t called on all the attributes of the same type.\r\n\r\n### Regression?\r\n\r\nWorked in .NET 5\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR3Ja9Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc47wz3d",
                                           "createdAt":  "2021-12-29T15:32:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-12-29T15:32:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47w2ZX",
                                           "createdAt":  "2021-12-29T15:55:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers, @bricelam, @roji\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWe are upgrading our solutions from .NET 5 and .NET 6 and it went well until in one solutions a lot of unittests started failing. It seems that when you use `TryValidateObject` from `System.ComponentModel.DataAnnotations` it won\u0027t go through all the (custom) validation attributes of the same type when there are multiple on a property. While debugging in .NET 5 you through the `IsValid` method as many times as you have added the attribute but in .NET 6 it will only call the `IsValid` and it seems to be of the last attribute.\r\n\r\n### Reproduction Steps\r\n\r\nI have tried to make an as minimal repo as possible:\r\n\r\n.NET 5:\r\nhttps://github.com/Rutix/ValidationTest/blob/main/ValidationTest.Unittest/UnitTest1.cs\r\n\r\nRunning this will pass the test.\r\n\r\n.NET 6:\r\nhttps://github.com/Rutix/ValidationTest/blob/net6/ValidationTest.Unittest/UnitTest1.cs\r\n\r\nRunning this will fail the test.\r\n\r\n### Expected behavior\r\n\r\nThe expected behavior (unless i missed a breaking change) would be the behavior which we get in .NET 5.\r\n\r\n### Actual behavior\r\n\r\nIsValid isn\u0027t called on all the attributes of the same type.\r\n\r\n### Regression?\r\n\r\nWorked in .NET 5\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eRutix\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-29T15:55:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48y46I",
                                           "createdAt":  "2022-01-24T11:01:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StacyCash",
                                           "body":  "Is there any information on this - it\u0027s a showstopper for us at the moment 😭",
                                           "updatedAt":  "2022-01-24T11:01:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48zBUf",
                                           "createdAt":  "2022-01-24T11:39:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@bricelam Can you investigate this? Could be around the validation changes we made.",
                                           "updatedAt":  "2022-01-24T11:39:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48zBos",
                                           "createdAt":  "2022-01-24T11:40:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "The second attribute with the same type is already missing from PropertyDescriptor.Attributes:\r\n\r\n```C#\r\nforeach (PropertyDescriptor prop in TypeDescriptor.GetProperties(typeof(Foobar)))\r\n{\r\n    Console.WriteLine(prop.Name);\r\n    Console.WriteLine(prop.Attributes.Count);\r\n    foreach (Attribute attr in prop.Attributes)\r\n    {\r\n        Console.WriteLine(attr);\r\n    }\r\n}\r\n```\r\n\r\nAnd this happens even if the attribute type overrides Attribute.Match to compare by reference equality.",
                                           "updatedAt":  "2022-01-24T11:40:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48zE5y",
                                           "createdAt":  "2022-01-24T11:57:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "But if the attribute type has\r\n\r\n```C#\r\npublic override object TypeId =\u003e this;\r\n```\r\n\r\nthen PropertyDescriptor.Attributes preserves both attributes, and validation uses both attributes.\r\n\r\nAttribute instances with duplicate Attribute.TypeId values are discarded by MemberDescriptor.FilterAttributesIfNeeded: \u003chttps://github.com/dotnet/runtime/blob/4822e3c3aa77eb82b2fb33c9321f923cf11ddde6/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs#L359-L377\u003e\r\n\r\nI don\u0027t know what the intended behaviour is -- how does this work in .NET Framework? Anyway, one can work around the issue by overriding TypeId. Except maybe that will also prevent the attributes from hiding similar attributes that were inherited from the base class or attached to the type of the property.",
                                           "updatedAt":  "2022-01-24T11:59:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48zZSx",
                                           "createdAt":  "2022-01-24T13:32:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  ".NET Framework 4.8 likewise discards one of the duplicate attributes, if the attribute type does not override TypeId. Also, the .NET Framework implementation of System.ComponentModel.DataAnnotations.CustomValidationAttribute does override TypeId, so this seems something that custom validation attributes are expected to do.\r\n\r\nI think the behavior is by design, then.",
                                           "updatedAt":  "2022-01-24T13:32:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48zaOi",
                                           "createdAt":  "2022-01-24T13:37:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rutix",
                                           "body":  "What was the intended behavior in .NET 3.1 / .NET 5 since it worked there. I will try your workaround to see if that helps any further.",
                                           "updatedAt":  "2022-01-24T13:37:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48zj_p",
                                           "createdAt":  "2022-01-24T14:19:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "The behaviour change was likely caused by \u003chttps://github.com/dotnet/runtime/pull/51772\u003e, which made ValidationAttributeStore.GetTypeStoreItem(Type type) use TypeDescriptor.GetAttributes (which lets MemberDescriptor.FilterAttributesIfNeeded discard duplicate attributes by TypeId) rather than CustomAttributeExtensions.GetAttributes (which doesn\u0027t).\r\n\r\nBecause using TypeDescriptor was necessary for fixing \u003chttps://github.com/dotnet/runtime/issues/46678\u003e, and the behaviour now matches .NET Framework, I think it\u0027s unlikely to be changed back.",
                                           "updatedAt":  "2022-01-24T14:21:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48zoIZ",
                                           "createdAt":  "2022-01-24T14:37:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCr_1lw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "n-shay",
                                                                               "createdAt":  "2022-03-28T19:08:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2022-09-10T06:24:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Perhaps an analyzer should be added, though. Warn if an attribute type is (indirectly) derived from ValidationAttribute and has AllowMultiple = true and does not override Attribute.TypeId.",
                                           "updatedAt":  "2022-01-24T14:38:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48z1sI",
                                           "createdAt":  "2022-01-24T15:29:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rutix",
                                           "body":  "I will wait for either @@ajcvickers, @bricelam, @roji to confirm this behavior is staying. If it\u0027s staying an analyzer and docs update seems to be wise to do. This is totally unexpected behavior if you don\u0027t know this case :(",
                                           "updatedAt":  "2022-01-24T15:29:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49Uqw8",
                                           "createdAt":  "2022-02-03T10:13:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WT-Solutions",
                                           "body":  "We ran into this issue as well (see #64672) and we noticed that the validation using this Validator is different than the one that is used during model binding in MVC. There both attributes are evaluated. So from that point of view I think this is still a bug rather than a design decision.\r\n",
                                           "updatedAt":  "2022-02-03T10:13:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BcLLV",
                                           "createdAt":  "2022-04-13T10:47:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "y-vitly",
                                           "body":  "Hi, is there any updates on this issue?",
                                           "updatedAt":  "2022-04-13T10:47:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hclr1",
                                           "createdAt":  "2022-07-28T22:05:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODa16vA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KalleOlaviNiemitalo",
                                                                               "createdAt":  "2024-03-17T06:30:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "@ajcvickers I think the `Servicing-Consider` label applies to PRs. To get a fix for this issue reviewed for servicing, a PR has to be opened with this label.",
                                           "updatedAt":  "2022-07-28T22:05:13Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "Bug: Change in behavior with .NET 5 vs .NET 6 in AllowMultiple attributes",
        "labels":  [
                       "Servicing-consider",
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71201",
        "createdAt":  "2022-01-18T01:48:40Z",
        "number":  71201,
        "author":  "DoctorVanGogh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCjV2rQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lindexi",
                                            "createdAt":  "2022-02-08T01:01:02Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-07-06T09:50:53Z",
        "body":  "### Description\n\nI\u0027ve come across a weird-ish bug which seems to sit at the intersection of `AssociatedMetadataTypeTypeDescriptionProvider` from `System.ComponentModel.DataAnnotations` and Bindings in WPF (possibly only happening inside `DataTemplate`s).\r\n\r\nIf you have a Type `Foo` with a `MetadataType` attribute pointing to `FooMetadata` and have registered an appropriate `AssociatedMetadataTypeTypeDescriptionProvider` via `TypeDescriptor.AddProvider[Transparent]` then using a WPF `Binding` into basically _any_ property of an object of `typeof(Foo)` (inside a `DataTemplate` at least) will cause an `InvalidOperationException` \u0026 `XamlParseException`.\r\n\r\nIt seems the Binding subsystem queries the registered AssociatedMetadataTypeTypeDescriptionProvider for `typeof(Foo)` but then passes in a query for `System.RuntimeType` into that provider, which ends up declaring the metadata from `FooMetadata` to apply to `System.RuntimeType`, which naturally will blow _spectacularly_ (unless you are exceedingly \"lucky\" and have only declared metadata with matching names from `System.RuntimeType`).\r\n\r\nI\u0027ve been able to reproduce the issue in _any_ framework from 3.5 up to now .net 6.__\n\n### Reproduction Steps\n\nHave some metadata defined for a type:\r\n```cs\r\n    [MetadataType(typeof(FooMetadata))]\r\n    public class Foo {\r\n        public int Fubar { get; set; }\r\n    }\r\n\r\n    public class FooMetadata {\r\n        [Range(1, 2)]\r\n        public int Fubar { get; set; }\r\n    }\r\n```\r\nRegister that metadata:\r\n```cs\r\nTypeDescriptor.AddProvider(new AssociatedMetadataTypeTypeDescriptionProvider(typeof(Foo), typeof(FooMetadata)), typeof(Foo));\r\n```\r\n\r\nUse an instance of `typeof(Foo)` somewhere (either directly inside xaml or from a model class will do) and have a `DataTemplate`declare a `Binding` into a _property_ of that instance:\r\n```xaml\r\n\u003cWindow x:Class=\"demo.DemoWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:demo\"\r\n        xmlns:system=\"clr-namespace:System;assembly=mscorlib\"        \r\n        mc:Ignorable=\"d\"\r\n        Title=\"DemoWindow\" Height=\"450\" Width=\"800\"\u003e\r\n    \u003cContentControl Content=\"{x:Type local:Foo}\" \u003e\r\n        \u003cContentControl.ContentTemplate\u003e\r\n            \u003cDataTemplate DataType=\"{x:Type system:Type}\"\u003e\r\n                \u003cTextBlock Text=\"{Binding Name}\" /\u003e\r\n            \u003c/DataTemplate\u003e\r\n        \u003c/ContentControl.ContentTemplate\u003e\r\n    \u003c/ContentControl\u003e\r\n\u003c/Window\u003e\r\n```\r\nTry to show this window.\r\n\r\n---\r\nI have attached a minimal unit test project which has a (failing) test for the issue.\r\n[demo.zip](https://github.com/dotnet/runtime/files/7885436/demo.zip)\r\n\n\n### Expected behavior\n\n1. No exceptions\r\n2. Either of these two scenarios:\r\n    1. If a `Binding` is over an instance of type `Type` (here `typeof(Foo)`) have it **not** query the `TypeDesciptor` of the *instance* (here the type descriptor for `Foo`) but have it query the type descriptor for `Type`.\r\n    2. Change the `AssociatedMetadataTypeTypeDescriptionProvider` classes `GetTypeDescriptor` method to not return the metadata \"enhanced\" type descriptor if the requested `objectType` parameter is **not** the same as the type the description provider was created for (or is at least a subclass of it).\r\n\n\n### Actual behavior\n\n**InvalidOperationException**: The associated metadata type for type \u0027System.RuntimeType\u0027 contains the following unknown properties or fields: .... (a lists of all fields of the metadata type will follow which not just _happen_ to have a matching member in `RuntimeType`).\r\n\r\nnested inside a \r\n\r\n**XamlParseException** (same message)\r\n\r\nnested inside a\r\n\r\n**NullReferenceException**\r\n\r\ntypically leading to an application exit.\r\n\n\n### Regression?\n\nDoes not seem so:\r\nI\u0027ve checked .Net framework 3.5, 4.0, 4.5, 4.72, 4.8 and .NET 5 \u0026 6. They all exhibit the same behavior.\r\n\r\nMy demo project may only be for 4.72 \u0026 up, but that\u0027s only because the current test frameworks dont work nice with significantly older frameworks.\r\n\n\n### Known Workarounds\n\nSee expected behavior:\r\nUse a custom AssociatedMetadataTypeTypeDescriptionProvider like:\r\n\r\n```cs\r\n    public class CustomMetadataTypeDescriptionProvider : AssociatedMetadataTypeTypeDescriptionProvider {\r\n\r\n        public CustomMetadataTypeDescriptionProvider(Type type) : base(type) {\r\n            Underlying = TypeDescriptor.GetProvider(type);\r\n            Type = type;\r\n        }\r\n\r\n        public CustomMetadataTypeDescriptionProvider(Type type, Type associatedMetadataType) : base(type, associatedMetadataType) {\r\n            Underlying = TypeDescriptor.GetProvider(type);\r\n            Type = type;\r\n        }\r\n\r\n        public TypeDescriptionProvider Underlying { get; }\r\n        public Type Type { get; }\r\n\r\n        public override ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance) {           \r\n            if (objectType != Type)\r\n                return Underlying.GetTypeDescriptor(objectType, instance);\r\n\r\n            return base.GetTypeDescriptor(objectType, instance);\r\n        }\r\n\r\n    }\r\n\r\n```\n\n### Configuration\n\nI have been able to reproduce the issue on\r\n- .Net Framework 3.5\r\n- .Net Framework 4.0\r\n- .Net Framework 4.5\r\n- .Net Framework 4.7.2\r\n- .Net Framework 4.8\r\n- .NET 5\r\n- .NET 6\r\n\r\n(all on windows 10 x64)\r\n\r\nI have no particular expectation that the .NET CORE frameworks in between are any better, but have not personally tested that.\r\n\r\n\r\n\n\n### Other information\n\nAs stated before: \r\nA `Binding` on a `Type` instance seems to query against the `TypeDescriptor` **of the instance**, not for `Type` itself.\r\nAnd the `AssociatedMetadataTypeTypeDescriptionProvider ` seems to _assume_ it will only ever get called for its associated type.\r\n\r\nTogether those two effects cause exceptions.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORWX2rw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5FZfae",
                                           "createdAt":  "2022-01-18T01:48:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI\u0027ve come across a weird-ish bug which seems to sit at the intersection of `AssociatedMetadataTypeTypeDescriptionProvider` from `System.ComponentModel.DataAnnotations` and Bindings in WPF (possibly only happening inside `DataTemplate`s).\r\n\r\nIf you have a Type `Foo` with a `MetadataType` attribute pointing to `FooMetadata` and have registered an appropriate `AssociatedMetadataTypeTypeDescriptionProvider` via `TypeDescriptor.AddProvider[Transparent]` then using a WPF `Binding` into basically _any_ property of an object of `typeof(Foo)` (inside a `DataTemplate` at least) will cause an `InvalidOperationException` \u0026 `XamlParseException`.\r\n\r\nIt seems the Binding subsystem queries the registered AssociatedMetadataTypeTypeDescriptionProvider for `typeof(Foo)` but then passes in a query for `System.RuntimeType` into that provider, which ends up declaring the metadata from `FooMetadata` to apply to `System.RuntimeType`, which naturally will blow _spectacularly_ (unless you are exceedingly \"lucky\" and have only declared metadata with matching names from `System.RuntimeType`).\r\n\r\nI\u0027ve been able to reproduce the issue in _any_ framework from 3.5 up to now .net 6.__\n\n### Reproduction Steps\n\nHave some metadata defined for a type:\r\n```cs\r\n    [MetadataType(typeof(FooMetadata))]\r\n    public class Foo {\r\n        public int Fubar { get; set; }\r\n    }\r\n\r\n    public class FooMetadata {\r\n        [Range(1, 2)]\r\n        public int Fubar { get; set; }\r\n    }\r\n```\r\nRegister that metadata:\r\n```cs\r\nTypeDescriptor.AddProvider(new AssociatedMetadataTypeTypeDescriptionProvider(typeof(Foo), typeof(FooMetadata)), typeof(Foo));\r\n```\r\n\r\nUse an instance of `typeof(Foo)` somewhere (either directly inside xaml or from a model class will do) and have a `DataTemplate`declare a `Binding` into a _property_ of that instance:\r\n```xaml\r\n\u003cWindow x:Class=\"demo.DemoWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:demo\"\r\n        xmlns:system=\"clr-namespace:System;assembly=mscorlib\"        \r\n        mc:Ignorable=\"d\"\r\n        Title=\"DemoWindow\" Height=\"450\" Width=\"800\"\u003e\r\n    \u003cContentControl Content=\"{x:Type local:Foo}\" \u003e\r\n        \u003cContentControl.ContentTemplate\u003e\r\n            \u003cDataTemplate DataType=\"{x:Type system:Type}\"\u003e\r\n                \u003cTextBlock Text=\"{Binding Name}\" /\u003e\r\n            \u003c/DataTemplate\u003e\r\n        \u003c/ContentControl.ContentTemplate\u003e\r\n    \u003c/ContentControl\u003e\r\n\u003c/Window\u003e\r\n```\r\nTry to show this window.\r\n\r\n---\r\nI have attached a minimal unit test project which has a (failing) test for the issue.\r\n[demo.zip](https://github.com/dotnet/runtime/files/7885436/demo.zip)\r\n\n\n### Expected behavior\n\n1. No exceptions\r\n2. Either of these two scenarios:\r\n    1. If a `Binding` is over an instance of type `Type` (here `typeof(Foo)`) have it **not** query the `TypeDesciptor` of the *instance* (here the type descriptor for `Foo`) but have it query the type descriptor for `Type`.\r\n    2. Change the `AssociatedMetadataTypeTypeDescriptionProvider` classes `GetTypeDescriptor` method to not return the metadata \"enhanced\" type descriptor if the requested `objectType` parameter is **not** the same as the type the description provider was created for (or is at least a subclass of it).\r\n\n\n### Actual behavior\n\n**InvalidOperationException**: The associated metadata type for type \u0027System.RuntimeType\u0027 contains the following unknown properties or fields: .... (a lists of all fields of the metadata type will follow which not just _happen_ to have a matching member in `RuntimeType`).\r\n\r\nnested inside a \r\n\r\n**XamlParseException** (same message)\r\n\r\nnested inside a\r\n\r\n**NullReferenceException**\r\n\r\ntypically leading to an application exit.\r\n\n\n### Regression?\n\nDoes not seem so:\r\nI\u0027ve checked .Net framework 3.5, 4.0, 4.5, 4.72, 4.8 and .NET 5 \u0026 6. They all exhibit the same behavior.\r\n\r\nMy demo project may only be for 4.72 \u0026 up, but that\u0027s only because the current test frameworks dont work nice with significantly older frameworks.\r\n\n\n### Known Workarounds\n\nSee expected behavior:\r\nUse a custom AssociatedMetadataTypeTypeDescriptionProvider like:\r\n\r\n```cs\r\n    public class CustomMetadataTypeDescriptionProvider : AssociatedMetadataTypeTypeDescriptionProvider {\r\n\r\n        public CustomMetadataTypeDescriptionProvider(Type type) : base(type) {\r\n            Underlying = TypeDescriptor.GetProvider(type);\r\n            Type = type;\r\n        }\r\n\r\n        public CustomMetadataTypeDescriptionProvider(Type type, Type associatedMetadataType) : base(type, associatedMetadataType) {\r\n            Underlying = TypeDescriptor.GetProvider(type);\r\n            Type = type;\r\n        }\r\n\r\n        public TypeDescriptionProvider Underlying { get; }\r\n        public Type Type { get; }\r\n\r\n        public override ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance) {           \r\n            if (objectType != Type)\r\n                return Underlying.GetTypeDescriptor(objectType, instance);\r\n\r\n            return base.GetTypeDescriptor(objectType, instance);\r\n        }\r\n\r\n    }\r\n\r\n```\n\n### Configuration\n\nI have been able to reproduce the issue on\r\n- .Net Framework 3.5\r\n- .Net Framework 4.0\r\n- .Net Framework 4.5\r\n- .Net Framework 4.7.2\r\n- .Net Framework 4.8\r\n- .NET 5\r\n- .NET 6\r\n\r\n(all on windows 10 x64)\r\n\r\nI have no particular expectation that the .NET CORE frameworks in between are any better, but have not personally tested that.\r\n\r\n\r\n\n\n### Other information\n\nAs stated before: \r\nA `Binding` on a `Type` instance seems to query against the `TypeDescriptor` **of the instance**, not for `Type` itself.\r\nAnd the `AssociatedMetadataTypeTypeDescriptionProvider ` seems to _assume_ it will only ever get called for its associated type.\r\n\r\nTogether those two effects cause exceptions.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDoctorVanGogh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-18T01:48:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FZfam",
                                           "createdAt":  "2022-01-18T01:56:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI\u0027ve come across a weird-ish bug which seems to sit at the intersection of `AssociatedMetadataTypeTypeDescriptionProvider` from `System.ComponentModel.DataAnnotations` and Bindings in WPF (possibly only happening inside `DataTemplate`s).\r\n\r\nIf you have a Type `Foo` with a `MetadataType` attribute pointing to `FooMetadata` and have registered an appropriate `AssociatedMetadataTypeTypeDescriptionProvider` via `TypeDescriptor.AddProvider[Transparent]` then using a WPF `Binding` into basically _any_ property of an object of `typeof(Foo)` (inside a `DataTemplate` at least) will cause an `InvalidOperationException` \u0026 `XamlParseException`.\r\n\r\nIt seems the Binding subsystem queries the registered AssociatedMetadataTypeTypeDescriptionProvider for `typeof(Foo)` but then passes in a query for `System.RuntimeType` into that provider, which ends up declaring the metadata from `FooMetadata` to apply to `System.RuntimeType`, which naturally will blow _spectacularly_ (unless you are exceedingly \"lucky\" and have only declared metadata with matching names from `System.RuntimeType`).\r\n\r\nI\u0027ve been able to reproduce the issue in _any_ framework from 3.5 up to now .net 6.__\n\n### Reproduction Steps\n\nHave some metadata defined for a type:\r\n```cs\r\n    [MetadataType(typeof(FooMetadata))]\r\n    public class Foo {\r\n        public int Fubar { get; set; }\r\n    }\r\n\r\n    public class FooMetadata {\r\n        [Range(1, 2)]\r\n        public int Fubar { get; set; }\r\n    }\r\n```\r\nRegister that metadata:\r\n```cs\r\nTypeDescriptor.AddProvider(new AssociatedMetadataTypeTypeDescriptionProvider(typeof(Foo), typeof(FooMetadata)), typeof(Foo));\r\n```\r\n\r\nUse an instance of `typeof(Foo)` somewhere (either directly inside xaml or from a model class will do) and have a `DataTemplate`declare a `Binding` into a _property_ of that instance:\r\n```xaml\r\n\u003cWindow x:Class=\"demo.DemoWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:demo\"\r\n        xmlns:system=\"clr-namespace:System;assembly=mscorlib\"        \r\n        mc:Ignorable=\"d\"\r\n        Title=\"DemoWindow\" Height=\"450\" Width=\"800\"\u003e\r\n    \u003cContentControl Content=\"{x:Type local:Foo}\" \u003e\r\n        \u003cContentControl.ContentTemplate\u003e\r\n            \u003cDataTemplate DataType=\"{x:Type system:Type}\"\u003e\r\n                \u003cTextBlock Text=\"{Binding Name}\" /\u003e\r\n            \u003c/DataTemplate\u003e\r\n        \u003c/ContentControl.ContentTemplate\u003e\r\n    \u003c/ContentControl\u003e\r\n\u003c/Window\u003e\r\n```\r\nTry to show this window.\r\n\r\n---\r\nI have attached a minimal unit test project which has a (failing) test for the issue.\r\n[demo.zip](https://github.com/dotnet/runtime/files/7885436/demo.zip)\r\n\n\n### Expected behavior\n\n1. No exceptions\r\n2. Either of these two scenarios:\r\n    1. If a `Binding` is over an instance of type `Type` (here `typeof(Foo)`) have it **not** query the `TypeDesciptor` of the *instance* (here the type descriptor for `Foo`) but have it query the type descriptor for `Type`.\r\n    2. Change the `AssociatedMetadataTypeTypeDescriptionProvider` classes `GetTypeDescriptor` method to not return the metadata \"enhanced\" type descriptor if the requested `objectType` parameter is **not** the same as the type the description provider was created for (or is at least a subclass of it).\r\n\n\n### Actual behavior\n\n**InvalidOperationException**: The associated metadata type for type \u0027System.RuntimeType\u0027 contains the following unknown properties or fields: .... (a lists of all fields of the metadata type will follow which not just _happen_ to have a matching member in `RuntimeType`).\r\n\r\nnested inside a \r\n\r\n**XamlParseException** (same message)\r\n\r\nnested inside a\r\n\r\n**NullReferenceException**\r\n\r\ntypically leading to an application exit.\r\n\n\n### Regression?\n\nDoes not seem so:\r\nI\u0027ve checked .Net framework 3.5, 4.0, 4.5, 4.72, 4.8 and .NET 5 \u0026 6. They all exhibit the same behavior.\r\n\r\nMy demo project may only be for 4.72 \u0026 up, but that\u0027s only because the current test frameworks dont work nice with significantly older frameworks.\r\n\n\n### Known Workarounds\n\nSee expected behavior:\r\nUse a custom AssociatedMetadataTypeTypeDescriptionProvider like:\r\n\r\n```cs\r\n    public class CustomMetadataTypeDescriptionProvider : AssociatedMetadataTypeTypeDescriptionProvider {\r\n\r\n        public CustomMetadataTypeDescriptionProvider(Type type) : base(type) {\r\n            Underlying = TypeDescriptor.GetProvider(type);\r\n            Type = type;\r\n        }\r\n\r\n        public CustomMetadataTypeDescriptionProvider(Type type, Type associatedMetadataType) : base(type, associatedMetadataType) {\r\n            Underlying = TypeDescriptor.GetProvider(type);\r\n            Type = type;\r\n        }\r\n\r\n        public TypeDescriptionProvider Underlying { get; }\r\n        public Type Type { get; }\r\n\r\n        public override ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance) {           \r\n            if (objectType != Type)\r\n                return Underlying.GetTypeDescriptor(objectType, instance);\r\n\r\n            return base.GetTypeDescriptor(objectType, instance);\r\n        }\r\n\r\n    }\r\n\r\n```\n\n### Configuration\n\nI have been able to reproduce the issue on\r\n- .Net Framework 3.5\r\n- .Net Framework 4.0\r\n- .Net Framework 4.5\r\n- .Net Framework 4.7.2\r\n- .Net Framework 4.8\r\n- .NET 5\r\n- .NET 6\r\n\r\n(all on windows 10 x64)\r\n\r\nI have no particular expectation that the .NET CORE frameworks in between are any better, but have not personally tested that.\r\n\r\n\r\n\n\n### Other information\n\nAs stated before: \r\nA `Binding` on a `Type` instance seems to query against the `TypeDescriptor` **of the instance**, not for `Type` itself.\r\nAnd the `AssociatedMetadataTypeTypeDescriptionProvider ` seems to _assume_ it will only ever get called for its associated type.\r\n\r\nTogether those two effects cause exceptions.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDoctorVanGogh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel`, `area-System.Reflection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-18T01:56:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FZfaq",
                                           "createdAt":  "2022-01-18T15:41:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers, @bricelam, @roji\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI\u0027ve come across a weird-ish bug which seems to sit at the intersection of `AssociatedMetadataTypeTypeDescriptionProvider` from `System.ComponentModel.DataAnnotations` and Bindings in WPF (possibly only happening inside `DataTemplate`s).\r\n\r\nIf you have a Type `Foo` with a `MetadataType` attribute pointing to `FooMetadata` and have registered an appropriate `AssociatedMetadataTypeTypeDescriptionProvider` via `TypeDescriptor.AddProvider[Transparent]` then using a WPF `Binding` into basically _any_ property of an object of `typeof(Foo)` (inside a `DataTemplate` at least) will cause an `InvalidOperationException` \u0026 `XamlParseException`.\r\n\r\nIt seems the Binding subsystem queries the registered AssociatedMetadataTypeTypeDescriptionProvider for `typeof(Foo)` but then passes in a query for `System.RuntimeType` into that provider, which ends up declaring the metadata from `FooMetadata` to apply to `System.RuntimeType`, which naturally will blow _spectacularly_ (unless you are exceedingly \"lucky\" and have only declared metadata with matching names from `System.RuntimeType`).\r\n\r\nI\u0027ve been able to reproduce the issue in _any_ framework from 3.5 up to now .net 6.__\n\n### Reproduction Steps\n\nHave some metadata defined for a type:\r\n```cs\r\n    [MetadataType(typeof(FooMetadata))]\r\n    public class Foo {\r\n        public int Fubar { get; set; }\r\n    }\r\n\r\n    public class FooMetadata {\r\n        [Range(1, 2)]\r\n        public int Fubar { get; set; }\r\n    }\r\n```\r\nRegister that metadata:\r\n```cs\r\nTypeDescriptor.AddProvider(new AssociatedMetadataTypeTypeDescriptionProvider(typeof(Foo), typeof(FooMetadata)), typeof(Foo));\r\n```\r\n\r\nUse an instance of `typeof(Foo)` somewhere (either directly inside xaml or from a model class will do) and have a `DataTemplate`declare a `Binding` into a _property_ of that instance:\r\n```xaml\r\n\u003cWindow x:Class=\"demo.DemoWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:demo\"\r\n        xmlns:system=\"clr-namespace:System;assembly=mscorlib\"        \r\n        mc:Ignorable=\"d\"\r\n        Title=\"DemoWindow\" Height=\"450\" Width=\"800\"\u003e\r\n    \u003cContentControl Content=\"{x:Type local:Foo}\" \u003e\r\n        \u003cContentControl.ContentTemplate\u003e\r\n            \u003cDataTemplate DataType=\"{x:Type system:Type}\"\u003e\r\n                \u003cTextBlock Text=\"{Binding Name}\" /\u003e\r\n            \u003c/DataTemplate\u003e\r\n        \u003c/ContentControl.ContentTemplate\u003e\r\n    \u003c/ContentControl\u003e\r\n\u003c/Window\u003e\r\n```\r\nTry to show this window.\r\n\r\n---\r\nI have attached a minimal unit test project which has a (failing) test for the issue.\r\n[demo.zip](https://github.com/dotnet/runtime/files/7885436/demo.zip)\r\n\n\n### Expected behavior\n\n1. No exceptions\r\n2. Either of these two scenarios:\r\n    1. If a `Binding` is over an instance of type `Type` (here `typeof(Foo)`) have it **not** query the `TypeDesciptor` of the *instance* (here the type descriptor for `Foo`) but have it query the type descriptor for `Type`.\r\n    2. Change the `AssociatedMetadataTypeTypeDescriptionProvider` classes `GetTypeDescriptor` method to not return the metadata \"enhanced\" type descriptor if the requested `objectType` parameter is **not** the same as the type the description provider was created for (or is at least a subclass of it).\r\n\n\n### Actual behavior\n\n**InvalidOperationException**: The associated metadata type for type \u0027System.RuntimeType\u0027 contains the following unknown properties or fields: .... (a lists of all fields of the metadata type will follow which not just _happen_ to have a matching member in `RuntimeType`).\r\n\r\nnested inside a \r\n\r\n**XamlParseException** (same message)\r\n\r\nnested inside a\r\n\r\n**NullReferenceException**\r\n\r\ntypically leading to an application exit.\r\n\n\n### Regression?\n\nDoes not seem so:\r\nI\u0027ve checked .Net framework 3.5, 4.0, 4.5, 4.72, 4.8 and .NET 5 \u0026 6. They all exhibit the same behavior.\r\n\r\nMy demo project may only be for 4.72 \u0026 up, but that\u0027s only because the current test frameworks dont work nice with significantly older frameworks.\r\n\n\n### Known Workarounds\n\nSee expected behavior:\r\nUse a custom AssociatedMetadataTypeTypeDescriptionProvider like:\r\n\r\n```cs\r\n    public class CustomMetadataTypeDescriptionProvider : AssociatedMetadataTypeTypeDescriptionProvider {\r\n\r\n        public CustomMetadataTypeDescriptionProvider(Type type) : base(type) {\r\n            Underlying = TypeDescriptor.GetProvider(type);\r\n            Type = type;\r\n        }\r\n\r\n        public CustomMetadataTypeDescriptionProvider(Type type, Type associatedMetadataType) : base(type, associatedMetadataType) {\r\n            Underlying = TypeDescriptor.GetProvider(type);\r\n            Type = type;\r\n        }\r\n\r\n        public TypeDescriptionProvider Underlying { get; }\r\n        public Type Type { get; }\r\n\r\n        public override ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance) {           \r\n            if (objectType != Type)\r\n                return Underlying.GetTypeDescriptor(objectType, instance);\r\n\r\n            return base.GetTypeDescriptor(objectType, instance);\r\n        }\r\n\r\n    }\r\n\r\n```\n\n### Configuration\n\nI have been able to reproduce the issue on\r\n- .Net Framework 3.5\r\n- .Net Framework 4.0\r\n- .Net Framework 4.5\r\n- .Net Framework 4.7.2\r\n- .Net Framework 4.8\r\n- .NET 5\r\n- .NET 6\r\n\r\n(all on windows 10 x64)\r\n\r\nI have no particular expectation that the .NET CORE frameworks in between are any better, but have not personally tested that.\r\n\r\n\r\n\n\n### Other information\n\nAs stated before: \r\nA `Binding` on a `Type` instance seems to query against the `TypeDescriptor` **of the instance**, not for `Type` itself.\r\nAnd the `AssociatedMetadataTypeTypeDescriptionProvider ` seems to _assume_ it will only ever get called for its associated type.\r\n\r\nTogether those two effects cause exceptions.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDoctorVanGogh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-18T15:41:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FZfav",
                                           "createdAt":  "2022-02-03T01:21:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThomasGoulet73",
                                           "body":  "Hey @DoctorVanGogh,\r\nI have narrowed the problem to this call [here](https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/PropertyPath.cs#L630). We call `TypeDescriptor.GetProperties` using the `object` overload and passing a type as `object`.\r\n\r\nHere is a simple repro without WPF:\r\n```\r\nusing System.ComponentModel;\r\nusing System.ComponentModel.DataAnnotations;\r\n\r\nTypeDescriptor.AddProvider(new AssociatedMetadataTypeTypeDescriptionProvider(typeof(Foo), typeof(FooMetadata)), typeof(Foo));\r\n\r\nPropertyDescriptorCollection props = TypeDescriptor.GetProperties((object)typeof(Foo));\r\n\r\n\r\n[MetadataType(typeof(FooMetadata))]\r\nclass Foo\r\n{\r\n    public int Fubar { get; set; }\r\n}\r\n\r\nclass FooMetadata\r\n{\r\n    [Range(1, 2)]\r\n    public int Fubar { get; set; }\r\n}\r\n```\r\n\r\nCalling `TypeDescriptor.GetProperties((object)typeof(Foo))` should return properties for `Type` and not throw an exception.\r\n\r\nThis seems like a bug in `TypeDescriptor` so this issue should probably be transfered back to dotnet/runtime so that the code owners of `System.ComponentModel.DataAnnotations` can decide if this is by design.",
                                           "updatedAt":  "2022-02-03T01:21:26Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "InvalidOperationException when using MetadataTypes, AssociatedMetadataTypeTypeDescriptionProvider \u0026 WPF Bindings",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64505",
        "createdAt":  "2022-01-30T04:07:23Z",
        "number":  64505,
        "author":  "VladimirKhvostov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-02-03T09:52:12Z",
        "body":  "### Description\n\nI noticed that regression was introduced in the https://github.com/dotnet/runtime/pull/51772\r\n\r\nSee example in a Reproduction Steps. An error is reported when this code runs on netcoreapp22, netcoreapp31, and net5.0, but no errors on net6.0.\r\n\r\nNotice that Text property is public, but has an internal getter (same behavior when getter is private or protected)\r\n\r\nAn error is reported when this code runs on netcoreapp22, netcoreapp31, and net5.0, but no errors on net6.0.\r\nThe regression is in the [GetPropertyValues](https://github.com/dotnet/runtime/pull/51772/files#diff-7d9d37023d10b7d3491eacd94e0864b8f1c26e125a16ee3b5edba59131698e4bR517) method\r\n\r\nBefore:\r\n```CSharp\r\n            var properties = instance.GetType().GetRuntimeProperties()\r\n                                .Where(p =\u003e ValidationAttributeStore.IsPublic(p) \u0026\u0026 !p.GetIndexParameters().Any());\r\n            var items = new List\u003cKeyValuePair\u003cValidationContext, object?\u003e\u003e(properties.Count());\r\n            foreach (var property in properties)\r\n```\r\nAfter:\r\n```\r\n            var properties = TypeDescriptor.GetProperties(instance);\r\n            var items = new List\u003cKeyValuePair\u003cValidationContext, object?\u003e\u003e(properties.Count);\r\n            foreach (PropertyDescriptor property in properties)\r\n```\r\nTypeDescriptor.GetProperties method does not return properties which do not have public getter.\r\n\r\nI should mention that behavior matches net4.8 behavior and scenario is kind of weird, but it is still a regression, which can cause problems for people upgrading from .NET Core 3.1 or .NET 5.0 to .NET 6.0.\r\n\r\nI am glad we had a unit test for this scenario. It took me couple hours to figure out the root of the issue, but if we did not have that unit test, we would have a regression in production.\r\n\r\n\r\n\r\n\n\n### Reproduction Steps\n\n```CSharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing System.Linq;\r\nusing System.Reflection;\r\n\r\ninternal class Settings\r\n{\r\n    [StringLength(4, ErrorMessage = \"The Text value cannot exceed 4 characters.\")]\r\n    public string Text { internal get; set; } = \"Hello, World!\";\r\n}\r\n\r\npublic class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        Settings settings = new Settings();\r\n\r\n        PropertyInfo[] properties = settings.GetType().GetRuntimeProperties().ToArray();\r\n        PropertyDescriptorCollection propertyCollection = TypeDescriptor.GetProperties(settings);\r\n\r\n        // Console.WriteLine($\"properties.Length: {properties.Length}, propertyCollection.Count: {propertyCollection.Count}\");\r\n\r\n        var validationContext = new ValidationContext(settings);\r\n        List\u003cValidationResult\u003e validationResults = new List\u003cValidationResult\u003e();\r\n        Validator.TryValidateObject(settings, validationContext, validationResults, validateAllProperties: true);\r\n\r\n        if (validationResults.Count \u003e 0)\r\n        {\r\n            Console.WriteLine(validationResults[0].ErrorMessage);\r\n        }\r\n        else\r\n        {\r\n            Console.WriteLine(\"No errors!\");\r\n        }\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\nSample program should report an error when running on .NET 6.0 (same as .NET Core 3.1 and .NET 5.0)\n\n### Actual behavior\n\nProgram does not report any errors.\n\n### Regression?\n\nYes, regression from netcoreapp3.1 and net5.0\n\n### Known Workarounds\n\nN/A\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPRlEIA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49GTxw",
                                           "createdAt":  "2022-01-30T04:07:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-01-30T04:07:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49GUQg",
                                           "createdAt":  "2022-01-30T04:24:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers, @bricelam, @roji\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI noticed that regression was introduced in the https://github.com/dotnet/runtime/pull/51772\r\n\r\nSee example in a Reproduction Steps. An error is reported when this code runs on netcoreapp22, netcoreapp31, and net5.0, but no errors on net6.0.\r\n\r\nNotice that Text property is public, but has an internal getter (same behavior when getter is private or protected)\r\n\r\nAn error is reported when this code runs on netcoreapp22, netcoreapp31, and net5.0, but no errors on net6.0.\r\nThe regression is in the [GetPropertyValues](https://github.com/dotnet/runtime/pull/51772/files#diff-7d9d37023d10b7d3491eacd94e0864b8f1c26e125a16ee3b5edba59131698e4bR517) method\r\n\r\nBefore:\r\n```CSharp\r\n            var properties = instance.GetType().GetRuntimeProperties()\r\n                                .Where(p =\u003e ValidationAttributeStore.IsPublic(p) \u0026\u0026 !p.GetIndexParameters().Any());\r\n            var items = new List\u003cKeyValuePair\u003cValidationContext, object?\u003e\u003e(properties.Count());\r\n            foreach (var property in properties)\r\n```\r\nAfter:\r\n```\r\n            var properties = TypeDescriptor.GetProperties(instance);\r\n            var items = new List\u003cKeyValuePair\u003cValidationContext, object?\u003e\u003e(properties.Count);\r\n            foreach (PropertyDescriptor property in properties)\r\n```\r\nTypeDescriptor.GetProperties method does not return properties which do not have public getter.\r\n\r\nI should mention that behavior matches net4.8 behavior and scenario is kind of weird, but it is still a regression, which can cause problems for people upgrading from .NET Core 3.1 or .NET 5.0 to .NET 6.0.\r\n\r\nI am glad we had a unit test for this scenario. It took me couple hours to figure out the root of the issue, but if we did not have that unit test, we would have a regression in production.\r\n\r\n\r\n\r\n\n\n### Reproduction Steps\n\n```CSharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing System.Linq;\r\nusing System.Reflection;\r\n\r\ninternal class Settings\r\n{\r\n    [StringLength(4, ErrorMessage = \"The Text value cannot exceed 4 characters.\")]\r\n    public string Text { internal get; set; } = \"Hello, World!\";\r\n}\r\n\r\npublic class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        Settings settings = new Settings();\r\n\r\n        PropertyInfo[] properties = settings.GetType().GetRuntimeProperties().ToArray();\r\n        PropertyDescriptorCollection propertyCollection = TypeDescriptor.GetProperties(settings);\r\n\r\n        // Console.WriteLine($\"properties.Length: {properties.Length}, propertyCollection.Count: {propertyCollection.Count}\");\r\n\r\n        var validationContext = new ValidationContext(settings);\r\n        List\u003cValidationResult\u003e validationResults = new List\u003cValidationResult\u003e();\r\n        Validator.TryValidateObject(settings, validationContext, validationResults, validateAllProperties: true);\r\n\r\n        if (validationResults.Count \u003e 0)\r\n        {\r\n            Console.WriteLine(validationResults[0].ErrorMessage);\r\n        }\r\n        else\r\n        {\r\n            Console.WriteLine(\"No errors!\");\r\n        }\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\nSample program should report an error when running on .NET 6.0 (same as .NET Core 3.1 and .NET 5.0)\n\n### Actual behavior\n\nProgram does not report any errors.\n\n### Regression?\n\nYes, regression from netcoreapp3.1 and net5.0\n\n### Known Workarounds\n\nN/A\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVladimirKhvostov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-30T04:24:35Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Regression introduced in the https://github.com/dotnet/runtime/pull/51772",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64736",
        "createdAt":  "2022-02-03T10:45:56Z",
        "number":  64736,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9ZJYQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "loraderon",
                                            "createdAt":  "2022-12-12T17:48:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeremia",
                                            "createdAt":  "2024-03-07T13:42:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JimWolff",
                                            "createdAt":  "2024-05-03T12:57:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "trevorscottprice",
                                            "createdAt":  "2024-10-05T21:18:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexisbg",
                                            "createdAt":  "2024-11-07T11:56:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Trivivium",
                                            "createdAt":  "2024-12-11T20:45:08Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-07-16T05:57:04Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/ValidatorTryValidateObject-does-not-han/1549691)._\n\n---\n\n```\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nusing System.ComponentModel.DataAnnotations;\nusing System;\nusing System.Collections.Generic;\n\nnamespace TestProject1\n{\n   [TestClass]\n    public class UnitTest1\n    {\n        [TestMethod]\n        public void TestClass()\n        {\n            // Validate ClassTest\n\n            var classTest = new ClassTest(\"Test\");\n            var classTestValidationResults = new List\u003cValidationResult\u003e();\n            Assert.IsFalse(\n                Validator.TryValidateObject(\n                    classTest, \n                    new ValidationContext(classTest, null, null), \n                    classTestValidationResults, \n                    true));\n        }\n\n        [TestMethod]\n        public void TestRecord()\n        {\n            // Validate RecordTest\n\n            var recordTest = new RecordTest(\"Test\");\n            var recordTestValidationResults = new List\u003cValidationResult\u003e();\n            Assert.IsFalse(\n                Validator.TryValidateObject(\n                    recordTest, \n                    new ValidationContext(recordTest, null, null), \n                    recordTestValidationResults, \n                    true)); // This test fails !\n        }\n    }\n\n    public class ValidationTestAttribute : ValidationAttribute\n    {\n        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)\n        {\n            return new ValidationResult(\"Failed\");\n        }\n    }\n\n    public class ClassTest\n    {\n        public ClassTest(string value)\n        {\n            Value = value ?? throw new ArgumentNullException(nameof(value));\n        }\n\n        [ValidationTest]\n        public string Value { get; }\n    }\n\n    public record RecordTest([ValidationTest] string Value);\n}\n```\n\nIs this an expected behavior or a bug?\n\nSystem : Windows 11 Pro\nVisual Studio 2022 Version 17.0.0 Preview 4.1\n.Net 6 RC 1 (the lastest version)\n\n---\n### Original Comments\n\n#### null on 10/11/2021, 07:19 AM: \n\n\u003cp\u003eDoes this reproduce for all project or specific project? If it’s reproduce with the specific project, which project do you use(C# , C++ console, Web,  UWP or others )?  In order for us to investigate this further, could you please provide repro steps, a more detailed description of the faulty behavior and the actions you were taking when the issue appeared to help us better understand this scenario? What is the actual result and which result do you expect to happen?\u003c/p\u003e\n\n#### fewane on 10/11/2021, 08:27 AM: \n\n\u003cp\u003eIf I use the Record type as a parameter in a controller (Api) or as a data model in a Blazor component (Blazor WebAssembly), the attributes are automatically applied.\u003c/p\u003e\n\u003cp\u003eOn the other hand, if I manually call the validation (Validator.TryValidateObject(…)) on the same type Record (Api or Blazor WebAssembly), the attributes are not called (as you can see on the test code).\u003c/p\u003e\n\u003cp\u003eI need it to apply a cross validation in another module (which receives the type as parameter) with a design pattern (decorator). The module is a library in C# .Net 6 RC1.\u003c/p\u003e\n\n#### Feedback Bot on 10/18/2021, 09:32 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### Feedback Bot on 10/26/2021, 00:43 PM: \n\n\u003cp\u003eThank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: \u003ca target=\u0027_blank\u0027 href=\"https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2019#faq\"\u003ehttps://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2019#faq\u003c/a\u003e. In case you need answers to common questions or need assisted support, be sure to use \u003ca target=\u0027_blank\u0027 href=\"https://visualstudio.microsoft.com/vs/support/\"\u003ehttps://visualstudio.microsoft.com/vs/support/\u003c/a\u003e. We’ll keep you posted on any updates to this feedback.\u003c/p\u003e\n\n#### Feedback Bot on 10/26/2021, 10:26 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### Luna Mi [MSFT] on 1/21/2022, 09:30 AM: \n\n\u003cp\u003eThank you for taking the time to log this issue! Did you still reproduce this issue in the latest stable version of Visual Studio installed from \u003ca target=\u0027_blank\u0027 href=\"https://visualstudio.microsoft.com/downloads\"\u003ehttps://visualstudio.microsoft.com/downloads\u003c/a\u003e ?\u003cbr\u003e\nIf so, could you please provide a sample solution that has this problem so that we can conduct further research?\u003c/p\u003e\n\u003cp\u003eWe look forward to hearing from you!\u003c/p\u003e\n\n#### fewane on 1/21/2022, 11:28 AM: \n\n\u003cp\u003eSystem : Windows 11 Pro\u003cbr\u003e\nVisual Studio 2022 Version 17.0.5\u003cbr\u003e\n.Net 6 (6.0.1)\u003c/p\u003e\n\u003cp\u003eYes, the problem occurs again. However, by applying the appropriate target attribute, it works.\u003cbr\u003e\nChanging\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e record \u003cspan class=\"hljs-title\"\u003eRecordTest\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e([ValidationTest] \u003cspan class=\"hljs-built_in\"\u003estring\u003c/span\u003e Value)\u003c/span\u003e\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e record \u003cspan class=\"hljs-title\"\u003eRecordTest\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e([property : ValidationTest] \u003cspan class=\"hljs-built_in\"\u003estring\u003c/span\u003e Value)\u003c/span\u003e\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\n\n#### Feedback Bot on 1/24/2022, 09:45 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQ7FDkg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49UxcR",
                                           "createdAt":  "2022-02-03T10:46:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-02-03T10:46:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49VxO-",
                                           "createdAt":  "2022-02-03T15:38:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers, @bricelam, @roji\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/ValidatorTryValidateObject-does-not-han/1549691)._\n\n---\n\n```\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nusing System.ComponentModel.DataAnnotations;\nusing System;\nusing System.Collections.Generic;\n\nnamespace TestProject1\n{\n   [TestClass]\n    public class UnitTest1\n    {\n        [TestMethod]\n        public void TestClass()\n        {\n            // Validate ClassTest\n\n            var classTest = new ClassTest(\"Test\");\n            var classTestValidationResults = new List\u003cValidationResult\u003e();\n            Assert.IsFalse(\n                Validator.TryValidateObject(\n                    classTest, \n                    new ValidationContext(classTest, null, null), \n                    classTestValidationResults, \n                    true));\n        }\n\n        [TestMethod]\n        public void TestRecord()\n        {\n            // Validate RecordTest\n\n            var recordTest = new RecordTest(\"Test\");\n            var recordTestValidationResults = new List\u003cValidationResult\u003e();\n            Assert.IsFalse(\n                Validator.TryValidateObject(\n                    recordTest, \n                    new ValidationContext(recordTest, null, null), \n                    recordTestValidationResults, \n                    true)); // This test fails !\n        }\n    }\n\n    public class ValidationTestAttribute : ValidationAttribute\n    {\n        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)\n        {\n            return new ValidationResult(\"Failed\");\n        }\n    }\n\n    public class ClassTest\n    {\n        public ClassTest(string value)\n        {\n            Value = value ?? throw new ArgumentNullException(nameof(value));\n        }\n\n        [ValidationTest]\n        public string Value { get; }\n    }\n\n    public record RecordTest([ValidationTest] string Value);\n}\n```\n\nIs this an expected behavior or a bug?\n\nSystem : Windows 11 Pro\nVisual Studio 2022 Version 17.0.0 Preview 4.1\n.Net 6 RC 1 (the lastest version)\n\n---\n### Original Comments\n\n#### null on 10/11/2021, 07:19 AM: \n\n\u003cp\u003eDoes this reproduce for all project or specific project? If it’s reproduce with the specific project, which project do you use(C# , C++ console, Web,  UWP or others )?  In order for us to investigate this further, could you please provide repro steps, a more detailed description of the faulty behavior and the actions you were taking when the issue appeared to help us better understand this scenario? What is the actual result and which result do you expect to happen?\u003c/p\u003e\n\n#### fewane on 10/11/2021, 08:27 AM: \n\n\u003cp\u003eIf I use the Record type as a parameter in a controller (Api) or as a data model in a Blazor component (Blazor WebAssembly), the attributes are automatically applied.\u003c/p\u003e\n\u003cp\u003eOn the other hand, if I manually call the validation (Validator.TryValidateObject(…)) on the same type Record (Api or Blazor WebAssembly), the attributes are not called (as you can see on the test code).\u003c/p\u003e\n\u003cp\u003eI need it to apply a cross validation in another module (which receives the type as parameter) with a design pattern (decorator). The module is a library in C# .Net 6 RC1.\u003c/p\u003e\n\n#### Feedback Bot on 10/18/2021, 09:32 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### Feedback Bot on 10/26/2021, 00:43 PM: \n\n\u003cp\u003eThank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: \u003ca target=\u0027_blank\u0027 href=\"https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2019#faq\"\u003ehttps://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2019#faq\u003c/a\u003e. In case you need answers to common questions or need assisted support, be sure to use \u003ca target=\u0027_blank\u0027 href=\"https://visualstudio.microsoft.com/vs/support/\"\u003ehttps://visualstudio.microsoft.com/vs/support/\u003c/a\u003e. We’ll keep you posted on any updates to this feedback.\u003c/p\u003e\n\n#### Feedback Bot on 10/26/2021, 10:26 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### Luna Mi [MSFT] on 1/21/2022, 09:30 AM: \n\n\u003cp\u003eThank you for taking the time to log this issue! Did you still reproduce this issue in the latest stable version of Visual Studio installed from \u003ca target=\u0027_blank\u0027 href=\"https://visualstudio.microsoft.com/downloads\"\u003ehttps://visualstudio.microsoft.com/downloads\u003c/a\u003e ?\u003cbr\u003e\nIf so, could you please provide a sample solution that has this problem so that we can conduct further research?\u003c/p\u003e\n\u003cp\u003eWe look forward to hearing from you!\u003c/p\u003e\n\n#### fewane on 1/21/2022, 11:28 AM: \n\n\u003cp\u003eSystem : Windows 11 Pro\u003cbr\u003e\nVisual Studio 2022 Version 17.0.5\u003cbr\u003e\n.Net 6 (6.0.1)\u003c/p\u003e\n\u003cp\u003eYes, the problem occurs again. However, by applying the appropriate target attribute, it works.\u003cbr\u003e\nChanging\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e record \u003cspan class=\"hljs-title\"\u003eRecordTest\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e([ValidationTest] \u003cspan class=\"hljs-built_in\"\u003estring\u003c/span\u003e Value)\u003c/span\u003e\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e record \u003cspan class=\"hljs-title\"\u003eRecordTest\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e([property : ValidationTest] \u003cspan class=\"hljs-built_in\"\u003estring\u003c/span\u003e Value)\u003c/span\u003e\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\n\n#### Feedback Bot on 1/24/2022, 09:45 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-03T15:38:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49WPQ_",
                                           "createdAt":  "2022-02-03T17:43:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@pranavkm @mkArtakMSFT Is validation of record types important to Blazor or MVC? In other words, is it something you might want to put resources on to implement?",
                                           "updatedAt":  "2022-02-03T17:43:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49WP6B",
                                           "createdAt":  "2022-02-03T17:46:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pranavkm",
                                           "body":  "@rafikiassumani-msft owns this particular area of MVC, so he\u0027d be the one to make a decision here. ",
                                           "updatedAt":  "2022-02-03T17:46:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DsUOS",
                                           "createdAt":  "2022-05-24T09:57:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEaGt_Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bohdan-kolomiiets",
                                                                               "createdAt":  "2022-07-03T20:40:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "darthkurak",
                                                                               "createdAt":  "2022-11-16T13:21:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "QzLP2P",
                                                                               "createdAt":  "2023-03-21T10:38:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nick-acosta",
                                                                               "createdAt":  "2023-03-28T16:56:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LloydNicholson",
                                                                               "createdAt":  "2023-07-26T10:30:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeremia",
                                                                               "createdAt":  "2024-03-07T13:42:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "malciin",
                                                                               "createdAt":  "2024-04-25T13:01:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JimWolff",
                                                                               "createdAt":  "2024-05-03T12:57:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JaapMosselman",
                                                                               "createdAt":  "2024-05-31T07:51:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nikolajhalvorsen",
                                                                               "createdAt":  "2024-06-13T12:02:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "trevorscottprice",
                                                                               "createdAt":  "2024-10-05T21:19:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexisbg",
                                                                               "createdAt":  "2024-11-07T11:58:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JeremyBP",
                                                                               "createdAt":  "2025-02-13T09:40:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stormofice",
                                                                               "createdAt":  "2025-07-10T10:36:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "voroninp",
                                                                               "createdAt":  "2025-07-10T14:43:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  15
                                                         },
                                           "author":  "Bartmax",
                                           "body":  "I\u0027m also interested on support Validation on `records`\r\nLost a huge deal of time before I find this issue.\r\n\r\nRecords are a perfect fit for model binding in MVC and azure functions, hence quite important to support validation.",
                                           "updatedAt":  "2022-05-24T09:59:38Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Validator.TryValidateObject does not handle Record Type validation",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68755",
        "createdAt":  "2022-04-21T14:50:49Z",
        "number":  68755,
        "author":  "vanillajonathan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-06T14:20:57Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nI want to define the scheme for the `UrlAttribute` so that I can limit it to \"https://\" only as I do not want any \"http://\" URLs. I also want to use custom schemes such as \"git://\".\r\n\r\n### Describe the solution you\u0027d like\r\nThe `UrlAttribute` could take a scheme.\r\n\r\nExample:\r\n```cs\r\npublic class ExampleModel\r\n{\r\n    [Uri(Scheme = \"https\")]\r\n    public string Website { get; set; }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSUQF7A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5CbduN",
                                           "createdAt":  "2022-04-21T14:50:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label.",
                                           "updatedAt":  "2022-04-21T14:50:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CddrK",
                                           "createdAt":  "2022-05-02T15:13:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is your feature request related to a problem? Please describe.\r\nI want to define the scheme for the `UrlAttribute` so that I can limit it to \"https://\" only as I do not want any \"http://\" URLs. I also want to use custom schemes such as \"git://\".\r\n\r\n### Describe the solution you\u0027d like\r\nThe `UrlAttribute` could take a scheme.\r\n\r\nExample:\r\n```cs\r\npublic class ExampleModel\r\n{\r\n    [Uri(Scheme = \"https\")]\r\n    public string Website { get; set; }\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evanillajonathan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003ebaronfel, joeloff\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-02T15:13:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQGsc",
                                           "createdAt":  "2022-08-26T21:20:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@karelz, should this one go to the networking team? If so, which group is the right ones to assign?",
                                           "updatedAt":  "2022-08-26T21:20:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQ3Wu",
                                           "createdAt":  "2022-08-27T09:22:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is your feature request related to a problem? Please describe.\r\nI want to define the scheme for the `UrlAttribute` so that I can limit it to \"https://\" only as I do not want any \"http://\" URLs. I also want to use custom schemes such as \"git://\".\r\n\r\n### Describe the solution you\u0027d like\r\nThe `UrlAttribute` could take a scheme.\r\n\r\nExample:\r\n```cs\r\npublic class ExampleModel\r\n{\r\n    [Uri(Scheme = \"https\")]\r\n    public string Website { get; set; }\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evanillajonathan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-27T09:22:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JRAT0",
                                           "createdAt":  "2022-08-27T13:39:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers, @bricelam, @roji\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is your feature request related to a problem? Please describe.\r\nI want to define the scheme for the `UrlAttribute` so that I can limit it to \"https://\" only as I do not want any \"http://\" URLs. I also want to use custom schemes such as \"git://\".\r\n\r\n### Describe the solution you\u0027d like\r\nThe `UrlAttribute` could take a scheme.\r\n\r\nExample:\r\n```cs\r\npublic class ExampleModel\r\n{\r\n    [Uri(Scheme = \"https\")]\r\n    public string Website { get; set; }\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evanillajonathan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-27T13:39:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JRAXs",
                                           "createdAt":  "2022-08-27T13:41:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Somewhat related to #58813",
                                           "updatedAt":  "2022-08-27T13:41:26Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Scheme for UrlAttribute",
        "labels":  [
                       "api-suggestion",
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68644",
        "createdAt":  "2022-04-28T09:28:43Z",
        "number":  68644,
        "author":  "bang75",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-06T09:49:27Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nIs there a the reason for example EmailAdressAttribute sets DefaultMessage in constructor while RequiredAttibute sets the ErrorMessageAccessor?\r\nI think this is inconsequent and might be a bug. Makes it harder to extend Validators with eg. a custom IValidationMetadataProvider.\r\n\r\nWould also be nice if DefaultErrorMessage was public instead of internal ;)\r\n\r\n```\r\npublic RequiredAttribute() : base(() =\u003e DataAnnotationsResources.RequiredAttribute_ValidationError)\r\n{\r\n}\r\n\r\n...\r\n\r\npublic EmailAddressAttribute() : base(DataType.EmailAddress)\r\n{\r\n  // Set DefaultErrorMessage not ErrorMessage, allowing user to set\r\n  // ErrorMessageResourceType and ErrorMessageResourceName to use localized messages.\r\n  DefaultErrorMessage = SR.EmailAddressAttribute_Invalid;\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n### Expected Behavior\r\n\r\n_No response_\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n6\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQkiojw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5CSKiP",
                                           "createdAt":  "2022-04-28T10:47:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers, @bricelam, @roji\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nIs there a the reason for example EmailAdressAttribute sets DefaultMessage in constructor while RequiredAttibute sets the ErrorMessageAccessor?\r\nI think this is inconsequent and might be a bug. Makes it harder to extend Validators with eg. a custom IValidationMetadataProvider.\r\n\r\nWould also be nice if DefaultErrorMessage was public instead of internal ;)\r\n\r\n```\r\npublic RequiredAttribute() : base(() =\u003e DataAnnotationsResources.RequiredAttribute_ValidationError)\r\n{\r\n}\r\n\r\n...\r\n\r\npublic EmailAddressAttribute() : base(DataType.EmailAddress)\r\n{\r\n  // Set DefaultErrorMessage not ErrorMessage, allowing user to set\r\n  // ErrorMessageResourceType and ErrorMessageResourceName to use localized messages.\r\n  DefaultErrorMessage = SR.EmailAddressAttribute_Invalid;\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n### Expected Behavior\r\n\r\n_No response_\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n6\r\n\r\n### Anything else?\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebang75\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-28T10:47:11Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Inconsequent default message handling in system validator attributes ",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72469",
        "createdAt":  "2022-07-17T14:26:47Z",
        "number":  72469,
        "author":  "natilivni",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-06T14:23:08Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen configuring DataAnnotation localization in the following manner:\r\n\r\n```\r\n builder.AddDataAnnotationsLocalization(options =\u003e\r\n     options.DataAnnotationLocalizerProvider = (type, factory) =\u003e\r\n          factory.Create(typeof(SharedResource)))\r\n);\r\n```\r\n\r\nThe \"out of the box\" attributes only attempted to localize AFTER the error message has been formatted.\r\n\r\nSo if I have a class such as:\r\n\r\n```\r\npublic class MyClass \r\n{\r\n     [Required]\r\n     public string MyProperty { get; set; }\r\n}\r\n```\r\n\r\nAnd I validate the class under a seperate culture, the following mapping will not work:\r\n```\r\nThe {0} field is required.  ----\u003e   El campo {0} es obligatorio.\r\n```\r\nHowever, the following mapping will work:\r\n```\r\nThe MyProperty field is required.  ----\u003e   El campo MyProperty es obligatorio.\r\n```\r\n\r\nThis is because of the following code in `DataAnnotationsModelValidator`:\r\n```\r\nvar result = Attribute.GetValidationResult(validationContext.Model, context);\r\n            if (result != ValidationResult.Success)\r\n            {\r\n                string errorMessage;\r\n                if (_stringLocalizer != null \u0026\u0026\r\n                    !string.IsNullOrEmpty(Attribute.ErrorMessage) \u0026\u0026\r\n                    string.IsNullOrEmpty(Attribute.ErrorMessageResourceName) \u0026\u0026\r\n                    Attribute.ErrorMessageResourceType == null)\r\n                {\r\n                    errorMessage = GetErrorMessage(validationContext) ?? result.ErrorMessage;\r\n                }\r\n                else\r\n                {\r\n                    errorMessage = result.ErrorMessage;\r\n                }\r\n```\r\n\r\nSince `Attribute.GetValidationResult(validationContext.Model, context)` returns a formatted string and the `GetErrorMessage runs after this string is formated, we can never localize the generic error message.\r\n\r\nIs there a plan to fix this or is there a work-around for such a scenario?\r\n\r\nThanks.\n\n### Expected Behavior\n\n`AddDataAnnotationsLocalization` should allow mapping of the template string before it is formatted.\n\n### Steps To Reproduce\n\nsee above.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\nnet5.0\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORuOmGw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5G46Pn",
                                           "createdAt":  "2022-07-18T16:25:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "Thank you for filing this issue. In order for us to investigate this issue, please provide a minimalistic repro project (ideally a GitHub repo) that illustrates the problem.",
                                           "updatedAt":  "2022-07-18T16:25:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G46Pp",
                                           "createdAt":  "2022-07-18T16:25:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Hi @natilivni. We have added the \"Needs: Author Feedback\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
                                           "updatedAt":  "2022-07-18T16:25:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G46Pu",
                                           "createdAt":  "2022-07-19T06:52:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "natilivni",
                                           "body":  "Hi.  The problem is actually broader than I thought, the [Required] attribute does not even attempt to localize the error message at all.  Please see the unit tests in this repo:\r\n\r\nhttps://github.com/natilivni/dataannotationsexample/blob/main/DataAnnotationsExample/TestProject1/UnitTest1.cs\r\n\r\nThere are two unit tests.  They both will fail to generate a Spanish error message in spite of the resource file being configured correctly.  If seems like the localizer is only used if an explicit error message is set on a validation attribute.",
                                           "updatedAt":  "2022-07-19T06:52:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G46Yb",
                                           "createdAt":  "2022-07-19T16:47:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers, @bricelam, @roji\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen configuring DataAnnotation localization in the following manner:\r\n\r\n```\r\n builder.AddDataAnnotationsLocalization(options =\u003e\r\n     options.DataAnnotationLocalizerProvider = (type, factory) =\u003e\r\n          factory.Create(typeof(SharedResource)))\r\n);\r\n```\r\n\r\nThe \"out of the box\" attributes only attempted to localize AFTER the error message has been formatted.\r\n\r\nSo if I have a class such as:\r\n\r\n```\r\npublic class MyClass \r\n{\r\n     [Required]\r\n     public string MyProperty { get; set; }\r\n}\r\n```\r\n\r\nAnd I validate the class under a seperate culture, the following mapping will not work:\r\n```\r\nThe {0} field is required.  ----\u003e   El campo {0} es obligatorio.\r\n```\r\nHowever, the following mapping will work:\r\n```\r\nThe MyProperty field is required.  ----\u003e   El campo MyProperty es obligatorio.\r\n```\r\n\r\nThis is because of the following code in `DataAnnotationsModelValidator`:\r\n```\r\nvar result = Attribute.GetValidationResult(validationContext.Model, context);\r\n            if (result != ValidationResult.Success)\r\n            {\r\n                string errorMessage;\r\n                if (_stringLocalizer != null \u0026\u0026\r\n                    !string.IsNullOrEmpty(Attribute.ErrorMessage) \u0026\u0026\r\n                    string.IsNullOrEmpty(Attribute.ErrorMessageResourceName) \u0026\u0026\r\n                    Attribute.ErrorMessageResourceType == null)\r\n                {\r\n                    errorMessage = GetErrorMessage(validationContext) ?? result.ErrorMessage;\r\n                }\r\n                else\r\n                {\r\n                    errorMessage = result.ErrorMessage;\r\n                }\r\n```\r\n\r\nSince `Attribute.GetValidationResult(validationContext.Model, context)` returns a formatted string and the `GetErrorMessage runs after this string is formated, we can never localize the generic error message.\r\n\r\nIs there a plan to fix this or is there a work-around for such a scenario?\r\n\r\nThanks.\n\n### Expected Behavior\n\n`AddDataAnnotationsLocalization` should allow mapping of the template string before it is formatted.\n\n### Steps To Reproduce\n\nsee above.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\nnet5.0\n\n### Anything else?\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enatilivni\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-19T16:47:30Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "DataAnnotations Localization does not localize the pre-formatted validation error messages",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82526",
        "createdAt":  "2023-02-23T14:46:26Z",
        "number":  82526,
        "author":  "eiriktsarpalis",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCuqZsg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeffhandley",
                                            "createdAt":  "2023-03-02T08:02:59Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-02-04T18:17:40Z",
        "body":  "### Background and motivation\r\n\r\nThe `RangeAttribute` currently supports `int` and `double` ranges out of the box using dedicated constructor overloads, however any other range necessitates using [this overload](https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.rangeattribute.-ctor?view=net-7.0#system-componentmodel-dataannotations-rangeattribute-ctor(system-type-system-string-system-string)) requiring the operand type as well as string formatted representations of the lower and upper bounds. This only works for types supported by the `TypeConverter` class expressing limits in strings forces concerns around culture-sensitive formatting:\r\n```C#\r\npublic class TimeSpanRangeAttribute : RangeAttribute\r\n{\r\n    public TimeSpanRangeAttribute(int minMilliseconds, int maxMilliseconds)\r\n        : base(type: typeof(TimeSpan),\r\n               minimum: TimeSpan.FromMilliseconds(minMilliseconds).ToString(\"c\"),\r\n               maximum: TimeSpan.FromMilliseconds(maxMilliseconds).ToString(\"c\"))\r\n    {\r\n        ParseLimitsInInvariantCulture = true;\r\n    }\r\n}\r\n```\r\nI\u0027ve been working on a [prototype](https://github.com/eiriktsarpalis/runtime/commit/646b388fd80b418fb96d4ffad63361a1051f3b76) that adds a protected constructor which accepts arbitrary `IComparable` bounds directly.\r\n\r\n### API Proposal\r\n\r\n```diff\r\nnamespace System.ComponentModel.DataAnnotations;\r\n\r\npublic partial class RangeAttribute\r\n{\r\n    public RangeAttribute(int minimum, int maximum);\r\n    public RangeAttribute(double minimum, double maximum);\r\n+   public RangeAttribute(IComparable minimum, IComparable maximum);\r\n\r\n    [RequiresUnreferencedCode(\"Generic TypeConverters may require the generic types to be annotated.\")]\r\n    public RangeAttribute(Type type, string minimum, string maximum);\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\nThe above example is now rendered as follows:\r\n```csharp\r\npublic class TimeSpanMillisecondRangeAttribute : RangeAttribute\r\n{\r\n    public TimeSpanMillisecondRangeAttribute(int minimumMs, int maximumMs)\r\n        : base(TimeSpan.FromMilliseconds(minimumMs), TimeSpan.FromMilliseconds(maximumMs))\r\n    { }\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n* I marked the proposed constructor as `protected`, since marking it public would add OOTB support for things like string or long  ranges using their built-in IComparable implementation. Marking it `protected` emphasizes its use as an extensibility point for user-defined derived validation attributes. If people thinks it is useful, we could mark as `public` instead.\r\n* Proposal leaves out `IComparer` support since the validator implementation is oriented around handling of `IComparable` values. \r\n\r\n### Risks\r\n\r\n_No response_\r\n\r\ncc @geeknoid @jeffhandley ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnOiDNg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5WDni8",
                                           "createdAt":  "2023-02-24T14:48:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nThe `RangeAttribute` currently supports `int` and `double` ranges out of the box using dedicated constructor overloads, however any other range necessitates using [this overload](https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.rangeattribute.-ctor?view=net-7.0#system-componentmodel-dataannotations-rangeattribute-ctor(system-type-system-string-system-string)) requiring the operand type as well as string formatted representations of the lower and upper bounds. This only works for types supported by the `TypeConverter` class expressing limits in strings forces concerns around culture-sensitive formatting:\r\n```C#\r\npublic class TimeSpanRangeAttribute : RangeAttribute\r\n{\r\n    public TimeSpanRangeAttribute(int minMilliseconds, int maxMilliseconds)\r\n        : base(type: typeof(TimeSpan),\r\n               minimum: TimeSpan.FromMilliseconds(minMilliseconds).ToString(\"c\"),\r\n               maximum: TimeSpan.FromMilliseconds(maxMilliseconds).ToString(\"c\"))\r\n    {\r\n        ParseLimitsInInvariantCulture = true;\r\n    }\r\n}\r\n```\r\nI\u0027ve been working on a [prototype](https://github.com/eiriktsarpalis/runtime/commit/646b388fd80b418fb96d4ffad63361a1051f3b76) that adds a protected constructor which accepts arbitrary `IComparable` bounds directly.\r\n\r\n### API Proposal\r\n\r\n```diff\r\nnamespace System.ComponentModel.DataAnnotations;\r\n\r\npublic partial class RangeAttribute\r\n{\r\n    public RangeAttribute(int minimum, int maximum);\r\n    public RangeAttribute(double minimum, double maximum);\r\n+   protected RangeAttribute(IComparable minimum, IComparable maximum);\r\n\r\n    [RequiresUnreferencedCode(\"Generic TypeConverters may require the generic types to be annotated.\")]\r\n    public RangeAttribute(Type type, string minimum, string maximum);\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\nThe above example is now rendered as follows:\r\n```csharp\r\npublic class TimeSpanMillisecondRangeAttribute : RangeAttribute\r\n{\r\n    public TimeSpanMillisecondRangeAttribute(int minimumMs, int maximumMs)\r\n        : base(TimeSpan.FromMilliseconds(minimumMs), TimeSpan.FromMilliseconds(maximumMs))\r\n    { }\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n* I marked the proposed constructor as `protected`, since marking it public would add OOTB support for things like string or long  ranges using their built-in IComparable implementation. Marking it `protected` emphasizes its use as an extensibility point for user-defined derived validation attributes. If people thinks it is useful, we could mark as `public` instead.\r\n* Proposal leaves out `IComparer` support since the validator implementation is oriented around handling of `IComparable` values. \r\n\r\n### Risks\r\n\r\n_No response_\r\n\r\ncc @geeknoid @jeffhandley \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeiriktsarpalis\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Runtime`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-24T14:48:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WDxbE",
                                           "createdAt":  "2023-02-24T15:14:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @ajcvickers, @bricelam, @roji\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nThe `RangeAttribute` currently supports `int` and `double` ranges out of the box using dedicated constructor overloads, however any other range necessitates using [this overload](https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.rangeattribute.-ctor?view=net-7.0#system-componentmodel-dataannotations-rangeattribute-ctor(system-type-system-string-system-string)) requiring the operand type as well as string formatted representations of the lower and upper bounds. This only works for types supported by the `TypeConverter` class expressing limits in strings forces concerns around culture-sensitive formatting:\r\n```C#\r\npublic class TimeSpanRangeAttribute : RangeAttribute\r\n{\r\n    public TimeSpanRangeAttribute(int minMilliseconds, int maxMilliseconds)\r\n        : base(type: typeof(TimeSpan),\r\n               minimum: TimeSpan.FromMilliseconds(minMilliseconds).ToString(\"c\"),\r\n               maximum: TimeSpan.FromMilliseconds(maxMilliseconds).ToString(\"c\"))\r\n    {\r\n        ParseLimitsInInvariantCulture = true;\r\n    }\r\n}\r\n```\r\nI\u0027ve been working on a [prototype](https://github.com/eiriktsarpalis/runtime/commit/646b388fd80b418fb96d4ffad63361a1051f3b76) that adds a protected constructor which accepts arbitrary `IComparable` bounds directly.\r\n\r\n### API Proposal\r\n\r\n```diff\r\nnamespace System.ComponentModel.DataAnnotations;\r\n\r\npublic partial class RangeAttribute\r\n{\r\n    public RangeAttribute(int minimum, int maximum);\r\n    public RangeAttribute(double minimum, double maximum);\r\n+   protected RangeAttribute(IComparable minimum, IComparable maximum);\r\n\r\n    [RequiresUnreferencedCode(\"Generic TypeConverters may require the generic types to be annotated.\")]\r\n    public RangeAttribute(Type type, string minimum, string maximum);\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\nThe above example is now rendered as follows:\r\n```csharp\r\npublic class TimeSpanMillisecondRangeAttribute : RangeAttribute\r\n{\r\n    public TimeSpanMillisecondRangeAttribute(int minimumMs, int maximumMs)\r\n        : base(TimeSpan.FromMilliseconds(minimumMs), TimeSpan.FromMilliseconds(maximumMs))\r\n    { }\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n* I marked the proposed constructor as `protected`, since marking it public would add OOTB support for things like string or long  ranges using their built-in IComparable implementation. Marking it `protected` emphasizes its use as an extensibility point for user-defined derived validation attributes. If people thinks it is useful, we could mark as `public` instead.\r\n* Proposal leaves out `IComparer` support since the validator implementation is oriented around handling of `IComparable` values. \r\n\r\n### Risks\r\n\r\n_No response_\r\n\r\ncc @geeknoid @jeffhandley \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeiriktsarpalis\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.ComponentModel.DataAnnotations`, `area-System.Runtime`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-24T15:14:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Yb_LN",
                                           "createdAt":  "2023-03-25T05:39:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "@eiriktsarpalis I\u0027m inclined to pull this into .NET 8 to group it with the other DataAnnotations enhancements we\u0027re making during the release. @geeknoid Would you be able to use this if it was in .NET 8?\r\n\r\n/cc @dotnet/area-system-componentmodel-dataannotations ",
                                           "updatedAt":  "2023-03-25T05:39:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Yg0Vz",
                                           "createdAt":  "2023-03-27T11:46:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Sure, marking as ready for review.",
                                           "updatedAt":  "2023-03-27T11:46:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Yi3ex",
                                           "createdAt":  "2023-03-27T17:17:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4o6Fg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2023-03-27T17:46:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "geeknoid",
                                           "body":  "@jeffhandley Yes, I think we could use this in .NET  8",
                                           "updatedAt":  "2023-03-27T17:17:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5autif",
                                           "createdAt":  "2023-04-25T18:00:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "* We suggest to provide a `RangeAttribute\u003cT\u003e` that is abstract and constrains the parameters to have the same type.\r\n* We should consider a design where `RangeAttribute\u003cT\u003e` doesn\u0027t extend `RangeAttribute` such that we can constrain `T` to `IComparable\u003cT\u003e` rather than `IComparable`.\r\n\r\n```C#\r\nnamespace System.ComponentModel.DataAnnotations;\r\n\r\npublic partial class RangeAttribute\r\n{\r\n    // Existing:\r\n    // public RangeAttribute(int minimum, int maximum);\r\n    // public RangeAttribute(double minimum, double maximum);\r\n    private protected RangeAttribute(Type type, IComparable minimum, IComparable maximum);\r\n}\r\n\r\npublic abstract class RangeAttribute\u003cT\u003e : RangeAttribute\r\n    where T: IComparable\r\n{\r\n    protected RangeAttribute(T minimum, T maximum);\r\n}\r\n\r\n// Example usage:\r\n// \r\n// public class TimeSpanMillisecondRangeAttribute : RangeAttribute\u003cTimeSpan\u003e\r\n// {\r\n//     public TimeSpanMillisecondRangeAttribute(int minimumMs, int maximumMs)\r\n//         : base(TimeSpan.FromMilliseconds(minimumMs),\r\n//                TimeSpan.FromMilliseconds(maximumMs))\r\n//     {        \r\n//     }\r\n// }\r\n```",
                                           "updatedAt":  "2023-04-25T18:00:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cJvpk",
                                           "createdAt":  "2023-05-12T17:23:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "We will not pursue that revised design in .NET 8. Moving to Future and removing the https://github.com/dotnet/runtime/labels/blocking label.",
                                           "updatedAt":  "2023-05-12T17:23:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qbFV0",
                                           "createdAt":  "2023-10-30T15:37:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Could we also use the `IParsable` interface and create:\r\n\r\n```cs\r\npublic sealed class ParsedRangeAttribute\u003cT\u003e : RangeAttribute\u003cT\u003e // this name could use some work\r\n    where T : IComparable, IParsable\u003cT\u003e\r\n{\r\n    public ParsedRangeAttribute(string minimum, string maximum);\r\n}\r\n```\r\n\r\nThen users wouldn\u0027t need to create their own derived attribute classes to use types that are IParsable, like TimeSpan.\r\n\r\nRegarding naming, I think it would make more sense to use the `Range\u003cT\u003e` attribute name for the sealed class - the one that would be used in all the callsites. So maybe it would make sense to say:\r\n\r\n```C#\r\npublic abstract class ComparableRangeAttribute\u003cT\u003e : RangeAttribute\r\n    where T : IComparable\r\n{\r\n    protected ComparableRangeAttribute(T minimum, T maximum);\r\n}\r\n\r\npublic sealed class RangeAttribute\u003cT\u003e : ComparableRangeAttribute\u003cT\u003e\r\n    where T : IComparable, IParsable\u003cT\u003e\r\n{\r\n    public RangeAttribute(string minimum, string maximum);\r\n}\r\n```\r\n\r\nAnd then usages would look like:\r\n\r\n```C#\r\npublic class ResilienceStrategyOptions\r\n{\r\n    [Range\u003cTimeSpan\u003e(\"00:00:00\", \"1.00:00:00\")]\r\n    public TimeSpan? MaxDelay { get; set; }\r\n}\r\n```",
                                           "updatedAt":  "2023-10-31T15:59:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6c6IM2",
                                           "createdAt":  "2025-02-04T00:26:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFNI8Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eerhardt",
                                                                               "createdAt":  "2025-02-04T15:33:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sbomer",
                                           "body":  "This proposal would help make dotnet-monitor compatible with native AOT since it uses `[Range(typeof(TimeSpan)), ...]`, for example [here](https://github.com/dotnet/dotnet-monitor/blob/35fbb80bc1f960182485be8a13619b9959c8259d/src/Tools/dotnet-monitor/CollectionRules/Options/Actions/CollectLogsOptions.cs#L48).",
                                           "updatedAt":  "2025-02-04T18:17:40Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[API Proposal]: Add a RangeAttribute constructor supporting arbitrary IComparable ranges.",
        "labels":  [
                       "api-needs-work",
                       "area-System.ComponentModel.DataAnnotations",
                       "partner-impact"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94997",
        "createdAt":  "2023-11-20T11:34:52Z",
        "number":  94997,
        "author":  "rucio-rucio",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-20T18:07:03Z",
        "body":  "### Description\r\n\r\nSystem.ComponentModel.DataAnnotations.CompareAttribute genrates wrong error message.\r\nBecause it don\u0027t referes DisplayName property of DisplayNameAttribute but Name property of DisplayAttribute. \r\n\r\n### Reproduction Steps\r\n\r\n1. Create new ASP.NET Core Web App Project On Visual Studio 2022 (17.8)\r\n2. Add new Razor Page named \"test\" into pages folder.\r\n3. code below in test.cshtml.cs\r\n\r\n```\r\npublic class testModel : PageModel\r\n{\r\n    [BindProperty]\r\n    [DisplayName(\"Parent\u0027s mail address\")]\r\n    [Display(Name = \"xxxxx\")]\r\n    public string? email { get; set; }\r\n\r\n    [BindProperty]\r\n    [DisplayName(\"Confirm mail address\")]\r\n    [Compare(nameof(email), ErrorMessage = \"Don\u0027t match with {1}\")]\r\n    public string? confirmEmail { get; set; }\r\n\r\n    public void OnPost()\r\n    {\r\n        if (!ModelState.IsValid)\r\n        {\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n4.code below in test.cshtml\r\n\r\n```\r\n\u003cform method=\"post\"\u003e\r\n    \u003cinput asp-for=\"email\" /\u003e\r\n    \u003cinput asp-for=\"confirmEmail\" /\u003e\r\n    \u003cspan asp-validation-for=\"confirmEmail\"\u003e\u003c/span\u003e\r\n    \u003cinput type=\"submit\" /\u003e\r\n\u003c/form\u003e\r\n```\r\n\r\n5. Run project and go to /test\r\n6. input \"a\" in first textbox, \"b\" in second textbox and click submit.\r\n\r\n### Expected behavior\r\n\r\nIt shows \"Don\u0027t match with Parent\u0027s mail address\" as error message.\r\n\r\n### Actual behavior\r\n\r\nIt shows \"Don\u0027t match with xxxxx\" as error message.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObGnwow==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5safCj",
                                           "createdAt":  "2023-11-20T11:34:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel-dataannotations\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nSystem.ComponentModel.DataAnnotations.CompareAttribute genrates wrong error message.\r\nBecause it don\u0027t referes DisplayName property of DisplayNameAttribute but Name property of DisplayAttribute. \n\n### Reproduction Steps\n\n1. Create new ASP.NET Core Web App Project On Visual Studio 2022 (17.8)\r\n2. Add new Razor Page named \"test\" into pages folder.\r\n3. code below in test.cshtml.cs\r\n\r\npublic class testModel : PageModel\r\n{\r\n    [BindProperty]\r\n    [DisplayName(\"Parent\u0027s mail address\")]\r\n    [Display(Name = \"xxxxx\")]\r\n    public string? email { get; set; }\r\n\r\n    [BindProperty]\r\n    [DisplayName(\"Confirm mail address\")]\r\n    [Compare(nameof(email), ErrorMessage = \"Don\u0027t match with {1}\")]\r\n    public string? confirmEmail { get; set; }\r\n\r\n    public void OnPost()\r\n    {\r\n        if (!ModelState.IsValid)\r\n        {\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\n4.code below in test.cshtml\r\n\r\n\u003cform method=\"post\"\u003e\r\n    \u003cinput asp-for=\"email\" /\u003e\r\n    \u003cinput asp-for=\"confirmEmail\" /\u003e\r\n    \u003cspan asp-validation-for=\"confirmEmail\"\u003e\u003c/span\u003e\r\n    \u003cinput type=\"submit\" /\u003e\r\n\u003c/form\u003e\r\n\r\n5. Run project and go to /test\r\n6. input \"a\" in first textbox, \"b\" in second textbox and click submit.\n\n### Expected behavior\n\nIt shows \"Don\u0027t match with Parent\u0027s mail address\" as error message.\n\n### Actual behavior\n\nIt shows \"Don\u0027t match with xxxxx\" as error message.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erucio-rucio\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-20T11:34:59Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "CompareAttribute refers wrong name value",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98430",
        "createdAt":  "2024-02-13T16:16:35Z",
        "number":  98430,
        "author":  "ilya-scale",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODB4Tzw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "githubfanster",
                                            "createdAt":  "2024-04-14T04:51:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "steinybot",
                                            "createdAt":  "2024-12-05T10:10:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rasidr",
                                            "createdAt":  "2025-04-30T07:00:22Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-02-16T13:32:26Z",
        "body":  "### Description\r\n\r\nI have a polymorphic class like:\r\n\r\n```csharp\r\npublic record Request\r\n{\r\n    public required Base Prop { get; init; } \r\n}\r\n\r\n[JsonPolymorphic(TypeDiscriminatorPropertyName = \"type\")]\r\n[JsonDerivedType(typeof(Derived), \"derived\")]\r\npublic abstract record Base\r\n{\r\n}\r\n\r\npublic record Derived : Base\r\n{\r\n    \r\n    [Required, StringLength(1)]\r\n    public string? Field { get; init; }\r\n}\r\n```\r\n\r\nand 2 methods\r\n```csharp\r\n[HttpPost(\"test-property\")]\r\npublic void Test(Request request)\r\n{\r\n    \r\n}\r\n\r\n[HttpPost(\"test-request\")]\r\npublic void Test(Base request)\r\n{\r\n    \r\n}\r\n```\r\n\r\nThis request to \"test-property\" results in 200 (which is incorrect since the field \"field\" is not specified):\r\n```json\r\n{\r\n\t\"prop\": {\r\n\t\t\"type\": \"derived\"\r\n\t}\r\n}\r\n```\r\n\r\nwhile a request to \"test-request\" results in 400 (\"The Field field is required.\" which is correct):\r\n```json\r\n{\r\n\t\"type\": \"derived\"\r\n}\r\n```\r\n\r\n### Reproduction Steps\r\n\r\n1. Use the action methods described in the description\r\n2. Run the described payloads on both methods\r\n\r\n### Expected behavior\r\n\r\nBoth tests should result in a 400 since field \"field\" is not provided.\r\n\r\n### Actual behavior\r\n\r\nOnly one of them results in 400. If the property is polymorphic, then the validation does not work (it is not only the Required attribute that is affected)\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.Net 8\r\nMac OS\r\nARM\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdCIdzA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5z4RWE",
                                           "createdAt":  "2024-02-13T20:03:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json, @gregsdennis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI have a polymorphic class like:\r\n\r\n```csharp\r\npublic record Request\r\n{\r\n    public required Base Prop { get; init; } \r\n}\r\n\r\n[JsonPolymorphic(TypeDiscriminatorPropertyName = \"type\")]\r\n[JsonDerivedType(typeof(Derived), \"derived\")]\r\npublic abstract record Base\r\n{\r\n}\r\n\r\npublic record Derived : Base\r\n{\r\n    \r\n    [Required, StringLength(1)]\r\n    public string? Field { get; init; }\r\n}\r\n```\r\n\r\nand 2 methods\r\n```csharp\r\n[HttpPost(\"test-property\")]\r\npublic void Test(Request request)\r\n{\r\n    \r\n}\r\n\r\n[HttpPost(\"test-request\")]\r\npublic void Test(Base request)\r\n{\r\n    \r\n}\r\n```\r\n\r\nThis request to \"test-property\" results in 200 (which is incorrect since the field \"field\" is not specified):\r\n```json\r\n{\r\n\t\"prop\": {\r\n\t\t\"type\": \"derived\"\r\n\t}\r\n}\r\n```\r\n\r\nwhile a request to \"test-request\" results in 400 (\"The Field field is required.\" which is correct):\r\n```json\r\n{\r\n\t\"type\": \"derived\"\r\n}\r\n```\r\n\r\n### Reproduction Steps\r\n\r\n1. Use the action methods described in the description\r\n2. Run the described payloads on both methods\r\n\r\n### Expected behavior\r\n\r\nBoth tests should result in a 400 since field \"field\" is not provided.\r\n\r\n### Actual behavior\r\n\r\nOnly one of them results in 400. If the property is polymorphic, then the validation does not work (it is not only the Required attribute that is affected)\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.Net 8\r\nMac OS\r\nARM\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eilya-scale\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-13T20:03:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z4RWL",
                                           "createdAt":  "2024-02-14T10:09:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "`Required` is a validation attribute and not a System.Text.Json attribute (there is a `JsonRequired` attribute for that). Performing validation in aspnetcore is a manual step that is [documented here](https://learn.microsoft.com/en-us/aspnet/core/mvc/models/validation?view=aspnetcore-8.0#model-state).",
                                           "updatedAt":  "2024-02-14T10:09:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z4RWR",
                                           "createdAt":  "2024-02-14T10:54:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilya-scale",
                                           "body":  "@eiriktsarpalis I am not sure why was this issue closed. It seems to me that it was just routed wrong. As far as I can see this has nothing to do with System.Text.Json at all. The deserialization happens properly, the validation also occurs, it just does not work on polymorphic classes fully.\r\n\r\nMaybe the issue should just be routed to a different area?",
                                           "updatedAt":  "2024-02-14T10:54:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z4RWT",
                                           "createdAt":  "2024-02-14T15:06:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Did you try following the aspnetcore documentation I shared earlier? Your example works as expected when attempting to validate it:\r\n\r\n```C#\r\nBase value = new Derived { Field = null };\r\nvar ctx = new ValidationContext(value);\r\nValidator.ValidateObject(value, ctx, validateAllProperties: true); // The Field field is required.\r\n\r\nvalue = new Derived { Field = \"abc\" };\r\nctx = new ValidationContext(value);\r\nValidator.ValidateObject(value, ctx, validateAllProperties: true); // The field Field must be a string with a maximum length of 1.\r\n\r\npublic abstract record Base\r\n{\r\n}\r\n\r\npublic record Derived : Base\r\n{\r\n    [Required, StringLength(1)]\r\n    public string? Field { get; init; }\r\n}\r\n```",
                                           "updatedAt":  "2024-02-14T15:06:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z4RWW",
                                           "createdAt":  "2024-02-14T15:12:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilya-scale",
                                           "body":  "The validation in asp.net core happens automatically (not sure how, probably because I have inherited from the ApiController). I did not try to do the validation explicitly like you just posted. \r\n\r\nSince you figured out that this explicit validation does work correctly, the implicit validation by Asp.Net core does not work the same way.\r\n\r\nI suppose that it should work exactly the same way and validate all of the properties the same way the ValidationContext does?",
                                           "updatedAt":  "2024-02-14T15:12:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z4RWe",
                                           "createdAt":  "2024-02-14T15:15:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I\u0027ll transfer to aspnetcore repo for further triage, but in the meantime it would help if you could share a self-contained and minimal reproduction.",
                                           "updatedAt":  "2024-02-14T15:15:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z4RWj",
                                           "createdAt":  "2024-02-14T15:30:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilya-scale",
                                           "body":  "Here is the full example for the Program.cs\r\n\r\n```csharp\r\nusing System.ComponentModel.DataAnnotations;\r\nusing System.Text.Json.Serialization;\r\nusing Microsoft.AspNetCore.Mvc;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddControllers();\r\nvar app = builder.Build();\r\n\r\napp.MapControllers();\r\n\r\napp.Run();\r\n\r\n[ApiController]\r\npublic class TestController : ControllerBase\r\n{\r\n    [HttpPost(\"test-property\")]\r\n    public void Test(Request request) { }\r\n\r\n    [HttpPost(\"test-request\")]\r\n    public void Test(Base request){ }\r\n}\r\n\r\npublic record Request\r\n{\r\n    public required Base Prop { get; init; } \r\n}\r\n\r\n[JsonPolymorphic(TypeDiscriminatorPropertyName = \"type\")]\r\n[JsonDerivedType(typeof(Derived), \"derived\")]\r\npublic abstract record Base { }\r\n\r\npublic record Derived : Base\r\n{\r\n    \r\n    [Required, StringLength(1)]\r\n    public string? Field { get; init; }\r\n}\r\n```",
                                           "updatedAt":  "2024-02-14T15:31:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z4RWp",
                                           "createdAt":  "2024-02-14T16:01:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I can reproduce. The issue is not related to polymorphism per se, it is a duplicate of https://github.com/dotnet/runtime/issues/36093. IOW validation doesn\u0027t support nested property validation. The original issue was closed because the [`ValidateObjectMembers`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.options.validateobjectmembersattribute?view=dotnet-plat-ext-8.0) attribute was added, however it seems like this is only honored by the options validator.\r\n\r\n@tarekgh should we keep this open for potential support in the main validation library?",
                                           "updatedAt":  "2024-02-14T16:01:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z4Rr4",
                                           "createdAt":  "2024-02-14T16:02:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel-dataannotations\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI have a polymorphic class like:\r\n\r\n```csharp\r\npublic record Request\r\n{\r\n    public required Base Prop { get; init; } \r\n}\r\n\r\n[JsonPolymorphic(TypeDiscriminatorPropertyName = \"type\")]\r\n[JsonDerivedType(typeof(Derived), \"derived\")]\r\npublic abstract record Base\r\n{\r\n}\r\n\r\npublic record Derived : Base\r\n{\r\n    \r\n    [Required, StringLength(1)]\r\n    public string? Field { get; init; }\r\n}\r\n```\r\n\r\nand 2 methods\r\n```csharp\r\n[HttpPost(\"test-property\")]\r\npublic void Test(Request request)\r\n{\r\n    \r\n}\r\n\r\n[HttpPost(\"test-request\")]\r\npublic void Test(Base request)\r\n{\r\n    \r\n}\r\n```\r\n\r\nThis request to \"test-property\" results in 200 (which is incorrect since the field \"field\" is not specified):\r\n```json\r\n{\r\n\t\"prop\": {\r\n\t\t\"type\": \"derived\"\r\n\t}\r\n}\r\n```\r\n\r\nwhile a request to \"test-request\" results in 400 (\"The Field field is required.\" which is correct):\r\n```json\r\n{\r\n\t\"type\": \"derived\"\r\n}\r\n```\r\n\r\n### Reproduction Steps\r\n\r\n1. Use the action methods described in the description\r\n2. Run the described payloads on both methods\r\n\r\n### Expected behavior\r\n\r\nBoth tests should result in a 400 since field \"field\" is not provided.\r\n\r\n### Actual behavior\r\n\r\nOnly one of them results in 400. If the property is polymorphic, then the validation does not work (it is not only the Required attribute that is affected)\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.Net 8\r\nMac OS\r\nARM\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eilya-scale\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-14T16:02:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z9zUv",
                                           "createdAt":  "2024-02-15T08:24:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilya-scale",
                                           "body":  "I do believe this issue is related to polymorphism (the generic inheritance, not the System.Text.Json attributes). If in my example you chose to change the `Prop` property to derived, it will work properly:\r\n\r\n```csharp\r\npublic record Request\r\n{\r\n    public required Derived Prop { get; init; } \r\n}\r\n```\r\n\r\nThen the same request that gave 200 before gives this now:\r\n\r\n```json\r\n\"errors\": {\r\n    \"Prop.Field\": [\r\n      \"The Field field is required.\"\r\n    ]\r\n  },\r\n```",
                                           "updatedAt":  "2024-02-15T08:24:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z-ec7",
                                           "createdAt":  "2024-02-15T10:10:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Hmm, you are correct and I can reproduce this locally. My confusion stems from the fact that calling the validator directly\r\n\r\n```C#\r\nRequest value = new() { Prop = new Derived { Field = null } };\r\nvar ctx = new ValidationContext(value);\r\nValidator.ValidateObject(value, ctx, validateAllProperties: true); // Does not fail validation!\r\n\r\nvalue = new() { Prop = new Derived { Field = \"abc\" } };\r\nctx = new ValidationContext(value);\r\nValidator.ValidateObject(value, ctx, validateAllProperties: true); // Does not fail validation!\r\n\r\npublic record Request\r\n{\r\n    public required Derived Prop { get; init; }\r\n}\r\n\r\npublic record Derived\r\n{\r\n    [Required, StringLength(1)]\r\n    public string? Field { get; init; }\r\n}\r\n```\r\n\r\nExhibits behavior similar to https://github.com/dotnet/runtime/issues/36093, however deserializing the same shape in aspnetcore _does_ result in validation errors occurring. This suggests to me that aspnetcore is using a separate validation engine, can anybody from @dotnet/aspnet-team confirm this?\r\n\r\nUltimately then we have identified two issues here:\r\n\r\n1. The issue as reported in https://github.com/dotnet/runtime/issues/36093 also applies to the `Validator` class and\r\n2. The validation being used by aspnetcore does traverse nested objects by default, however it fails to validate properties of polymorphic values (note that this could be by design).\r\n\r\nI would suggest we keep this issue to track 1) and then perhaps open a new issue in aspnetcore with the repro that you shared.",
                                           "updatedAt":  "2024-02-15T10:10:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z-6Nr",
                                           "createdAt":  "2024-02-15T11:09:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilya-scale",
                                           "body":  "If I understood correctly, then ValidateObjectMembersAttribute is what has solved the issue in the 1. that you are referring to, perhaps it would work the same way with the `Validator` class, and then it appears to be by design and not an issue? (I would expect the full traversal by default though)\r\n\r\nSo perhaps we can do the other way around and use this issue to track 2., and if 1. appears to be an issue still, then we can open one more bug for it?",
                                           "updatedAt":  "2024-02-15T11:09:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z_Se7",
                                           "createdAt":  "2024-02-15T12:08:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODW4TvQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ilya-scale",
                                                                               "createdAt":  "2024-02-15T13:00:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e If I understood correctly, then ValidateObjectMembersAttribute is what has solved the issue in the 1. \r\n\r\nNo, ValidateObjectMembersAttribute is part of a separate component, the options validator, that uses the same validation attributes.",
                                           "updatedAt":  "2024-02-15T12:08:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50CMwX",
                                           "createdAt":  "2024-02-15T17:43:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e No, ValidateObjectMembersAttribute is part of a separate component, the options validator, that uses the same validation attributes.\r\n\r\nIs there any problem for users to use the options validations for this scenario? is there any gap if users do that?",
                                           "updatedAt":  "2024-02-15T17:43:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50CN-r",
                                           "createdAt":  "2024-02-15T17:44:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODW7Cvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2024-02-15T17:46:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danroth27",
                                           "body":  "\u003e This suggests to me that aspnetcore is using a separate validation engine, can anybody from @dotnet/aspnet-team confirm this?\r\n\r\nCorrect, ASP.NET Core does its own object traversal for validation.",
                                           "updatedAt":  "2024-02-15T17:44:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50C1la",
                                           "createdAt":  "2024-02-15T18:35:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@danroth27 How does this work with AOT?\r\n\r\nCC @eerhardt ",
                                           "updatedAt":  "2024-02-15T18:36:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50DL9m",
                                           "createdAt":  "2024-02-15T19:04:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODW7xJQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2024-02-15T19:13:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danroth27",
                                           "body":  "\u003e @danroth27 How does this work with AOT?\r\n\r\nWe don\u0027t currently support Native AOT with our web UI frameworks like MVC, Razor Pages, and Blazor. Blazor does support AOT for WebAssembly, but we haven\u0027t yet shipped support for full object validation for Blazor: https://github.com/dotnet/aspnetcore/issues/28640\r\n\r\n",
                                           "updatedAt":  "2024-02-15T19:04:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50DUP9",
                                           "createdAt":  "2024-02-15T19:14:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Thanks for the clarification, can Blazor take advantage of `ValidateObjectMembersAttribute` from options extensions library? or even the options validation source gen?",
                                           "updatedAt":  "2024-02-15T19:14:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50Dk-v",
                                           "createdAt":  "2024-02-15T19:33:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danroth27",
                                           "body":  "\u003e Thanks for the clarification, can Blazor take advantage of `ValidateObjectMembersAttribute` from options extensions library? or even the options validation source gen?\r\n\r\nAdding @javiercn and @captainsafia for their thoughts on this.",
                                           "updatedAt":  "2024-02-15T19:33:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50Do5w",
                                           "createdAt":  "2024-02-15T19:38:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "\u003e Thanks for the clarification, can Blazor take advantage of ValidateObjectMembersAttribute from options extensions library? or even the options validation source gen?\r\n\r\nThe attributes and source generator are likely not reusable as-is in minimal APIs/Blazor since they need to conform to the semantics of those frameworks. We\u0027re looking at seeing what kind of code reuse is possible between the options validation generator and what we will add for minimal/Blazor via the work outlined in https://github.com/dotnet/aspnetcore/issues/46349",
                                           "updatedAt":  "2024-02-15T19:38:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50Gwr_",
                                           "createdAt":  "2024-02-16T08:10:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilya-scale",
                                           "body":  "@eiriktsarpalis Following your suggestion we can keep the `Validator` issue we identified in here and I have opened a new bug for the Asp.Net Core validation: dotnet/aspnetcore#54070. It got routed to System.Text.Json ironically enough since I wrote explicitly it should not be :) (I guess the bot just found out that substring and did it)",
                                           "updatedAt":  "2024-02-16T08:11:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50Ih3M",
                                           "createdAt":  "2024-02-16T13:32:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODXDDlA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ilya-scale",
                                                                               "createdAt":  "2024-02-16T13:45:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e It got routed to System.Text.Json ironically enough since I wrote explicitly it should not be :) (I guess the bot just found out that substring and did it)\r\n\r\nIt\u0027s because `dotnet/runtime` doesn\u0027t contain aspnet components. That\u0027s fine, I transferred it to the relevant repo.",
                                           "updatedAt":  "2024-02-16T13:32:25Z"
                                       }
                                   ],
                         "totalCount":  22
                     },
        "title":  "DataAnnotations validation not supported for properties of nested values.",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98399",
        "createdAt":  "2024-02-13T17:07:10Z",
        "number":  98399,
        "author":  "BachiMjavanadze",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5pbAQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "naji-makhoul",
                                            "createdAt":  "2024-07-24T07:55:19Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-02-15T09:46:00Z",
        "body":  "I think it would be better if the `[AllowedValues]` and `[Denied Values]` attributes had support for case insensitivity. So instead:\r\n\r\n`[AllowedValues(\"bad\", \"Bad\", \"bAd\", \"baD\", \"BAD\")]`\r\n\r\nor defining custom attribute, possible to write this:\r\n\r\n`[AllowedValues(\"bad\" CaseInsensitive = true)]`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOc_lF0g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5z3k0U",
                                           "createdAt":  "2024-02-14T14:44:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel-dataannotations\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI think it would be better if the `[AllowedValues]` and `[Denied Values]` attributes had support for case insensitivity. So instead:\r\n\r\n`[AllowedValues(\"bad\", \"Bad\", \"bAd\", \"baD\", \"BAD\")]`\r\n\r\nor defining custom attribute, possible to write this:\r\n\r\n`[AllowedValues(\"bad\" CaseInsensitive = true)]`\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eBachiMjavanadze\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-14T14:44:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z3qwK",
                                           "createdAt":  "2024-02-14T14:53:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "The attributes work on arbitrary values, not just strings. A general-purpose API would necessitate passing an `IEqualityComparer` parameter, however that typically doesn\u0027t work with attribute annotations -- you would need to manually define one via inheritance.",
                                           "updatedAt":  "2024-02-14T14:53:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z-UXS",
                                           "createdAt":  "2024-02-15T09:45:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BachiMjavanadze",
                                           "body":  "Ok!",
                                           "updatedAt":  "2024-02-15T09:45:59Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "`[AllowedValues]` and `[DeniedValues]` case insensitivness suport",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101965",
        "createdAt":  "2024-05-07T07:54:06Z",
        "number":  101965,
        "author":  "mrudat",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODB9-Aw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xriuk",
                                            "createdAt":  "2024-10-24T10:17:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-10-24T13:05:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nesterenko-kv",
                                            "createdAt":  "2024-11-01T15:44:07Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "tlunsfordCXP",
                                            "createdAt":  "2025-05-02T15:36:34Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-02-11T07:26:04Z",
        "body":  "### Background and motivation\n\nIt would be useful to supply a Regex object to a RegularExpressionAttribute so that you can use a compile-time Regex for data validation.\n\n### API Proposal\n\n```diff\n+ using System.Diagnostics.CodeAnalysis;\n  namespace System.ComponentModel.DataAnnotations;\n\n  public class RegularExpressionAttribute : ValidationAttribute\n  {\n        /// \u003csummary\u003e\n        ///     Constructor that accepts the regular expression pattern\n        /// \u003c/summary\u003e\n        /// \u003cparam name=\"pattern\"\u003eThe regular expression to use.  It cannot be null.\u003c/param\u003e\n        public RegularExpressionAttribute([System.Diagnostics.CodeAnalysis.StringSyntaxAttribute(\"Regex\")] string pattern) { }\n\n+       /// \u003csummary\u003e\n+       /// Create a \u003csee cref=\"RegularExpressionAttribute\"/\u003e using a \u003csee cref=\"Regex\"/\u003e returned from the specified type and method name.\n+       /// \u003c/summary\u003e\n+       /// \u003cparam name=\"regexType\"\u003eThe type that contains the method returning a \u003csee cref=\"Regex\"/\u003e.\u003c/param\u003e\n+       /// \u003cparam name=\"regexMethodName\"\u003eThe method name that returns the \u003csee cref=\"Regex\"/\u003e. The method must be static and accept no arguments.\u003c/param\u003e\n+       /// \u003cexception cref=\"ArgumentNullException\"\u003eWhen the \u003cparamref name=\"regexType\"/\u003e is \u003cc\u003enull\u003c/c\u003e.\u003c/exception\u003e\n+       /// \u003cexception cref=\"ArgumentNullException\"\u003eWhen the \u003cparamref name=\"regexMethodName\"/\u003e is \u003cc\u003enull\u003c/c\u003e.\u003c/exception\u003e\n+       /// \u003cexception cref=\"ArgumentException\"\u003eWhen the \u003cparamref name=\"regexMethodName\"/\u003e is empty or consists only of white-space characters.\u003c/exception\u003e\n+       public RegularExpressionAttribute([DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes.AllMethods)] System.Type regexType, string regexMethodName) { }\n  }\n\n```\n\n### API Usage\n\n```csharp\nusing System.ComponentModel.DataAnnotations;\nusing System.Text.RegularExpressions;\n\nvar model = new Model {  MustTypeAgree = \"agree\" };\nvar results = new List\u003cValidationResult\u003e();\nvar isValid = Validator.TryValidateObject(model, new ValidationContext(model), results, true);\n\nConsole.WriteLine($\"MustTypeAgree: {model.MustTypeAgree}\");\nConsole.WriteLine($\"IsValid: {isValid}\");\n\n// MustTypeAgree: agree\n// IsValid: true\n\npublic partial class Model\n{\n    [Required]\n    [RegularExpression(typeof(Model), \"GetAgreeRegex\")]\n    public string? MustTypeAgree { get; set; }\n\n    [GeneratedRegex(\"AGREE\", RegexOptions.IgnoreCase)]\n    public static partial Regex GetAgreeRegex();\n}\n```\n\n### Alternative Designs\n\n1. Skip integrating `[GeneratedRegex]` with `RegularExpressionAttribute` and instead use a source generator to create custom regex validation attribute class.\n2. Implement a separate `ValidationAttribute` or perhaps derive from `RegularExpressionAttribute` to handle this scenario separately.\n3. Instead of adding a constructor overload, add a `Type? RegexType { get; init; }` property that would pair with the existing `Pattern` such that when it\u0027s set, we would enter into the new behavior.\n\n### Risks\n\n1. For sake of design-time scenarios, we try to avoid throwing exceptions (other than argument validation exceptions) from attribute constructors. With this in mind, we need defensive code in the new attribute initialization.\n2. Any validation systems that have special awareness of `RegularExpressionAttribute` to perform special-purpose logic might not take advantage of the new behavior and end up reconstructing the `Regex` instance from only the pattern, ignoring any `RegexOptions` specified on the `[GeneratedRegex]`.\n    * For instance, [Swashbuckle.AspNetCore](https://github.com/domaindrivendev/Swashbuckle.AspNetCore/blob/master/src/Swashbuckle.AspNetCore.SwaggerGen/SchemaGenerator/OpenApiSchemaExtensions.cs#L229) extracts the `Pattern` from the attribute and embeds it into the OpenApiSchema. This will not respect `RegexOptions.IgnoreCase` or other options.\n4. `GeneratedRegexAttribute` applies a default timeout of `Timeout.Infinite` while `RegularExpressionAttribute` applies a default of 2000ms. While we should likely respect a non-infinite timeout specified on `[GeneratedRegex]`, we need to make sure the 2000ms default for the attribute is still applied instead of `Timeout.Infinite`.\n\u003cdetails\u003e\n\u003csummary\u003eOriginal Proposal\u003c/summary\u003e\n\n### API Proposal\n\n```csharp\nnamespace System.ComponentModel.DataAnnotations;\n\npublic class RegularExpressionAttribute : ValidationAttribute\n{\n    /// \u003csummary\u003e\n    /// Initializes a new instance of the System.ComponentModel.DataAnnotations.RegularExpressionAttribute class.\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"pattern\"\u003eThe \u003csee cref=\"Regex\"/\u003e that is used to validate the data field value.\u003c/param\u003e\n    /// \u003cexception cref=\"System.ArgumentNullException\"\u003epattern is null\u003c/exception\u003e\n    public RegularExpressionAttribute(Regex pattern);\n}\n```\n\n\n### API Usage\n\n```csharp\npublic partial class CannedRegularExpressionAttribute() : RegularExpressionAttribute(TheRegex())\n{\n    [GeneratedRegex(@\"\u003cInsert some complicated regular expression here\u003e\")]\n    private static partial Regex TheRegex();\n}\n```\n\n```csharp\npublic partial record ARecord {\n    [RegularExpressionAttribute(TheRegex())]\n    public string NeedsComplexValidation;\n\n    [GeneratedRegex(@\"\u003cInsert some complicated regular expression here\u003e\")]\n    private static partial Regex TheRegex();\n}\n```\n\n\n### Alternative Designs\n\nPerhaps there would be extra performance gains from generating a RegularExpressionAttribute\u0027s Validation method directly?\n\n### Risks\n\nNo API (that I can spot) on Regex allows specifying matchTimeout for an existing Regex object.\n\u003c/details\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnfPy_Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc59C3V6",
                                           "createdAt":  "2024-05-07T09:51:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrudat",
                                           "body":  "The proposed change lives in @dotnet/area-system-componentmodel-dataannotations , though we may need to expose the timeout field on the Regex object.",
                                           "updatedAt":  "2024-05-07T09:51:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59C4s8",
                                           "createdAt":  "2024-05-07T09:54:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODqgmxQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2024-05-10T08:49:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2024-05-13T18:43:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-18T22:40:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Attribute parameters can only be compile-time constants, and limited to primitive types only.\r\n\r\nThe proposed change won\u0027t work at all.",
                                           "updatedAt":  "2024-05-07T09:54:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59DKXS",
                                           "createdAt":  "2024-05-07T10:21:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrudat",
                                           "body":  "Ah, so the only way to apply compile-time generation to RegularExpressionAttribute is to build a new source code generator for this specific case.\r\n\r\nThat sounds like it\u0027s entirely possible, but a significant amount of work for not _quite_ as much performance improvement as the original Regex compile-time generator, not least of which is designing how to attach the generated code.\r\n\r\nThat said, without looking at the relevant code, I imagine that extending compile-time generation to RegularExpressionAttribute should allow for the reuse of much of the work that went into Regex support.\r\n\r\nOn the other hand, https://learn.microsoft.com/en-us/dotnet/core/extensions/options-validation-generator may emit code that pre-compiles any required Regex objects, which would make pre-compiling the Regex used in the RegularExpressionAttribute but _not_ being used for options validation even more of a niche case.",
                                           "updatedAt":  "2024-05-07T10:21:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59E9aI",
                                           "createdAt":  "2024-05-07T13:47:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I imagine that extending compile-time generation to RegularExpressionAttribute should allow for the reuse of much of the work that went into Regex support.\r\n\r\nCan you elaborate on how it would work? I don\u0027t see a good way currently with the capabilities of source generators today.",
                                           "updatedAt":  "2024-05-07T13:47:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59LzBH",
                                           "createdAt":  "2024-05-08T10:17:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Mrxx99",
                                           "body":  "It would be really useful if at least Delegate/Action/Func could be used with Attributes, would that be possible ro implement? Than the RegexArtribute could have a Func\u003cRegex\u003e parameter",
                                           "updatedAt":  "2024-05-08T10:17:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59L4so",
                                           "createdAt":  "2024-05-08T10:30:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODikFFg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2024-05-21T09:44:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e It would be really useful if at least Delegate/Action/Func could be used with Attributes, would that be possible ro implement?\r\n\r\nBarely. Attributes can only reference method names.\r\nDelegates are runtime concepts. Attribute data is purely compile time, so it should be method instead of delegate.",
                                           "updatedAt":  "2024-05-08T10:30:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59QBep",
                                           "createdAt":  "2024-05-08T20:15:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Would running the source generator manually then pasting the output in help?\n\nStrictly, I don\u0027t know whether we guarantee that such code will not break in an upgrade (@stephentoub?)",
                                           "updatedAt":  "2024-05-08T20:15:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59QCS2",
                                           "createdAt":  "2024-05-08T20:17:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e public partial record ARecord {\r\n\u003e    [RegularExpressionAttribute(TheRegex())]\r\n\r\nAttributes used at design-time can\u0027t have non-trivial classes.",
                                           "updatedAt":  "2024-05-08T20:17:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-dgDy",
                                           "createdAt":  "2024-05-21T03:37:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrudat",
                                           "body":  "After some thought, if you\u0027re willing to use a subclass of RegularExpressionAttribute to have a named regex constraint (I can\u0027t see why not, as it should be a net improvement to actually name the purpose of the constraint), you could perhaps do something like:\r\n\r\n```cs\r\npublic class RegularExpressionAttribute\r\n{\r\n    // Not ideal because it exposes a requirement for a specific factory method rather than the method group as a whole.\r\n    private readonly Func\u003c..., Regex\u003e regexFactory;\r\n\r\n    public RegularExpressionAttribute([StringSyntax(\"Regex\")] string pattern)\r\n        : this((...) =\u003e new Regex(..., pattern: pattern))\r\n    {\r\n    }\r\n\r\n    public RegularExpressionAttribute(Func\u003c..., Regex\u003e regexFactory)\r\n    {\r\n        this.regexFactory = regexFactory;\r\n    }\r\n\r\n    private Regex MethodThatBuildsTheRequiredRegex(...)\r\n    {\r\n        // instead of new Regex(pattern, ...)\r\n        var regex = this.regexFactory(...);\r\n    }\r\n}\r\n```\r\n\r\nFor example, this looks like it would work:\r\n\r\n```cs\r\n/// \u003csummary\u003e\r\n/// Specifies that a data field must be a valid MQTT identifier.\u003cbr /\u003e\r\n/// Must consist of characters from the character class [a-zA-Z0-9_-] (alphanumerics, underscore and hyphen).\r\n/// \u003c/summary\u003e\r\npublic partial class MqttIdentifierAttribute() : RegularExpressionAttribute(MqttIdentifierRegex)\r\n{\r\n    [GeneratedRegex(@\"^[a-zA-Z0-9_-]+$\")]\r\n    private static partial Regex MqttIdentifierRegex();\r\n}\r\n```",
                                           "updatedAt":  "2024-05-21T03:37:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FXpeF",
                                           "createdAt":  "2024-07-18T20:58:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel-dataannotations\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-18T20:58:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RISIi",
                                           "createdAt":  "2024-10-24T10:14:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Xriuk",
                                           "body":  "Wouldn\u0027t it be feasible to add an empty constructor and a string `Method` property to the attribute (since a string parameter would clash with the already defined pattern constructor)? This would then invoke the method in the same Type.\n\nWe could also add a Type parameter to specify the type where to look for the method to invoke (this could also be a constructor of its own).\n\nThis way we could do something like:\n```csharp\npublic partial record ARecord {\n    [RegularExpressionAttribute(Method = nameof(TheRegex))]\n    public string NeedsComplexValidation1;\n\n    [RegularExpressionAttribute(typeof(AnotherClass), nameof(AnotherClass.AnotherRegexMethod))]\n    public string NeedsComplexValidation2;\n\n\n    [GeneratedRegex(@\"\u003cInsert some complicated regular expression here\u003e\")]\n    private static partial Regex TheRegex();\n}\n```",
                                           "updatedAt":  "2024-10-24T10:14:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ducXL",
                                           "createdAt":  "2025-02-09T12:00:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQmNuQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tlunsfordCXP",
                                                                               "createdAt":  "2025-05-02T15:48:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "I updated the issue description to capture a revised proposal that adds a constructor overload accepting `(Type regexType, string regexMethodName)`. I gave the implementation a shot, and it seems to be viable and pair with the `[GeneratedRegex]` well. It\u0027s in [jeffhandley:runtime:jeffhandley/generatedregex-validator](https://github.com/dotnet/runtime/compare/main...jeffhandley:runtime:jeffhandley/generatedregex-validator?expand=1).\n\nMarking as https://github.com/dotnet/runtime/labels/api-ready-for-review.",
                                           "updatedAt":  "2025-02-09T12:00:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6d8_L9",
                                           "createdAt":  "2025-02-11T07:26:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Round-tripping scenarios need more evaluation. There are multiple places where this attribute is recognized and used to expose its pattern to clients. Any RegexOptions would not be recognized with that, leading to inconsistent client and server validation.",
                                           "updatedAt":  "2025-02-11T07:26:03Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "[API Proposal]: Allow supplying a Regex object to a RegularExpressionAttribute",
        "labels":  [
                       "api-suggestion",
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106806",
        "createdAt":  "2024-08-22T10:50:00Z",
        "number":  106806,
        "author":  "rjperes",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6aKTg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-08-22T14:21:29Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-08-29T09:45:58Z",
        "body":  "### Background and motivation\r\n\r\nOne of the most common uses of AllowedValues/DeniedValues is with strings, however, they are checked case-sensitive, and we probably want to allow case-insensitive comparisons too. Maybe a case of adding an extra optional constructor argument of type StringComparison, which, of course, would only apply to string values.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.ComponentModel.DataAnnotations;\r\n\r\npublic class AllowedValuesAttribute : ValidationAttribute\r\n{\r\n    public AllowedValuesAttribute(StringComparison comparer, params string?[] values) : this(values.OfType\u003cobject\u003e().ToArray())\r\n    {\r\n    }\r\n\r\n    public AllowedValuesAttribute(params string?[] values) : this(StringComparison.CurrentCulture, values)\r\n    {\r\n    }\r\n}\r\n\r\npublic class DeniedValuesAttribute : ValidationAttribute\r\n{\r\n    public DeniedValuesAttribute(StringComparison comparer, params string?[] values) : this(values.OfType\u003cobject\u003e().ToArray())\r\n    {\r\n    }\r\n\r\n    public DeniedValuesAttribute(params string?[] values) : this(StringComparison.CurrentCulture, values)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\n[AllowedValues(StringComparison.InvariantCultureIgnoreCase, \"red\", \"green\", \"blue\")]\r\npublic string Color { get; set; }\r\n\r\n[DeniedValues(\"a\", \"e\", \"i\", \"o\", \"u\")]\r\npublic string Consonants { get; set; }\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOigZEFQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6JWcoV",
                                           "createdAt":  "2024-08-22T10:50:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel-dataannotations\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-22T10:50:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JYSZ7",
                                           "createdAt":  "2024-08-22T14:40:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rjperes",
                                           "body":  "Not really, it’s actually an enum…\r\n________________________________\r\nDe: Juliano Leal Goncalves ***@***.***\u003e\r\nEnviado: Thursday, August 22, 2024 3:20:36 PM\r\nPara: dotnet/runtime ***@***.***\u003e\r\nCc: Ricardo Peres ***@***.***\u003e; Author ***@***.***\u003e\r\nAssunto: Re: [dotnet/runtime] [API Proposal]: Have AllowedValuesAttribute and DeniedValuesAttribute support case-insensitive strings (Issue #106806)\r\n\r\n\r\n[AllowedValues(“red”, “green”, “blue”, comparer: StringComparison.InvariantCultureIgnoreCase)]\r\n\r\nPretty sure this will not compile since StringComparison.InvariantCultureIgnoreCase is not a const value (it is static).\r\n\r\nAttributes only allow consts to be passed into them.\r\n\r\n—\r\nReply to this email directly, view it on GitHub\u003chttps://github.com/dotnet/runtime/issues/106806#issuecomment-2304798467\u003e, or unsubscribe\u003chttps://github.com/notifications/unsubscribe-auth/AABG5SNRZG6MBWM62FLCDH3ZSXXTJAVCNFSM6AAAAABM534R5GVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGMBUG44TQNBWG4\u003e.\r\nYou are receiving this because you authored the thread.Message ID: ***@***.***\u003e\r\n",
                                           "updatedAt":  "2024-08-22T14:40:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JZ4Dm",
                                           "createdAt":  "2024-08-22T17:16:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e Not really, it’s actually an enum…\r\n\r\nWhich is why I deleted my post right after posting @rjperes .",
                                           "updatedAt":  "2024-08-22T17:16:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JzUwK",
                                           "createdAt":  "2024-08-27T08:49:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "The attributes don\u0027t only work with strings, so I\u0027m not sure what should happen in the following scenario:\r\n```csharp\r\n[AllowedValues(null, false, 1, \"value\", comparer: StringComparison.OrdinalIgnoreCase)]\r\npublic object? Values { get; set; }\r\n```\r\nThis might sound like a niche example, but from a maintainer\u0027s perspective we need to make sure this doesn\u0027t result in unexpected behavior or unexpected exceptions. A more general-purpose solution might involve accepting an `IEqualityComparer` parameter instead (although granted you can\u0027t inline a `StringComparer` value in an attribute annotations, you would still need to subclass the attribute to support case-insensitive string values).",
                                           "updatedAt":  "2024-08-27T08:49:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JzbBx",
                                           "createdAt":  "2024-08-27T09:00:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rjperes",
                                           "body":  "As I mentioned in my example, this would apply to strings only, for all other cases this new parameter should be ignored. I think this is important because by large, in my use cases, I need to compare values case-insensitive.",
                                           "updatedAt":  "2024-08-27T09:00:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JzfjQ",
                                           "createdAt":  "2024-08-27T09:09:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e As I mentioned in my example, this would apply to strings only, for all other cases this new parameter should be ignored.\r\n\r\nSilently ignoring configuration parameters on the basis of input type is not a workable design, and is not consistent with how the attribute currently works or how similar APIs dealing with customized equality work (c.f. LINQ overloads accepting `IEqualityComparer\u003cT\u003e`). If we did consider this, it would need to accept an `IEqualityComparer` parameter which could then be subclassed.",
                                           "updatedAt":  "2024-08-27T09:09:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6J5s9o",
                                           "createdAt":  "2024-08-27T21:23:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwBR2Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2024-08-28T11:17:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rjperes",
                                           "body":  "Or, provide a constructor overload that takes strings and the StringComparison parameter.",
                                           "updatedAt":  "2024-08-27T21:23:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6J_KHM",
                                           "createdAt":  "2024-08-28T11:17:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I like that idea. Could you update the proposal to reflect that?",
                                           "updatedAt":  "2024-08-28T11:17:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6J_OZ4",
                                           "createdAt":  "2024-08-28T11:25:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Another issue with the proposal as it stands is that `params` must always be the last parameter so the constructor should look as follows:\r\n\r\n```C#\r\npublic AllowedValuesAttribute(StringComparison comparer, params string?[] values);\r\n```\r\n\r\nWhich would be invoked as follows:\r\n\r\n```C#\r\n[AllowValues(StringComparison.OrdinalIgnoreCase, \"x\", \"y\")]\r\n```",
                                           "updatedAt":  "2024-08-28T11:25:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6J_PGt",
                                           "createdAt":  "2024-08-28T11:26:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rjperes",
                                           "body":  "Will do! Would a PR also be useful?",
                                           "updatedAt":  "2024-08-28T11:26:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6J_Pkn",
                                           "createdAt":  "2024-08-28T11:27:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Not yet, this would need to go through API review first, although providing a prototype branch with working unit tests should provide a useful proof of concept.",
                                           "updatedAt":  "2024-08-28T11:32:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KBkQV",
                                           "createdAt":  "2024-08-28T15:24:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rjperes",
                                           "body":  "Proposed changes for AllowedValuesAttribute:\r\n\r\n```\r\npublic class AllowedValuesAttribute : ValidationAttribute\r\n{\r\n    private readonly StringComparison? _comparer;\r\n\r\n    public AllowedValuesAttribute(StringComparison comparer, params string?[] values) : this(values.OfType\u003cobject\u003e().ToArray())\r\n    {\r\n        _comparer = comparer;\r\n    }\r\n\r\n    public AllowedValuesAttribute(params string?[] values) : this(StringComparison.CurrentCulture, values)\r\n    {\r\n    }\r\n\r\n    public override bool IsValid(object? value)\r\n    {\r\n        foreach (object? allowed in Values)\r\n        {\r\n            if (allowed is null ? value is null : Compare(allowed, value))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private bool Compare(object allowed, object? value)\r\n    {\r\n        if (_comparer != null)\r\n        {\r\n            return string.Equals(allowed as string, value as string, _comparer.Value);\r\n        }\r\n\r\n        return allowed.Equals(value);\r\n    }\r\n}\r\n```\r\n\r\nThe only way _comparer can be set is by using one of the constructors that take strings. Added an overload without StringComparison to allow skipping this parameter while supplying only strings.",
                                           "updatedAt":  "2024-08-29T09:34:50Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "[API Proposal]: Have AllowedValuesAttribute and DeniedValuesAttribute support case-insensitive strings",
        "labels":  [
                       "api-suggestion",
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109672",
        "createdAt":  "2024-11-09T20:18:58Z",
        "number":  109672,
        "author":  "zgabi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-10T18:54:51Z",
        "body":  "### Description\n\nThe `RangeAttribute` fails to parse the `\"2,0\"` double value, which is a valid hungarian format of the `2.0` number even when the `ConvertValueInInvariantCulture` is set to false.\n\n\n### Reproduction Steps\n\n```C#\n            void Check(RangeAttribute ra, object o)\n            {\n                try\n                {\n                    Console.WriteLine(\"result: \" + ra.IsValid(o));\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(\"exception: \" + ex.Message);\n                }\n            }\n\n            Thread.CurrentThread.CurrentCulture = new CultureInfo(\"hu-HU\");\n            Thread.CurrentThread.CurrentUICulture = new CultureInfo(\"hu-HU\");\n\n            // in the hungarian language the decimal separator is the comma (\",\")\n            // the group separator is the space (\" \")\n\n            RangeAttribute r;\n            r = new RangeAttribute(1.1, 9.5) { ConvertValueInInvariantCulture = true };\n            Check(r, 2.0); // True =\u003e OK\n            Check(r, \"2.0\"); // True =\u003e OK\n            Check(r, \"2,0\"); // Converts to 20, False =\u003e OK\n\n            r = new RangeAttribute(typeof(double), \"1.1\", \"9.5\")\n            {\n                ParseLimitsInInvariantCulture = true,\n                ConvertValueInInvariantCulture = true\n            };\n            Check(r, 2.0); // True =\u003e OK\n            Check(r, \"2.0\"); // True =\u003e OK\n            Check(r, \"2,0\"); // Exception, why? It should be converted to 20 =\u003e False\n            // however this is not a big issue, since \"2,0\" looks a strange string format for 20\n            // but double.Parse and Convert.ToDouble returns 20\n\n            r = new RangeAttribute(1.1, 9.5) { ConvertValueInInvariantCulture = false };\n            Check(r, 2.0); // True =\u003e OK\n            Check(r, \"2.0\"); // True, why? It should throw exception\n            Check(r, \"2,0\"); // False, why? It should convert to 2 which is in the range\n            // This is the biggest issue!\n```\n\n### Expected behavior\n\nSee the comments in the prevous section.\n\n### Actual behavior\n\nSee the comments in the prevous section.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n```C#\n            // When I specify the min and max values as string it seems to work:\n            r = new RangeAttribute(typeof(double), \"1.1\", \"9.5\")\n            {\n                ParseLimitsInInvariantCulture = true,\n                ConvertValueInInvariantCulture = false\n            };\n            Check(r, 2.0); // True =\u003e OK\n            Check(r, \"2.0\"); // Exception =\u003e OK\n            Check(r, \"2,0\"); // True =\u003e OK\n\n```\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkwkSWQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6TA8hX",
                                           "createdAt":  "2024-11-09T23:15:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@Check could you share your `Check` method code to know what you are doing there? Are you just calling `RangeAttribute.IsValid`? and what is the value of `CultureInfo.CurrentCulture` in your environment? ",
                                           "updatedAt":  "2024-11-09T23:17:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TA8ta",
                                           "createdAt":  "2024-11-09T23:19:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zgabi",
                                           "body":  "Yes, simply calling `IsValid` in a try catch. Added the method.\nhu-HU is the culture in my system.\n",
                                           "updatedAt":  "2024-11-09T23:20:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TBFla",
                                           "createdAt":  "2024-11-10T01:18:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Here are answers for the questions but not necessary I am saying this should be the correct behavior. So, it looks like this type needs some fixes. Before I answer, just for the record, this type introduced long ago in the PR https://github.com/dotnet/corefx/pull/501.\n\n\u003e             Check(r, \"2,0\"); // Exception, why? It should be converted to 20 =\u003e False\n\nWhen creating the RangeAttribute using signature like `r = new RangeAttribute(typeof(double), \"1.1\", \"9.5\")`, this internally will use [DoubleConverted.FromString(..)](https://github.com/dotnet/runtime/blob/d8208737f8b1ede2c6673a89769dc29fb7a7f6af/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/DoubleConverter.cs#L35) which will call `double.Parse(value, NumberStyles.Float, formatInfo);`.  Using `NumberStyles.Float` means the parse will not handle the group separator. While using Invariant culture and parsing `2,0`, this will throw exception as `,` is not recognized because it is a group separator. \nNote, if you create the `RangeAttribute` using signature `r = new RangeAttribute(1.1, 9.5)`, this will cause using `Convert.ToDouble` which eventually use [DoubleConverter.FromString(string value, int radix) ](https://github.com/dotnet/runtime/blob/d8208737f8b1ede2c6673a89769dc29fb7a7f6af/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/DoubleConverter.cs#L27) which eventually will parse the string including the group separator and the parse will succeed at that time. \n\n\u003e             Check(r, \"2.0\"); // True, why? It should throw exception\n\u003e            Check(r, \"2,0\"); // False, why? It should convert to 2 which is in the range\n\nWhen creating `RangeAttribute` using signature `r = new RangeAttribute(1.1, 9.5)` even if specifying `ConvertValueInInvariantCulture = false`, the Invariant culture will still be used in parsing this is because of the code https://github.com/dotnet/runtime/blob/d8208737f8b1ede2c6673a89769dc29fb7a7f6af/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/RangeAttribute.cs#L211. \n\nIn summary, it looks to me these two issues are bugs in the code. Your workaround looks good to me which creating the `RangeAttribute` using the signature `RangeAttribute(typeof(double), \"1.1\", \"9.5\")` and setting `ConvertValueInInvariantCulture = false`. \n",
                                           "updatedAt":  "2024-11-10T01:20:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TCRJZ",
                                           "createdAt":  "2024-11-10T18:53:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I discover the behavior of the second issue is already documented [RangeAttribute.ConvertValueInInvariantCulture Remarks](https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.rangeattribute.convertvalueininvariantculture?view=net-8.0#remarks). \n\nRemarks\nThis property has no effect on the constructors with [Int32](https://learn.microsoft.com/en-us/dotnet/api/system.int32?view=net-8.0) or [Double](https://learn.microsoft.com/en-us/dotnet/api/system.double?view=net-8.0) parameters, which always use the invariant culture for any conversions of the validated value.\n\nThis will leave this issue with one problem which is keep the double parsing consistent regardless of the used constructor. ",
                                           "updatedAt":  "2024-11-10T18:54:51Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "RangeAttribute double parsing issue with hungarian culture",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110917",
        "createdAt":  "2024-12-23T16:39:05Z",
        "number":  110917,
        "author":  "kmcclellan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC96KNQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2025-01-06T16:11:49Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-16T07:08:51Z",
        "body":  "### Description\n\nYou will occasionally get an `InvalidCastException` when using `Validator` to validate one or more `RangeAttribute` from multiple threads.\n\n### Reproduction Steps\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Reflection;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nconst int repeat = 100_000;\nvar exceptions = 0;\n\n// Validator loads attributes from TypeDescriptor (which caches instances).\nvar rangeAttribute = TypeDescriptor.GetProperties(typeof(TestOptions))\n    .Find(nameof(TestOptions.WaitTime), false)\n    ?.Attributes.OfType\u003cRangeAttribute\u003e().FirstOrDefault();\n\nvar rangePropertiesToReset = new List\u003cKeyValuePair\u003cPropertyInfo, object?\u003e\u003e();\n\nforeach (var propertyInfo in typeof(RangeAttribute)\n    .GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic))\n{\n    if (propertyInfo.CanRead \u0026\u0026 propertyInfo.CanWrite)\n    {\n        // We only have a chance to reproduce when attribute is in its initial state.\n        rangePropertiesToReset.Add(new(propertyInfo, propertyInfo.GetValue(rangeAttribute)));\n    }\n}\n\nfor (var i = 0; i \u003c repeat; i++)\n{\n    Parallel.For(\n        0,\n        2,\n        index =\u003e\n        {\n            if (index == 0)\n            {\n                // May help to increase on a slower machine (or vice versa).\n                Thread.SpinWait(50);\n            }\n\n            var options = new TestOptions();\n            var context = new ValidationContext(options) { MemberName = nameof(TestOptions.WaitTime) };\n\n            try\n            {\n                Validator.ValidateProperty(options.WaitTime, context);\n            }\n            catch (InvalidCastException exception)\n            {\n                if (Interlocked.Increment(ref exceptions) == 1)\n                {\n                    Console.WriteLine(exception);\n                }\n            }\n        });\n\n    foreach (var (propertyInfo, propertyValue) in rangePropertiesToReset)\n    {\n        propertyInfo.SetValue(rangeAttribute, propertyValue);\n    }\n}\n\nConsole.WriteLine();\n\nvar frequency = exceptions / (double)repeat;\nConsole.WriteLine($\"{exceptions} exceptions encountered ({frequency:P4})\");\n\nclass TestOptions\n{\n    [Range(typeof(TimeSpan), \"00:00:00\", \"01:00:00\")]\n    public TimeSpan? WaitTime { get; set; }\n}\n```\n\n### Expected behavior\n\nValidator members should not throw exceptions when invoked from multiple threads.\n\n### Actual behavior\n\n```\nSystem.InvalidCastException: Unable to cast object of type \u0027System.TimeSpan\u0027 to type \u0027System.String\u0027.\n   at System.ComponentModel.DataAnnotations.RangeAttribute.SetupConversion()\n   at System.ComponentModel.DataAnnotations.RangeAttribute.IsValid(Object value)\n   at System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(Object value, ValidationContext validationContext)\n   at System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(Object value, ValidationContext validationContext)\n   at System.ComponentModel.DataAnnotations.Validator.TryValidate(Object value, ValidationContext validationContext, ValidationAttribute attribute, ValidationError\u0026 validationError)\n   at System.ComponentModel.DataAnnotations.Validator.GetValidationErrors(Object value, ValidationContext validationContext, IEnumerable`1 attributes, Boolean breakOnFirstError)\n   at System.ComponentModel.DataAnnotations.Validator.ValidateProperty(Object value, ValidationContext validationContext)\n   at Program.\u003c\u003ec__DisplayClass0_0.\u003c\u003cMain\u003e$\u003eb__0(Int32 index) in C:\\Users\\kylem\\Desktop\\HelloDataAnnotations\\Program.cs:line 48\n\n318 exceptions encountered (0.3180%)\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n* Use a lock to synchronize access to `Validator`.\n* Catch the exception and retry.\n\n### Configuration\n\n* .NET SDK 9.0.100 \n* .NET Runtime 9.0.0 \n* Windows 11 22631.4602 (x64)\n\n### Other information\n\nThis is likely to occur in applications using Polly - see [bug there](https://github.com/App-vNext/Polly/issues/2412).\n\nThe exception was previously reported as https://github.com/dotnet/runtime/issues/1143, which simply dismissed thread-safety as a requirement for the attribute instance. Given that attributes are cached at multiple levels by different static components, we need to consider where the best place is to handle this synchronization. If we don\u0027t solve it on the attribute level, I would argue that `Validator` should do its own synchronization (or we should be able to create multiple instances of `Validator` for use by multiple threads).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmJ2YxQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6YmFX4",
                                           "createdAt":  "2024-12-23T18:13:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel-dataannotations\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-23T18:13:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YnZjF",
                                           "createdAt":  "2024-12-24T00:23:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOECdxLg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kmcclellan",
                                                                               "createdAt":  "2025-01-14T22:17:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "The other workaround could be using the [options source generator](https://learn.microsoft.com/en-us/dotnet/core/extensions/options-validation-generator)? we have fixed the multi-threading issue there https://github.com/dotnet/runtime/pull/97045.",
                                           "updatedAt":  "2024-12-24T00:23:41Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "`InvalidCastException` with `System.ComponentModel.DataAnnotations.Validator` (multi-threaded)",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112111",
        "createdAt":  "2025-02-04T00:22:16Z",
        "number":  112111,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-04T18:14:48Z",
        "body":  "The following produces warnings on the `MinLength` attribute instance:\n\n```csharp\nusing Microsoft.Extensions.Options;\nusing System.ComponentModel.DataAnnotations;\n\nvar model = new Model { Name = \"abcd\" };\nvar result = model.Validate(null, model);\nConsole.WriteLine(result.Succeeded);\n\n[OptionsValidator]\npartial class Model : IValidateOptions\u003cModel\u003e {\n    [MinLength(4)]\n    public required string Name { get; set; }\n}\n```\n\n\u003e Program.cs(10,6): warning IL2026: Using member \u0027System.ComponentModel.DataAnnotations.MinLengthAttribute.MinLengthAttribute(Int32)\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. Uses reflection to get the \u0027Count\u0027 property on types that don\u0027t implement ICollection. This \u0027Count\u0027 property may be trimmed. Ensure it is preserved\n\n(This is true even when using the options validation source generator - even though the generator generates its own attribute types, the original attribute still exists in user code.)\n\nIt seems like the best pattern we can recommend at the moment is to add `UnconditionalSuppressMessage` to the property, but it seems like there should be a built-in way to do length validation that doesn\u0027t require suppressing warnings.\n\nThe MinLengthAttribute ctor is ruc because its IsValid implementation reflects over the instance type to get the Count property. Maybe that could be represented using generics, for example:\n\n```csharp\nclass MinLengthAttribute\u003cT\u003e : MinLengthAttribute\n    where T : ICollection\n{\n    public MinLengthAttribute(int length) {}\n    public override bool IsValid(object? value)\n    {\n        if (value is ICollection collection)\n        {\n            return collection.Count \u003e= Length;\n        }\n        throw ...;\n    }\n}\n```\n\nSomewhat related to https://github.com/dotnet/runtime/issues/82526.\n\n@eerhardt @tarekgh @eiriktsarpalis ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnQqt4g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6c6HCB",
                                           "createdAt":  "2025-02-04T00:22:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel-dataannotations\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-04T00:22:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6c6XCt",
                                           "createdAt":  "2025-02-04T01:19:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "This may assist with types that implement the `ICollection` interface (which is likely the common case), but it will not work for types that only have a `Count` property. Also, this will require exposing two types (for min and max length). For now, it is easy for the users to suppress this warning. ",
                                           "updatedAt":  "2025-02-04T01:19:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6c-i34",
                                           "createdAt":  "2025-02-04T11:33:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e The MinLengthAttribute ctor is ruc because its IsValid implementation reflects over the instance type to get the Count property. Maybe that could be represented using generics, for example:\n\nI presume you mean marking the generic parameter with a `DynamicallyAccessedMembers` annotation so that the reflection-based lookup doesn\u0027t warn. That could work, although we would need to replicate every single validation attribute type that needs to access the length of a value. I suspect the better approach might be to update our annotation strategy -- we could perhaps mark the `IsValid()` method as being wholesale linker-unsafe so that constructors (and validation libraries only relying on the constructors) do not warn.",
                                           "updatedAt":  "2025-02-04T11:33:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dCq3i",
                                           "createdAt":  "2025-02-04T18:14:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "\u003e I presume you mean marking the generic parameter with a DynamicallyAccessedMembers annotation so that the reflection-based lookup doesn\u0027t warn.\n\nThat could work, but what I meant was to constrain the generic parameter to implement ICollection and not support the reflection fallback.\n\n\u003e we could perhaps mark the IsValid() method as being wholesale linker-unsafe so that constructors (and validation libraries only relying on the constructors) do not warn.\n\nThat might work - though we generally try to avoid marking virtual methods with RequiresUnreferencedCode because it becomes viral quickly. In this case, `ValidationAttribute.IsValid` isn\u0027t inherently problematic, so marking it unsafe would exclude some legitimate derived attribute definitions.\n\n",
                                           "updatedAt":  "2025-02-04T18:14:46Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Trim warnings for MinLengthAttribute",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115982",
        "createdAt":  "2025-05-26T00:37:05Z",
        "number":  115982,
        "author":  "BillVanArk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-26T12:20:11Z",
        "body":  "### Description\n\nYou use `RangeAttribute` like this, to indicate a minimum and maximum value for data annotation:\n\n```C#\n    [Range(-50, 50)]\n    public string Value { get; set; }\n```\n\nIf you try to pass a value that is not an integer, or doesn’t fall between [-50, 50], `IsValid()` correctly returns false.\n\nHowever, if you pass a numerical value that falls outside the bounds of the type (e.g. 2147483648L which exceeds the maximum value of int), then you get an uncaught exception:\n\n```\nSystem.OverflowException: Value was either too large or too small for an Int32.\n   at System.Number.ThrowOverflowException[TInteger]()\n   at System.String.System.IConvertible.ToInt32(IFormatProvider provider)\n   at System.ComponentModel.DataAnnotations.RangeAttribute.\u003c\u003ec.\u003cSetupConversion\u003eb__37_0(Object v)\n   at System.ComponentModel.DataAnnotations.RangeAttribute.IsValid(Object value)\n   at System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(Object value, ValidationContext validationContext)\n```\n\nThe `try/catch` block in `RangeAttribute:IsValid()` should handle all exceptions by returning false, not just a selected few exception types.\n\n\n### Reproduction Steps\n\n```C#\nvar rangeAttribute = new RangeAttribute(-50, 50);\nrangeAttribute.IsValid(2147483648L); // throws OverflowException instead of returning false\n```\n\n### Expected behavior\n\nAny failure in IsValid() should return false.\n\n### Actual behavior\n\nSome failures in IsValid() result in an unhandled exception.\n\n### Regression?\n\nUnknown\n\n### Known Workarounds\n\nYou can subclass RangeAttribute, override IsValid(), and wrap the call to base.IsValid() in an exception handler:\n\n```C#\npublic class CorrectedRangeAttribute : RangeAttribute\n{\n    public CorrectedRangeAttribute(double minimum, double maximum) : base(minimum, maximum)\n    {\n    }\n\n    public CorrectedRangeAttribute(int minimum, int maximum) : base(minimum, maximum)\n    {\n    }\n\n    public CorrectedRangeAttribute(Type type, string minimum, string maximum) : base(type, minimum, maximum)\n    {\n    }\n\n    public override bool IsValid(object value)\n    {\n        try\n        {\n            return base.IsValid(value);\n        }\n        catch\n        {\n            return false;\n        }\n    }\n}\n```\n\n\n### Configuration\n\n- net8.0, net9.0\n- Windows 11 Enterprise 23H2\n- x64\n- This is a code problem, not an execution environment problem\n- N/A\n\n### Other information\n\nThe problem is in `runtime/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations\n/RangeAttribute.cs` in the function `public override bool IsValid(object? value)` where there is no final `catch` in the `try/catch` block. \n\nThis allows uncaught exceptions to flow out of a function which should always return either true or false.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrWw7JA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6tV8Mb",
                                           "createdAt":  "2025-05-26T00:37:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel-dataannotations\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-26T00:37:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tWvI6",
                                           "createdAt":  "2025-05-26T03:32:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@BillVanArk you can easily workaround this by doing\n\n```C#\n[Range(-50L, 50L)]\n```\n\nThis forces the use of long numbers, which should preserve the correct behavior.\n\nAlso, if you are interested, you can submit a PR to fix the issue in the code https://github.com/dotnet/runtime/blob/1548409aedce8dafcd87f962b3cef437528d108c/src/libraries/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/RangeAttribute.cs#L148\n\nJust catch the overflow exception there. We\u0027ll need to fix the options source gen too https://github.com/dotnet/runtime/blob/1548409aedce8dafcd87f962b3cef437528d108c/src/libraries/Microsoft.Extensions.Options/gen/Emitter.cs#L434",
                                           "updatedAt":  "2025-05-26T03:32:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tbBeV",
                                           "createdAt":  "2025-05-26T12:16:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BillVanArk",
                                           "body":  "\u003e [@BillVanArk](https://github.com/BillVanArk) you can easily workaround this by doing\n\u003e \n\u003e [Range(-50L, 50L)]\n\u003e This forces the use of long numbers, which should preserve the correct behavior.\n\u003e \n\nMy example was simplified from this code, which annotates that a string must be a non-negative decimal using the three parameter constructor:\n\n```\nvar rangeAttribute = new RangeAttribute(typeof(decimal), \"0\", \"79228162514264337593543950335\");\nAssert.Throws\u003cArgumentException\u003e(() =\u003e rangeAttribute2.IsValid(\"79228162514264337593543950336\"));\n```\n\n\u003e Also, if you are interested, you can submit a PR to fix the issue in the code\n\nThank you for the details, I\u0027ll look into that.\n",
                                           "updatedAt":  "2025-05-26T12:16:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tbDsk",
                                           "createdAt":  "2025-05-26T12:20:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BillVanArk",
                                           "body":  "Any fix that adds a case for `OverflowException` should also add one for `ArgumentException`:\n\nCurrent behavior:\n```\nvar rangeAttribute = new RangeAttribute(-50, 50);\nAssert.Throws\u003cOverflowException\u003e(() =\u003e rangeAttribute.IsValid(\"2147483648\"));\n\nvar rangeAttribute2 = new RangeAttribute(typeof(decimal), \"0\", \"79228162514264337593543950335\");\nAssert.Throws\u003cArgumentException\u003e(() =\u003e rangeAttribute2.IsValid(\"79228162514264337593543950336\"));\n```",
                                           "updatedAt":  "2025-05-26T12:20:10Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "RangeAttribute throws exception if value is outside range of type",
        "labels":  [
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117040",
        "createdAt":  "2025-06-26T07:43:26Z",
        "number":  117040,
        "author":  "Pankraty",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-26T17:08:19Z",
        "body":  "### Background and motivation\n\nBack in 2016 `[DisplayAttribute]` was made applicable for class declarations (#17139). Possible use cases were listed as \n* Auto-generate form captions\n* Auto-generate report captions\n* Use this information to extend nested property captions (like Person.Details.Address could get a label as Personal info / Address)\n* Auto-generate documentation (consuming Description and Order for example)\n* etc.\n\nThose are all valid use cases, but they also apply to enums and structs where this attribute is not allowed.\n\nIn my use case I wanted to generate API method description based on enum\u0027s display name.\n\n### API Proposal\n\n```diff\n[AttributeUsage(\n    AttributeTargets.Property |\n    AttributeTargets.Field |\n    AttributeTargets.Parameter |\n    AttributeTargets.Method |\n+   AttributeTargets.Enum |\n+   AttributeTargets.Struct |\n    AttributeTargets.Class,\n    AllowMultiple = false)]\npublic sealed class DisplayAttribute : Attribute\n```\n\n### API Usage\n\n```csharp\nusing System.ComponentModel.DataAnnotations;\n\n[Display(Name = \"This works well\")]\npublic class SampleClass;\n\n[Display(Name = \"This works well\")]\npublic record SampleRecord;\n\n[Display(Name = \"This does not compile\")]\npublic struct SampleStruct;\n\n[Display(Name = \"This does not compile\")]\npublic enum SampleEnum\n{\n    [Display(Name = \"This works well\")]\n    EnumMember\n}\n\n[Display(Name = \"This does not compile\")]\npublic record struct SampleRecordStruct;\n```\nThe proposal is to make all these samples working the same way, because there is no practical sense why structs and enums may not have `Display` attribute specified while classes may.\n\nAll the code needed for getting attributes from enum or struct definition exists, it\u0027s just a matter of making the attibute possible to assign to them.\n```csharp\n        typeof(SampleStruct).GetCustomAttributes(typeof(DisplayAttribute), inherit: false);\n        typeof(SampleRecordStruct).GetCustomAttributes(typeof(DisplayAttribute), inherit: false);\n        typeof(SampleEnum).GetCustomAttributes(typeof(DisplayAttribute), inherit: false);\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nI cannot see that this proposal can break any existing code: since `DisplayAttribute` is not assignable to enums and structs there should not be any logic relying on its existance on the type definition. This is just an enabler for applications using the attribute for documenting purposes or for showing human-readable descriptions on UI.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOs1DzXQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6zQ0ZE",
                                           "createdAt":  "2025-06-26T07:48:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel-dataannotations\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-26T07:48:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6zUPNd",
                                           "createdAt":  "2025-06-26T13:04:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I\u0027m surprised we didn\u0027t add Enum and Struct to this in https://github.com/dotnet/corefx/pull/24923 when Class was added. Seems it skipped actually going through API review, and thus skipped the typical discussion that happens around whether the proposals are complete or need to be expanded further.\n\n@jeffhandley, any reason to not allow this?",
                                           "updatedAt":  "2025-06-26T13:04:05Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: Allow DisplayAttribute on structs and enums",
        "labels":  [
                       "api-suggestion",
                       "area-System.ComponentModel.DataAnnotations"
                   ]
    }
]
